language: php
name: HumanEval_153_Strongest_Extension
results:
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    // ...\n    $array_length = count($extensions);\n    $strongest_extension\
    \ = '';\n    $strongest_extension_strength = 0;\n    $temp_strength = 0;\n   \
    \ for ($i = 0; $i < $array_length; $i++) {\n        $num_of_upper_case = 0;\n\
    \        $num_of_lower_case = 0;\n        $extension_length = strlen($extensions[$i]);\n\
    \        for ($j = 0; $j < $extension_length; $j++) {\n            if (ctype_upper($extensions[$i][$j]))\
    \ {\n                $num_of_upper_case++;\n            } else {\n           \
    \     $num_of_lower_case++;\n            }\n        }\n        $temp_strength\
    \ = $num_of_upper_case - $num_of_lower_case;\n        if ($temp_strength > $strongest_extension_strength)\
    \ {\n            $strongest_extension_strength = $temp_strength;\n           \
    \ $strongest_extension = $extensions[$i];\n        }\n    }\n    return $class_name\
    \ . '.' . $strongest_extension;\n}\n\nprint_r(Strongest_Extension(\"my_class\"\
    , array(\"AA\", \"Be\", \"CC\")));\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "my_class.AA\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxf3exgk3.php:50\n\
    Stack trace:\n#0 /tmp/tmpxf3exgk3.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpxf3exgk3.php\
    \ on line 50\n"
  timestamp: 1659824145
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n  $strongest_extension = \"\";\n  $best_strength = 0;\n  foreach\
    \ ($extensions as $extension) {\n    $CAP_count = preg_match_all(\"/[A-Z]/\",\
    \ $extension);\n    $SM_count = preg_match_all(\"/[a-z]/\", $extension);\n   \
    \ $current_strength = $CAP_count - $SM_count;\n    if ($current_strength > $best_strength)\
    \ {\n      $best_strength = $current_strength;\n      $strongest_extension = $extension;\n\
    \    }\n  }\n  return $class_name . \".\" . $strongest_extension;\n}\nfunction\
    \ candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    )) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    )) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"\
    __HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))\
    \ !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\"))\
    \ !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"\
    Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0i8eu0bu.php:39\n\
    Stack trace:\n#0 /tmp/tmp0i8eu0bu.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp0i8eu0bu.php\
    \ on line 39\n"
  timestamp: 1659824145
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $max_strength = 0;\n \
    \   foreach ($extensions as $extension) {\n        $strength = 0;\n        for\
    \ ($i = 0; $i < strlen($extension); $i++) {\n            if (ctype_upper($extension[$i]))\
    \ {\n                $strength++;\n            } else if (ctype_lower($extension[$i]))\
    \ {\n                $strength--;\n            }\n        }\n        if ($strength\
    \ > $max_strength) {\n            $max_strength = $strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return $class_name . \".\" . $strongest_extension;\n\
    }\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb1c16sty.php:44\n\
    Stack trace:\n#0 /tmp/tmpb1c16sty.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpb1c16sty.php\
    \ on line 44\n"
  timestamp: 1659824145
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $max_strength = 0;\n    $max_strength_index = -1;\n    foreach\
    \ ($extensions as $index => $extension) {\n        $strength = 0;\n        for\
    \ ($i = 0; $i < strlen($extension); $i++) {\n            if (ord($extension[$i])\
    \ >= ord('A') && ord($extension[$i]) <= ord('Z')) {\n                $strength++;\n\
    \            } else {\n                $strength--;\n            }\n        }\n\
    \        if ($strength >= $max_strength) {\n            $max_strength = $strength;\n\
    \            $max_strength_index = $index;\n        }\n    }\n    return $class_name\
    \ . \".\" . $extensions[$max_strength_index];\n}\n\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key -1 in /tmp/tmpt4dlycr3.php on line 35\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpt4dlycr3.php:45\nStack\
    \ trace:\n#0 /tmp/tmpt4dlycr3.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpt4dlycr3.php\
    \ on line 45\n"
  timestamp: 1659824145
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strongest = 0;\n\t$strongest_index = 0;\n\tfor ($i = 0; $i\
    \ < count($extensions); $i++) {\n\t\t$strength = calculate_strength($extensions[$i]);\n\
    \t\tif ($strength < $strongest) {\n\t\t\t$strongest = $strength;\n\t\t\t$strongest_index\
    \ = $i;\n\t\t}\n\t}\n\treturn $class_name . \".\" . $extensions[$strongest_index];\n\
    }\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function calculate_strength()\
    \ in /tmp/tmpvm0bvd3s.php:22\nStack trace:\n#0 /tmp/tmpvm0bvd3s.php(32): Strongest_Extension('Watashi',\
    \ Array)\n#1 /tmp/tmpvm0bvd3s.php(36): candidate('Watashi', Array)\n#2 /tmp/tmpvm0bvd3s.php(47):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpvm0bvd3s.php on line 22\n"
  timestamp: 1659824145
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n  // Your code here\n  if(empty($extensions)){\n    return $class_name;\n\
    \  }\n  $class_name = ucfirst($class_name);\n  $number_of_extensions = count($extensions);\n\
    \  $extensions_strengths = array();\n  for($i = 0; $i < $number_of_extensions;\
    \ $i++){\n    $extensions_strengths[$i] = Calculate_Strength($extensions[$i]);\n\
    \  }\n  $max_index = array_search(max($extensions_strengths), $extensions_strengths);\n\
    \  return \"$class_name.$extensions[$max_index]\";\n}\n\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function Calculate_Strength()\
    \ in /tmp/tmpa1fys2u1.php:27\nStack trace:\n#0 /tmp/tmpa1fys2u1.php(34): Strongest_Extension('Watashi',\
    \ Array)\n#1 /tmp/tmpa1fys2u1.php(38): candidate('Watashi', Array)\n#2 /tmp/tmpa1fys2u1.php(49):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpa1fys2u1.php on line 27\n"
  timestamp: 1659824145
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = '';\n    $strongest_extension_strength\
    \ = 0;\n    $class_extension = $class_name . '.';\n    foreach ($extensions as\
    \ $extension) {\n        $upper_case_count = preg_match_all('/[A-Z]/', $extension);\n\
    \        $lower_case_count = preg_match_all('/[a-z]/', $extension);\n        $extension_strength\
    \ = $upper_case_count - $lower_case_count;\n        if ($extension_strength >\
    \ $strongest_extension_strength) {\n            $strongest_extension = $extension;\n\
    \            $strongest_extension_strength = $extension_strength;\n        }\n\
    \    }\n    return $class_extension . $strongest_extension;\n}\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpay5mr0qs.php:40\n\
    Stack trace:\n#0 /tmp/tmpay5mr0qs.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpay5mr0qs.php\
    \ on line 40\n"
  timestamp: 1659824145
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strongest_extension = '';\n\t$strongest_strength = -1000000;\n\
    \tforeach ($extensions as $extension) {\n\t\t$strength = Strength_Of_Extension($extension);\n\
    \t\tif ($strength > $strongest_strength) {\n\t\t\t$strongest_strength = $strength;\n\
    \t\t\t$strongest_extension = $extension;\n\t\t}\n\t}\n\treturn $class_name . '.'\
    \ . $strongest_extension;\n}\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function Strength_Of_Extension()\
    \ in /tmp/tmpq3h6j0nj.php:22\nStack trace:\n#0 /tmp/tmpq3h6j0nj.php(31): Strongest_Extension('Watashi',\
    \ Array)\n#1 /tmp/tmpq3h6j0nj.php(35): candidate('Watashi', Array)\n#2 /tmp/tmpq3h6j0nj.php(46):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpq3h6j0nj.php on line 22\n"
  timestamp: 1659824145
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$numExt = count($extensions);\n\t$count = 0;\n\t$newArray\
    \ = array();\n\t$tempArray = array();\n\t\n\tforeach($extensions as $ext) {\n\t\
    \t$upper = preg_match_all('/[A-Z]/', $ext, $Umatches);\n\t\t$lower = preg_match_all('/[a-z]/',\
    \ $ext, $Lmatches);\n\t\t$strength = $upper - $lower;\n\t\t$newArray[$ext] = $strength;\n\
    \t}\n\t\n\tasort($newArray);\n\t$keys = array_keys($newArray);\n\t$first_key =\
    \ $keys[0];\n\treturn($class_name.\".\".$first_key);\n}\n\n$class_name = \"Slices\"\
    ;\n$extensions = array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\");\necho Strongest_Extension($class_name,\
    \ $extensions);\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "Slices.Cheese\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkt71j0hq.php:45\n\
    Stack trace:\n#0 /tmp/tmpkt71j0hq.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpkt71j0hq.php\
    \ on line 45\n"
  timestamp: 1659824145
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n  \n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg0cagh8k.php:27\n\
    Stack trace:\n#0 /tmp/tmpg0cagh8k.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpg0cagh8k.php\
    \ on line 27\n"
  timestamp: 1659824145
- exit_code: 0
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $max_strength = -INF;\n    $max_strength_extension = '';\n\
    \    foreach ($extensions as $extension) {\n        $uppercase_letters = preg_match_all('/[A-Z]/',\
    \ $extension);\n        $lowercase_letters = preg_match_all('/[a-z]/', $extension);\n\
    \        $strength = $uppercase_letters - $lowercase_letters;\n        if ($strength\
    \ > $max_strength) {\n            $max_strength = $strength;\n            $max_strength_extension\
    \ = $extension;\n        }\n    }\n    return \"$class_name.$max_strength_extension\"\
    ;\n}\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824145
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n  $ext_strength = array();\n  foreach ($extensions as $ext)\
    \ {\n    $upper = preg_match_all('/[A-Z]/', $ext, $result);\n    $lower = preg_match_all('/[a-z]/',\
    \ $ext, $result);\n    if ($upper > 0) {\n      $ext_strength[$ext] = $upper -\
    \ $lower;\n    }\n  }\n  if (count($ext_strength) > 0) {\n    $max_strength =\
    \ max($ext_strength);\n    $max_ext = array_search($max_strength, $ext_strength);\n\
    \    return $class_name . \".\" . $max_ext;\n  }\n  return \"no extension found\"\
    ;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeuax8wnb.php:44\n\
    Stack trace:\n#0 /tmp/tmpeuax8wnb.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpeuax8wnb.php\
    \ on line 44\n"
  timestamp: 1659824145
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    // Your code here\n}\n\nfunction candidate(...$args) {\n\
    \    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppgyfmm3m.php:27\n\
    Stack trace:\n#0 /tmp/tmppgyfmm3m.php(38): test()\n#1 {main}\n  thrown in /tmp/tmppgyfmm3m.php\
    \ on line 27\n"
  timestamp: 1659824145
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strength = 0;\n\t$return_string = $class_name;\n\tforeach\
    \ ($extensions as $extension) {\n\t\t$cap = 0;\n\t\t$sm = 0;\n\t\tfor ($i = 0;\
    \ $i < strlen($extension); $i++) {\n\t\t\tif (ctype_upper($extension[$i])) {\n\
    \t\t\t\t$cap++;\n\t\t\t} else {\n\t\t\t\t$sm++;\n\t\t\t}\n\t\t}\n\t\t$current_strength\
    \ = $cap - $sm;\n\t\tif ($current_strength > $strength) {\n\t\t\t$strength = $current_strength;\n\
    \t\t\t$return_string = $class_name . \".\" . $extension;\n\t\t}\n\t}\n\treturn\
    \ $return_string;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu2c4ww54.php:45\n\
    Stack trace:\n#0 /tmp/tmpu2c4ww54.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpu2c4ww54.php\
    \ on line 45\n"
  timestamp: 1659824145
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n  $strength = -1000;\n  $strongest = '';\n  foreach ($extensions\
    \ as $extension) {\n    $cap = 0;\n    $sm = 0;\n    $s = 0;\n    for ($i = 0;\
    \ $i < strlen($extension); $i++) {\n      if (ctype_upper($extension[$i])) {\n\
    \        $cap++;\n      } else {\n        $sm++;\n      }\n    }\n    $s = $cap\
    \ - $sm;\n    if ($s > $strength) {\n      $strength = $s;\n      $strongest =\
    \ $extension;\n    }\n  }\n  return $class_name . '.' . $strongest;\n}\nfunction\
    \ candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    )) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    )) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"\
    __HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))\
    \ !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\"))\
    \ !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"\
    Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpek6usxsp.php:45\n\
    Stack trace:\n#0 /tmp/tmpek6usxsp.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpek6usxsp.php\
    \ on line 45\n"
  timestamp: 1659824145
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    // Write your code here\n    // To print results to the\
    \ standard output you can use print\n    // Example:\n    // print \"Hello world!\"\
    ;\n}\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpamra5he5.php:29\n\
    Stack trace:\n#0 /tmp/tmpamra5he5.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpamra5he5.php\
    \ on line 29\n"
  timestamp: 1659824145
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n  $best_class = $class_name . \".\" . $extensions[0];\n  $best_strength\
    \ = get_strength($extensions[0]);\n  foreach ($extensions as $extension) {\n \
    \   $strength = get_strength($extension);\n    if ($strength > $best_strength)\
    \ {\n      $best_class = $class_name . \".\" . $extension;\n      $best_strength\
    \ = $strength;\n    }\n  }\n  return $best_class;\n}\n\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_strength()\
    \ in /tmp/tmpu7j1rrw4.php:20\nStack trace:\n#0 /tmp/tmpu7j1rrw4.php(32): Strongest_Extension('Watashi',\
    \ Array)\n#1 /tmp/tmpu7j1rrw4.php(36): candidate('Watashi', Array)\n#2 /tmp/tmpu7j1rrw4.php(47):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpu7j1rrw4.php on line 20\n"
  timestamp: 1659824145
- exit_code: 0
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $best_strength = -1;\n    $best_extension = \"\";\n    foreach\
    \ ($extensions as $extension) {\n        $CAP = preg_match_all(\"/[A-Z]/\", $extension);\n\
    \        $SM = preg_match_all(\"/[a-z]/\", $extension);\n        $strength = $CAP\
    \ - $SM;\n        if ($strength > $best_strength) {\n            $best_strength\
    \ = $strength;\n            $best_extension = $extension;\n        }\n    }\n\
    \    return \"$class_name.$best_extension\";\n}\necho Strongest_Extension(\"my_class\"\
    , array(\"AA\", \"Be\", \"CC\"));\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: my_class.AA
  timestamp: 1659824145
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $ret = \"\";\n    $len = count($extensions);\n    if ($len\
    \ == 0) {\n        return $class_name;\n    }\n    $max_strength = 0;\n    $max_index\
    \ = 0;\n    for ($i = 0; $i < $len; $i++) {\n        $tmp = strength($extensions[$i]);\n\
    \        if ($tmp > $max_strength) {\n            $max_strength = $tmp;\n    \
    \        $max_index = $i;\n        }\n    }\n    $ret = $class_name . \".\" .\
    \ $extensions[$max_index];\n    return $ret;\n}\n\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function strength() in\
    \ /tmp/tmp11ys5ws0.php:27\nStack trace:\n#0 /tmp/tmp11ys5ws0.php(38): Strongest_Extension('Watashi',\
    \ Array)\n#1 /tmp/tmp11ys5ws0.php(42): candidate('Watashi', Array)\n#2 /tmp/tmp11ys5ws0.php(53):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp11ys5ws0.php on line 27\n"
  timestamp: 1659824145
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strength = 0;\n    $strongest_extension = '';\n    foreach\
    \ ($extensions as $extension) {\n        $cap_letters = preg_match_all('/[A-Z]/',\
    \ $extension);\n        $small_letters = preg_match_all('/[a-z]/', $extension);\n\
    \        $current_strength = $cap_letters - $small_letters;\n        if ($current_strength\
    \ > $strength) {\n            $strength = $current_strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return $class_name . '.' . $strongest_extension;\n\
    }\necho Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"\
    StuFfed\"));\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "Slices.\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2vgmsyud.php:40\n\
    Stack trace:\n#0 /tmp/tmp2vgmsyud.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp2vgmsyud.php\
    \ on line 40\n"
  timestamp: 1659824145
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    //your code goes here!\n}\n\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_6bbo1xv.php:27\n\
    Stack trace:\n#0 /tmp/tmp_6bbo1xv.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp_6bbo1xv.php\
    \ on line 27\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n  $count = 0;\n  $ext_name = '';\n  foreach ($extensions as\
    \ $ext) {\n    $total_upper = preg_match_all('/[A-Z]/', $ext);\n    $total_lower\
    \ = preg_match_all('/[a-z]/', $ext);\n    $strength = $total_upper - $total_lower;\n\
    \    if ($strength > $count) {\n      $count = $strength;\n      $ext_name = $ext;\n\
    \    }\n  }\n  return $class_name . '.' . $ext_name;\n}\n\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaz_ee3rc.php:40\n\
    Stack trace:\n#0 /tmp/tmpaz_ee3rc.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpaz_ee3rc.php\
    \ on line 40\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t// your code goes here\n\t$strongest_strength = 0;\n\t$strongest_extension\
    \ = \"\";\n\t$strongest_upper = 0;\n\t$strongest_lower = 0;\n\tfor ($i = 0; $i\
    \ < count($extensions); $i++) {\n\t\t$upper = preg_match_all('/[A-Z]/', $extensions[$i],\
    \ $matches);\n\t\t$lower = preg_match_all('/[a-z]/', $extensions[$i], $matches);\n\
    \t\t$strength = $upper - $lower;\n\t\tif ($strength > $strongest_strength) {\n\
    \t\t\t$strongest_extension = $extensions[$i];\n\t\t\t$strongest_strength = $strength;\n\
    \t\t\t$strongest_upper = $upper;\n\t\t\t$strongest_lower = $lower;\n\t\t} else\
    \ if ($strength == $strongest_strength) {\n\t\t\tif ($upper > $strongest_upper)\
    \ {\n\t\t\t\t$strongest_extension = $extensions[$i];\n\t\t\t\t$strongest_strength\
    \ = $strength;\n\t\t\t\t$strongest_upper = $upper;\n\t\t\t\t$strongest_lower =\
    \ $lower;\n\t\t\t} else if ($upper == $strongest_upper) {\n\t\t\t\tif ($lower\
    \ < $strongest_lower) {\n\t\t\t\t\t$strongest_extension = $extensions[$i];\n\t\
    \t\t\t\t$strongest_strength = $strength;\n\t\t\t\t\t$strongest_upper = $upper;\n\
    \t\t\t\t\t$strongest_lower = $lower;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ $class_name . \".\" . $strongest_extension;\n}\n$var_class = \"my_class\";\n\
    $var_extensions = array(\"AA\", \"Be\", \"CC\");\necho Strongest_Extension($var_class,\
    \ $var_extensions);\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "my_class.AA\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqc_yfk7h.php:63\n\
    Stack trace:\n#0 /tmp/tmpqc_yfk7h.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpqc_yfk7h.php\
    \ on line 63\n"
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$extensions_strength = array();\n\tforeach ($extensions as\
    \ $extension) {\n\t\t$uppercase_letters = preg_match_all('/[A-Z]/', $extension);\n\
    \t\t$lowercase_letters = preg_match_all('/[a-z]/', $extension);\n\t\t$strength\
    \ = $uppercase_letters - $lowercase_letters;\n\t\t$extensions_strength[$extension]\
    \ = $strength;\n\t}\n\tarsort($extensions_strength);\n\t$strongest_extension =\
    \ key($extensions_strength);\n\treturn $class_name . \".\" . $strongest_extension;\n\
    }\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest = \"\";\n    $strength = 0;\n    foreach ($extensions\
    \ as $extension) {\n        $extension_strength = preg_match_all(\"/[A-Z]/\",\
    \ $extension) - preg_match_all(\"/[a-z]/\", $extension);\n        if ($extension_strength\
    \ > $strength) {\n            $strongest = $extension;\n            $strength\
    \ = $extension_strength;\n        }\n    }\n    return $class_name . \".\" . $strongest;\n\
    }\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoz9ubi2h.php:38\n\
    Stack trace:\n#0 /tmp/tmpoz9ubi2h.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpoz9ubi2h.php\
    \ on line 38\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$max = -1;\n\t$strongest_extension = \"\";\n\tforeach ($extensions\
    \ as $extension) {\n\t\t$num_uppercase = 0;\n\t\t$num_lowercase = 0;\n\t\tfor\
    \ ($i = 0; $i < strlen($extension); $i++) {\n\t\t\tif (ctype_upper($extension[$i]))\
    \ {\n\t\t\t\t$num_uppercase++;\n\t\t\t} else {\n\t\t\t\t$num_lowercase++;\n\t\t\
    \t}\n\t\t}\n\t\t$strength = $num_uppercase - $num_lowercase;\n\t\tif ($strength\
    \ > $max) {\n\t\t\t$max = $strength;\n\t\t\t$strongest_extension = $extension;\n\
    \t\t}\n\t}\n\treturn \"$class_name.$strongest_extension\";\n}\n\n$class_name =\
    \ \"my_class\";\n$extensions = array(\"AA\", \"Be\", \"CC\");\necho Strongest_Extension($class_name,\
    \ $extensions) . PHP_EOL;\n\n$class_name = \"The_Class\";\n$extensions = array(\"\
    AAA\", \"BbB\", \"Ccc\");\necho Strongest_Extension($class_name, $extensions)\
    \ . PHP_EOL;\n\n$class_name = \"The_Class\";\n$extensions = array(\"AaA\", \"\
    BbB\", \"Ccc\");\necho Strongest_Extension($class_name, $extensions) . PHP_EOL;\n\
    \n$class_name = \"Slices\";\n$extensions = array(\"SErviNGSliCes\", \"Cheese\"\
    , \"StuFfed\");\necho Strongest_Extension($class_name, $extensions) . PHP_EOL;\n\
    \n$class_name = \"Slices\";\n$extensions = array(\"SErviNGSliCes\", \"Cheese\"\
    , \"SErviNGSliCes\");\necho Strongest_Extension($class_name, $extensions) . PHP_EOL;\n\
    \n$class_name = \"Class\";\n$extensions = array(\"aaa\", \"\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "Watashi", expecting ")" in /tmp/tmpxi65zkcp.php
    on line 67

    '
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    // calculate the strength\n    foreach ($extensions as $extension)\
    \ {\n        $extension_uppercase = preg_match_all('/[A-Z]/', $extension, $matches);\n\
    \        $extension_lowercase = preg_match_all('/[a-z]/', $extension, $matches);\n\
    \        $strength[] = $extension_uppercase - $extension_lowercase;\n    }\n \
    \   // get the index of the strongest extension\n    $index = array_search(max($strength),\
    \ $strength);\n    return $class_name . \".\" . $extensions[$index];\n}\necho\
    \ Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    ));\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: Slices.SErviNGSliCes
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n  $class_name .= '.';\n  $extension_strengths = [];\n  foreach\
    \ ($extensions as $extension) {\n    $extension_strengths[$extension] = extension_strength($extension);\n\
    \  }\n  arsort($extension_strengths);\n  return $class_name . array_keys($extension_strengths)[0];\n\
    }\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function extension_strength()\
    \ in /tmp/tmp49n_piw8.php:22\nStack trace:\n#0 /tmp/tmp49n_piw8.php(29): Strongest_Extension('Watashi.',\
    \ Array)\n#1 /tmp/tmp49n_piw8.php(33): candidate('Watashi', Array)\n#2 /tmp/tmp49n_piw8.php(44):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp49n_piw8.php on line 22\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest = [\"strength\" => 0, \"name\" => $extensions[0]];\n\
    \    for ($i = 0; $i < count($extensions); $i++) {\n        $strength = 0;\n \
    \       for ($j = 0; $j < strlen($extensions[$i]); $j++) {\n            if (ctype_upper($extensions[$i][$j]))\
    \ {\n                $strength++;\n            } else {\n                $strength--;\n\
    \            }\n        }\n        if ($strength > $strongest[\"strength\"]) {\n\
    \            $strongest[\"strength\"] = $strength;\n            $strongest[\"\
    name\"] = $extensions[$i];\n        }\n    }\n    return \"$class_name.\" . $strongest[\"\
    name\"];\n}\n\necho Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"\
    CC\")) . PHP_EOL;\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "my_class.AA\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsmy1zu0m.php:43\n\
    Stack trace:\n#0 /tmp/tmpsmy1zu0m.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpsmy1zu0m.php\
    \ on line 43\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $maxStrength = 0;\n    $maxStrengthIndex = 0;\n    foreach\
    \ ($extensions as $index => $extension) {\n        $strength = preg_match_all('/[A-Z]/',\
    \ $extension) - preg_match_all('/[a-z]/', $extension);\n        if ($strength\
    \ > $maxStrength) {\n            $maxStrength = $strength;\n            $maxStrengthIndex\
    \ = $index;\n        }\n    }\n    return $class_name . '.' . $extensions[$maxStrengthIndex];\n\
    }\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpetfgtlu9.php:37\n\
    Stack trace:\n#0 /tmp/tmpetfgtlu9.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpetfgtlu9.php\
    \ on line 37\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest = \"\";\n    $strongest_ratio = 0;\n    foreach\
    \ ($extensions as $extension) {\n        // count how many uppercase and lowercase\
    \ letters are in the extension\n        $lower = preg_match_all('/[a-z]/', $extension);\n\
    \        $upper = preg_match_all('/[A-Z]/', $extension);\n        $ratio = $upper\
    \ - $lower;\n        // if the new ratio is bigger than the previous one\n   \
    \     if ($ratio > $strongest_ratio) {\n            $strongest = $extension;\n\
    \            $strongest_ratio = $ratio;\n        }\n    }\n    return $class_name\
    \ . \".\" . $strongest;\n}\necho Strongest_Extension(\"my_class\", array(\"AA\"\
    , \"Be\", \"CC\"));\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "my_class.AA\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprctaf1fa.php:42\n\
    Stack trace:\n#0 /tmp/tmprctaf1fa.php(51): test()\n#1 {main}\n  thrown in /tmp/tmprctaf1fa.php\
    \ on line 42\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n  $exts = array();\n  foreach ($extensions as $key => $ext)\
    \ {\n    $caps = 0;\n    $smls = 0;\n    for ($i = 0; $i < strlen($ext); $i++)\
    \ {\n      if (ctype_upper($ext[$i])) {\n        $caps++;\n      } else {\n  \
    \      $smls++;\n      }\n    }\n    $exts[$key] = $caps - $smls;\n  }\n  $max_val\
    \ = max($exts);\n  $max_key = array_search($max_val, $exts);\n  return $class_name\
    \ . \".\" . $extensions[$max_key];\n}\n\n$class_name = \"my_class\";\n$extensions\
    \ = array(\"AA\", \"Be\", \"CC\");\nprint_r(Strongest_Extension($class_name, $extensions));\n\
    function candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\"\
    , \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\",\
    \ \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"\
    TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\"\
    )) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))\
    \ !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\"))\
    \ !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"\
    Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "my_class.AA\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpztnu6kbq.php:45\n\
    Stack trace:\n#0 /tmp/tmpztnu6kbq.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpztnu6kbq.php\
    \ on line 45\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    // Your code goes here.\n}\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprrn9pyy8.php:26\n\
    Stack trace:\n#0 /tmp/tmprrn9pyy8.php(37): test()\n#1 {main}\n  thrown in /tmp/tmprrn9pyy8.php\
    \ on line 26\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t// Your code here\n}\n\nfunction candidate(...$args) {\n \
    \   return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkpj05ado.php:27\n\
    Stack trace:\n#0 /tmp/tmpkpj05ado.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpkpj05ado.php\
    \ on line 27\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $count = 0;\n    $result = '';\n    foreach ($extensions\
    \ as $extension) {\n        $cap = strlen(preg_replace('/[^A-Z]/', '', $extension));\n\
    \        $sm = strlen(preg_replace('/[^a-z]/', '', $extension));\n        $strength\
    \ = $cap - $sm;\n        if ($strength > $count) {\n            $count = $strength;\n\
    \            $result = $extension;\n        }\n    }\n    return $class_name .\
    \ '.' . $result;\n}\necho Strongest_Extension(\"my_class\", array(\"AA\", \"Be\"\
    , \"CC\"));\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "my_class.AA\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpop9_w7ri.php:40\n\
    Stack trace:\n#0 /tmp/tmpop9_w7ri.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpop9_w7ri.php\
    \ on line 40\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n  //   echo implode(', ', $extensions);\n  $ext_strength = [];\n\
    \  foreach ($extensions as $ext) {\n    $strength = 0;\n    for ($i = 0; $i <\
    \ strlen($ext); $i++) {\n      if (ctype_upper($ext[$i])) {\n        $strength++;\n\
    \      } else {\n        $strength--;\n      }\n    }\n    $ext_strength[$ext]\
    \ = $strength;\n  }\n  // $max = max($ext_strength);\n  // $key = array_search($max,\
    \ $ext_strength);\n  // var_dump($ext_strength);\n  // return \"$class_name.$key\"\
    ;\n  return \"$class_name.\" . array_search(max($ext_strength), $ext_strength);\n\
    }\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp28h8yz6c.php:43\n\
    Stack trace:\n#0 /tmp/tmp28h8yz6c.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp28h8yz6c.php\
    \ on line 43\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest = '';\n    $strength = 0;\n    foreach ($extensions\
    \ as $extension) {\n        $cap = preg_match_all('/[A-Z]/', $extension, $matches);\n\
    \        $sm = preg_match_all('/[a-z]/', $extension, $matches);\n        $strength_extension\
    \ = $cap - $sm;\n        if ($strength_extension > $strength) {\n            $strongest\
    \ = $extension;\n            $strength = $strength_extension;\n        }\n   \
    \ }\n    return $class_name . '.' . $strongest;\n}\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfifyp_n1.php:39\n\
    Stack trace:\n#0 /tmp/tmpfifyp_n1.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpfifyp_n1.php\
    \ on line 39\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n  $strength = 0;\n  $strength_string = \"\";\n  foreach ($extensions\
    \ as $extension) {\n    $st = 0;\n    for ($i = 0; $i < strlen($extension); $i++)\
    \ {\n      if (preg_match(\"/[A-Z]/\", $extension[$i])) {\n        $st++;\n  \
    \    } else {\n        $st--;\n      }\n    }\n    if ($st > $strength) {\n  \
    \    $strength = $st;\n      $strength_string = $extension;\n    }\n  }\n  return\
    \ $class_name . \".\" . $strength_string;\n}\n\nfunction candidate(...$args) {\n\
    \    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzr92t6u_.php:43\n\
    Stack trace:\n#0 /tmp/tmpzr92t6u_.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpzr92t6u_.php\
    \ on line 43\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n  // Your code here\n  $strongestExtension = \"\";\n  $strongestExtensionStrength\
    \ = 0;\n  foreach ($extensions as $i => $extension) {\n      $upper = 0;\n   \
    \   $lower = 0;\n      $extensionCharacters = str_split($extension);\n      foreach\
    \ ($extensionCharacters as $character) {\n          if (ctype_upper($character))\
    \ {\n              $upper++;\n          } else {\n              $lower++;\n  \
    \        }\n      }\n      $extensionStrength = $upper - $lower;\n      if ($extensionStrength\
    \ > $strongestExtensionStrength) {\n          $strongestExtensionStrength = $extensionStrength;\n\
    \          $strongestExtension = $extension;\n      }\n  }\n  return $class_name\
    \ . \".\" . $strongestExtension;\n}\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph_597aq8.php:46\n\
    Stack trace:\n#0 /tmp/tmph_597aq8.php(57): test()\n#1 {main}\n  thrown in /tmp/tmph_597aq8.php\
    \ on line 46\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strongest_extension = $extensions[0];\n\t$strongest_extension_strength\
    \ = get_extension_strength($strongest_extension);\n\tforeach ($extensions as $extension)\
    \ {\n\t\t$current_extension_strength = get_extension_strength($extension);\n\t\
    \tif ($current_extension_strength > $strongest_extension_strength) {\n\t\t\t$strongest_extension\
    \ = $extension;\n\t\t\t$strongest_extension_strength = $current_extension_strength;\n\
    \t\t}\n\t}\n\treturn \"$class_name.$strongest_extension\";\n}\n\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_extension_strength()\
    \ in /tmp/tmp3_wa4xgi.php:20\nStack trace:\n#0 /tmp/tmp3_wa4xgi.php(32): Strongest_Extension('Watashi',\
    \ Array)\n#1 /tmp/tmp3_wa4xgi.php(36): candidate('Watashi', Array)\n#2 /tmp/tmp3_wa4xgi.php(47):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp3_wa4xgi.php on line 20\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strongest = ['ext' => '', 'strength' => null];\n\tforeach\
    \ ($extensions as $ext) {\n\t\t$cap = 0;\n\t\t$sm = 0;\n\t\tfor ($i = 0; $i <\
    \ strlen($ext); $i++) {\n\t\t\tif (ctype_upper($ext[$i])) {\n\t\t\t\t$cap++;\n\
    \t\t\t} else {\n\t\t\t\t$sm++;\n\t\t\t}\n\t\t}\n\t\t$strength = $cap - $sm;\n\t\
    \tif ($strongest['strength'] === null || $strength > $strongest['strength']) {\n\
    \t\t\t$strongest['ext'] = $ext;\n\t\t\t$strongest['strength'] = $strength;\n\t\
    \t}\n\t}\n\treturn $class_name . '.' . $strongest['ext'];\n}\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqogq7bl1.php:43\n\
    Stack trace:\n#0 /tmp/tmpqogq7bl1.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpqogq7bl1.php\
    \ on line 43\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    // Your code goes here\n    $max = 0;\n    $max_index =\
    \ 0;\n    $ext_len = count($extensions);\n    for ($i = 0; $i < $ext_len; $i++)\
    \ {\n        $cap = 0;\n        $sm = 0;\n        $ext_len_inner = strlen($extensions[$i]);\n\
    \        for ($j = 0; $j < $ext_len_inner; $j++) {\n            if (ord($extensions[$i][$j])\
    \ >= 65 && ord($extensions[$i][$j]) <= 90) {\n                $cap++;\n      \
    \      } else if (ord($extensions[$i][$j]) >= 97 && ord($extensions[$i][$j]) <=\
    \ 122) {\n                $sm++;\n            }\n        }\n        if (($cap\
    \ - $sm) > $max) {\n            $max = $cap - $sm;\n            $max_index = $i;\n\
    \        }\n    }\n    return $class_name . \".\" . $extensions[$max_index];\n\
    }\n\necho Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"));\n\
    function candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\"\
    , \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\",\
    \ \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"\
    TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\"\
    )) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))\
    \ !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\"))\
    \ !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"\
    Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "my_class.AA\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgvwmh8u7.php:50\n\
    Stack trace:\n#0 /tmp/tmpgvwmh8u7.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpgvwmh8u7.php\
    \ on line 50\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$arr = [];\n\tforeach ($extensions as $value) {\n\t\t$strength\
    \ = 0;\n\t\t$len = strlen($value);\n\t\tfor ($i=0; $i < $len; $i++) { \n\t\t\t\
    if (ctype_upper($value[$i])) {\n\t\t\t\t$strength++;\n\t\t\t} else {\n\t\t\t\t\
    $strength--;\n\t\t\t}\n\t\t}\n\t\t$arr[$value] = $strength;\n\t}\n\t$strongest\
    \ = max($arr);\n\t$key = array_search($strongest, $arr);\n\treturn $class_name.\"\
    .\".$key;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv3adv5uu.php:42\n\
    Stack trace:\n#0 /tmp/tmpv3adv5uu.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpv3adv5uu.php\
    \ on line 42\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strength = 0;\n    $strongest_extension = \"\";\n    foreach\
    \ ($extensions as $extension) {\n        $CAP = preg_match_all('/[A-Z]/', $extension,\
    \ $result);\n        $SM = preg_match_all('/[a-z]/', $extension, $result);\n \
    \       $diff = $CAP - $SM;\n        if ($diff >= $strength) {\n            $strength\
    \ = $diff;\n            $strongest_extension = $extension;\n        }\n    }\n\
    \    return $class_name . \".\" . $strongest_extension;\n}\n\nprint_r(Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\")));\nfunction candidate(...$args) {\n\
    \    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "my_class.CC\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwdljmcv0.php:43\n\
    Stack trace:\n#0 /tmp/tmpwdljmcv0.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpwdljmcv0.php\
    \ on line 43\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest = ['', 0];\n\n    foreach ($extensions as $extension)\
    \ {\n        $extension_strength = 0;\n        for ($i = 0; $i < strlen($extension);\
    \ $i++) {\n            if (ctype_lower($extension[$i])) {\n                $extension_strength--;\n\
    \            } else {\n                $extension_strength++;\n            }\n\
    \        }\n        if ($extension_strength > $strongest[1]) {\n            $strongest\
    \ = [$extension, $extension_strength];\n        }\n    }\n\n    return $class_name\
    \ . '.' . $strongest[0];\n}\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpji5i4m6w.php:44\n\
    Stack trace:\n#0 /tmp/tmpji5i4m6w.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpji5i4m6w.php\
    \ on line 44\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n  $strength = 0;\n  $strongest_extension = \"\";\n  foreach\
    \ ($extensions as $extension) {\n    $num_upper = preg_match_all(\"/[A-Z]/\",\
    \ $extension);\n    $num_lower = preg_match_all(\"/[a-z]/\", $extension);\n  \
    \  $current_strength = $num_upper - $num_lower;\n    if ($current_strength > $strength)\
    \ {\n      $strength = $current_strength;\n      $strongest_extension = $extension;\n\
    \    }\n  }\n  return \"$class_name.$strongest_extension\";\n}\n\necho Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"));\nfunction candidate(...$args) {\n\
    \    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "my_class.AA\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqh6quc8a.php:41\n\
    Stack trace:\n#0 /tmp/tmpqh6quc8a.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpqh6quc8a.php\
    \ on line 41\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n  // your code here\n}\n\nfunction candidate(...$args) {\n \
    \   return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt1uy3yj8.php:27\n\
    Stack trace:\n#0 /tmp/tmpt1uy3yj8.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpt1uy3yj8.php\
    \ on line 27\n"
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n  $strength = array();\n  foreach ($extensions as $extension)\
    \ {\n    $CAP = preg_match_all('/[A-Z]/', $extension);\n    $SM = preg_match_all('/[a-z]/',\
    \ $extension);\n    $strength[$extension] = $CAP - $SM;\n  }\n  arsort($strength);\n\
    \  foreach ($strength as $key => $value) {\n    $answer = $key;\n    break;\n\
    \  }\n  return \"$class_name.$answer\";\n}\n\nfunction candidate(...$args) {\n\
    \    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n  $preg = '/^([a-zA-Z]+)([a-zA-Z]+)$/';\n  $class_name = strtolower($class_name);\n\
    \  $class_name = preg_replace($preg, '$1', $class_name);\n  $extensions = array_map('strtolower',\
    \ $extensions);\n  $extensions = array_map(function($x) use ($preg) {\n    return\
    \ preg_replace($preg, '$2', $x);\n  }, $extensions);\n  $caps = array_map(function($x)\
    \ {\n    return substr_count($x, 'a') - substr_count($x, 'z');\n  }, $extensions);\n\
    \  $answer = $class_name . '.' . ucfirst($extensions[array_search(max($caps),\
    \ $caps)]);\n  return $answer;\n}\n$a = array(\"SErviNGSliCes\", \"Cheese\", \"\
    StuFfed\");\nvar_dump(Strongest_Extension(\"Slices\", $a));\n\n$a = array(\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\");\nvar_dump(Strongest_Extension(\"my_class\", $a));\n\
    \n$a = array(\"AA\", \"Be\", \"CC\");\nvar_dump(Strongest_Extension(\"my_class\"\
    , $a));\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "string(7) \"slice.S\"\nstring(10) \"my_class.S\"\nstring(10) \"my_class.A\"\
    \n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpruqipjis.php:45\n\
    Stack trace:\n#0 /tmp/tmpruqipjis.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpruqipjis.php\
    \ on line 45\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    // $class_name = 'my_class';\n    // $extensions = ['AA',\
    \ 'Be', 'CC'];\n    $arr_strength = [];\n    foreach ($extensions as $ext) {\n\
    \        $arr_strength[] = calc_strength($ext);\n    }\n    $strongest_index =\
    \ array_search(max($arr_strength), $arr_strength);\n    return $class_name . '.'\
    \ . $extensions[$strongest_index];\n}\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function calc_strength()\
    \ in /tmp/tmp5fx03583.php:23\nStack trace:\n#0 /tmp/tmp5fx03583.php(29): Strongest_Extension('Watashi',\
    \ Array)\n#1 /tmp/tmp5fx03583.php(33): candidate('Watashi', Array)\n#2 /tmp/tmp5fx03583.php(44):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp5fx03583.php on line 23\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strength = 0;\n    $extension = $extensions[0];\n    foreach\
    \ ($extensions as $key => $value) {\n        $str = 0;\n        for ($i=0; $i\
    \ < strlen($value); $i++) { \n            if (ctype_upper($value[$i])) {\n   \
    \             $str += 1;\n            } else {\n                $str -= 1;\n \
    \           }\n        }\n        if ($str >= $strength) {\n            $strength\
    \ = $str;\n            $extension = $value;\n        }\n    }\n    return $class_name.\"\
    .\".$extension;\n}\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1oicz3lb.php:44\n\
    Stack trace:\n#0 /tmp/tmp1oicz3lb.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp1oicz3lb.php\
    \ on line 44\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $max_strength = null;\n    $max_strength_extension = null;\n\
    \    foreach ($extensions as $extension) {\n        $strength = strength($extension);\n\
    \        if ($max_strength === null || $strength > $max_strength) {\n        \
    \    $max_strength = $strength;\n            $max_strength_extension = $extension;\n\
    \        }\n    }\n    return \"{$class_name}.{$max_strength_extension}\";\n}\n\
    \nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function strength() in\
    \ /tmp/tmpp5v1msrw.php:22\nStack trace:\n#0 /tmp/tmpp5v1msrw.php(32): Strongest_Extension('Watashi',\
    \ Array)\n#1 /tmp/tmpp5v1msrw.php(36): candidate('Watashi', Array)\n#2 /tmp/tmpp5v1msrw.php(47):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpp5v1msrw.php on line 22\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = $extensions[0];\n    $strongest_score\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $uppercase_letters\
    \ = array_intersect(str_split($extension), range('A', 'Z'));\n        $lowercase_letters\
    \ = array_intersect(str_split($extension), range('a', 'z'));\n        $score =\
    \ count($uppercase_letters) - count($lowercase_letters);\n        if ($score >\
    \ $strongest_score) {\n            $strongest_score = $score;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return $class_name . \".\" . $strongest_extension;\n\
    }\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5m5mm7x7.php:39\n\
    Stack trace:\n#0 /tmp/tmp5m5mm7x7.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp5m5mm7x7.php\
    \ on line 39\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$letter_count = array_map(function($extension) {\n\t\t$len\
    \ = strlen($extension);\n\t\t$cap = 0;\n\t\t$sm = 0;\n\t\tfor ($i = 0; $i < $len;\
    \ $i++) {\n\t\t\tif (ord($extension[$i]) >= 65 && ord($extension[$i]) <= 90) {\n\
    \t\t\t\t$cap++;\n\t\t\t} else {\n\t\t\t\t$sm++;\n\t\t\t}\n\t\t}\n\t\treturn array($extension,\
    \ $cap - $sm);\n\t}, $extensions);\n\t$tmp = array_map(function($arr) {\n\t\t\
    return $arr[1];\n\t}, $letter_count);\n\t$key = array_search(max($tmp), $tmp);\n\
    \treturn $class_name . \".\" . $letter_count[$key][0];\n}\necho Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\")) . \"\\n\";\necho Strongest_Extension(\"\
    my_class\", array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\")) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    )) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    )) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"\
    __HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))\
    \ !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\"))\
    \ !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"\
    Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "my_class.AA\nmy_class.SErviNGSliCes\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpz6j8ll6_.php:45\nStack trace:\n#0 /tmp/tmpz6j8ll6_.php(56):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpz6j8ll6_.php on line 45\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $caps = 0;\n    $smalls = 0;\n    $strongest_extension =\
    \ \"\";\n    foreach ($extensions as $extension) {\n        $tmp_caps = 0;\n \
    \       $tmp_smalls = 0;\n        for ($i = 0; $i < strlen($extension); $i++)\
    \ {\n            if (ctype_upper($extension[$i])) {\n                $tmp_caps++;\n\
    \            } else if (ctype_lower($extension[$i])) {\n                $tmp_smalls++;\n\
    \            }\n        }\n        if ($tmp_caps - $tmp_smalls > $caps - $smalls)\
    \ {\n            $caps = $tmp_caps;\n            $smalls = $tmp_smalls;\n    \
    \        $strongest_extension = $extension;\n        }\n    }\n    return \"$class_name.$strongest_extension\"\
    ;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7jd6lrhj.php:48\n\
    Stack trace:\n#0 /tmp/tmp7jd6lrhj.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp7jd6lrhj.php\
    \ on line 48\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = '';\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $cap = 0;\n       \
    \ $sm = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n          \
    \  if (ctype_upper($extension[$i])) {\n                $cap++;\n            }\
    \ else {\n                $sm++;\n            }\n        }\n        $extension_strength\
    \ = $cap - $sm;\n        if ($extension_strength > $strongest_extension_strength)\
    \ {\n            $strongest_extension_strength = $extension_strength;\n      \
    \      $strongest_extension = $extension;\n        }\n    }\n    return $class_name.'.'.$strongest_extension;\n\
    }\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy298k0i_.php:44\n\
    Stack trace:\n#0 /tmp/tmpy298k0i_.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpy298k0i_.php\
    \ on line 44\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $result = \"\";\n    $strength = 0;\n    foreach ($extensions\
    \ as $v) {\n        $tmp = extension_strength($v);\n        if ($tmp > $strength)\
    \ {\n            $strength = $tmp;\n            $result = $class_name.\".\".$v;\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function extension_strength()\
    \ in /tmp/tmpzpmj55kl.php:22\nStack trace:\n#0 /tmp/tmpzpmj55kl.php(32): Strongest_Extension('Watashi',\
    \ Array)\n#1 /tmp/tmpzpmj55kl.php(36): candidate('Watashi', Array)\n#2 /tmp/tmpzpmj55kl.php(47):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpzpmj55kl.php on line 22\n"
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n  $extensions_strength = [];\n  $extensions_strength_value =\
    \ [];\n  foreach ($extensions as $extension) {\n    $capital_letters = preg_match_all('/[A-Z]/',\
    \ $extension);\n    $small_letters = preg_match_all('/[a-z]/', $extension);\n\
    \    $extensions_strength[] = [$extension, $capital_letters - $small_letters];\n\
    \  }\n  foreach ($extensions_strength as $arr) {\n    $extensions_strength_value[]\
    \ = $arr[1];\n  }\n  $max_value = max($extensions_strength_value);\n  foreach\
    \ ($extensions_strength as $arr) {\n    if ($arr[1] == $max_value) {\n      return\
    \ $class_name . \".\" . $arr[0];\n    }\n  }\n}\nprint_r(Strongest_Extension(\"\
    Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\")));\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Slices.SErviNGSliCes
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $maxStrength = null;\n    $strongest = null;\n    foreach\
    \ ($extensions as $extension) {\n        $strength = CalculateStrength($extension);\n\
    \        if ($maxStrength == null || $strength > $maxStrength) {\n           \
    \ $maxStrength = $strength;\n            $strongest = $extension;\n        }\n\
    \    }\n    return $class_name . \".\" . $strongest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function CalculateStrength()\
    \ in /tmp/tmplxfxxe9z.php:22\nStack trace:\n#0 /tmp/tmplxfxxe9z.php(32): Strongest_Extension('Watashi',\
    \ Array)\n#1 /tmp/tmplxfxxe9z.php(36): candidate('Watashi', Array)\n#2 /tmp/tmplxfxxe9z.php(47):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmplxfxxe9z.php on line 22\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n  $classes_strengths = [];\n  $i = 0;\n  foreach ($extensions\
    \ as $extension) {\n    $sum_upper = 0;\n    $sum_lower = 0;\n    for ($j = 0;\
    \ $j < strlen($extension); $j++) {\n      if (ctype_upper($extension[$j])) {\n\
    \        $sum_upper++;\n      } else {\n        $sum_lower++;\n      }\n    }\n\
    \    $classes_strengths[$i] = ($sum_upper - $sum_lower);\n    $i++;\n  }\n  return\
    \ $class_name . \".\" . $extensions[array_search(max($classes_strengths), $classes_strengths)];\n\
    }\nprint_r(Strongest_Extension(\"Pie\", array(\"PieEater\", \"PieLover\", \"PieCrust\"\
    , \"PieEating\", \"PieEaten\")));\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Pie.PieEater\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoo177fg_.php:42\n\
    Stack trace:\n#0 /tmp/tmpoo177fg_.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpoo177fg_.php\
    \ on line 42\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n  $strongest_extension = '';\n  $largest_strength = 0;\n  $class_name\
    \ = strtolower($class_name);\n  for ($i = 0; $i < count($extensions); $i++) {\n\
    \    $cap_count = 0;\n    $small_count = 0;\n    $strength = 0;\n    for ($j =\
    \ 0; $j < strlen($extensions[$i]); $j++) {\n      if (ctype_upper($extensions[$i][$j]))\
    \ {\n        $cap_count++;\n      } else if (ctype_lower($extensions[$i][$j]))\
    \ {\n        $small_count++;\n      }\n    }\n    $strength = ($cap_count - $small_count);\n\
    \    if ($strength > $largest_strength) {\n      $largest_strength = $strength;\n\
    \      $strongest_extension = $extensions[$i];\n    }\n  }\n  return $class_name\
    \ . '.' . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd6xpulja.php:47\n\
    Stack trace:\n#0 /tmp/tmpd6xpulja.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpd6xpulja.php\
    \ on line 47\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $class_name = trim($class_name);\n    $extensions = array_map('trim',\
    \ $extensions);\n    $best_strength = 0;\n    $strongest_extension = '';\n   \
    \ foreach ($extensions as $extension) {\n        $length = strlen($extension);\n\
    \        $lowercase_letter_count = 0;\n        $uppercase_letter_count = 0;\n\
    \        for ($i = 0; $i < $length; $i++) {\n            $letter = $extension[$i];\n\
    \            if (ord($letter) >= ord('a') && ord($letter) <= ord('z')) {\n   \
    \             $lowercase_letter_count++;\n            } else if (ord($letter)\
    \ >= ord('A') && ord($letter) <= ord('Z')) {\n                $uppercase_letter_count++;\n\
    \            }\n        }\n        $strength = $uppercase_letter_count - $lowercase_letter_count;\n\
    \        if ($strength > $best_strength) {\n            $best_strength = $strength;\n\
    \            $strongest_extension = $extension;\n        }\n    }\n    return\
    \ $class_name . '.' . $strongest_extension;\n}\nfunction candidate(...$args) {\n\
    \    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpehgtkida.php:50\n\
    Stack trace:\n#0 /tmp/tmpehgtkida.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpehgtkida.php\
    \ on line 50\n"
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n  $strength = [];\n  foreach ($extensions as $extension) {\n\
    \    $cap = preg_match_all('/[A-Z]/', $extension);\n    $sm = preg_match_all('/[a-z]/',\
    \ $extension);\n    $strength[] = $cap - $sm;\n  }\n  $max_strength = max($strength);\n\
    \  $i = array_search($max_strength, $strength);\n  return \"$class_name.$extensions[$i]\"\
    ;\n}\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strength = array();\n    foreach ($extensions as $extension)\
    \ {\n        $cap = preg_match_all('/[A-Z]/', $extension);\n        $sm = preg_match_all('/[a-z]/',\
    \ $extension);\n        $str = $cap - $sm;\n        $strength[$extension] = $str;\n\
    \    }\n    $max_key = array_search(max($strength), $strength);\n    return $class_name\
    \ . \".\" . $max_key;\n}\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$ret = $class_name;\n\t$max_strength = 0;\n\tforeach ($extensions\
    \ as $ext) {\n\t\t$CAP = strlen(preg_replace('/[^A-Z]/', '', $ext));\n\t\t$SM\
    \ = strlen(preg_replace('/[^a-z]/', '', $ext));\n\t\t$strength = $CAP - $SM;\n\
    \t\tif ($strength > $max_strength) {\n\t\t\t$max_strength = $strength;\n\t\t\t\
    $ret = $class_name . '.' . $ext;\n\t\t}\n\t}\n\treturn $ret;\n}\n$class_name =\
    \ \"Slices\";\n$extensions = array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    );\necho Strongest_Extension($class_name, $extensions) . \"\\n\";\n\nfunction\
    \ candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    )) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    )) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"\
    __HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))\
    \ !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\"))\
    \ !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"\
    Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Slices\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpskikql9o.php:43\n\
    Stack trace:\n#0 /tmp/tmpskikql9o.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpskikql9o.php\
    \ on line 43\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $str = \"\";\n    $str_temp = \"\";\n    $count = 0;\n \
    \   $count_temp = 0;\n    for ($i = 0; $i < count($extensions); $i++) {\n    \
    \    for ($j = 0; $j < strlen($extensions[$i]); $j++) {\n            if ($extensions[$i][$j]\
    \ == strtoupper($extensions[$i][$j])) {\n                $count += 1;\n      \
    \      } else {\n                $count_temp += 1;\n            }\n        }\n\
    \        if ($count - $count_temp > $str_temp) {\n            $str_temp = $count\
    \ - $count_temp;\n            $str = $extensions[$i];\n        }\n        $count\
    \ = 0;\n        $count_temp = 0;\n    }\n    return $class_name . \".\" . $str;\n\
    }\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph5o2ctp4.php:48\n\
    Stack trace:\n#0 /tmp/tmph5o2ctp4.php(57): test()\n#1 {main}\n  thrown in /tmp/tmph5o2ctp4.php\
    \ on line 48\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$result = $class_name . \".\" . $extensions[0];\n\t$max_strength\
    \ = count_uppercase($extensions[0]) - count_lowercase($extensions[0]);\n\tfor\
    \ ($i = 1; $i < count($extensions); $i++) {\n\t\t$strength = count_uppercase($extensions[$i])\
    \ - count_lowercase($extensions[$i]);\n\t\tif ($strength > $max_strength) {\n\t\
    \t\t$max_strength = $strength;\n\t\t\t$result = $class_name . \".\" . $extensions[$i];\n\
    \t\t}\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_uppercase()\
    \ in /tmp/tmp8nx3h5nn.php:20\nStack trace:\n#0 /tmp/tmp8nx3h5nn.php(32): Strongest_Extension('Watashi',\
    \ Array)\n#1 /tmp/tmp8nx3h5nn.php(36): candidate('Watashi', Array)\n#2 /tmp/tmp8nx3h5nn.php(47):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp8nx3h5nn.php on line 20\n"
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strength = array();\n\tforeach ($extensions as $key => $value)\
    \ {\n\t\t$strength[$key] = preg_match_all('/[A-Z]/', $value, $matches) - \n\t\t\
    \t\t\t\t\tpreg_match_all('/[a-z]/', $value, $matches);\n\t}\n\tarsort($strength);\n\
    \t$strongest = key($strength);\n\treturn $class_name . \".\" . $extensions[$strongest];\n\
    }\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $stengths = [];\n    foreach ($extensions as $extension)\
    \ {\n        $caps = 0;\n        $smalls = 0;\n        for ($i = 0; $i < strlen($extension);\
    \ $i++) {\n            if (ctype_upper($extension[$i])) {\n                $caps++;\n\
    \            } else {\n                $smalls++;\n            }\n        }\n\
    \        $stengths[] = $caps - $smalls;\n    }\n    $max = max($stengths);\n \
    \   $max_index = array_search($max, $stengths);\n    return $class_name . \".\"\
    \ . $extensions[$max_index];\n}\n\nprint_r(Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\")));\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "my_class.AA\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcmmvwbk2.php:43\n\
    Stack trace:\n#0 /tmp/tmpcmmvwbk2.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpcmmvwbk2.php\
    \ on line 43\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest = 0;\n    $strongest_extension = $extensions[0];\n\
    \    foreach ($extensions as $extension) {\n        $strength = strlen(preg_replace('/[^A-Z]/',\
    \ '', $extension)) - strlen(preg_replace('/[^a-z]/', '', $extension));\n     \
    \   if ($strength > $strongest) {\n            $strongest = $strength;\n     \
    \       $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2tffpumh.php:38\n\
    Stack trace:\n#0 /tmp/tmp2tffpumh.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp2tffpumh.php\
    \ on line 38\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\n}\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp2l19t2w.php:26\n\
    Stack trace:\n#0 /tmp/tmpp2l19t2w.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpp2l19t2w.php\
    \ on line 26\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n  //..\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx1oir8wx.php:27\n\
    Stack trace:\n#0 /tmp/tmpx1oir8wx.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpx1oir8wx.php\
    \ on line 27\n"
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n  $current_strength = -2;\n  $class_extension = '';\n  $extension_count\
    \ = count($extensions);\n  for ($i = 0; $i < $extension_count; $i++) {\n    $current_extension\
    \ = $extensions[$i];\n    $char_count = strlen($current_extension);\n    $strength\
    \ = 0;\n    for ($j = 0; $j < $char_count; $j++) {\n      $current_char = $current_extension[$j];\n\
    \      if (ctype_upper($current_char)) {\n        $strength++;\n      } else if\
    \ (ctype_lower($current_char)) {\n        $strength--;\n      }\n    }\n    if\
    \ ($strength > $current_strength) {\n      $current_strength = $strength;\n  \
    \    $class_extension = $current_extension;\n    }\n  }\n  return $class_name\
    \ . '.' . $class_extension;\n}\necho Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\")) . PHP_EOL;\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'my_class.AA

    '
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$extensions_scores = array();\n\tforeach ($extensions as $extension)\
    \ {\n\t\t$extensions_scores[$extension] = substr_count(strtoupper($extension),\
    \ \"A\") - substr_count(strtolower($extension), \"a\");\n\t}\n\tarsort($extensions_scores);\n\
    \tforeach ($extensions_scores as $extension => $score) {\n\t\tif ($score == max($extensions_scores))\
    \ {\n\t\t\treturn $class_name.\".\".$extension;\n\t\t}\n\t}\n}\n\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbo2v164j.php:36\n\
    Stack trace:\n#0 /tmp/tmpbo2v164j.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpbo2v164j.php\
    \ on line 36\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n  $strongest_extension = \"\";\n  $strongest_strength = 0;\n\
    \  foreach ($extensions as $extension) {\n    $CAP = preg_match_all(\"/[A-Z]/\"\
    , $extension);\n    $SM = preg_match_all(\"/[a-z]/\", $extension);\n    $strength\
    \ = $CAP - $SM;\n    if ($strength > $strongest_strength) {\n      $strongest_strength\
    \ = $strength;\n      $strongest_extension = $extension;\n    }\n  }\n  return\
    \ $class_name . \".\" . $strongest_extension;\n}\necho Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"));\nfunction candidate(...$args) {\n\
    \    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "my_class.AA\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2o14ckto.php:40\n\
    Stack trace:\n#0 /tmp/tmp2o14ckto.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp2o14ckto.php\
    \ on line 40\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $ext_strengths = [];\n    foreach ($extensions as $ext)\
    \ {\n        $CAP = 0;\n        $SM = 0;\n        for ($i = 0; $i < strlen($ext);\
    \ $i++) {\n            if (ctype_upper($ext[$i])) {\n                $CAP++;\n\
    \            } else {\n                $SM++;\n            }\n        }\n    \
    \    $ext_strengths[$ext] = $CAP - $SM;\n    }\n    asort($ext_strengths);\n \
    \   $strongest_ext = reset($ext_strengths);\n    $strongest_ext_key = key($ext_strengths);\n\
    \    return \"{$class_name}.{$strongest_ext_key}\";\n}\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy5nerjc9.php:42\n\
    Stack trace:\n#0 /tmp/tmpy5nerjc9.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpy5nerjc9.php\
    \ on line 42\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    // your code here\n}\nfunction candidate(...$args) {\n \
    \   return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppbjwxzjl.php:26\n\
    Stack trace:\n#0 /tmp/tmppbjwxzjl.php(37): test()\n#1 {main}\n  thrown in /tmp/tmppbjwxzjl.php\
    \ on line 26\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $res = $class_name.'.'.$extensions[0];\n    $res_strength\
    \ = count_capitals($extensions[0]) - count_lowercase($extensions[0]);\n    for\
    \ ($i = 1; $i < count($extensions); $i++) {\n        $strength = count_capitals($extensions[$i])\
    \ - count_lowercase($extensions[$i]);\n        if ($strength > $res_strength)\
    \ {\n            $res = $class_name.'.'.$extensions[$i];\n            $res_strength\
    \ = $strength;\n        }\n    }\n    return $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_capitals()\
    \ in /tmp/tmptis8oe58.php:20\nStack trace:\n#0 /tmp/tmptis8oe58.php(32): Strongest_Extension('Watashi',\
    \ Array)\n#1 /tmp/tmptis8oe58.php(36): candidate('Watashi', Array)\n#2 /tmp/tmptis8oe58.php(47):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmptis8oe58.php on line 20\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strongest_extension = $extensions[0];\n\t$strongest_extension_strength\
    \ = $this->extension_strength($strongest_extension);\n\tforeach ($extensions as\
    \ $extension) {\n\t\t$extension_strength = $this->extension_strength($extension);\n\
    \t\tif ($extension_strength > $strongest_extension_strength) {\n\t\t\t$strongest_extension\
    \ = $extension;\n\t\t\t$strongest_extension_strength = $extension_strength;\n\t\
    \t}\n\t}\n\treturn \"$class_name.$strongest_extension\";\n}\n\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Using $this when not in object context in\
    \ /tmp/tmpwvc75ybu.php:20\nStack trace:\n#0 /tmp/tmpwvc75ybu.php(32): Strongest_Extension('Watashi',\
    \ Array)\n#1 /tmp/tmpwvc75ybu.php(36): candidate('Watashi', Array)\n#2 /tmp/tmpwvc75ybu.php(47):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpwvc75ybu.php on line 20\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $ext = \"\";\n    $strength = 0;\n    foreach ($extensions\
    \ as $extension) {\n        $CAP = preg_match_all('/[A-Z]/', $extension, $cap);\n\
    \        $SM = preg_match_all('/[a-z]/', $extension, $sm);\n        $strenght_test\
    \ = ($CAP - $SM);\n        if ($strenght_test > $strength) {\n            $strength\
    \ = $strenght_test;\n            $ext = $extension;\n        }\n    }\n    return\
    \ $class_name . \".\" . $ext;\n}\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqkw9hfq8.php:39\n\
    Stack trace:\n#0 /tmp/tmpqkw9hfq8.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpqkw9hfq8.php\
    \ on line 39\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    // Write your code here...\n}\n\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3b5kcohz.php:27\n\
    Stack trace:\n#0 /tmp/tmp3b5kcohz.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp3b5kcohz.php\
    \ on line 27\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strongest_extension = $extensions[0];\n\t$strength = 0;\n\
    \tforeach ($extensions as $extension) {\n\t\t$cap = 0;\n\t\t$sm = 0;\n\t\t$extension_strength\
    \ = 0;\n\t\tfor ($i = 0; $i < strlen($extension); $i++) {\n\t\t\tif (ord($extension[$i])\
    \ >= 65 && ord($extension[$i]) <= 90) {\n\t\t\t\t$cap++;\n\t\t\t} else {\n\t\t\
    \t\t$sm++;\n\t\t\t}\n\t\t}\n\t\t$extension_strength = $cap - $sm;\n\t\tif ($extension_strength\
    \ > $strength) {\n\t\t\t$strength = $extension_strength;\n\t\t\t$strongest_extension\
    \ = $extension;\n\t\t}\n\t}\n\t$result = $class_name.\".\".$strongest_extension;\n\
    \treturn $result;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqkvrbleq.php:47\n\
    Stack trace:\n#0 /tmp/tmpqkvrbleq.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpqkvrbleq.php\
    \ on line 47\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $extensions = array_map(function($extension) {\n       \
    \ $cap = strlen(preg_replace('/[^A-Z]/', '', $extension));\n        $sm = strlen(preg_replace('/[^a-z]/',\
    \ '', $extension));\n        return ($cap - $sm) . \":\" . $extension;\n    },\
    \ $extensions);\n    $max = max($extensions);\n    return \"$class_name.\" . explode(\"\
    :\", $max)[1];\n}\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcw3y56_x.php:36\n\
    Stack trace:\n#0 /tmp/tmpcw3y56_x.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpcw3y56_x.php\
    \ on line 36\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strength_extension = array();\n    $strongest_extension\
    \ = '';\n    $strongest_extension_strength = '';\n    foreach ($extensions as\
    \ $extension) {\n        $strength_extension[$extension] = get_extension_strength($extension);\n\
    \    }\n    $strongest_extension_strength = get_strongest_extension_strength($strength_extension);\n\
    \    foreach ($strength_extension as $key => $value) {\n        if ($value ==\
    \ $strongest_extension_strength) {\n            $strongest_extension = $key;\n\
    \            break;\n        }\n    }\n    return $class_name . '.' . $strongest_extension;\n\
    }\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_extension_strength()\
    \ in /tmp/tmpaxjay_i8.php:23\nStack trace:\n#0 /tmp/tmpaxjay_i8.php(35): Strongest_Extension('Watashi',\
    \ Array)\n#1 /tmp/tmpaxjay_i8.php(39): candidate('Watashi', Array)\n#2 /tmp/tmpaxjay_i8.php(50):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpaxjay_i8.php on line 23\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n  $arr = [];\n  foreach ($extensions as $extension) {\n    $count\
    \ = substr_count($extension, strtoupper($extension));\n    $count2 = substr_count($extension,\
    \ strtolower($extension));\n    $arr[] = $count - $count2;\n  }\n  $count = array_count_values($arr);\n\
    \  $count = max($count);\n  $max = array_search($count, $arr);\n  return $class_name.\"\
    .\".$extensions[$max];\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvtcikel9.php:36\n\
    Stack trace:\n#0 /tmp/tmpvtcikel9.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpvtcikel9.php\
    \ on line 36\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strongest_extension = 0;\n\t$strongest_extension_name = $extensions[0];\n\
    \tforeach ($extensions as $extension) {\n\t\t$strength = preg_match_all('/[A-Z]/',\
    \ $extension) - preg_match_all('/[a-z]/', $extension);\n\t\tif ($strength > $strongest_extension)\
    \ {\n\t\t\t$strongest_extension = $strength;\n\t\t\t$strongest_extension_name\
    \ = $extension;\n\t\t}\n\t}\n\treturn $class_name . \".\" . $strongest_extension_name;\n\
    }\necho Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"));\nfunction\
    \ candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    )) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    )) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"\
    __HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))\
    \ !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\"))\
    \ !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"\
    Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "my_class.AA\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpucn856nt.php:38\n\
    Stack trace:\n#0 /tmp/tmpucn856nt.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpucn856nt.php\
    \ on line 38\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $extensions_strength = [];\n    foreach ($extensions as\
    \ $extension) {\n        $extensions_strength[$extension] = ucfirst($extension)\
    \ - strtolower($extension);\n    }\n    $extension_name = array_search(max($extensions_strength),\
    \ $extensions_strength);\n    return $class_name . \".\" . $extension_name;\n\
    }\nprint_r(Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\", \"Cheese\"\
    , \"StuFfed\")));\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: Unsupported operand types: string -\
    \ string in /tmp/tmpzymnd69s.php:21\nStack trace:\n#0 /tmp/tmpzymnd69s.php(26):\
    \ Strongest_Extension('Slices', Array)\n#1 {main}\n  thrown in /tmp/tmpzymnd69s.php\
    \ on line 21\n"
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n  $strength = [];\n  foreach ($extensions as $extension) {\n\
    \    $upper = preg_match_all('/[A-Z]/', $extension);\n    $lower = preg_match_all('/[a-z]/',\
    \ $extension);\n    $strength[] = $upper - $lower;\n  }\n  $max = max($strength);\n\
    \  $max_index = array_search($max, $strength);\n  return \"$class_name.$extensions[$max_index]\"\
    ;\n}\n\n$class_name = \"my_class\";\n$extensions = [\"AA\", \"Be\", \"CC\"];\n\
    print_r(Strongest_Extension($class_name, $extensions));\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: my_class.AA
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $str = array();\n    $max = 0;\n    foreach ($extensions\
    \ as $ext) {\n        $c = preg_match_all('/[A-Z]/', $ext, $matches);\n      \
    \  $s = preg_match_all('/[a-z]/', $ext, $matches);\n        $str[$ext] = $c -\
    \ $s;\n        if ($c - $s > $max) {\n            $max = $c - $s;\n        }\n\
    \    }\n    $strong = array_search($max, $str);\n    return \"$class_name.$strong\"\
    ;\n}\n\necho Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"));\n\
    \nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: my_class.AA
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $class_name = preg_replace('/\\s+/', '', $class_name);\n\
    \    $count = 0;\n    $capital_letters = 0;\n    $strength = 0;\n    $result =\
    \ 0;\n    for ($i = 0; $i < count($extensions); $i++) {\n        $count = 0;\n\
    \        $capital_letters = 0;\n        $strength = 0;\n        $extensions[$i]\
    \ = preg_replace('/\\s+/', '', $extensions[$i]);\n        for ($j = 0; $j < strlen($extensions[$i]);\
    \ $j++) {\n            if (ctype_upper($extensions[$i][$j])) {\n             \
    \   $capital_letters++;\n            } else {\n                $count++;\n   \
    \         }\n        }\n        $strength = $capital_letters - $count;\n     \
    \   if ($strength > $result) {\n            $result = $strength;\n           \
    \ $strongest_extension = $extensions[$i];\n        }\n    }\n    return $class_name\
    \ . \".\" . $strongest_extension;\n}\n\n$class_name = \"my_class\";\n$extensions\
    \ = array(\"AA\", \"Be\", \"CC\");\necho Strongest_Extension($class_name, $extensions);\n\
    function candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\"\
    , \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\",\
    \ \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"\
    TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\"\
    )) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))\
    \ !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\"))\
    \ !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"\
    Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "my_class.AA\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp17g4jn8q.php:53\n\
    Stack trace:\n#0 /tmp/tmp17g4jn8q.php(64): test()\n#1 {main}\n  thrown in /tmp/tmp17g4jn8q.php\
    \ on line 53\n"
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $result = $class_name . \".\" . $extensions[0];\n    $strength\
    \ = (strlen(str_replace(range('a', 'z'), \"\", $extensions[0])) - strlen(str_replace(range('A',\
    \ 'Z'), \"\", $extensions[0])));\n    for ($i = 1; $i < count($extensions); $i++)\
    \ {\n        $current_strength = (strlen(str_replace(range('a', 'z'), \"\", $extensions[$i]))\
    \ - strlen(str_replace(range('A', 'Z'), \"\", $extensions[$i])));\n        if\
    \ ($current_strength > $strength) {\n            $strength = $current_strength;\n\
    \            $result = $class_name . \".\" . $extensions[$i];\n        }\n   \
    \ }\n    return $result;\n}\necho Strongest_Extension(\"my_class\", array(\"AA\"\
    , \"Be\", \"CC\"));\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: my_class.AA
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strongest = [$extensions[0],0];\n\tfor ($i=0; $i < count($extensions);\
    \ $i++) { \n\t\t$sm = 0;\n\t\t$cap = 0;\n\t\t$strength = 0;\n\t\tfor ($j=0; $j\
    \ < strlen($extensions[$i]); $j++) { \n\t\t\tif (ctype_upper($extensions[$i][$j]))\
    \ {\n\t\t\t\t$cap++;\n\t\t\t} else {\n\t\t\t\t$sm++;\n\t\t\t}\n\t\t}\n\t\t$strength\
    \ = $cap - $sm;\n\t\tif ($strength > $strongest[1]) {\n\t\t\t$strongest = [$extensions[$i],$strength];\n\
    \t\t}\n\t}\n\treturn \"$class_name.$strongest[0]\";\n}\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp95nrsgci.php:43\n\
    Stack trace:\n#0 /tmp/tmp95nrsgci.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp95nrsgci.php\
    \ on line 43\n"
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$upper_count = [];\n\t$lower_count = [];\n\t$strength = [];\n\
    \tforeach ($extensions as $k => $extension) {\n\t\t$upper_count[$k] = preg_match_all('/[A-Z]/',\
    \ $extension);\n\t\t$lower_count[$k] = preg_match_all('/[a-z]/', $extension);\n\
    \t\t$strength[$k] = $upper_count[$k] - $lower_count[$k];\n\t}\n\t$max_strength\
    \ = max($strength);\n\t$max_key = array_search($max_strength, $strength);\n\t\
    return $class_name . '.' . $extensions[$max_key];\n}\necho Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"));\nfunction candidate(...$args) {\n\
    \    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: my_class.AA
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = $extensions[0];\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $num_uppercase = 0;\n\
    \        $num_lowercase = 0;\n        for ($i = 0; $i < strlen($extension); $i++)\
    \ {\n            if (ctype_upper($extension[$i])) {\n                $num_uppercase++;\n\
    \            } else if (ctype_lower($extension[$i])) {\n                $num_lowercase++;\n\
    \            }\n        }\n        $extension_strength = $num_uppercase - $num_lowercase;\n\
    \        if ($extension_strength > $strongest_extension_strength) {\n        \
    \    $strongest_extension = $extension;\n            $strongest_extension_strength\
    \ = $extension_strength;\n        }\n    }\n    return $class_name.\".\".$strongest_extension;\n\
    }\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb0exw3jq.php:46\n\
    Stack trace:\n#0 /tmp/tmpb0exw3jq.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpb0exw3jq.php\
    \ on line 46\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n  $strongest = \"my_class.AA\";\n  foreach ($extensions as $index\
    \ => $extension) {\n    $uppercase = preg_match_all('/[A-Z]/', $extension, $matches);\n\
    \    $lowercase = preg_match_all('/[a-z]/', $extension, $matches);\n    $strength\
    \ = $uppercase - $lowercase;\n    if ($strength < 0) {\n      $strength = 0;\n\
    \    }\n    $new_strongest = $class_name . \".\" . $extension;\n    if ($strength\
    \ > $strongest) {\n      $strongest = $new_strongest;\n    }\n  }\n  return $strongest;\n\
    }\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps4pfoey1.php:39\n\
    Stack trace:\n#0 /tmp/tmps4pfoey1.php(50): test()\n#1 {main}\n  thrown in /tmp/tmps4pfoey1.php\
    \ on line 39\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $cap_counter = 0;\n    $sm_counter = 0;\n    $strongest_extension\
    \ = \"\";\n    $strength = 0;\n    foreach ($extensions as $extension) {\n   \
    \     foreach (str_split($extension) as $letter) {\n            if (preg_match(\"\
    /[A-Z]/\", $letter)) {\n                $cap_counter++;\n            } elseif\
    \ (preg_match(\"/[a-z]/\", $letter)) {\n                $sm_counter++;\n     \
    \       }\n        }\n        if ($cap_counter - $sm_counter > $strength) {\n\
    \            $strength = $cap_counter - $sm_counter;\n            $strongest_extension\
    \ = $extension;\n        }\n        $cap_counter = 0;\n        $sm_counter = 0;\n\
    \    }\n    $strongest_extension = \"$class_name.$strongest_extension\";\n   \
    \ return $strongest_extension;\n}\necho Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"));\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "my_class.AA\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ccfe8ll.php:49\n\
    Stack trace:\n#0 /tmp/tmp2ccfe8ll.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp2ccfe8ll.php\
    \ on line 49\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$max_extension = \"\";\n\t$max_strength = 0;\n\tforeach ($extensions\
    \ as $extension) {\n\t\t$CAP = preg_match_all(\"/[A-Z]/\", $extension);\n\t\t\
    $SM = preg_match_all(\"/[a-z]/\", $extension);\n\t\t$strength = $CAP - $SM;\n\t\
    \tif ($strength > $max_strength) {\n\t\t\t$max_strength = $strength;\n\t\t\t$max_extension\
    \ = $extension;\n\t\t}\n\t}\n\treturn $class_name.\".\".$max_extension;\n}\n\n\
    function candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\"\
    , \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\",\
    \ \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"\
    TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\"\
    )) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))\
    \ !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\"))\
    \ !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"\
    Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzq1b9vlm.php:40\n\
    Stack trace:\n#0 /tmp/tmpzq1b9vlm.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpzq1b9vlm.php\
    \ on line 40\n"
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $extension_strength = array();\n    $strongest_extension\
    \ = array();\n    foreach ($extensions as $extension) {\n        $uppercase_count\
    \ = preg_match_all('/[A-Z]/', $extension);\n        $lowercase_count = preg_match_all('/[a-z]/',\
    \ $extension);\n        $difference = $uppercase_count - $lowercase_count;\n \
    \       array_push($extension_strength, $difference);\n    }\n    $max_value =\
    \ max($extension_strength);\n    $max_key = array_search($max_value, $extension_strength);\n\
    \    $strongest_extension[$extensions[$max_key]] = $max_value;\n    return $class_name.\"\
    .\".key($strongest_extension);\n}\n\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$matches = [];\n\tforeach ($extensions as $extension) {\n\t\
    \t$caps = preg_match_all('/[A-Z]/', $extension);\n\t\t$smalls = preg_match_all('/[a-z]/',\
    \ $extension);\n\t\t$strength = $caps - $smalls;\n\t\t$matches[$extension] = $strength;\n\
    \t}\n\tasort($matches);\n\treturn $class_name.'.'.key($matches);\n}\necho Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"));\nfunction candidate(...$args) {\n\
    \    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "my_class.Be\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw0vzm7re.php:35\n\
    Stack trace:\n#0 /tmp/tmpw0vzm7re.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpw0vzm7re.php\
    \ on line 35\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n  $strongest = -1;\n  $strongest_extension = '';\n  $strongest_extension_idx\
    \ = 0;\n  foreach ($extensions as $idx => $extension) {\n    $strength = count(array_filter(str_split($extension),\
    \ \"is_upper\")) - count(array_filter(str_split($extension), \"is_lower\"));\n\
    \    if ($strength > $strongest) {\n      $strongest = $strength;\n      $strongest_extension\
    \ = $extension;\n      $strongest_extension_idx = $idx;\n    }\n  }\n  return\
    \ $class_name . '.' . $strongest_extension;\n}\n\necho Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\")) . \"\\n\";\necho Strongest_Extension(\"\
    my_class\", array(\"AACCCC\", \"AaCCCC\", \"AACCC\", \"AaCC\")) . \"\\n\";\necho\
    \ Strongest_Extension(\"my_class\", array(\"AACCCC\", \"AaCCCC\", \"AACCC\", \"\
    AaCC\", \"aacc\")) . \"\\n\";\necho Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\")) . \"\\n\";\necho Strongest_Extension(\"my_class\"\
    , array(\"A\", \"Be\", \"CC\")) . \"\\n\";\necho Strongest_Extension(\"my_class\"\
    , array(\"AA\", \"Be\", \"C\", \"D\")) . \"\\n\";\necho Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"Cc\")) . \"\\n\";\necho Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"C\", \"D\", \"c\", \"f\")) . \"\\n\";\necho\
    \ Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"C\", \"d\", \"c\"\
    , \"f\")) . \"\\n\";\necho Strongest_Extension(\"my_class\", array(\"AA\", \"\
    Be\", \"C\", \"d\", \"c\", \"F\")) . \"\\n\";\necho Strongest_Extension(\"my_class\"\
    ,\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpf905xj_7.php on line 44

    '
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n  // your code goes here\n\n  // solution from: https://www.codewars.com/kata/strongest-extension/solutions/php\n\
    \  $max = 0;\n  $strongest = '';\n  foreach ($extensions as $extension) {\n  \
    \  $cap = preg_match_all('/[A-Z]/', $extension, $found);\n    $sm = preg_match_all('/[a-z]/',\
    \ $extension, $found);\n    $strength = $cap - $sm;\n    if ($strength > $max)\
    \ {\n      $max = $strength;\n      $strongest = $extension;\n    }\n  }\n  return\
    \ $class_name . '.' . $strongest;\n}\n\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2353ta45.php:43\n\
    Stack trace:\n#0 /tmp/tmp2353ta45.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp2353ta45.php\
    \ on line 43\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$max_strength = null;\n\t$class_extension = null;\n\tforeach\
    \ ($extensions as $extension) {\n\t\t$length = strlen($extension);\n\t\t$capital\
    \ = 0;\n\t\t$small = 0;\n\t\tfor ($i = 0; $i < $length; $i++) {\n\t\t\tif (ctype_upper($extension[$i]))\
    \ {\n\t\t\t\t$capital++;\n\t\t\t} else {\n\t\t\t\t$small++;\n\t\t\t}\n\t\t}\n\t\
    \t$strength = ($capital - $small) / $length;\n\t\tif ($max_strength === null ||\
    \ $strength > $max_strength) {\n\t\t\t$max_strength = $strength;\n\t\t\t$class_extension\
    \ = $extension;\n\t\t}\n\t}\n\treturn \"$class_name.$class_extension\";\n}\nfunction\
    \ candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    )) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    )) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"\
    __HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))\
    \ !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\"))\
    \ !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"\
    Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5uob0slp.php:45\n\
    Stack trace:\n#0 /tmp/tmp5uob0slp.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp5uob0slp.php\
    \ on line 45\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$best_extension = \"\";\n\t$best_strength = 0;\n\tforeach\
    \ ($extensions as $extension) {\n\t\t$strength = $extension_strength($extension);\n\
    \t\tif ($strength > $best_strength) {\n\t\t\t$best_strength = $strength;\n\t\t\
    \t$best_extension = $extension;\n\t\t}\n\t}\n\treturn $class_name.\".\".$best_extension;\n\
    }\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $extension_strength in /tmp/tmpw8ncg79o.php\
    \ on line 22\n\nFatal error: Uncaught Error: Value of type null is not callable\
    \ in /tmp/tmpw8ncg79o.php:22\nStack trace:\n#0 /tmp/tmpw8ncg79o.php(32): Strongest_Extension('Watashi',\
    \ Array)\n#1 /tmp/tmpw8ncg79o.php(36): candidate('Watashi', Array)\n#2 /tmp/tmpw8ncg79o.php(47):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpw8ncg79o.php on line 22\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t// Get the number of upper case letters of the extension.\n\
    \t$c = count_chars($extensions, 1);\n\t$extension = array_search(max($c), $c);\n\
    \t// Append the extension name to the class name.\n\t$class_name .= \".\".$extension;\n\
    \treturn $class_name;\n}\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: count_chars(): Argument #1 ($string)\
    \ must be of type string, array given in /tmp/tmpybcyho66.php:20\nStack trace:\n\
    #0 /tmp/tmpybcyho66.php(20): count_chars(Array, 1)\n#1 /tmp/tmpybcyho66.php(27):\
    \ Strongest_Extension('Watashi', Array)\n#2 /tmp/tmpybcyho66.php(31): candidate('Watashi',\
    \ Array)\n#3 /tmp/tmpybcyho66.php(42): test()\n#4 {main}\n  thrown in /tmp/tmpybcyho66.php\
    \ on line 20\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n  // your code here\n}\nfunction candidate(...$args) {\n   \
    \ return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptqkha2lt.php:26\n\
    Stack trace:\n#0 /tmp/tmptqkha2lt.php(37): test()\n#1 {main}\n  thrown in /tmp/tmptqkha2lt.php\
    \ on line 26\n"
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $ext = [];\n    $n = count($extensions);\n    for ($i =\
    \ 0; $i < $n; $i++) {\n        $ext[$i] = 0;\n        $sm = 0;\n        $cap =\
    \ 0;\n        $x = $extensions[$i];\n        $m = strlen($x);\n        for ($j\
    \ = 0; $j < $m; $j++) {\n            if (ctype_lower($x[$j])) {\n            \
    \    $sm++;\n            } else if (ctype_upper($x[$j])) {\n                $cap++;\n\
    \            }\n        }\n        $ext[$i] = $cap - $sm;\n    }\n    $max_ext\
    \ = $ext[0];\n    $max_idx = 0;\n    for ($i = 1; $i < $n; $i++) {\n        if\
    \ ($ext[$i] > $max_ext) {\n            $max_ext = $ext[$i];\n            $max_idx\
    \ = $i;\n        }\n    }\n    return $class_name . \".\" . $extensions[$max_idx];\n\
    }\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strength = 0;\n    foreach\
    \ ($extensions as $extension) {\n        $extension_strength = Strongest_Extension_Strength($extension);\n\
    \        if ($extension_strength > $strength) {\n            $strongest_extension\
    \ = $extension;\n            $strength = $extension_strength;\n        }\n   \
    \ }\n    return $class_name . \".\" . $strongest_extension;\n}\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function Strongest_Extension_Strength()\
    \ in /tmp/tmpfcv2qag5.php:22\nStack trace:\n#0 /tmp/tmpfcv2qag5.php(31): Strongest_Extension('Watashi',\
    \ Array)\n#1 /tmp/tmpfcv2qag5.php(35): candidate('Watashi', Array)\n#2 /tmp/tmpfcv2qag5.php(46):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpfcv2qag5.php on line 22\n"
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$ext_caps = array();\n\t$ext_smalls = array();\n\t$caps =\
    \ array();\n\t$smalls = array();\n\t$ext_length = count($extensions);\n\t$strength\
    \ = array();\n\tfor ($x = 0; $x < $ext_length; $x++) {\n\t\t$ext_caps[$x] = preg_match_all('/[A-Z]/',\
    \ $extensions[$x], $caps);\n\t\t$ext_smalls[$x] = preg_match_all('/[a-z]/', $extensions[$x],\
    \ $smalls);\n\t\t$strength[$x] = $ext_caps[$x] - $ext_smalls[$x];\n\t}\n\t$strongest\
    \ = max($strength);\n\t$strongest_key = array_search($strongest, $strength);\n\
    \treturn $class_name . \".\" . $extensions[$strongest_key];\n}\n\necho Strongest_Extension(\"\
    Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"));\necho \"\\n\";\n\
    echo Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"));\necho \"\
    \\n\";\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: 'Slices.SErviNGSliCes

    my_class.AA

    '
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest = '';\n    $strength = 0;\n    foreach ($extensions\
    \ as $extension) {\n        $uppercase = 0;\n        $lowercase = 0;\n       \
    \ for ($i = 0; $i < strlen($extension); $i++) {\n            if (ctype_upper($extension[$i]))\
    \ {\n                $uppercase++;\n            } else {\n                $lowercase++;\n\
    \            }\n        }\n        $new_strength = $uppercase - $lowercase;\n\
    \        if ($new_strength > $strength) {\n            $strength = $new_strength;\n\
    \            $strongest = $extension;\n        }\n    }\n    return $class_name\
    \ . '.' . $strongest;\n}\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp559g_53s.php:44\n\
    Stack trace:\n#0 /tmp/tmp559g_53s.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp559g_53s.php\
    \ on line 44\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n  $highest = 0;\n  $strongest = $extensions[0];\n  foreach ($extensions\
    \ as $extension) {\n    $cap = preg_match_all('/[A-Z]/', $extension);\n    $sm\
    \ = preg_match_all('/[a-z]/', $extension);\n    $strength = $cap - $sm;\n    if\
    \ ($strength > $highest) {\n      $highest = $strength;\n      $strongest = $extension;\n\
    \    }\n  }\n  return \"$class_name.$strongest\";\n}\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprmzw_f8c.php:39\n\
    Stack trace:\n#0 /tmp/tmprmzw_f8c.php(48): test()\n#1 {main}\n  thrown in /tmp/tmprmzw_f8c.php\
    \ on line 39\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = $extensions[0];\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = (count(preg_grep('/[A-Z]/', str_split($extension)))\n            - count(preg_grep('/[a-z]/',\
    \ str_split($extension))));\n        if ($extension_strength > $strongest_extension_strength)\
    \ {\n            $strongest_extension = $extension;\n            $strongest_extension_strength\
    \ = $extension_strength;\n        }\n    }\n    return $class_name . \".\" . $strongest_extension;\n\
    }\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzl5vzgkw.php:39\n\
    Stack trace:\n#0 /tmp/tmpzl5vzgkw.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpzl5vzgkw.php\
    \ on line 39\n"
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = array_shift($extensions);\n    $strongest_strength\
    \ = strlen(preg_replace('/[^A-Z]/', '', $strongest_extension)) - strlen(preg_replace('/[^a-z]/',\
    \ '', $strongest_extension));\n    foreach ($extensions as $extension) {\n   \
    \     $strength = strlen(preg_replace('/[^A-Z]/', '', $extension)) - strlen(preg_replace('/[^a-z]/',\
    \ '', $extension));\n        if ($strength > $strongest_strength) {\n        \
    \    $strongest_extension = $extension;\n            $strongest_strength = $strength;\n\
    \        }\n    }\n    return \"{$class_name}.{$strongest_extension}\";\n}\nfunction\
    \ candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    )) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    )) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"\
    __HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))\
    \ !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\"))\
    \ !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"\
    Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest = array('class' => $class_name, 'extension' =>\
    \ '', 'strength' => 0);\n    $extensions = array_map(function($a) {\n        return\
    \ array('name' => $a, 'strength' => substr_count($a, range('A', 'Z')) - substr_count($a,\
    \ range('a', 'z')));\n    }, $extensions);\n    foreach ($extensions as $extension)\
    \ {\n        if (abs($extension['strength']) > abs($strongest['strength'])) {\n\
    \            $strongest['extension'] = $extension['name'];\n            $strongest['strength']\
    \ = $extension['strength'];\n        }\n    }\n    return $strongest['class']\
    \ . '.' . $strongest['extension'];\n}\n\necho Strongest_Extension(\"my_class\"\
    , array(\"AA\", \"Be\", \"CC\"));\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: substr_count(): Argument #2 ($needle)\
    \ must be of type string, array given in /tmp/tmpsoh5e2yi.php:21\nStack trace:\n\
    #0 /tmp/tmpsoh5e2yi.php(21): substr_count('AA', Array)\n#1 [internal function]:\
    \ {closure}('AA')\n#2 /tmp/tmpsoh5e2yi.php(22): array_map(Object(Closure), Array)\n\
    #3 /tmp/tmpsoh5e2yi.php(32): Strongest_Extension('my_class', Array)\n#4 {main}\n\
    \  thrown in /tmp/tmpsoh5e2yi.php on line 21\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest = 0;\n    $strongest_extension = '';\n    foreach\
    \ ($extensions as $key => $extension) {\n        $extension_strength = strength_of_extension($extension);\n\
    \        if ($extension_strength > $strongest) {\n            $strongest = $extension_strength;\n\
    \            $strongest_extension = $extension;\n        }\n    }\n    return\
    \ $class_name . '.' . $strongest_extension;\n}\n\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function strength_of_extension()\
    \ in /tmp/tmpuq2tk9nc.php:22\nStack trace:\n#0 /tmp/tmpuq2tk9nc.php(32): Strongest_Extension('Watashi',\
    \ Array)\n#1 /tmp/tmpuq2tk9nc.php(36): candidate('Watashi', Array)\n#2 /tmp/tmpuq2tk9nc.php(47):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpuq2tk9nc.php on line 22\n"
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $numbers = array();\n    foreach ($extensions as $extension)\
    \ {\n        $cap = strlen(preg_replace('/[^A-Z]/', '', $extension));\n      \
    \  $sm = strlen(preg_replace('/[^a-z]/', '', $extension));\n        $numbers[]\
    \ = $cap - $sm;\n    }\n    $max = array_keys($numbers, max($numbers));\n    $result\
    \ = $class_name . '.' . $extensions[$max[0]];\n    return $result;\n}\necho Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"));\nfunction candidate(...$args) {\n\
    \    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: my_class.AA
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n  $strongest_extension = '';\n  $strongest_extension_strength\
    \ = -10000;\n  foreach ($extensions as $extension) {\n    $CAP = strlen(preg_replace('/[^A-Z]/',\
    \ '', $extension));\n    $SM = strlen(preg_replace('/[^a-z]/', '', $extension));\n\
    \    $strength = $CAP - $SM;\n    if ($strength > $strongest_extension_strength)\
    \ {\n      $strongest_extension_strength = $strength;\n      $strongest_extension\
    \ = $extension;\n    }\n  }\n  return \"$class_name.$strongest_extension\";\n\
    }\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n  $strongest = \"\";\n  $total_strength = 0;\n  foreach ($extensions\
    \ as $extension) {\n    $cap = 0;\n    $sm = 0;\n    for ($i = 0; $i < strlen($extension);\
    \ $i++) {\n      if (strtoupper($extension[$i]) == $extension[$i]) $cap++;\n \
    \     else $sm++;\n    }\n    $strength = $cap - $sm;\n    if ($strength > $total_strength)\
    \ {\n      $total_strength = $strength;\n      $strongest = $extension;\n    }\n\
    \  }\n  return \"$class_name.$strongest\";\n}\n\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpba6__rn_.php:44\n\
    Stack trace:\n#0 /tmp/tmpba6__rn_.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpba6__rn_.php\
    \ on line 44\n"
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n  $class = [];\n  foreach ($extensions as $extension) {\n  \
    \  $class[] = [\n      \"extension\" => $extension,\n      \"strength\" => (preg_match_all(\"\
    /[A-Z]/\", $extension) - preg_match_all(\"/[a-z]/\", $extension))\n    ];\n  }\n\
    \  $class = array_column($class, \"strength\", \"extension\");\n  arsort($class);\n\
    \  return $class_name . \".\" . key($class);\n}\n\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    // Your code goes here\n    return $class_name;\n}\nfunction\
    \ candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    )) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    )) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"\
    __HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))\
    \ !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\"))\
    \ !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"\
    Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbjwf9tff.php:27\n\
    Stack trace:\n#0 /tmp/tmpbjwf9tff.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpbjwf9tff.php\
    \ on line 27\n"
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$max_strength = null;\n\t$max_strength_name = null;\n\tforeach\
    \ ($extensions as $extension) {\n\t\t$cap = preg_match_all('/[A-Z]/', $extension,\
    \ $matches);\n\t\t$sm = preg_match_all('/[a-z]/', $extension, $matches);\n\t\t\
    $strength = $cap - $sm;\n\t\tif (is_null($max_strength) || $strength > $max_strength)\
    \ {\n\t\t\t$max_strength = $strength;\n\t\t\t$max_strength_name = $extension;\n\
    \t\t}\n\t}\n\treturn $class_name . '.' . $max_strength_name;\n}\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $best_strength = -10000;\n    $best_extension = \"\";\n\
    \    foreach ($extensions as $extension) {\n        $extension_strength = get_extension_strength($extension);\n\
    \        if ($extension_strength > $best_strength) {\n            $best_strength\
    \ = $extension_strength;\n            $best_extension = $extension;\n        }\n\
    \    }\n    return \"$class_name.$best_extension\";\n}\n\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_extension_strength()\
    \ in /tmp/tmpc386gnoy.php:22\nStack trace:\n#0 /tmp/tmpc386gnoy.php(32): Strongest_Extension('Watashi',\
    \ Array)\n#1 /tmp/tmpc386gnoy.php(36): candidate('Watashi', Array)\n#2 /tmp/tmpc386gnoy.php(47):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpc386gnoy.php on line 22\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n  $ext_strongest = \"\";\n  $ext_strength = 0;\n  foreach ($extensions\
    \ as $ext) {\n    // Remove whitespace\n    $ext = preg_replace('/\\s+/', '',\
    \ $ext);\n    // Get uppercase\n    $cap = preg_match_all('/[A-Z]/', $ext, $cap);\n\
    \    // Get lowercase\n    $sm = preg_match_all('/[a-z]/', $ext, $sm);\n    //\
    \ Get strength\n    $strength = $cap[0] - $sm[0];\n    // Check if extension is\
    \ stronger than the current one\n    if ($strength > $ext_strength) {\n      $ext_strongest\
    \ = $ext;\n      $ext_strength = $strength;\n    }\n  }\n  return $class_name\
    \ . \".\" . $ext_strongest;\n}\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Trying to access array offset on value of type int in /tmp/tmpknvlqgp5.php\
    \ on line 29\n\nWarning: Trying to access array offset on value of type int in\
    \ /tmp/tmpknvlqgp5.php on line 29\n\nWarning: Trying to access array offset on\
    \ value of type int in /tmp/tmpknvlqgp5.php on line 29\n\nWarning: Trying to access\
    \ array offset on value of type int in /tmp/tmpknvlqgp5.php on line 29\n\nWarning:\
    \ Trying to access array offset on value of type int in /tmp/tmpknvlqgp5.php on\
    \ line 29\n\nWarning: Trying to access array offset on value of type int in /tmp/tmpknvlqgp5.php\
    \ on line 29\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpknvlqgp5.php:43\n\
    Stack trace:\n#0 /tmp/tmpknvlqgp5.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpknvlqgp5.php\
    \ on line 43\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n  $class_name .= '.';\n  $strongest_extension = '';\n  $strongest_strength\
    \ = 0;\n  foreach ($extensions as $extension) {\n    $uppercase_count = strlen(preg_replace('/[^A-Z]/',\
    \ '', $extension));\n    $lowercase_count = strlen(preg_replace('/[^a-z]/', '',\
    \ $extension));\n    $strength = ($uppercase_count - $lowercase_count);\n    if\
    \ ($strength > $strongest_strength) {\n      $strongest_strength = $strength;\n\
    \      $strongest_extension = $extension;\n    }\n  }\n  return $class_name .\
    \ $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprib0ahps.php:41\n\
    Stack trace:\n#0 /tmp/tmprib0ahps.php(50): test()\n#1 {main}\n  thrown in /tmp/tmprib0ahps.php\
    \ on line 41\n"
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    //$strength = 0;\n    // $strongest = '';\n    // $extensions\
    \ = array();\n    // foreach ($extensions as $extension) {\n    //     $caps =\
    \ preg_match_all('/[A-Z]/', $extension);\n    //     $lower = preg_match_all('/[a-z]/',\
    \ $extension);\n    //     $strength = $caps - $lower;\n    //     $extensions[$extension]\
    \ = $strength;\n    // }\n    // asort($extensions);\n    // $strongest = $extensions[key($extensions)];\n\
    \    // return \"my_class.$strongest\";\n    $strength = array();\n    foreach\
    \ ($extensions as $extension) {\n        $caps = preg_match_all('/[A-Z]/', $extension);\n\
    \        $lower = preg_match_all('/[a-z]/', $extension);\n        $strength[$extension]\
    \ = $caps - $lower;\n    }\n    arsort($strength);\n    $strongest = key($strength);\n\
    \    return \"$class_name.$strongest\";\n}\n\nfunction candidate(...$args) {\n\
    \    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $max_strength = 0;\n    $strongest_extension = \"\";\n \
    \   for ($i = 0; $i < count($extensions); $i++) {\n        $ext = $extensions[$i];\n\
    \        $upper_case_letters = preg_replace(\"/[^A-Z]/\", \"\", $ext);\n     \
    \   $lower_case_letters = preg_replace(\"/[^a-z]/\", \"\", $ext);\n        $strength\
    \ = (strlen($upper_case_letters) - strlen($lower_case_letters));\n        if ($strength\
    \ > $max_strength) {\n            $max_strength = $strength;\n            $strongest_extension\
    \ = $ext;\n        }\n    }\n    return $class_name . \".\" . $strongest_extension;\n\
    }\necho Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"\
    StuFfed\"));\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "Slices.\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7rjnlz17.php:41\n\
    Stack trace:\n#0 /tmp/tmp7rjnlz17.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp7rjnlz17.php\
    \ on line 41\n"
  timestamp: 1660028577
- exit_code: 0
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_strength = -INF;\n    $strongest_name = \"\"\
    ;\n    foreach ($extensions as $name) {\n        $strength = 0;\n        for ($i\
    \ = 0; $i < strlen($name); $i++) {\n            if (ctype_upper($name[$i])) {\n\
    \                $strength++;\n            } else if (ctype_lower($name[$i]))\
    \ {\n                $strength--;\n            }\n        }\n        if ($strength\
    \ > $strongest_strength) {\n            $strongest_strength = $strength;\n   \
    \         $strongest_name = $name;\n        }\n    }\n    return $class_name .\
    \ \".\" . $strongest_name;\n}\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $name = $class_name;\n    $cap = $sm = 0;\n    foreach ($extensions\
    \ as $v) {\n        $s = substr_count($v, strtoupper($v)) - substr_count($v, strtolower($v));\n\
    \        if ($s > $cap) {\n            $cap = $s;\n            $name = $class_name.'.'.$v;\n\
    \        }\n    }\n    return $name;\n}\n\nfunction candidate(...$args) {\n  \
    \  return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk7feoxq7.php:36\n\
    Stack trace:\n#0 /tmp/tmpk7feoxq7.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpk7feoxq7.php\
    \ on line 36\n"
  timestamp: 1660028577
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    if(count($extensions) == 0) {\n        return $class_name;\n\
    \    }\n    if(count($extensions) == 1) {\n        return $class_name . \".\"\
    \ . $extensions[0];\n    }\n    $strength = -1;\n    $strongest_extension = \"\
    \";\n    for($i = 0; $i < count($extensions); $i++) {\n        $current_strength\
    \ = 0;\n        for($j = 0; $j < strlen($extensions[$i]); $j++) {\n          \
    \  if(ctype_upper($extensions[$i][$j])) {\n                $current_strength +=\
    \ 1;\n            }\n            if(ctype_lower($extensions[$i][$j])) {\n    \
    \            $current_strength -= 1;\n            }\n        }\n        if($current_strength\
    \ > $strength) {\n            $strength = $current_strength;\n            $strongest_extension\
    \ = $extensions[$i];\n        }\n    }\n    return $class_name . \".\" . $strongest_extension;\n\
    }\necho Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\")) . \"\\\
    n\";\necho Strongest_Extension(\"my_class\", array(\"aa\", \"Be\", \"cc\")) .\
    \ \"\\n\";\necho Strongest_Extension(\"my_class\", array(\"aA\", \"be\", \"cC\"\
    )) . \"\\n\";\necho Strongest_Extension(\"my_class\", array(\"aA\", \"bb\", \"\
    cC\")) . \"\\n\";\necho Strongest_Extension(\"my_class\", array(\"AA\", \"bb\"\
    , \"cC\")) . \"\\n\";\necho Strongest_Extension(\"my_class\", array(\"AA\", \"\
    BB\", \"cC\")) . \"\\n\";\necho Strongest_Extension(\"my_class\", array(\"aA\"\
    , \"BB\", \"cC\")) . \"\\n\";\necho Strongest_Extension(\"my_class\", array(\"\
    aA\", \"BB\", \"CC\")) . \"\\n\";\necho Strongest_Extension(\"my_class\", array(\"\
    AA\", \"BB\", \"CC\")) . \"\\n\";\necho Strongest_Extension(\"my\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "Watashi", expecting ")" in /tmp/tmp97i5lyo1.php
    on line 59

    '
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $max_strength = 0;\n \
    \   $max_strength_index = 0;\n    for ($i = 0; $i < count($extensions); $i++)\
    \ {\n        $strength = 0;\n        for ($j = 0; $j < strlen($extensions[$i]);\
    \ $j++) {\n            if ($extensions[$i][$j] == strtoupper($extensions[$i][$j]))\
    \ {\n                $strength++;\n            } else {\n                $strength--;\n\
    \            }\n        }\n        if ($strength > $max_strength) {\n        \
    \    $max_strength = $strength;\n            $max_strength_index = $i;\n     \
    \   }\n    }\n    $strongest_extension = $extensions[$max_strength_index];\n \
    \   return $class_name . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuo27liw1.php:47\n\
    Stack trace:\n#0 /tmp/tmpuo27liw1.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpuo27liw1.php\
    \ on line 47\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $highest = 0;\n    $ans = \"\";\n    for ($i = 0; $i < count($extensions);\
    \ $i++) {\n        $ext = $extensions[$i];\n        $up = 0;\n        $down =\
    \ 0;\n        for ($j = 0; $j < strlen($ext); $j++) {\n            if (ctype_upper($ext[$j]))\
    \ {\n                $up++;\n            } else {\n                $down++;\n\
    \            }\n        }\n        $strength = ($up - $down) / strlen($ext);\n\
    \        if ($strength > $highest) {\n            $highest = $strength;\n    \
    \        $ans = $ext;\n        }\n    }\n    return $class_name . \".\" . $ans;\n\
    }\necho Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\")) . \"\\\
    n\";\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "my_class.AA\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpopsz74fn.php:46\n\
    Stack trace:\n#0 /tmp/tmpopsz74fn.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpopsz74fn.php\
    \ on line 46\n"
  timestamp: 1660028577
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $ext = array_combine($extensions, array_map(function($val)\
    \ {\n        return substr_count(strtoupper($val), \"A-Z\") - substr_count(strtolower($val),\
    \ \"a-z\");\n    }, $extensions));\n    asort($ext);\n    return $class_name .\
    \ \".\" . key($ext);\n}\necho Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\"));\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "Slices.SErviNGSliCes\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpdqdvirio.php:31\nStack trace:\n#0 /tmp/tmpdqdvirio.php(42): test()\n\
    #1 {main}\n  thrown in /tmp/tmpdqdvirio.php on line 31\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest = \"\";\n    $strength = 0;\n    foreach ($extensions\
    \ as $extension) {\n        $cap = 0;\n        $sm = 0;\n        for ($i = 0;\
    \ $i < strlen($extension); $i++) {\n            if (ctype_upper($extension[$i]))\
    \ {\n                $cap++;\n            } else {\n                $sm++;\n \
    \           }\n        }\n        if ($cap - $sm > $strength) {\n            $strongest\
    \ = $extension;\n            $strength = $cap - $sm;\n        }\n    }\n    return\
    \ $class_name . \".\" . $strongest;\n}\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptv75ij7x.php:43\n\
    Stack trace:\n#0 /tmp/tmptv75ij7x.php(54): test()\n#1 {main}\n  thrown in /tmp/tmptv75ij7x.php\
    \ on line 43\n"
  timestamp: 1660028577
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    \n    $max_strength = -100;\n    $max_name = '';\n    $class_name\
    \ = (string)$class_name;\n    $extensions = (array)$extensions;\n    foreach ($extensions\
    \ as $key => $value) {\n        $new_strength = Get_Strength($value);\n      \
    \  if ($new_strength > $max_strength) {\n            $max_strength = $new_strength;\n\
    \            $max_name = $value;\n        }\n    }\n    return $class_name . '.'\
    \ . $max_name;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function Get_Strength()\
    \ in /tmp/tmptjo5pf2l.php:25\nStack trace:\n#0 /tmp/tmptjo5pf2l.php(35): Strongest_Extension('Watashi',\
    \ Array)\n#1 /tmp/tmptjo5pf2l.php(39): candidate('Watashi', Array)\n#2 /tmp/tmptjo5pf2l.php(50):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmptjo5pf2l.php on line 25\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    // your code here\n}\n\nfunction candidate(...$args) {\n\
    \    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmybms0jk.php:27\n\
    Stack trace:\n#0 /tmp/tmpmybms0jk.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpmybms0jk.php\
    \ on line 27\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $caps = 0;\n    $sm = 0;\n    $name = '';\n    foreach ($extensions\
    \ as $value) {\n        for ($i = 0; $i < strlen($value); $i++) {\n          \
    \  if (ord($value[$i]) >= 65 && ord($value[$i]) <= 90) {\n                $caps++;\n\
    \            } else {\n                $sm++;\n            }\n        }\n    \
    \    if (($caps - $sm) >= ($caps - $sm)) {\n            $name = $value;\n    \
    \    }\n        $caps = 0;\n        $sm = 0;\n    }\n    return \"$class_name.$name\"\
    ;\n}\necho Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"));\n\
    function candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\"\
    , \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\",\
    \ \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"\
    TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\"\
    )) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))\
    \ !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\"))\
    \ !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"\
    Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "my_class.CC\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe1wsn6k5.php:45\n\
    Stack trace:\n#0 /tmp/tmpe1wsn6k5.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpe1wsn6k5.php\
    \ on line 45\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $cap = $sm = 0;\n    $class_extension = \"\";\n    foreach\
    \ ($extensions as $key => $extension) {\n        $temp_cap = preg_match_all('/[A-Z]/',\
    \ $extension, $temp_cap_array);\n        $temp_sm = preg_match_all('/[a-z]/',\
    \ $extension, $temp_sm_array);\n        if ($temp_cap - $temp_sm > $cap - $sm)\
    \ {\n            $cap = $temp_cap;\n            $sm = $temp_sm;\n            $class_extension\
    \ = $extension;\n        }\n    }\n    return \"{$class_name}.{$class_extension}\"\
    ;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmg1akxp_.php:40\n\
    Stack trace:\n#0 /tmp/tmpmg1akxp_.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpmg1akxp_.php\
    \ on line 40\n"
  timestamp: 1660028577
- exit_code: 0
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n  $strength = -1;\n  $strongest_extension = \"\";\n  foreach\
    \ ($extensions as $extension) {\n    $cap = preg_match_all(\"/[A-Z]/\", $extension);\n\
    \    $sm = preg_match_all(\"/[a-z]/\", $extension);\n    $temp_strength = $cap\
    \ - $sm;\n    if ($temp_strength > $strength) {\n      $strength = $temp_strength;\n\
    \      $strongest_extension = $extension;\n    }\n  }\n  return $class_name .\
    \ \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028577
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n  $strength = -1;\n  $index = 0;\n  for ($i = 0; $i < count($extensions);\
    \ $i++) {\n    $ext = $extensions[$i];\n    $cap = 0;\n    $sm = 0;\n    for ($j\
    \ = 0; $j < strlen($ext); $j++) {\n      if (ctype_upper($ext[$j])) {\n      \
    \  $cap++;\n      } else {\n        $sm++;\n      }\n    }\n    if ($cap - $sm\
    \ > $strength) {\n      $strength = $cap - $sm;\n      $index = $i;\n    }\n \
    \ }\n  return $class_name . \".\" . $extensions[$index];\n}\n\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7mo7a7gu.php:45\n\
    Stack trace:\n#0 /tmp/tmp7mo7a7gu.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp7mo7a7gu.php\
    \ on line 45\n"
  timestamp: 1660028577
- exit_code: 0
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n  $extension_names = array_map(\n    function($extension) {\n\
    \      $lowercase_number = preg_match_all('/[a-z]/', $extension);\n      $uppercase_number\
    \ = preg_match_all('/[A-Z]/', $extension);\n      return $uppercase_number - $lowercase_number;\n\
    \    },\n    $extensions\n  );\n  $strongest_extension_index = array_search(max($extension_names),\
    \ $extension_names);\n  return $class_name . '.' . $extensions[$strongest_extension_index];\n\
    }\n\n$class_name = \"my_class\";\n$extensions = array(\"AA\", \"Be\", \"CC\");\n\
    echo Strongest_Extension($class_name, $extensions);\necho \"\\n\";\n\n$class_name\
    \ = \"Slices\";\n$extensions = array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    );\necho Strongest_Extension($class_name, $extensions);\necho \"\\n\";\n\n$class_name\
    \ = \"Slices\";\n$extensions = array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"SErviNGSliCes\");\necho Strongest_Extension($class_name, $extensions);\necho\
    \ \"\\n\";\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: 'my_class.AA

    Slices.SErviNGSliCes

    Slices.SErviNGSliCes

    '
  timestamp: 1660028577
- exit_code: 0
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n  $str = array();\n  foreach ($extensions as $k => $v) {\n \
    \   $str[] = array(\n      \"str\" => preg_match_all(\"/[A-Z]/\", $v, $matches)\
    \ - preg_match_all(\"/[a-z]/\", $v, $matches),\n      \"key\" => $k,\n      \"\
    val\" => $v\n    );\n  }\n  $arr = array_column($str, \"str\");\n  $max = max($arr);\n\
    \  $vals = array_keys($arr, $max);\n  $vals = $vals[0];\n  $vals = $str[$vals][\"\
    val\"];\n  return \"{$class_name}.{$vals}\";\n}\nprint_r(Strongest_Extension(\"\
    Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\")));\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Slices.SErviNGSliCes
  timestamp: 1660028577
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n  $longest_extension = \"\";\n  $strength = 0;\n  foreach ($extensions\
    \ as $extension) {\n    $extension_strength = extension_strength($extension);\n\
    \    if ($extension_strength > $strength) {\n      $strength = $extension_strength;\n\
    \      $longest_extension = $extension;\n    }\n  }\n  return \"$class_name.$longest_extension\"\
    ;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function extension_strength()\
    \ in /tmp/tmp_3lplnv4.php:22\nStack trace:\n#0 /tmp/tmp_3lplnv4.php(32): Strongest_Extension('Watashi',\
    \ Array)\n#1 /tmp/tmp_3lplnv4.php(36): candidate('Watashi', Array)\n#2 /tmp/tmp_3lplnv4.php(47):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp_3lplnv4.php on line 22\n"
  timestamp: 1660028577
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $class_name .= '.';\n    $max = -1;\n    $strongest = '';\n\
    \    foreach ($extensions as $extension) {\n        $strength = count_chars($extension,\
    \ 1)[ord('A')] - count_chars($extension, 1)[ord('a')];\n        if ($strength\
    \ > $max) {\n            $max = $strength;\n            $strongest = $extension;\n\
    \        }\n    }\n    return $class_name . $strongest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 65 in /tmp/tmpebeiuec1.php on line 23\n\n\
    Warning: Undefined array key 97 in /tmp/tmpebeiuec1.php on line 23\n\nWarning:\
    \ Undefined array key 65 in /tmp/tmpebeiuec1.php on line 23\n\nWarning: Undefined\
    \ array key 97 in /tmp/tmpebeiuec1.php on line 23\n\nWarning: Undefined array\
    \ key 65 in /tmp/tmpebeiuec1.php on line 23\n\nWarning: Undefined array key 97\
    \ in /tmp/tmpebeiuec1.php on line 23\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpebeiuec1.php:37\nStack trace:\n#0 /tmp/tmpebeiuec1.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpebeiuec1.php on line 37\n"
  timestamp: 1660028577
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n  $class_name = $class_name . \".\";\n  $strongest_extension\
    \ = \"\";\n  $strongest_extension_strength = 0;\n  $extension_strength = 0;\n\
    \  foreach ($extensions as $extension) {\n    $extension_strength = (preg_match_all(\"\
    /[A-Z]/\", $extension) - preg_match_all(\"/[a-z]/\", $extension));\n    if ($extension_strength\
    \ > $strongest_extension_strength) {\n      $strongest_extension_strength = $extension_strength;\n\
    \      $strongest_extension = $extension;\n    }\n  }\n  return $class_name .\
    \ $strongest_extension;\n}\n\necho Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\")); // Slices.SErviNGSliCes\necho \"<br>\";\necho Strongest_Extension(\"\
    class\", array(\"bEtter\", \"AB\", \"CaP\", \"DE\")); // class.CaP\necho \"<br>\"\
    ;\necho Strongest_Extension(\"Monkey\", array(\"AB\", \"BC\", \"CD\", \"DE\"));\
    \ // Monkey.AB\necho \"<br>\";\necho Strongest_Extension(\"Lemmings\", array(\"\
    A\", \"B\", \"C\", \"D\")); // Lemmings.A\necho \"<br>\";\necho Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\")); // my_class.AA\necho \"<br>\";\necho\
    \ Strongest_Extension(\"Abc\", array(\"A\", \"B\", \"C\")); // Abc.A\necho \"\
    <br>\";\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "Slices.<br>class.AB<br>Monkey.AB<br>Lemmings.A<br>my_class.AA<br>Abc.A<br>\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp4pbfj82d.php:52\nStack\
    \ trace:\n#0 /tmp/tmp4pbfj82d.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp4pbfj82d.php\
    \ on line 52\n"
  timestamp: 1660028577
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $max = 0;\n    $max_ext = '';\n    $len = count($extensions);\n\
    \    for ($i = 0; $i < $len; $i++) {\n        $ex = $extensions[$i];\n       \
    \ $len_ex = strlen($ex);\n        $cap = 0;\n        $sm = 0;\n        for ($j\
    \ = 0; $j < $len_ex; $j++) {\n            if (ctype_upper($ex[$j])) {\n      \
    \          $cap++;\n            } else {\n                $sm++;\n           \
    \ }\n        }\n        $str = $cap - $sm;\n        if ($str > $max) {\n     \
    \       $max = $str;\n            $max_ext = $ex;\n        }\n    }\n    return\
    \ $class_name . '.' . $max_ext;\n}\n\n$class_name = \"my_class\";\n$extensions\
    \ = array(\"AA\", \"Be\", \"CC\");\nprint_r(Strongest_Extension($class_name, $extensions));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "my_class.AA\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5fnsuu20.php:52\n\
    Stack trace:\n#0 /tmp/tmp5fnsuu20.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp5fnsuu20.php\
    \ on line 52\n"
  timestamp: 1660028577
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $class_name = trim($class_name);\n    $extensions = array_map('trim',\
    \ $extensions);\n    $ext_scores = array();\n    foreach ($extensions as $ext)\
    \ {\n        $cap = preg_match_all('/[A-Z]/', $ext, $matches);\n        $sm =\
    \ preg_match_all('/[a-z]/', $ext, $matches);\n        $ext_scores[$ext] = $cap\
    \ - $sm;\n    }\n    asort($ext_scores);\n    $strongest_ext = array_pop(array_flip($ext_scores));\n\
    \    return $class_name . '.' . $strongest_ext;\n}\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nNotice: Only variables should be passed by reference in /tmp/tmpy4_3tnnq.php\
    \ on line 28\n\nNotice: Only variables should be passed by reference in /tmp/tmpy4_3tnnq.php\
    \ on line 28\n\nNotice: Only variables should be passed by reference in /tmp/tmpy4_3tnnq.php\
    \ on line 28\n\nNotice: Only variables should be passed by reference in /tmp/tmpy4_3tnnq.php\
    \ on line 28\n\nNotice: Only variables should be passed by reference in /tmp/tmpy4_3tnnq.php\
    \ on line 28\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy4_3tnnq.php:40\n\
    Stack trace:\n#0 /tmp/tmpy4_3tnnq.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpy4_3tnnq.php\
    \ on line 40\n"
  timestamp: 1660028577
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strongest_extension = '';\n\t$strength = 0;\n\tforeach ($extensions\
    \ as $key => $extension) {\n\t\t$CAP = 0;\n\t\t$SM = 0;\n\t\t$flag = true;\n\t\
    \tfor ($i = 0; $i < strlen($extension); $i++) {\n\t\t\tif (ctype_upper($extension[$i]))\
    \ {\n\t\t\t\t$CAP++;\n\t\t\t} elseif (ctype_lower($extension[$i])) {\n\t\t\t\t\
    $SM++;\n\t\t\t} else {\n\t\t\t\t$flag = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\
    }\n\t\tif ($flag) {\n\t\t\t$new_strength = $CAP - $SM;\n\t\t\tif ($new_strength\
    \ > $strength) {\n\t\t\t\t$strength = $new_strength;\n\t\t\t\t$strongest_extension\
    \ = $extension;\n\t\t\t}\n\t\t}\n\t}\n\treturn $class_name . '.' . $strongest_extension;\n\
    }\n\necho Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\", \"Cheese\"\
    , \"StuFfed\"));\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "Slices.\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwn4ftzj0.php:52\n\
    Stack trace:\n#0 /tmp/tmpwn4ftzj0.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpwn4ftzj0.php\
    \ on line 52\n"
  timestamp: 1660028577
- exit_code: 0
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $best_extension = '';\n    $extension_strength = -1;\n \
    \   foreach ($extensions as $extension) {\n        $CAP = preg_match_all('/[A-Z]/',\
    \ $extension);\n        $SM = preg_match_all('/[a-z]/', $extension);\n       \
    \ $strength = $CAP - $SM;\n        if ($strength > $extension_strength) {\n  \
    \          $extension_strength = $strength;\n            $best_extension = $extension;\n\
    \        }\n    }\n    return \"{$class_name}.{$best_extension}\";\n}\n\nfunction\
    \ candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    )) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    )) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"\
    __HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))\
    \ !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\"))\
    \ !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"\
    Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028577
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n  $score = 0;\n  $strongest_extension = \"\";\n  foreach ($extensions\
    \ as $extension) {\n    // get how many uppercase and lowercase letters there\
    \ are in the extension\n    $cap = preg_match_all(\"/[A-Z]/\", $extension);\n\
    \    $sm = preg_match_all(\"/[a-z]/\", $extension);\n    $new_score = $cap - $sm;\n\
    \    // if the score is higher than the current score, assign $new_score to $score\n\
    \    // and assign the current extension to $strongest_extension\n    if ($new_score\
    \ > $score) {\n      $score = $new_score;\n      $strongest_extension = $extension;\n\
    \    }\n  }\n  return \"$class_name.$strongest_extension\";\n}\n\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp64gb80qz.php:43\n\
    Stack trace:\n#0 /tmp/tmp64gb80qz.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp64gb80qz.php\
    \ on line 43\n"
  timestamp: 1660028577
- exit_code: 0
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $ext_arr = [];\n    foreach ($extensions as $val) {\n  \
    \      $low_count = strlen(preg_replace('/[^a-z]/', '', $val));\n        $cap_count\
    \ = strlen(preg_replace('/[^A-Z]/', '', $val));\n        $ext_arr[$val] = $cap_count\
    \ - $low_count;\n    }\n    arsort($ext_arr);\n    $ext_arr = array_keys($ext_arr);\n\
    \    return $class_name . \".\" . $ext_arr[0];\n}\nprint_r(Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\")));\necho \"<br>\";\nprint_r(Strongest_Extension(\"\
    Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\")));\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: my_class.AA<br>Slices.SErviNGSliCes
  timestamp: 1660028577
- exit_code: 0
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n  // solution\n  $extensionsStrength = [];\n  foreach ($extensions\
    \ as $key => $extension) {\n    $capitalLetters = preg_match_all('/[A-Z]/', $extension);\n\
    \    $smallLetters = preg_match_all('/[a-z]/', $extension);\n    $extensionsStrength[$key]\
    \ = $capitalLetters - $smallLetters;\n  }\n  $strength = array_keys($extensionsStrength,\
    \ max($extensionsStrength));\n  $strongestExtension = $extensions[$strength[0]];\n\
    \  return $class_name.'.'.$strongestExtension;\n}\n\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028577
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n  $strength = 0;\n  $strength_extension = '';\n  foreach ($extensions\
    \ as $extension) {\n    $extension_strength = 0;\n    for ($i = 0; $i < strlen($extension);\
    \ $i++) {\n      if (ctype_upper($extension[$i])) {\n        $extension_strength++;\n\
    \      } else {\n        $extension_strength--;\n      }\n    }\n    if ($extension_strength\
    \ > $strength) {\n      $strength = $extension_strength;\n      $strength_extension\
    \ = $extension;\n    }\n  }\n  return $class_name . '.' . $strength_extension;\n\
    }\necho Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"));\nfunction\
    \ candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    )) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    )) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"\
    __HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))\
    \ !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\"))\
    \ !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"\
    Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "my_class.AA\nFatal error: Uncaught Exception: Test failed! in /tmp/tmposkgygei.php:43\n\
    Stack trace:\n#0 /tmp/tmposkgygei.php(54): test()\n#1 {main}\n  thrown in /tmp/tmposkgygei.php\
    \ on line 43\n"
  timestamp: 1660028577
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strength = 0;\n    $ext = \"\";\n    foreach ($extensions\
    \ as $value) {\n        $cap = preg_match_all('/[A-Z]/', $value, $matches);\n\
    \        $sm = preg_match_all('/[a-z]/', $value, $matches);\n        $current_strength\
    \ = $cap - $sm;\n        if ($current_strength > $strength) {\n            $strength\
    \ = $current_strength;\n            $ext = $value;\n        }\n    }\n    return\
    \ $class_name . \".\" . $ext;\n}\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5ya6p8iz.php:39\n\
    Stack trace:\n#0 /tmp/tmp5ya6p8iz.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp5ya6p8iz.php\
    \ on line 39\n"
  timestamp: 1660028577
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $extension_strongest = '';\n    $strongest_strength = 0;\n\
    \    foreach ($extensions as $extension) {\n        $strength = 0;\n        for\
    \ ($i = 0; $i < strlen($extension); $i++) {\n            if (ctype_upper($extension[$i]))\n\
    \                $strength++;\n            else\n                $strength--;\n\
    \        }\n        if ($strength > $strongest_strength) {\n            $strongest_strength\
    \ = $strength;\n            $extension_strongest = $extension;\n        }\n  \
    \  }\n    return $class_name . '.' . $extension_strongest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy7l5d1sz.php:42\n\
    Stack trace:\n#0 /tmp/tmpy7l5d1sz.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpy7l5d1sz.php\
    \ on line 42\n"
  timestamp: 1660028577
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    // Your code goes here\n    $class_name = strtolower($class_name);\n\
    \    $class_name = ucfirst($class_name);\n    $class_name = str_replace(\"_\"\
    , \"\", $class_name);\n    $extensions = array_map('strtolower', $extensions);\n\
    \    $index = 0;\n    $max_strength = -1;\n    for ($i = 0; $i < count($extensions);\
    \ $i++) {\n        $extensions[$i] = str_replace(\"_\", \"\", $extensions[$i]);\n\
    \        $strength = 0;\n        for ($j = 0; $j < strlen($extensions[$i]); $j++)\
    \ {\n            if (ctype_upper($extensions[$i][$j])) {\n                $strength++;\n\
    \            } else {\n                $strength--;\n            }\n        }\n\
    \        if ($strength > $max_strength) {\n            $max_strength = $strength;\n\
    \            $index = $i;\n        }\n    }\n    $extensions[$index] = ucfirst($extensions[$index]);\n\
    \    return $class_name . \".\" . $extensions[$index];\n}\necho Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"));\nfunction candidate(...$args) {\n\
    \    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Myclass.Aa\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7owqsh6k.php:50\n\
    Stack trace:\n#0 /tmp/tmp7owqsh6k.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp7owqsh6k.php\
    \ on line 50\n"
  timestamp: 1660028577
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest = 0;\n    $strongest_extension = \"\";\n    for\
    \ ($i = 0; $i < count($extensions); $i++) {\n        $extension = $extensions[$i];\n\
    \        $upper = preg_match_all('/[A-Z]/', $extension);\n        $lower = preg_match_all('/[a-z]/',\
    \ $extension);\n        $strength = $upper - $lower;\n        if ($strength >\
    \ $strongest) {\n            $strongest = $strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return $class_name . \".\" . $strongest_extension;\n\
    }\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_gfj2eex.php:41\n\
    Stack trace:\n#0 /tmp/tmp_gfj2eex.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp_gfj2eex.php\
    \ on line 41\n"
  timestamp: 1660028577
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n  // find most valuable extension\n  $highest = 0;\n  $index\
    \ = 0;\n  foreach ($extensions as $key => $extension) {\n    $value = 0;\n   \
    \ $num_uppercase = preg_match_all('/[A-Z]/', $extension, $tmp);\n    $num_lowercase\
    \ = preg_match_all('/[a-z]/', $extension, $tmp);\n    $value = $num_uppercase\
    \ - $num_lowercase;\n    if ($value > $highest) {\n      $highest = $value;\n\
    \      $index = $key;\n    }\n  }\n  return $class_name . '.' . $extensions[$index];\n\
    }\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp67t8699w.php:41\n\
    Stack trace:\n#0 /tmp/tmp67t8699w.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp67t8699w.php\
    \ on line 41\n"
  timestamp: 1660028577
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strongest_extension = '';\n\t$strongest_strength = 0;\n\t\
    foreach ($extensions as $extension) {\n\t\t$extension_caps = 0;\n\t\t$extension_small\
    \ = 0;\n\t\t$strength = 0;\n\t\tforeach (str_split($extension) as $letter) {\n\
    \t\t\tif (ctype_upper($letter)) {\n\t\t\t\t$extension_caps++;\n\t\t\t} elseif\
    \ (ctype_lower($letter)) {\n\t\t\t\t$extension_small++;\n\t\t\t}\n\t\t}\n\t\t\
    $strength = $extension_caps - $extension_small;\n\t\tif ($strength > $strongest_strength)\
    \ {\n\t\t\t$strongest_strength = $strength;\n\t\t\t$strongest_extension = $extension;\n\
    \t\t}\n\t}\n\treturn $class_name . '.' . $strongest_extension;\n}\n\nfunction\
    \ candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    )) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    )) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"\
    __HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))\
    \ !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\"))\
    \ !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"\
    Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3n53cott.php:48\n\
    Stack trace:\n#0 /tmp/tmp3n53cott.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp3n53cott.php\
    \ on line 48\n"
  timestamp: 1660028577
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n  // Your code goes here\n}\n\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppc4kmi9a.php:27\n\
    Stack trace:\n#0 /tmp/tmppc4kmi9a.php(38): test()\n#1 {main}\n  thrown in /tmp/tmppc4kmi9a.php\
    \ on line 27\n"
  timestamp: 1660028577
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$extensions_caps = [];\n\t$strength = [];\n\tfor ($i = 0;\
    \ $i < count($extensions); $i++) {\n\t\t$caps = 0;\n\t\t$small = 0;\n\t\tfor ($j\
    \ = 0; $j < strlen($extensions[$i]); $j++) {\n\t\t\tif (ctype_upper($extensions[$i][$j]))\
    \ {\n\t\t\t\t$caps++;\n\t\t\t} else {\n\t\t\t\t$small++;\n\t\t\t}\n\t\t}\n\t\t\
    $extensions_caps[$i] = $caps;\n\t\t$strength[$i] = $caps - $small;\n\t}\n\t$index\
    \ = array_search(max($strength), $strength);\n\treturn $class_name . \".\" . $extensions[$index];\n\
    }\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc4vkmgev.php:43\n\
    Stack trace:\n#0 /tmp/tmpc4vkmgev.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpc4vkmgev.php\
    \ on line 43\n"
  timestamp: 1660028577
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    \n    $strongest_index = 0;\n    $strongest_extension =\
    \ 0;\n    $extension_length = sizeof($extensions);\n    for ($i = 0; $i < $extension_length;\
    \ $i++) {\n        \n        $extension = $extensions[$i];\n        $CAP = 0;\n\
    \        $SM = 0;\n        $extension_length = strlen($extension);\n        for\
    \ ($j = 0; $j < $extension_length; $j++) {\n            \n            $character\
    \ = $extension[$j];\n            if (strcmp($character, \"A\") == 0 ||\n     \
    \           strcmp($character, \"B\") == 0 ||\n                strcmp($character,\
    \ \"C\") == 0 ||\n                strcmp($character, \"D\") == 0 ||\n        \
    \        strcmp($character, \"E\") == 0 ||\n                strcmp($character,\
    \ \"F\") == 0 ||\n                strcmp($character, \"G\") == 0 ||\n        \
    \        strcmp($character, \"H\") == 0 ||\n                strcmp($character,\
    \ \"I\") == 0 ||\n                strcmp($character, \"J\") == 0 ||\n        \
    \        strcmp($character, \"K\") == 0 ||\n                strcmp($character,\
    \ \"L\") == 0 ||\n                strcmp($character, \"M\") == 0 ||\n        \
    \        strcmp($character, \"N\") == 0 ||\n                strcmp($character,\
    \ \"O\") == 0 ||\n                strcmp($character, \"P\") == 0 ||\n        \
    \        strcmp($character, \"Q\") == 0 ||\n                strcmp($character,\
    \ \"R\") == 0 ||\n                strcmp($character, \"S\") == 0 ||\n        \
    \        strcmp($character, \"T\") == 0 ||\n                strcmp($character,\
    \ \"U\") == 0 ||\n                strcmp($character, \"V\") == 0 ||\n        \
    \        strcmp($character, \"W\") == 0 ||\n                strcmp($character,\
    \ \"X\") == 0 ||\n                strcmp($character, \"Y\") == 0 ||\n        \
    \        strcmp($character, \"Z\") == 0) {\n                    \n           \
    \     $CAP++;\n            }\n            else {\n                \n         \
    \       $SM++;\n            }\n        }\n        $strength = $CAP - $\nfunction\
    \ candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    )) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    )) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"\
    __HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))\
    \ !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\"))\
    \ !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"\
    Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting variable or
    "{" or "$" in /tmp/tmpu22t_epp.php on line 67

    '
  timestamp: 1660028577
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n  $ext_count = count($extensions);\n  $max_strength = 0;\n \
    \ $max_extension = '';\n  for ($i = 0; $i < $ext_count; $i++) {\n    $strength\
    \ = 0;\n    $letters = str_split($extensions[$i]);\n    foreach ($letters as $letter)\
    \ {\n      if (ctype_upper($letter)) {\n        $strength++;\n      } else {\n\
    \        $strength--;\n      }\n    }\n    if ($strength > $max_strength) {\n\
    \      $max_strength = $strength;\n      $max_extension = $extensions[$i];\n \
    \   }\n  }\n  return $class_name . '.' . $max_extension;\n}\n\n$classes = [\n\
    \  [\n    'Name' => 'Slices',\n    'Extensions' => ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed']\n  ],\n  [\n    'Name' => 'my_class',\n    'Extensions' => ['AA',\
    \ 'Be', 'CC']\n  ],\n  [\n    'Name' => 'AbC',\n    'Extensions' => ['A', 'BBBB',\
    \ 'CCCCCC']\n  ],\n  [\n    'Name' => 'cLASS',\n    'Extensions' => ['A', 'BC',\
    \ 'CCCCCC']\n  ],\n  [\n    'Name' => 'FooBAR',\n    'Extensions' => ['Foo', 'Bar',\
    \ 'CCCCCC']\n  ],\n  [\n    'Name' => 'Foo',\n    'Extensions' => ['Foo', 'CCCCCC']\n\
    \  ],\n  [\n    'Name' => 'Foo',\n    'Extensions' => ['Foo', 'CCCCCC', 'Bar']\n\
    \  ],\n  [\n    'Name' => 'Foo',\n    'Extensions' => ['Foo', 'Bar', 'foobaz']\n\
    \  ],\n  [\n    'Name' => 'Bar',\n    'Extensions' => ['Foo', 'Bar', 'foobaz']\n\
    \  ],\n  [\n    '\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "", expecting "]" in /tmp/tmpktghz9xe.php
    on line 78

    '
  timestamp: 1660028577
- exit_code: 0
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n  foreach ($extensions as $key => $value) {\n    $upper = preg_match_all('/[A-Z]/',\
    \ $value, $matches);\n    $lower = preg_match_all('/[a-z]/', $value, $matches);\n\
    \    $subtraction[] = $upper - $lower;\n  }\n  $max = max($subtraction);\n  $key\
    \ = array_search($max, $subtraction);\n  return $class_name . \".\" . $extensions[$key];\n\
    }\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028577
- exit_code: 0
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $ext_strengths = [];\n    foreach ($extensions as $ext)\
    \ {\n        $CAP_count = preg_match_all('/[A-Z]/', $ext);\n        $SM_count\
    \ = preg_match_all('/[a-z]/', $ext);\n        $ext_strengths[$ext] = $CAP_count\
    \ - $SM_count;\n    }\n    arsort($ext_strengths);\n    $strongest_ext = array_keys($ext_strengths)[0];\n\
    \    return $class_name . \".\" . $strongest_ext;\n}\n\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028577
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    // Your code here\n}\n\nfunction candidate(...$args) {\n\
    \    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppgyfmm3m.php:27\n\
    Stack trace:\n#0 /tmp/tmppgyfmm3m.php(38): test()\n#1 {main}\n  thrown in /tmp/tmppgyfmm3m.php\
    \ on line 27\n"
  timestamp: 1659824145
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strongest_extension = 0;\n\tforeach ($extensions as $extension)\
    \ {\n\t\t$CAP = strlen(preg_replace('/[^A-Z]/', '', $extension));\n\t\t$SM = strlen(preg_replace('/[^a-z]/',\
    \ '', $extension));\n\t\t$strength = $CAP - $SM;\n\t\tif ($strength < $strongest_extension)\
    \ {\n\t\t\t$strongest_extension = $extension;\n\t\t}\n\t}\n\treturn $class_name\
    \ . \".\" . $strongest_extension;\n}\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp72nwq8uv.php:35\n\
    Stack trace:\n#0 /tmp/tmp72nwq8uv.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp72nwq8uv.php\
    \ on line 35\n"
  timestamp: 1660028577
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $capitals = [];\n    foreach ($extensions as $extension)\
    \ {\n        $capitals[] = substr_count($extension, range('A', 'Z'));\n    }\n\
    \    $smallcaps = [];\n    foreach ($extensions as $extension) {\n        $smallcaps[]\
    \ = substr_count($extension, range('a', 'z'));\n    }\n    $strength = [];\n \
    \   foreach ($capitals as $key => $value) {\n        $strength[] = $value - $smallcaps[$key];\n\
    \    }\n    $strongest = array_keys($strength, max($strength))[0];\n    return\
    \ $class_name . '.' . $extensions[$strongest];\n}\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: substr_count(): Argument #2 ($needle)\
    \ must be of type string, array given in /tmp/tmparq_m8po.php:21\nStack trace:\n\
    #0 /tmp/tmparq_m8po.php(21): substr_count('tEN', Array)\n#1 /tmp/tmparq_m8po.php(35):\
    \ Strongest_Extension('Watashi', Array)\n#2 /tmp/tmparq_m8po.php(39): candidate('Watashi',\
    \ Array)\n#3 /tmp/tmparq_m8po.php(50): test()\n#4 {main}\n  thrown in /tmp/tmparq_m8po.php\
    \ on line 21\n"
  timestamp: 1660028577
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = '';\n    $highest_strength = 0;\n\
    \    foreach ($extensions as $extension) {\n        $capital_count = strlen(preg_replace('/[^A-Z]/',\
    \ '', $extension));\n        $lowercase_count = strlen(preg_replace('/[^a-z]/',\
    \ '', $extension));\n        $strength = $capital_count - $lowercase_count;\n\
    \        if ($strength > $highest_strength) {\n            $highest_strength =\
    \ $strength;\n            $strongest_extension = $extension;\n        }\n    }\n\
    \    return \"$class_name.$strongest_extension\";\n}\n$my_class = \"my_class\"\
    ;\n$extensions = [\"AA\", \"Be\", \"CC\"];\necho Strongest_Extension($my_class,\
    \ $extensions);\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "my_class.AA\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpimsm_ys_.php:42\n\
    Stack trace:\n#0 /tmp/tmpimsm_ys_.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpimsm_ys_.php\
    \ on line 42\n"
  timestamp: 1660028577
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $max_strength = 0;\n    $max_strength_extension = '';\n\
    \    foreach ($extensions as $extension) {\n        $capital_letters = preg_match_all('/[A-Z]/',\
    \ $extension, $caps);\n        $small_letters = preg_match_all('/[a-z]/', $extension,\
    \ $smalls);\n        $strength = $capital_letters - $small_letters;\n        if\
    \ ($strength > $max_strength) {\n            $max_strength = $strength;\n    \
    \        $max_strength_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . '.' . $max_strength_extension;\n}\n\n$ret = Strongest_Extension(\"my_class\"\
    , array(\"AA\", \"Be\", \"CC\"));\nprint_r($ret);\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "my_class.AA\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuyaj9_nv.php:42\n\
    Stack trace:\n#0 /tmp/tmpuyaj9_nv.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpuyaj9_nv.php\
    \ on line 42\n"
  timestamp: 1660028577
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_name = '';\n    $strongest_strength = 0;\n  \
    \  foreach ($extensions as $extension) {\n        $capital_letters = preg_match_all('/[A-Z]/',\
    \ $extension, $matches);\n        $capital_letters = count($matches[0]);\n   \
    \     $small_letters = preg_match_all('/[a-z]/', $extension, $matches);\n    \
    \    $small_letters = count($matches[0]);\n        $strength = $capital_letters\
    \ - $small_letters;\n        if ($strength >= $strongest_strength) {\n       \
    \     $strongest_strength = $strength;\n            $strongest_name = $extension;\n\
    \        }\n    }\n    return \"$class_name.$strongest_name\";\n}\n\nfunction\
    \ candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    )) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    )) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"\
    __HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))\
    \ !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\"))\
    \ !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"\
    Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3c4ka_c8.php:44\n\
    Stack trace:\n#0 /tmp/tmp3c4ka_c8.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp3c4ka_c8.php\
    \ on line 44\n"
  timestamp: 1660028577
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strength = [];\n\t$strongest = \"\";\n\t$cap_strongest =\
    \ 0;\n\t$sm_strongest = 0;\n\t$class_strength = 0;\n\t$strength_counter = 0;\n\
    \t$class_length = strlen($class_name);\n\t$strongest_length = 0;\n\t$extensions_length\
    \ = count($extensions);\n\tfor ($i = 0; $i < $extensions_length; $i++) {\n\t\t\
    $cap = 0;\n\t\t$sm = 0;\n\t\t$extension_length = strlen($extensions[$i]);\n\t\t\
    for ($j = 0; $j < $extension_length; $j++) {\n\t\t\tif ($extensions[$i][$j] >=\
    \ 'A' && $extensions[$i][$j] <= 'Z') {\n\t\t\t\t$cap++;\n\t\t\t} else if ($extensions[$i][$j]\
    \ >= 'a' && $extensions[$i][$j] <= 'z') {\n\t\t\t\t$sm++;\n\t\t\t}\n\t\t}\n\t\t\
    $strength[$i] = $cap - $sm;\n\t\tif ($strength[$i] == $class_strength) {\n\t\t\
    \t$strength_counter++;\n\t\t}\n\t\tif ($strength[$i] > $class_strength) {\n\t\t\
    \t$class_strength = $strength[$i];\n\t\t\t$strongest = $extensions[$i];\n\t\t\t\
    $cap_strongest = $cap;\n\t\t\t$sm_strongest = $sm;\n\t\t\t$strongest_length =\
    \ $extension_length;\n\t\t\t$strength_counter = 1;\n\t\t}\n\t}\n\t$class_strength\
    \ = 0;\n\t$strongest_name = $class_name;\n\tfor ($j = 0; $j < $class_length; $j++)\
    \ {\n\t\tif ($class_name[$j] >= 'A' && $class_name[$j] <= 'Z') {\n\t\t\t$class_strength++;\n\
    \t\t}\n\t}\n\tif ($strength_counter ==\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpkx1kpf1l.php on line 60

    '
  timestamp: 1660028577
- exit_code: 0
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strength = array();\n\t$strength_keys = array();\n\t$result\
    \ = array();\n\tforeach ($extensions as $extension) {\n\t\t$strength[] = strlen(preg_replace('/[^A-Z]/',\
    \ '', $extension)) \n\t\t\t\t\t\t- strlen(preg_replace('/[^a-z]/', '', $extension));\n\
    \t\t$strength_keys[] = array_search($extension, $extensions);\n\t}\n\t// echo\
    \ max($strength) . \"\\n\";\n\t// echo count($strength);\n\t$key = array_search(max($strength),\
    \ $strength);\n\t// echo $key . \"\\n\";\n\t$extension = $extensions[$strength_keys[$key]];\n\
    \t// echo $extension . \"\\n\";\n\t$result[] = $class_name . \".\" . $extension;\n\
    \treturn $result[0];\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028577
- exit_code: 0
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n  $strongest = ['', -10000];\n  foreach ($extensions as $extension)\
    \ {\n    $CAP = preg_match_all('/[A-Z]/', $extension);\n    $SM = preg_match_all('/[a-z]/',\
    \ $extension);\n    $strength = $CAP - $SM;\n    if ($strength > $strongest[1])\
    \ {\n      $strongest = [$extension, $strength];\n    }\n  }\n  return $class_name\
    \ . '.' . $strongest[0];\n}\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028577
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $max_strength = 0;\n    $max_strength_extension = '';\n\
    \    foreach ($extensions as $extension) {\n        $strength = (preg_match_all('/[A-Z]/',\
    \ $extension, $matches) - preg_match_all('/[a-z]/', $extension, $matches));\n\
    \        if (abs($strength) > $max_strength) {\n            $max_strength = abs($strength);\n\
    \            $max_strength_extension = $extension;\n        }\n    }\n    return\
    \ $class_name . '.' . $max_strength_extension;\n}\n\n$class_name = \"Slices\"\
    ;\n$extensions = ['SErviNGSliCes', 'Cheese', 'StuFfed'];\necho Strongest_Extension($class_name,\
    \ $extensions);\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "Slices.Cheese\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxa695pun.php:41\n\
    Stack trace:\n#0 /tmp/tmpxa695pun.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpxa695pun.php\
    \ on line 41\n"
  timestamp: 1660028577
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strength = 0;\n\t$winner = \"\";\n\tfor ($i = 0; $i < count($extensions);\
    \ $i++) {\n\t\t$cap = preg_match_all(\"/[A-Z]/\", $extensions[$i], $out);\n\t\t\
    $sm = preg_match_all(\"/[a-z]/\", $extensions[$i], $out);\n\t\t$frac = $cap -\
    \ $sm;\n\t\tif ($frac > $strength) {\n\t\t\t$strength = $frac;\n\t\t\t$winner\
    \ = $extensions[$i];\n\t\t}\n\t}\n\treturn $class_name . \".\" . $winner;\n}\n\
    function candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\"\
    , \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\",\
    \ \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"\
    TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\"\
    )) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))\
    \ !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\"))\
    \ !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"\
    Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphjkzg206.php:39\n\
    Stack trace:\n#0 /tmp/tmphjkzg206.php(48): test()\n#1 {main}\n  thrown in /tmp/tmphjkzg206.php\
    \ on line 39\n"
  timestamp: 1660028577
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $str = '';\n    $strength = 0;\n    foreach ($extensions\
    \ as $extension) {\n        $caps = preg_match_all('/[A-Z]/', $extension);\n \
    \       $smalls = preg_match_all('/[a-z]/', $extension);\n        $ext_strength\
    \ = $caps - $smalls;\n        if ($ext_strength > $strength) {\n            $strength\
    \ = $ext_strength;\n            $str = $extension;\n        }\n    }\n    return\
    \ \"$class_name.$str\";\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp32yazwbe.php:40\n\
    Stack trace:\n#0 /tmp/tmp32yazwbe.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp32yazwbe.php\
    \ on line 40\n"
  timestamp: 1660028577
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t\n}\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7bvedl19.php:26\n\
    Stack trace:\n#0 /tmp/tmp7bvedl19.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp7bvedl19.php\
    \ on line 26\n"
  timestamp: 1660028577
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$name = '';\n\t$strength = 0;\n\tforeach ($extensions as $extension)\
    \ {\n\t\t$cap = strlen(preg_replace('/[^A-Z]/', '', $extension));\n\t\t$sm = strlen(preg_replace('/[^a-z]/',\
    \ '', $extension));\n\t\t$new_strength = $cap - $sm;\n\t\tif ($new_strength >\
    \ $strength) {\n\t\t\t$name = $extension;\n\t\t\t$strength = $new_strength;\n\t\
    \t}\n\t}\n\treturn $class_name . '.' . $name;\n}\n\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg7445jb4.php:40\n\
    Stack trace:\n#0 /tmp/tmpg7445jb4.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpg7445jb4.php\
    \ on line 40\n"
  timestamp: 1660028577
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $class_name = strtolower($class_name);\n    $class_name_length\
    \ = strlen($class_name);\n    $class_name_upper_case_length = 0;\n    $class_name_lower_case_length\
    \ = 0;\n    for ($i = 0; $i < $class_name_length; $i++) {\n        if ($class_name[$i]\
    \ == strtoupper($class_name[$i])) {\n            $class_name_upper_case_length++;\n\
    \        } else {\n            $class_name_lower_case_length++;\n        }\n \
    \   }\n    $class_name_strength = $class_name_upper_case_length - $class_name_lower_case_length;\n\
    \    $strongest_extension = null;\n    $strongest_extension_name = null;\n   \
    \ $strongest_extension_strength = null;\n    foreach ($extensions as $extension)\
    \ {\n        $extension_length = strlen($extension);\n        $extension_upper_case_length\
    \ = 0;\n        $extension_lower_case_length = 0;\n        for ($i = 0; $i < $extension_length;\
    \ $i++) {\n            if ($extension[$i] == strtoupper($extension[$i])) {\n \
    \               $extension_upper_case_length++;\n            } else {\n      \
    \          $extension_lower_case_length++;\n            }\n        }\n       \
    \ $extension_strength = $extension_upper_case_length - $extension_lower_case_length;\n\
    \        if ($extension_strength > $class_name_strength) {\n            $strongest_extension\
    \ = $extension;\n            $strongest_extension_name = $extension;\n       \
    \     $strongest_extension_strength = $extension_strength;\n        } elseif ($extension_strength\
    \ == $class_name_strength) {\n            if ($strongest_extension_strength ===\
    \ null) {\n                $strongest_extension = $extension;\n              \
    \  $strongest_extension_name = $extension;\n                $strongest_extension_strength\n\
    function candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\"\
    , \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\",\
    \ \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"\
    TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\"\
    )) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))\
    \ !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\"))\
    \ !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"\
    Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpnwcywpvw.php
    on line 55

    '
  timestamp: 1660028577
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n  $strongest_extension = '';\n  $strongest_strength = 0;\n \
    \ foreach ($extensions as $extension) {\n    $strength = 0;\n    for ($i = 0;\
    \ $i < strlen($extension); $i++) {\n      if (ctype_upper($extension[$i])) {\n\
    \        $strength += 1;\n      } else {\n        $strength -= 1;\n      }\n \
    \   }\n    if ($strength >= $strongest_strength) {\n      $strongest_strength\
    \ = $strength;\n      $strongest_extension = $extension;\n    }\n  }\n  return\
    \ $class_name . '.' . $strongest_extension;\n}\nfunction candidate(...$args) {\n\
    \    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk9_1yvdb.php:44\n\
    Stack trace:\n#0 /tmp/tmpk9_1yvdb.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpk9_1yvdb.php\
    \ on line 44\n"
  timestamp: 1660028577
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strength = 0;\n    $max_strength = 0;\n    $streng_ext\
    \ = \"\";\n    foreach ($extensions as $ext) {\n        $uppers = preg_match_all('/[A-Z]/',\
    \ $ext);\n        $lowers = preg_match_all('/[a-z]/', $ext);\n        $strength\
    \ = $uppers - $lowers;\n        if ($strength > $max_strength) {\n           \
    \ $max_strength = $strength;\n            $streng_ext = $ext;\n        }\n   \
    \ }\n    return \"{$class_name}.{$streng_ext}\";\n}\necho Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"));\nfunction candidate(...$args) {\n\
    \    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "my_class.AA\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe8q4h42y.php:41\n\
    Stack trace:\n#0 /tmp/tmpe8q4h42y.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpe8q4h42y.php\
    \ on line 41\n"
  timestamp: 1660028577
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    // Your code here\n}\nfunction candidate(...$args) {\n \
    \   return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj1mr08qk.php:26\n\
    Stack trace:\n#0 /tmp/tmpj1mr08qk.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpj1mr08qk.php\
    \ on line 26\n"
  timestamp: 1660028577
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest = 0;\n    $strongest_name = \"\";\n    foreach\
    \ ($extensions as $extension) {\n        $cap = strlen(preg_replace('/[^A-Z]/',\
    \ '', $extension));\n        $sm = strlen(preg_replace('/[^a-z]/', '', $extension));\n\
    \        $strength = ($cap - $sm) / strlen($extension);\n        if ($strength\
    \ > $strongest) {\n            $strongest = $strength;\n            $strongest_name\
    \ = $extension;\n        }\n    }\n    return \"$class_name.$strongest_name\"\
    ;\n}\necho Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\", \"Cheese\"\
    , \"StuFfed\"));\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "Slices.\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5r79z5mq.php:38\n\
    Stack trace:\n#0 /tmp/tmp5r79z5mq.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp5r79z5mq.php\
    \ on line 38\n"
  timestamp: 1660028577
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n  $maxStrength = -PHP_INT_MAX;\n  $maxExtension = \"\";\n  foreach\
    \ ($extensions as $extension) {\n    $strength = calcStrength($extension);\n \
    \   if ($strength > $maxStrength) {\n      $maxStrength = $strength;\n      $maxExtension\
    \ = $extension;\n    }\n  }\n  return $class_name . \".\" . $maxExtension;\n}\n\
    \nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function calcStrength()\
    \ in /tmp/tmp87yhro37.php:22\nStack trace:\n#0 /tmp/tmp87yhro37.php(32): Strongest_Extension('Watashi',\
    \ Array)\n#1 /tmp/tmp87yhro37.php(36): candidate('Watashi', Array)\n#2 /tmp/tmp87yhro37.php(47):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp87yhro37.php on line 22\n"
  timestamp: 1660028577
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n  $best_extension = \"\";\n  $best_extension_strength = 0;\n\
    \  foreach ($extensions as $extension) {\n    $cap = preg_match_all(\"/[A-Z]/\"\
    , $extension);\n    $sm = preg_match_all(\"/[a-z]/\", $extension);\n    $strength\
    \ = $cap - $sm;\n    if ($strength > $best_extension_strength) {\n      $best_extension_strength\
    \ = $strength;\n      $best_extension = $extension;\n    }\n  }\n  return $class_name\
    \ . \".\" . $best_extension;\n}\n\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5ik6070y.php:40\n\
    Stack trace:\n#0 /tmp/tmp5ik6070y.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp5ik6070y.php\
    \ on line 40\n"
  timestamp: 1660028577
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n  // Your code goes here\n}\nfunction candidate(...$args) {\n\
    \    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfl2_w8cw.php:26\n\
    Stack trace:\n#0 /tmp/tmpfl2_w8cw.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpfl2_w8cw.php\
    \ on line 26\n"
  timestamp: 1660028577
- exit_code: 0
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strength = array();\n    foreach ($extensions as $extension)\
    \ {\n        $cap = 0;\n        $sm = 0;\n        for ($i = 0; $i < strlen($extension);\
    \ $i++) {\n            if (ord($extension[$i]) >= ord('A') && ord($extension[$i])\
    \ <= ord('Z')) {\n                $cap++;\n            } else if (ord($extension[$i])\
    \ >= ord('a') && ord($extension[$i]) <= ord('z')) {\n                $sm++;\n\
    \            }\n        }\n        $strength[$extension] = $cap - $sm;\n    }\n\
    \    arsort($strength);\n    $strongest = array_slice($strength, 0, 1, true);\n\
    \    foreach ($strongest as $key => $value) {\n        return $class_name . \"\
    .\" . $key;\n    }\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028577
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strongest = array();\n\tforeach ($extensions as $extension)\
    \ {\n\t\t// get the number of uppercase and lowercase letters\n\t\t$upper = preg_match_all('/[A-Z]/',\
    \ $extension, $upper);\n\t\t$lower = preg_match_all('/[a-z]/', $extension, $lower);\n\
    \t\t// calculate strength and store it in array\n\t\t$strength = $upper[0] - $lower[0];\n\
    \t\t$strongest[$extension] = $strength;\n\t}\n\t// get the name of the strongest\
    \ extension\n\t$strongest_extension = array_search(max($strongest), $strongest);\n\
    \t// return concatenated string\n\treturn $class_name . \".\" . $strongest_extension;\n\
    }\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Trying to access array offset on value of type int in /tmp/tmp2ibj3ubi.php\
    \ on line 25\n\nWarning: Trying to access array offset on value of type int in\
    \ /tmp/tmp2ibj3ubi.php on line 25\n\nWarning: Trying to access array offset on\
    \ value of type int in /tmp/tmp2ibj3ubi.php on line 25\n\nWarning: Trying to access\
    \ array offset on value of type int in /tmp/tmp2ibj3ubi.php on line 25\n\nWarning:\
    \ Trying to access array offset on value of type int in /tmp/tmp2ibj3ubi.php on\
    \ line 25\n\nWarning: Trying to access array offset on value of type int in /tmp/tmp2ibj3ubi.php\
    \ on line 25\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ibj3ubi.php:38\n\
    Stack trace:\n#0 /tmp/tmp2ibj3ubi.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp2ibj3ubi.php\
    \ on line 38\n"
  timestamp: 1660028577
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $caps = 0;\n    $smls = 0;\n    $result = \"\";\n    $diff\
    \ = 0;\n    $res = array_fill(0,count($extensions),0);\n    for ($i=0; $i < count($extensions);\
    \ $i++) { \n        for ($j=0; $j < strlen($extensions[$i]); $j++) { \n      \
    \      if (ctype_upper($extensions[$i][$j])) {\n                $caps += 1;\n\
    \            }\n            else{\n                $smls += 1;\n            }\n\
    \        }\n        $res[$i] = $caps - $smls;\n        $caps = 0;\n        $smls\
    \ = 0;\n    }\n    $diff = $res[0];\n    $pos = 0;\n    for ($i=0; $i < count($res);\
    \ $i++) { \n        if ($res[$i] > $diff) {\n            $diff = $res[$i];\n \
    \           $pos = $i;\n        }\n    }\n    $result = $class_name . \".\" .\
    \ $extensions[$pos];\n    return $result;\n}\necho Strongest_Extension(\"my_class\"\
    , array(\"AA\", \"Be\", \"CC\"));\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "my_class.AA\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr3asqihn.php:54\n\
    Stack trace:\n#0 /tmp/tmpr3asqihn.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpr3asqihn.php\
    \ on line 54\n"
  timestamp: 1660028577
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest = null;\n    foreach ($extensions as $extension)\
    \ {\n        $strength = strength($extension);\n        if ($strongest === null\
    \ || $strength > strength($strongest)) {\n            $strongest = $extension;\n\
    \        }\n    }\n    return $class_name . '.' . $strongest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function strength() in\
    \ /tmp/tmpyz1xaini.php:21\nStack trace:\n#0 /tmp/tmpyz1xaini.php(30): Strongest_Extension('Watashi',\
    \ Array)\n#1 /tmp/tmpyz1xaini.php(34): candidate('Watashi', Array)\n#2 /tmp/tmpyz1xaini.php(45):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpyz1xaini.php on line 21\n"
  timestamp: 1660028577
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strength = 0;\n    $i\
    \ = 0;\n    foreach ($extensions as $key => $extension) {\n        $capital_letters\
    \ = preg_match_all('/[A-Z]/', $extension, $matches);\n        $small_letters =\
    \ preg_match_all('/[a-z]/', $extension, $matches);\n        $current_strength\
    \ = $capital_letters - $small_letters;\n        if ($current_strength > $strength)\
    \ {\n            $strength = $current_strength;\n            $strongest_extension\
    \ = $extension;\n        }\n        $i++;\n    }\n    return $class_name . \"\
    .\" . $strongest_extension;\n}\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfg3tsw04.php:41\n\
    Stack trace:\n#0 /tmp/tmpfg3tsw04.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpfg3tsw04.php\
    \ on line 41\n"
  timestamp: 1660028577
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = $extensions[0];\n    $num_strongest_uppercase\
    \ = 0;\n    $num_strongest_lowercase = 0;\n    foreach ($extensions as $extension)\
    \ {\n        $num_uppercase = 0;\n        $num_lowercase = 0;\n        for ($i\
    \ = 0; $i < strlen($extension); $i++) {\n            if (ctype_upper($extension[$i]))\
    \ {\n                $num_uppercase++;\n            } else if (ctype_lower($extension[$i]))\
    \ {\n                $num_lowercase++;\n            }\n        }\n        $curr_strength\
    \ = $num_uppercase - $num_lowercase;\n        if ($curr_strength > $num_strongest_uppercase\
    \ - $num_strongest_lowercase) {\n            $strongest_extension = $extension;\n\
    \            $num_strongest_uppercase = $num_uppercase;\n            $num_strongest_lowercase\
    \ = $num_lowercase;\n        }\n    }\n    return \"$class_name.$strongest_extension\"\
    ;\n}\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpily5ds0y.php:48\n\
    Stack trace:\n#0 /tmp/tmpily5ds0y.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpily5ds0y.php\
    \ on line 48\n"
  timestamp: 1660028577
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strength_array = array();\n    foreach ($extensions as\
    \ $extension) {\n        $strength_array[$extension] = 0;\n        $length = strlen($extension);\n\
    \        for ($i = 0; $i < $length; $i++) {\n            if (ctype_lower($extension[$i]))\
    \ {\n                $strength_array[$extension] -= 1;\n            } else {\n\
    \                $strength_array[$extension] += 1;\n            }\n        }\n\
    \    }\n    arsort($strength_array);\n    $strongest_extension = array_keys($strength_array)[0];\n\
    \    return $class_name . \".\" . $strongest_extension;\n}\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4jf2jmby.php:42\n\
    Stack trace:\n#0 /tmp/tmp4jf2jmby.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp4jf2jmby.php\
    \ on line 42\n"
  timestamp: 1660028577
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$s_ext = '';\n\t$c_ext = '';\n\t$max = 0;\n\tfor ($i = 0;\
    \ $i < count($extensions); $i++) {\n\t\t$c = preg_match_all('/[A-Z]/', $extensions[$i],\
    \ $matches);\n\t\t$s = preg_match_all('/[a-z]/', $extensions[$i], $matches);\n\
    \t\t$ext_score = $c - $s;\n\t\tif ($ext_score > $max) {\n\t\t\t$max = $ext_score;\n\
    \t\t\t$s_ext = $extensions[$i];\n\t\t}\n\t}\n\t$c_ext = $class_name.'.'.$s_ext;\n\
    \treturn $c_ext;\n}\n\n$class_name = \"my_class\";\n$extensions = array(\"AA\"\
    , \"Be\", \"CC\");\necho Strongest_Extension($class_name, $extensions).\"\\n\"\
    ;\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "my_class.AA\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7u7f7xun.php:45\n\
    Stack trace:\n#0 /tmp/tmp7u7f7xun.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp7u7f7xun.php\
    \ on line 45\n"
  timestamp: 1660028577
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n  $strength = -1;\n  $extension = '';\n  foreach ($extensions\
    \ as $e) {\n    $num_upper = 0;\n    $num_lower = 0;\n    for ($i = 0; $i < strlen($e);\
    \ $i++) {\n      if (ord($e[$i]) >= ord('A') && ord($e[$i]) <= ord('Z')) {\n \
    \       $num_upper++;\n      } else {\n        $num_lower++;\n      }\n    }\n\
    \    if ($num_upper - $num_lower > $strength) {\n      $strength = $num_upper\
    \ - $num_lower;\n      $extension = $e;\n    }\n  }\n  return $class_name . '.'\
    \ . $extension;\n}\necho Strongest_Extension(\"my_class\", array(\"AA\", \"Be\"\
    , \"CC\")) . \"\\n\";\necho Strongest_Extension(\"my_class\", array(\"AA\", \"\
    Be\", \"AA\")) . \"\\n\";\necho Strongest_Extension(\"Aaaa\", array(\"AA\", \"\
    Be\", \"AA\")) . \"\\n\";\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "my_class.AA\nmy_class.AA\nAaaa.AA\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpd_xm1h7g.php:46\nStack trace:\n#0 /tmp/tmpd_xm1h7g.php(57):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpd_xm1h7g.php on line 46\n"
  timestamp: 1660028577
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $class_name = $class_name.\".\";\n    $max_extension = 0;\n\
    \    $strongest_extension = \"\";\n    foreach ($extensions as $key => $extension)\
    \ {\n        $CAP = 0;\n        $SM = 0;\n        $strength = 0;\n        for\
    \ ($i=0; $i < strlen($extension); $i++) { \n            if (ctype_upper($extension[$i]))\
    \ {\n                $CAP++;\n            }\n            else {\n            \
    \    $SM++;\n            }\n        }\n        $strength = $CAP - $SM;\n     \
    \   if ($strength > $max_extension) {\n            $max_extension = $strength;\n\
    \            $strongest_extension = $extension;\n        }\n    }\n    return\
    \ $class_name.$strongest_extension;\n}\necho Strongest_Extension(\"my_class\"\
    , array(\"AA\", \"Be\", \"CC\"));\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "my_class.AA\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3v2u1dh7.php:48\n\
    Stack trace:\n#0 /tmp/tmp3v2u1dh7.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp3v2u1dh7.php\
    \ on line 48\n"
  timestamp: 1660028577
- exit_code: 0
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    // Code here\n    $Strongest_Extension = \"\";\n    foreach\
    \ ($extensions as $key => $extension) {\n        $count1 = preg_match_all('/[A-Z]/',\
    \ $extension);\n        $count2 = preg_match_all('/[a-z]/', $extension);\n   \
    \     $arr_extensions[$extension] = $count1 - $count2;\n    }\n    arsort($arr_extensions);\n\
    \    foreach ($arr_extensions as $extension => $value) {\n        $Strongest_Extension\
    \ = $class_name.\".\".$extension;\n        break;\n    }\n    return $Strongest_Extension;\n\
    }\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028577
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest = 0;\n    $index_strongest = -1;\n    foreach\
    \ ($extensions as $index => $extension) {\n        $CAP = 0;\n        $SM = 0;\n\
    \        for ($i = 0; $i < strlen($extension); $i++) {\n            if (ord($extension[$i])\
    \ >= 65 && ord($extension[$i]) <= 90) {\n                $CAP++;\n           \
    \ } else {\n                $SM++;\n            }\n        }\n        $result\
    \ = $CAP - $SM;\n        if ($result > $strongest) {\n            $strongest =\
    \ $result;\n            $index_strongest = $index;\n        }\n    }\n    return\
    \ $class_name . \".\" . $extensions[$index_strongest];\n}\n\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvlaizojd.php:45\n\
    Stack trace:\n#0 /tmp/tmpvlaizojd.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpvlaizojd.php\
    \ on line 45\n"
  timestamp: 1660028577
- exit_code: 0
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strongest = -10;\n\t$strongest_name = \"\";\n\t$class_name\
    \ .= \".\";\n\tforeach ($extensions as $extension) {\n\t\t$CAP = preg_match_all(\"\
    /[A-Z]/\", $extension);\n\t\t$SM = preg_match_all(\"/[a-z]/\", $extension);\n\t\
    \t$strength = $CAP - $SM;\n\t\tif ($strength > $strongest) {\n\t\t\t$strongest\
    \ = $strength;\n\t\t\t$strongest_name = $extension;\n\t\t}\n\t}\n\t$result = $class_name\
    \ . $strongest_name;\n\treturn $result;\n}\nfunction candidate(...$args) {\n \
    \   return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028577
- exit_code: 255
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$best_extension = \"\";\n\t$strength = 0;\n\t$strength_now\
    \ = 0;\n\t$index = 0;\n\tforeach ($extensions as $extension) {\n\t\t$extension_arr\
    \ = str_split($extension);\n\t\tforeach ($extension_arr as $letter) {\n\t\t\t\
    if (ord($letter) > 64 && ord($letter) < 91) {\n\t\t\t\t$strength_now++;\n\t\t\t\
    } else {\n\t\t\t\t$strength_now--;\n\t\t\t}\n\t\t}\n\t\tif ($strength_now >= $strength)\
    \ {\n\t\t\t$strength = $strength_now;\n\t\t\t$best_extension = $extension;\n\t\
    \t}\n\t\t$strength_now = 0;\n\t}\n\treturn $class_name . \".\" . $best_extension;\n\
    }\n\n$_TEST_CLASS = \"Slices\";\n$_TEST_ARR = array(\"SErviNGSliCes\", \"Cheese\"\
    , \"StuFfed\");\necho Strongest_Extension($_TEST_CLASS, $_TEST_ARR);\nfunction\
    \ candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    )) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    )) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"\
    __HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))\
    \ !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\"))\
    \ !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"\
    Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Slices.\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppivhoowr.php:51\n\
    Stack trace:\n#0 /tmp/tmppivhoowr.php(60): test()\n#1 {main}\n  thrown in /tmp/tmppivhoowr.php\
    \ on line 51\n"
  timestamp: 1660028577
- exit_code: 0
  program: "<?php\n// You will be given the name of a class (a string) and an array\
    \ of extensions.\n// The extensions are to be used to load additional classes\
    \ to the class. The\n// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n// letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n// in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the array.\n// For example, if you are given \"Slices\"\
    \ as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n  $strengths = [];\n  foreach ($extensions as $extension) {\n\
    \    $upper_case = preg_match_all('/[A-Z]/', $extension);\n    $lower_case = preg_match_all('/[a-z]/',\
    \ $extension);\n    $strengths[] = $upper_case - $lower_case;\n  }\n  $max_strength\
    \ = max($strengths);\n  $key = array_search($max_strength, $strengths);\n  return\
    \ $class_name . '.' . $extensions[$key];\n}\n\nprint_r(Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\"]) . \"\\n\");\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'my_class.AA

    '
  timestamp: 1660028577
