language: php
name: HumanEval_139_special_factorial
results:
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n === 0) {\n        return 1;\n    }\n    if ($n === 1) {\n        return\
    \ 1;\n    }\n    return factorial($n) * special_factorial($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmp37lh5div.php:17\nStack trace:\n#0 /tmp/tmp37lh5div.php(21): special_factorial(4)\n\
    #1 /tmp/tmp37lh5div.php(25): candidate(4)\n#2 /tmp/tmp37lh5div.php(31): test()\n\
    #3 {main}\n  thrown in /tmp/tmp37lh5div.php on line 17\n"
  timestamp: 1659823480
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n \
    \ }\n  for ($i = 1; $i < $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzit05bex.php:25\n\
    Stack trace:\n#0 /tmp/tmpzit05bex.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpzit05bex.php\
    \ on line 25\n"
  timestamp: 1659823480
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $fac = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $fac *= $i;\n    }\n\
    \    return $fac;\n}\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9y9h2gtz.php:22\n\
    Stack trace:\n#0 /tmp/tmp9y9h2gtz.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp9y9h2gtz.php\
    \ on line 22\n"
  timestamp: 1659823480
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $result *= $i;\n  }\n  return\
    \ $result;\n}\necho special_factorial(4);\nfunction candidate(...$args) {\n  \
    \  return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8fbb013m.php:23\n\
    Stack trace:\n#0 /tmp/tmp8fbb013m.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp8fbb013m.php\
    \ on line 23\n"
  timestamp: 1659823480
- exit_code: 0
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n\t\
    if ($n == 0) {\n\t\treturn 1;\n\t} else {\n\t\t$factorial = 1;\n\t\tfor ($i =\
    \ 1; $i <= $n; $i++) {\n\t\t\t$factorial *= $i;\n\t\t}\n\t\treturn $factorial\
    \ * special_factorial($n - 1);\n\t}\n}\n\necho special_factorial(4) . \"\\n\"\
    ;\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '288

    '
  timestamp: 1659823480
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   // TODO: Implement this function\n}\n\nfunction candidate(...$args) {\n  \
    \  return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpydpembej.php:19\n\
    Stack trace:\n#0 /tmp/tmpydpembej.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpydpembej.php\
    \ on line 19\n"
  timestamp: 1659823480
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n == 0) {\n        return 1;\n    } else if ($n == 1) {\n        return\
    \ 1;\n    } else {\n        return $n * special_factorial($n - 1);\n    }\n}\n\
    \necho special_factorial(1);\necho \"<br>\";\necho special_factorial(2);\necho\
    \ \"<br>\";\necho special_factorial(3);\necho \"<br>\";\necho special_factorial(4);\n\
    echo \"<br>\";\necho special_factorial(5);\necho \"<br>\";\necho special_factorial(6);\n\
    echo \"<br>\";\necho special_factorial(7);\necho \"<br>\";\necho special_factorial(8);\n\
    echo \"<br>\";\necho special_factorial(9);\necho \"<br>\";\necho special_factorial(10);\n\
    echo \"<br>\";\necho special_factorial(11);\necho \"<br>\";\necho special_factorial(12);\n\
    echo \"<br>\";\necho special_factorial(13);\necho \"<br>\";\necho special_factorial(14);\n\
    echo \"<br>\";\necho special_factorial(15);\necho \"<br>\";\necho special_factorial(16);\n\
    echo \"<br>\";\necho special_factorial(17);\necho \"<br>\";\necho special_factorial(18);\n\
    echo \"<br>\";\necho special_factorial(19);\necho \"<br>\";\necho special_factorial(20);\n\
    echo \"<br>\";\necho special_factorial(21);\necho \"<br>\";\necho special_factorial(22);\n\
    echo \"<br>\";\necho special_factorial(23);\necho \"<br>\";\necho special_factorial(24);\n\
    echo \"<br>\";\necho special_factorial(25);\necho \"<br>\";\necho special_factorial(26);\n\
    echo \"<br>\";\necho special_factorial(27);\necho \"<br>\";\necho special_factorial(28);\n\
    echo \"<br>\";\necho special_factorial(29);\necho \"<br>\";\necho special_factorial(30);\n\
    echo \"<br>\";\necho special_factorial\nfunction candidate(...$args) {\n    return\
    \ special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "," or ";" in
    /tmp/tmpgfjjew9u.php on line 81

    '
  timestamp: 1659823480
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n\
    \  for ($i = ($n - 1); $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  for ($i\
    \ = ($n - 2); $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\necho special_factorial(5);\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "17280\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5pi9v3h3.php:31\n\
    Stack trace:\n#0 /tmp/tmp5pi9v3h3.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp5pi9v3h3.php\
    \ on line 31\n"
  timestamp: 1659823480
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $fact = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $fact *= $i;\n   \
    \ }\n    return $fact;\n}\n\necho special_factorial(4) . \"\\n\";\necho special_factorial(5)\
    \ . \"\\n\";\necho special_factorial(6) . \"\\n\";\necho special_factorial(7)\
    \ . \"\\n\";\necho special_factorial(8) . \"\\n\";\necho special_factorial(9)\
    \ . \"\\n\";\necho special_factorial(10) . \"\\n\";\n\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "24\n120\n720\n5040\n40320\n362880\n3628800\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpoa9_0i9s.php:31\nStack trace:\n#0 /tmp/tmpoa9_0i9s.php(37):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpoa9_0i9s.php on line 31\n"
  timestamp: 1659823480
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $number = array_reverse(range(1, $n));\n    $fac = array_map(function($a)\
    \ {\n        return gmp_fact($a);\n    }, $number);\n    $res = gmp_prod($fac);\n\
    \    return gmp_strval($res);\n}\necho special_factorial(4);\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function gmp_fact() in\
    \ /tmp/tmpv5nimmet.php:13\nStack trace:\n#0 [internal function]: {closure}(4)\n\
    #1 /tmp/tmpv5nimmet.php(14): array_map(Object(Closure), Array)\n#2 /tmp/tmpv5nimmet.php(18):\
    \ special_factorial(4)\n#3 {main}\n  thrown in /tmp/tmpv5nimmet.php on line 13\n"
  timestamp: 1659823480
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n\t\
    $num = 1;\n\tfor ($i = $n; $i > 0; $i--) {\n\t\t$num *= $i;\n\t}\n\treturn $num;\n\
    }\n\necho special_factorial(4);\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqf_maj9.php:24\n\
    Stack trace:\n#0 /tmp/tmphqf_maj9.php(30): test()\n#1 {main}\n  thrown in /tmp/tmphqf_maj9.php\
    \ on line 24\n"
  timestamp: 1659823480
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n\t\
    if ($n == 0) {\n\t\treturn 1;\n\t} else {\n\t\treturn $n * special_factorial($n\
    \ - 1);\n\t}\n}\necho special_factorial(4);\nfunction candidate(...$args) {\n\
    \    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjp0bn_my.php:23\n\
    Stack trace:\n#0 /tmp/tmpjp0bn_my.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpjp0bn_my.php\
    \ on line 23\n"
  timestamp: 1659823480
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n\t\
    $n = intval($n);\n\tif ($n <= 0) {\n\t\tthrow new Exception('Only integers greater\
    \ than 0 are allowed');\n\t}\n\t$result = 1;\n\twhile ($n >= 1) {\n\t\t$result\
    \ *= factorial($n);\n\t\t$n--;\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmpdwnxg1cl.php:17\nStack trace:\n#0 /tmp/tmpdwnxg1cl.php(24): special_factorial(4)\n\
    #1 /tmp/tmpdwnxg1cl.php(28): candidate(4)\n#2 /tmp/tmpdwnxg1cl.php(34): test()\n\
    #3 {main}\n  thrown in /tmp/tmpdwnxg1cl.php on line 17\n"
  timestamp: 1659823480
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $res = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $res *= $i;\n    }\n\
    \    return $res;\n}\n\necho special_factorial(4);\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuxv40z4s.php:24\n\
    Stack trace:\n#0 /tmp/tmpuxv40z4s.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpuxv40z4s.php\
    \ on line 24\n"
  timestamp: 1659823480
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $product = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $product *= factorial($i);\n\
    \  }\n  return $product;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmptsnd4pmi.php:13\nStack trace:\n#0 /tmp/tmptsnd4pmi.php(19): special_factorial(4)\n\
    #1 /tmp/tmptsnd4pmi.php(23): candidate(4)\n#2 /tmp/tmptsnd4pmi.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmptsnd4pmi.php on line 13\n"
  timestamp: 1659823480
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n \
    \ }\n  return $factorial;\n}\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9hvkd499.php:22\n\
    Stack trace:\n#0 /tmp/tmp9hvkd499.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp9hvkd499.php\
    \ on line 22\n"
  timestamp: 1659823480
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ // TODO: return the special factorial of $n\n  $result = 1;\n  for ($i = 1;\
    \ $i <= $n; $i++) {\n    $result *= $i;\n  }\n  for ($i = 1; $i < $n; $i++) {\n\
    \    $result *= $i;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfseel3d8.php:27\n\
    Stack trace:\n#0 /tmp/tmpfseel3d8.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpfseel3d8.php\
    \ on line 27\n"
  timestamp: 1659823480
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n \
    \ }\n  return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn5odmb9v.php:23\n\
    Stack trace:\n#0 /tmp/tmpn5odmb9v.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpn5odmb9v.php\
    \ on line 23\n"
  timestamp: 1659823480
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  while ($n) {\n    $factorial *= $n--;\n  }\n  return $factorial;\n\
    }\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt4w0f_we.php:22\n\
    Stack trace:\n#0 /tmp/tmpt4w0f_we.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpt4w0f_we.php\
    \ on line 22\n"
  timestamp: 1659823480
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $result = $n;\n    while ($n > 1) {\n        $result *= $n - 1;\n        $n--;\n\
    \    }\n    return $result;\n}\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3ie426wd.php:23\n\
    Stack trace:\n#0 /tmp/tmp3ie426wd.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp3ie426wd.php\
    \ on line 23\n"
  timestamp: 1659823480
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = 1;\n  while ($n > 0) {\n    $result *= $n;\n    $n -= 1;\n  }\n  return\
    \ $result;\n}\necho special_factorial(4);\nfunction candidate(...$args) {\n  \
    \  return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwgnss7g0.php:24\n\
    Stack trace:\n#0 /tmp/tmpwgnss7g0.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpwgnss7g0.php\
    \ on line 24\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   return factorial($n) * factorial($n - 1);\n}\n\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmp42i5hits.php:11\nStack trace:\n#0 /tmp/tmp42i5hits.php(15): special_factorial(4)\n\
    #1 /tmp/tmp42i5hits.php(19): candidate(4)\n#2 /tmp/tmp42i5hits.php(25): test()\n\
    #3 {main}\n  thrown in /tmp/tmp42i5hits.php on line 11\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqc4cq280.php:19\n\
    Stack trace:\n#0 /tmp/tmpqc4cq280.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpqc4cq280.php\
    \ on line 19\n"
  timestamp: 1659978822
- exit_code: 0
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factorial = 1;\n    for\
    \ ($j = $i; $j > 0; $j--) {\n      $factorial *= $j;\n    }\n    $result *= $factorial;\n\
    \  }\n  return $result;\n}\necho special_factorial(4);\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: '288'
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $n_factorial = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $n_factorial\
    \ *= $i;\n    }\n    $special_factorial = $n_factorial;\n    for ($i = $n - 1;\
    \ $i > 0; $i--) {\n        $special_factorial *= $i;\n    }\n    return $special_factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppmqmdt95.php:27\n\
    Stack trace:\n#0 /tmp/tmppmqmdt95.php(33): test()\n#1 {main}\n  thrown in /tmp/tmppmqmdt95.php\
    \ on line 27\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n\t\
    $result = 1;\n\tfor ($i = 1; $i <= $n; $i++) {\n\t\t$result *= $i;\n\t}\n\treturn\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvxrf2qc8.php:23\n\
    Stack trace:\n#0 /tmp/tmpvxrf2qc8.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpvxrf2qc8.php\
    \ on line 23\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n\t\
    if ($n < 1) {\n\t\treturn null;\n\t}\n\t$f = 1;\n\tfor ($i = $n; $i > 0; $i--)\
    \ {\n\t\t$f *= $i;\n\t}\n\treturn $f;\n}\n\nclass SpecialFactorialTest extends\
    \ \\PHPUnit_Framework_TestCase {\n\tpublic function testNull() {\n\t\t$this->assertNull(special_factorial(0));\n\
    \t}\n\n\tpublic function testFactorial() {\n\t\t$this->assertEquals(special_factorial(1),\
    \ 1);\n\t\t$this->assertEquals(special_factorial(2), 2);\n\t\t$this->assertEquals(special_factorial(3),\
    \ 6);\n\t\t$this->assertEquals(special_factorial(4), 288);\n\t\t$this->assertEquals(special_factorial(5),\
    \ 34560);\n\t}\n}\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Class \"PHPUnit_Framework_TestCase\" not\
    \ found in /tmp/tmpj3gdpx72.php:21\nStack trace:\n#0 {main}\n  thrown in /tmp/tmpj3gdpx72.php\
    \ on line 21\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = $n;\n  for ($i = 1; $i < $n; $i++) {\n    $result *= ($n - $i);\n\
    \  }\n  return $result;\n}\n\necho special_factorial(5);\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "120\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfkr8dr0k.php:24\n\
    Stack trace:\n#0 /tmp/tmpfkr8dr0k.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpfkr8dr0k.php\
    \ on line 24\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $count = 1;\n    $total = 1;\n    while ($count <= $n) {\n        $total *=\
    \ $count;\n        $count++;\n    }\n    $count = $n - 1;\n    while ($count >\
    \ 0) {\n        $total *= $count;\n        $count--;\n    }\n    return $total;\n\
    }\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp753rc0nt.php:29\n\
    Stack trace:\n#0 /tmp/tmp753rc0nt.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp753rc0nt.php\
    \ on line 29\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *=\
    \ $i;\n    }\n    return $factorial;\n}\n\n$test_cases = array(\n    0 => 1,\n\
    \    1 => 1,\n    2 => 2,\n    3 => 12,\n    4 => 288,\n    5 => 34560,\n    6\
    \ => 24883200,\n    7 => 893184736000,\n    8 => 9.0986931325e+16,\n    9 => 1.137764700000000e+20,\n\
    \    10 => 2.4760657478109e+23,\n    11 => 1.17094402790296e+27,\n    12 => 1.62571481248264e+31,\n\
    \    13 => 3.766236817563616e+35,\n    14 => 1.404085651756288e+40,\n    15 =>\
    \ 6.871834125006464e+44,\n    16 => 4.565891067186816e+49,\n    17 => 3.865844720997376e+54,\n\
    \    18 => 3.92943832171737984e+59,\n    19 => 4.76375332497456e+64,\n    20 =>\
    \ 6.42651424887084288e+69,\n    21 => 9.50283597492568064e+74,\n    22 => 1.573783294552551168e+80,\n\
    \    23 => 2.852632589008079104e+85,\n    24 => 5.645491086458710016e+90,\n  \
    \  25 => 1.22388788871833939968e+96,\n    26 => 2.82739230782155535104e+101,\n\
    \    27 => 6.9898683366262677504e+106,\n    28 => 1.79642634896480475136e+112,\n\
    \    29 => 4.91296217713795948544e+117,\n    30 => 1.39740864040753763328e\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "e", expecting ")" in /tmp/tmpqd9mu2yo.php
    on line 49

    '
  timestamp: 1659978822
- exit_code: 0
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = array();\n  $factorial[0] = 1;\n  $factorial[1] = 1;\n  for ($i\
    \ = 2; $i <= $n; $i++) {\n    $factorial[$i] = $factorial[$i - 1] * $i;\n  }\n\
    \  return array_product($factorial);\n}\necho special_factorial(3);\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12'
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = 1;\n    $factorial_array = [];\n    while ($n > 0) {\n      \
    \  $factorial_array[] = $factorial;\n        $factorial *= $n;\n        $n--;\n\
    \    }\n    return array_product($factorial_array);\n}\n\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn4i4c_zn.php:26\n\
    Stack trace:\n#0 /tmp/tmpn4i4c_zn.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpn4i4c_zn.php\
    \ on line 26\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $fact = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $fact *= $i;\n    }\n\
    \    return $fact;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk0a23ewd.php:23\n\
    Stack trace:\n#0 /tmp/tmpk0a23ewd.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpk0a23ewd.php\
    \ on line 23\n"
  timestamp: 1659978822
- exit_code: 0
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = function($n) use (&$factorial) {\n    if ($n == 0) {\n      return\
    \ 1;\n    }\n    return $n * $factorial($n - 1);\n  };\n  $result = 1;\n  while\
    \ ($n > 0) {\n    $result *= $factorial($n);\n    $n--;\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n\
    \  return $factorial;\n}\n\n$a = special_factorial(4);\necho $a;\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnspt5vjv.php:25\n\
    Stack trace:\n#0 /tmp/tmpnspt5vjv.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpnspt5vjv.php\
    \ on line 25\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = 1;\n    for ($i=1; $i<=$n; $i++) {\n        $factorial *= $i;\n\
    \    }\n    return $factorial;\n}\n\necho special_factorial(4);\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5ljc7bv2.php:24\n\
    Stack trace:\n#0 /tmp/tmp5ljc7bv2.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp5ljc7bv2.php\
    \ on line 24\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n == 0) {\n        return 1;\n    }\n    return $n * special_factorial($n\
    \ - 1);\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3a4afy0h.php:22\n\
    Stack trace:\n#0 /tmp/tmp3a4afy0h.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp3a4afy0h.php\
    \ on line 22\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ if ($n == 0) {\n    return 1;\n  }\n  $total = $n;\n  while ($n > 1) {\n   \
    \ $total *= $n-1;\n    $n--;\n  }\n  return $total;\n}\n\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6e7np_e7.php:27\n\
    Stack trace:\n#0 /tmp/tmp6e7np_e7.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp6e7np_e7.php\
    \ on line 27\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $result = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $result *= $i;\n\
    \    }\n    return $result;\n}\necho special_factorial(4);\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp91k41zof.php:23\n\
    Stack trace:\n#0 /tmp/tmp91k41zof.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp91k41zof.php\
    \ on line 23\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n\t\
    $fac = 1;\n\t$arr=array();\n\tfor($i=$n;$i>0;$i--){\n\t\t$fac =$fac*$i;\n\t\t\
    $arr[]=$fac;\n\t}\n\treturn array_product($arr);\n}\necho special_factorial(4);\n\
    function candidate(...$args) {\n    return special_factorial(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "27648\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm5jqx23x.php:25\n\
    Stack trace:\n#0 /tmp/tmpm5jqx23x.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpm5jqx23x.php\
    \ on line 25\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $result *= $i;\n  }\n  for\
    \ ($i = ($n - 1); $i > 0; $i--) {\n    $result *= $i;\n  }\n  for ($i = ($n -\
    \ 2); $i > 0; $i--) {\n    $result *= $i;\n  }\n  return $result;\n}\n\n$a = 8;\n\
    echo \"special_factorial($a) => \" . special_factorial($a) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "special_factorial(8) => 146313216000\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpmvkxenyv.php:32\nStack trace:\n#0 /tmp/tmpmvkxenyv.php(37):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpmvkxenyv.php on line 32\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n\t\
    if ($n === 0) {\n\t\treturn 1;\n\t}\n\t$nFactorial = gmp_fact($n);\n\t$nMinusOneFactorial\
    \ = gmp_fact($n - 1);\n\treturn gmp_mul($nFactorial, $nMinusOneFactorial);\n}\n\
    function candidate(...$args) {\n    return special_factorial(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function gmp_fact() in\
    \ /tmp/tmpbpcfu_rg.php:14\nStack trace:\n#0 /tmp/tmpbpcfu_rg.php(19): special_factorial(4)\n\
    #1 /tmp/tmpbpcfu_rg.php(23): candidate(4)\n#2 /tmp/tmpbpcfu_rg.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmpbpcfu_rg.php on line 14\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $factorial *=\
    \ $i;\n    }\n    return $factorial;\n}\n\necho special_factorial(4);\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppthmolb_.php:24\n\
    Stack trace:\n#0 /tmp/tmppthmolb_.php(30): test()\n#1 {main}\n  thrown in /tmp/tmppthmolb_.php\
    \ on line 24\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n <= 0) {\n        return 0;\n    }\n    $current = 1;\n    for ($i =\
    \ 1; $i <= $n; $i++) {\n        $current *= $i;\n    }\n    return $current;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw9edh_sf.php:26\n\
    Stack trace:\n#0 /tmp/tmpw9edh_sf.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpw9edh_sf.php\
    \ on line 26\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $fac = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $fac *= $i;\n  }\n  for ($i\
    \ = 1; $i < $n; $i++) {\n    $fac *= $i;\n  }\n  return $fac;\n}\n\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy_8e6y54.php:26\n\
    Stack trace:\n#0 /tmp/tmpy_8e6y54.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpy_8e6y54.php\
    \ on line 26\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $fac = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $fac *= $i;\n  }\n  for ($i\
    \ = $n - 1; $i > 0; $i--) {\n    $fac *= $i;\n  }\n  for ($i = $n - 2; $i > 0;\
    \ $i--) {\n    $fac *= $i;\n  }\n  return $fac;\n}\n\nprint special_factorial(4);\n\
    function candidate(...$args) {\n    return special_factorial(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "288\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjk6fy70i.php:31\n\
    Stack trace:\n#0 /tmp/tmpjk6fy70i.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpjk6fy70i.php\
    \ on line 31\n"
  timestamp: 1659978822
- exit_code: 0
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $fac = function($n) use (&$fac) {\n    if ($n <= 1) {\n      return 1;\n   \
    \ } else {\n      return $n * $fac($n - 1);\n    }\n  };\n  $factorial = 1;\n\
    \  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $fac($i);\n  }\n  return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978822
- exit_code: 0
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n\t\
    $special_factorial = 1;\n\t$factorial = 1;\n\tfor ($i = 1; $i <= $n; $i++) {\n\
    \t\t$factorial *= $i;\n\t\t$special_factorial *= $factorial;\n\t}\n\treturn $special_factorial;\n\
    }\necho special_factorial(4);\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '288'
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $ret = $n;\n  for ($i = $n - 1; $i > 0; $i--) {\n    $ret *= $i;\n  }\n  return\
    \ $ret;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5qk77ood.php:23\n\
    Stack trace:\n#0 /tmp/tmp5qk77ood.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp5qk77ood.php\
    \ on line 23\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factoriel = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factoriel *= $i;\n  }\n\
    \  return $factoriel;\n}\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqqcl5x0l.php:22\n\
    Stack trace:\n#0 /tmp/tmpqqcl5x0l.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpqqcl5x0l.php\
    \ on line 22\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n\t\
    if($n == 0){\n\t\treturn 1;\n\t}\n\t$result = 1;\n\tfor($i = 1; $i <= $n; $i++){\n\
    \t\t$result *= $i;\n\t}\n\t$result *= $n*($n-1);\n\treturn $result;\n}\n\nvar_dump(special_factorial(0));\n\
    var_dump(special_factorial(4));\nvar_dump(special_factorial(5));\n\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "int(1)\nint(288)\nint(2400)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpllq5jdnm.php:32\nStack trace:\n#0 /tmp/tmpllq5jdnm.php(37): test()\n\
    #1 {main}\n  thrown in /tmp/tmpllq5jdnm.php on line 32\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ //your code here\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp24afhl15.php:19\n\
    Stack trace:\n#0 /tmp/tmp24afhl15.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp24afhl15.php\
    \ on line 19\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $result = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $result *= $i;\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfvfpb3_b.php:23\n\
    Stack trace:\n#0 /tmp/tmpfvfpb3_b.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpfvfpb3_b.php\
    \ on line 23\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $r = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $r *= factorial($i);\n  }\n  return\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmpfhpfd6r9.php:13\nStack trace:\n#0 /tmp/tmpfhpfd6r9.php(19): special_factorial(4)\n\
    #1 /tmp/tmpfhpfd6r9.php(23): candidate(4)\n#2 /tmp/tmpfhpfd6r9.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmpfhpfd6r9.php on line 13\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $result *= $i;\n  }\n  return\
    \ $result;\n}\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfh4fudqm.php:22\n\
    Stack trace:\n#0 /tmp/tmpfh4fudqm.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpfh4fudqm.php\
    \ on line 22\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorials = [];\n  for ($i = 1; $i <= $n; $i++) {\n    $factorials[] = factorial($i);\n\
    \  }\n  return array_product($factorials);\n}\n\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmpszok_lec.php:13\nStack trace:\n#0 /tmp/tmpszok_lec.php(19): special_factorial(4)\n\
    #1 /tmp/tmpszok_lec.php(23): candidate(4)\n#2 /tmp/tmpszok_lec.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmpszok_lec.php on line 13\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n\t\
    // initialise the output variable\n\t$output = 1;\n\t// the factorial is calculated\
    \ by multiplying the starting number by all\n\t// numbers less than itself, down\
    \ to 1\n\tfor ($i = $n; $i > 0; $i--) {\n\t\t$output *= $i;\n\t}\n\t// loop through\
    \ all numbers less than or equal to the starting number\n\tfor ($i = $n - 1; $i\
    \ > 0; $i--) {\n\t\t$output *= $i;\n\t}\n\t// return the result\n\treturn $output;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0p07ghzv.php:31\n\
    Stack trace:\n#0 /tmp/tmp0p07ghzv.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp0p07ghzv.php\
    \ on line 31\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ if ($n == 0) {\n    return 1;\n  } else if ($n == 1) {\n    return 1;\n  } else\
    \ {\n    return $n * special_factorial($n - 1);\n  }\n}\n\necho special_factorial(4);\n\
    function candidate(...$args) {\n    return special_factorial(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj3yri5wk.php:26\n\
    Stack trace:\n#0 /tmp/tmpj3yri5wk.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpj3yri5wk.php\
    \ on line 26\n"
  timestamp: 1659978822
- exit_code: 0
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $array = [];\n  $result = [];\n  $result2 = [];\n  if ($n <= 0){\n    return;\n\
    \  }else{\n    for ($i=1; $i <= $n; $i++) {\n      $array[] = $i;\n    }\n   \
    \ $factorial = array_product($array);\n    array_pop($array);\n    while (!empty($array))\
    \ {\n      $result[] = array_product($array);\n      array_pop($array);\n    }\n\
    \    $final = array_product($result);\n    return $factorial * $final;\n  }\n\
    }\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $result = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $result *= $i;\n\
    \    }\n    for ($i = $n - 1; $i > 0; $i--) {\n        $result *= $i;\n    }\n\
    \    for ($i = $n - 2; $i > 0; $i--) {\n        $result *= $i;\n    }\n    return\
    \ $result;\n}\necho special_factorial(4);\nfunction candidate(...$args) {\n  \
    \  return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "288\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpet87musk.php:30\n\
    Stack trace:\n#0 /tmp/tmpet87musk.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpet87musk.php\
    \ on line 30\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial_result = 1;\n    for ($x = $n; $x > 0; $x--) {\n        $factorial_result\
    \ *= $x;\n    }\n    return $factorial_result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvofdqw6q.php:23\n\
    Stack trace:\n#0 /tmp/tmpvofdqw6q.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpvofdqw6q.php\
    \ on line 23\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $result = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $result *= $i;\n\
    \    }\n    for ($i = 1; $i < $n; $i++) {\n        $result *= $i;\n    }\n   \
    \ return $result;\n}\n\nvar_dump(special_factorial(4));\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "int(144)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcbotneu5.php:27\n\
    Stack trace:\n#0 /tmp/tmpcbotneu5.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpcbotneu5.php\
    \ on line 27\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ if ($n > 0) {\n    $num = 1;\n    for ($i = $n; $i > 0; $i--) {\n      $num\
    \ *= $i;\n    }\n    for ($i = $n - 1; $i > 0; $i--) {\n      $num *= $i;\n  \
    \  }\n    for ($i = $n - 2; $i > 0; $i--) {\n      $num *= $i;\n    }\n    return\
    \ $num;\n  }\n}\n\necho special_factorial(4);\nfunction candidate(...$args) {\n\
    \    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "288\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf5nnbvkg.php:33\n\
    Stack trace:\n#0 /tmp/tmpf5nnbvkg.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpf5nnbvkg.php\
    \ on line 33\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ if ($n > 0) {\n    $result = 1;\n    for ($i = $n; $i > 0; $i--) {\n      $result\
    \ *= $i;\n    }\n    for ($i = $n - 1; $i > 0; $i--) {\n      $result *= $i;\n\
    \    }\n    return $result;\n  }\n  return 0;\n}\n\necho(special_factorial(4));\n\
    function candidate(...$args) {\n    return special_factorial(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "144\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoto2ioqv.php:30\n\
    Stack trace:\n#0 /tmp/tmpoto2ioqv.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpoto2ioqv.php\
    \ on line 30\n"
  timestamp: 1659978822
- exit_code: 0
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n <= 0) {\n        return 1;\n    }\n\n    $factorial = 1;\n    for ($i\
    \ = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\n    return $factorial\
    \ * special_factorial($n - 1);\n}\necho special_factorial(4);\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: '288'
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n \
    \ }\n  return $factorial;\n}\necho special_factorial(4);\necho \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "24\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpli4mtdtu.php:24\n\
    Stack trace:\n#0 /tmp/tmpli4mtdtu.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpli4mtdtu.php\
    \ on line 24\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = 1;\n  $number = $n;\n  while ($number > 0) {\n    $result *= factorial($number);\n\
    \    $number--;\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmpur19pik_.php:14\nStack trace:\n#0 /tmp/tmpur19pik_.php(21): special_factorial(4)\n\
    #1 /tmp/tmpur19pik_.php(25): candidate(4)\n#2 /tmp/tmpur19pik_.php(31): test()\n\
    #3 {main}\n  thrown in /tmp/tmpur19pik_.php on line 14\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ if ($n < 0) {\n    return 'The number is not greater than 0';\n  } else {\n\
    \    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n      $factorial *=\
    \ $i;\n    }\n    return $factorial;\n  }\n}\n\necho special_factorial(4);\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp28q8i3m6.php:28\n\
    Stack trace:\n#0 /tmp/tmp28q8i3m6.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp28q8i3m6.php\
    \ on line 28\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $count = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $count *= $i;\n  }\n  return\
    \ $count;\n}\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzv2ygibs.php:22\n\
    Stack trace:\n#0 /tmp/tmpzv2ygibs.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpzv2ygibs.php\
    \ on line 22\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $f=1;\n    for($i=1;$i<=$n;$i++){\n        $f=$f*$i;\n    }\n    $n--;\n \
    \   while($n>0){\n        $f=$f*$n;\n        $n--;\n    }\n    return $f;\n}\n\
    \necho special_factorial(4); // 288\necho \"\\n\";\necho special_factorial(3);\
    \ // 72\necho \"\\n\";\necho special_factorial(2); // 2\necho \"\\n\";\necho special_factorial(1);\
    \ // 1\necho \"\\n\";\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "144\n12\n2\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy0sldhbn.php:37\n\
    Stack trace:\n#0 /tmp/tmpy0sldhbn.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpy0sldhbn.php\
    \ on line 37\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $total = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $total *= factorial($i);\n\
    \    }\n    return $total;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmpbigejyir.php:13\nStack trace:\n#0 /tmp/tmpbigejyir.php(19): special_factorial(4)\n\
    #1 /tmp/tmpbigejyir.php(23): candidate(4)\n#2 /tmp/tmpbigejyir.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmpbigejyir.php on line 13\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $result *= $i;\n  }\n  return\
    \ $result;\n}\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfh4fudqm.php:22\n\
    Stack trace:\n#0 /tmp/tmpfh4fudqm.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpfh4fudqm.php\
    \ on line 22\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   // Check to make sure that a valid integer is provided\n    if (is_int($n)\
    \ && $n > 0) {\n        // Create and empty array\n        $factorials = [];\n\
    \        // Loop from 1 to $n adding the factorial of each number to the array\n\
    \        for ($i = 1; $i <= $n; $i++) {\n            $factorials[] = factorial($i);\n\
    \        }\n        // Reduce the array to a single value, multiplying each number\
    \ together\n        return array_reduce($factorials, function($product, $factor)\
    \ {\n            return $product * $factor;\n        });\n    }\n    // Invalid\
    \ input\n    return false;\n}\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmpi1nowpje.php:17\nStack trace:\n#0 /tmp/tmpi1nowpje.php(28): special_factorial(4)\n\
    #1 /tmp/tmpi1nowpje.php(32): candidate(4)\n#2 /tmp/tmpi1nowpje.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpi1nowpje.php on line 17\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n\t\
    $nf = 1;\n\t$n1f = 1;\n\tfor ($i=1; $i <= $n; $i++) { \n\t\t$nf *= $i;\n\t\tif($i\
    \ > 1)\n\t\t\t$n1f *= $i;\n\t}\n\treturn $nf * $n1f;\n}\n\necho special_factorial(4);\n\
    function candidate(...$args) {\n    return special_factorial(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "576\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpotvwu4fq.php:27\n\
    Stack trace:\n#0 /tmp/tmpotvwu4fq.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpotvwu4fq.php\
    \ on line 27\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $total = 1;\n  while ($n >= 1) {\n    $total *= factorial($n);\n    $n--;\n\
    \  }\n  return $total;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmptwli8q6b.php:13\nStack trace:\n#0 /tmp/tmptwli8q6b.php(20): special_factorial(4)\n\
    #1 /tmp/tmptwli8q6b.php(24): candidate(4)\n#2 /tmp/tmptwli8q6b.php(30): test()\n\
    #3 {main}\n  thrown in /tmp/tmptwli8q6b.php on line 13\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $r = 1;\n    while($n > 0) {\n        $r *= $n;\n        $n--;\n    }\n  \
    \  return $r;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiski0w18.php:24\n\
    Stack trace:\n#0 /tmp/tmpiski0w18.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpiski0w18.php\
    \ on line 24\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n\
    \  for ($i = $n - 1; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  for ($i =\
    \ $n - 2; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcs3j4nrj.php:30\n\
    Stack trace:\n#0 /tmp/tmpcs3j4nrj.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpcs3j4nrj.php\
    \ on line 30\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $ans = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $ans *= factorial($i);\n  }\n\
    \  return $ans;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmp8j7s40im.php:13\nStack trace:\n#0 /tmp/tmp8j7s40im.php(19): special_factorial(4)\n\
    #1 /tmp/tmp8j7s40im.php(23): candidate(4)\n#2 /tmp/tmp8j7s40im.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmp8j7s40im.php on line 13\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $factorial *=\
    \ $i;\n    }\n    return $factorial;\n}\nfunction candidate(...$args) {\n    return\
    \ special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvhayilsy.php:22\n\
    Stack trace:\n#0 /tmp/tmpvhayilsy.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpvhayilsy.php\
    \ on line 22\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n === 0) {\n        return 1;\n    }\n    $result = $n;\n    for ($i\
    \ = $n - 1; $i > 0; $i--) {\n        $result *= $i;\n    }\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnp8kpzar.php:25\n\
    Stack trace:\n#0 /tmp/tmpnp8kpzar.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpnp8kpzar.php\
    \ on line 25\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $brazilianFactorial = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $brazilianFactorial\
    \ *= $i;\n  }\n  return $brazilianFactorial;\n}\n\necho special_factorial(4) .\
    \ PHP_EOL;\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "24\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp09aqrpfr.php:24\n\
    Stack trace:\n#0 /tmp/tmp09aqrpfr.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp09aqrpfr.php\
    \ on line 24\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $fact = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $fact *= $i;\n  }\n  $fact\
    \ /= 2;\n  return $fact;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp63oessro.php:24\n\
    Stack trace:\n#0 /tmp/tmp63oessro.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp63oessro.php\
    \ on line 24\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ if ($n > 0) {\n    $result = 1;\n    for ($i = 1; $i <= $n; $i++) {\n      $result\
    \ *= $i;\n    }\n    return $result;\n  }\n}\n\nfunction candidate(...$args) {\n\
    \    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9l85g5p0.php:25\n\
    Stack trace:\n#0 /tmp/tmp9l85g5p0.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp9l85g5p0.php\
    \ on line 25\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ if($n==0){\n    return 1;\n  }else{\n    return $n*special_factorial($n-1);\n\
    \  }\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfg6vqdtb.php:23\n\
    Stack trace:\n#0 /tmp/tmpfg6vqdtb.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpfg6vqdtb.php\
    \ on line 23\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ // YOUR CODE HERE\n}\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6ejikbek.php:18\n\
    Stack trace:\n#0 /tmp/tmp6ejikbek.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp6ejikbek.php\
    \ on line 18\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if($n <= 0) {\n        throw new InvalidArgumentException();\n    }\n\n  \
    \  $result = 1;\n    for($i = 1; $i <= $n; $i++) {\n        $result *= factorial($i);\n\
    \    }\n\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmplf6p1fqc.php:17\nStack trace:\n#0 /tmp/tmplf6p1fqc.php(24): special_factorial(4)\n\
    #1 /tmp/tmplf6p1fqc.php(28): candidate(4)\n#2 /tmp/tmplf6p1fqc.php(34): test()\n\
    #3 {main}\n  thrown in /tmp/tmplf6p1fqc.php on line 17\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = $n;\n  for ($i = 1; $i < $n; $i++) {\n    $result *= $i;\n  }\n  return\
    \ $result;\n}\necho special_factorial(4);\nfunction candidate(...$args) {\n  \
    \  return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4tjhgyhe.php:23\n\
    Stack trace:\n#0 /tmp/tmp4tjhgyhe.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp4tjhgyhe.php\
    \ on line 23\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if($n < 0) return null;\n    else if($n == 0) return 1;\n    else if($n ==\
    \ 1) return 1;\n    else return $n * special_factorial($n - 1);\n}\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptt8sor_q.php:21\n\
    Stack trace:\n#0 /tmp/tmptt8sor_q.php(27): test()\n#1 {main}\n  thrown in /tmp/tmptt8sor_q.php\
    \ on line 21\n"
  timestamp: 1659978822
- exit_code: 0
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $res = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $f = 1;\n        for\
    \ ($j = 1; $j <= $i; $j++) {\n            $f *= $j;\n        }\n        $res *=\
    \ $f;\n    }\n    return $res;\n}\nfunction candidate(...$args) {\n    return\
    \ special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $a = gmp_fact($n);\n    for ($i = 1; $i < $n; $i++) {\n        $a = gmp_mul($a,\
    \ gmp_fact($n - $i));\n    }\n    return gmp_strval($a);\n}\necho special_factorial(4);\n\
    function candidate(...$args) {\n    return special_factorial(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function gmp_fact() in\
    \ /tmp/tmp3lkmo4lo.php:11\nStack trace:\n#0 /tmp/tmp3lkmo4lo.php(17): special_factorial(4)\n\
    #1 {main}\n  thrown in /tmp/tmp3lkmo4lo.php on line 11\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   // Write your code here\n    $result = 1;\n    $i = 1;\n    while ($i <= $n)\
    \ {\n        $result *= $i;\n        $i++;\n    }\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return special_factorial(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0hstrtt_.php:26\n\
    Stack trace:\n#0 /tmp/tmp0hstrtt_.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp0hstrtt_.php\
    \ on line 26\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ // Add your code here\n}\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphu6zhd_0.php:18\n\
    Stack trace:\n#0 /tmp/tmphu6zhd_0.php(24): test()\n#1 {main}\n  thrown in /tmp/tmphu6zhd_0.php\
    \ on line 18\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n == 0) {\n        return 1;\n    }\n    $factorial = 1;\n    for ($i\
    \ = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n    return $factorial;\n\
    }\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp93tt8c6m.php:25\n\
    Stack trace:\n#0 /tmp/tmp93tt8c6m.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp93tt8c6m.php\
    \ on line 25\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ if ($n == 0) return 1;\n  return $n * special_factorial($n - 1);\n}\n$result\
    \ = special_factorial(4);\necho \"result = $result\\n\";\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "result = 24\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiro_1oso.php:21\n\
    Stack trace:\n#0 /tmp/tmpiro_1oso.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpiro_1oso.php\
    \ on line 21\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $prod = 1;\n  while ($n > 0) {\n    $prod *= factorial($n);\n    $n--;\n  }\n\
    \  return $prod;\n}\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmp3rg7ffht.php:13\nStack trace:\n#0 /tmp/tmp3rg7ffht.php(19): special_factorial(4)\n\
    #1 /tmp/tmp3rg7ffht.php(23): candidate(4)\n#2 /tmp/tmp3rg7ffht.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmp3rg7ffht.php on line 13\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ if ($n == 0) {\n    return 1;\n  }\n  $arr = [];\n  for ($i = $n; $i > 0; $i--)\
    \ {\n    $arr[] = $i;\n  }\n  return array_product($arr);\n}\n\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphy63jx34.php:26\n\
    Stack trace:\n#0 /tmp/tmphy63jx34.php(32): test()\n#1 {main}\n  thrown in /tmp/tmphy63jx34.php\
    \ on line 26\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n\
    \  for ($i = $n - 1; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  for ($i =\
    \ $n - 2; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nprint(special_factorial(4) . \"\\n\");\nfunction candidate(...$args) {\n\
    \    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "288\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphf2idk7g.php:31\n\
    Stack trace:\n#0 /tmp/tmphf2idk7g.php(36): test()\n#1 {main}\n  thrown in /tmp/tmphf2idk7g.php\
    \ on line 31\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  while ($n > 0) {\n    $factorial *= $n;\n    $n--;\n  }\n\
    \  return $factorial;\n}\n\necho special_factorial(4);\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3azv09c4.php:25\n\
    Stack trace:\n#0 /tmp/tmp3azv09c4.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp3azv09c4.php\
    \ on line 25\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $prod = 1;\n    $fatorial = 1;\n    for ($i = $n; $i > 0; $i--) {\n      \
    \  $fatorial *= $i;\n        $prod *= $fatorial;\n    }\n    return $prod;\n}\n\
    \necho special_factorial(4);\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "27648\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyl093xhh.php:26\n\
    Stack trace:\n#0 /tmp/tmpyl093xhh.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpyl093xhh.php\
    \ on line 26\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ if ($n <= 0) {\n    return 0;\n  }\n  $sum = $n;\n  while ($n > 1) {\n    $n--;\n\
    \    $sum *= $n;\n  }\n  return $sum;\n}\n\nfunction candidate(...$args) {\n \
    \   return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb5vx9nhl.php:27\n\
    Stack trace:\n#0 /tmp/tmpb5vx9nhl.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpb5vx9nhl.php\
    \ on line 27\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n\t\
    $factors = array($n);\n\tfor ($i = $n - 1; $i > 0; $i--) {\n\t\t$factors[] = $i;\n\
    \t}\n\treturn array_product($factors);\n}\n\necho special_factorial(4) . \"\\\
    n\";\necho special_factorial(10) . \"\\n\";\necho special_factorial(3) . \"\\\
    n\";\necho special_factorial(2) . \"\\n\";\nfunction candidate(...$args) {\n \
    \   return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "24\n3628800\n6\n2\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2f0l7pxm.php:27\n\
    Stack trace:\n#0 /tmp/tmp2f0l7pxm.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp2f0l7pxm.php\
    \ on line 27\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $prod = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $prod *= factorial($i);\n\
    \    }\n    return $prod;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmpaknrytxa.php:13\nStack trace:\n#0 /tmp/tmpaknrytxa.php(19): special_factorial(4)\n\
    #1 /tmp/tmpaknrytxa.php(23): candidate(4)\n#2 /tmp/tmpaknrytxa.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmpaknrytxa.php on line 13\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ if ($n <= 0) {\n    return null;\n  }\n\n  $factorial = 1;\n  for ($i = $n;\
    \ $i > 0; $i--) {\n    $factorial *= $i;\n  }\n\n  $factorials = array();\n  for\
    \ ($i = 1; $i <= $n; $i++) {\n    $factorials[] = special_factorial($i);\n  }\n\
    \n  return $factorial * array_product($factorials);\n}\n\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    262144 bytes) in /tmp/tmppm2e4t1b.php on line 22

    '
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *=\
    \ $i;\n    }\n    for ($i = 1; $i < $n; $i++) {\n        $factorial *= $i;\n \
    \   }\n    return $factorial;\n}\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgxkjjxi8.php:25\n\
    Stack trace:\n#0 /tmp/tmpgxkjjxi8.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpgxkjjxi8.php\
    \ on line 25\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ if ($n <= 0) return 1;\n  return $n * special_factorial($n - 1);\n}\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphkne40ab.php:19\n\
    Stack trace:\n#0 /tmp/tmphkne40ab.php(25): test()\n#1 {main}\n  thrown in /tmp/tmphkne40ab.php\
    \ on line 19\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorials = [];\n  for ($i = 1; $i <= $n; $i++) {\n    $factorials[] = $i;\n\
    \  }\n  $total = 1;\n  foreach ($factorials as $factorial) {\n    $total *= $factorial;\n\
    \  }\n  return $total;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkurd8b00.php:27\n\
    Stack trace:\n#0 /tmp/tmpkurd8b00.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpkurd8b00.php\
    \ on line 27\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ // Here you write the code of your function.\n}\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnmbfoq35.php:18\n\
    Stack trace:\n#0 /tmp/tmpnmbfoq35.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpnmbfoq35.php\
    \ on line 18\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $count = 1;\n  $factorial = 1;\n  while ($count <= $n) {\n    $factorial *=\
    \ $count;\n    $count++;\n  }\n  return $factorial;\n}\n\necho \"The special factorial\
    \ of 7 is: \" . special_factorial(7);\nfunction candidate(...$args) {\n    return\
    \ special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "The special factorial of 7 is: 5040\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp5lh4v9sx.php:26\nStack trace:\n#0 /tmp/tmp5lh4v9sx.php(32):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp5lh4v9sx.php on line 26\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n\t\
    $product = 1;\n\tif($n==0){\n\t\treturn 1;\n\t}\n\telse{\n\t\twhile($n>0){\n\t\
    \t\t$product = $product * $n * factorial($n-1);\n\t\t\t$n--;\n\t\t}\n\t\treturn\
    \ $product;\n\t}\n}\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmpev48ocl7.php:17\nStack trace:\n#0 /tmp/tmpev48ocl7.php(24): special_factorial(4)\n\
    #1 /tmp/tmpev48ocl7.php(28): candidate(4)\n#2 /tmp/tmpev48ocl7.php(34): test()\n\
    #3 {main}\n  thrown in /tmp/tmpev48ocl7.php on line 17\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $a = [];\n  for ($i = 1; $i <= $n; $i++) {\n    $a[] = $i;\n  }\n  $a = array_reverse($a);\n\
    \  $b = [];\n  foreach ($a as $x) {\n    $b[] = factorial($x);\n  }\n  return\
    \ array_product($b);\n}\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmpj_10dq0s.php:18\nStack trace:\n#0 /tmp/tmpj_10dq0s.php(23): special_factorial(4)\n\
    #1 /tmp/tmpj_10dq0s.php(27): candidate(4)\n#2 /tmp/tmpj_10dq0s.php(33): test()\n\
    #3 {main}\n  thrown in /tmp/tmpj_10dq0s.php on line 18\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n\n\
    }\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplvjnaqvp.php:18\n\
    Stack trace:\n#0 /tmp/tmplvjnaqvp.php(24): test()\n#1 {main}\n  thrown in /tmp/tmplvjnaqvp.php\
    \ on line 18\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n\t\
    $brazilian_factorial = 1;\n\twhile($n > 0) {\n\t\t$brazilian_factorial *= factorial($n);\n\
    \t\t$n--;\n\t}\n\treturn $brazilian_factorial;\n}\n\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmp2e01wbvx.php:13\nStack trace:\n#0 /tmp/tmp2e01wbvx.php(20): special_factorial(4)\n\
    #1 /tmp/tmp2e01wbvx.php(24): candidate(4)\n#2 /tmp/tmp2e01wbvx.php(30): test()\n\
    #3 {main}\n  thrown in /tmp/tmp2e01wbvx.php on line 13\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $special_factorial = 1;\n    for ($i=1; $i <= $n; $i++) {\n        $special_factorial\
    \ *= factorial($i);\n    }\n    return $special_factorial;\n}\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmp7emzd8yt.php:13\nStack trace:\n#0 /tmp/tmp7emzd8yt.php(18): special_factorial(4)\n\
    #1 /tmp/tmp7emzd8yt.php(22): candidate(4)\n#2 /tmp/tmp7emzd8yt.php(28): test()\n\
    #3 {main}\n  thrown in /tmp/tmp7emzd8yt.php on line 13\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorials = [];\n  for ($i = $n; $i > 0; $i--) {\n    $factorials[] = factorial($i);\n\
    \  }\n  return array_product($factorials);\n}\n\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmpr1wqlqy_.php:13\nStack trace:\n#0 /tmp/tmpr1wqlqy_.php(19): special_factorial(4)\n\
    #1 /tmp/tmpr1wqlqy_.php(23): candidate(4)\n#2 /tmp/tmpr1wqlqy_.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmpr1wqlqy_.php on line 13\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   // a function for finding factorial of a number\n\n    function findFactorial($n)\
    \ {\n        $output = 1;\n        for ($i = $n; $i > 0; $i--) {\n           \
    \ $output *= $i;\n        }\n        return $output;\n    }\n\n    // a function\
    \ for finding special factorial of a number\n    function specialFactorial($n)\
    \ {\n        $output = 1;\n        for ($i = $n; $i > 0; $i--) {\n           \
    \ $output *= findFactorial($i);\n        }\n        return $output;\n    }\n\n\
    \    return specialFactorial($n);\n}\nfunction candidate(...$args) {\n    return\
    \ special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Cannot redeclare findFactorial() (previously declared in /tmp/tmpzzc20axy.php:13)
    in /tmp/tmpzzc20axy.php on line 13

    '
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n\n\
    }\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplvjnaqvp.php:18\n\
    Stack trace:\n#0 /tmp/tmplvjnaqvp.php(24): test()\n#1 {main}\n  thrown in /tmp/tmplvjnaqvp.php\
    \ on line 18\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $sum = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $sum *= $i;\n  }\n  return $sum;\n\
    }\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpue4w_e63.php:22\n\
    Stack trace:\n#0 /tmp/tmpue4w_e63.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpue4w_e63.php\
    \ on line 22\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n == 0) {\n        return 1;\n    }\n    $fac = 1;\n    for ($i = $n;\
    \ $i > 0; $i--) {\n        $fac *= $i;\n    }\n    return $fac;\n}\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp99w8djsg.php:25\n\
    Stack trace:\n#0 /tmp/tmp99w8djsg.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp99w8djsg.php\
    \ on line 25\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $total = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $total *= factorial($i);\n\
    \    }\n    return $total;\n}\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmp8f8407p2.php:13\nStack trace:\n#0 /tmp/tmp8f8407p2.php(18): special_factorial(4)\n\
    #1 /tmp/tmp8f8407p2.php(22): candidate(4)\n#2 /tmp/tmp8f8407p2.php(28): test()\n\
    #3 {main}\n  thrown in /tmp/tmp8f8407p2.php on line 13\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ // Your code here\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyikek_e5.php:19\n\
    Stack trace:\n#0 /tmp/tmpyikek_e5.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpyikek_e5.php\
    \ on line 19\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n\
    \  for ($i = $n - 1; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  for ($i =\
    \ $n - 2; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\necho special_factorial(4) . \"\\n\";\nfunction candidate(...$args) {\n  \
    \  return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "288\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6grza48j.php:31\n\
    Stack trace:\n#0 /tmp/tmp6grza48j.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp6grza48j.php\
    \ on line 31\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorials = [];\n  $product = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $product\
    \ *= $i;\n    $factorials[] = $product;\n  }\n  foreach (array_reverse($factorials)\
    \ as $factorial) {\n    $product *= $factorial;\n  }\n  return $product;\n}\n\n\
    function candidate(...$args) {\n    return special_factorial(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqf99t74k.php:28\n\
    Stack trace:\n#0 /tmp/tmpqf99t74k.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpqf99t74k.php\
    \ on line 28\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $product = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $product *= factorial($i);\n\
    \  }\n  return $product;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmptsnd4pmi.php:13\nStack trace:\n#0 /tmp/tmptsnd4pmi.php(19): special_factorial(4)\n\
    #1 /tmp/tmptsnd4pmi.php(23): candidate(4)\n#2 /tmp/tmptsnd4pmi.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmptsnd4pmi.php on line 13\n"
  timestamp: 1659823480
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   return $n == 0 ? 1 : $n * special_factorial($n - 1);\n}\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkttu1x65.php:18\n\
    Stack trace:\n#0 /tmp/tmpkttu1x65.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpkttu1x65.php\
    \ on line 18\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = 1;\n  while ($n > 0) {\n    $result *= factorial($n);\n    $n--;\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmpfohdz22v.php:13\nStack trace:\n#0 /tmp/tmpfohdz22v.php(20): special_factorial(4)\n\
    #1 /tmp/tmpfohdz22v.php(24): candidate(4)\n#2 /tmp/tmpfohdz22v.php(30): test()\n\
    #3 {main}\n  thrown in /tmp/tmpfohdz22v.php on line 13\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n\t\
    $sum = 1;\n\tfor ($i = 1; $i <= $n; $i++) {\n\t\t$sum *= $i;\n\t}\n\tfor ($i =\
    \ 1; $i <= $n-1; $i++) {\n\t\t$sum *= $i;\n\t}\n\tfor ($i = 1; $i <= $n-2; $i++)\
    \ {\n\t\t$sum *= $i;\n\t}\n\treturn $sum;\n}\nfunction candidate(...$args) {\n\
    \    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4gc1_5ue.php:29\n\
    Stack trace:\n#0 /tmp/tmp4gc1_5ue.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp4gc1_5ue.php\
    \ on line 29\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  $factorial_current = 1;\n  while ($n > 0) {\n    $factorial_current\
    \ *= $n;\n    $factorial *= $factorial_current;\n    $n--;\n  }\n  return $factorial;\n\
    }\necho special_factorial(4);\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "27648\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf63v61ve.php:26\n\
    Stack trace:\n#0 /tmp/tmpf63v61ve.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpf63v61ve.php\
    \ on line 26\n"
  timestamp: 1659978822
- exit_code: 0
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial = 1;\n    for\
    \ ($j = 1; $j <= $i; $j++) {\n      $factorial *= $j;\n    }\n    $result *= $factorial;\n\
    \  }\n  return $result;\n}\n\necho special_factorial(4) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: '288

    '
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ // Insert code here\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv8qzvywj.php:19\n\
    Stack trace:\n#0 /tmp/tmpv8qzvywj.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpv8qzvywj.php\
    \ on line 19\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n <= 0) return 1;\n    return factorial($n) * special_factorial($n -\
    \ 1);\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmp0gdrpn25.php:12\nStack trace:\n#0 /tmp/tmp0gdrpn25.php(16): special_factorial(4)\n\
    #1 /tmp/tmp0gdrpn25.php(20): candidate(4)\n#2 /tmp/tmp0gdrpn25.php(26): test()\n\
    #3 {main}\n  thrown in /tmp/tmp0gdrpn25.php on line 12\n"
  timestamp: 1659978822
- exit_code: 0
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n\t\
    if($n == 0) {\n\t\treturn 1;\n\t} else {\n\t\t$current = $n;\n\t\t$f = 1;\n\t\t\
    while($current > 0) {\n\t\t\t$f *= $current;\n\t\t\t$current--;\n\t\t}\n\t\treturn\
    \ $f * special_factorial($n - 1);\n\t}\n}\n\nprint(special_factorial(4));\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: '288'
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $result *= $i;\n  }\n  return\
    \ $result;\n}\necho special_factorial(4);\nfunction candidate(...$args) {\n  \
    \  return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb0bb5db7.php:23\n\
    Stack trace:\n#0 /tmp/tmpb0bb5db7.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpb0bb5db7.php\
    \ on line 23\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $result = $n;\n    while($n > 1) {\n        $result *= $n - 1;\n        $n--;\n\
    \    }\n    return $result;\n}\n\n$test = [\n    [4, 288],\n    [5, 34560],\n\
    \    [6, 2419200],\n    [7, 29030400],\n    [8, 87178291200],\n    [9, 754118428800]\n\
    ];\n\n$failed = 0;\nforeach ($test as $row) {\n    if (special_factorial($row[0])\
    \ !== $row[1]) {\n        $failed++;\n        echo \"<p>special_factorial({$row[0]})\
    \ should return {$row[1]} but returned {$row[0]}</p>\";\n    }\n}\n\nif ($failed\
    \ === 0) {\n    echo \"<p>All tests are successful</p>\";\n}\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<p>special_factorial(4) should return 288 but returned 4</p><p>special_factorial(5)\
    \ should return 34560 but returned 5</p><p>special_factorial(6) should return\
    \ 2419200 but returned 6</p><p>special_factorial(7) should return 29030400 but\
    \ returned 7</p><p>special_factorial(8) should return 87178291200 but returned\
    \ 8</p><p>special_factorial(9) should return 754118428800 but returned 9</p>\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpgxscv2ya.php:44\nStack\
    \ trace:\n#0 /tmp/tmpgxscv2ya.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpgxscv2ya.php\
    \ on line 44\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n}\n\
    function candidate(...$args) {\n    return special_factorial(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9r07kh3k.php:17\n\
    Stack trace:\n#0 /tmp/tmp9r07kh3k.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp9r07kh3k.php\
    \ on line 17\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqc4cq280.php:19\n\
    Stack trace:\n#0 /tmp/tmpqc4cq280.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpqc4cq280.php\
    \ on line 19\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n\
    \  return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4x_9l1n_.php:23\n\
    Stack trace:\n#0 /tmp/tmp4x_9l1n_.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp4x_9l1n_.php\
    \ on line 23\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ if ( $n == 0 ) return 1;\n  else return $n * special_factorial($n-1);\n}\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3x9udlh7.php:19\n\
    Stack trace:\n#0 /tmp/tmp3x9udlh7.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp3x9udlh7.php\
    \ on line 19\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $n2 = $n;\n    $sfact = 1;\n    while ($n2 > 0) {\n        $sfact *= $n2;\n\
    \        $n2--;\n    }\n    return $sfact * special_factorial($n - 1);\n}\n\n\
    function candidate(...$args) {\n    return special_factorial(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    262144 bytes) in /tmp/tmp7hg5rvz4.php on line 17

    '
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n\t\
    $factorials = [];\n\tfor ($i = $n; $i > 0; $i--) {\n\t\t$factorials[] = factorial($i);\n\
    \t}\n\treturn array_product($factorials);\n}\nfunction candidate(...$args) {\n\
    \    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmpdh4dfncr.php:13\nStack trace:\n#0 /tmp/tmpdh4dfncr.php(18): special_factorial(4)\n\
    #1 /tmp/tmpdh4dfncr.php(22): candidate(4)\n#2 /tmp/tmpdh4dfncr.php(28): test()\n\
    #3 {main}\n  thrown in /tmp/tmpdh4dfncr.php on line 13\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $arr = [];\n    $result = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $arr[]\
    \ = $i;\n    }\n    foreach ($arr as $a) {\n        $result *= factorial($a);\n\
    \    }\n    return $result;\n}\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmpjf48vlbz.php:17\nStack trace:\n#0 /tmp/tmpjf48vlbz.php(22): special_factorial(4)\n\
    #1 /tmp/tmpjf48vlbz.php(26): candidate(4)\n#2 /tmp/tmpjf48vlbz.php(32): test()\n\
    #3 {main}\n  thrown in /tmp/tmpjf48vlbz.php on line 17\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ // Please insert your code here.\n}\n\nfunction candidate(...$args) {\n    return\
    \ special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa7ps5osd.php:19\n\
    Stack trace:\n#0 /tmp/tmpa7ps5osd.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpa7ps5osd.php\
    \ on line 19\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $result = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $result *= $i;\n\
    \    }\n    return $result;\n}\n\nprint special_factorial(4);\n\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0y1m_j2q.php:25\n\
    Stack trace:\n#0 /tmp/tmp0y1m_j2q.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp0y1m_j2q.php\
    \ on line 25\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n === 0) {\n        return 1;\n    }\n    return $n * factorial($n -\
    \ 1);\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmpmgih3lak.php:14\nStack trace:\n#0 /tmp/tmpmgih3lak.php(18): special_factorial(4)\n\
    #1 /tmp/tmpmgih3lak.php(22): candidate(4)\n#2 /tmp/tmpmgih3lak.php(28): test()\n\
    #3 {main}\n  thrown in /tmp/tmpmgih3lak.php on line 14\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n\t\
    for ($i = 1; $i <= $n; $i++) {\n\t\t$result *= $i;\n\t}\n\treturn $result;\n}\n\
    \nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $result in /tmp/tmp05wh5km_.php on line 12\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp05wh5km_.php:22\nStack\
    \ trace:\n#0 /tmp/tmp05wh5km_.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp05wh5km_.php\
    \ on line 22\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ if ($n <= 0) {\n    return 1;\n  }\n  return $n * special_factorial($n - 1);\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp44c5p88a.php:22\n\
    Stack trace:\n#0 /tmp/tmp44c5p88a.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp44c5p88a.php\
    \ on line 22\n"
  timestamp: 1659978822
- exit_code: 0
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $fact = function($n) use (&$fact) {\n    if ($n === 0) {\n      return 1;\n\
    \    }\n    return $n * $fact($n - 1);\n  };\n  $result = 1;\n  for ($i = 1; $i\
    \ <= $n; $i++) {\n    $result *= $fact($i);\n  }\n  return $result;\n}\n\nassert(special_factorial(1)\
    \ === 1);\nassert(special_factorial(2) === 2);\nassert(special_factorial(3) ===\
    \ 12);\nassert(special_factorial(4) === 288);\nassert(special_factorial(5) ===\
    \ 34560);\nassert(special_factorial(6) === 24883200);\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $arr = [];\n  for ($i = $n; $i > 0; $i--) {\n    $arr[] = $i;\n  }\n  return\
    \ array_product($arr);\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7y3nbeqe.php:23\n\
    Stack trace:\n#0 /tmp/tmp7y3nbeqe.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp7y3nbeqe.php\
    \ on line 23\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $factorial *=\
    \ $i;\n    }\n    return $factorial;\n}\nfunction candidate(...$args) {\n    return\
    \ special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvhayilsy.php:22\n\
    Stack trace:\n#0 /tmp/tmpvhayilsy.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpvhayilsy.php\
    \ on line 22\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if($n == 0) {\n        return 1;\n    }\n    return factorial($n) * special_factorial($n\
    \ - 1);\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmpf9nkk7iw.php:14\nStack trace:\n#0 /tmp/tmpf9nkk7iw.php(18): special_factorial(4)\n\
    #1 /tmp/tmpf9nkk7iw.php(22): candidate(4)\n#2 /tmp/tmpf9nkk7iw.php(28): test()\n\
    #3 {main}\n  thrown in /tmp/tmpf9nkk7iw.php on line 14\n"
  timestamp: 1659978822
- exit_code: 0
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $f = function($n) use (&$f) {\n        return $n < 2 ? 1 : $n * $f($n - 1);\n\
    \    };\n    $r = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $r *= $f($i);\n\
    \    }\n    return $r;\n}\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  while ($n > 0) {\n    $factorial *= factorial($n);\n    $n--;\n\
    \  }\n  return $factorial;\n}\necho special_factorial(4);\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmp9qdwwx03.php:13\nStack trace:\n#0 /tmp/tmp9qdwwx03.php(18): special_factorial(4)\n\
    #1 {main}\n  thrown in /tmp/tmp9qdwwx03.php on line 13\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n\t\
    if ($n < 0) {\n\t\tthrow new \\Exception(\"The number should be greater than 0\"\
    );\n\t}\n\n\t// YOUR CODE HERE\n}\nfunction candidate(...$args) {\n    return\
    \ special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn8uin4hd.php:22\n\
    Stack trace:\n#0 /tmp/tmpn8uin4hd.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpn8uin4hd.php\
    \ on line 22\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ if ($n == 0) return 1;\n  $i = $n;\n  $result = 1;\n  while ($i > 0) {\n   \
    \ $result *= $i;\n    $i--;\n  }\n  return $result;\n}\necho special_factorial(4);\n\
    function candidate(...$args) {\n    return special_factorial(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp84dql466.php:26\n\
    Stack trace:\n#0 /tmp/tmp84dql466.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp84dql466.php\
    \ on line 26\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n <= 0) {\n        throw new Exception(\"There is no factorial for non-positive\
    \ integers.\");\n    }\n    $factorial = 1;\n    for ($i = $n; $i > 0; $i--) {\n\
    \        $factorial *= $i;\n    }\n    return $factorial;\n}\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp178vd69a.php:25\n\
    Stack trace:\n#0 /tmp/tmp178vd69a.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp178vd69a.php\
    \ on line 25\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ if ($n <= 0) return null;\n  $result = 1;\n  while ($n > 0) {\n    $result *=\
    \ factorial($n);\n    $n--;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmpd8qquzi6.php:14\nStack trace:\n#0 /tmp/tmpd8qquzi6.php(21): special_factorial(4)\n\
    #1 /tmp/tmpd8qquzi6.php(25): candidate(4)\n#2 /tmp/tmpd8qquzi6.php(31): test()\n\
    #3 {main}\n  thrown in /tmp/tmpd8qquzi6.php on line 14\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $fac = 1;\n  while ($n > 0) {\n    $fac *= $n--;\n  }\n  return $fac;\n}\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv8d6vhvj.php:22\n\
    Stack trace:\n#0 /tmp/tmpv8d6vhvj.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpv8d6vhvj.php\
    \ on line 22\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n\t\
    $f = 1;\n\tfor ($i = $n; $i > 0; $i--) {\n\t\t$f *= $i;\n\t}\n\treturn $f;\n}\n\
    \nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6qmlqgkw.php:23\n\
    Stack trace:\n#0 /tmp/tmp6qmlqgkw.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp6qmlqgkw.php\
    \ on line 23\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ if ($n == 0) return 1;\n  $result = 1;\n  for ($i = $n; $i > 0; $i--) {\n  \
    \  $result *= $i;\n  }\n  return $result;\n}\nfunction candidate(...$args) {\n\
    \    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_owwtcdf.php:23\n\
    Stack trace:\n#0 /tmp/tmp_owwtcdf.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp_owwtcdf.php\
    \ on line 23\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $fact = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $fact *= $i;\n  }\n  return\
    \ $fact;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxobmjxf4.php:23\n\
    Stack trace:\n#0 /tmp/tmpxobmjxf4.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpxobmjxf4.php\
    \ on line 23\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i=1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n\
    \  return $factorial;\n}\n\necho special_factorial(4);\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmxguqd10.php:24\n\
    Stack trace:\n#0 /tmp/tmpmxguqd10.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpmxguqd10.php\
    \ on line 24\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *=\
    \ $i;\n    }\n    return $factorial;\n}\n\necho special_factorial(4);\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcsx6gn5v.php:24\n\
    Stack trace:\n#0 /tmp/tmpcsx6gn5v.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpcsx6gn5v.php\
    \ on line 24\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $array = range(1, $n);\n    return array_product($array);\n}\n\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpujw4mkuh.php:20\n\
    Stack trace:\n#0 /tmp/tmpujw4mkuh.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpujw4mkuh.php\
    \ on line 20\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $fact = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $fact *= $i;\n  }\n  for ($i\
    \ = $n - 1; $i > 0; $i--) {\n    $fact *= $i;\n  }\n  return $fact;\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx3q05gdh.php:26\n\
    Stack trace:\n#0 /tmp/tmpx3q05gdh.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpx3q05gdh.php\
    \ on line 26\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n\t\
    return factorial($n) * factorial($n - 1);\n}\n\nfunction candidate(...$args) {\n\
    \    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmp8q7j0tbj.php:11\nStack trace:\n#0 /tmp/tmp8q7j0tbj.php(15): special_factorial(4)\n\
    #1 /tmp/tmp8q7j0tbj.php(19): candidate(4)\n#2 /tmp/tmp8q7j0tbj.php(25): test()\n\
    #3 {main}\n  thrown in /tmp/tmp8q7j0tbj.php on line 11\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $fact = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $fact *= $i;\n  }\n  return\
    \ $fact;\n}\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2gp8dfo0.php:22\n\
    Stack trace:\n#0 /tmp/tmp2gp8dfo0.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp2gp8dfo0.php\
    \ on line 22\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n \
    \ }\n  $factorials = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factorials *= $i;\n\
    \  }\n  return $factorial * $factorials;\n}\n\nfunction candidate(...$args) {\n\
    \    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpriqiclh3.php:27\n\
    Stack trace:\n#0 /tmp/tmpriqiclh3.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpriqiclh3.php\
    \ on line 27\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   // your code goes here...\n}\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps1122lzv.php:18\n\
    Stack trace:\n#0 /tmp/tmps1122lzv.php(24): test()\n#1 {main}\n  thrown in /tmp/tmps1122lzv.php\
    \ on line 18\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $result = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $result *= $i;\n\
    \    }\n    for ($i = $n - 1; $i > 0; $i--) {\n        $result *= $i;\n    }\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgi71aftt.php:26\n\
    Stack trace:\n#0 /tmp/tmpgi71aftt.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpgi71aftt.php\
    \ on line 26\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \  $factorial = 1;\n   for ($i=1; $i<=$n; $i++) {\n       $factorial = $factorial\
    \ * $i;\n   }\n   return $factorial;\n}\n\nfunction candidate(...$args) {\n  \
    \  return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfi2558hx.php:23\n\
    Stack trace:\n#0 /tmp/tmpfi2558hx.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpfi2558hx.php\
    \ on line 23\n"
  timestamp: 1659978822
- exit_code: 0
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ if ($n === 0) {\n    return 1;\n  } else {\n    $product = 1;\n    for ($i =\
    \ 1; $i <= $n; $i++) {\n      $product *= $i;\n    }\n    return $product * special_factorial($n\
    \ - 1);\n  }\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \  $fact = 1;\n   for ($i = 1; $i <= $n; $i++) {\n       $fact *= $i;\n   }\n\
    \   return $fact * special_factorial($n - 1);\n}\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    262144 bytes) in /tmp/tmpa7zg7o6k.php on line 15

    '
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n === 0) {\n        return 1;\n    }\n    return factorial($n) * special_factorial($n\
    \ - 1);\n}\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmpkef3f7me.php:14\nStack trace:\n#0 /tmp/tmpkef3f7me.php(17): special_factorial(4)\n\
    #1 /tmp/tmpkef3f7me.php(21): candidate(4)\n#2 /tmp/tmpkef3f7me.php(27): test()\n\
    #3 {main}\n  thrown in /tmp/tmpkef3f7me.php on line 14\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   // Write your code here\n\n    $factorial = 1;\n    for ($i = $n; $i > 0;\
    \ $i--) {\n        $factorial *= $i;\n    }\n\n    for ($i = $n - 1; $i > 0; $i--)\
    \ {\n        $factorial *= $i;\n    }\n\n    for ($i = $n - 2; $i > 0; $i--) {\n\
    \        $factorial *= $i;\n    }\n\n    return $factorial;\n}\n\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpziaua3mr.php:35\n\
    Stack trace:\n#0 /tmp/tmpziaua3mr.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpziaua3mr.php\
    \ on line 35\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n\t\
    $sum = 1;\n\tfor ($i = 1; $i <= $n; $i++) {\n\t\t$sum *= $i;\n\t}\n\tfor ($i =\
    \ 1; $i <= $n - 1; $i++) {\n\t\t$sum *= $i;\n\t}\n\tfor ($i = 1; $i <= $n - 2;\
    \ $i++) {\n\t\t$sum *= $i;\n\t}\n\treturn $sum;\n}\n\necho \"The special factorial\
    \ of 4 is \" . special_factorial(4) . \"\\n\";\necho \"The special factorial of\
    \ 5 is \" . special_factorial(5) . \"\\n\";\necho \"The special factorial of 6\
    \ is \" . special_factorial(6) . \"\\n\";\necho \"The special factorial of 7 is\
    \ \" . special_factorial(7) . \"\\n\";\necho \"The special factorial of 8 is \"\
    \ . special_factorial(8) . \"\\n\";\necho \"The special factorial of 9 is \" .\
    \ special_factorial(9) . \"\\n\";\necho \"The special factorial of 10 is \" .\
    \ special_factorial(10) . \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "The special factorial of 4 is 288\nThe special factorial of 5 is 17280\n\
    The special factorial of 6 is 2073600\nThe special factorial of 7 is 435456000\n\
    The special factorial of 8 is 146313216000\nThe special factorial of 9 is 73741860864000\n\
    The special factorial of 10 is 53094139822080000\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpf1jl93do.php:37\nStack trace:\n#0 /tmp/tmpf1jl93do.php(42):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpf1jl93do.php on line 37\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $result = $n;\n    for ($i = 1; $i < $n; $i++) {\n        $result *= $i;\n\
    \    }\n    return $result;\n}\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpul9breqh.php:22\n\
    Stack trace:\n#0 /tmp/tmpul9breqh.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpul9breqh.php\
    \ on line 22\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $factorial *=\
    \ $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n  \
    \  return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg_q_dt_e.php:23\n\
    Stack trace:\n#0 /tmp/tmpg_q_dt_e.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpg_q_dt_e.php\
    \ on line 23\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $sum = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $sum *= $i;\n    }\n\
    \    for ($i = $n - 1; $i > 0; $i--) {\n        $sum *= $i;\n    }\n    return\
    \ $sum;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp76_zqi0_.php:26\n\
    Stack trace:\n#0 /tmp/tmp76_zqi0_.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp76_zqi0_.php\
    \ on line 26\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ // Your code here\n}\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpptfioddf.php:18\n\
    Stack trace:\n#0 /tmp/tmpptfioddf.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpptfioddf.php\
    \ on line 18\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $result *= $i;\n  }\n  return\
    \ $result;\n}\n\necho special_factorial(4);\nfunction candidate(...$args) {\n\
    \    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_ugmirfy.php:24\n\
    Stack trace:\n#0 /tmp/tmp_ugmirfy.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp_ugmirfy.php\
    \ on line 24\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n\t\
    $result = 1;\n\tfor ($i=1; $i <= $n; $i++) { \n\t\t$result *= factorial($i);\n\
    \t}\n\treturn $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmp3bdongzn.php:13\nStack trace:\n#0 /tmp/tmp3bdongzn.php(19): special_factorial(4)\n\
    #1 /tmp/tmp3bdongzn.php(23): candidate(4)\n#2 /tmp/tmp3bdongzn.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmp3bdongzn.php on line 13\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $total = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $total *= factorial($i);\n\
    \    }\n    return $total;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmpbigejyir.php:13\nStack trace:\n#0 /tmp/tmpbigejyir.php(19): special_factorial(4)\n\
    #1 /tmp/tmpbigejyir.php(23): candidate(4)\n#2 /tmp/tmpbigejyir.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmpbigejyir.php on line 13\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $r = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $r *= $i;\n  }\n  for ($i = $n\
    \ - 1; $i > 0; $i--) {\n    $r *= $i;\n  }\n  for ($i = $n - 2; $i > 0; $i--)\
    \ {\n    $r *= $i;\n  }\n  return $r;\n}\n\nfunction candidate(...$args) {\n \
    \   return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbq9z83d0.php:30\n\
    Stack trace:\n#0 /tmp/tmpbq9z83d0.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpbq9z83d0.php\
    \ on line 30\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n <= 0) {\n        return null;\n    }\n    $result = 1;\n    for ($i\
    \ = $n; $i > 0; $i--) {\n        $result *= $i;\n    }\n    return $result;\n\
    }\n\necho special_factorial(4) . \"\\n\";\necho special_factorial(0) . \"\\n\"\
    ;\necho special_factorial(-3) . \"\\n\";\n\nfunction candidate(...$args) {\n \
    \   return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "24\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7qs7_nbz.php:30\n\
    Stack trace:\n#0 /tmp/tmp7qs7_nbz.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp7qs7_nbz.php\
    \ on line 30\n"
  timestamp: 1659978822
- exit_code: 0
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $brazilian_factorial = 1;\n  while ($n > 0) {\n    $factorial = 1;\n    for\
    \ ($i = 1; $i <= $n; $i++) {\n      $factorial *= $i;\n    }\n    $brazilian_factorial\
    \ *= $factorial;\n    $n--;\n  }\n  return $brazilian_factorial;\n}\nprint_r(special_factorial(4));\n\
    function candidate(...$args) {\n    return special_factorial(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '288'
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $arr = [];\n  $times = $n;\n  while ($times > 0) {\n    $arr[] = $times;\n \
    \   $times--;\n  }\n  $result = array_product($arr);\n  return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj0mim2fd.php:25\n\
    Stack trace:\n#0 /tmp/tmpj0mim2fd.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpj0mim2fd.php\
    \ on line 25\n"
  timestamp: 1659978823
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n \
    \ }\n  for ($i = 1; $i < $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphtgcev5a.php:26\n\
    Stack trace:\n#0 /tmp/tmphtgcev5a.php(32): test()\n#1 {main}\n  thrown in /tmp/tmphtgcev5a.php\
    \ on line 26\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $factorial *=\
    \ $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n  \
    \  return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg_q_dt_e.php:23\n\
    Stack trace:\n#0 /tmp/tmpg_q_dt_e.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpg_q_dt_e.php\
    \ on line 23\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n\t\
    if($n > 0) {\n\t\t$factorial = 1;\n\t\tfor($i=1; $i<=$n; $i++) {\n\t\t\t$factorial\
    \ *= $i;\n\t\t}\n\t\treturn $factorial;\n\t}\n}\n\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6fy1ylma.php:25\n\
    Stack trace:\n#0 /tmp/tmp6fy1ylma.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp6fy1ylma.php\
    \ on line 25\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $result *= $i;\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxthe_b2r.php:23\n\
    Stack trace:\n#0 /tmp/tmpxthe_b2r.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpxthe_b2r.php\
    \ on line 23\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ // Write your code here\n  // To print results to the standard output you can\
    \ use print\n  // Example: print \"Hello world!\";\n  $result = 1;\n  for ($i\
    \ = 1; $i <= $n; $i++) {\n    $result *= $i;\n  }\n  for ($i = $n - 1; $i > 0;\
    \ $i--) {\n    $result *= $i;\n  }\n  return $result;\n}\n\n$handle = fopen (\"\
    php://stdin\",\"r\");\nfscanf($handle,\"%d\",$n);\n$result = special_factorial($n);\n\
    echo $result . \"\\n\";\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphhusow1w.php:34\n\
    Stack trace:\n#0 /tmp/tmphhusow1w.php(40): test()\n#1 {main}\n  thrown in /tmp/tmphhusow1w.php\
    \ on line 34\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $total = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $total *= factorial($i);\n\
    \    }\n    return $total;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmpbigejyir.php:13\nStack trace:\n#0 /tmp/tmpbigejyir.php(19): special_factorial(4)\n\
    #1 /tmp/tmpbigejyir.php(23): candidate(4)\n#2 /tmp/tmpbigejyir.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmpbigejyir.php on line 13\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n\n\
    }\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplvjnaqvp.php:18\n\
    Stack trace:\n#0 /tmp/tmplvjnaqvp.php(24): test()\n#1 {main}\n  thrown in /tmp/tmplvjnaqvp.php\
    \ on line 18\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $result = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $result *= $i;\n\
    \    }\n    return $result;\n}\n\n$n = 4;\n$result = special_factorial($n);\n\
    echo $result;\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu8te2st3.php:26\n\
    Stack trace:\n#0 /tmp/tmpu8te2st3.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpu8te2st3.php\
    \ on line 26\n"
  timestamp: 1659978823
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $factorial *=\
    \ $i;\n    }\n    return $factorial;\n}\n\n$result = special_factorial(4);\necho\
    \ $result . \"\\n\";\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "24\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoc9kl3tf.php:25\n\
    Stack trace:\n#0 /tmp/tmpoc9kl3tf.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpoc9kl3tf.php\
    \ on line 25\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n\t\
    $factorial = 1;\n\tfor ($i = $n; $i > 0; $i--) {\n\t\t$factorial *= $i;\n\t}\n\
    \tfor ($i = $n-1; $i > 0; $i--) {\n\t\t$factorial *= $i;\n\t}\n\tfor ($i = $n-2;\
    \ $i > 0; $i--) {\n\t\t$factorial *= $i;\n\t}\n\treturn $factorial;\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxnk4vwf1.php:30\n\
    Stack trace:\n#0 /tmp/tmpxnk4vwf1.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpxnk4vwf1.php\
    \ on line 30\n"
  timestamp: 1659978823
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *=\
    \ $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n  \
    \  return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjvx6rhs6.php:23\n\
    Stack trace:\n#0 /tmp/tmpjvx6rhs6.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpjvx6rhs6.php\
    \ on line 23\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = [];\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial[] = $i;\n\
    \  }\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial[] = $i;\n  }\n  for ($i\
    \ = 1; $i <= $n - 2; $i++) {\n    $factorial[] = $i;\n  }\n  return array_product($factorial);\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8d6czjy1.php:29\n\
    Stack trace:\n#0 /tmp/tmp8d6czjy1.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp8d6czjy1.php\
    \ on line 29\n"
  timestamp: 1659978822
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $result = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $result *= factorial($i);\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmpi8h384vi.php:13\nStack trace:\n#0 /tmp/tmpi8h384vi.php(19): special_factorial(4)\n\
    #1 /tmp/tmpi8h384vi.php(23): candidate(4)\n#2 /tmp/tmpi8h384vi.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmpi8h384vi.php on line 13\n"
  timestamp: 1659978823
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $sum = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $sum *= $i;\n  }\n  for ($i\
    \ = $n - 1; $i > 0; $i--) {\n    $sum *= $i;\n  }\n  for ($i = $n - 2; $i > 0;\
    \ $i--) {\n    $sum *= $i;\n  }\n  return $sum;\n}\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9w4wrq6h.php:29\n\
    Stack trace:\n#0 /tmp/tmp9w4wrq6h.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp9w4wrq6h.php\
    \ on line 29\n"
  timestamp: 1659978823
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n\t\
    if($n == 0) return 1;\n\tfor($i = 1; $i <= $n; $i++) {\n\t\t$factorial *= $i;\n\
    \t}\n\treturn $factorial;\n}\n\necho special_factorial(4);\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $factorial in /tmp/tmp3j8fe1pm.php on line\
    \ 13\n0\nWarning: Undefined variable $factorial in /tmp/tmp3j8fe1pm.php on line\
    \ 13\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3j8fe1pm.php:24\n\
    Stack trace:\n#0 /tmp/tmp3j8fe1pm.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp3j8fe1pm.php\
    \ on line 24\n"
  timestamp: 1659978823
