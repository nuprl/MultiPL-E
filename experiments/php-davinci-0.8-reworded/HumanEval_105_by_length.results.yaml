language: php
name: HumanEval_105_by_length
results:
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if(count($arr) > 0) {\n    $word_array = ['One', 'Two',\
    \ 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'];\n    $final_array\
    \ = [];\n    $new_array = [];\n    foreach($arr as $item) {\n      if($item >\
    \ 0 && $item < 10) {\n        $new_array[] = $item;\n      }\n    }\n    sort($new_array);\n\
    \    $reverse_array = array_reverse($new_array);\n    foreach($reverse_array as\
    \ $item) {\n      foreach($word_array as $key => $word) {\n        if($item ==\
    \ $key + 1) {\n          $final_array[] = $word;\n        }\n      }\n    }\n\
    \    return $final_array;\n  } else {\n    return $arr;\n  }\n}\n\n$test = by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3));\nvar_dump($test);\nfunction candidate(...$args) {\n \
    \   return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "array(8) {\n  [0]=>\n  string(5) \"Eight\"\n  [1]=>\n  string(4) \"Five\"\
    \n  [2]=>\n  string(4) \"Four\"\n  [3]=>\n  string(5) \"Three\"\n  [4]=>\n  string(3)\
    \ \"Two\"\n  [5]=>\n  string(3) \"Two\"\n  [6]=>\n  string(3) \"One\"\n  [7]=>\n\
    \  string(3) \"One\"\n}\n"
  timestamp: 1659824386
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n\t$arr = array_filter($arr, function($x) { return $x > 0\
    \ && $x < 10; });\n\tif (empty($arr)) {\n\t\treturn array();\n\t}\n\tsort($arr);\n\
    \t$arr = array_reverse($arr);\n\t$nums = array(\"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\");\n\tforeach ($arr as\
    \ &$x) {\n\t\t$x = $nums[$x - 1];\n\t}\n\treturn $arr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824386
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n\t$arr = sort_length($arr);\n\t$n_arr = array();\n\t$strs\
    \ = array(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\");\n\tforeach ($arr as $key => $value) {\n\t\tif (in_array($value,\
    \ $strs)) {\n\t\t\tarray_push($n_arr, $value);\n\t\t}\n\t}\n\treturn $n_arr;\n\
    }\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sort_length()\
    \ in /tmp/tmp3_en5n50.php:15\nStack trace:\n#0 /tmp/tmp3_en5n50.php(27): by_length(Array)\n\
    #1 /tmp/tmp3_en5n50.php(31): candidate(Array)\n#2 /tmp/tmp3_en5n50.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmp3_en5n50.php on line 15\n"
  timestamp: 1659824386
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n\tif (!is_array($arr)) return array();\n\t$out = array();\n\
    \tforeach ($arr as $el) {\n\t\tif (is_numeric($el) && $el >= 1 && $el <= 9) {\n\
    \t\t\t$out[] = $el;\n\t\t}\n\t}\n\tusort($out, function($a, $b) {\n\t\treturn\
    \ $a - $b;\n\t});\n\t$out = array_reverse($out);\n\t$out = array_map(function($el)\
    \ {\n\t\tswitch ($el) {\n\t\t\tcase 1: return 'One';\n\t\t\tcase 2: return 'Two';\n\
    \t\t\tcase 3: return 'Three';\n\t\t\tcase 4: return 'Four';\n\t\t\tcase 5: return\
    \ 'Five';\n\t\t\tcase 6: return 'Six';\n\t\t\tcase 7: return 'Seven';\n\t\t\t\
    case 8: return 'Eight';\n\t\t\tcase 9: return 'Nine';\n\t\t}\n\t}, $out);\n\t\
    return $out;\n}\n\nassert(by_length(array(2, 1, 1, 4, 5, 8, 2, 3)) == array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"));\n\
    assert(by_length(array()) == array());\nassert(by_length(array(1, -1, 55)) ==\
    \ array(\"One\"));\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824386
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0slybv7u.php:21\n\
    Stack trace:\n#0 /tmp/tmp0slybv7u.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp0slybv7u.php\
    \ on line 21\n"
  timestamp: 1659824386
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n\t$numbers = array();\n\t$digits = array();\n\t$digits_names\
    \ = array();\n\tforeach ($arr as $key => $value) {\n\t\tif ($value >= 1 && $value\
    \ <= 9) {\n\t\t\t$numbers[] = $value;\n\t\t}\n\t}\n\t$digits = array_reverse($numbers);\n\
    \tforeach ($digits as $key => $value) {\n\t\tswitch ($value) {\n\t\t\tcase 1:\n\
    \t\t\t\t$digits_names[] = \"One\";\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\t$digits_names[]\
    \ = \"Two\";\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\t$digits_names[] = \"Three\"\
    ;\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\t$digits_names[] = \"Four\";\n\t\t\t\t\
    break;\n\t\t\tcase 5:\n\t\t\t\t$digits_names[] = \"Five\";\n\t\t\t\tbreak;\n\t\
    \t\tcase 6:\n\t\t\t\t$digits_names[] = \"Six\";\n\t\t\t\tbreak;\n\t\t\tcase 7:\n\
    \t\t\t\t$digits_names[] = \"Seven\";\n\t\t\t\tbreak;\n\t\t\tcase 8:\n\t\t\t\t\
    $digits_names[] = \"Eight\";\n\t\t\t\tbreak;\n\t\t\tcase 9:\n\t\t\t\t$digits_names[]\
    \ = \"Nine\";\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn $digits_names;\n}\nprint_r(by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)));\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Three\n    [1] => Two\n    [2] => Eight\n    [3] =>\
    \ Five\n    [4] => Four\n    [5] => One\n    [6] => One\n    [7] => Two\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp3wtxv0ae.php:63\nStack\
    \ trace:\n#0 /tmp/tmp3wtxv0ae.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp3wtxv0ae.php\
    \ on line 63\n"
  timestamp: 1659824386
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n    $numbers = array(\n        1 => \"One\",\n        2 =>\
    \ \"Two\",\n        3 => \"Three\",\n        4 => \"Four\",\n        5 => \"Five\"\
    ,\n        6 => \"Six\",\n        7 => \"Seven\",\n        8 => \"Eight\",\n \
    \       9 => \"Nine\"\n    );\n    if(empty($arr)) {\n        return array();\n\
    \    } else {\n        $result = array();\n        $arr = sort_by_length($arr);\n\
    \        foreach($arr as $value) {\n            if(array_key_exists($value, $numbers))\
    \ {\n                $result[] = $numbers[$value];\n            }\n        }\n\
    \        return $result;\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sort_by_length()\
    \ in /tmp/tmphcf_upxa.php:30\nStack trace:\n#0 /tmp/tmphcf_upxa.php(41): by_length(Array)\n\
    #1 /tmp/tmphcf_upxa.php(45): candidate(Array)\n#2 /tmp/tmphcf_upxa.php(52): test()\n\
    #3 {main}\n  thrown in /tmp/tmphcf_upxa.php on line 30\n"
  timestamp: 1659824386
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n    $newarr = [];\n    if(!empty($arr)) {\n        foreach($arr\
    \ as $value) {\n            if($value >= 1 && $value <= 9) {\n               \
    \ $newarr[] = $value;\n            }\n        }\n        $reversearr = array_reverse($newarr);\n\
    \        $result = [];\n        foreach($reversearr as $value) {\n           \
    \ if($value == 1) {\n                $result[] = \"One\";\n            } elseif($value\
    \ == 2) {\n                $result[] = \"Two\";\n            } elseif($value ==\
    \ 3) {\n                $result[] = \"Three\";\n            } elseif($value ==\
    \ 4) {\n                $result[] = \"Four\";\n            } elseif($value ==\
    \ 5) {\n                $result[] = \"Five\";\n            } elseif($value ==\
    \ 6) {\n                $result[] = \"Six\";\n            } elseif($value == 7)\
    \ {\n                $result[] = \"Seven\";\n            } elseif($value == 8)\
    \ {\n                $result[] = \"Eight\";\n            } elseif($value == 9)\
    \ {\n                $result[] = \"Nine\";\n            }\n        }\n       \
    \ return $result;\n    } else {\n        return $newarr;\n    }\n}\nprint_r(by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)));\nprint_r(by_length(array()));\nprint_r(by_length(array(1,\
    \ -1, 55)));\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Three\n    [1] => Two\n    [2] => Eight\n    [3] =>\
    \ Five\n    [4] => Four\n    [5] => One\n    [6] => One\n    [7] => Two\n)\nArray\n\
    (\n)\nArray\n(\n    [0] => One\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpk33td5t2.php:58\nStack trace:\n#0 /tmp/tmpk33td5t2.php(65): test()\n\
    #1 {main}\n  thrown in /tmp/tmpk33td5t2.php on line 58\n"
  timestamp: 1659824386
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n\t$arr = merge_sort($arr);\n\t$arr = array_filter($arr, \"\
    sort_callback\");\n\t$arr = array_reverse($arr);\n\t$res = array();\n\tfor ($i\
    \ = 0; $i < count($arr); $i++) {\n\t\tswitch ($arr[$i]) {\n\t\t\tcase 1:\n\t\t\
    \t\t$res[] = \"One\";\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\t$res[] = \"Two\"\
    ;\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\t$res[] = \"Three\";\n\t\t\t\tbreak;\n\
    \t\t\tcase 4:\n\t\t\t\t$res[] = \"Four\";\n\t\t\t\tbreak;\n\t\t\tcase 5:\n\t\t\
    \t\t$res[] = \"Five\";\n\t\t\t\tbreak;\n\t\t\tcase 6:\n\t\t\t\t$res[] = \"Six\"\
    ;\n\t\t\t\tbreak;\n\t\t\tcase 7:\n\t\t\t\t$res[] = \"Seven\";\n\t\t\t\tbreak;\n\
    \t\t\tcase 8:\n\t\t\t\t$res[] = \"Eight\";\n\t\t\t\tbreak;\n\t\t\tcase 9:\n\t\t\
    \t\t$res[] = \"Nine\";\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn $res;\n}\n\nfunction\
    \ candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function merge_sort()\
    \ in /tmp/tmp7inxit8p.php:15\nStack trace:\n#0 /tmp/tmp7inxit8p.php(54): by_length(Array)\n\
    #1 /tmp/tmp7inxit8p.php(58): candidate(Array)\n#2 /tmp/tmp7inxit8p.php(65): test()\n\
    #3 {main}\n  thrown in /tmp/tmp7inxit8p.php on line 15\n"
  timestamp: 1659824386
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n\tif(count($arr) === 0) {\n\t\treturn array();\n\t}\n\t$digits\
    \ = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n\t$result = array();\n\tforeach($arr as\
    \ $item) {\n\t\tif(in_array($item, $digits)) {\n\t\t\t$result[] = $item;\n\t\t\
    }\n\t}\n\tsort($result);\n\t$result = array_reverse($result);\n\tforeach($result\
    \ as $index => $item) {\n\t\tswitch($item) {\n\t\t\tcase 1:\n\t\t\t\t$result[$index]\
    \ = \"One\";\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\t$result[$index] = \"Two\"\
    ;\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\t$result[$index] = \"Three\";\n\t\t\t\
    \tbreak;\n\t\t\tcase 4:\n\t\t\t\t$result[$index] = \"Four\";\n\t\t\t\tbreak;\n\
    \t\t\tcase 5:\n\t\t\t\t$result[$index] = \"Five\";\n\t\t\t\tbreak;\n\t\t\tcase\
    \ 6:\n\t\t\t\t$result[$index] = \"Six\";\n\t\t\t\tbreak;\n\t\t\tcase 7:\n\t\t\t\
    \t$result[$index] = \"Seven\";\n\t\t\t\tbreak;\n\t\t\tcase 8:\n\t\t\t\t$result[$index]\
    \ = \"Eight\";\n\t\t\t\tbreak;\n\t\t\tcase 9:\n\t\t\t\t$result[$index] = \"Nine\"\
    ;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn $result;\n}\n\nvar_dump(by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)));\nvar_dump(by_length(array()));\nvar_dump(by_length(array(1,\
    \ -1, 55)));\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "array(8) {\n  [0]=>\n  string(5) \"Eight\"\n  [1]=>\n  string(4) \"Five\"\
    \n  [2]=>\n  string(4) \"Four\"\n  [3]=>\n  string(5) \"Three\"\n  [4]=>\n  string(3)\
    \ \"Two\"\n  [5]=>\n  string(3) \"Two\"\n  [6]=>\n  string(3) \"One\"\n  [7]=>\n\
    \  string(3) \"One\"\n}\narray(0) {\n}\narray(1) {\n  [0]=>\n  string(3) \"One\"\
    \n}\n"
  timestamp: 1659824386
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n\t$numberArr = array();\n\t$numNames = array(\n\t\t1 => \"\
    One\",\n\t\t2 => \"Two\",\n\t\t3 => \"Three\",\n\t\t4 => \"Four\",\n\t\t5 => \"\
    Five\",\n\t\t6 => \"Six\",\n\t\t7 => \"Seven\",\n\t\t8 => \"Eight\",\n\t\t9 =>\
    \ \"Nine\"\n\t);\n\tforeach ($arr as $value) {\n\t\tif (($value >= 1) && ($value\
    \ <= 9)) {\n\t\t\t$numberArr[] = $value;\n\t\t}\n\t}\n\trsort($numberArr);\n\t\
    foreach ($numberArr as $key => $value) {\n\t\t$numberArr[$key] = $numNames[$value];\n\
    \t}\n\treturn $numberArr;\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824386
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $new_arr = [];\n  foreach ($arr as $key => $value) {\n\
    \    if ($value > 0 && $value < 10) {\n      $new_arr[] = $value;\n    }\n  }\n\
    \  sort($new_arr);\n  $new_arr = array_reverse($new_arr);\n  $result = [];\n \
    \ foreach ($new_arr as $value) {\n    switch ($value) {\n      case 1:\n     \
    \   $result[] = \"One\";\n        break;\n      case 2:\n        $result[] = \"\
    Two\";\n        break;\n      case 3:\n        $result[] = \"Three\";\n      \
    \  break;\n      case 4:\n        $result[] = \"Four\";\n        break;\n    \
    \  case 5:\n        $result[] = \"Five\";\n        break;\n      case 6:\n   \
    \     $result[] = \"Six\";\n        break;\n      case 7:\n        $result[] =\
    \ \"Seven\";\n        break;\n      case 8:\n        $result[] = \"Eight\";\n\
    \        break;\n      case 9:\n        $result[] = \"Nine\";\n        break;\n\
    \    }\n  }\n  return $result;\n}\n\n$arr = array(2, 1, 1, 4, 5, 8, 2, 3);\nprint_r(by_length($arr));\n\
    function candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Eight\n    [1] => Five\n    [2] => Four\n    [3] =>\
    \ Three\n    [4] => Two\n    [5] => Two\n    [6] => One\n    [7] => One\n)\n"
  timestamp: 1659824386
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n    $words = [\"Zero\", \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    $arr = array_filter($arr,\
    \ function($item) {\n        return $item > 0 && $item < 10;\n    });\n    $arr\
    \ = array_map(function($item) use ($words) {\n        return $words[$item];\n\
    \    }, $arr);\n    rsort($arr);\n    return $arr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6380v1in.php:31\n\
    Stack trace:\n#0 /tmp/tmp6380v1in.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp6380v1in.php\
    \ on line 31\n"
  timestamp: 1659824386
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n\t$arr = array_filter($arr, function($item) { return $item\
    \ > 0 && $item < 10; });\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr\
    \ = array_map(function($item) {\n\t\t$values = array(\n\t\t\t1 => \"One\",\n\t\
    \t\t2 => \"Two\",\n\t\t\t3 => \"Three\",\n\t\t\t4 => \"Four\",\n\t\t\t5 => \"\
    Five\",\n\t\t\t6 => \"Six\",\n\t\t\t7 => \"Seven\",\n\t\t\t8 => \"Eight\",\n\t\
    \t\t9 => \"Nine\"\n\t\t);\n\t\treturn $values[$item];\n\t}, $arr);\n\treturn $arr;\n\
    }\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824386
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $hash = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  $sorted = array();\n  foreach ($arr\
    \ as $value) {\n    if ($value < 1 || $value > 9) {\n      continue;\n    }\n\
    \    array_push($sorted, $value);\n  }\n  rsort($sorted);\n  $str_arr = array();\n\
    \  foreach ($sorted as $value) {\n    array_push($str_arr, $hash[$value - 1]);\n\
    \  }\n  return $str_arr;\n}\nprint_r(by_length(array(2, 1, 1, 4, 5, 8, 2, 3)));\n\
    echo \"<br>\";\nprint_r(by_length(array()));\necho \"<br>\";\nprint_r(by_length(array(1,\
    \ -1, 55)));\necho \"<br>\";\necho \"<br>\";\n\nfunction candidate(...$args) {\n\
    \    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Eight\n    [1] => Five\n    [2] => Four\n    [3] =>\
    \ Three\n    [4] => Two\n    [5] => Two\n    [6] => One\n    [7] => One\n)\n<br>Array\n\
    (\n)\n<br>Array\n(\n    [0] => One\n)\n<br><br>"
  timestamp: 1659824386
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n    // Place your code here\n    $arr1 = array();\n    $arr2\
    \ = array();\n    $length=count($arr);\n    for($i=0;$i<$length;$i++){\n     \
    \   if($arr[$i]<=9&&$arr[$i]>=1){\n            array_push($arr1,$arr[$i]);\n \
    \       }\n    }\n    sort($arr1);\n    $length1=count($arr1);\n    for($i=0;$i<$length1;$i++){\n\
    \        array_push($arr2,$arr1[$length1-$i-1]);\n    }\n    for($i=0;$i<$length1;$i++){\n\
    \        switch($arr2[$i]){\n            case 1:\n                $arr2[$i]=\"\
    One\";\n                break;\n            case 2:\n                $arr2[$i]=\"\
    Two\";\n                break;\n            case 3:\n                $arr2[$i]=\"\
    Three\";\n                break;\n            case 4:\n                $arr2[$i]=\"\
    Four\";\n                break;\n            case 5:\n                $arr2[$i]=\"\
    Five\";\n                break;\n            case 6:\n                $arr2[$i]=\"\
    Six\";\n                break;\n            case 7:\n                $arr2[$i]=\"\
    Seven\";\n                break;\n            case 8:\n                $arr2[$i]=\"\
    Eight\";\n                break;\n            case 9:\n                $arr2[$i]=\"\
    Nine\";\n                break;\n        }\n    }\n    return $arr2;\n}\n\n$arr=array(1,\
    \ -1, 55);\nprint_r(by_length($arr));\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => One\n)\n"
  timestamp: 1659824386
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $result = array();\n  $nums = array(\"One\", \"Two\", \"\
    Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\");\n  foreach\
    \ ($arr as $num) {\n    if ($num >= 1 && $num <= 9) {\n      $result[] = $num;\n\
    \    }\n  }\n  sort($result);\n  $result = array_reverse($result);\n  foreach\
    \ ($result as $key => $num) {\n    $result[$key] = $nums[$num - 1];\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824386
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n\t$order = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n\t$reversed\
    \ = array_reverse($order);\n\t$words = array(\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\");\n\t$sorted = array();\n\t\
    foreach ($arr as $number) {\n\t\tif (in_array($number, $order)) {\n\t\t\t$sorted[]\
    \ = $number;\n\t\t}\n\t}\n\tsort($sorted);\n\t$reversed = array_reverse($sorted);\n\
    \t$result = array();\n\tforeach ($reversed as $number) {\n\t\tforeach ($words\
    \ as $index => $word) {\n\t\t\tif ($index == $number - 1) {\n\t\t\t\t$result[]\
    \ = $word;\n\t\t\t}\n\t\t}\n\t}\n\treturn $result;\n}\n\necho var_dump(by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)));\necho var_dump(by_length(array()));\necho var_dump(by_length(array(1,\
    \ -1, 55)));\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "array(8) {\n  [0]=>\n  string(5) \"Eight\"\n  [1]=>\n  string(4) \"Five\"\
    \n  [2]=>\n  string(4) \"Four\"\n  [3]=>\n  string(5) \"Three\"\n  [4]=>\n  string(3)\
    \ \"Two\"\n  [5]=>\n  string(3) \"Two\"\n  [6]=>\n  string(3) \"One\"\n  [7]=>\n\
    \  string(3) \"One\"\n}\narray(0) {\n}\narray(1) {\n  [0]=>\n  string(3) \"One\"\
    \n}\n"
  timestamp: 1659824386
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n\tif(empty($arr)){\n\t\treturn array();\n\t}\n\t$numArr =\
    \ array();\n\t$textArr = array();\n\tfor($i = 0; $i < count($arr); $i++){\n\t\t\
    $num = $arr[$i];\n\t\tif($num > 0 && $num < 10){\n\t\t\tarray_push($numArr, $num);\n\
    \t\t}\n\t}\n\tsort($numArr);\n\t$revNumArr = array_reverse($numArr);\n\tfor($i\
    \ = 0; $i < count($revNumArr); $i++){\n\t\t$num = $revNumArr[$i];\n\t\tswitch($num){\n\
    \t\t\tcase 1:\n\t\t\t\tarray_push($textArr, \"One\");\n\t\t\t\tbreak;\n\t\t\t\
    case 2:\n\t\t\t\tarray_push($textArr, \"Two\");\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\
    \t\t\t\tarray_push($textArr, \"Three\");\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\
    \tarray_push($textArr, \"Four\");\n\t\t\t\tbreak;\n\t\t\tcase 5:\n\t\t\t\tarray_push($textArr,\
    \ \"Five\");\n\t\t\t\tbreak;\n\t\t\tcase 6:\n\t\t\t\tarray_push($textArr, \"Six\"\
    );\n\t\t\t\tbreak;\n\t\t\tcase 7:\n\t\t\t\tarray_push($textArr, \"Seven\");\n\t\
    \t\t\tbreak;\n\t\t\tcase 8:\n\t\t\t\tarray_push($textArr, \"Eight\");\n\t\t\t\t\
    break;\n\t\t\tcase 9:\n\t\t\t\tarray_push($textArr, \"Nine\");\n\t\t\t\tbreak;\n\
    \t\t}\n\t}\n\treturn $textArr;\n}\n\n$nums = array(1, 6, 8, 5, 3, 8, 9, 5, 7,\
    \ 2, 1, 4, 3, 2, 6, 5, 4, 1, 4, 5, 8, 2, 3);\nfunction candidate(...$args) {\n\
    \    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824386
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n    $nums = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    $names = [\"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\"];\n    $numbers = [];\n    $result = [];\n    foreach ($arr as $val)\
    \ {\n        if (in_array($val, $nums)) {\n            $numbers[] = $val;\n  \
    \      }\n    }\n    sort($numbers);\n    $numbers = array_reverse($numbers);\n\
    \    foreach ($numbers as $val) {\n        $pos = array_search($val, $nums);\n\
    \        $result[] = $names[$pos];\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824386
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $one = array(1, \"One\");\n  $two = array(2, \"Two\");\n\
    \  $three = array(3, \"Three\");\n  $four = array(4, \"Four\");\n  $five = array(5,\
    \ \"Five\");\n  $six = array(6, \"Six\");\n  $seven = array(7, \"Seven\");\n \
    \ $eight = array(8, \"Eight\");\n  $nine = array(9, \"Nine\");\n  $numbers = array($one,\
    \ $two, $three, $four, $five, $six, $seven, $eight, $nine);\n  $result = array();\n\
    \  foreach ($arr as $element) {\n    foreach ($numbers as $number) {\n      if\
    \ ($element == $number[0]) {\n        array_push($result, $number[1]);\n     \
    \ }\n    }\n  }\n  $result = array_reverse($result);\n  return $result;\n}\n\n\
    print_r(by_length(array(2, 1, 1, 4, 5, 8, 2, 3)));\nprint_r(by_length(array()));\n\
    print_r(by_length(array(1, -1, 55)));\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Three\n    [1] => Two\n    [2] => Eight\n    [3] =>\
    \ Five\n    [4] => Four\n    [5] => One\n    [6] => One\n    [7] => Two\n)\nArray\n\
    (\n)\nArray\n(\n    [0] => One\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpknfjexuy.php:45\nStack trace:\n#0 /tmp/tmpknfjexuy.php(52): test()\n\
    #1 {main}\n  thrown in /tmp/tmpknfjexuy.php on line 45\n"
  timestamp: 1660028945
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $data = [\n    1 => 'One',\n    2 => 'Two',\n    3 => 'Three',\n\
    \    4 => 'Four',\n    5 => 'Five',\n    6 => 'Six',\n    7 => 'Seven',\n    8\
    \ => 'Eight',\n    9 => 'Nine'\n  ];\n  $res = [];\n  foreach ($arr as $value)\
    \ {\n    if (isset($data[$value])) {\n      $res[] = $data[$value];\n    }\n \
    \ }\n  sort($res);\n  return array_reverse($res);\n}\n\nvar_dump(by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)));\nvar_dump(by_length(array()));\nvar_dump(by_length(array(1,\
    \ -1, 55)));\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(8) {\n  [0]=>\n  string(3) \"Two\"\n  [1]=>\n  string(3) \"Two\"\n\
    \  [2]=>\n  string(5) \"Three\"\n  [3]=>\n  string(3) \"One\"\n  [4]=>\n  string(3)\
    \ \"One\"\n  [5]=>\n  string(4) \"Four\"\n  [6]=>\n  string(4) \"Five\"\n  [7]=>\n\
    \  string(5) \"Eight\"\n}\narray(0) {\n}\narray(1) {\n  [0]=>\n  string(3) \"\
    One\"\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoi892dkn.php:44\n\
    Stack trace:\n#0 /tmp/tmpoi892dkn.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpoi892dkn.php\
    \ on line 44\n"
  timestamp: 1660028945
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n    $arr1 = [];\n    $arr2 = [];\n    $arr3 = [];\n    foreach\
    \ ($arr as $key => $value) {\n        if ($value > 0 && $value < 10) {\n     \
    \       $arr1[] = $value;\n        }\n    }\n    sort($arr1);\n    $arr2 = array_reverse($arr1);\n\
    \    foreach ($arr2 as $key => $value) {\n        if ($value == 1) {\n       \
    \     $arr3[] = \"One\";\n        } elseif ($value == 2) {\n            $arr3[]\
    \ = \"Two\";\n        } elseif ($value == 3) {\n            $arr3[] = \"Three\"\
    ;\n        } elseif ($value == 4) {\n            $arr3[] = \"Four\";\n       \
    \ } elseif ($value == 5) {\n            $arr3[] = \"Five\";\n        } elseif\
    \ ($value == 6) {\n            $arr3[] = \"Six\";\n        } elseif ($value ==\
    \ 7) {\n            $arr3[] = \"Seven\";\n        } elseif ($value == 8) {\n \
    \           $arr3[] = \"Eight\";\n        } elseif ($value == 9) {\n         \
    \   $arr3[] = \"Nine\";\n        }\n    }\n    return $arr3;\n}\n\necho \"<pre>\"\
    ;\nprint_r(by_length(array(2, 1, 1, 4, 5, 8, 2, 3)));\necho \"</pre>\";\n\nfunction\
    \ candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => Eight\n    [1] => Five\n    [2] => Four\n   \
    \ [3] => Three\n    [4] => Two\n    [5] => Two\n    [6] => One\n    [7] => One\n\
    )\n</pre>"
  timestamp: 1660028945
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n    $digits = array(\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\");\n    if (!count($arr)) {\n\
    \        return $arr;\n    }\n    for ($i = 0; $i < count($arr); $i++) {\n   \
    \     if ($arr[$i] < 1 || $arr[$i] > 9) {\n            array_splice($arr, $i,\
    \ 1);\n            $i--;\n        }\n    }\n    sort($arr);\n    $arr = array_reverse($arr);\n\
    \    for ($i = 0; $i < count($arr); $i++) {\n        $arr[$i] = $digits[$arr[$i]\
    \ - 1];\n    }\n    return $arr;\n}\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028945
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $result = [];\n  foreach ($arr as $item) {\n    if ($item\
    \ > 0 && $item < 10) {\n      $result[] = $item;\n    }\n  }\n  sort($result);\n\
    \  $result = array_reverse($result);\n  $output = [];\n  foreach ($result as $item)\
    \ {\n    switch ($item) {\n      case 1:\n        $output[] = \"One\";\n     \
    \   break;\n      case 2:\n        $output[] = \"Two\";\n        break;\n    \
    \  case 3:\n        $output[] = \"Three\";\n        break;\n      case 4:\n  \
    \      $output[] = \"Four\";\n        break;\n      case 5:\n        $output[]\
    \ = \"Five\";\n        break;\n      case 6:\n        $output[] = \"Six\";\n \
    \       break;\n      case 7:\n        $output[] = \"Seven\";\n        break;\n\
    \      case 8:\n        $output[] = \"Eight\";\n        break;\n      case 9:\n\
    \        $output[] = \"Nine\";\n        break;\n    }\n  }\n  return $output;\n\
    }\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028945
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n\t$nums = array_filter($arr, function($num) {\n\t\treturn\
    \ $num > 0 && $num < 10;\n\t});\n\trsort($nums);\n\t$numToName = array(\n\t\t\
    1 => \"One\",\n\t\t2 => \"Two\",\n\t\t3 => \"Three\",\n\t\t4 => \"Four\",\n\t\t\
    5 => \"Five\",\n\t\t6 => \"Six\",\n\t\t7 => \"Seven\",\n\t\t8 => \"Eight\",\n\t\
    \t9 => \"Nine\"\n\t);\n\treturn array_map(function($num) use ($numToName) {\n\t\
    \treturn $numToName[$num];\n\t}, $nums);\n}\n\necho \"by_length(array(2, 1, 1,\
    \ 4, 5, 8, 2, 3)) = [\" . join(\", \", by_length(array(2, 1, 1, 4, 5, 8, 2, 3)))\
    \ . \"]\\n\";\necho \"by_length(array()) = [\" . join(\", \", by_length(array()))\
    \ . \"]\\n\";\necho \"by_length(array(1, -1, 55)) = [\" . join(\", \", by_length(array(1,\
    \ -1, 55))) . \"]\\n\";\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'by_length(array(2, 1, 1, 4, 5, 8, 2, 3)) = [Eight, Five, Four, Three, Two,
    Two, One, One]

    by_length(array()) = []

    by_length(array(1, -1, 55)) = [One]

    '
  timestamp: 1660028945
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $arr = bubble_sort($arr);\n  $arr = array_reverse($arr);\n\
    \  $arr = replace_numbers($arr);\n  return $arr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function bubble_sort()\
    \ in /tmp/tmpn8lrf383.php:15\nStack trace:\n#0 /tmp/tmpn8lrf383.php(22): by_length(Array)\n\
    #1 /tmp/tmpn8lrf383.php(26): candidate(Array)\n#2 /tmp/tmpn8lrf383.php(33): test()\n\
    #3 {main}\n  thrown in /tmp/tmpn8lrf383.php on line 15\n"
  timestamp: 1660028945
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (count($arr) == 0) {\n    return $arr;\n  }\n  $numbers\
    \ = array(1 => \"One\", 2 => \"Two\", 3 => \"Three\", 4 => \"Four\", 5 => \"Five\"\
    , 6 => \"Six\", 7 => \"Seven\", 8 => \"Eight\", 9 => \"Nine\");\n  foreach ($arr\
    \ as $num) {\n    if (isset($numbers[$num])) {\n      $result[] = $numbers[$num];\n\
    \    }\n  }\n  return array_reverse($result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk9bbxb_7.php:32\n\
    Stack trace:\n#0 /tmp/tmpk9bbxb_7.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpk9bbxb_7.php\
    \ on line 32\n"
  timestamp: 1660028945
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (count($arr) == 0) return array();\n  $translate = array(1\
    \ => \"One\", 2 => \"Two\", 3 => \"Three\", 4 => \"Four\", 5 => \"Five\", 6 =>\
    \ \"Six\", 7 => \"Seven\", 8 => \"Eight\", 9 => \"Nine\");\n  $result = array();\n\
    \  foreach ($arr as $i) {\n    if ($i < 1 || $i > 9) continue;\n    $result[]\
    \ = $i;\n  }\n  rsort($result);\n  foreach ($result as $i => $v) {\n    $result[$i]\
    \ = $translate[$v];\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028945
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n\tif (!is_array($arr)) {\n\t\treturn null;\n\t}\n\t$result\
    \ = array();\n\tfor ($i = 0; $i < count($arr); $i++) {\n\t\tif ($arr[$i] > 0 &&\
    \ $arr[$i] < 10) {\n\t\t\t$result[] = $arr[$i];\n\t\t}\n\t}\n\tsort($result);\n\
    \t$result = array_reverse($result);\n\tfor ($i = 0; $i < count($result); $i++)\
    \ {\n\t\tswitch ($result[$i]) {\n\t\t\tcase 1:\n\t\t\t\t$result[$i] = \"One\"\
    ;\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\t$result[$i] = \"Two\";\n\t\t\t\tbreak;\n\
    \t\t\tcase 3:\n\t\t\t\t$result[$i] = \"Three\";\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\
    \t\t\t\t$result[$i] = \"Four\";\n\t\t\t\tbreak;\n\t\t\tcase 5:\n\t\t\t\t$result[$i]\
    \ = \"Five\";\n\t\t\t\tbreak;\n\t\t\tcase 6:\n\t\t\t\t$result[$i] = \"Six\";\n\
    \t\t\t\tbreak;\n\t\t\tcase 7:\n\t\t\t\t$result[$i] = \"Seven\";\n\t\t\t\tbreak;\n\
    \t\t\tcase 8:\n\t\t\t\t$result[$i] = \"Eight\";\n\t\t\t\tbreak;\n\t\t\tcase 9:\n\
    \t\t\t\t$result[$i] = \"Nine\";\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn $result;\n\
    }\n\n$test = by_length(array(2, 1, 1, 4, 5, 8, 2, 3));\nprint_r($test);\nfunction\
    \ candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Eight\n    [1] => Five\n    [2] => Four\n    [3] =>\
    \ Three\n    [4] => Two\n    [5] => Two\n    [6] => One\n    [7] => One\n)\n"
  timestamp: 1660028945
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n    $sorted = array();\n    for ($i = 0; $i < count($arr);\
    \ $i++) {\n        if ($arr[$i] > 0 && $arr[$i] < 10) {\n            array_push($sorted,\
    \ $arr[$i]);\n        }\n    }\n    sort($sorted);\n    rsort($sorted);\n    $names\
    \ = array(\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\");\n    for ($i = 0; $i < count($sorted); $i++) {\n     \
    \   $sorted[$i] = $names[$sorted[$i]];\n    }\n    return $sorted;\n}\nfunction\
    \ candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028945
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n    $newArr = array();\n    $result = array();\n    foreach\
    \ ($arr as $el) {\n        if ($el > 0 && $el < 10) {\n            $newArr[] =\
    \ $el;\n        }\n    }\n    rsort($newArr);\n    foreach ($newArr as $number)\
    \ {\n        switch ($number) {\n            case 1:\n                $result[]\
    \ = \"One\";\n                break;\n            case 2:\n                $result[]\
    \ = \"Two\";\n                break;\n            case 3:\n                $result[]\
    \ = \"Three\";\n                break;\n            case 4:\n                $result[]\
    \ = \"Four\";\n                break;\n            case 5:\n                $result[]\
    \ = \"Five\";\n                break;\n            case 6:\n                $result[]\
    \ = \"Six\";\n                break;\n            case 7:\n                $result[]\
    \ = \"Seven\";\n                break;\n            case 8:\n                $result[]\
    \ = \"Eight\";\n                break;\n            case 9:\n                $result[]\
    \ = \"Nine\";\n                break;\n        }\n    }\n    return $result;\n\
    }\nprint_r(by_length(array(2, 1, 1, 4, 5, 8, 2, 3)));\necho '<br/>';\nprint_r(by_length(array()));\n\
    echo '<br/>';\nprint_r(by_length(array(1, -1, 55)));\necho '<br/>';\n\nfunction\
    \ candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Eight\n    [1] => Five\n    [2] => Four\n    [3] =>\
    \ Three\n    [4] => Two\n    [5] => Two\n    [6] => One\n    [7] => One\n)\n<br/>Array\n\
    (\n)\n<br/>Array\n(\n    [0] => One\n)\n<br/>"
  timestamp: 1660028945
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $arr = array_filter($arr, function($num) {\n    return\
    \ ($num >= 1 && $num <= 9);\n  });\n  usort($arr, function($a, $b) {\n    return\
    \ $a - $b;\n  });\n  $reverse = array_reverse($arr);\n  return array_map(function($num)\
    \ {\n    $digit_name = array(\n      1 => \"One\",\n      2 => \"Two\",\n    \
    \  3 => \"Three\",\n      4 => \"Four\",\n      5 => \"Five\",\n      6 => \"\
    Six\",\n      7 => \"Seven\",\n      8 => \"Eight\",\n      9 => \"Nine\"\n  \
    \  );\n    return $digit_name[$num];\n  }, $reverse);\n}\n$a = array(2, 1, 1,\
    \ 4, 5, 8, 2, 3);\n$result = by_length($a);\nvar_dump($result);\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "array(8) {\n  [0]=>\n  string(5) \"Eight\"\n  [1]=>\n  string(4) \"Five\"\
    \n  [2]=>\n  string(4) \"Four\"\n  [3]=>\n  string(5) \"Three\"\n  [4]=>\n  string(3)\
    \ \"Two\"\n  [5]=>\n  string(3) \"Two\"\n  [6]=>\n  string(3) \"One\"\n  [7]=>\n\
    \  string(3) \"One\"\n}\n"
  timestamp: 1660028945
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n    // your code here\n    $arr_length = count($arr);\n \
    \   $i = 0;\n    while ($i < $arr_length) {\n        if ($arr[$i] > 9 || $arr[$i]\
    \ < 1) {\n            unset($arr[$i]);\n        }\n        $i++;\n    }\n    sort($arr);\n\
    \    $i = 0;\n    while ($i < $arr_length) {\n        switch ($arr[$i]) {\n  \
    \          case 1:\n                $arr[$i] = \"One\";\n                break;\n\
    \            case 2:\n                $arr[$i] = \"Two\";\n                break;\n\
    \            case 3:\n                $arr[$i] = \"Three\";\n                break;\n\
    \            case 4:\n                $arr[$i] = \"Four\";\n                break;\n\
    \            case 5:\n                $arr[$i] = \"Five\";\n                break;\n\
    \            case 6:\n                $arr[$i] = \"Six\";\n                break;\n\
    \            case 7:\n                $arr[$i] = \"Seven\";\n                break;\n\
    \            case 8:\n                $arr[$i] = \"Eight\";\n                break;\n\
    \            case 9:\n                $arr[$i] = \"Nine\";\n                break;\n\
    \        }\n        $i++;\n    }\n    $arr = array_reverse($arr);\n    return\
    \ $arr;\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Warning: Undefined array key 1 in /tmp/tmpfyvzcwto.php on line 27


    Warning: Undefined array key 2 in /tmp/tmpfyvzcwto.php on line 27


    Warning: Undefined array key 3 in /tmp/tmpfyvzcwto.php on line 27

    '
  timestamp: 1660028945
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n    $result = array();\n    $numbers = array(1 => \"One\"\
    , 2 => \"Two\", 3 => \"Three\", 4 => \"Four\", 5 => \"Five\", 6 => \"Six\", 7\
    \ => \"Seven\", 8 => \"Eight\", 9 => \"Nine\");\n    $sort_arr = array();\n  \
    \  foreach ($arr as $value) {\n        if ($value >= 1 && $value <= 9) {\n   \
    \         $sort_arr[] = $value;\n        }\n    }\n    sort($sort_arr);\n    foreach\
    \ ($sort_arr as $key => $value) {\n        $result[] = $numbers[$value];\n   \
    \ }\n    return array_reverse($result);\n}\n\n$a = array(2, 1, 1, 4, 5, 8, 2,\
    \ 3);\n$a = by_length($a);\nvar_dump($a);\n\nfunction candidate(...$args) {\n\
    \    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "array(8) {\n  [0]=>\n  string(5) \"Eight\"\n  [1]=>\n  string(4) \"Five\"\
    \n  [2]=>\n  string(4) \"Four\"\n  [3]=>\n  string(5) \"Three\"\n  [4]=>\n  string(3)\
    \ \"Two\"\n  [5]=>\n  string(3) \"Two\"\n  [6]=>\n  string(3) \"One\"\n  [7]=>\n\
    \  string(3) \"One\"\n}\n"
  timestamp: 1660028945
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  // Write your code here...\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkj6l65o8.php:23\n\
    Stack trace:\n#0 /tmp/tmpkj6l65o8.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpkj6l65o8.php\
    \ on line 23\n"
  timestamp: 1660028945
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  return array_map( function($digit) {\n    return array(\"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\")[$digit - 1];\n  }, array_reverse(array_filter($arr, function($digit)\
    \ {\n    return $digit >= 1 && $digit <= 9;\n  })));\n}\n\n$arr = array(2, 1,\
    \ 1, 4, 5, 8, 2, 3);\nprint_r(by_length($arr));\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Three\n    [1] => Two\n    [2] => Eight\n    [3] =>\
    \ Five\n    [4] => Four\n    [5] => One\n    [6] => One\n    [7] => Two\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp7gwwm68h.php:29\nStack\
    \ trace:\n#0 /tmp/tmp7gwwm68h.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp7gwwm68h.php\
    \ on line 29\n"
  timestamp: 1660028945
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n\t$nums = array(\n\t\t1 => \"One\",\n\t\t2 => \"Two\",\n\t\
    \t3 => \"Three\",\n\t\t4 => \"Four\",\n\t\t5 => \"Five\",\n\t\t6 => \"Six\",\n\
    \t\t7 => \"Seven\",\n\t\t8 => \"Eight\",\n\t\t9 => \"Nine\"\n\t);\n\t$sorted =\
    \ array();\n\tforeach ($arr as $num) {\n\t\tif (array_key_exists($num, $nums))\
    \ {\n\t\t\t$sorted[] = $num;\n\t\t}\n\t}\n\trsort($sorted);\n\t$result = array();\n\
    \tforeach ($sorted as $num) {\n\t\t$result[] = $nums[$num];\n\t}\n\treturn $result;\n\
    }\n\n$result = by_length(array(\n    2, 1, 1, 4, 5, 8, 2, 3\n));\nvar_dump($result);\n\
    function candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "array(8) {\n  [0]=>\n  string(5) \"Eight\"\n  [1]=>\n  string(4) \"Five\"\
    \n  [2]=>\n  string(4) \"Four\"\n  [3]=>\n  string(5) \"Three\"\n  [4]=>\n  string(3)\
    \ \"Two\"\n  [5]=>\n  string(3) \"Two\"\n  [6]=>\n  string(3) \"One\"\n  [7]=>\n\
    \  string(3) \"One\"\n}\n"
  timestamp: 1660028945
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $numbers = array(\n    1 => \"One\",\n    2 => \"Two\"\
    ,\n    3 => \"Three\",\n    4 => \"Four\",\n    5 => \"Five\",\n    6 => \"Six\"\
    ,\n    7 => \"Seven\",\n    8 => \"Eight\",\n    9 => \"Nine\"\n  );\n  $result\
    \ = array();\n  foreach ($arr as $elem) {\n    if ($elem >= 1 && $elem <= 9) {\n\
    \      $result[] = $elem;\n    }\n  }\n  sort($result);\n  $result = array_reverse($result);\n\
    \  $result = array_map(function($n) use ($numbers) {\n    return $numbers[$n];\n\
    \  }, $result);\n  return $result;\n}\n\n$test_cases = array(\n  array(\n    'input'\
    \ => array(2, 1, 1, 4, 5, 8, 2, 3),\n    'expected' => array(\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")\n  ),\n  array(\n \
    \   'input' => array(),\n    'expected' => array()\n  ),\n  array(\n    'input'\
    \ => array(1, -1, 55),\n    'expected' => array(\"One\")\n  )\n);\n\nforeach ($test_cases\
    \ as $case) {\n  $input = $case['input'];\n  $expected = $case['expected'];\n\
    \  $output = by_length($input);\n  if ($output == $expected) {\n    echo \"PASS\\\
    n\";\n  } else {\n    echo \"FAIL: expected \".implode(',', $expected).\" got\
    \ \".implode(',', $output).\"\\n\";\n  }\n}\nfunction candidate(...$args) {\n\
    \    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'PASS

    PASS

    PASS

    '
  timestamp: 1660028945
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n\t// Write your code here.\n}\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm0ou5sgk.php:22\n\
    Stack trace:\n#0 /tmp/tmpm0ou5sgk.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpm0ou5sgk.php\
    \ on line 22\n"
  timestamp: 1660028945
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n\tif(!is_array($arr)) {\n\t\treturn false;\n\t}\n\n\tforeach($arr\
    \ as $key => $val) {\n\t\tif($val < 1 || $val > 9) {\n\t\t\tunset($arr[$key]);\n\
    \t\t}\n\t}\n\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\n\t$map = array(\n\
    \t\t\"One\",\n\t\t\"Two\",\n\t\t\"Three\",\n\t\t\"Four\",\n\t\t\"Five\",\n\t\t\
    \"Six\",\n\t\t\"Seven\",\n\t\t\"Eight\",\n\t\t\"Nine\"\n\t);\n\n\tforeach($arr\
    \ as $key => $val) {\n\t\t$arr[$key] = $map[$val - 1];\n\t}\n\n\treturn $arr;\n\
    }\n\n$arr = array(2, 1, 1, 4, 5, 8, 2, 3);\n$result = by_length($arr);\nprint_r($result);\n\
    \n$arr = array();\n$result = by_length($arr);\nprint_r($result);\n\n$arr = array(1,\
    \ -1, 55);\n$result = by_length($arr);\nprint_r($result);\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Eight\n    [1] => Five\n    [2] => Four\n    [3] =>\
    \ Three\n    [4] => Two\n    [5] => Two\n    [6] => One\n    [7] => One\n)\nArray\n\
    (\n)\nArray\n(\n    [0] => One\n)\n"
  timestamp: 1660028945
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $res = array();\n  foreach ($arr as $v) {\n    if ($v >=\
    \ 1 && $v <= 9) {\n      $res[] = $v;\n    }\n  }\n  sort($res);\n  $res = array_reverse($res);\n\
    \  $arr = array();\n  foreach ($res as $v) {\n    $arr[] = get_name($v);\n  }\n\
    \  return $arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_name() in\
    \ /tmp/tmpvv15abbk.php:25\nStack trace:\n#0 /tmp/tmpvv15abbk.php(31): by_length(Array)\n\
    #1 /tmp/tmpvv15abbk.php(35): candidate(Array)\n#2 /tmp/tmpvv15abbk.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmpvv15abbk.php on line 25\n"
  timestamp: 1660028945
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n\t// if array is empty, return empty array\n\tif(empty($arr))\
    \ {\n\t\treturn array();\n\t}\n\t// sort array by ascending order\n\tsort($arr);\n\
    \t// reverse array\n\t$arr = array_reverse($arr);\n\t// create array to store\
    \ corresponding number names\n\t$arr_names = array(\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\");\n\t// loop through\
    \ the array and store values in corresponding array index\n\tfor($i = 0; $i <\
    \ count($arr); $i++) {\n\t\t// if index does not contain a number between 1 -\
    \ 9 or index is out of range, replace with null\n\t\tif($arr[$i] < 1 || $arr[$i]\
    \ > 9 || $arr[$i] == null) {\n\t\t\t$arr[$i] = null;\n\t\t}\n\t\t// else replace\
    \ index with the corresponding number name\n\t\telse {\n\t\t\t$arr[$i] = $arr_names[$arr[$i]\
    \ - 1];\n\t\t}\n\t}\n\t//remove any null values from array\n\t$arr = array_filter($arr);\n\
    \t//return array\n\treturn $arr;\n}\n\n$arr = array(2, 1, 1, 4, 5, 8, 2, 3);\n\
    $result = by_length($arr);\necho \"<pre>\";\nprint_r($result);\necho \"</pre>\"\
    ;\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => Eight\n    [1] => Five\n    [2] => Four\n   \
    \ [3] => Three\n    [4] => Two\n    [5] => Two\n    [6] => One\n    [7] => One\n\
    )\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd3onink5.php:54\n\
    Stack trace:\n#0 /tmp/tmpd3onink5.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpd3onink5.php\
    \ on line 54\n"
  timestamp: 1660028946
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n    $int_to_name = array(\n        1 => \"One\",\n      \
    \  2 => \"Two\",\n        3 => \"Three\",\n        4 => \"Four\",\n        5 =>\
    \ \"Five\",\n        6 => \"Six\",\n        7 => \"Seven\",\n        8 => \"Eight\"\
    ,\n        9 => \"Nine\"\n    );\n    $sorted_arr = array();\n    foreach ($arr\
    \ as $value) {\n        if ($value >= 1 && $value <= 9) {\n            $sorted_arr[]\
    \ = $value;\n        }\n    }\n    sort($sorted_arr);\n    $return_arr = array();\n\
    \    foreach ($sorted_arr as $value) {\n        $return_arr[] = $int_to_name[$value];\n\
    \    }\n    return $return_arr;\n}\nprint_r(by_length(array(2, 1, 1, 4, 5, 8,\
    \ 2, 3)));\nprint_r(by_length(array()));\nprint_r(by_length(array(1, -1, 55)));\n\
    function candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => One\n    [1] => One\n    [2] => Two\n    [3] => Two\n\
    \    [4] => Three\n    [5] => Four\n    [6] => Five\n    [7] => Eight\n)\nArray\n\
    (\n)\nArray\n(\n    [0] => One\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpn6es6iiy.php:47\nStack trace:\n#0 /tmp/tmpn6es6iiy.php(54): test()\n\
    #1 {main}\n  thrown in /tmp/tmpn6es6iiy.php on line 47\n"
  timestamp: 1660028945
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n\t$names = array(\n\t\t1 => \"One\",\n\t\t2 => \"Two\",\n\
    \t\t3 => \"Three\",\n\t\t4 => \"Four\",\n\t\t5 => \"Five\",\n\t\t6 => \"Six\"\
    ,\n\t\t7 => \"Seven\",\n\t\t8 => \"Eight\",\n\t\t9 => \"Nine\",\n\t);\n\t$sorted\
    \ = array();\n\tforeach ($arr as $a) {\n\t\tif ($a >= 1 && $a <= 9) {\n\t\t\t\
    $sorted[] = $a;\n\t\t}\n\t}\n\tsort($sorted);\n\t$reversed = array_reverse($sorted);\n\
    \t$mapped = array();\n\tforeach ($reversed as $r) {\n\t\t$mapped[] = $names[$r];\n\
    \t}\n\treturn $mapped;\n}\n\nvar_dump(by_length(array(2, 1, 1, 4, 5, 8, 2, 3)));\n\
    var_dump(by_length(array()));\nvar_dump(by_length(array(1, -1, 55)));\nfunction\
    \ candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "array(8) {\n  [0]=>\n  string(5) \"Eight\"\n  [1]=>\n  string(4) \"Five\"\
    \n  [2]=>\n  string(4) \"Four\"\n  [3]=>\n  string(5) \"Three\"\n  [4]=>\n  string(3)\
    \ \"Two\"\n  [5]=>\n  string(3) \"Two\"\n  [6]=>\n  string(3) \"One\"\n  [7]=>\n\
    \  string(3) \"One\"\n}\narray(0) {\n}\narray(1) {\n  [0]=>\n  string(3) \"One\"\
    \n}\n"
  timestamp: 1660028945
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $result = [];\n  if (empty($arr)) {\n    return $result;\n\
    \  }\n  sort($arr);\n  $arr = array_unique($arr);\n  $arr = array_values($arr);\n\
    \  for ($i = 0; $i < count($arr); $i++) {\n    switch ($arr[$i]) {\n      case\
    \ 1:\n        $result[] = \"One\";\n        break;\n      case 2:\n        $result[]\
    \ = \"Two\";\n        break;\n      case 3:\n        $result[] = \"Three\";\n\
    \        break;\n      case 4:\n        $result[] = \"Four\";\n        break;\n\
    \      case 5:\n        $result[] = \"Five\";\n        break;\n      case 6:\n\
    \        $result[] = \"Six\";\n        break;\n      case 7:\n        $result[]\
    \ = \"Seven\";\n        break;\n      case 8:\n        $result[] = \"Eight\";\n\
    \        break;\n      case 9:\n        $result[] = \"Nine\";\n        break;\n\
    \    }\n  }\n  return array_reverse($result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4y89jjok.php:61\n\
    Stack trace:\n#0 /tmp/tmp4y89jjok.php(68): test()\n#1 {main}\n  thrown in /tmp/tmp4y89jjok.php\
    \ on line 61\n"
  timestamp: 1660028946
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $arr1 = sort($arr);\n  $arr2 = reverse($arr1);\n  $number\
    \ = array(1 => 'One', 2 => 'Two', 3 => 'Three', 4 => 'Four', 5 => 'Five', 6 =>\
    \ 'Six', 7 => 'Seven', 8 => 'Eight', 9 => 'Nine');\n  $arr3 = array();\n  $i =\
    \ 0;\n  foreach ($arr2 as $value) {\n    if ($value < 1 || $value > 9) {\n   \
    \   continue;\n    }\n    else {\n      $arr3[$i] = $number[$value];\n      $i++;\n\
    \    }\n  }\n  return $arr3;\n}\nprint_r(by_length(array(2, 1, 1, 4, 5, 8, 2,\
    \ 3)));\nprint_r(by_length(array()));\nprint_r(by_length(array(1, -1, 55)));\n\
    function candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function reverse() in\
    \ /tmp/tmpb2otnjdp.php:16\nStack trace:\n#0 /tmp/tmpb2otnjdp.php(31): by_length(Array)\n\
    #1 {main}\n  thrown in /tmp/tmpb2otnjdp.php on line 16\n"
  timestamp: 1660028945
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n    $new_arr = array();\n    foreach ($arr as $num) {\n \
    \       if ($num > 0 && $num < 10) {\n            $new_arr[] = $num;\n       \
    \ }\n    }\n    sort($new_arr);\n    $res_arr = array();\n    foreach (array_reverse($new_arr)\
    \ as $num) {\n        $res_arr[] = convert_num_to_name($num);\n    }\n    return\
    \ $res_arr;\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function convert_num_to_name()\
    \ in /tmp/tmpqaitny78.php:24\nStack trace:\n#0 /tmp/tmpqaitny78.php(29): by_length(Array)\n\
    #1 /tmp/tmpqaitny78.php(33): candidate(Array)\n#2 /tmp/tmpqaitny78.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpqaitny78.php on line 24\n"
  timestamp: 1660028945
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n\t$result = array();\n\tforeach ($arr as $value) {\n\t\t\
    if ($value > 0 && $value < 10) {\n\t\t\tarray_push($result, $value);\n\t\t}\n\t\
    }\n\tsort($result);\n\t$result = array_reverse($result);\n\t$numbers = array(\n\
    \t\t'One',\n\t\t'Two',\n\t\t'Three',\n\t\t'Four',\n\t\t'Five',\n\t\t'Six',\n\t\
    \t'Seven',\n\t\t'Eight',\n\t\t'Nine',\n\t);\n\t$final = array();\n\tforeach ($result\
    \ as $value) {\n\t\tarray_push($final, $numbers[$value - 1]);\n\t}\n\treturn $final;\n\
    }\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028945
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $keys = array_keys($arr);\n  $count = count($arr);\n  $sorted\
    \ = false;\n  while (!$sorted) {\n    $sorted = true;\n    for ($i = 0; $i < $count\
    \ - 1; $i++) {\n      if ($arr[$keys[$i]] > $arr[$keys[$i + 1]]) {\n        $tmp\
    \ = $arr[$keys[$i]];\n        $arr[$keys[$i]] = $arr[$keys[$i + 1]];\n       \
    \ $arr[$keys[$i + 1]] = $tmp;\n        $sorted = false;\n      }\n    }\n  }\n\
    \  return $arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9urbwd4c.php:37\n\
    Stack trace:\n#0 /tmp/tmp9urbwd4c.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp9urbwd4c.php\
    \ on line 37\n"
  timestamp: 1660028945
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n    $numbers = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n    $result\
    \ = array();\n    foreach ($arr as $i) {\n        if (in_array($i, $numbers))\
    \ {\n            $result[] = $i;\n        }\n    }\n    sort($result);\n    return\
    \ array_reverse($result);\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeyr33muo.php:30\n\
    Stack trace:\n#0 /tmp/tmpeyr33muo.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpeyr33muo.php\
    \ on line 30\n"
  timestamp: 1660028945
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $mapping = array(\n    1 => \"One\",\n    2 => \"Two\"\
    ,\n    3 => \"Three\",\n    4 => \"Four\",\n    5 => \"Five\",\n    6 => \"Six\"\
    ,\n    7 => \"Seven\",\n    8 => \"Eight\",\n    9 => \"Nine\"\n  );\n  $res =\
    \ array();\n  foreach ($arr as $val) {\n    if (is_numeric($val) && $val > 0 &&\
    \ $val < 10) {\n      $res[] = $val;\n    }\n  }\n  sort($res);\n  $res = array_reverse($res);\n\
    \  foreach ($res as $key => $val) {\n    $res[$key] = $mapping[$val];\n  }\n \
    \ return $res;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028945
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $new_arr = [];\n  foreach ($arr as $num) {\n    switch\
    \ ($num) {\n      case 1:\n        $new_arr[] = \"One\";\n        break;\n   \
    \   case 2:\n        $new_arr[] = \"Two\";\n        break;\n      case 3:\n  \
    \      $new_arr[] = \"Three\";\n        break;\n      case 4:\n        $new_arr[]\
    \ = \"Four\";\n        break;\n      case 5:\n        $new_arr[] = \"Five\";\n\
    \        break;\n      case 6:\n        $new_arr[] = \"Six\";\n        break;\n\
    \      case 7:\n        $new_arr[] = \"Seven\";\n        break;\n      case 8:\n\
    \        $new_arr[] = \"Eight\";\n        break;\n      case 9:\n        $new_arr[]\
    \ = \"Nine\";\n        break;\n    }\n  }\n  sort($new_arr);\n  return array_reverse($new_arr);\n\
    }\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc2n8wr9u.php:55\n\
    Stack trace:\n#0 /tmp/tmpc2n8wr9u.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpc2n8wr9u.php\
    \ on line 55\n"
  timestamp: 1660028945
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $string = implode(',', $arr);\n  $string = preg_replace('/[^1-9,]/',\
    \ '', $string);\n  $arr = explode(',', $string);\n  sort($arr);\n  $arr = array_reverse($arr);\n\
    \  for ($i = 0; $i < count($arr); $i++) {\n    switch ($arr[$i]) {\n      case\
    \ '1':\n        $arr[$i] = 'One';\n        break;\n      case '2':\n        $arr[$i]\
    \ = 'Two';\n        break;\n      case '3':\n        $arr[$i] = 'Three';\n   \
    \     break;\n      case '4':\n        $arr[$i] = 'Four';\n        break;\n  \
    \    case '5':\n        $arr[$i] = 'Five';\n        break;\n      case '6':\n\
    \        $arr[$i] = 'Six';\n        break;\n      case '7':\n        $arr[$i]\
    \ = 'Seven';\n        break;\n      case '8':\n        $arr[$i] = 'Eight';\n \
    \       break;\n      case '9':\n        $arr[$i] = 'Nine';\n        break;\n\
    \    }\n  }\n  return $arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp67pe9qg_.php:60\n\
    Stack trace:\n#0 /tmp/tmp67pe9qg_.php(66): test()\n#1 {main}\n  thrown in /tmp/tmp67pe9qg_.php\
    \ on line 60\n"
  timestamp: 1660028945
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n    $array_of_numbers = array();\n    $array_of_words = array();\n\
    \    $array_of_words_reversed = array();\n    $array_of_numbers_reversed = array();\n\
    \    $array_of_words_reversed_in_string = array();\n    // If array is empty return\
    \ empty array\n    if (empty($arr)) {\n        return $array_of_words_reversed_in_string;\n\
    \    }\n    // Convert all keys to numerical\n    foreach ($arr as $key => $val)\
    \ {\n        $array_of_numbers[$key] = $val;\n    }\n    // Sort the array\n \
    \   sort($array_of_numbers);\n    // Create new array and convert the numbers\
    \ to words\n    foreach ($array_of_numbers as $val) {\n        switch ($val) {\n\
    \            case 1:\n                $array_of_words[] = \"One\";\n         \
    \       break;\n            case 2:\n                $array_of_words[] = \"Two\"\
    ;\n                break;\n            case 3:\n                $array_of_words[]\
    \ = \"Three\";\n                break;\n            case 4:\n                $array_of_words[]\
    \ = \"Four\";\n                break;\n            case 5:\n                $array_of_words[]\
    \ = \"Five\";\n                break;\n            case 6:\n                $array_of_words[]\
    \ = \"Six\";\n                break;\n            case 7:\n                $array_of_words[]\
    \ = \"Seven\";\n                break;\n            case 8:\n                $array_of_words[]\
    \ = \"Eight\";\n                break;\n            case 9:\n                $array_of_words[]\
    \ = \"Nine\";\n                break;\n            default:\n                $array_of_words[]\
    \ = \"\";\n                break;\n        }\n    }\n    // Reverse the array\
    \ of words\n    $array_of_words_reversed = array_reverse($array_of_words);\n \
    \   // Create new array with all keys as string\n    foreach ($array_of_words_reversed\
    \ as $key => $val) {\n        $array_of_words_reversed_in_string[\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpcrs8ese5.php on line 70

    '
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $sortArr = array();\n  foreach ($arr as $value) {\n   \
    \ if ($value > 0 && $value < 10) {\n      $sortArr[] = $value;\n    }\n  }\n \
    \ sort($sortArr);\n  $sortArr = array_reverse($sortArr);\n  foreach ($sortArr\
    \ as $key => $value) {\n    switch ($value) {\n      case 1:\n        $sortArr[$key]\
    \ = \"One\";\n        break;\n      case 2:\n        $sortArr[$key] = \"Two\"\
    ;\n        break;\n      case 3:\n        $sortArr[$key] = \"Three\";\n      \
    \  break;\n      case 4:\n        $sortArr[$key] = \"Four\";\n        break;\n\
    \      case 5:\n        $sortArr[$key] = \"Five\";\n        break;\n      case\
    \ 6:\n        $sortArr[$key] = \"Six\";\n        break;\n      case 7:\n     \
    \   $sortArr[$key] = \"Seven\";\n        break;\n      case 8:\n        $sortArr[$key]\
    \ = \"Eight\";\n        break;\n      case 9:\n        $sortArr[$key] = \"Nine\"\
    ;\n        break;\n    }\n  }\n  return $sortArr;\n}\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028945
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $arr = array_filter($arr, function($num) {\n    return\
    \ $num >= 1 && $num <= 9;\n  });\n  sort($arr);\n  $arr = array_reverse($arr);\n\
    \  $arr = array_map(function($num) {\n    $numbers = [\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    return $numbers[$num\
    \ - 1];\n  }, $arr);\n  return $arr;\n}\n\nfunction candidate(...$args) {\n  \
    \  return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $result = array();\n  $nums = array(1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9);\n  $letters = array('One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven',\
    \ 'Eight', 'Nine');\n  foreach ($arr as $number) {\n    if (in_array($number,\
    \ $nums)) {\n      $result[] = $number;\n    }\n  }\n  rsort($result);\n  foreach\
    \ ($result as $key => $value) {\n    $result[$key] = $letters[$value - 1];\n \
    \ }\n  return $result;\n}\n\nvar_dump(by_length(array(2, 1, 1, 4, 5, 8, 2, 3)));\n\
    var_dump(by_length(array()));\nvar_dump(by_length(array(1, -1, 55)));\nfunction\
    \ candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "array(8) {\n  [0]=>\n  string(5) \"Eight\"\n  [1]=>\n  string(4) \"Five\"\
    \n  [2]=>\n  string(4) \"Four\"\n  [3]=>\n  string(5) \"Three\"\n  [4]=>\n  string(3)\
    \ \"Two\"\n  [5]=>\n  string(3) \"Two\"\n  [6]=>\n  string(3) \"One\"\n  [7]=>\n\
    \  string(3) \"One\"\n}\narray(0) {\n}\narray(1) {\n  [0]=>\n  string(3) \"One\"\
    \n}\n"
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $nums = array(1 => \"One\", 2 => \"Two\", 3 => \"Three\"\
    , 4 => \"Four\", 5 => \"Five\", 6 => \"Six\", 7 => \"Seven\", 8 => \"Eight\",\
    \ 9 => \"Nine\");\n  $new_arr = array();\n  foreach ($arr as $value) {\n    if\
    \ ($value >= 1 && $value <= 9) {\n      $new_arr[] = $value;\n    }\n  }\n  if\
    \ (count($new_arr) != 0) {\n    sort($new_arr);\n    $new_arr = array_reverse($new_arr);\n\
    \    foreach ($new_arr as $key => $value) {\n      $new_arr[$key] = $nums[$value];\n\
    \    }\n  }\n  return $new_arr;\n}\n\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028946
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n    $arr = array_unique($arr);\n    $numMap = [1 => 'One',\
    \ 2 => 'Two', 3 => 'Three', 4 => 'Four', 5 => 'Five', 6 => 'Six', 7 => 'Seven',\
    \ 8 => 'Eight', 9 => 'Nine'];\n    $arr = array_intersect_key($numMap, array_flip($arr));\n\
    \    sort($arr);\n    return array_reverse($arr);\n}\nprint_r(by_length(array(1,\
    \ -1, 55)));\nprint_r(by_length(array(1, 2, 3, 4, 5, 6, 7, 8, 9)));\n\nfunction\
    \ candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => One\n)\nArray\n(\n    [0] => Two\n    [1] => Three\n\
    \    [2] => Six\n    [3] => Seven\n    [4] => One\n    [5] => Nine\n    [6] =>\
    \ Four\n    [7] => Five\n    [8] => Eight\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp094w78gm.php:29\nStack trace:\n#0 /tmp/tmp094w78gm.php(36):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp094w78gm.php on line 29\n"
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n    $corrected_arr = [];\n    $nums = [\"One\", \"Two\",\
    \ \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n \
    \   for ($i = 0; $i < count($arr); $i++) {\n        if ($arr[$i] > 0 && $arr[$i]\
    \ < 10) {\n            array_push($corrected_arr, $arr[$i]);\n        }\n    }\n\
    \    sort($corrected_arr);\n    $corrected_arr = array_reverse($corrected_arr);\n\
    \    for ($i = 0; $i < count($corrected_arr); $i++) {\n        $corrected_arr[$i]\
    \ = $nums[$corrected_arr[$i] - 1];\n    }\n    return $corrected_arr;\n}\n\nfunction\
    \ candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if(empty($arr)) {\n    return $arr;\n  }\n\n  $final_arr\
    \ = array();\n  $dictionary = array(\n    1 => \"One\",\n    2 => \"Two\",\n \
    \   3 => \"Three\",\n    4 => \"Four\",\n    5 => \"Five\",\n    6 => \"Six\"\
    ,\n    7 => \"Seven\",\n    8 => \"Eight\",\n    9 => \"Nine\"\n  );\n\n  $one_to_nine\
    \ = array();\n  foreach($arr as $num) {\n    if($num > 0 && $num < 10) {\n   \
    \   $one_to_nine[] = $num;\n    }\n  }\n\n  sort($one_to_nine);\n  $one_to_nine\
    \ = array_reverse($one_to_nine);\n\n  foreach($one_to_nine as $digit) {\n    $final_arr[]\
    \ = $dictionary[$digit];\n  }\n\n  return $final_arr;\n}\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028945
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n    // TODO\n}\n\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptu0tlj7h.php:23\n\
    Stack trace:\n#0 /tmp/tmptu0tlj7h.php(30): test()\n#1 {main}\n  thrown in /tmp/tmptu0tlj7h.php\
    \ on line 23\n"
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $result = [];\n  for ($i = 0; $i < count($arr); $i++) {\n\
    \    if ($arr[$i] > 0 && $arr[$i] < 10) {\n      array_push($result, $arr[$i]);\n\
    \    }\n  }\n  for ($i = 0; $i < count($result); $i++) {\n    for ($j = $i + 1;\
    \ $j < count($result); $j++) {\n      if ($result[$i] > $result[$j]) {\n     \
    \   $temp = $result[$i];\n        $result[$i] = $result[$j];\n        $result[$j]\
    \ = $temp;\n      }\n    }\n  }\n  $reverse = [];\n  for ($i = count($result)\
    \ - 1; $i >= 0; $i--) {\n    array_push($reverse, $result[$i]);\n  }\n  for ($i\
    \ = 0; $i < count($reverse); $i++) {\n    switch ($reverse[$i]) {\n      case\
    \ 1:\n        $reverse[$i] = \"One\";\n        break;\n      case 2:\n       \
    \ $reverse[$i] = \"Two\";\n        break;\n      case 3:\n        $reverse[$i]\
    \ = \"Three\";\n        break;\n      case 4:\n        $reverse[$i] = \"Four\"\
    ;\n        break;\n      case 5:\n        $reverse[$i] = \"Five\";\n        break;\n\
    \      case 6:\n        $reverse[$i] = \"Six\";\n        break;\n      case 7:\n\
    \        $reverse[$i] = \"Seven\";\n        break;\n      case 8:\n        $reverse[$i]\
    \ = \"Eight\";\n        break;\n      case 9:\n        $reverse[$i] = \"Nine\"\
    ;\n        break;\n    }\n  }\n  return $reverse;\n}\n\necho \"<pre>\";\nprint_r(by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)));\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(by_length(array()));\n\
    \nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => Eight\n    [1] => Five\n    [2] => Four\n   \
    \ [3] => Three\n    [4] => Two\n    [5] => Two\n    [6] => One\n    [7] => One\n\
    )\n</pre><pre>Array\n(\n)\n"
  timestamp: 1660028946
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $map = array(\n    1 => \"One\",\n    2 => \"Two\",\n \
    \   3 => \"Three\",\n    4 => \"Four\",\n    5 => \"Five\",\n    6 => \"Six\"\
    ,\n    7 => \"Seven\",\n    8 => \"Eight\",\n    9 => \"Nine\"\n  );\n  $new_arr\
    \ = array();\n  foreach ($arr as $number) {\n    if (array_key_exists($number,\
    \ $map)) {\n      $new_arr[] = $map[$number];\n    }\n  }\n  sort($new_arr);\n\
    \  $new_arr = array_reverse($new_arr);\n  return $new_arr;\n}\nprint_r(by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)));\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Two\n    [1] => Two\n    [2] => Three\n    [3] =>\
    \ One\n    [4] => One\n    [5] => Four\n    [6] => Five\n    [7] => Eight\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7u0ww_k7.php:42\nStack\
    \ trace:\n#0 /tmp/tmp7u0ww_k7.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp7u0ww_k7.php\
    \ on line 42\n"
  timestamp: 1660028946
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n    $valid_array = array();\n    foreach ($arr as $item)\
    \ {\n        if ($item >= 1 && $item <= 9) {\n            $valid_array[] = $item;\n\
    \        }\n    }\n    sort($valid_array);\n    $reverse_array = array_reverse($valid_array);\n\
    \    $words_array = array();\n    foreach ($reverse_array as $item) {\n      \
    \  $words_array[] = strtoupper(decToWord($item));\n    }\n    return $words_array;\n\
    }\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function decToWord() in\
    \ /tmp/tmpckln8a_a.php:25\nStack trace:\n#0 /tmp/tmpckln8a_a.php(31): by_length(Array)\n\
    #1 /tmp/tmpckln8a_a.php(35): candidate(Array)\n#2 /tmp/tmpckln8a_a.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmpckln8a_a.php on line 25\n"
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n    if (empty($arr)) {\n        return array();\n    }\n\
    \    $arr = array_filter($arr, function($item) {\n        return $item > 0 &&\
    \ $item < 10;\n    });\n    sort($arr);\n    $arr = array_reverse($arr);\n   \
    \ return array_map(function($item) {\n        switch ($item) {\n            case\
    \ 1:\n                return 'One';\n            case 2:\n                return\
    \ 'Two';\n            case 3:\n                return 'Three';\n            case\
    \ 4:\n                return 'Four';\n            case 5:\n                return\
    \ 'Five';\n            case 6:\n                return 'Six';\n            case\
    \ 7:\n                return 'Seven';\n            case 8:\n                return\
    \ 'Eight';\n            case 9:\n                return 'Nine';\n        }\n \
    \   }, $arr);\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028946
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4qub6hj9.php:23\n\
    Stack trace:\n#0 /tmp/tmp4qub6hj9.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp4qub6hj9.php\
    \ on line 23\n"
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $digits = array(1 => \"One\", 2 => \"Two\", 3 => \"Three\"\
    , 4 => \"Four\", 5 => \"Five\", 6 => \"Six\", 7 => \"Seven\", 8 => \"Eight\",\
    \ 9 => \"Nine\");\n  $cleaned = array();\n  foreach ($arr as $k => $v) {\n   \
    \ if ($v < 10 && $v > 0) {\n      $cleaned[] = $v;\n    }\n  }\n  sort($cleaned);\n\
    \  $cleaned = array_reverse($cleaned);\n  $res = array();\n  foreach ($cleaned\
    \ as $k => $v) {\n    $res[] = $digits[$v];\n  }\n  return $res;\n}\n\nfunction\
    \ candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028946
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n    $sorted_arr = sort_from_one_to_nine($arr);\n    $reversed_arr\
    \ = array_reverse($sorted_arr);\n    $result = array();\n    foreach ($reversed_arr\
    \ as $n) {\n        $result[] = get_word_from_number($n);\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sort_from_one_to_nine()\
    \ in /tmp/tmpe59jb3v1.php:15\nStack trace:\n#0 /tmp/tmpe59jb3v1.php(25): by_length(Array)\n\
    #1 /tmp/tmpe59jb3v1.php(29): candidate(Array)\n#2 /tmp/tmpe59jb3v1.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmpe59jb3v1.php on line 15\n"
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n    $res = [];\n    $alphabet = ['', 'One', 'Two', 'Three',\
    \ 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'];\n    foreach ($arr as $el)\
    \ {\n        if ($el >= 1 && $el <= 9) {\n            $res[] = $el;\n        }\n\
    \    }\n    sort($res);\n    $res = array_reverse($res);\n    foreach ($res as\
    \ $key => $value) {\n        $res[$key] = $alphabet[$value];\n    }\n    return\
    \ $res;\n}\n\necho \"<pre>\";\nprint_r(by_length(array(2, 1, 1, 4, 5, 8, 2, 3)));\n\
    echo \"</pre>\";\necho \"<pre>\";\nprint_r(by_length(array()));\necho \"</pre>\"\
    ;\necho \"<pre>\";\nprint_r(by_length(array(1, -1, 55)));\necho \"</pre>\";\n\
    function candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => Eight\n    [1] => Five\n    [2] => Four\n   \
    \ [3] => Three\n    [4] => Two\n    [5] => Two\n    [6] => One\n    [7] => One\n\
    )\n</pre><pre>Array\n(\n)\n</pre><pre>Array\n(\n    [0] => One\n)\n</pre>"
  timestamp: 1660028946
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $str = '';\n  $str_arr = array();\n  foreach ($arr as $item)\
    \ {\n    if ($item >= 1 && $item <= 9) {\n      $str .= $item;\n    }\n  }\n \
    \ $str_arr = str_split($str);\n  $length = count($str_arr);\n  $j = 0;\n  $temp\
    \ = 0;\n  for ($i = 0; $i < $length; $i++) {\n    for ($j = 0; $j < $length; $j++)\
    \ {\n      if ($str_arr[$i] > $str_arr[$j]) {\n        $temp = $str_arr[$i];\n\
    \        $str_arr[$i] = $str_arr[$j];\n        $str_arr[$j] = $temp;\n      }\n\
    \    }\n  }\n  $str_arr = array_reverse($str_arr);\n  $arr_length = count($str_arr);\n\
    \  for ($i = 0; $i < $arr_length; $i++) {\n    if ($str_arr[$i] == 1) {\n    \
    \  $str_arr[$i] = 'One';\n    } elseif ($str_arr[$i] == 2) {\n      $str_arr[$i]\
    \ = 'Two';\n    } elseif ($str_arr[$i] == 3) {\n      $str_arr[$i] = 'Three';\n\
    \    } elseif ($str_arr[$i] == 4) {\n      $str_arr[$i] = 'Four';\n    } elseif\
    \ ($str_arr[$i] == 5) {\n      $str_arr[$i] = 'Five';\n    } elseif ($str_arr[$i]\
    \ == 6) {\n      $str_arr[$i] = 'Six';\n    } elseif ($str_arr[$i] == 7) {\n \
    \     $str_arr[$i] = 'Seven';\n    } elseif ($str_arr[$i] == 8) {\n      $str_arr[$i]\
    \ = 'Eight';\n    } elseif ($str_arr[$i\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "]" in /tmp/tmpn7ctw5_4.php
    on line 55

    '
  timestamp: 1660028946
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n    $sorted_arr = sort_between($arr);\n    $reversed_arr\
    \ = array_reverse($sorted_arr);\n    $result = array();\n    foreach ($reversed_arr\
    \ as $i) {\n        if ($i == 1) {\n            array_push($result, \"One\");\n\
    \        } elseif ($i == 2) {\n            array_push($result, \"Two\");\n   \
    \     } elseif ($i == 3) {\n            array_push($result, \"Three\");\n    \
    \    } elseif ($i == 4) {\n            array_push($result, \"Four\");\n      \
    \  } elseif ($i == 5) {\n            array_push($result, \"Five\");\n        }\
    \ elseif ($i == 6) {\n            array_push($result, \"Six\");\n        } elseif\
    \ ($i == 7) {\n            array_push($result, \"Seven\");\n        } elseif ($i\
    \ == 8) {\n            array_push($result, \"Eight\");\n        } elseif ($i ==\
    \ 9) {\n            array_push($result, \"Nine\");\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sort_between()\
    \ in /tmp/tmpxss6wu1b.php:15\nStack trace:\n#0 /tmp/tmpxss6wu1b.php(43): by_length(Array)\n\
    #1 /tmp/tmpxss6wu1b.php(47): candidate(Array)\n#2 /tmp/tmpxss6wu1b.php(54): test()\n\
    #3 {main}\n  thrown in /tmp/tmpxss6wu1b.php on line 15\n"
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n    if (empty($arr)) {\n        return array();\n    }\n\
    \    $filter_arr = array_filter($arr, function($value) {\n        return $value\
    \ >= 1 && $value <= 9;\n    });\n    rsort($filter_arr);\n    $final_arr = array();\n\
    \    $mapping = [\n        1 => 'One',\n        2 => 'Two',\n        3 => 'Three',\n\
    \        4 => 'Four',\n        5 => 'Five',\n        6 => 'Six',\n        7 =>\
    \ 'Seven',\n        8 => 'Eight',\n        9 => 'Nine'\n    ];\n    foreach ($filter_arr\
    \ as $value) {\n        $final_arr[] = $mapping[$value];\n    }\n    return $final_arr;\n\
    }\n\necho \"<pre>\";\nprint_r(by_length(array(2, 1, 1, 4, 5, 8, 2, 3)));\nprint_r(by_length(array()));\n\
    print_r(by_length(array(1, -1, 55)));\necho \"</pre>\";\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => Eight\n    [1] => Five\n    [2] => Four\n   \
    \ [3] => Three\n    [4] => Two\n    [5] => Two\n    [6] => One\n    [7] => One\n\
    )\nArray\n(\n)\nArray\n(\n    [0] => One\n)\n</pre>"
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n    $keywords = array(\n        1 => \"One\",\n        2\
    \ => \"Two\",\n        3 => \"Three\",\n        4 => \"Four\",\n        5 => \"\
    Five\",\n        6 => \"Six\",\n        7 => \"Seven\",\n        8 => \"Eight\"\
    ,\n        9 => \"Nine\"\n    );\n    $newArr = array();\n    foreach ($arr as\
    \ $key => $value) {\n        if ($value >= 1 && $value <= 9) {\n            $newArr[]\
    \ = $value;\n        }\n    }\n    sort($newArr);\n    $newArr = array_reverse($newArr);\n\
    \    foreach ($newArr as $key => $value) {\n        $newArr[$key] = $keywords[$value];\n\
    \    }\n    return $newArr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n    $result = [];\n    $words = ['One', 'Two', 'Three', 'Four',\
    \ 'Five', 'Six', 'Seven', 'Eight', 'Nine'];\n    foreach ($arr as $value) {\n\
    \        if ($value >= 1 && $value <= 9) {\n            $result[] = $value;\n\
    \        }\n    }\n    sort($result);\n    $result = array_reverse($result);\n\
    \    foreach ($result as $key => $value) {\n        $result[$key] = $words[$value\
    \ - 1];\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n   \
    \ return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n    $a = [];\n    foreach ($arr as $el) {\n        if ($el\
    \ >= 1 && $el <= 9) {\n            $a[] = $el;\n        }\n    }\n    rsort($a);\n\
    \    $b = [];\n    $arr = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\"];\n    foreach ($a as $el) {\n        $b[]\
    \ = $arr[$el - 1];\n    }\n    return $b;\n}\n\nfunction candidate(...$args) {\n\
    \    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028946
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n    $arr2 = array();\n    $arr3 = array();\n    $arr1 = array();\n\
    \    $k = 0;\n    $sum = 0;\n    $str = \"\";\n    $str1 = \"\";\n    $str2 =\
    \ \"\";\n    foreach ($arr as $key => $value) {\n        if ($value > 0 && $value\
    \ < 10) {\n            $arr2[$k] = $value;\n            $k++;\n        }\n   \
    \ }\n    for ($i = 0; $i < count($arr2); $i++) {\n        for ($j = $i + 1; $j\
    \ < count($arr2); $j++) {\n            if ($arr2[$i] > $arr2[$j]) {\n        \
    \        $sum = $arr2[$i];\n                $arr2[$i] = $arr2[$j];\n         \
    \       $arr2[$j] = $sum;\n            }\n        }\n    }\n    for ($i = 0; $i\
    \ < count($arr2); $i++) {\n        switch ($arr2[$i]) {\n            case 1:\n\
    \                $str = \"One\";\n                break;\n            case 2:\n\
    \                $str = \"Two\";\n                break;\n            case 3:\n\
    \                $str = \"Three\";\n                break;\n            case 4:\n\
    \                $str = \"Four\";\n                break;\n            case 5:\n\
    \                $str = \"Five\";\n                break;\n            case 6:\n\
    \                $str = \"Six\";\n                break;\n            case 7:\n\
    \                $str = \"Seven\";\n                break;\n            case 8:\n\
    \                $str = \"Eight\";\n                break;\n            case 9:\n\
    \                $str = \"Nine\";\n                break;\n        }\n       \
    \ $arr3[$i] = $str;\n    }\n    $str2 = implode(\",\", $arr3);\n    $str1 = strrev($str2);\n\
    \    $arr1 = explode(\",\", $str1);\n    return $arr1;\n}\nprint_r(by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)));\necho \"<br>\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "Eight", expecting "," or ";"
    in /tmp/tmpm5za6w00.php on line 82

    '
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n\t$digits_array = array();\n\t$names_array = array();\n\t\
    foreach ($arr as $value) {\n\t\tif ($value <= 9 && $value >= 1) {\n\t\t\tarray_push($digits_array,\
    \ $value);\n\t\t}\n\t}\n\tsort($digits_array);\n\t$digits_array = array_reverse($digits_array);\n\
    \tforeach ($digits_array as $value) {\n\t\tswitch ($value) {\n\t\t\tcase 1:\n\t\
    \t\t\tarray_push($names_array, \"One\");\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\
    \tarray_push($names_array, \"Two\");\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\t\
    array_push($names_array, \"Three\");\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\t\
    array_push($names_array, \"Four\");\n\t\t\t\tbreak;\n\t\t\tcase 5:\n\t\t\t\tarray_push($names_array,\
    \ \"Five\");\n\t\t\t\tbreak;\n\t\t\tcase 6:\n\t\t\t\tarray_push($names_array,\
    \ \"Six\");\n\t\t\t\tbreak;\n\t\t\tcase 7:\n\t\t\t\tarray_push($names_array, \"\
    Seven\");\n\t\t\t\tbreak;\n\t\t\tcase 8:\n\t\t\t\tarray_push($names_array, \"\
    Eight\");\n\t\t\t\tbreak;\n\t\t\tcase 9:\n\t\t\t\tarray_push($names_array, \"\
    Nine\");\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn $names_array;\n}\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n    $numbers = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n    $new_arr\
    \ = array();\n    $words = array(\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\");\n    foreach ($arr as $value) {\n\
    \        if (in_array($value, $numbers)) {\n            array_push($new_arr, $value);\n\
    \        }\n    }\n    sort($new_arr);\n    $new_arr = array_reverse($new_arr);\n\
    \    foreach ($new_arr as $key => $value) {\n        $new_arr[$key] = $words[$value\
    \ - 1];\n    }\n    return $new_arr;\n}\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n    $ints = array_filter($arr, 'is_int');\n    $ints = array_filter($ints,\
    \ function($i) { return $i > 0 && $i < 10; });\n    sort($ints);\n    $ints =\
    \ array_reverse($ints);\n    $map = array(\n        1 => 'One',\n        2 =>\
    \ 'Two',\n        3 => 'Three',\n        4 => 'Four',\n        5 => 'Five',\n\
    \        6 => 'Six',\n        7 => 'Seven',\n        8 => 'Eight',\n        9\
    \ => 'Nine'\n    );\n    return array_map(function($i) use ($map) { return $map[$i];\
    \ }, $ints);\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if(empty($arr)) return $arr;\n  $names = array(\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    );\n  $result = array();\n  foreach($arr as $a) {\n    if($a > 0 && $a < 10) $result[]\
    \ = $a;\n  }\n  asort($result);\n  $result = array_reverse($result);\n  foreach($result\
    \ as $key => $r) {\n    $result[$key] = $names[$r - 1];\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028946
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n\t$arr = array_filter($arr, function($item) { return $item\
    \ >= 1 && $item <= 9; });\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($item)\
    \ {\n\t\treturn [\n\t\t\t'One',\n\t\t\t'Two',\n\t\t\t'Three',\n\t\t\t'Four',\n\
    \t\t\t'Five',\n\t\t\t'Six',\n\t\t\t'Seven',\n\t\t\t'Eight',\n\t\t\t'Nine'\n\t\t\
    ][$item - 1];\n\t}, $arr);\n\treturn $arr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5o0p12e_.php:38\n\
    Stack trace:\n#0 /tmp/tmp5o0p12e_.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp5o0p12e_.php\
    \ on line 38\n"
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n    $newArr = [];\n    foreach ($arr as $number) {\n    \
    \    if ($number >= 1 && $number <= 9) {\n            array_push($newArr, $number);\n\
    \        }\n    }\n    rsort($newArr);\n    $strArr = [];\n    foreach ($newArr\
    \ as $number) {\n        switch ($number) {\n            case 1:\n           \
    \     array_push($strArr, \"One\");\n                break;\n            case\
    \ 2:\n                array_push($strArr, \"Two\");\n                break;\n\
    \            case 3:\n                array_push($strArr, \"Three\");\n      \
    \          break;\n            case 4:\n                array_push($strArr, \"\
    Four\");\n                break;\n            case 5:\n                array_push($strArr,\
    \ \"Five\");\n                break;\n            case 6:\n                array_push($strArr,\
    \ \"Six\");\n                break;\n            case 7:\n                array_push($strArr,\
    \ \"Seven\");\n                break;\n            case 8:\n                array_push($strArr,\
    \ \"Eight\");\n                break;\n            case 9:\n                array_push($strArr,\
    \ \"Nine\");\n                break;\n        }\n    }\n    return $strArr;\n\
    }\n\nprint_r(by_length(array(2, 1, 1, 4, 5, 8, 2, 3)));\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Eight\n    [1] => Five\n    [2] => Four\n    [3] =>\
    \ Three\n    [4] => Two\n    [5] => Two\n    [6] => One\n    [7] => One\n)\n"
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n    $sort = [\n        'One' => 1,\n        'Two' => 2,\n\
    \        'Three' => 3,\n        'Four' => 4,\n        'Five' => 5,\n        'Six'\
    \ => 6,\n        'Seven' => 7,\n        'Eight' => 8,\n        'Nine' => 9,\n\
    \    ];\n    $arr_sort = array_filter($arr, function ($i) {\n        return $i\
    \ >= 1 && $i <= 9;\n    });\n    sort($arr_sort);\n    return array_map(function\
    \ ($i) use ($sort) {\n        return array_search($i, $sort);\n    }, array_reverse($arr_sort));\n\
    }\n\n$arr = [2, 1, 1, 4, 5, 8, 2, 3];\n$arr = [1, -1, 55];\n\nvar_dump(by_length($arr));\n\
    function candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "array(1) {\n  [0]=>\n  string(3) \"One\"\n}\n"
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n\t$nums = array_filter($arr, function($val) {\n\t\treturn\
    \ $val > 0 && $val < 10;\n\t});\n\tsort($nums);\n\t$nums = array_reverse($nums);\n\
    \t$digitNames = array(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\");\n\treturn array_map(function($val) use ($digitNames)\
    \ {\n\t\treturn $digitNames[$val - 1];\n\t}, $nums);\n}\n\n$output_arr = by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3));\nprint_r($output_arr);\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Eight\n    [1] => Five\n    [2] => Four\n    [3] =>\
    \ Three\n    [4] => Two\n    [5] => Two\n    [6] => One\n    [7] => One\n)\n"
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $string = array();\n  $string[1] = \"One\";\n  $string[2]\
    \ = \"Two\";\n  $string[3] = \"Three\";\n  $string[4] = \"Four\";\n  $string[5]\
    \ = \"Five\";\n  $string[6] = \"Six\";\n  $string[7] = \"Seven\";\n  $string[8]\
    \ = \"Eight\";\n  $string[9] = \"Nine\";\n  $result = array();\n  foreach ($arr\
    \ as $val) {\n    if ($val >= 1 && $val <= 9) {\n      $result[] = $val;\n   \
    \ }\n  }\n  sort($result);\n  $result = array_reverse($result);\n  foreach ($result\
    \ as $val) {\n    $key = array_search($val, $result);\n    $result[$key] = $string[$val];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028946
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $result = array();\n  $one = \"One\";\n  $two = \"Two\"\
    ;\n  $three = \"Three\";\n  $four = \"Four\";\n  $five = \"Five\";\n  $six = \"\
    Six\";\n  $seven = \"Seven\";\n  $eight = \"Eight\";\n  $nine = \"Nine\";\n  for\
    \ ($i = 0; $i < count($arr); $i++) {\n    if ($arr[$i] === 1) {\n      array_push($result,\
    \ $one);\n    } elseif ($arr[$i] === 2) {\n      array_push($result, $two);\n\
    \    } elseif ($arr[$i] === 3) {\n      array_push($result, $three);\n    } elseif\
    \ ($arr[$i] === 4) {\n      array_push($result, $four);\n    } elseif ($arr[$i]\
    \ === 5) {\n      array_push($result, $five);\n    } elseif ($arr[$i] === 6) {\n\
    \      array_push($result, $six);\n    } elseif ($arr[$i] === 7) {\n      array_push($result,\
    \ $seven);\n    } elseif ($arr[$i] === 8) {\n      array_push($result, $eight);\n\
    \    } elseif ($arr[$i] === 9) {\n      array_push($result, $nine);\n    }\n \
    \ }\n  rsort($result);\n  return $result;\n}\n\n$test1 = array(2, 1, 1, 4, 5,\
    \ 8, 2, 3);\n$test2 = array();\n$test3 = array(1, -1, 55);\n\necho var_dump(by_length($test1))\
    \ . PHP_EOL;\necho var_dump(by_length($test2)) . PHP_EOL;\necho var_dump(by_length($test3))\
    \ . PHP_EOL;\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(8) {\n  [0]=>\n  string(3) \"Two\"\n  [1]=>\n  string(3) \"Two\"\n\
    \  [2]=>\n  string(5) \"Three\"\n  [3]=>\n  string(3) \"One\"\n  [4]=>\n  string(3)\
    \ \"One\"\n  [5]=>\n  string(4) \"Four\"\n  [6]=>\n  string(4) \"Five\"\n  [7]=>\n\
    \  string(5) \"Eight\"\n}\n\narray(0) {\n}\n\narray(1) {\n  [0]=>\n  string(3)\
    \ \"One\"\n}\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpizst0aa1.php:62\n\
    Stack trace:\n#0 /tmp/tmpizst0aa1.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpizst0aa1.php\
    \ on line 62\n"
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (!is_array($arr)) return $arr;\n  $result = array();\n\
    \  $n = count($arr);\n  $count = 0;\n  for ($i = 0; $i < $n; $i++) {\n    if ($arr[$i]\
    \ < 10 && $arr[$i] > 0) {\n      $result[$count] = $arr[$i];\n      $count++;\n\
    \    }\n  }\n  sort($result);\n  $reverse = array_reverse($result);\n  $res =\
    \ array();\n  for ($i = 0; $i < count($reverse); $i++) {\n    if ($reverse[$i]\
    \ == 1) {\n      $res[$i] = \"One\";\n    } elseif ($reverse[$i] == 2) {\n   \
    \   $res[$i] = \"Two\";\n    } elseif ($reverse[$i] == 3) {\n      $res[$i] =\
    \ \"Three\";\n    } elseif ($reverse[$i] == 4) {\n      $res[$i] = \"Four\";\n\
    \    } elseif ($reverse[$i] == 5) {\n      $res[$i] = \"Five\";\n    } elseif\
    \ ($reverse[$i] == 6) {\n      $res[$i] = \"Six\";\n    } elseif ($reverse[$i]\
    \ == 7) {\n      $res[$i] = \"Seven\";\n    } elseif ($reverse[$i] == 8) {\n \
    \     $res[$i] = \"Eight\";\n    } elseif ($reverse[$i] == 9) {\n      $res[$i]\
    \ = \"Nine\";\n    }\n  }\n  return $res;\n}\n\n$test = array(1, -1, 55);\nvar_dump(by_length($test));\n\
    \nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "array(1) {\n  [0]=>\n  string(3) \"One\"\n}\n"
  timestamp: 1660028946
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $digits = array(\n    1 => \"One\",\n    2 => \"Two\",\n\
    \    3 => \"Three\",\n    4 => \"Four\",\n    5 => \"Five\",\n    6 => \"Six\"\
    ,\n    7 => \"Seven\",\n    8 => \"Eight\",\n    9 => \"Nine\",\n  );\n  $result\
    \ = array();\n  foreach ($arr as $key => $value) {\n    if (!empty($digits[$value]))\
    \ {\n      $result[] = $digits[$value];\n    }\n  }\n  rsort($result);\n  return\
    \ $result;\n}\n\n$arr = array(\n  2,\n  1,\n  1,\n  4,\n  5,\n  8,\n  2,\n  3,\n\
    );\nvar_dump(by_length($arr));\n\n$arr = array();\nvar_dump(by_length($arr));\n\
    \n$arr = array(\n  1,\n  -1,\n  55,\n);\nvar_dump(by_length($arr));\nfunction\
    \ candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(8) {\n  [0]=>\n  string(3) \"Two\"\n  [1]=>\n  string(3) \"Two\"\n\
    \  [2]=>\n  string(5) \"Three\"\n  [3]=>\n  string(3) \"One\"\n  [4]=>\n  string(3)\
    \ \"One\"\n  [5]=>\n  string(4) \"Four\"\n  [6]=>\n  string(4) \"Five\"\n  [7]=>\n\
    \  string(5) \"Eight\"\n}\narray(0) {\n}\narray(1) {\n  [0]=>\n  string(3) \"\
    One\"\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgcw1b0dg.php:62\n\
    Stack trace:\n#0 /tmp/tmpgcw1b0dg.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpgcw1b0dg.php\
    \ on line 62\n"
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n    foreach ($arr as $key => $value) {\n        if ($value\
    \ < 1 || $value > 9) {\n            unset($arr[$key]);\n        }\n    }\n   \
    \ sort($arr);\n    $arr = array_reverse($arr);\n    foreach ($arr as $key => $value)\
    \ {\n        switch ($value) {\n            case 1:\n                $arr[$key]\
    \ = \"One\";\n                break;\n            case 2:\n                $arr[$key]\
    \ = \"Two\";\n                break;\n            case 3:\n                $arr[$key]\
    \ = \"Three\";\n                break;\n            case 4:\n                $arr[$key]\
    \ = \"Four\";\n                break;\n            case 5:\n                $arr[$key]\
    \ = \"Five\";\n                break;\n            case 6:\n                $arr[$key]\
    \ = \"Six\";\n                break;\n            case 7:\n                $arr[$key]\
    \ = \"Seven\";\n                break;\n            case 8:\n                $arr[$key]\
    \ = \"Eight\";\n                break;\n            case 9:\n                $arr[$key]\
    \ = \"Nine\";\n                break;\n        }\n    }\n    return $arr;\n}\n\
    \n$arr = array(2, 1, 1, 4, 5, 8, 2, 3);\nprint_r(by_length($arr));\necho \"\\\
    n\";\n\n$arr = array();\nprint_r(by_length($arr));\necho \"\\n\";\n\n$arr = array(1,\
    \ -1, 55);\nprint_r(by_length($arr));\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Eight\n    [1] => Five\n    [2] => Four\n    [3] =>\
    \ Three\n    [4] => Two\n    [5] => Two\n    [6] => One\n    [7] => One\n)\n\n\
    Array\n(\n)\n\nArray\n(\n    [0] => One\n)\n\n"
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n    $result = array();\n    $names = array(\"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\");\n \
    \   foreach ($arr as $item) {\n        if ($item >= 1 && $item <= 9) {\n     \
    \       $result[] = $item;\n        }\n    }\n    sort($result);\n    $result\
    \ = array_reverse($result);\n    foreach ($result as $key => $item) {\n      \
    \  $result[$key] = $names[$item - 1];\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028946
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n\t// Initialize the array of numbers to be ordered\n\t$arr_nums\
    \ = array();\n\t\n\t// Get the array of numbers that are between 1 and 9\n\tforeach\
    \ ($arr as $item) {\n\t\tif ($item > 0 && $item < 10) {\n\t\t\t$arr_nums[] = $item;\n\
    \t\t}\n\t}\n\t\n\t// Sort the array of numbers and return\n\trsort($arr_nums);\n\
    \t\n\t// Replace the numbers in the ordered array with the names of the numbers\n\
    \t$arr_nums_named = array();\n\tforeach ($arr_nums as $number) {\n\t\tswitch ($number)\
    \ {\n\t\t\tcase 1:\n\t\t\t\t$arr_nums_named[] = \"One\";\n\t\t\t\tbreak;\n\t\t\
    \tcase 2:\n\t\t\t\t$arr_nums_named[] = \"Two\";\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\
    \t\t\t\t$arr_nums_named[] = \"Three\";\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\t\
    $arr_nums_named[] = \"Four\";\n\t\t\t\tbreak;\n\t\t\tcase 5:\n\t\t\t\t$arr_nums_named[]\
    \ = \"Five\";\n\t\t\t\tbreak;\n\t\t\tcase 6:\n\t\t\t\t$arr_nums_named[] = \"Six\"\
    ;\n\t\t\t\tbreak;\n\t\t\tcase 7:\n\t\t\t\t$arr_nums_named[] = \"Seven\";\n\t\t\
    \t\tbreak;\n\t\t\tcase 8:\n\t\t\t\t$arr_nums_named[] = \"Eight\";\n\t\t\t\tbreak;\n\
    \t\t\tcase 9:\n\t\t\t\t$arr_nums_named[] = \"Nine\";\n\t\t\t\tbreak;\n\t\t}\n\t\
    }\n\t\n\treturn $arr_nums_named;\n}\n\nprint_r(by_length(array(2, 1, 1, 4, 5,\
    \ 8, 2, 3)));\nprint_r(by_length(array()));\nprint_r(by_length(array(\nfunction\
    \ candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpkc5jvniv.php on line 68

    '
  timestamp: 1660028946
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  // [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,\n\
    function candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 14 in /tmp/tmpu0o31b_a.php on line 28

    '
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n\tif (empty($arr)) {\n\t\treturn array();\n\t}\n\n\t$return_arr\
    \ = array();\n\t$numbers = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n\t$numbers_str =\
    \ array(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"\
    Eight\", \"Nine\");\n\n\tforeach ($arr as $key => $value) {\n\t\tif (in_array($value,\
    \ $numbers)) {\n\t\t\t$return_arr[] = $value;\n\t\t}\n\t}\n\n\trsort($return_arr);\n\
    \n\tforeach ($return_arr as $key => $value) {\n\t\t$return_arr[$key] = $numbers_str[$value\
    \ - 1];\n\t}\n\n\treturn $return_arr;\n}\n\necho \"<pre>\";\nprint_r(by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)));\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(by_length(array()));\n\
    echo \"</pre>\";\n\necho \"<pre>\";\nprint_r(by_length(array(1, -1, 55)));\necho\
    \ \"</pre>\";\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => Eight\n    [1] => Five\n    [2] => Four\n   \
    \ [3] => Three\n    [4] => Two\n    [5] => Two\n    [6] => One\n    [7] => One\n\
    )\n</pre><pre>Array\n(\n)\n</pre><pre>Array\n(\n    [0] => One\n)\n</pre>"
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $nums = array('One', 'Two', 'Three', 'Four', 'Five', 'Six',\
    \ 'Seven', 'Eight', 'Nine');\n  $arr = array_filter($arr, function($i) { return\
    \ $i > 0 && $i < 10; });\n  rsort($arr);\n  return array_map(function($num) use\
    \ ($nums) { return $nums[$num - 1]; }, $arr);\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028946
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n    // your code here\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkaistlyx.php:23\n\
    Stack trace:\n#0 /tmp/tmpkaistlyx.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpkaistlyx.php\
    \ on line 23\n"
  timestamp: 1660028946
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n    $result = [];\n    $digits = [\n        1 => 'One',\n\
    \        2 => 'Two',\n        3 => 'Three',\n        4 => 'Four',\n        5 =>\
    \ 'Five',\n        6 => 'Six',\n        7 => 'Seven',\n        8 => 'Eight',\n\
    \        9 => 'Nine'\n    ];\n    foreach ($arr as $val) {\n        if (!in_array($val,\
    \ range(1, 9))) {\n            continue;\n        }\n        $result[] = $digits[$val];\n\
    \    }\n    return array_reverse($result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp41fh_fe3.php:41\n\
    Stack trace:\n#0 /tmp/tmp41fh_fe3.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp41fh_fe3.php\
    \ on line 41\n"
  timestamp: 1660028946
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  for ($i = 0; $i < count($arr); $i++) {\n    $temp = $arr[$i];\n\
    \    for ($j = $i - 1; $j >= 0 && $arr[$j] > $temp; $j--) {\n      $arr[$j + 1]\
    \ = $arr[$j];\n    }\n    $arr[$j + 1] = $temp;\n  }\n  $arr = array_reverse($arr);\n\
    \  for ($i = 0; $i < count($arr); $i++) {\n    switch ($arr[$i]) {\n      case\
    \ 1:\n        $arr[$i] = \"One\";\n        break;\n      case 2:\n        $arr[$i]\
    \ = \"Two\";\n        break;\n      case 3:\n        $arr[$i] = \"Three\";\n \
    \       break;\n      case 4:\n        $arr[$i] = \"Four\";\n        break;\n\
    \      case 5:\n        $arr[$i] = \"Five\";\n        break;\n      case 6:\n\
    \        $arr[$i] = \"Six\";\n        break;\n      case 7:\n        $arr[$i]\
    \ = \"Seven\";\n        break;\n      case 8:\n        $arr[$i] = \"Eight\";\n\
    \        break;\n      case 9:\n        $arr[$i] = \"Nine\";\n        break;\n\
    \      default:\n        unset($arr[$i]);\n        break;\n    }\n  }\n  return\
    \ $arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxua0y3hz.php:67\n\
    Stack trace:\n#0 /tmp/tmpxua0y3hz.php(72): test()\n#1 {main}\n  thrown in /tmp/tmpxua0y3hz.php\
    \ on line 67\n"
  timestamp: 1660028946
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n    // your code here\n}\n$arr = [2, 1, 1, 4, 5, 8, 2, 3];\n\
    $arr = by_length($arr);\n$arr = implode(\", \", $arr);\necho $arr;\n\nfunction\
    \ candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: implode(): Argument #1 ($pieces) must\
    \ be of type array, string given in /tmp/tmpojqc9wed.php:19\nStack trace:\n#0\
    \ /tmp/tmpojqc9wed.php(19): implode(', ', NULL)\n#1 {main}\n  thrown in /tmp/tmpojqc9wed.php\
    \ on line 19\n"
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n\t$array_names = array('One', 'Two', 'Three', 'Four', 'Five',\
    \ 'Six', 'Seven', 'Eight', 'Nine');\n\t$array_numbers = array(1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9);\n\t$arr_nums = array();\n\t$arr_names = array();\n\t$result = array();\n\
    \tforeach ($arr as $key => $value) {\n\t\tif (in_array($value, $array_numbers))\
    \ {\n\t\t\t$arr_nums[] = $value;\n\t\t}\n\t}\n\tsort($arr_nums);\n\tforeach ($arr_nums\
    \ as $key => $value) {\n\t\t$index = array_search($value, $array_numbers);\n\t\
    \t$arr_names[] = $array_names[$index];\n\t}\n\t$result = array_reverse($arr_names);\n\
    \treturn $result;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $names = array(\"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\");\n  $newarr = array();\n  for\
    \ ($i = 0; $i < count($arr); $i++) {\n    if ($arr[$i] > 0 && $arr[$i] < 10) {\n\
    \      array_push($newarr, $arr[$i]);\n    }\n  }\n  if (count($newarr) == 0)\
    \ {\n    return $newarr;\n  }\n  sort($newarr);\n  rsort($newarr);\n  for ($i\
    \ = 0; $i < count($newarr); $i++) {\n    $newarr[$i] = $names[$newarr[$i] - 1];\n\
    \  }\n  return $newarr;\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n    $str = array();\n    foreach ($arr as $digit) {\n   \
    \     if ($digit > 0 && $digit < 10) {\n            $str[] = $digit;\n       \
    \ }\n    }\n    sort($str);\n    $arr = array_reverse($str);\n    foreach ($arr\
    \ as $key => $digit) {\n        switch ($digit) {\n            case 1:\n     \
    \           $arr[$key] = \"One\";\n                break;\n            case 2:\n\
    \                $arr[$key] = \"Two\";\n                break;\n            case\
    \ 3:\n                $arr[$key] = \"Three\";\n                break;\n      \
    \      case 4:\n                $arr[$key] = \"Four\";\n                break;\n\
    \            case 5:\n                $arr[$key] = \"Five\";\n               \
    \ break;\n            case 6:\n                $arr[$key] = \"Six\";\n       \
    \         break;\n            case 7:\n                $arr[$key] = \"Seven\"\
    ;\n                break;\n            case 8:\n                $arr[$key] = \"\
    Eight\";\n                break;\n            case 9:\n                $arr[$key]\
    \ = \"Nine\";\n                break;\n        }\n    }\n    return $arr;\n}\n\
    \nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028946
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $num_map = array(\n    1 => \"One\",\n    2 => \"Two\"\
    ,\n    3 => \"Three\",\n    4 => \"Four\",\n    5 => \"Five\",\n    6 => \"Six\"\
    ,\n    7 => \"Seven\",\n    8 => \"Eight\",\n    9 => \"Nine\",\n  );\n  $my_array\
    \ = array();\n  foreach ($arr as $el) {\n    if (isset($num_map[$el])) {\n   \
    \   $my_array[] = $num_map[$el];\n    }\n  }\n  rsort($my_array);\n  return $my_array;\n\
    }\n\n$ans = by_length(array(2, 1, 1, 4, 5, 8, 2, 3));\nvar_dump($ans);\n$ans =\
    \ by_length(array());\nvar_dump($ans);\n$ans = by_length(array(1, -1, 55));\n\
    var_dump($ans);\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(8) {\n  [0]=>\n  string(3) \"Two\"\n  [1]=>\n  string(3) \"Two\"\n\
    \  [2]=>\n  string(5) \"Three\"\n  [3]=>\n  string(3) \"One\"\n  [4]=>\n  string(3)\
    \ \"One\"\n  [5]=>\n  string(4) \"Four\"\n  [6]=>\n  string(4) \"Five\"\n  [7]=>\n\
    \  string(5) \"Eight\"\n}\narray(0) {\n}\narray(1) {\n  [0]=>\n  string(3) \"\
    One\"\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpohmoekub.php:47\n\
    Stack trace:\n#0 /tmp/tmpohmoekub.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpohmoekub.php\
    \ on line 47\n"
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n    $mapping = array(\n        1 => \"One\",\n        2 =>\
    \ \"Two\",\n        3 => \"Three\",\n        4 => \"Four\",\n        5 => \"Five\"\
    ,\n        6 => \"Six\",\n        7 => \"Seven\",\n        8 => \"Eight\",\n \
    \       9 => \"Nine\"\n    );\n    foreach ($arr as $i => $v) {\n        if (!in_array($v,\
    \ array_keys($mapping))) {\n            unset($arr[$i]);\n        }\n    }\n \
    \   sort($arr);\n    foreach ($arr as $i => $v) {\n        $arr[$i] = $mapping[$v];\n\
    \    }\n    return array_reverse($arr);\n}\nvar_dump(by_length(array(2, 1, 1,\
    \ 4, 5, 8, 2, 3)));\nvar_dump(by_length(array()));\nvar_dump(by_length(array(1,\
    \ -1, 55)));\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "array(8) {\n  [0]=>\n  string(5) \"Eight\"\n  [1]=>\n  string(4) \"Five\"\
    \n  [2]=>\n  string(4) \"Four\"\n  [3]=>\n  string(5) \"Three\"\n  [4]=>\n  string(3)\
    \ \"Two\"\n  [5]=>\n  string(3) \"Two\"\n  [6]=>\n  string(3) \"One\"\n  [7]=>\n\
    \  string(3) \"One\"\n}\narray(0) {\n}\narray(1) {\n  [0]=>\n  string(3) \"One\"\
    \n}\n"
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n    $out = array();\n    $numbers = array(1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9);\n    foreach ($arr as $el) {\n        if (in_array($el, $numbers))\
    \ {\n            $out[] = $el;\n        }\n    }\n    rsort($out);\n    foreach\
    \ ($out as $key => $val) {\n        switch ($val) {\n            case 1:\n   \
    \             $out[$key] = \"One\";\n                break;\n            case\
    \ 2:\n                $out[$key] = \"Two\";\n                break;\n        \
    \    case 3:\n                $out[$key] = \"Three\";\n                break;\n\
    \            case 4:\n                $out[$key] = \"Four\";\n               \
    \ break;\n            case 5:\n                $out[$key] = \"Five\";\n      \
    \          break;\n            case 6:\n                $out[$key] = \"Six\";\n\
    \                break;\n            case 7:\n                $out[$key] = \"\
    Seven\";\n                break;\n            case 8:\n                $out[$key]\
    \ = \"Eight\";\n                break;\n            case 9:\n                $out[$key]\
    \ = \"Nine\";\n                break;\n        }\n    }\n    return $out;\n}\n\
    \nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n    $digits = array(\n        1 => \"One\",\n        2 =>\
    \ \"Two\",\n        3 => \"Three\",\n        4 => \"Four\",\n        5 => \"Five\"\
    ,\n        6 => \"Six\",\n        7 => \"Seven\",\n        8 => \"Eight\",\n \
    \       9 => \"Nine\"\n    );\n    $new_arr = array();\n    for ($i = 0; $i <\
    \ count($arr); $i++) {\n        if ($arr[$i] >= 1 && $arr[$i] <= 9) {\n      \
    \      $new_arr[] = $arr[$i];\n        }\n    }\n    sort($new_arr);\n    $new_arr\
    \ = array_reverse($new_arr);\n    $names = array();\n    for ($i = 0; $i < count($new_arr);\
    \ $i++) {\n        $names[] = $digits[$new_arr[$i]];\n    }\n    return $names;\n\
    }\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028946
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $result = [];\n  foreach ($arr as $key => $value) {\n \
    \   if ($value >= 1 && $value <= 9) {\n      $result[] = $value;\n    }\n  }\n\
    \  sort($result);\n  $result = array_reverse($result);\n  foreach ($result as\
    \ $key => $value) {\n    $result[$key] = $value;\n  }\n  return $result;\n}\n\
    echo \"<pre>\";\nprint_r(by_length(array(2, 1, 1, 4, 5, 8, 2, 3)));\necho \"</pre>\"\
    ;\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => 8\n    [1] => 5\n    [2] => 4\n    [3] => 3\n\
    \    [4] => 2\n    [5] => 2\n    [6] => 1\n    [7] => 1\n)\n</pre>\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpu_c9mcme.php:36\nStack trace:\n\
    #0 /tmp/tmpu_c9mcme.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpu_c9mcme.php\
    \ on line 36\n"
  timestamp: 1660028946
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $ans = array();\n  foreach ($arr as $num) {\n    if ($num\
    \ > 0 && $num < 10) {\n      array_push($ans, $num);\n    }\n  }\n  sort($ans);\n\
    \  $res = array();\n  foreach ($ans as $num) {\n    switch ($num) {\n      case\
    \ 1:\n        array_push($res, \"One\");\n        break;\n      case 2:\n    \
    \    array_push($res, \"Two\");\n        break;\n      case 3:\n        array_push($res,\
    \ \"Three\");\n        break;\n      case 4:\n        array_push($res, \"Four\"\
    );\n        break;\n      case 5:\n        array_push($res, \"Five\");\n     \
    \   break;\n      case 6:\n        array_push($res, \"Six\");\n        break;\n\
    \      case 7:\n        array_push($res, \"Seven\");\n        break;\n      case\
    \ 8:\n        array_push($res, \"Eight\");\n        break;\n      case 9:\n  \
    \      array_push($res, \"Nine\");\n        break;\n    }\n  }\n  return $res;\n\
    }\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphpp7jknr.php:61\n\
    Stack trace:\n#0 /tmp/tmphpp7jknr.php(68): test()\n#1 {main}\n  thrown in /tmp/tmphpp7jknr.php\
    \ on line 61\n"
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n    $arr = array_map(function($number) {\n        return\
    \ is_integer($number) && $number >= 1 && $number <= 9 ? $number : null;\n    },\
    \ $arr);\n    $arr = array_filter($arr);\n    rsort($arr);\n    $arr = array_map(function($number)\
    \ {\n        switch ($number) {\n            case 1:\n                return 'One';\n\
    \            case 2:\n                return 'Two';\n            case 3:\n   \
    \             return 'Three';\n            case 4:\n                return 'Four';\n\
    \            case 5:\n                return 'Five';\n            case 6:\n  \
    \              return 'Six';\n            case 7:\n                return 'Seven';\n\
    \            case 8:\n                return 'Eight';\n            case 9:\n \
    \               return 'Nine';\n        }\n    }, $arr);\n    return $arr;\n}\n\
    \nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n\t$nums = array();\n\tforeach ($arr as $num) {\n\t\tif (1\
    \ <= $num && $num <= 9) {\n\t\t\t$nums[] = $num;\n\t\t}\n\t}\n\tsort($nums);\n\
    \t$nums = array_reverse($nums);\n\t$nums_to_words = array(\n\t\t1 => \"One\",\n\
    \t\t2 => \"Two\",\n\t\t3 => \"Three\",\n\t\t4 => \"Four\",\n\t\t5 => \"Five\"\
    ,\n\t\t6 => \"Six\",\n\t\t7 => \"Seven\",\n\t\t8 => \"Eight\",\n\t\t9 => \"Nine\"\
    \n\t);\n\t$final = array();\n\tforeach ($nums as $num) {\n\t\t$final[] = $nums_to_words[$num];\n\
    \t}\n\treturn $final;\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028946
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n    $result = [];\n    if (count($arr) > 0) {\n        $arr\
    \ = array_filter($arr, function ($value) {\n            return ($value >= 1 &&\
    \ $value <= 9);\n        });\n        $arr = array_values($arr);\n        sort($arr);\n\
    \        $arr = array_reverse($arr);\n        foreach ($arr as $value) {\n   \
    \         $result[] = by_number($value);\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function by_number() in\
    \ /tmp/tmpxgvydntw.php:24\nStack trace:\n#0 /tmp/tmpxgvydntw.php(31): by_length(Array)\n\
    #1 /tmp/tmpxgvydntw.php(35): candidate(Array)\n#2 /tmp/tmpxgvydntw.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmpxgvydntw.php on line 24\n"
  timestamp: 1660028946
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n\t$result = array();\n\tforeach ($arr as $a) {\n\t\tswitch\
    \ ($a) {\n\t\t\tcase 1:\n\t\t\t\t$result[] = \"One\";\n\t\t\t\tbreak;\n\t\t\t\
    case 2:\n\t\t\t\t$result[] = \"Two\";\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\t\
    $result[] = \"Three\";\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\t$result[] = \"\
    Four\";\n\t\t\t\tbreak;\n\t\t\tcase 5:\n\t\t\t\t$result[] = \"Five\";\n\t\t\t\t\
    break;\n\t\t\tcase 6:\n\t\t\t\t$result[] = \"Six\";\n\t\t\t\tbreak;\n\t\t\tcase\
    \ 7:\n\t\t\t\t$result[] = \"Seven\";\n\t\t\t\tbreak;\n\t\t\tcase 8:\n\t\t\t\t\
    $result[] = \"Eight\";\n\t\t\t\tbreak;\n\t\t\tcase 9:\n\t\t\t\t$result[] = \"\
    Nine\";\n\t\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tsort($result);\n\treturn array_reverse($result);\n\
    }\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_bcw87gq.php:57\n\
    Stack trace:\n#0 /tmp/tmp_bcw87gq.php(64): test()\n#1 {main}\n  thrown in /tmp/tmp_bcw87gq.php\
    \ on line 57\n"
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n\t$arr = array_filter($arr, function($v) {\n\t\treturn $v\
    \ < 10 && $v > 0;\n\t});\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr\
    \ = array_map(function($v) {\n\t\treturn $GLOBALS['numbers'][$v - 1];\n\t}, $arr);\n\
    \treturn $arr;\n}\n\n$numbers = array(\"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\");\n\nprint_r(by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)));\necho \"\\n\";\nprint_r(by_length(array()));\necho \"\
    \\n\";\nprint_r(by_length(array(1, -1, 55)));\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Eight\n    [1] => Five\n    [2] => Four\n    [3] =>\
    \ Three\n    [4] => Two\n    [5] => Two\n    [6] => One\n    [7] => One\n)\n\n\
    Array\n(\n)\n\nArray\n(\n    [0] => One\n)\n\n"
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $result = [];\n  $lengths = [9, 8, 7, 6, 5, 4, 3, 2, 1];\n\
    \  $names = [\"Nine\", \"Eight\", \"Seven\", \"Six\", \"Five\", \"Four\", \"Three\"\
    , \"Two\", \"One\"];\n  for ($i = 0; $i < count($lengths); $i++) {\n    for ($j\
    \ = 0; $j < count($arr); $j++) {\n      if ($arr[$j] == $lengths[$i]) {\n    \
    \    array_push($result, $names[$i]);\n      }\n    }\n  }\n  return $result;\n\
    }\n\necho \"<pre>\";\necho print_r(by_length(array(2, 1, 1, 4, 5, 8, 2, 3)), true);\n\
    echo \"</pre>\";\necho \"<br>\";\n\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => Eight\n    [1] => Five\n    [2] => Four\n   \
    \ [3] => Three\n    [4] => Two\n    [5] => Two\n    [6] => One\n    [7] => One\n\
    )\n</pre><br>"
  timestamp: 1660028946
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $hash = array(1 => \"One\", 2 => \"Two\", 3 => \"Three\"\
    , 4 => \"Four\", 5 => \"Five\", 6 => \"Six\", 7 => \"Seven\", 8 => \"Eight\",\
    \ 9 => \"Nine\");\n  $result = array();\n  foreach ($arr as $v) {\n    if (!is_numeric($v)\
    \ || $v < 1 || $v > 9) {\n      continue;\n    }\n    $result[] = $hash[$v];\n\
    \  }\n  return array_reverse($result);\n}\n\nfunction candidate(...$args) {\n\
    \    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqavzp73_.php:31\n\
    Stack trace:\n#0 /tmp/tmpqavzp73_.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpqavzp73_.php\
    \ on line 31\n"
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $digits = array(\n    1 => \"One\",\n    2 => \"Two\",\n\
    \    3 => \"Three\",\n    4 => \"Four\",\n    5 => \"Five\",\n    6 => \"Six\"\
    ,\n    7 => \"Seven\",\n    8 => \"Eight\",\n    9 => \"Nine\",\n  );\n  $nums\
    \ = array();\n  foreach ($arr as $a) {\n    if (isset($digits[$a])) {\n      $nums[]\
    \ = $a;\n    }\n  }\n  sort($nums);\n  $nums = array_reverse($nums);\n  $result\
    \ = array();\n  foreach ($nums as $num) {\n    $result[] = $digits[$num];\n  }\n\
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028946
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n    $result = [];\n    $numArr = [\n        1 => 'One',\n\
    \        2 => 'Two',\n        3 => 'Three',\n        4 => 'Four',\n        5 =>\
    \ 'Five',\n        6 => 'Six',\n        7 => 'Seven',\n        8 => 'Eight',\n\
    \        9 => 'Nine'\n    ];\n    foreach ($arr as $num) {\n        if (in_array($num,\
    \ array_keys($numArr))) {\n            $result[] = $numArr[$num];\n        }\n\
    \    }\n    return array_reverse($result);\n}\nfunction candidate(...$args) {\n\
    \    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps5n9htas.php:39\n\
    Stack trace:\n#0 /tmp/tmps5n9htas.php(46): test()\n#1 {main}\n  thrown in /tmp/tmps5n9htas.php\
    \ on line 39\n"
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n    if (!is_array($arr)) {\n        return false;\n    }\n\
    \n    $sortArr = [];\n    foreach ($arr as $val) {\n        if ($val >= 1 && $val\
    \ <= 9) {\n            $sortArr[] = $val;\n        }\n    }\n\n    sort($sortArr);\n\
    \    $reverseArr = array_reverse($sortArr);\n\n    $nameArr = [\n        1 =>\
    \ 'One',\n        2 => 'Two',\n        3 => 'Three',\n        4 => 'Four',\n \
    \       5 => 'Five',\n        6 => 'Six',\n        7 => 'Seven',\n        8 =>\
    \ 'Eight',\n        9 => 'Nine',\n    ];\n\n    $newArr = [];\n    foreach ($reverseArr\
    \ as $num) {\n        $newArr[] = $nameArr[$num];\n    }\n\n    return $newArr;\n\
    }\n\nvar_dump(by_length(array(2, 1, 1, 4, 5, 8, 2, 3)));\nvar_dump(by_length(array()));\n\
    var_dump(by_length(array(1, -1, 55)));\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "array(8) {\n  [0]=>\n  string(5) \"Eight\"\n  [1]=>\n  string(4) \"Five\"\
    \n  [2]=>\n  string(4) \"Four\"\n  [3]=>\n  string(5) \"Three\"\n  [4]=>\n  string(3)\
    \ \"Two\"\n  [5]=>\n  string(3) \"Two\"\n  [6]=>\n  string(3) \"One\"\n  [7]=>\n\
    \  string(3) \"One\"\n}\narray(0) {\n}\narray(1) {\n  [0]=>\n  string(3) \"One\"\
    \n}\n"
  timestamp: 1660028946
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n\t$arr = array_diff($arr, array(1, 2, 3, 4, 5, 6, 7, 8, 9));\n\
    \t// echo '<pre>';\n\t// print_r($arr);\n\t$arr = array_intersect($arr, array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9));\n\t// print_r($arr);\n\t$len = count($arr);\n\tif\
    \ ($len > 0) {\n\t\tfor ($i = 0; $i < $len; $i++) {\n\t\t\tfor ($j = $i + 1; $j\
    \ < $len; $j++) {\n\t\t\t\tif ($arr[$i] > $arr[$j]) {\n\t\t\t\t\t$temp = $arr[$i];\n\
    \t\t\t\t\t$arr[$i] = $arr[$j];\n\t\t\t\t\t$arr[$j] = $temp;\n\t\t\t\t}\n\t\t\t\
    }\n\t\t}\n\t\t$len = count($arr);\n\t\tfor ($i = 0; $i < $len / 2; $i++) {\n\t\
    \t\t$temp = $arr[$i];\n\t\t\t$arr[$i] = $arr[$len - $i - 1];\n\t\t\t$arr[$len\
    \ - $i - 1] = $temp;\n\t\t}\n\t\tfor ($i = 0; $i < $len; $i++) {\n\t\t\tswitch\
    \ ($arr[$i]) {\n\t\t\t\tcase 1:\n\t\t\t\t\t$arr[$i] = 'One';\n\t\t\t\t\tbreak;\n\
    \t\t\t\tcase 2:\n\t\t\t\t\t$arr[$i] = 'Two';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3:\n\
    \t\t\t\t\t$arr[$i] = 'Three';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 4:\n\t\t\t\t\t$arr[$i]\
    \ = 'Four';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 5:\n\t\t\t\t\t$arr[$i] = 'Five';\n\
    \t\t\t\t\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !==\
    \ array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 38 in /tmp/tmpihyrgokk.php on line 66

    '
  timestamp: 1660028946
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi3lrlmgc.php:22\n\
    Stack trace:\n#0 /tmp/tmpi3lrlmgc.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpi3lrlmgc.php\
    \ on line 22\n"
  timestamp: 1660028946
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n    $str = array(\"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\");\n    $i = 0;\n    $final_arr\
    \ = array();\n    foreach ($arr as $elem) {\n        if ($elem >= 1 && $elem <=\
    \ 9) {\n            $final_arr[$i] = $str[$elem - 1];\n            $i++;\n   \
    \     }\n    }\n    $final_arr = array_reverse($final_arr);\n    return $final_arr;\n\
    }\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp6mkg7ay.php:32\n\
    Stack trace:\n#0 /tmp/tmpp6mkg7ay.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpp6mkg7ay.php\
    \ on line 32\n"
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $new_arr = array();\n  $result = array();\n  foreach ($arr\
    \ as $key => $value) {\n    if ($value >= 1 && $value <= 9) {\n      $new_arr[]\
    \ = $value;\n    }\n  }\n  sort($new_arr);\n  $new_arr = array_reverse($new_arr);\n\
    \  foreach ($new_arr as $key => $value) {\n    if ($value == 1) {\n      $result[]\
    \ = \"One\";\n    } elseif ($value == 2) {\n      $result[] = \"Two\";\n    }\
    \ elseif ($value == 3) {\n      $result[] = \"Three\";\n    } elseif ($value ==\
    \ 4) {\n      $result[] = \"Four\";\n    } elseif ($value == 5) {\n      $result[]\
    \ = \"Five\";\n    } elseif ($value == 6) {\n      $result[] = \"Six\";\n    }\
    \ elseif ($value == 7) {\n      $result[] = \"Seven\";\n    } elseif ($value ==\
    \ 8) {\n      $result[] = \"Eight\";\n    } elseif ($value == 9) {\n      $result[]\
    \ = \"Nine\";\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028946
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $numbers = array_filter($arr, function($n) {\n    return\
    \ $n >= 1 && $n <= 9;\n  });\n  sort($numbers);\n  rsort($numbers);\n  return\
    \ array_map(function($n) {\n    return number_to_name($n);\n  }, $numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function number_to_name()\
    \ in /tmp/tmp2eqaezo_.php:21\nStack trace:\n#0 [internal function]: {closure}(8)\n\
    #1 /tmp/tmp2eqaezo_.php(22): array_map(Object(Closure), Array)\n#2 /tmp/tmp2eqaezo_.php(26):\
    \ by_length(Array)\n#3 /tmp/tmp2eqaezo_.php(30): candidate(Array)\n#4 /tmp/tmp2eqaezo_.php(37):\
    \ test()\n#5 {main}\n  thrown in /tmp/tmp2eqaezo_.php on line 21\n"
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n    $sort = array_intersect($arr, [1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9]);\n    rsort($sort);\n    $out = [];\n    foreach ($sort as $i) {\n     \
    \   switch ($i) {\n            case 1:\n                $out[] = \"One\";\n  \
    \              break;\n            case 2:\n                $out[] = \"Two\";\n\
    \                break;\n            case 3:\n                $out[] = \"Three\"\
    ;\n                break;\n            case 4:\n                $out[] = \"Four\"\
    ;\n                break;\n            case 5:\n                $out[] = \"Five\"\
    ;\n                break;\n            case 6:\n                $out[] = \"Six\"\
    ;\n                break;\n            case 7:\n                $out[] = \"Seven\"\
    ;\n                break;\n            case 8:\n                $out[] = \"Eight\"\
    ;\n                break;\n            case 9:\n                $out[] = \"Nine\"\
    ;\n                break;\n        }\n    }\n    return $out;\n}\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n\t\n\t$output = array();\n\t$nums = array(1 => \"One\", 2\
    \ => \"Two\", 3 => \"Three\", 4 => \"Four\", 5 => \"Five\", 6 => \"Six\", 7 =>\
    \ \"Seven\", 8 => \"Eight\", 9 => \"Nine\");\n\t\n\tforeach ($arr as $val) {\n\
    \t\tif ($val >= 1 && $val <= 9) {\n\t\t\t$output[] = $val;\n\t\t}\n\t}\n\t\n\t\
    rsort($output);\n\t\n\tforeach ($output as $key => $val) {\n\t\t$output[$key]\
    \ = $nums[$val];\n\t}\n\t\n\treturn $output;\n\t\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n    $map = array(\n        1 => \"One\",\n        2 => \"\
    Two\",\n        3 => \"Three\",\n        4 => \"Four\",\n        5 => \"Five\"\
    ,\n        6 => \"Six\",\n        7 => \"Seven\",\n        8 => \"Eight\",\n \
    \       9 => \"Nine\"\n    );\n    $output = array();\n    foreach ($arr as $val)\
    \ {\n        if ($val >= 1 && $val <= 9) {\n            $output[] = $val;\n  \
    \      }\n    }\n    rsort($output);\n    foreach ($output as $key => $val) {\n\
    \        $output[$key] = $map[$val];\n    }\n    return $output;\n}\n\nvar_dump(by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)));\nvar_dump(by_length(array()));\nvar_dump(by_length(array(1,\
    \ -1, 55)));\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "array(8) {\n  [0]=>\n  string(5) \"Eight\"\n  [1]=>\n  string(4) \"Five\"\
    \n  [2]=>\n  string(4) \"Four\"\n  [3]=>\n  string(5) \"Three\"\n  [4]=>\n  string(3)\
    \ \"Two\"\n  [5]=>\n  string(3) \"Two\"\n  [6]=>\n  string(3) \"One\"\n  [7]=>\n\
    \  string(3) \"One\"\n}\narray(0) {\n}\narray(1) {\n  [0]=>\n  string(3) \"One\"\
    \n}\n"
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n\t$arr = array_filter($arr, function($val) {\n\t\treturn\
    \ $val >= 1 && $val <= 9;\n\t});\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\
    \t$arr = array_map(function($val) {\n\t\t$map = array(\n\t\t\t1 => \"One\",\n\t\
    \t\t2 => \"Two\",\n\t\t\t3 => \"Three\",\n\t\t\t4 => \"Four\",\n\t\t\t5 => \"\
    Five\",\n\t\t\t6 => \"Six\",\n\t\t\t7 => \"Seven\",\n\t\t\t8 => \"Eight\",\n\t\
    \t\t9 => \"Nine\"\n\t\t);\n\t\treturn $map[$val];\n\t}, $arr);\n\treturn $arr;\n\
    }\n\nprint_r(by_length(array(2, 1, 1, 4, 5, 8, 2, 3)));\nprint_r(by_length(array()));\n\
    print_r(by_length(array(1, -1, 55)));\n\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Eight\n    [1] => Five\n    [2] => Four\n    [3] =>\
    \ Three\n    [4] => Two\n    [5] => Two\n    [6] => One\n    [7] => One\n)\nArray\n\
    (\n)\nArray\n(\n    [0] => One\n)\n"
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n    $new_arr = array();\n    $words = array(\"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\");\n \
    \   foreach ($arr as $value) {\n        if ($value >= 1 && $value <= 9) {\n  \
    \          $new_arr[] = $value;\n        }\n    }\n    sort($new_arr);\n    foreach\
    \ ($new_arr as $key => $value) {\n        $new_arr[$key] = $words[$value - 1];\n\
    \    }\n    return array_reverse($new_arr);\n}\n$input = array(2, 1, 1, 4, 5,\
    \ 8, 2, 3);\nprint_r(by_length($input));\necho \"<br />\";\n$input = array();\n\
    print_r(by_length($input));\necho \"<br />\";\n$input = array(1, -1, 55);\nprint_r(by_length($input));\n\
    echo \"<br />\";\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Eight\n    [1] => Five\n    [2] => Four\n    [3] =>\
    \ Three\n    [4] => Two\n    [5] => Two\n    [6] => One\n    [7] => One\n)\n<br\
    \ />Array\n(\n)\n<br />Array\n(\n    [0] => One\n)\n<br />"
  timestamp: 1660028946
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n\t$integers = [];\n\t$non_integers = [];\n\tforeach ($arr\
    \ as $value) {\n\t\tif (is_int($value) && ($value > 0 && $value < 10)) {\n\t\t\
    \t$integers[] = $value;\n\t\t} else {\n\t\t\t$non_integers[] = $value;\n\t\t}\n\
    \t}\n\t$numbers = [];\n\tforeach ($integers as $value) {\n\t\tswitch ($value)\
    \ {\n\t\t\tcase 1:\n\t\t\t\t$numbers[] = \"One\";\n\t\t\t\tbreak;\n\t\t\tcase\
    \ 2:\n\t\t\t\t$numbers[] = \"Two\";\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\t$numbers[]\
    \ = \"Three\";\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\t$numbers[] = \"Four\";\n\
    \t\t\t\tbreak;\n\t\t\tcase 5:\n\t\t\t\t$numbers[] = \"Five\";\n\t\t\t\tbreak;\n\
    \t\t\tcase 6:\n\t\t\t\t$numbers[] = \"Six\";\n\t\t\t\tbreak;\n\t\t\tcase 7:\n\t\
    \t\t\t$numbers[] = \"Seven\";\n\t\t\t\tbreak;\n\t\t\tcase 8:\n\t\t\t\t$numbers[]\
    \ = \"Eight\";\n\t\t\t\tbreak;\n\t\t\tcase 9:\n\t\t\t\t$numbers[] = \"Nine\";\n\
    \t\t\t\tbreak;\n\t\t}\n\t}\n\tsort($numbers);\n\t$result = array_reverse($numbers);\n\
    \treturn $result;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp85ivipe4.php:66\n\
    Stack trace:\n#0 /tmp/tmp85ivipe4.php(73): test()\n#1 {main}\n  thrown in /tmp/tmp85ivipe4.php\
    \ on line 66\n"
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n    sort($arr);\n    $res = array();\n    $digits = array(\"\
    \", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\");\n    for ($i = count($arr) - 1; $i >= 0; $i--) {\n        if ($arr[$i]\
    \ >= 1 && $arr[$i] <= 9) {\n            $res[] = $digits[$arr[$i]];\n        }\n\
    \    }\n    return $res;\n}\necho \"<pre>\";\nprint_r(by_length(array(2, 1, 1,\
    \ 4, 5, 8, 2, 3)));\nprint_r(by_length(array()));\nprint_r(by_length(array(1,\
    \ -1, 55)));\necho \"</pre>\";\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => Eight\n    [1] => Five\n    [2] => Four\n   \
    \ [3] => Three\n    [4] => Two\n    [5] => Two\n    [6] => One\n    [7] => One\n\
    )\nArray\n(\n)\nArray\n(\n    [0] => One\n)\n</pre>"
  timestamp: 1660028946
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  // your code goes here\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfqn18ajr.php:23\n\
    Stack trace:\n#0 /tmp/tmpfqn18ajr.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpfqn18ajr.php\
    \ on line 23\n"
  timestamp: 1660028946
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $result = array();\n  foreach ($arr as $element) {\n  \
    \  if (in_array($element, range(1, 9))) {\n      $result[] = $element;\n    }\n\
    \  }\n  sort($result);\n  $reversed = array_reverse($result);\n  $res = array();\n\
    \  foreach ($reversed as $num) {\n    $res[] = switch_num($num);\n  }\n  return\
    \ $res;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function switch_num()\
    \ in /tmp/tmpm9x9blb9.php:25\nStack trace:\n#0 /tmp/tmpm9x9blb9.php(31): by_length(Array)\n\
    #1 /tmp/tmpm9x9blb9.php(35): candidate(Array)\n#2 /tmp/tmpm9x9blb9.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmpm9x9blb9.php on line 25\n"
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n\tif (count($arr) == 0) {\n\t\treturn $arr;\n\t}\n\t$filtered_array\
    \ = array();\n\t$numbers = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n\tforeach ($arr\
    \ as $num) {\n\t\tif (in_array($num, $numbers)) {\n\t\t\tarray_push($filtered_array,\
    \ $num);\n\t\t}\n\t}\n\tsort($filtered_array);\n\t$reversed_array = array_reverse($filtered_array);\n\
    \t$converted_array = array();\n\tforeach ($reversed_array as $num) {\n\t\tswitch\
    \ ($num) {\n\t\t\tcase 1:\n\t\t\t\tarray_push($converted_array, \"One\");\n\t\t\
    \t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tarray_push($converted_array, \"Two\");\n\t\t\
    \t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tarray_push($converted_array, \"Three\");\n\t\
    \t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\tarray_push($converted_array, \"Four\");\n\
    \t\t\t\tbreak;\n\t\t\tcase 5:\n\t\t\t\tarray_push($converted_array, \"Five\");\n\
    \t\t\t\tbreak;\n\t\t\tcase 6:\n\t\t\t\tarray_push($converted_array, \"Six\");\n\
    \t\t\t\tbreak;\n\t\t\tcase 7:\n\t\t\t\tarray_push($converted_array, \"Seven\"\
    );\n\t\t\t\tbreak;\n\t\t\tcase 8:\n\t\t\t\tarray_push($converted_array, \"Eight\"\
    );\n\t\t\t\tbreak;\n\t\t\tcase 9:\n\t\t\t\tarray_push($converted_array, \"Nine\"\
    );\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn $converted_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n    $digits = [\n        1 => 'One',\n        2 => 'Two',\n\
    \        3 => 'Three',\n        4 => 'Four',\n        5 => 'Five',\n        6\
    \ => 'Six',\n        7 => 'Seven',\n        8 => 'Eight',\n        9 => 'Nine'\n\
    \    ];\n    foreach ($arr as $key => $value) {\n        if ($value < 1 || $value\
    \ > 9) {\n            unset($arr[$key]);\n        }\n    }\n    sort($arr);\n\
    \    $arr = array_reverse($arr);\n    foreach ($arr as $key => $value) {\n   \
    \     $arr[$key] = $digits[$value];\n    }\n    return $arr;\n}\n\nassert_options(ASSERT_BAIL,\
    \ 1);\nassert(by_length(array(2, 1, 1, 4, 5, 8, 2, 3)) == array(\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"));\nassert(by_length(array())\
    \ == array());\nassert(by_length(array(1, -1, 55)) == array(\"One\"));\nfunction\
    \ candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $res = $arr;\n  foreach ($res as $key => $value) {\n  \
    \  if ($value < 1 || $value > 9) {\n      unset($res[$key]);\n    }\n  }\n  sort($res);\n\
    \  $res = array_reverse($res);\n  $res = array_map(function($value) {\n    switch\
    \ ($value) {\n      case 1:\n        return \"One\";\n        break;\n      case\
    \ 2:\n        return \"Two\";\n        break;\n      case 3:\n        return \"\
    Three\";\n        break;\n      case 4:\n        return \"Four\";\n        break;\n\
    \      case 5:\n        return \"Five\";\n        break;\n      case 6:\n    \
    \    return \"Six\";\n        break;\n      case 7:\n        return \"Seven\"\
    ;\n        break;\n      case 8:\n        return \"Eight\";\n        break;\n\
    \      case 9:\n        return \"Nine\";\n        break;\n    }\n  }, $res);\n\
    \  return $res;\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028946
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  // Your code here\n}\nfunction candidate(...$args) {\n\
    \    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp63y74vzc.php:22\n\
    Stack trace:\n#0 /tmp/tmp63y74vzc.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp63y74vzc.php\
    \ on line 22\n"
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n    $sort_arr = [];\n    $desc_arr = [];\n    foreach ($arr\
    \ as $val) {\n        if ($val < 10 && $val > 0) {\n            $sort_arr[] =\
    \ $val;\n        }\n    }\n    sort($sort_arr);\n    foreach ($sort_arr as $key\
    \ => $val) {\n        $desc_arr[$key] = $val;\n    }\n    $desc_arr = array_reverse($desc_arr);\n\
    \    $transform_arr = [];\n    foreach ($desc_arr as $key => $val) {\n       \
    \ if ($val == 1) {\n            $transform_arr[$key] = \"One\";\n        } elseif\
    \ ($val == 2) {\n            $transform_arr[$key] = \"Two\";\n        } elseif\
    \ ($val == 3) {\n            $transform_arr[$key] = \"Three\";\n        } elseif\
    \ ($val == 4) {\n            $transform_arr[$key] = \"Four\";\n        } elseif\
    \ ($val == 5) {\n            $transform_arr[$key] = \"Five\";\n        } elseif\
    \ ($val == 6) {\n            $transform_arr[$key] = \"Six\";\n        } elseif\
    \ ($val == 7) {\n            $transform_arr[$key] = \"Seven\";\n        } elseif\
    \ ($val == 8) {\n            $transform_arr[$key] = \"Eight\";\n        } elseif\
    \ ($val == 9) {\n            $transform_arr[$key] = \"Nine\";\n        }\n   \
    \ }\n    return $transform_arr;\n}\nprint_r(by_length(array(2, 1, 1, 4, 5, 8,\
    \ 2, 3)));\nprint_r(by_length(array()));\nprint_r(by_length(array(1, -1, 55)));\n\
    function candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Eight\n    [1] => Five\n    [2] => Four\n    [3] =>\
    \ Three\n    [4] => Two\n    [5] => Two\n    [6] => One\n    [7] => One\n)\nArray\n\
    (\n)\nArray\n(\n    [0] => One\n)\n"
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $strArr = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  $sortArr = [];\n  $result = [];\n\
    \  foreach ($arr as $key => $value) {\n    if($value > 0 && $value < 10) {\n \
    \     $sortArr[] = $value;\n    }\n  }\n  rsort($sortArr);\n  foreach ($sortArr\
    \ as $key => $value) {\n    $result[] = $strArr[$value - 1];\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028946
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  return array_map(function($digit) {\n    return array(\"\
    \", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\")[$digit];\n  }, array_reverse(array_filter($arr, function($digit) {\n\
    \    return ($digit > 0 && $digit < 10);\n  })));\n}\nprint_r(by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)));\nprint_r(by_length(array()));\nprint_r(by_length(array(1,\
    \ -1, 55)));\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Three\n    [1] => Two\n    [2] => Eight\n    [3] =>\
    \ Five\n    [4] => Four\n    [5] => One\n    [6] => One\n    [7] => Two\n)\nArray\n\
    (\n)\nArray\n(\n    [0] => One\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpatd3cmv5.php:29\nStack trace:\n#0 /tmp/tmpatd3cmv5.php(36): test()\n\
    #1 {main}\n  thrown in /tmp/tmpatd3cmv5.php on line 29\n"
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n    $new_arr = array();\n    $nums = array(1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9);\n    foreach ($arr as $n) {\n        if (in_array($n, $nums)) {\n\
    \            $new_arr[] = $n;\n        }\n    }\n    sort($new_arr);\n    $names\
    \ = array(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\");\n    $names_arr = array();\n    foreach ($new_arr as $n)\
    \ {\n        $names_arr[] = $names[$n - 1];\n    }\n    return array_reverse($names_arr);\n\
    }\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n    $to_sort = array();\n    $output = array();\n    for\
    \ ($i = 0; $i < count($arr); $i++) {\n        if ($arr[$i] > 0 && $arr[$i] < 10)\
    \ {\n            array_push($to_sort, $arr[$i]);\n        }\n    }\n    sort($to_sort);\n\
    \    $to_sort = array_reverse($to_sort);\n    for ($i = 0; $i < count($to_sort);\
    \ $i++) {\n        if ($to_sort[$i] == 1) {\n            array_push($output, \"\
    One\");\n        } elseif ($to_sort[$i] == 2) {\n            array_push($output,\
    \ \"Two\");\n        } elseif ($to_sort[$i] == 3) {\n            array_push($output,\
    \ \"Three\");\n        } elseif ($to_sort[$i] == 4) {\n            array_push($output,\
    \ \"Four\");\n        } elseif ($to_sort[$i] == 5) {\n            array_push($output,\
    \ \"Five\");\n        } elseif ($to_sort[$i] == 6) {\n            array_push($output,\
    \ \"Six\");\n        } elseif ($to_sort[$i] == 7) {\n            array_push($output,\
    \ \"Seven\");\n        } elseif ($to_sort[$i] == 8) {\n            array_push($output,\
    \ \"Eight\");\n        } elseif ($to_sort[$i] == 9) {\n            array_push($output,\
    \ \"Nine\");\n        }\n    }\n    return $output;\n}\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n    $new_arr = array();\n    $nums = array('One', 'Two',\
    \ 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine');\n    if (empty($arr))\n\
    \        return $new_arr;\n    for ($i = 0; $i < count($arr); $i++) {\n      \
    \  if ($arr[$i] > 0 && $arr[$i] < 10) {\n            array_push($new_arr, $arr[$i]);\n\
    \        }\n    }\n    sort($new_arr);\n    $new_arr = array_reverse($new_arr);\n\
    \    for ($i = 0; $i < count($new_arr); $i++) {\n        $new_arr[$i] = $nums[$new_arr[$i]\
    \ - 1];\n    }\n    return $new_arr;\n}\n\nfunction candidate(...$args) {\n  \
    \  return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028946
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n    if(empty($arr)) {\n        return array();\n    }\n \
    \   foreach($arr as $key => $val) {\n        if(!in_array($val, range(1, 9)))\
    \ {\n            unset($arr[$key]);\n        }\n    }\n    sort($arr);\n    $arr\
    \ = array_reverse($arr);\n    return digit_to_string($arr);\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function digit_to_string()\
    \ in /tmp/tmpvuaqpkvm.php:25\nStack trace:\n#0 /tmp/tmpvuaqpkvm.php(29): by_length(Array)\n\
    #1 /tmp/tmpvuaqpkvm.php(33): candidate(Array)\n#2 /tmp/tmpvuaqpkvm.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpvuaqpkvm.php on line 25\n"
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n\t$i = 0;\n\t$new_arr = array();\n\tforeach ($arr as $val)\
    \ {\n\t\tif ($val >= 1 && $val <= 9) {\n\t\t\t$new_arr[$i] = $val;\n\t\t\t$i++;\n\
    \t\t}\n\t}\n\tsort($new_arr);\n\t$reversed_arr = array_reverse($new_arr);\n\t\
    foreach ($reversed_arr as $key => $val) {\n\t\tswitch ($val) {\n\t\t\tcase 1:\n\
    \t\t\t\t$reversed_arr[$key] = \"One\";\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\t\
    $reversed_arr[$key] = \"Two\";\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\t$reversed_arr[$key]\
    \ = \"Three\";\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\t$reversed_arr[$key] = \"\
    Four\";\n\t\t\t\tbreak;\n\t\t\tcase 5:\n\t\t\t\t$reversed_arr[$key] = \"Five\"\
    ;\n\t\t\t\tbreak;\n\t\t\tcase 6:\n\t\t\t\t$reversed_arr[$key] = \"Six\";\n\t\t\
    \t\tbreak;\n\t\t\tcase 7:\n\t\t\t\t$reversed_arr[$key] = \"Seven\";\n\t\t\t\t\
    break;\n\t\t\tcase 8:\n\t\t\t\t$reversed_arr[$key] = \"Eight\";\n\t\t\t\tbreak;\n\
    \t\t\tcase 9:\n\t\t\t\t$reversed_arr[$key] = \"Nine\";\n\t\t\t\tbreak;\n\t\t}\n\
    \t}\n\treturn $reversed_arr;\n}\n\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n    $sorted = array();\n    for ($i = 0; $i < count($arr);\
    \ $i++) {\n        if ($arr[$i] > 0 && $arr[$i] < 10) {\n            array_push($sorted,\
    \ $arr[$i]);\n        }\n    }\n    sort($sorted);\n    $lengths = array();\n\
    \    for ($i = 0; $i < count($sorted); $i++) {\n        $digit = $sorted[$i];\n\
    \        switch ($digit) {\n            case 1:\n                array_push($lengths,\
    \ \"One\");\n                break;\n            case 2:\n                array_push($lengths,\
    \ \"Two\");\n                break;\n            case 3:\n                array_push($lengths,\
    \ \"Three\");\n                break;\n            case 4:\n                array_push($lengths,\
    \ \"Four\");\n                break;\n            case 5:\n                array_push($lengths,\
    \ \"Five\");\n                break;\n            case 6:\n                array_push($lengths,\
    \ \"Six\");\n                break;\n            case 7:\n                array_push($lengths,\
    \ \"Seven\");\n                break;\n            case 8:\n                array_push($lengths,\
    \ \"Eight\");\n                break;\n            case 9:\n                array_push($lengths,\
    \ \"Nine\");\n                break;\n        }\n    }\n    return array_reverse($lengths);\n\
    }\nprint_r(by_length(array(2, 1, 1, 4, 5, 8, 2, 3)));\nprint_r(by_length(array()));\n\
    print_r(by_length(array(1, -1, 55)));\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Eight\n    [1] => Five\n    [2] => Four\n    [3] =>\
    \ Three\n    [4] => Two\n    [5] => Two\n    [6] => One\n    [7] => One\n)\nArray\n\
    (\n)\nArray\n(\n    [0] => One\n)\n"
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n\t$nums = array();\n\t$words = array();\n\tforeach ($arr\
    \ as $key => $value) {\n\t\tif ($value > 0 && $value < 10) {\n\t\t\t$nums[] =\
    \ $value;\n\t\t}\n\t}\n\tsort($nums);\n\t$rev = array_reverse($nums);\n\tforeach\
    \ ($rev as $key => $value) {\n\t\tif ($value == 1) {\n\t\t\t$words[] = \"One\"\
    ;\n\t\t} elseif ($value == 2) {\n\t\t\t$words[] = \"Two\";\n\t\t} elseif ($value\
    \ == 3) {\n\t\t\t$words[] = \"Three\";\n\t\t} elseif ($value == 4) {\n\t\t\t$words[]\
    \ = \"Four\";\n\t\t} elseif ($value == 5) {\n\t\t\t$words[] = \"Five\";\n\t\t\
    } elseif ($value == 6) {\n\t\t\t$words[] = \"Six\";\n\t\t} elseif ($value == 7)\
    \ {\n\t\t\t$words[] = \"Seven\";\n\t\t} elseif ($value == 8) {\n\t\t\t$words[]\
    \ = \"Eight\";\n\t\t} elseif ($value == 9) {\n\t\t\t$words[] = \"Nine\";\n\t\t\
    }\n\t}\n\treturn $words;\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n    $numbers = array();\n    for ($i = 0; $i < count($arr);\
    \ $i++) {\n        if ($arr[$i] > 0 && $arr[$i] < 10) {\n            array_push($numbers,\
    \ $arr[$i]);\n        }\n    }\n    sort($numbers);\n    $texts = array(\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    );\n    $numbers = array_reverse($numbers);\n    for ($i = 0; $i < count($numbers);\
    \ $i++) {\n        $numbers[$i] = $texts[$numbers[$i] - 1];\n    }\n    return\
    \ $numbers;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n    // Convert the array to a associative array by using\
    \ the integer as the key and the string as the value\n    $int_to_str = array(\n\
    \        1 => \"One\",\n        2 => \"Two\",\n        3 => \"Three\",\n     \
    \   4 => \"Four\",\n        5 => \"Five\",\n        6 => \"Six\",\n        7 =>\
    \ \"Seven\",\n        8 => \"Eight\",\n        9 => \"Nine\"\n    );\n    // Filter\
    \ the array to only integers that between 1 and 9\n    $filtered_arr = array_filter($arr,\
    \ function($var) {\n        return (is_int($var) && $var > 0 && $var < 10);\n\
    \    });\n    // Sort the array\n    sort($filtered_arr);\n    // Reverse the\
    \ array\n    $filtered_arr = array_reverse($filtered_arr);\n    // Convert the\
    \ array to a associative array by using the integer as the key and the string\
    \ as the value\n    $filtered_arr = array_map(function($var) use ($int_to_str)\
    \ {\n        return $int_to_str[$var];\n    }, $filtered_arr);\n    return $filtered_arr;\n\
    }\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $ret = [];\n  foreach ($arr as $el) {\n    if (1 <= $el\
    \ && $el <= 9) {\n      $ret[] = $el;\n    }\n  }\n  sort($ret);\n  $ret = array_reverse($ret);\n\
    \  $translation = [\n    \"One\",\n    \"Two\",\n    \"Three\",\n    \"Four\"\
    ,\n    \"Five\",\n    \"Six\",\n    \"Seven\",\n    \"Eight\",\n    \"Nine\",\n\
    \  ];\n  foreach ($ret as &$el) {\n    $el = $translation[$el - 1];\n  }\n  return\
    \ $ret;\n}\necho implode(\", \", by_length(array(2, 1, 1, 4, 5, 8, 2, 3))), \"\
    \\n\";\necho implode(\", \", by_length(array())), \"\\n\";\necho implode(\", \"\
    , by_length(array(1, -1, 55))), \"\\n\";\nfunction candidate(...$args) {\n   \
    \ return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Eight, Five, Four, Three, Two, Two, One, One


    One

    '
  timestamp: 1660028946
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n    $nums = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n    $result\
    \ = array();\n    $names = array(\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\");\n    foreach ($arr as $val) {\n  \
    \      if (in_array($val, $nums)) {\n            $result[] = $val;\n        }\n\
    \    }\n    sort($result);\n    $res = array();\n    foreach ($result as $val)\
    \ {\n        $index = array_search($val, $nums);\n        $res[] = $names[$index];\n\
    \    }\n    return $res;\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0oxna86j.php:36\n\
    Stack trace:\n#0 /tmp/tmp0oxna86j.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp0oxna86j.php\
    \ on line 36\n"
  timestamp: 1660028946
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1euk3_w4.php:22\n\
    Stack trace:\n#0 /tmp/tmp1euk3_w4.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp1euk3_w4.php\
    \ on line 22\n"
  timestamp: 1660028946
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  // Write your code here...\n}\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj4ua48v7.php:22\n\
    Stack trace:\n#0 /tmp/tmpj4ua48v7.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpj4ua48v7.php\
    \ on line 22\n"
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n\t\n\t$result = array();\n\tif (is_array($arr)) {\n\t\tif\
    \ (!empty($arr)) {\n\t\t\tforeach ($arr as $num) {\n\t\t\t\tif ($num >= 1 && $num\
    \ <= 9) {\n\t\t\t\t\t$result[] = $num;\n\t\t\t\t}\n\t\t\t}\n\t\t\tsort($result);\n\
    \t\t\t$result = array_reverse($result);\n\t\t\tforeach ($result as $index => $num)\
    \ {\n\t\t\t\tswitch ($num) {\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\t$result[$index] =\
    \ \"One\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\t$result[$index]\
    \ = \"Two\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\t$result[$index]\
    \ = \"Three\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 4:\n\t\t\t\t\t\t$result[$index]\
    \ = \"Four\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 5:\n\t\t\t\t\t\t$result[$index]\
    \ = \"Five\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 6:\n\t\t\t\t\t\t$result[$index]\
    \ = \"Six\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 7:\n\t\t\t\t\t\t$result[$index]\
    \ = \"Seven\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 8:\n\t\t\t\t\t\t$result[$index]\
    \ = \"Eight\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 9:\n\t\t\t\t\t\t$result[$index]\
    \ = \"Nine\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn $result;\n\
    }\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n    $names = array(\n        1 => \"One\",\n        2 =>\
    \ \"Two\",\n        3 => \"Three\",\n        4 => \"Four\",\n        5 => \"Five\"\
    ,\n        6 => \"Six\",\n        7 => \"Seven\",\n        8 => \"Eight\",\n \
    \       9 => \"Nine\",\n    );\n    $ints = array();\n    foreach ($arr as $val)\
    \ {\n        if (array_key_exists($val, $names)) {\n            $ints[] = $val;\n\
    \        }\n    }\n    sort($ints);\n    $ints = array_reverse($ints);\n    $result\
    \ = array();\n    foreach ($ints as $key => $val) {\n        $result[] = $names[$val];\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n    $new_arr = array();\n    foreach ($arr as $v) {\n   \
    \     if ($v >= 1 && $v <= 9) {\n            $new_arr[] = $v;\n        }\n   \
    \ }\n    sort($new_arr);\n    $new_arr = array_reverse($new_arr);\n    $result\
    \ = array();\n    foreach ($new_arr as $v) {\n        switch ($v) {\n        \
    \    case 1:\n                $result[] = \"One\";\n                break;\n \
    \           case 2:\n                $result[] = \"Two\";\n                break;\n\
    \            case 3:\n                $result[] = \"Three\";\n               \
    \ break;\n            case 4:\n                $result[] = \"Four\";\n       \
    \         break;\n            case 5:\n                $result[] = \"Five\";\n\
    \                break;\n            case 6:\n                $result[] = \"Six\"\
    ;\n                break;\n            case 7:\n                $result[] = \"\
    Seven\";\n                break;\n            case 8:\n                $result[]\
    \ = \"Eight\";\n                break;\n            case 9:\n                $result[]\
    \ = \"Nine\";\n                break;\n        }\n    }\n    return $result;\n\
    }\nprint_r(by_length(array(2, 1, 1, 4, 5, 8, 2, 3)));\nprint_r(by_length(array()));\n\
    print_r(by_length(array(1, -1, 55)));\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Eight\n    [1] => Five\n    [2] => Four\n    [3] =>\
    \ Three\n    [4] => Two\n    [5] => Two\n    [6] => One\n    [7] => One\n)\nArray\n\
    (\n)\nArray\n(\n    [0] => One\n)\n"
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n\tif(empty($arr)) {\n\t\treturn array();\n\t}\n\n\t$names\
    \ = array(1 => \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\");\n\t$result = array();\n\t$reverse = array();\n\n\t// sort\n\
    \tfor($i = 1; $i <= 9; $i++) {\n\t\tforeach($arr as $key => $value) {\n\t\t\t\
    if($value == $i) {\n\t\t\t\t$result[] = $value;\n\t\t\t\tunset($arr[$key]);\n\t\
    \t\t}\n\t\t}\n\t}\n\n\t// reverse\n\tfor($i = count($result) - 1; $i >= 0; $i--)\
    \ {\n\t\t$reverse[] = $result[$i];\n\t}\n\n\t$final = array();\n\tforeach($reverse\
    \ as $key => $value) {\n\t\t$final[] = $names[$value];\n\t}\n\n\treturn $final;\n\
    }\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028946
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n    $numbers = array();\n    $keys = array();\n    $names\
    \ = array(\n        1 => \"One\",\n        2 => \"Two\",\n        3 => \"Three\"\
    ,\n        4 => \"Four\",\n        5 => \"Five\",\n        6 => \"Six\",\n   \
    \     7 => \"Seven\",\n        8 => \"Eight\",\n        9 => \"Nine\"\n    );\n\
    \    foreach ($arr as $key => $value) {\n        if ($value > 0 && $value < 10)\
    \ {\n            $numbers[] = $value;\n            $keys[] = $key;\n        }\n\
    \    }\n    sort($numbers);\n    sort($keys);\n    foreach ($keys as $key) {\n\
    \        unset($arr[$key]);\n    }\n    foreach ($numbers as $key => $value) {\n\
    \        $arr[] = $names[$value];\n    }\n    return $arr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5xjhkskm.php:50\n\
    Stack trace:\n#0 /tmp/tmp5xjhkskm.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp5xjhkskm.php\
    \ on line 50\n"
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n\t$numerals = array(\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\");\n\t$new_arr = array();\n\
    \tforeach ($arr as $int) {\n\t\tif ($int > 0 && $int < 10) {\n\t\t\t$new_arr[]\
    \ = $int;\n\t\t}\n\t}\n\tsort($new_arr);\n\trsort($new_arr);\n\tforeach ($new_arr\
    \ as $k => $v) {\n\t\t$new_arr[$k] = $numerals[$v - 1];\n\t}\n\treturn $new_arr;\n\
    }\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028946
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n    $digits = range(1, 9);\n    $result = array();\n    foreach\
    \ ($arr as $value) {\n        if (in_array($value, $digits)) {\n            $result[]\
    \ = $value;\n        }\n    }\n    sort($result);\n    $result = array_reverse($result);\n\
    \    foreach ($result as $key => $value) {\n        $result[$key] = getDigitName($value);\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function getDigitName()\
    \ in /tmp/tmp6ig676hk.php:25\nStack trace:\n#0 /tmp/tmp6ig676hk.php(31): by_length(Array)\n\
    #1 /tmp/tmp6ig676hk.php(35): candidate(Array)\n#2 /tmp/tmp6ig676hk.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmp6ig676hk.php on line 25\n"
  timestamp: 1660028946
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n    $result = [];\n    $intArr = [1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9];\n    $intArrEn = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\"];\n    if (!empty($arr)) {\n        foreach ($arr\
    \ as $elem) {\n            if (in_array($elem, $intArr)) {\n                $result[]\
    \ = $elem;\n            }\n        }\n        sort($result);\n        $result\
    \ = array_reverse($result);\n        foreach ($result as $elem) {\n          \
    \  $key = array_search($elem, $intArr);\n            $result[$key] = $intArrEn[$key];\n\
    \        }\n    }\n    return $result;\n}\nprint_r(by_length(array(2, 1, 1, 4,\
    \ 5, 8, 2, 3)));\nprint_r(by_length(array()));\nprint_r(by_length(array(1, -1,\
    \ 55)));\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !==\
    \ array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => One\n    [1] => Two\n    [2] => Three\n    [3] =>\
    \ Four\n    [4] => Five\n    [5] => 2\n    [6] => 1\n    [7] => Eight\n)\nArray\n\
    (\n)\nArray\n(\n    [0] => One\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpx08ft1z4.php:41\nStack trace:\n#0 /tmp/tmpx08ft1z4.php(48): test()\n\
    #1 {main}\n  thrown in /tmp/tmpx08ft1z4.php on line 41\n"
  timestamp: 1660028946
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n\t$arr = array_unique($arr);\n\tsort($arr);\n\t$new_arr =\
    \ array();\n\tforeach ($arr as $key => $value) {\n\t\tif ($value > 0 && $value\
    \ < 10) {\n\t\t\tswitch ($value) {\n\t\t\t\tcase 1:\n\t\t\t\t\t$new_arr[] = \"\
    One\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\t$new_arr[] = \"Two\";\n\t\
    \t\t\t\tbreak;\n\t\t\t\tcase 3:\n\t\t\t\t\t$new_arr[] = \"Three\";\n\t\t\t\t\t\
    break;\n\t\t\t\tcase 4:\n\t\t\t\t\t$new_arr[] = \"Four\";\n\t\t\t\t\tbreak;\n\t\
    \t\t\tcase 5:\n\t\t\t\t\t$new_arr[] = \"Five\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase\
    \ 6:\n\t\t\t\t\t$new_arr[] = \"Six\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 7:\n\t\t\
    \t\t\t$new_arr[] = \"Seven\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 8:\n\t\t\t\t\t$new_arr[]\
    \ = \"Eight\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 9:\n\t\t\t\t\t$new_arr[] = \"Nine\"\
    ;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t$arr = array_reverse($new_arr);\n\t\
    return $arr;\n}\nprint_r(by_length(array(2, 1, 1, 4, 5, 8, 2, 3)));\necho \"<br>\"\
    ;\nprint_r(by_length(array()));\necho \"<br>\";\nprint_r(by_length(array(1, -1,\
    \ 55)));\necho \"<br>\";\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Eight\n    [1] => Five\n    [2] => Four\n    [3] =>\
    \ Three\n    [4] => Two\n    [5] => One\n)\n<br>Array\n(\n)\n<br>Array\n(\n  \
    \  [0] => One\n)\n<br>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmwbvq1jy.php:65\n\
    Stack trace:\n#0 /tmp/tmpmwbvq1jy.php(72): test()\n#1 {main}\n  thrown in /tmp/tmpmwbvq1jy.php\
    \ on line 65\n"
  timestamp: 1660028946
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n\t$sortArr = sortDigits($arr);\n\t$sortArr = reverseArray($sortArr);\n\
    \t$sortArr = replaceDigitsByWords($sortArr);\n\t\n\treturn $sortArr;\n}\n\nfunction\
    \ candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sortDigits()\
    \ in /tmp/tmpkav1383c.php:15\nStack trace:\n#0 /tmp/tmpkav1383c.php(23): by_length(Array)\n\
    #1 /tmp/tmpkav1383c.php(27): candidate(Array)\n#2 /tmp/tmpkav1383c.php(34): test()\n\
    #3 {main}\n  thrown in /tmp/tmpkav1383c.php on line 15\n"
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $sorted = array();\n  foreach ($arr as $value) {\n    if\
    \ ($value >= 1 && $value <= 9) {\n      $sorted[] = $value;\n    }\n  }\n  sort($sorted);\n\
    \  $reversed = array_reverse($sorted);\n  $numbers = ['One', 'Two', 'Three', 'Four',\
    \ 'Five', 'Six', 'Seven', 'Eight', 'Nine'];\n  $result = array();\n  foreach ($reversed\
    \ as $value) {\n    $result[] = $numbers[$value - 1];\n  }\n  return $result;\n\
    }\n\nprint_r(by_length(array(2, 1, 1, 4, 5, 8, 2, 3)));\nprint_r(by_length(array()));\n\
    print_r(by_length(array(1, -1, 55)));\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Eight\n    [1] => Five\n    [2] => Four\n    [3] =>\
    \ Three\n    [4] => Two\n    [5] => Two\n    [6] => One\n    [7] => One\n)\nArray\n\
    (\n)\nArray\n(\n    [0] => One\n)\n"
  timestamp: 1660028946
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $res = [];\n  $nums = ['One', 'Two', 'Three', 'Four', 'Five',\
    \ 'Six', 'Seven', 'Eight', 'Nine'];\n  foreach ($arr as $int) {\n    if ($int\
    \ >= 1 && $int <= 9) {\n      $res[] = $nums[$int - 1];\n    }\n  }\n  return\
    \ array_reverse($res);\n}\n\nvar_dump(by_length(array(2, 1, 1, 4, 5, 8, 2, 3)));\n\
    var_dump(by_length(array()));\nvar_dump(by_length(array(1, -1, 55)));\nfunction\
    \ candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(8) {\n  [0]=>\n  string(5) \"Three\"\n  [1]=>\n  string(3) \"Two\"\
    \n  [2]=>\n  string(5) \"Eight\"\n  [3]=>\n  string(4) \"Five\"\n  [4]=>\n  string(4)\
    \ \"Four\"\n  [5]=>\n  string(3) \"One\"\n  [6]=>\n  string(3) \"One\"\n  [7]=>\n\
    \  string(3) \"Two\"\n}\narray(0) {\n}\narray(1) {\n  [0]=>\n  string(3) \"One\"\
    \n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppik4q8ee.php:33\n\
    Stack trace:\n#0 /tmp/tmppik4q8ee.php(40): test()\n#1 {main}\n  thrown in /tmp/tmppik4q8ee.php\
    \ on line 33\n"
  timestamp: 1660028946
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  return array_map(\n    function($i) {\n      switch ($i)\
    \ {\n        case 1: return \"One\";\n        case 2: return \"Two\";\n      \
    \  case 3: return \"Three\";\n        case 4: return \"Four\";\n        case 5:\
    \ return \"Five\";\n        case 6: return \"Six\";\n        case 7: return \"\
    Seven\";\n        case 8: return \"Eight\";\n        case 9: return \"Nine\";\n\
    \      }\n    },\n    array_reverse(array_filter($arr, function($i) { return $i\
    \ > 0 && $i < 10; }))\n  );\n}\n\nvar_dump(by_length(array(2, 1, 1, 4, 5, 8, 2,\
    \ 3)));\nvar_dump(by_length(array()));\nvar_dump(by_length(array(1, -1, 55)));\n\
    function candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(8) {\n  [0]=>\n  string(5) \"Three\"\n  [1]=>\n  string(3) \"Two\"\
    \n  [2]=>\n  string(5) \"Eight\"\n  [3]=>\n  string(4) \"Five\"\n  [4]=>\n  string(4)\
    \ \"Four\"\n  [5]=>\n  string(3) \"One\"\n  [6]=>\n  string(3) \"One\"\n  [7]=>\n\
    \  string(3) \"Two\"\n}\narray(0) {\n}\narray(1) {\n  [0]=>\n  string(3) \"One\"\
    \n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp29o34l3i.php:41\n\
    Stack trace:\n#0 /tmp/tmp29o34l3i.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp29o34l3i.php\
    \ on line 41\n"
  timestamp: 1660028946
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n    $valid_lengths = array_fill(1, 9, true);\n    $ordered_lengths\
    \ = array_intersect_key($arr, $valid_lengths);\n    $translated_lengths = array_map(function($num)\
    \ {\n        switch ($num) {\n            case 1:\n                return \"One\"\
    ;\n            case 2:\n                return \"Two\";\n            case 3:\n\
    \                return \"Three\";\n            case 4:\n                return\
    \ \"Four\";\n            case 5:\n                return \"Five\";\n         \
    \   case 6:\n                return \"Six\";\n            case 7:\n          \
    \      return \"Seven\";\n            case 8:\n                return \"Eight\"\
    ;\n            case 9:\n                return \"Nine\";\n        }\n    }, $ordered_lengths);\n\
    \    sort($translated_lengths);\n    return array_reverse($translated_lengths);\n\
    }\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphd633q9m.php:48\n\
    Stack trace:\n#0 /tmp/tmphd633q9m.php(55): test()\n#1 {main}\n  thrown in /tmp/tmphd633q9m.php\
    \ on line 48\n"
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n\tif (empty($arr)) return array();\n\t$arr = array_values(array_filter($arr,\
    \ function($v) { return ($v>=1 && $v<=9); }));\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\
    \t$arr = array_map(function($v) {\n\t\t$names = array(\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\");\n\t\treturn $names[$v-1];\n\
    \t}, $arr);\n\treturn $arr;\n}\nvar_dump(by_length(array(2, 1, 1, 4, 5, 8, 2,\
    \ 3)));\nvar_dump(by_length(array()));\nvar_dump(by_length(array(1, -1, 55)));\n\
    function candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "array(8) {\n  [0]=>\n  string(5) \"Eight\"\n  [1]=>\n  string(4) \"Five\"\
    \n  [2]=>\n  string(4) \"Four\"\n  [3]=>\n  string(5) \"Three\"\n  [4]=>\n  string(3)\
    \ \"Two\"\n  [5]=>\n  string(3) \"Two\"\n  [6]=>\n  string(3) \"One\"\n  [7]=>\n\
    \  string(3) \"One\"\n}\narray(0) {\n}\narray(1) {\n  [0]=>\n  string(3) \"One\"\
    \n}\n"
  timestamp: 1660028946
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n    $newArr = array();\n    foreach ($arr as $key => $value)\
    \ {\n        if ($value <= 9 && $value >= 1) {\n            array_push($newArr,\
    \ $value);\n        }\n    }\n    sort($newArr);\n    $newArr = array_reverse($newArr);\n\
    \    $numbers = array(\n        \"One\",\n        \"Two\",\n        \"Three\"\
    ,\n        \"Four\",\n        \"Five\",\n        \"Six\",\n        \"Seven\",\n\
    \        \"Eight\",\n        \"Nine\",\n    );\n    foreach ($newArr as $key =>\
    \ $value) {\n        $newArr[$key] = $numbers[$value - 1];\n    }\n    return\
    \ $newArr;\n}\necho \"test1: \";\nvar_dump(by_length(array(2, 1, 1, 4, 5, 8, 2,\
    \ 3)));\necho \"test2: \";\nvar_dump(by_length(array()));\necho \"test3: \";\n\
    var_dump(by_length(array(1, -1, 55)));\necho \"test4: \";\nvar_dump(by_length(array(3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3,\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpt1n23ie7.php on line 47

    '
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $out_arr = array();\n  $swapped = false;\n  for ($i = 0;\
    \ $i < count($arr); $i++) {\n    if ($arr[$i] > 0 && $arr[$i] < 10) {\n      $out_arr[]\
    \ = $arr[$i];\n    }\n  }\n  while ($swapped == false) {\n    $swapped = true;\n\
    \    for ($i = 0; $i < count($out_arr) - 1; $i++) {\n      if ($out_arr[$i] >\
    \ $out_arr[$i + 1]) {\n        $tmp = $out_arr[$i];\n        $out_arr[$i] = $out_arr[$i\
    \ + 1];\n        $out_arr[$i + 1] = $tmp;\n        $swapped = false;\n      }\n\
    \    }\n  }\n  $out_arr = array_reverse($out_arr);\n  $words = array(\"One\",\
    \ \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    );\n  $final_arr = array();\n  for ($i = 0; $i < count($out_arr); $i++) {\n  \
    \  $final_arr[] = $words[$out_arr[$i] - 1];\n  }\n  return $final_arr;\n}\nfunction\
    \ candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028946
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n    $new_arr = array();\n    foreach ($arr as $key => $value)\
    \ {\n        if ($value < 1 || $value > 9) {\n            continue;\n        }\n\
    \        array_push($new_arr, $value);\n    }\n    rsort($new_arr);\n    $one\
    \ = array_search(1, $new_arr);\n    if ($one) {\n        $new_arr[$one] = \"One\"\
    ;\n    }\n    $two = array_search(2, $new_arr);\n    if ($two) {\n        $new_arr[$two]\
    \ = \"Two\";\n    }\n    $three = array_search(3, $new_arr);\n    if ($three)\
    \ {\n        $new_arr[$three] = \"Three\";\n    }\n    $four = array_search(4,\
    \ $new_arr);\n    if ($four) {\n        $new_arr[$four] = \"Four\";\n    }\n \
    \   $five = array_search(5, $new_arr);\n    if ($five) {\n        $new_arr[$five]\
    \ = \"Five\";\n    }\n    $six = array_search(6, $new_arr);\n    if ($six) {\n\
    \        $new_arr[$six] = \"Six\";\n    }\n    $seven = array_search(7, $new_arr);\n\
    \    if ($seven) {\n        $new_arr[$seven] = \"Seven\";\n    }\n    $eight =\
    \ array_search(8, $new_arr);\n    if ($eight) {\n        $new_arr[$eight] = \"\
    Eight\";\n    }\n    $nine = array_search(9, $new_arr);\n    if ($nine) {\n  \
    \      $new_arr[$nine] = \"Nine\";\n    }\n    return $new_arr;\n}\n\n$arr = array(2,\
    \ 1, 1, 4, 5, 8, 2, 3);\nprint_r(by_length($arr));\n$arr = array();\nprint_r(by_length($arr));\n\
    $arr = array(1, -1, 55);\nprint_r(by_length($\nfunction candidate(...$args) {\n\
    \    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting variable or
    "{" or "$" in /tmp/tmpkyov3dt2.php on line 68

    '
  timestamp: 1660028946
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n\t//TODO\n\t$output_arr = [];\n\t$number_array = [1 => \"\
    One\", 2 => \"Two\", 3 => \"Three\", 4 => \"Four\", 5 => \"Five\", 6 => \"Six\"\
    , 7 => \"Seven\", 8 => \"Eight\", 9 => \"Nine\"];\n\t$length = count($arr);\n\t\
    for ($i = 0; $i < $length; $i++) {\n\t\tif (isset($number_array[$arr[$i]])) {\n\
    \t\t\t$output_arr[] = $number_array[$arr[$i]];\n\t\t}\n\t}\n\trsort($output_arr);\n\
    \treturn $output_arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcwz39wkv.php:33\n\
    Stack trace:\n#0 /tmp/tmpcwz39wkv.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpcwz39wkv.php\
    \ on line 33\n"
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n    if (empty($arr)) {\n        return array();\n    }\n\
    \    $result = array();\n    foreach ($arr as $value) {\n        if ($value >=\
    \ 1 && $value <= 9) {\n            $result[] = $value;\n        }\n    }\n   \
    \ sort($result);\n    $reversed_arr = array_reverse($result);\n    $result = array();\n\
    \    foreach ($reversed_arr as $value) {\n        switch ($value) {\n        \
    \    case 1:\n                $result[] = \"One\";\n                break;\n \
    \           case 2:\n                $result[] = \"Two\";\n                break;\n\
    \            case 3:\n                $result[] = \"Three\";\n               \
    \ break;\n            case 4:\n                $result[] = \"Four\";\n       \
    \         break;\n            case 5:\n                $result[] = \"Five\";\n\
    \                break;\n            case 6:\n                $result[] = \"Six\"\
    ;\n                break;\n            case 7:\n                $result[] = \"\
    Seven\";\n                break;\n            case 8:\n                $result[]\
    \ = \"Eight\";\n                break;\n            case 9:\n                $result[]\
    \ = \"Nine\";\n                break;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n\t$numbers = array(\n\t\t'One',\n\t\t'Two',\n\t\t'Three',\n\
    \t\t'Four',\n\t\t'Five',\n\t\t'Six',\n\t\t'Seven',\n\t\t'Eight',\n\t\t'Nine'\n\
    \t);\n\t$sorted = array();\n\tforeach ($arr as $i) {\n\t\tif ($i > 0 && $i < 10)\
    \ {\n\t\t\t$sorted[] = $i;\n\t\t}\n\t}\n\tsort($sorted);\n\tforeach ($sorted as\
    \ $k => $v) {\n\t\t$sorted[$k] = $numbers[$v - 1];\n\t}\n\treturn array_reverse($sorted);\n\
    }\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n    $numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    $num_names\
    \ = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'];\n\
    \    $out = [];\n    foreach ($arr as $elem) {\n        if (in_array($elem, $numbers))\
    \ {\n            $out[] = $elem;\n        }\n    }\n    sort($out);\n    $rev\
    \ = array_reverse($out);\n    $final = [];\n    foreach ($rev as $elem) {\n  \
    \      $i = array_search($elem, $numbers);\n        $final[] = $num_names[$i];\n\
    \    }\n    return $final;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $r = array();\n  foreach ($arr as $v) {\n    if ($v >=\
    \ 1 && $v <= 9) {\n      $r[] = $v;\n    }\n  }\n  sort($r);\n  $r = array_reverse($r);\n\
    \  $r = array_map(function($v) {\n    switch ($v) {\n      case 1: return 'One';\n\
    \      case 2: return 'Two';\n      case 3: return 'Three';\n      case 4: return\
    \ 'Four';\n      case 5: return 'Five';\n      case 6: return 'Six';\n      case\
    \ 7: return 'Seven';\n      case 8: return 'Eight';\n      case 9: return 'Nine';\n\
    \    }\n  }, $r);\n  return $r;\n}\n\nprint_r(by_length(array(2, 1, 1, 4, 5, 8,\
    \ 2, 3)));\nprint_r(by_length(array()));\nprint_r(by_length(array(1, -1, 55)));\n\
    function candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Eight\n    [1] => Five\n    [2] => Four\n    [3] =>\
    \ Three\n    [4] => Two\n    [5] => Two\n    [6] => One\n    [7] => One\n)\nArray\n\
    (\n)\nArray\n(\n    [0] => One\n)\n"
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n\t$new_arr = [];\n\tforeach ($arr as $key => $value) {\n\t\
    \tif ($value > 0 && $value < 10) {\n\t\t\tarray_push($new_arr, $value);\n\t\t\
    }\n\t}\n\tsort($new_arr);\n\t$new_arr = array_reverse($new_arr);\n\t$final_arr\
    \ = [];\n\tforeach ($new_arr as $key => $value) {\n\t\tswitch ($value) {\n\t\t\
    \tcase 1:\n\t\t\t\tarray_push($final_arr, \"One\");\n\t\t\t\tbreak;\n\t\t\tcase\
    \ 2:\n\t\t\t\tarray_push($final_arr, \"Two\");\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\
    \t\t\t\tarray_push($final_arr, \"Three\");\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\
    \t\tarray_push($final_arr, \"Four\");\n\t\t\t\tbreak;\n\t\t\tcase 5:\n\t\t\t\t\
    array_push($final_arr, \"Five\");\n\t\t\t\tbreak;\n\t\t\tcase 6:\n\t\t\t\tarray_push($final_arr,\
    \ \"Six\");\n\t\t\t\tbreak;\n\t\t\tcase 7:\n\t\t\t\tarray_push($final_arr, \"\
    Seven\");\n\t\t\t\tbreak;\n\t\t\tcase 8:\n\t\t\t\tarray_push($final_arr, \"Eight\"\
    );\n\t\t\t\tbreak;\n\t\t\tcase 9:\n\t\t\t\tarray_push($final_arr, \"Nine\");\n\
    \t\t\t\tbreak;\n\t\t}\n\t}\n\treturn $final_arr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028946
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n    $result = array();\n    $values = array(1 => \"One\"\
    , 2 => \"Two\", 3 => \"Three\", 4 => \"Four\", 5 => \"Five\", 6 => \"Six\", 7\
    \ => \"Seven\", 8 => \"Eight\", 9 => \"Nine\");\n    for ($i = 0; $i < count($arr);\
    \ $i++) {\n        if ($arr[$i] >= 1 && $arr[$i] <= 9) {\n            $result[]\
    \ = $values[$arr[$i]];\n        }\n    }\n    sort($result);\n    return array_reverse($result);\n\
    }\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9nw4wtzh.php:31\n\
    Stack trace:\n#0 /tmp/tmp9nw4wtzh.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp9nw4wtzh.php\
    \ on line 31\n"
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n\t$map = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n\t$res = [];\n\tfor ($i = 0; $i <\
    \ count($arr); $i++) {\n\t\tif ($arr[$i] > 0 && $arr[$i] < 10) {\n\t\t\tarray_push($res,\
    \ $arr[$i]);\n\t\t}\n\t}\n\tsort($res);\n\t$res = array_reverse($res);\n\tfor\
    \ ($i = 0; $i < count($res); $i++) {\n\t\t$res[$i] = $map[$res[$i] - 1];\n\t}\n\
    \treturn $res;\n}\necho implode(', ', by_length(array(2, 1, 1, 4, 5, 8, 2, 3)));\n\
    echo \"\\n\";\necho implode(', ', by_length(array()));\necho \"\\n\";\necho implode(',\
    \ ', by_length(array(1, -1, 55)));\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Eight, Five, Four, Three, Two, Two, One, One


    One

    '
  timestamp: 1660028946
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n\t$numbers = array();\n\tforeach ($arr as $i) {\n\t\tif (($i\
    \ >= 1) && ($i <= 9)) {\n\t\t\t$numbers[] = $i;\n\t\t}\n\t}\n\trsort($numbers);\n\
    \t$words = array();\n\tforeach ($numbers as $i) {\n\t\t$words[] = by_length_convert($i);\n\
    \t}\n\treturn $words;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function by_length_convert()\
    \ in /tmp/tmpqp0e5l1o.php:24\nStack trace:\n#0 /tmp/tmpqp0e5l1o.php(30): by_length(Array)\n\
    #1 /tmp/tmpqp0e5l1o.php(34): candidate(Array)\n#2 /tmp/tmpqp0e5l1o.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpqp0e5l1o.php on line 24\n"
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  foreach ($arr as $key => $value) {\n    if ($value < 1\
    \ or $value > 9) {\n      unset($arr[$key]);\n    }\n  }\n  sort($arr);\n  $arr\
    \ = array_reverse($arr);\n  foreach ($arr as $key => $value) {\n    $arr[$key]\
    \ = str_replace([1, 2, 3, 4, 5, 6, 7, 8, 9], [\"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"], $value);\n  }\n  return\
    \ $arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n    $arr = array_filter($arr, function($elem) { return $elem\
    \ >= 1 && $elem <= 9; });\n    rsort($arr);\n    $arr = array_map(function($elem)\
    \ {\n        return $elem === 1 ? \"One\" : ($elem === 2 ? \"Two\" : ($elem ===\
    \ 3 ? \"Three\" : ($elem === 4 ? \"Four\" : ($elem === 5 ? \"Five\" : ($elem ===\
    \ 6 ? \"Six\" : ($elem === 7 ? \"Seven\" : ($elem === 8 ? \"Eight\" : \"Nine\"\
    )))))));\n    }, $arr);\n    return $arr;\n}\nfunction candidate(...$args) {\n\
    \    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $numbers = array_filter($arr, function($x) {\n    return\
    \ $x >= 1 && $x <= 9;\n  });\n  sort($numbers);\n  $dict = array('One', 'Two',\
    \ 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine');\n  foreach ($numbers\
    \ as &$num) {\n    $num = $dict[$num - 1];\n  }\n  return array_reverse($numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n    $arr_sorted = [];\n    if (!empty($arr)) {\n        foreach\
    \ ($arr as $value) {\n            if (is_int($value) && ($value > 0) && ($value\
    \ < 10)) {\n                $arr_sorted[] = $value;\n            }\n        }\n\
    \        sort($arr_sorted);\n        $arr_reverse = array_reverse($arr_sorted);\n\
    \        $arr_result = [];\n        foreach ($arr_reverse as $value) {\n     \
    \       switch ($value) {\n                case 1:\n                    $arr_result[]\
    \ = \"One\";\n                    break;\n                case 2:\n          \
    \          $arr_result[] = \"Two\";\n                    break;\n            \
    \    case 3:\n                    $arr_result[] = \"Three\";\n               \
    \     break;\n                case 4:\n                    $arr_result[] = \"\
    Four\";\n                    break;\n                case 5:\n               \
    \     $arr_result[] = \"Five\";\n                    break;\n                case\
    \ 6:\n                    $arr_result[] = \"Six\";\n                    break;\n\
    \                case 7:\n                    $arr_result[] = \"Seven\";\n   \
    \                 break;\n                case 8:\n                    $arr_result[]\
    \ = \"Eight\";\n                    break;\n                case 9:\n        \
    \            $arr_result[] = \"Nine\";\n                    break;\n         \
    \   }\n        }\n        return $arr_result;\n    } else {\n        return $arr_sorted;\n\
    \    }\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !==\
    \ array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028946
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n    $mapper = array(\n        '1' => 'One',\n        '2'\
    \ => 'Two',\n        '3' => 'Three',\n        '4' => 'Four',\n        '5' => 'Five',\n\
    \        '6' => 'Six',\n        '7' => 'Seven',\n        '8' => 'Eight',\n   \
    \     '9' => 'Nine'\n    );\n    return array_reverse(array_map(function($number)\
    \ use ($mapper) {\n        if ($number < 1 || $number > 9) {\n            return\
    \ null;\n        }\n        return $mapper[$number];\n    }, $arr));\n}\n\nfunction\
    \ candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwoilr3n8.php:39\n\
    Stack trace:\n#0 /tmp/tmpwoilr3n8.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpwoilr3n8.php\
    \ on line 39\n"
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $sort_arr = [];\n  foreach ($arr as $key => $value) {\n\
    \    if ($value > 0 && $value < 10) {\n      $sort_arr[] = $value;\n    }\n  }\n\
    \  sort($sort_arr);\n  $arr_name = ['One', 'Two', 'Three', 'Four', 'Five', 'Six',\
    \ 'Seven', 'Eight', 'Nine'];\n  $arr_sort = [];\n  foreach ($sort_arr as $key\
    \ => $value) {\n    $arr_sort[] = $arr_name[$value - 1];\n  }\n  return array_reverse($arr_sort);\n\
    }\n\nprint_r(by_length(array(2, 1, 1, 4, 5, 8, 2, 3)));\nprint_r(by_length(array()));\n\
    print_r(by_length(array(1, -1, 55)));\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Eight\n    [1] => Five\n    [2] => Four\n    [3] =>\
    \ Three\n    [4] => Two\n    [5] => Two\n    [6] => One\n    [7] => One\n)\nArray\n\
    (\n)\nArray\n(\n    [0] => One\n)\n"
  timestamp: 1660028946
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n    if (empty($arr)) {\n        return $arr;\n    }\n   \
    \ foreach ($arr as $value) {\n        if ($value < 1 || $value > 9) {\n      \
    \      return false;\n        }\n    }\n    $numbers = array('One', 'Two', 'Three',\
    \ 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine');\n    sort($arr);\n    $arr\
    \ = array_reverse($arr);\n    for ($i = 0; $i < count($arr); $i++) {\n       \
    \ for ($j = 0; $j < count($numbers); $j++) {\n            if ($arr[$i] == $j +\
    \ 1) {\n                $arr[$i] = $numbers[$j];\n            }\n        }\n \
    \   }\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpycsj1ot3.php:43\n\
    Stack trace:\n#0 /tmp/tmpycsj1ot3.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpycsj1ot3.php\
    \ on line 43\n"
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n\t$result = array();\n\t$numbers = array(\"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\");\n\t\
    foreach ($arr as $element) {\n\t\tif ($element >= 1 && $element <= 9) {\n\t\t\t\
    $result[] = $element;\n\t\t}\n\t}\n\tsort($result);\n\t$result = array_reverse($result);\n\
    \tforeach ($result as $key => $element) {\n\t\t$result[$key] = $numbers[$element\
    \ - 1];\n\t}\n\treturn $result;\n}\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if(empty($arr)) return $arr;\n  $digits = array(1 => \"\
    One\", 2 => \"Two\", 3 => \"Three\", 4 => \"Four\", 5 => \"Five\", 6 => \"Six\"\
    , 7 => \"Seven\", 8 => \"Eight\", 9 => \"Nine\");\n  sort($arr);\n  $arr = array_filter($arr,\
    \ function($element) { return ($element >= 1 && $element <= 9); });\n  $arr =\
    \ array_reverse($arr);\n  $newArr = array();\n  foreach($arr as $key => $value)\
    \ {\n    $newArr[] = $digits[$value];\n  }\n  return $newArr;\n}\n\necho join(\"\
    , \", by_length(array(2, 1, 1, 4, 5, 8, 2, 3)));\necho \"\\n\";\necho join(\"\
    , \", by_length(array()));\necho \"\\n\";\necho join(\", \", by_length(array(1,\
    \ -1, 55)));\necho \"\\n\";\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Eight, Five, Four, Three, Two, Two, One, One


    One

    '
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n\tif (empty($arr)) return $arr;\n\t\n\t$digits = array(\n\
    \t\t1 => 'One',\n\t\t2 => 'Two',\n\t\t3 => 'Three',\n\t\t4 => 'Four',\n\t\t5 =>\
    \ 'Five',\n\t\t6 => 'Six',\n\t\t7 => 'Seven',\n\t\t8 => 'Eight',\n\t\t9 => 'Nine'\n\
    \t);\n\t\n\t$arr = array_values(array_filter($arr, function($v) { return is_int($v)\
    \ && $v > 0 && $v < 10; }));\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t\
    \n\treturn array_map(function($d) use ($digits) { return $digits[$d]; }, $arr);\n\
    }\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n    $converter = array(\n        1 => \"One\",\n        2\
    \ => \"Two\",\n        3 => \"Three\",\n        4 => \"Four\",\n        5 => \"\
    Five\",\n        6 => \"Six\",\n        7 => \"Seven\",\n        8 => \"Eight\"\
    ,\n        9 => \"Nine\"\n    );\n    $result = array();\n    foreach ($arr as\
    \ $el) {\n        if ($el >= 1 && $el <= 9) {\n            $result[] = $el;\n\
    \        }\n    }\n    sort($result);\n    $output = array();\n    foreach ($result\
    \ as $el) {\n        $output[] = $converter[$el];\n    }\n    return array_reverse($output);\n\
    }\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n\t$arr = array_filter($arr, function($n) { return $n > 0\
    \ && $n < 10; });\n\tusort($arr, function($a, $b) { return $a - $b; });\n\t$arr\
    \ = array_reverse($arr);\n\t$arr = array_map(function($n) {\n\t\tswitch ($n) {\n\
    \t\t\tcase 1: return \"One\";\n\t\t\tcase 2: return \"Two\";\n\t\t\tcase 3: return\
    \ \"Three\";\n\t\t\tcase 4: return \"Four\";\n\t\t\tcase 5: return \"Five\";\n\
    \t\t\tcase 6: return \"Six\";\n\t\t\tcase 7: return \"Seven\";\n\t\t\tcase 8:\
    \ return \"Eight\";\n\t\t\tcase 9: return \"Nine\";\n\t\t}\n\t}, $arr);\n\treturn\
    \ $arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $nums = array();\n  foreach ($arr as $value) {\n    if\
    \ ($value >= 1 && $value <= 9) {\n      $nums[] = $value;\n    }\n  }\n  sort($nums);\n\
    \  $nums = array_reverse($nums);\n  $nums = array_map(function($value) {\n   \
    \ switch ($value) {\n      case 1:\n        return \"One\";\n      case 2:\n \
    \       return \"Two\";\n      case 3:\n        return \"Three\";\n      case\
    \ 4:\n        return \"Four\";\n      case 5:\n        return \"Five\";\n    \
    \  case 6:\n        return \"Six\";\n      case 7:\n        return \"Seven\";\n\
    \      case 8:\n        return \"Eight\";\n      case 9:\n        return \"Nine\"\
    ;\n    }\n  }, $nums);\n  return $nums;\n}\n\nfunction candidate(...$args) {\n\
    \    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n    $sorted = array();\n    foreach ($arr as $value) {\n\
    \        if ($value >= 1 && $value <= 9) {\n            $sorted[] = $value;\n\
    \        }\n    }\n    sort($sorted);\n    $rev = array_reverse($sorted);\n  \
    \  $converted = array();\n    foreach ($rev as $value) {\n        switch ($value)\
    \ {\n            case 1:\n                $converted[] = \"One\";\n          \
    \      break;\n            case 2:\n                $converted[] = \"Two\";\n\
    \                break;\n            case 3:\n                $converted[] = \"\
    Three\";\n                break;\n            case 4:\n                $converted[]\
    \ = \"Four\";\n                break;\n            case 5:\n                $converted[]\
    \ = \"Five\";\n                break;\n            case 6:\n                $converted[]\
    \ = \"Six\";\n                break;\n            case 7:\n                $converted[]\
    \ = \"Seven\";\n                break;\n            case 8:\n                $converted[]\
    \ = \"Eight\";\n                break;\n            case 9:\n                $converted[]\
    \ = \"Nine\";\n                break;\n        }\n    }\n    return $converted;\n\
    }\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028946
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n    $result = [];\n    if (count($arr) == 0) {\n        return\
    \ $result;\n    }\n    // sort the numbers\n    $arr = array_unique($arr);\n \
    \   sort($arr);\n    // replace each number by its corresponding name\n    foreach\
    \ ($arr as $num) {\n        switch ($num) {\n            case 1:\n           \
    \     $result[] = \"One\";\n                break;\n            case 2:\n    \
    \            $result[] = \"Two\";\n                break;\n            case 3:\n\
    \                $result[] = \"Three\";\n                break;\n            case\
    \ 4:\n                $result[] = \"Four\";\n                break;\n        \
    \    case 5:\n                $result[] = \"Five\";\n                break;\n\
    \            case 6:\n                $result[] = \"Six\";\n                break;\n\
    \            case 7:\n                $result[] = \"Seven\";\n               \
    \ break;\n            case 8:\n                $result[] = \"Eight\";\n      \
    \          break;\n            case 9:\n                $result[] = \"Nine\";\n\
    \                break;\n        }\n    }\n    // reverse the resulting array\n\
    \    $result = array_reverse($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp958eqppq.php:64\n\
    Stack trace:\n#0 /tmp/tmp958eqppq.php(71): test()\n#1 {main}\n  thrown in /tmp/tmp958eqppq.php\
    \ on line 64\n"
  timestamp: 1660028946
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $output = array();\n  $reversed = array();\n  $numbers\
    \ = array(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\");\n  $constants = array(\n    \"one\" => 1,\n    \"two\"\
    \ => 2,\n    \"three\" => 3,\n    \"four\" => 4,\n    \"five\" => 5,\n    \"six\"\
    \ => 6,\n    \"seven\" => 7,\n    \"eight\" => 8,\n    \"nine\" => 9\n  );\n \
    \ foreach ($arr as $key => $value) {\n    if ($value > 0 && $value < 10) {\n \
    \     $output[] = $value;\n    }\n  }\n  rsort($output);\n  foreach ($output as\
    \ $key => $value) {\n    $reversed[] = $numbers[$value - 1];\n  }\n  return $reversed;\n\
    }\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp03z1_yzk.php:45\n\
    Stack trace:\n#0 /tmp/tmp03z1_yzk.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp03z1_yzk.php\
    \ on line 45\n"
  timestamp: 1660028946
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n    $result = [];\n    if (count($arr) > 0) {\n        sort($arr);\n\
    \        $result = array_reverse($arr);\n        $result = array_map('by_length_formatter',\
    \ $result);\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: array_map(): Argument #1 ($callback)\
    \ must be a valid callback or null, function \"by_length_formatter\" not found\
    \ or invalid function name in /tmp/tmpzj2tfgt2.php:19\nStack trace:\n#0 /tmp/tmpzj2tfgt2.php(19):\
    \ array_map('by_length_forma...', Array)\n#1 /tmp/tmpzj2tfgt2.php(25): by_length(Array)\n\
    #2 /tmp/tmpzj2tfgt2.php(29): candidate(Array)\n#3 /tmp/tmpzj2tfgt2.php(36): test()\n\
    #4 {main}\n  thrown in /tmp/tmpzj2tfgt2.php on line 19\n"
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $nums = array_filter($arr, function($n) {\n    return $n\
    \ >= 1 && $n <= 9;\n  });\n  sort($nums);\n  $nums = array_reverse($nums);\n \
    \ $names = array(\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\");\n  $strings = array_map(function($n) use ($names)\
    \ {\n    return $names[$n];\n  }, $nums);\n  return $strings;\n}\necho '<pre>';\n\
    print_r(by_length(array(2, 1, 1, 4, 5, 8, 2, 3)));\necho '</pre>';\n\nfunction\
    \ candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => Eight\n    [1] => Five\n    [2] => Four\n   \
    \ [3] => Three\n    [4] => Two\n    [5] => Two\n    [6] => One\n    [7] => One\n\
    )\n</pre>"
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n    $numbers = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n    $numbers_str\
    \ = array(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\");\n    $res = array();\n    foreach ($arr as $num) {\n \
    \       if (in_array($num, $numbers)) {\n            $res[] = $num;\n        }\n\
    \    }\n    sort($res);\n    $res = array_reverse($res);\n    foreach ($res as\
    \ $key => $num) {\n        $res[$key] = $numbers_str[$num - 1];\n    }\n    return\
    \ $res;\n}\n\necho \"<pre>\";\necho by_length(array(2, 1, 1, 4, 5, 8, 2, 3));\n\
    echo \"</pre>\";\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '<pre>

    Warning: Array to string conversion in /tmp/tmpfvxkolry.php on line 32

    Array</pre>'
  timestamp: 1660028946
- exit_code: 0
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n\t$digits = [\n\t\t'One',\n\t\t'Two',\n\t\t'Three',\n\t\t\
    'Four',\n\t\t'Five',\n\t\t'Six',\n\t\t'Seven',\n\t\t'Eight',\n\t\t'Nine'\n\t];\n\
    \t$filteredArr = array_filter($arr, function($digit) {\n\t\treturn ($digit >=\
    \ 1 && $digit <= 9);\n\t});\n\tsort($filteredArr);\n\t$result = array_map(function($val)\
    \ use ($digits) {\n\t\treturn $digits[$val - 1];\n\t}, array_reverse($filteredArr));\n\
    \treturn $result;\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028946
