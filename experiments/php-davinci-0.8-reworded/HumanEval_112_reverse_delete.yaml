name: HumanEval_112_reverse_delete
language: php
prompt: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
  \ all the characters in s that are equal to any character in c\n// then check if\
  \ the result string is palindrome.\n// A string is called palindrome if it reads\
  \ the same backward as forward.\n// You should return an array containing the result\
  \ string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\"\
  , \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\", \"b\")\n\
  // array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// array(\"\
  cdedc\", true)\nfunction reverse_delete($s, $c) {\n"
tests: "function candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\n\
  function test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\"\
  , false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
  , \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
  dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
  a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\") !==\
  \ array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
  \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $s = preg_replace(\"/$c/\", \"\", $s);\n    $palindrome = ($s ===\
    \ strrev($s)) ? true : false;\n    return array($s, $palindrome);\n}", "\t// remove\
    \ characters from $s if they are equal to any of the chars in $c\n\tfor ($i =\
    \ 0; $i < strlen($s); $i++) {\n\t\tfor ($j = 0; $j < strlen($c); $j++) {\n\t\t\
    \tif ($s[$i] == $c[$j]) {\n\t\t\t\t$s[$i] = \"\";\n\t\t\t}\n\t\t}\n\t}\n\t// trim\
    \ the result string\n\t$s = trim($s);\n\t// check if the result string is palindrome\n\
    \tif ($s == strrev($s)) {\n\t\treturn array($s, true);\n\t} else {\n\t\treturn\
    \ array($s, false);\n\t}\n}\n\nprint_r(reverse_delete(\"abcde\", \"ae\"));\necho\
    \ \"<br>\";\nprint_r(reverse_delete(\"abcdef\", \"b\"));\necho \"<br>\";\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    $c = str_split($c);\n    $s = str_split($s);\n \
    \   foreach ($c as $v) {\n        if (($key = array_search($v, $s)) !== false)\
    \ {\n            unset($s[$key]);\n        }\n    }\n    $s = implode($s);\n \
    \   return array($s, $s == strrev($s));\n}", "    $found = array_unique(str_split($c));\n\
    \    foreach ($found as $char) {\n        $s = str_replace($char, '', $s);\n \
    \   }\n    return [$s, $s === strrev($s)];\n}", "    $newStr = str_replace(str_split($c),\
    \ \"\", $s);\n    $myArr = array($newStr, checkPalindrome($newStr));\n    return\
    \ $myArr;\n}", "    for ($i = 0; $i < strlen($c); $i++) {\n        $s = str_replace($c[$i],\
    \ \"\", $s);\n    }\n    $palindrome = true;\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        if ($s[$i] != $s[strlen($s) - $i - 1]) {\n            $palindrome\
    \ = false;\n            break;\n        }\n    }\n    return [$s, $palindrome];\n\
    }\n\necho \"test 1: \";\necho json_encode(reverse_delete(\"abcde\", \"ae\"));\n\
    echo \"<br>\";\necho \"test 2: \";\necho json_encode(reverse_delete(\"abcdef\"\
    , \"b\"));\necho \"<br>\";\necho \"test 3: \";\necho json_encode(reverse_delete(\"\
    abcdedcba\", \"ab\"));\necho \"<br>\";\necho \"test 4: \";\necho json_encode(reverse_delete(\"\
    abcdef\", \"a\"));\necho \"<br>\";\necho \"test 5: \";\necho json_encode(reverse_delete(\"\
    a\", \"a\"));\necho \"<br>\";\necho \"test 6: \";\necho json_encode(reverse_delete(\"\
    abcdcba\", \"a\"));\necho \"<br>\";\necho \"test 7: \";\necho json_encode(reverse_delete(\"\
    aabbcdcba\", \"abc\"));\necho \"<br>\";\necho \"test 8: \";\necho json_encode(reverse_delete(\"\
    abcba\", \"ab\"));\necho \"<br>\";\necho \"test 9: \";\necho json_encode(reverse_delete(\"\
    abcba\", \"abc\"));\necho \"<br>\";\necho \"test 10: \";\necho json_encode(reverse_delete(\"\
    a\", \"b\"));\necho \"<br>\";\necho \"test 11: \";\necho json_encode(reverse_delete(\"\
    ba\", \"a\"));\necho \"<br>\";\necho \"test 12: \";\necho json_encode(reverse_delete(\"\
    z\", \"a\"));\n", "\t$s = preg_replace(\"/[$c]/\", '', $s);\n\treturn [$s, $s\
    \ == strrev($s)];\n}", "    // Good luck, me mateys!\n\n    $s = str_split($s);\n\
    \    $c = str_split($c);\n    foreach ($s as $key => $value) {\n        foreach\
    \ ($c as $key2 => $value2) {\n            if($value === $value2){\n          \
    \      unset($s[$key]);\n            }\n        }\n    }\n    $s = implode(\"\"\
    , $s);\n    $palindrome = $s === strrev($s) ? true : false;\n    return array($s,\
    \ $palindrome);\n}\n", "\t$a = str_split($s);\n\t$b = str_split($c);\n\t$arr1\
    \ = array_merge($a, $b);\n\t$arr2 = array_unique($arr1);\n\t$arr3 = array_values($arr2);\n\
    \t$arr4 = array_diff($a, $arr3);\n\t$arr5 = array_values($arr4);\n\t$arr6 = array_reverse($arr5);\n\
    \t$res = implode($arr5);\n\t$res2 = implode($arr6);\n\t\n\t$ans = [$res, $res\
    \ == $res2];\n\treturn $ans;\n}", "  $result = \"\";\n  $array = str_split($s);\n\
    \  $array_c = str_split($c);\n  $length = count($array);\n  $length_c = count($array_c);\n\
    \  for ($i = 0; $i < $length; $i++) {\n    $check = false;\n    for ($j = 0; $j\
    \ < $length_c; $j++) {\n      if ($array[$i] == $array_c[$j]) {\n        $check\
    \ = true;\n      }\n    }\n    if ($check == false) {\n      $result .= $array[$i];\n\
    \    }\n  }\n  $result_array = str_split($result);\n  $result_length = count($result_array);\n\
    \  $check_array = [];\n  for ($i = 0; $i < $result_length; $i++) {\n    array_push($check_array,\
    \ $result_array[$result_length - $i - 1]);\n  }\n  if ($result_array == $check_array)\
    \ {\n    return array($result, true);\n  } else {\n    return array($result, false);\n\
    \  }\n}\n\nprint_r(reverse_delete(\"abcde\", \"ae\"));\necho \"</br>\";\nprint_r(reverse_delete(\"\
    abcdef\", \"b\"));\necho \"</br>\";\nprint_r(reverse_delete(\"abcdedcba\", \"\
    ab\"));\necho \"</br>\";", "\t$arr = str_split($s);\n\t$result = '';\n\tforeach\
    \ ($arr as $key => $value) {\n\t\tif (!strpos($c, $value)) {\n\t\t\t$result .=\
    \ $value;\n\t\t}\n\t}\n\t$arr = str_split($result);\n\t$check = 0;\n\t$count =\
    \ count($arr);\n\tfor ($i = 0; $i < $count / 2; $i++) {\n\t\tif ($arr[$i] == $arr[$count\
    \ - $i - 1]) {\n\t\t\t$check++;\n\t\t}\n\t}\n\tif ($check == ($count / 2)) {\n\
    \t\treturn [$result, true];\n\t} else {\n\t\treturn [$result, false];\n\t}\n}",
  "  for ($i = 0; $i < strlen($c); $i++) {\n    $s = str_replace($c[$i], \"\", $s);\n\
    \  }\n  return array($s, $s == strrev($s));\n}", "  $s = str_split($s);\n  $c\
    \ = str_split($c);\n  foreach ($s as $key => $letter) {\n    foreach ($c as $key2\
    \ => $letter2) {\n      if ($letter == $letter2) {\n        unset($s[$key]);\n\
    \      }\n    }\n  }\n  $s = implode($s);\n  $isPalindrome = false;\n  if ($s\
    \ == strrev($s)) {\n    $isPalindrome = true;\n  }\n  return array($s, $isPalindrome);\n\
    }", "    $c = str_split($c);\n    foreach ($c as $char) {\n        $s = str_replace($char,\
    \ '', $s);\n    }\n    return array($s, $s === strrev($s));\n}", "    $cArr =\
    \ str_split($c);\n    $result = '';\n    for ($i = 0; $i < strlen($s); $i++) {\n\
    \        if (in_array($s[$i], $cArr)) {\n            continue;\n        }\n  \
    \      $result .= $s[$i];\n    }\n    return array($result, $result == strrev($result));\n\
    }\n", "\t$s = str_split($s);\n\t$c = str_split($c);\n\tforeach ($s as $key =>\
    \ $value) {\n\t\tforeach ($c as $k => $v) {\n\t\t\tif ($value == $v) {\n\t\t\t\
    \tunset($s[$key]);\n\t\t\t}\n\t\t}\n\t}\n\t$s = implode($s);\n\t$s_reverse = strrev($s);\n\
    \tif ($s == $s_reverse) {\n\t\treturn array($s, true);\n\t} else {\n\t\treturn\
    \ array($s, false);\n\t}\n}\nprint_r(reverse_delete(\"abcde\", \"ae\"));\nprint_r(reverse_delete(\"\
    abcdef\", \"b\"));\nprint_r(reverse_delete(\"abcdedcba\", \"ab\"));", "\t$array\
    \ = str_split($s);\n\t$array2 = str_split($c);\n\tforeach ($array as $key => $value)\
    \ {\n\t\tforeach ($array2 as $key2 => $value2) {\n\t\t\tif ($value == $value2)\
    \ {\n\t\t\t\tunset($array[$key]);\n\t\t\t}\n\t\t}\n\t}\n\treturn $array;\n}\n\
    $s = \"abcde\";\n$c = \"ae\";\n$result = reverse_delete($s, $c);\nprint_r($result);\n\
    echo \"<br>\";\n\n$s = \"abcdef\";\n$c = \"b\";\n$result = reverse_delete($s,\
    \ $c);\nprint_r($result);\necho \"<br>\";\n\n$s = \"abcdedcba\";\n$c = \"ab\"\
    ;\n$result = reverse_delete($s, $c);\nprint_r($result);\necho \"<br>\";", "  \
    \  $cLength = strlen($c);\n    $cToArray = str_split($c);\n    $sToArray = str_split($s);\n\
    \    $returnArray = [];\n    for ($i = 0; $i < $cLength; $i++) {\n        for\
    \ ($j = 0; $j < count($sToArray); $j++) {\n            if ($cToArray[$i] == $sToArray[$j])\
    \ {\n                unset($sToArray[$j]);\n            }\n        }\n    }\n\
    \    $returnArray[0] = implode(\"\", $sToArray);\n    $returnArray[1] = true;\n\
    \    $sArrayReverse = str_split(strrev($returnArray[0]));\n    for ($k = 0; $k\
    \ < count($sToArray); $k++) {\n        if ($sToArray[$k] != $sArrayReverse[$k])\
    \ {\n            $returnArray[1] = false;\n        }\n    }\n    return $returnArray;\n\
    }", "    $s = str_split($s);\n    $c = str_split($c);\n    $s = array_diff($s,\
    \ $c);\n    $s = array_reverse($s);\n    return array(join('', $s), join('', $s)\
    \ == join('', array_reverse($s)));\n}\n", "    $res = '';\n    for ($i = 0; $i\
    \ < strlen($s); $i++) {\n        if (strpos($c, $s[$i]) === false) {\n       \
    \     $res .= $s[$i];\n        }\n    }\n    return array($res, $res === strrev($res));\n\
    }", "    for ($i = 0; $i < strlen($c); $i++) {\n        $s = str_replace($c[$i],\
    \ \"\", $s);\n    }\n    $reverse = strrev($s);\n    if ($s == $reverse) {\n \
    \       return array($s, true);\n    } else {\n        return array($s, false);\n\
    \    }\n}\necho \"<pre>\";\nprint_r(reverse_delete(\"abcdedcba\", \"ab\"));\n\
    echo \"</pre>\";", "    $s = str_split($s);\n    $c = str_split($c);\n    $s =\
    \ array_diff($s, $c);\n    $s = implode($s);\n    $s = array($s, $s == strrev($s));\n\
    \    return $s;\n}", "  for ($i = 0; $i < strlen($c); $i++) {\n    $s = str_replace($c[$i],\
    \ \"\", $s);\n  }\n  return [$s, strrev($s) == $s];\n}\n", "    $result = [];\n\
    \    for ($i = 0; $i < strlen($s); $i++) {\n        if (strpos($c, $s[$i]) ===\
    \ false) {\n            $result[] = $s[$i];\n        }\n    }\n    $result = implode('',\
    \ $result);\n    return [$result, $result === strrev($result)];\n}\n", "\t$s =\
    \ str_split($s);\n\t$arrS = array();\n\t$arrC = str_split($c);\n\tforeach ($s\
    \ as $key => $value) {\n\t\tforeach ($arrC as $keyC => $valueC) {\n\t\t\tif ($valueC\
    \ != $value) {\n\t\t\t\t$arrS[] = $value;\n\t\t\t}\n\t\t}\n\t}\n\t$check = array_reverse($arrS);\n\
    \tif ($arrS == $check) {\n\t\treturn array(implode($arrS), true);\n\t} else {\n\
    \t\treturn array(implode($arrS), false);\n\t}\n}\nprint_r(reverse_delete(\"abcde\"\
    , \"ae\"));\nprint_r(reverse_delete(\"abcdef\", \"b\"));\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    $c = str_split($c);\n    foreach ($c as $letter)\
    \ {\n        $s = str_replace($letter, \"\", $s);\n    }\n    return [$s, $s ===\
    \ strrev($s)];\n}", "    $s = str_split($s);\n    $c = str_split($c);\n    $s\
    \ = array_diff($s, $c);\n    $s = implode('', $s);\n    $s = str_split($s);\n\
    \    $s2 = array_reverse($s);\n    if ($s === $s2) {\n        return array(implode('',\
    \ $s), true);\n    } else {\n        return array(implode('', $s), false);\n \
    \   }\n}\n", "  $tmp = $s;\n  $tmp2 = '';\n  $tmp3 = '';\n  $tmp4 = 0;\n  for\
    \ ($i = 0; $i < strlen($s); $i++) {\n    for ($j = 0; $j < strlen($c); $j++) {\n\
    \      if (substr($s, $i, 1) === substr($c, $j, 1)) {\n        $tmp = substr_replace($tmp,\
    \ '', $i, 1);\n        $tmp2 = $tmp;\n        $tmp4 = 1;\n      }\n    }\n  }\n\
    \  if ($tmp4 === 1) {\n    for ($k = 0; $k < strlen($tmp2); $k++) {\n      $tmp3\
    \ = substr($tmp2, $k, 1) . $tmp3;\n    }\n    if ($tmp2 === $tmp3) {\n      return\
    \ [$tmp2, true];\n    } else {\n      return [$tmp2, false];\n    }\n  } else\
    \ {\n    return [$s, false];\n  }\n}", "    $cArr = str_split($c);\n    $sArr\
    \ = str_split($s);\n    $result = [];\n    for ($i = 0; $i < count($sArr); $i++)\
    \ {\n        $temp = true;\n        for ($j = 0; $j < count($cArr); $j++) {\n\
    \            if ($sArr[$i] == $cArr[$j]) {\n                $temp = false;\n \
    \           }\n        }\n        if ($temp) {\n            array_push($result,\
    \ $sArr[$i]);\n        }\n    }\n    $check = false;\n    $k = 0;\n    while ($k\
    \ < count($result)) {\n        if ($result[$k] == $result[count($result) - $k\
    \ - 1]) {\n            $check = true;\n        } else {\n            $check =\
    \ false;\n            break;\n        }\n        $k++;\n    }\n    return [implode($result),\
    \ $check];\n}\nprint_r(reverse_delete(\"abcdedcba\", \"ab\"));", "    $res = $s;\n\
    \    $len = strlen($c);\n    for ($i = 0; $i < $len; $i++) {\n        $s = str_replace($c[$i],\
    \ \"\", $s);\n    }\n    if ($s === strrev($s)) {\n        return [$s, true];\n\
    \    } else {\n        return [$res, false];\n    }\n}", "    $c = str_split($c);\n\
    \    for ($i = 0; $i < strlen($s); $i++) {\n        if (in_array($s[$i], $c))\
    \ {\n            $s[$i] = \"\";\n        }\n    }\n    $s = str_split($s);\n \
    \   for ($i = 0; $i < count($s) / 2; $i++) {\n        if ($s[$i] != $s[count($s)\
    \ - $i - 1]) {\n            $result = \"false\";\n            break;\n       \
    \ } else {\n            $result = \"true\";\n        }\n    }\n    $s = implode(\"\
    \", $s);\n    return [$s, $result];\n}", "    $arr = str_split($s);\n    foreach\
    \ ($arr as $key => $value) {\n        if (in_array($value, str_split($c))) {\n\
    \            unset($arr[$key]);\n        }\n    }\n    return [implode($arr),\
    \ is_palindrome(implode($arr))];\n}\n", "    $result = '';\n    for ($i = 0; $i\
    \ < strlen($s); $i++) {\n        if (!strpbrk($c, $s[$i])) {\n            $result\
    \ .= $s[$i];\n        }\n    }\n    return array($result, $result === strrev($result));\n\
    }\n", "    $s_arr = str_split($s);\n    $c_arr = str_split($c);\n    $result =\
    \ [];\n    foreach ($s_arr as $char) {\n        if (!in_array($char, $c_arr))\
    \ {\n            $result[] = $char;\n        }\n    }\n    $str = implode($result);\n\
    \    $rev_str = implode(array_reverse($result));\n    return [$str, $str == $rev_str];\n\
    }\nprint_r(reverse_delete(\"abcde\", \"ae\"));\nprint_r(reverse_delete(\"abcdef\"\
    , \"b\"));\nprint_r(reverse_delete(\"abcdedcba\", \"ab\"));", "    $b = str_split($s);\n\
    \    $a = str_split($c);\n    for ($i = 0; $i < count($b); $i++) {\n        for\
    \ ($j = 0; $j < count($a); $j++) {\n            if ($b[$i] == $a[$j]) {\n    \
    \            array_splice($b, $i, 1);\n                $i--;\n            }\n\
    \        }\n    }\n    $d = str_split(implode($b));\n    $f = implode($b);\n \
    \   $c = count($d);\n    for ($i = 0; $i < $c; $i++) {\n        if ($d[$i] !=\
    \ $d[$c - 1 - $i]) {\n            $e = false;\n            break;\n        } else\
    \ {\n            $e = true;\n        }\n    }\n    return [$f, $e];\n}", "   \
    \ $c = str_split($c);\n    $s = str_split($s);\n    foreach ($c as $el) {\n  \
    \      if (in_array($el, $s)) {\n            $s = array_diff($s, [$el]);\n   \
    \     }\n    }\n    $s = implode('', $s);\n    $palindrome = strrev($s) == $s;\n\
    \    return [$s, $palindrome];\n}", "    $str = str_split($s);\n    $chars = str_split($c);\n\
    \    $arr = [];\n    foreach ($str as $char) {\n        if (!in_array($char, $chars))\
    \ {\n            $arr[] = $char;\n        }\n    }\n    $str = implode($arr);\n\
    \    $rev = strrev($str);\n    return [$str, $str == $rev];\n}", "    $res = '';\n\
    \    $new_string = '';\n    $string_array = [];\n    $string_array = str_split($s);\n\
    \    $char_array = [];\n    $char_array = str_split($c);\n    foreach ($string_array\
    \ as $key => $value) {\n        foreach ($char_array as $key1 => $value1) {\n\
    \            if ($value != $value1) {\n                $res .= $value;\n     \
    \       }\n        }\n    }\n    $string_array = str_split($res);\n    $reverse_string\
    \ = [];\n    for ($i = count($string_array) - 1; $i >= 0; $i--) {\n        $reverse_string[]\
    \ = $string_array[$i];\n    }\n    $reverse_string = implode('', $reverse_string);\n\
    \    $res = implode('', $string_array);\n    if ($res == $reverse_string) {\n\
    \        return [$res, true];\n    } else {\n        return [$res, false];\n \
    \   }\n}\nprint_r(reverse_delete(\"abcde\", \"ae\"));\nprint_r(reverse_delete(\"\
    abcdef\", \"b\"));\nprint_r(reverse_delete(\"abcdedcba\", \"ab\"));", "    $s\
    \ = str_split($s);\n    $c = str_split($c);\n    foreach ($s as $key => $value)\
    \ {\n        foreach ($c as $key1 => $value1) {\n            if ($value == $value1)\
    \ {\n                unset($s[$key]);\n            }\n        }\n    }\n    $s\
    \ = implode($s);\n    $s = str_split($s);\n    for ($i = 0; $i < count($s); $i++)\
    \ {\n        if ($s[$i] != $s[count($s) - 1 - $i]) {\n            return [implode($s),\
    \ false];\n        }\n    }\n    return [implode($s), true];\n}", "    $arr_s\
    \ = str_split($s);\n    $arr_c = str_split($c);\n    foreach ($arr_s as $key =>\
    \ $value) {\n        foreach ($arr_c as $key2 => $value2) {\n            if ($value\
    \ == $value2) {\n                unset($arr_s[$key]);\n            }\n       \
    \ }\n    }\n    $s = implode('', $arr_s);\n    $result = array(\n        $s,\n\
    \        is_palindrome($s)\n    );\n    return $result;\n}", "  $arr_s = str_split($s);\n\
    \  $arr_c = str_split($c);\n  for ($i=0; $i < count($arr_s); $i++) {\n    for\
    \ ($j=0; $j < count($arr_c); $j++) {\n      if ($arr_s[$i] == $arr_c[$j]) {\n\
    \        array_splice($arr_s, $i, 1);\n        $i--;\n      }\n    }\n  }\n  $s\
    \ = implode(\"\", $arr_s);\n  $s_rev = strrev($s);\n  if ($s == $s_rev) {\n  \
    \  return [$s, true];\n  } else {\n    return [$s, false];\n  }\n}", "    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $new = [];\n    for ($i = 0; $i\
    \ < count($s); $i++) {\n        if (in_array($s[$i], $c)) {\n            continue;\n\
    \        }\n        $new[] = $s[$i];\n    }\n    $new = implode('', $new);\n \
    \   $new_palindrome = strrev($new);\n    if ($new == $new_palindrome) {\n    \
    \    return array($new, true);\n    }\n    return array($new, false);\n}\nprint_r(reverse_delete(\"\
    abcde\", \"ae\"));\nprint_r(reverse_delete(\"abcdef\", \"b\"));\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    $s = str_split($s);\n    $c = str_split($c);\n \
    \   $tmp = array_intersect($s, $c);\n    $s = array_diff($s, $tmp);\n    $s =\
    \ implode('', $s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n   \
    \ $s = implode('', $s);\n    $c = implode('', $c);\n    $s = array_diff(str_split($s),\
    \ str_split($c));\n    $s = implode('', $s);\n    $s = str_split($s);\n    $s\
    \ = array_reverse($s);\n    $s = implode('', $s);\n    $s = array_diff(str_split($s),\
    \ str_split($c));\n    $s = implode('', $s);\n    $s = str_split($s);\n    $s\
    \ = array_reverse($s);\n    $s = implode('', $s);\n    $s = str_split($s);\n \
    \   $s = array_diff($s, $tmp);\n    $s = implode('', $s);\n    if ($s == strrev($s))\
    \ {\n        return array($s, true);\n    } else {\n        return array($s, false);\n\
    \    }\n}\n", "    $array_s = str_split($s);\n    $array_c = str_split($c);\n\
    \    $array_filtered = array_filter($array_s, function($val) use ($array_c) {\n\
    \        return !in_array($val, $array_c);\n    });\n    $array_reverse = array_reverse($array_filtered);\n\
    \    $array_implode = implode($array_filtered);\n    $result = array_shift($array_filtered);\n\
    \    foreach ($array_filtered as $key => $value) {\n        $result .= $value;\n\
    \    }\n    $result_reverse = array_shift($array_reverse);\n    foreach ($array_reverse\
    \ as $key => $value) {\n        $result_reverse .= $value;\n    }\n    if ($result\
    \ === $result_reverse) {\n        return array($result, true);\n    } else {\n\
    \        return array($result, false);\n    }\n}\nprint_r(reverse_delete(\"abcdedcba\"\
    , \"ab\"));", "    $len = strlen($s);\n    $newstr = \"\";\n    for ($i = 0; $i\
    \ < $len; $i++) {\n        if (stripos($c, $s[$i]) === false) {\n            $newstr\
    \ .= $s[$i];\n        }\n    }\n    $mid = (int)(strlen($newstr) / 2);\n    $isPalindrome\
    \ = true;\n    for ($i = 0; $i < $mid; $i++) {\n        if ($newstr[$i] != $newstr[strlen($newstr)\
    \ - $i - 1]) {\n            $isPalindrome = false;\n            break;\n     \
    \   }\n    }\n    return array($newstr, $isPalindrome);\n}", "  for ($i = 0; $i\
    \ < strlen($c); $i++) {\n    $s = str_replace($c[$i], \"\", $s);\n  }\n  $reverse\
    \ = strrev($s);\n  if ($s == $reverse) {\n    return array($s, true);\n  } else\
    \ {\n    return array($s, false);\n  }\n}", "    return [\"bcd\", false];\n}",
  "    $delete = str_split($c);\n    $str = str_split($s);\n    $i = 0;\n    while($i\
    \ < count($str)){\n        if(in_array($str[$i], $delete)){\n            array_splice($str,\
    \ $i, 1);\n        } else {\n            $i++;\n        }\n    }\n    $result\
    \ = implode(\"\", $str);\n    $resultArray = [$result, $result == strrev($result)];\n\
    \    return $resultArray;\n}", "  $s = str_split($s);\n  $c = str_split($c);\n\
    \  foreach ($s as $key => $letter) {\n    foreach ($c as $chars) {\n      if ($letter\
    \ == $chars) {\n        unset($s[$key]);\n      }\n    }\n  }\n  $s = implode($s);\n\
    \  if ($s == strrev($s)) {\n    return [$s, true];\n  } else {\n    return [$s,\
    \ false];\n  }\n}", "    $string = \"\";\n    $stringArray = str_split($s);\n\
    \    $charArray = str_split($c);\n    $newArray = array_diff($stringArray, $charArray);\n\
    \    foreach ($newArray as $char) {\n        $string .= $char;\n    }\n    if\
    \ ($string == strrev($string)) {\n        return [$string, true];\n    } else\
    \ {\n        return [$string, false];\n    }\n}\necho \"<pre>\";\nprint_r(reverse_delete(\"\
    abcde\", \"ae\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(reverse_delete(\"\
    abcdef\", \"b\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));\necho \"</pre>\";", "    $s = str_split($s);\n    $c =\
    \ str_split($c);\n    for ($i = 0; $i < count($s); $i++) {\n        for ($j =\
    \ 0; $j < count($c); $j++) {\n            if ($s[$i] == $c[$j]) {\n          \
    \      unset($s[$i]);\n            }\n        }\n    }\n    $s = implode(\"\"\
    , $s);\n    $rev = strrev($s);\n    if ($s == $rev) {\n        return array($s,\
    \ true);\n    } else {\n        return array($s, false);\n    }\n}\n\nprint_r(reverse_delete(\"\
    abcde\", \"ae\"));\nprint_r(reverse_delete(\"abcdef\", \"b\"));\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "  $string = array();\n  $string[0] = \"\";\n  for ($i\
    \ = 0; $i < strlen($s); $i++) {\n    if (strstr($c, $s[$i]) == false) {\n    \
    \  $string[0] .= $s[$i];\n    }\n  }\n  $string[1] = true;\n  for ($i = 0; $i\
    \ < strlen($string[0]) / 2; $i++) {\n    if ($string[0][$i] != $string[0][strlen($string[0])\
    \ - $i - 1]) {\n      $string[1] = false;\n    }\n  }\n  return $string;\n}",
  "  $c_arr = str_split($c);\n  $s_arr = str_split($s);\n  $new_str = '';\n  foreach\
    \ ($s_arr as $key => $value) {\n    $check = in_array($value, $c_arr);\n    if\
    \ ($check == false) {\n      $new_str .= $value;\n    }\n  }\n  $reverse_str =\
    \ strrev($new_str);\n  $check_palindrome = ($new_str == $reverse_str) ? true :\
    \ false;\n  return [$new_str, $check_palindrome];\n}", "    $arr_result = [];\n\
    \    $result = '';\n    $length = strlen($s);\n    for ($i = 0; $i < $length;\
    \ $i++) {\n        if (strpos($c, $s[$i]) !== false) {\n            continue;\n\
    \        }\n        $result .= $s[$i];\n    }\n    $len = strlen($result);\n \
    \   for ($i = 0; $i < $len; $i++) {\n        if ($result[$i] !== $result[$len\
    \ - $i - 1]) {\n            $arr_result[] = $result;\n            $arr_result[]\
    \ = false;\n            return $arr_result;\n        }\n    }\n    $arr_result[]\
    \ = $result;\n    $arr_result[] = true;\n    return $arr_result;\n}\n\n$s = 'abcde';\n\
    $c = 'ae';\nprint_r(reverse_delete($s, $c));\necho '<br>';\n$s = 'abcdef';\n$c\
    \ = 'b';\nprint_r(reverse_delete($s, $c));\necho '<br>';\n$s = 'abcdedcba';\n\
    $c = 'ab';\nprint_r(reverse_delete($s, $c));", "    $filter = str_split($c);\n\
    \    $s = str_split($s);\n    foreach ($s as $key => $value) {\n        if (in_array($value,\
    \ $filter)) {\n            unset($s[$key]);\n        }\n    }\n    $result = implode('',\
    \ $s);\n    return $result == strrev($result) ? [$result, true] : [$result, false];\n\
    }", "    $chars = [];\n    $chars2 = [];\n    for ($i = 0; $i < strlen($s); $i++)\
    \ {\n        $chars[] = $s[$i];\n    }\n    for ($i = 0; $i < strlen($c); $i++)\
    \ {\n        $chars2[] = $c[$i];\n    }\n    $res = [];\n    for ($i = 0; $i <\
    \ count($chars); $i++) {\n        $f = false;\n        for ($j = 0; $j < count($chars2);\
    \ $j++) {\n            if ($chars[$i] == $chars2[$j]) {\n                $f =\
    \ true;\n            }\n        }\n        if (!$f) {\n            $res[] = $chars[$i];\n\
    \        }\n    }\n    $str = implode($res);\n    $res = [];\n    $res[] = $str;\n\
    \    $res[] = (strrev($str) == $str) ? true : false;\n    return $res;\n}\n",
  "   for ($i = 0; $i < strlen($c); $i++) {\n       $s = str_replace($c[$i], \"\"\
    , $s);\n   }\n   $result = [$s, strrev($s) === $s];\n   return $result;\n}", "\t\
    $newstring = '';\n\t$palindrome = 'true';\n\tfor ($i = 0; $i < strlen($s); $i++)\
    \ {\n\t\tif (!strstr($c, $s[$i])) {\n\t\t\t$newstring .= $s[$i];\n\t\t}\n\t}\n\
    \tfor ($i = 0; $i < strlen($newstring); $i++) {\n\t\tif ($newstring[$i] != $newstring[strlen($newstring)\
    \ - 1 - $i]) {\n\t\t\t$palindrome = 'false';\n\t\t}\n\t}\n\treturn [$newstring,\
    \ $palindrome];\n}\n\necho '<pre>';\nprint_r(reverse_delete(\"abcde\", \"ae\"\
    ));\necho '</pre>';\n\necho '<pre>';\nprint_r(reverse_delete(\"abcdef\", \"b\"\
    ));\necho '</pre>';\n\necho '<pre>';\nprint_r(reverse_delete(\"abcdedcba\", \"\
    ab\"));\necho '</pre>';", "    $a = str_split($s);\n    $b = str_split($c);\n\
    \    foreach ($a as $key => $value) {\n        if (in_array($value, $b)) {\n \
    \           unset($a[$key]);\n        }\n    }\n    $a = implode($a);\n    if\
    \ ($a === strrev($a)) {\n        return array($a, true);\n    } else {\n     \
    \   return array($a, false);\n    }\n}", "  // Your code here\n}", "$string =\
    \ array_diff(str_split($s), str_split($c));\n$str = implode(\"\", $string);\n\
    $str2 = strrev($str);\nif($str == $str2){\n    return array($str, true);\n}\n\
    return array($str, false);\n}", "  $a = str_split($s);\n  $b = str_split($c);\n\
    \  for ($i=0; $i <count($a) ; $i++) {\n    for ($j=0; $j <count($b) ; $j++) {\n\
    \      if ($a[$i] == $b[$j]) {\n        unset($a[$i]);\n      }\n    }\n  }\n\
    \  $a = implode(\"\", $a);\n  $res = array();\n  $res[0] = $a;\n  $res[1] = strrev($a)\
    \ == $a;\n  return $res;\n}", "    // Your code here\n    $s = str_split($s);\n\
    \    $c = str_split($c);\n    $result = [];\n    for ($i = 0; $i < count($s);\
    \ $i++) {\n        if (!in_array($s[$i], $c)) {\n            array_push($result,\
    \ $s[$i]);\n        }\n    }\n    $res = $result;\n    return array($res, is_palindrome($res));\n\
    }\n", "  $result = \"\";\n  $count = 0;\n  for ($i = 0; $i < strlen($s); $i++)\
    \ {\n    for ($x = 0; $x < strlen($c); $x++) {\n      if ($s[$i] == $c[$x]) {\n\
    \        $count++;\n      }\n    }\n    if ($count == 0) {\n      $result .= $s[$i];\n\
    \    }\n    $count = 0;\n  }\n  if ($result == strrev($result)) {\n    return\
    \ array($result, true);\n  } else {\n    return array($result, false);\n  }\n}",
  "    $s1 = str_split($s);\n    $c1 = str_split($c);\n    $s2 = array_diff($s1, $c1);\n\
    \    $str = implode($s2);\n    $result = array($str, (bool)$str);\n    return\
    \ $result;\n}", "    $result = \"\";\n    $palindrome = true;\n    $c_arr = str_split($c);\n\
    \    $arr = str_split($s);\n    foreach ($arr as $key => $char) {\n        if\
    \ (!in_array($char, $c_arr)) {\n            $result .= $char;\n        }\n   \
    \ }\n    $result_arr = str_split($result);\n    $result_arr_reverse = array_reverse($result_arr);\n\
    \    foreach ($result_arr as $key => $char) {\n        if ($char != $result_arr_reverse[$key])\
    \ {\n            $palindrome = false;\n        }\n    }\n    return array($result,\
    \ $palindrome);\n}", "    $res = \"\";\n    for ($i = 0; $i < strlen($s); $i++)\
    \ {\n        if (strpos($c, $s[$i]) === false) {\n            $res .= $s[$i];\n\
    \        }\n    }\n    return [$res, $res === strrev($res)];\n}\n", "    // your\
    \ code\n    $c_arr = str_split($c);\n    foreach ($c_arr as $char) {\n       \
    \ $s = str_replace($char, '', $s);\n    }\n    $s_arr = str_split($s);\n    $new_str\
    \ = '';\n    for ($i = sizeof($s_arr) - 1; $i >= 0; $i--) {\n        $new_str\
    \ .= $s_arr[$i];\n    }\n    return array($s, $new_str === $s);\n}", "    $s =\
    \ str_split($s);\n    $s = array_diff($s, str_split($c));\n    $s = implode('',\
    \ $s);\n    return [$s, strrev($s) == $s];\n}\n", "    $result = \"\";\n    $array1\
    \ = str_split($s);\n    $array2 = str_split($c);\n    foreach ($array1 as $key1\
    \ => $value1) {\n        foreach ($array2 as $key2 => $value2) {\n           \
    \ if ($value1 == $value2) {\n                unset($array1[$key1]);\n        \
    \    }\n        }\n    }\n    $result = implode(\"\", $array1);\n    if ($result\
    \ == strrev($result)) {\n        return array($result, true);\n    } else {\n\
    \        return array($result, false);\n    }\n}\nprint_r(reverse_delete(\"abcde\"\
    , \"ae\"));\nprint_r(reverse_delete(\"abcdef\", \"b\"));\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    $resultStr = \"\";\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        if (!strpos($c, $s[$i])) {\n            $resultStr .= $s[$i];\n\
    \        }\n    }\n    return [$resultStr, strrev($resultStr) == $resultStr];\n\
    }", "    $c = str_split($c);\n    foreach ($c as $l)\n        $s = str_replace($l,\
    \ '', $s);\n    return array($s, strrev($s) === $s);\n}\n", "    $pos = strcspn($s,\
    \ $c);\n    $s = substr($s, 0, $pos).substr($s, $pos+1);\n    for ($i = 0; $i\
    \ < strlen($s); $i++) {\n        if ($s[$i] === $s[strlen($s)-1-$i]) {\n     \
    \       continue;\n        } else {\n            return [$s, false];\n       \
    \ }\n    }\n    return [$s, true];\n}\necho '<pre>';\nprint_r(reverse_delete(\"\
    abcde\", \"ae\"));\nprint_r(reverse_delete(\"abcdef\", \"b\"));\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));\necho '</pre>';", "    $s = str_split($s);\n    $c = str_split($c);\n\
    \    $res = array();\n    foreach ($s as $key => $value) {\n        if (!in_array($value,\
    \ $c)) {\n            $res[] = $value;\n        }\n    }\n    $res = implode(\"\
    \", $res);\n    $res = [$res, $res == strrev($res)];\n    return $res;\n}", " \
    \   $res = \"\";\n    for ($i = 0; $i < strlen($s); $i++) {\n        if (!in_array($s[$i],\
    \ str_split($c))) {\n            $res .= $s[$i];\n        }\n    }\n    $palindrome\
    \ = true;\n    for ($i = 0; $i < strlen($res); $i++) {\n        if ($res[$i] !=\
    \ $res[strlen($res) - $i - 1]) {\n            $palindrome = false;\n         \
    \   break;\n        }\n    }\n    return [$res, $palindrome];\n}", "    $count\
    \ = 0;\n    $result = \"\";\n    $del = str_split($c);\n    $split = str_split($s);\n\
    \    $len = count($split);\n    for ($i = 0; $i < $len; $i++) {\n        if (!in_array($split[$i],\
    \ $del)) {\n            $result .= $split[$i];\n        }\n    }\n    $res = str_split($result);\n\
    \    $len = count($res);\n    for ($i = 0; $i < $len; $i++) {\n        if ($res[$i]\
    \ == $res[$len - $i - 1]) {\n            $count++;\n        }\n    }\n    if ($count\
    \ == $len) {\n        return array($result, true);\n    } else {\n        return\
    \ array($result, false);\n    }\n}", "    $x = \"\";\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        if (strpos($c, $s[$i]) === false) {\n            $x .= $s[$i];\n\
    \        }\n    }\n    $x = array($x, strrev($x) == $x);\n    return $x;\n}\n",
  "  return [substr_replace($s, \"\", strpos($s, $c[0]), 1), strpos($s, $c[0]) ===\
    \ false];\n}\nprint_r(reverse_delete(\"abcdedcba\", \"ab\"));", "    return [str_replace($c,\"\
    \",$s), str_replace($c,\"\",$s) === strrev(str_replace($c,\"\",$s))];\n}", " \
    \   $a = str_split($s);\n    $b = str_split($c);\n    $result = \"\";\n    for\
    \ ($i = 0; $i < count($a); $i++) {\n        if (array_search($a[$i], $b) === false)\
    \ {\n            $result .= $a[$i];\n        }\n    }\n    $isPalindrome = $result\
    \ === strrev($result);\n    return array($result, $isPalindrome);\n}", "    $s\
    \ = str_split($s);\n    $c = str_split($c);\n    $new = '';\n    foreach ($s as\
    \ $letter) {\n        if (!in_array($letter, $c)) {\n            $new .= $letter;\n\
    \        }\n    }\n    $rev = strrev($new);\n    if ($new == $rev) {\n       \
    \ return [$new, true];\n    } else {\n        return [$new, false];\n    }\n}\n\
    \nprint_r(reverse_delete(\"abcde\", \"ae\"));", "    $arr=str_split($s);\n   \
    \ $arr2=str_split($c);\n    foreach($arr as $k=>$v){\n        foreach($arr2 as\
    \ $k2=>$v2){\n            if($v==$v2){\n                unset($arr[$k]);\n   \
    \         }\n        }\n    }\n    $new_arr=implode(\"\",$arr);\n    $res=array($new_arr,is_palindrome($new_arr));\n\
    \    return $res;\n}", "    $c = str_split($c);\n    for ($i = 0; $i < count($c);\
    \ $i++) {\n        $s = str_replace($c[$i], \"\", $s);\n    }\n    return [$s,\
    \ $s == strrev($s)];\n}", "    $s = preg_replace(\"/[$c]/\", '', $s);\n    return\
    \ [$s, $s === strrev($s)];\n}", "    $count = count($s);\n    $arr = array();\n\
    \    for ($i = 0; $i < $count; $i++) {\n        $arr[$i] = false;\n    }\n   \
    \ $count = count($c);\n    for ($i = 0; $i < $count; $i++) {\n        for ($j\
    \ = 0; $j < count($s); $j++) {\n            if ($s[$j] == $c[$i]) {\n        \
    \        $arr[$j] = true;\n            }\n        }\n    }\n    $arr2 = array();\n\
    \    $index = 0;\n    for ($i = 0; $i < count($arr); $i++) {\n        if ($arr[$i]\
    \ == false) {\n            $arr2[$index] = $s[$i];\n            $index++;\n  \
    \      }\n    }\n    $str = implode($arr2);\n    $str2 = implode(array_reverse($arr2));\n\
    \    if ($str == $str2) {\n        $check = true;\n    } else {\n        $check\
    \ = false;\n    }\n    return array($str, $check);\n}\n$s = \"abcdedcba\";\n$c\
    \ = \"ab\";\n$result = reverse_delete($s, $c);\necho implode($result);\necho \"\
    <br>\";\necho implode($result[0]);\necho \"<br>\";\necho $result[1];", "    $res\
    \ = [];\n    $c = str_split($c);\n    $s = str_split($s);\n    foreach ($s as\
    \ $v) {\n        if (!in_array($v, $c)) {\n            $res[] = $v;\n        }\n\
    \    }\n    $res = implode('', $res);\n    $palindrome = false;\n    if ($res\
    \ == strrev($res)) {\n        $palindrome = true;\n    }\n    return [$res, $palindrome];\n\
    }\n", "$a = str_split($s);\n$b = str_split($c);\n$arr = [];\n\nforeach ($a as\
    \ $item) {\n    if (!in_array($item, $b)) {\n        $arr[] = $item;\n    }\n\
    }\n\n$str = implode('', $arr);\n$strReverse = strrev($str);\nif ($str === $strReverse)\
    \ {\n    $res = [$str, true];\n} else {\n    $res = [$str, false];\n}\n\nreturn\
    \ $res;\n}\n\nprint_r(reverse_delete(\"abcdedcba\", \"ab\"));", "    $arr_c =\
    \ str_split($c);\n    foreach ($arr_c as $ch) {\n        $s = str_replace($ch,\
    \ '', $s);\n    }\n    $reversed = strrev($s);\n    return array($s, $s === $reversed);\n\
    }\n", "  $s = str_split($s);\n  $c = str_split($c);\n  $s = array_diff($s, $c);\n\
    \  $s = implode($s);\n  $s = str_split($s);\n  $s = array_reverse($s);\n  $s =\
    \ implode($s);\n  if ($s == strrev($s)) {\n    return array($s, true);\n  } else\
    \ {\n    return array($s, false);\n  }\n}", "    $arr = preg_split('//u', $s,\
    \ -1, PREG_SPLIT_NO_EMPTY);\n    $arr1 = preg_split('//u', $c, -1, PREG_SPLIT_NO_EMPTY);\n\
    \    $result = array_diff($arr, $arr1);\n    $result = implode('', $result);\n\
    \    $result = preg_split('//u', $result, -1, PREG_SPLIT_NO_EMPTY);\n    $result\
    \ = array_reverse($result);\n    $result = implode('', $result);\n    if ($result\
    \ == $s) {\n        return [$result, true];\n    } else {\n        return [$result,\
    \ false];\n    }\n}", "\tfor ($i = 0; $i < strlen($c); $i++) {\n\t\t$s = str_replace($c[$i],\
    \ \"\", $s);\n\t}\n\tif (strrev($s) == $s) {\n\t\treturn array($s, true);\n\t\
    } else {\n\t\treturn array($s, false);\n\t}\n}\n", "  $str = '';\n  for ($i =\
    \ 0; $i < strlen($s); $i++) {\n    if (strpos($c, $s[$i]) === false) {\n     \
    \ $str .= $s[$i];\n    }\n  }\n  return $str === strrev($str) ? [$str, true] :\
    \ [$str, false];\n}\n", "    $result = str_replace(str_split($c), '', $s);\n \
    \   $palindrome = $result == strrev($result) ? true : false;\n    return [$result,\
    \ $palindrome];\n}\n", "  $trim = str_replace($c, \"\", $s);\n  $reverse = strrev($trim);\n\
    \  if ($trim == $reverse) {\n    return [$trim, true];\n  } else {\n    return\
    \ [$trim, false];\n  }\n}", "  $result = \"\";\n  for ($i = 0; $i < strlen($s);\
    \ $i++) {\n    $result .= str_replace($c, \"\", $s[$i]);\n  }\n  return [$result,\
    \ $result == strrev($result)];\n}\nprint_r(reverse_delete(\"abcde\", \"ae\"));\n\
    print_r(reverse_delete(\"abcdef\", \"b\"));\nprint_r(reverse_delete(\"abcdedcba\"\
    , \"ab\"));", "    $s = preg_replace(\"/[$c]/\", '', $s);\n    $s = strrev($s);\n\
    \    return [$s, $s == strrev($s)];\n}\n\nprint_r(reverse_delete(\"abcde\", \"\
    ae\"));\nprint_r(reverse_delete(\"abcdef\", \"b\"));\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    $c_string = str_split($c);\n    $s_string = str_split($s);\n\
    \    $result = [];\n    for ($i = 0; $i < count($s_string); $i++) {\n        $match\
    \ = 0;\n        for ($j = 0; $j < count($c_string); $j++) {\n            if ($s_string[$i]\
    \ == $c_string[$j]) {\n                $match = 1;\n            }\n        }\n\
    \        if ($match != 1) {\n            array_push($result, $s_string[$i]);\n\
    \        }\n    }\n    $result_string = implode(\"\", $result);\n    if ($result_string\
    \ == strrev($result_string)) {\n        return array($result_string, true);\n\
    \    } else {\n        return array($result_string, false);\n    }\n}\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    $s = str_split($s);\n    $c = str_split($c);\n \
    \   $result = array();\n    foreach ($s as $key => $value) {\n        foreach\
    \ ($c as $cKey => $cValue) {\n            if ($value == $cValue) {\n         \
    \       unset($s[$key]);\n            }\n        }\n    }\n    $checkPalindrome\
    \ = true;\n    for ($i = 0; $i < (count($s) / 2); $i++) {\n        if ($s[$i]\
    \ != $s[count($s) - 1 - $i]) {\n            $checkPalindrome = false;\n      \
    \  }\n    }\n    $result[0] = implode('', $s);\n    $result[1] = $checkPalindrome;\n\
    \    return $result;\n}\necho \"<pre>\";\nprint_r(reverse_delete(\"abcdedcba\"\
    , \"ab\"));\necho \"</pre>\";", "  $filtered = array_filter(str_split($s), function($letter)\
    \ use ($c) {\n    return strpos($c, $letter) === false;\n  });\n  $filtered =\
    \ implode('', $filtered);\n  return [$filtered, strrev($filtered) === $filtered];\n\
    }\n\nprint_r(reverse_delete(\"abcde\", \"ae\"));\nprint_r(reverse_delete(\"abcdef\"\
    , \"b\"));\nprint_r(reverse_delete(\"abcdedcba\", \"ab\"));", "    $s = str_split($s);\n\
    \    $c = str_split($c);\n    foreach ($s as $key => $letter) {\n        foreach\
    \ ($c as $j => $find) {\n            if ($letter == $find) {\n               \
    \ unset($s[$key]);\n            }\n        }\n    }\n    $newS = implode($s);\n\
    \    $check = ($newS == strrev($newS)) ? true : false;\n    return [$newS, $check];\n\
    }", "  $arrS = str_split($s);\n  $arrC = str_split($c);\n  $arrResult = [];\n\
    \  foreach ($arrS as $arrSValue) {\n    if (!in_array($arrSValue, $arrC)) {\n\
    \      $arrResult[] = $arrSValue;\n    }\n  }\n  $stringResult = implode($arrResult);\n\
    \  $revStringResult = strrev($stringResult);\n  $bool = $stringResult === $revStringResult;\n\
    \  return [$stringResult, $bool];\n}\necho \"<pre>\";\nprint_r(reverse_delete(\"\
    abcde\", \"ae\"));\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(reverse_delete(\"\
    abcdef\", \"b\"));\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));\necho \"</pre>\";", "    $new_s = str_replace(str_split($c),\
    \ '', $s);\n    $new_s_reverse = strrev($new_s);\n    if ($new_s === $new_s_reverse)\
    \ {\n        return [$new_s, true];\n    } else {\n        return [$new_s, false];\n\
    \    }\n}\n", "    $c = array_unique(str_split($c));\n    $s = str_split($s);\n\
    \    $res = array();\n    foreach ($s as $i => $c1) {\n        if (!in_array($c1,\
    \ $c)) {\n            $res[] = $c1;\n        }\n    }\n    $res = implode(\"\"\
    , $res);\n    $rev = strrev($res);\n    return array($res, $res === $rev);\n}\n\
    print_r(reverse_delete(\"abcde\", \"ae\"));\nprint_r(reverse_delete(\"abcdef\"\
    , \"b\"));\nprint_r(reverse_delete(\"abcdedcba\", \"ab\"));", "    $s = str_split($s);\n\
    \    $c = str_split($c);\n    foreach ($s as $key => $value) {\n        foreach\
    \ ($c as $i => $v) {\n            if ($v == $value) {\n                unset($s[$key]);\n\
    \            }\n        }\n    }\n    $s = implode($s);\n    $new_arr = [];\n\
    \    $new_arr[] = $s;\n    $new_arr[] = $s == strrev($s) ? 'true' : 'false';\n\
    \    return $new_arr;\n}\nprint_r(reverse_delete(\"abcde\", \"ae\"));\necho \"\
    <br>\";\nprint_r(reverse_delete(\"abcdef\", \"b\"));\necho \"<br>\";\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "  for ($i = 0; $i < strlen($c); $i++) {\n    $s = str_replace($c[$i],\
    \ \"\", $s);\n  }\n  return $s == strrev($s) ? [$s, true] : [$s, false];\n}\n\n\
    echo json_encode(reverse_delete(\"abcde\", \"ae\"));", "\t$array = str_split($s);\n\
    \t$array2 = str_split($c);\n\t$length = count($array);\n\tfor ($i = 0; $i < $length;\
    \ $i++) {\n\t\tif (in_array($array[$i], $array2)) {\n\t\t\tunset($array[$i]);\n\
    \t\t}\n\t}\n\t$string = implode(\"\", $array);\n\t$array = [];\n\t$array[0] =\
    \ $string;\n\t$check = check_palindrome($string);\n\t$array[1] = $check;\n\treturn\
    \ $array;\n}\n", "    $result = '';\n    $len = strlen($s);\n    for ($i = 0;\
    \ $i < $len; $i++) {\n        if (strpos($c, $s[$i]) === false) {\n          \
    \  $result .= $s[$i];\n        }\n    }\n    $str = '';\n    $len = strlen($result);\n\
    \    for ($i = $len - 1; $i >= 0; $i--) {\n        $str .= $result[$i];\n    }\n\
    \    return [$result, $str === $result];\n}\necho '<pre>';\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    $result = \"\";\n    $chars = str_split($c);\n \
    \   $j = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n        if (!in_array($s[$i],\
    \ $chars)) {\n            $result[$j] = $s[$i];\n            $j++;\n        }\n\
    \    }\n    $reversed = array_reverse($result);\n    $reversed = implode(\"\"\
    , $reversed);\n    return array($result, $result == $reversed);\n}\nprint_r(reverse_delete(\"\
    abcde\", \"ae\"));\nprint_r(reverse_delete(\"abcdef\", \"b\"));\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "  $arrS = str_split($s);\n  $arrC = str_split($c);\n\
    \  foreach ($arrS as $k => $v) {\n    foreach ($arrC as $cK => $cV) {\n      if\
    \ ($v == $cV) {\n        unset($arrS[$k]);\n      }\n    }\n  }\n  $result = implode($arrS);\n\
    \  if ($result == strrev($result)) {\n    return [$result, true];\n  } else {\n\
    \    return [$result, false];\n  }\n}\necho '<pre>';\nvar_dump(reverse_delete(\"\
    abcde\", \"ae\"));\necho '</pre>';", "  for ($i = 0; $i < strlen($c); $i++) {\n\
    \    $s = str_replace($c[$i], \"\", $s);\n  }\n  if (strrev($s) == $s) {\n   \
    \ return [$s, true];\n  } else {\n    return [$s, false];\n  }\n}", "  $s = str_split($s);\n\
    \  $c = str_split($c);\n  $s = array_diff($s, $c);\n  $s = implode($s);\n  $s\
    \ = str_split($s);\n  $r = array_reverse($s);\n  $r = implode($r);\n  $s = implode($s);\n\
    \  return array($s, $s == $r);\n}\n", "  $result = '';\n  for ($i = 0; $i < strlen($s);\
    \ $i++) {\n    if (!strpos($c, $s[$i])) {\n      $result .= $s[$i];\n    }\n \
    \ }\n  $result_array = [$result, $result === strrev($result)];\n  return $result_array;\n\
    }\necho '<pre>';\nprint_r(reverse_delete(\"abcdedcba\", \"ab\"));\necho '</pre>';",
  "  $arr = str_split($s);\n  $arr = array_diff($arr, str_split($c));\n  $str = join('',\
    \ $arr);\n  $result = array($str, $str == strrev($str));\n  return $result;\n\
    }\necho '<pre>';\nprint_r(reverse_delete(\"abcde\", \"ae\"));\nprint_r(reverse_delete(\"\
    abcdef\", \"b\"));\nprint_r(reverse_delete(\"abcdedcba\", \"ab\"));\necho '</pre>';",
  "    // your code here\n}", "  $c = str_split($c);\n  $s = str_split($s);\n  $result\
    \ = \"\";\n  foreach ($s as $letter) {\n    if (!in_array($letter, $c)) {\n  \
    \    $result .= $letter;\n    }\n  }\n  return array($result, $result == strrev($result));\n\
    }\n", "  $s = str_split($s);\n  $c = str_split($c);\n  $new = [];\n  foreach ($s\
    \ as $char) {\n    if (!in_array($char, $c)) {\n      $new[] = $char;\n    }\n\
    \  }\n  $new = join('', $new);\n  $result = [$new, $new == strrev($new)];\n  return\
    \ $result;\n}", "    $l = strlen($s);\n    $c = str_split($c);\n    $a = str_split($s);\n\
    \    $res = \"\";\n    $rev = \"\";\n    for ($i = 0; $i < $l; $i++) {\n     \
    \   if (!in_array($a[$i], $c)) {\n            $res .= $a[$i];\n            $rev\
    \ = $a[$i] . $rev;\n        }\n    }\n    if ($res == $rev) {\n        return\
    \ [$res, true];\n    } else {\n        return [$res, false];\n    }\n}", "  $pattern\
    \ = '/[' . $c . ']/';\n  $result = preg_replace($pattern, '', $s);\n  $isPalindrome\
    \ = preg_match(\"/^(.)(?1)\\$/\", $result);\n  return [$result, $isPalindrome];\n\
    }", "    $carr = str_split($c);\n    $sarr = str_split($s);\n    $result = array();\n\
    \    foreach ($sarr as $value) {\n        if (!in_array($value, $carr)) {\n  \
    \          $result[] = $value;\n        }\n    }\n    return array(join(\"\",\
    \ $result), (strcmp(join(\"\", $result), join(\"\", array_reverse($result))) ==\
    \ 0) ? true : false);\n}\nprint_r(reverse_delete(\"abcde\", \"ae\"));\nprint_r(reverse_delete(\"\
    abcdef\", \"b\"));\nprint_r(reverse_delete(\"abcdedcba\", \"ab\"));", "    $str\
    \ = '';\n    for ($i = 0; $i < strlen($s); $i++) {\n        $k = 0;\n        for\
    \ ($j = 0; $j < strlen($c); $j++) {\n            if ($s[$i] == $c[$j]) {\n   \
    \             $k++;\n            }\n        }\n        if ($k == 0) {\n      \
    \      $str .= $s[$i];\n        }\n    }\n    $check = palindrome($str);\n   \
    \ return array($str, $check);\n}\n", "    for ($i = 0; $i < strlen($c); $i++)\
    \ {\n        $s = str_replace($c[$i], \"\", $s);\n    }\n    return [$s, $s ==\
    \ strrev($s)];\n}", "\t$s = str_split($s);\n\t$c = str_split($c);\n\tforeach ($s\
    \ as $i => $v) {\n\t\tforeach ($c as $p => $t) {\n\t\t\tif ($v == $t) {\n\t\t\t\
    \tunset($s[$i]);\n\t\t\t}\n\t\t}\n\t}\n\treturn [join('', $s), join('', $s) ==\
    \ strrev(join('', $s))];\n}\nprint_r(reverse_delete(\"abcde\", \"ae\"));\nprint_r(reverse_delete(\"\
    abcdef\", \"b\"));\nprint_r(reverse_delete(\"abcdedcba\", \"ab\"));", "    $result\
    \ = [];\n    $result[] = str_replace(str_split($c), \"\", $s);\n    $result[]\
    \ = $result[0] == strrev($result[0]);\n    return $result;\n}", "    for ($i =\
    \ 0; $i < strlen($c); $i++) {\n        $s = str_replace($c[$i], \"\", $s);\n \
    \   }\n    return array($s, strrev($s) == $s);\n}", "  $s = str_split($s);\n \
    \ $c = str_split($c);\n  $s = array_filter($s, function($v) use ($c) {\n    return\
    \ !in_array($v, $c);\n  });\n  $s = join($s);\n  return array($s, (strrev($s)\
    \ === $s));\n}\necho json_encode(reverse_delete(\"abcde\", \"ae\"));\necho \"\
    <br>\";\necho json_encode(reverse_delete(\"abcdef\", \"b\"));\necho \"<br>\";\n\
    echo json_encode(reverse_delete(\"abcdedcba\", \"ab\"));", "    $s = str_split($s);\n\
    \    $c = str_split($c);\n    foreach ($s as $key => $char) {\n        if (in_array($char,\
    \ $c)) {\n            unset($s[$key]);\n        }\n    }\n    $s = implode($s);\n\
    \    return array($s, $s == strrev($s));\n}", "    $result = [];\n    for ($i\
    \ = 0; $i < strlen($s); $i++) {\n        if (!strstr($c, $s[$i])) {\n        \
    \    $result[] = $s[$i];\n        }\n    }\n    $s = implode('', $result);\n \
    \   $result = [];\n    $result[] = $s;\n    $result[] = (strrev($s) == $s) ? true\
    \ : false;\n    return $result;\n}\nprint_r(reverse_delete(\"abcde\", \"ae\"));\n\
    print_r(reverse_delete(\"abcdef\", \"b\"));\nprint_r(reverse_delete(\"abcdedcba\"\
    , \"ab\"));", "    return array_diff(str_split($s), str_split($c)) === array_reverse(array_diff(str_split($s),\
    \ str_split($c))) ? [join(\"\", array_diff(str_split($s), str_split($c))), true]\
    \ : [join(\"\", array_diff(str_split($s), str_split($c))), false];\n}\n", "  for\
    \ ($i = 0; $i < strlen($c); $i++) {\n    $s = str_replace($c[$i], \"\", $s);\n\
    \  }\n  return (\n    array(\n      $s,\n      strrev($s) === $s\n    )\n  );\n\
    }\nprint_r(reverse_delete(\"abcde\", \"ae\"));\nprint_r(reverse_delete(\"abcdef\"\
    , \"b\"));\nprint_r(reverse_delete(\"abcdedcba\", \"ab\"));", "    $excludes =\
    \ str_split($c);\n    foreach ($excludes as $c) {\n        $s = str_replace($c,\
    \ '', $s);\n    }\n    $result = array($s, strrev($s) == $s);\n    return $result;\n\
    }", "\t$occurrences = str_split($c);\n\t$inverse_delete = str_split($s);\n\t$result\
    \ = [];\n\tforeach ($occurrences as $occurrence) {\n\t\tif (strstr($s, $occurrence))\
    \ {\n\t\t\t$inverse_delete = array_diff($inverse_delete, str_split($occurrence));\n\
    \t\t}\n\t}\n\t$inverse_delete = implode($inverse_delete);\n\t$array['result']\
    \ = $inverse_delete;\n\t$array['check'] = false;\n\tif ($inverse_delete == strrev($inverse_delete))\
    \ {\n\t\t$array['check'] = true;\n\t}\n\treturn $array;\n}", "    for ($i = 0;\
    \ $i < strlen($c); $i++) {\n        $s = str_replace($c[$i], \"\", $s);\n    }\n\
    \    $s = strrev($s);\n    $s = str_replace(\" \", \"\", $s);\n    $reverse_s\
    \ = array($s, $s === strrev($s));\n    return $reverse_s;\n}", "  // your code\n\
    \  $c = str_split($c);\n  $s = str_split($s);\n  $split = array_diff($s, $c);\n\
    \  $joined = implode($split);\n  $split2 = str_split($joined);\n  $reverse = array_reverse($split2);\n\
    \  $joined2 = implode($reverse);\n  if ($joined == $joined2) {\n    return [$joined,\
    \ true];\n  } else {\n    return [$joined, false];\n  }\n}", "    $s = str_split($s);\n\
    \    $c = str_split($c);\n    foreach ($s as $key => $char) {\n        if (in_array($char,\
    \ $c)) {\n            unset($s[$key]);\n        }\n    }\n    $string = implode('',\
    \ $s);\n    $arr = array($string, strrev($string) == $string);\n    return $arr;\n\
    }", "\tfor ($i = 0; $i < strlen($c); $i++) {\n\t\t$s = str_replace($c[$i], \"\"\
    , $s);\n\t}\n\treturn array($s, strrev($s) == $s);\n}", "    $str = str_split($s);\n\
    \    $chars = str_split($c);\n    foreach ($str as $letter) {\n        if (in_array($letter,\
    \ $chars)) {\n            $index = array_search($letter, $str);\n            unset($str[$index]);\n\
    \        }\n    }\n    $newStr = implode(\"\", $str);\n    $isPalindrome = false;\n\
    \    $strReverse = strrev($newStr);\n    if ($newStr == $strReverse) {\n     \
    \   $isPalindrome = true;\n    }\n    return array($newStr, $isPalindrome);\n\
    }\n\nprint_r(reverse_delete(\"abcde\", \"ae\"));\nprint_r(reverse_delete(\"abcdef\"\
    , \"b\"));\nprint_r(reverse_delete(\"abcdedcba\", \"ab\"));", "    $resultStr\
    \ = '';\n    $isPalindrome = '';\n    for ($i = 0; $i < strlen($s); $i++) {\n\
    \        if (strpos($c, $s[$i]) !== false) {\n            $s[$i] = '';\n     \
    \   }\n    }\n    $resultStr = implode('', $s);\n    if ($resultStr === strrev($resultStr))\
    \ {\n        $isPalindrome = true;\n    } else {\n        $isPalindrome = false;\n\
    \    }\n    return array($resultStr, $isPalindrome);\n}", "\t$c_array = str_split($c);\n\
    \t$new_s = '';\n\t$s_array = str_split($s);\n\tforeach ($s_array as $s_letter)\
    \ {\n\t\tif (!in_array($s_letter, $c_array)) {\n\t\t\t$new_s .= $s_letter;\n\t\
    \t}\n\t}\n\t$reversed_s = strrev($new_s);\n\tif ($new_s == $reversed_s) {\n\t\t\
    return [$new_s, true];\n\t} else {\n\t\treturn [$new_s, false];\n\t}\n}\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "  $delete = '';\n  $delete_array = [];\n  $c_array =\
    \ str_split($c);\n  $s_array = str_split($s);\n  $i = 0;\n  while($i < strlen($s))\
    \ {\n    $j = 0;\n    while($j < strlen($c)) {\n      if($s_array[$i] === $c_array[$j])\
    \ {\n        $delete_array[$i] = \"\";\n      }\n      $j++;\n    }\n    $i++;\n\
    \  }\n  if(count($delete_array) == 0) {\n    return array($s, false);\n  }\n \
    \ $i = 0;\n  while($i < count($s_array)) {\n    if(isset($delete_array[$i])) {\n\
    \      $delete .= $delete_array[$i];\n    } else {\n      $delete .= $s_array[$i];\n\
    \    }\n    $i++;\n  }\n  if($delete === strrev($delete)) {\n    return array($delete,\
    \ true);\n  } else {\n    return array($delete, false);\n  }\n}\n", "    // check\
    \ if string is palindrome\n    $isPalindrome = true;\n    $sLength = strlen($s);\n\
    \    $strToCheck = \"\";\n    // remove all characters in $c from $s\n    $charsToRemove\
    \ = str_split($c);\n    for ($i = 0; $i < $sLength; $i++) {\n        if (!in_array($s[$i],\
    \ $charsToRemove)) {\n            $strToCheck .= $s[$i];\n        }\n    }\n \
    \   // loop through string and check if it's palindrome\n    $strLength = strlen($strToCheck);\n\
    \    $midPoint = (int) ($strLength / 2);\n    for ($i = 0; $i < $midPoint; $i++)\
    \ {\n        if ($strToCheck[$i] !== $strToCheck[$strLength - $i - 1]) {\n   \
    \         $isPalindrome = false;\n            break;\n        }\n    }\n    return\
    \ [$strToCheck, $isPalindrome];\n}\n", "    $s = str_split($s);\n    $c = str_split($c);\n\
    \    foreach ($s as $char) {\n        if (in_array($char, $c)) {\n           \
    \ $key = array_search($char, $s);\n            unset($s[$key]);\n        }\n \
    \   }\n    $s = implode('', $s);\n    $result = array($s, false);\n    if ($s\
    \ == strrev($s)) {\n        $result[1] = true;\n    }\n    return $result;\n}\n",
  "    for ($i = 0; $i < strlen($c); $i++) {\n        $s = str_replace($c[$i], \"\"\
    , $s);\n    }\n    return [$s, $s == strrev($s)];\n}", "    for ($i = 0; $i <\
    \ strlen($c); $i++) {\n        $s = str_replace($c[$i], \"\", $s);\n    }\n  \
    \  return array($s, $s == strrev($s));\n}", "    $s = str_split($s);\n    $c =\
    \ str_split($c);\n    foreach ($s as $k => $v) {\n        foreach ($c as $k1 =>\
    \ $v1) {\n            if ($v == $v1) {\n                unset($s[$k]);\n     \
    \       }\n        }\n    }\n    $s = array_values($s);\n    $result = implode($s);\n\
    \    $palindrome = false;\n    if ($result == strrev($result)) {\n        $palindrome\
    \ = true;\n    }\n    return array($result, $palindrome);\n}\nprint_r(reverse_delete(\"\
    abcde\", \"ae\"));\nprint_r(reverse_delete(\"abcdef\", \"b\"));\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    $c = str_split($c);\n    $a = str_split($s);\n \
    \   foreach ($a as $key => $val) {\n        if (in_array($val, $c)) {\n      \
    \      unset($a[$key]);\n        }\n    }\n    $res = implode($a);\n    $res =\
    \ str_split($res);\n    return array($res, is_palindrome($res));\n}", "    $s\
    \ = str_split($s);\n    $c = str_split($c);\n    for ($i = 0; $i < count($s);\
    \ $i++) {\n        for ($j = 0; $j < count($c); $j++) {\n            if ($s[$i]\
    \ == $c[$j]) {\n                unset($s[$i]);\n            }\n        }\n   \
    \ }\n    $s = array_values($s);\n    $result = array(join('', $s), $s == array_reverse($s));\n\
    \    return $result;\n}", "    $arrayOfString = str_split($s);\n    $arrayOfChar\
    \ = str_split($c);\n    $reversed = array_reverse($arrayOfString);\n    $result\
    \ = [];\n    $newArray = [];\n    for ($i = 0; $i < count($arrayOfString); $i++)\
    \ {\n        if (in_array($arrayOfString[$i], $arrayOfChar)) {\n            continue;\n\
    \        } else {\n            array_push($newArray, $arrayOfString[$i]);\n  \
    \      }\n    }\n    $result[] = join('', $newArray);\n    if ($newArray == $reversed)\
    \ {\n        $result[] = true;\n    } else {\n        $result[] = false;\n   \
    \ }\n    return $result;\n}", "\t$in = str_split($s);\n\t$out = [];\n\tforeach\
    \ ($in as $v) {\n\t\tif (strpos($c, $v) === false) {\n\t\t\t$out[] = $v;\n\t\t\
    }\n\t}\n\t$str = implode('', $out);\n\treturn [$str, $str === strrev($str)];\n\
    }\n", "  $delete = str_split($c);\n  $str = str_split($s);\n  foreach ($delete\
    \ as $item) {\n    foreach ($str as $key => $value) {\n      if ($item == $value)\
    \ {\n        unset($str[$key]);\n      }\n    }\n  }\n  $res = implode('', $str);\n\
    \  if ($res == strrev($res)) {\n    return [$res, true];\n  } else {\n    return\
    \ [$res, false];\n  }\n}\nprint_r(reverse_delete(\"abcde\", \"ae\"));\nprint_r(reverse_delete(\"\
    abcdef\", \"b\"));\nprint_r(reverse_delete(\"abcdedcba\", \"ab\"));", "    $result\
    \ = [];\n    foreach (str_split($s) as $val) {\n        if (!stristr($c, $val))\
    \ {\n            $result[] = $val;\n        }\n    }\n    return [implode('',\
    \ $result), implode('', $result) === strrev(implode('', $result))];\n}", "   \
    \ $len_s = strlen($s);\n    $len_c = strlen($c);\n    for ($i = 0; $i < $len_s;\
    \ $i++) {\n        for ($j = 0; $j < $len_c; $j++) {\n            if ($s[$i] ==\
    \ $c[$j]) {\n                $s[$i] = '';\n            }\n        }\n    }\n \
    \   $reverse_s = strrev($s);\n    $status = ($s == $reverse_s) ? true : false;\n\
    \    return [$s, $status];\n}\n\n$res = reverse_delete(\"abcde\", \"ae\");\nprint_r($res);",
  "    $c_arr = str_split($c);\n    foreach ($c_arr as $char) {\n        $s = str_replace($char,\
    \ '', $s);\n    }\n    return [$s, $s === strrev($s)];\n}", "\t// Your code here\n\
    }", "    $arr = str_split($s);\n    $char = str_split($c);\n    $j = count($arr);\n\
    \    for ($i = 0; $i < $j; $i++) {\n        if (in_array($arr[$i], $char)) {\n\
    \            array_splice($arr, $i, 1);\n            $i--;\n            $j--;\n\
    \        }\n    }\n    $result = join('', $arr);\n    $result2 = $result == strrev($result)\
    \ ? true : false;\n    return array($result, $result2);\n}\n", "    $delete =\
    \ str_split($c);\n    $result = $s;\n    foreach ($delete as $char) {\n      \
    \  $result = str_replace($char, '', $result);\n    }\n    return [$result, $result\
    \ === strrev($result)];\n}\n", "  $cArr = str_split($c);\n  $sArr = str_split($s);\n\
    \  $sArr = array_filter($sArr, function($var) use ($cArr) {\n    return !in_array($var,\
    \ $cArr);\n  });\n  $s = implode($sArr);\n  $sArr = str_split($s);\n  $revArr\
    \ = array_reverse($sArr);\n  return array($s, $sArr == $revArr);\n}\n", "    $c_arr\
    \ = str_split($c);\n    foreach ($c_arr as $value) {\n        $s = str_replace($value,\
    \ \"\", $s);\n    }\n    $s_new = strrev($s);\n    $re = array();\n    if ($s_new\
    \ == $s) {\n        $re[] = $s;\n        $re[] = true;\n    } else {\n       \
    \ $re[] = $s;\n        $re[] = false;\n    }\n    return $re;\n}\n\nprint_r(reverse_delete(\"\
    abcde\", \"ae\"));", "    $arr2 = array();\n    $arr1 = str_split($s);\n    $arr3\
    \ = str_split($c);\n    $arr2 = array_diff($arr1, $arr3);\n    $str2 = implode($arr2);\n\
    \    if ($str2 === strrev($str2)) {\n        return array($str2, true);\n    }\
    \ else {\n        return array($str2, false);\n    }\n}\nprint_r(reverse_delete(\"\
    abcde\", \"ae\"));\nprint_r(reverse_delete(\"abcdef\", \"b\"));\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "  // your code\n}", "    $result = [];\n    $i = 0;\n\
    \    $s = str_split($s);\n    $c = str_split($c);\n    while ($i < count($s))\
    \ {\n        if (in_array($s[$i], $c)) {\n            array_splice($s, $i, 1);\n\
    \            $i--;\n        }\n        $i++;\n    }\n    $result[] = join('',\
    \ $s);\n    $result[] = ($result[0] == strrev($result[0])) ? true : false;\n \
    \   return $result;\n}\nprint_r(reverse_delete(\"abcde\", \"ae\"));", "    $s\
    \ = str_split($s);\n    $c = str_split($c);\n    for ($i = 0; $i < count($s);\
    \ $i++) {\n        for ($j = 0; $j < count($c); $j++) {\n            if ($s[$i]\
    \ == $c[$j]) {\n                array_splice($s, $i, 1);\n                $i--;\n\
    \            }\n        }\n    }\n    $result = implode($s);\n    $reverse = strrev($result);\n\
    \    $check = array($result, $result == $reverse);\n    return $check;\n}", " \
    \ $result = str_replace(str_split($c), '', $s);\n  return [$result, $result ===\
    \ strrev($result)];\n}\n", "    $arr_s = str_split($s);\n    $arr_c = str_split($c);\n\
    \    for ($i = 0; $i < sizeof($arr_s); $i++) {\n        for ($x = 0; $x < sizeof($arr_c);\
    \ $x++) {\n            if ($arr_s[$i] == $arr_c[$x]) {\n                unset($arr_s[$i]);\n\
    \            }\n        }\n    }\n    $result = join('', $arr_s);\n    $result_r\
    \ = join('', array_reverse($arr_s));\n    $is_palindrome = $result == $result_r\
    \ ? true : false;\n    return array($result, $is_palindrome);\n}\n", "    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $array = [];\n    foreach ($s as\
    \ $v) {\n        if (!in_array($v, $c)) {\n            $array[] = $v;\n      \
    \  }\n    }\n    $string = implode('', $array);\n    $backwards = strrev($string);\n\
    \    $result = [$string, $string == $backwards];\n    return $result;\n}", "\t\
    $s = str_split($s);\n\t$c = str_split($c);\n\tforeach ($s as $i => $letter) {\n\
    \t\tforeach ($c as $key => $val) {\n\t\t\tif ($letter == $val) {\n\t\t\t\tunset($s[$i]);\n\
    \t\t\t}\n\t\t}\n\t}\n\t$s = implode('', $s);\n\t$s = str_split($s);\n\t$s = array_reverse($s);\n\
    \t$s = implode('', $s);\n\t$result = array($s, $s == strrev($s));\n\treturn $result;\n\
    }", "\t$s = str_split($s);\n\t$c = str_split($c);\n\tforeach ($s as $key => $value)\
    \ {\n\t\tforeach ($c as $v) {\n\t\t\tif ($value == $v) {\n\t\t\t\tunset($s[$key]);\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn [implode('', $s), $s == array_reverse($s)];\n}\n\
    \nvar_dump(reverse_delete(\"abcde\", \"ae\"));\nvar_dump(reverse_delete(\"abcdef\"\
    , \"b\"));\nvar_dump(reverse_delete(\"abcdedcba\", \"ab\"));", "  for ($i = 0;\
    \ $i < strlen($c); $i++) {\n    $s = str_replace($c[$i], \"\", $s);\n  }\n  $result\
    \ = $s == strrev($s) ? true : false;\n  return [$s, $result];\n}", "  $results\
    \ = [];\n  $arr = [];\n  $s = str_split($s);\n  $c = str_split($c);\n  foreach\
    \ ($s as $key => $value) {\n    if (!in_array($value, $c)) {\n      $arr[] = $value;\n\
    \    }\n  }\n  if ($arr == array_reverse($arr)) {\n    return [implode('', $arr),\
    \ true];\n  } else {\n    return [implode('', $arr), false];\n  }\n}\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "\tfor ($i = 0; $i < strlen($c); $i++) {\n\t\t$s = str_replace($c[$i],\
    \ \"\", $s);\n\t}\n\treturn array($s, $s == strrev($s));\n}", "    $arr1 = str_split($s);\n\
    \    $arr2 = str_split($c);\n    $result = array_diff($arr1, $arr2);\n    $res_string\
    \ = implode($result);\n    if ($res_string == strrev($res_string)) {\n       \
    \ return array($res_string, true);\n    } else {\n        return array($res_string,\
    \ false);\n    }\n}\n", "    $arr = preg_split('//u', $s, -1, PREG_SPLIT_NO_EMPTY);\n\
    \    $arr1 = preg_split('//u', $c, -1, PREG_SPLIT_NO_EMPTY);\n    $newarr = array_diff($arr,\
    \ $arr1);\n    $output = implode('', $newarr);\n    $reverse = strrev($output);\n\
    \    if ($output == $reverse) {\n        return [$output, true];\n    } else {\n\
    \        return [$output, false];\n    }\n}\n", "  $s = array_diff(str_split($s),\
    \ str_split($c));\n  return [implode($s), $s == array_reverse($s)];\n}\n", " \
    \   $result = str_replace(str_split($c), '', $s);\n    return [$result, $result\
    \ === strrev($result)];\n}", "    $returnArr = array();\n    $cArr = str_split($c);\n\
    \    $returnStr = $s;\n    foreach ($cArr as $character) {\n        $returnStr\
    \ = str_replace($character, \"\", $returnStr);\n    }\n    $returnArr[] = $returnStr;\n\
    \    $reverseStr = strrev($returnStr);\n    if ($returnStr == $reverseStr) {\n\
    \        $returnArr[] = true;\n    } else {\n        $returnArr[] = false;\n \
    \   }\n    return $returnArr;\n}", "    $result = str_replace($c, \"\", $s);\n\
    \    return array($result, $result == strrev($result));\n}\nprint_r(reverse_delete(\"\
    abcde\", \"ae\"));\necho \"<br>\";\nprint_r(reverse_delete(\"abcdef\", \"b\"));\n\
    echo \"<br>\";\nprint_r(reverse_delete(\"abcdedcba\", \"ab\"));", "\t$s = str_split($s);\n\
    \t$c = str_split($c);\n\t$r = array();\n\t$result = array();\n\t$p = true;\n\t\
    foreach ($s as $v) {\n\t\tif (!in_array($v, $c)) {\n\t\t\t$r[] = $v;\n\t\t}\n\t\
    }\n\tfor ($i = 0; $i < count($r); $i++) {\n\t\tif ($r[$i] != $r[count($r) - $i\
    \ - 1]) {\n\t\t\t$p = false;\n\t\t}\n\t}\n\t$result[] = implode($r);\n\t$result[]\
    \ = $p;\n\treturn $result;\n}\n", "    $arr = [];\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $arr[] = $s[$i];\n    }\n    for ($i = 0; $i < strlen($c);\
    \ $i++) {\n        for ($j = 0; $j < strlen($s); $j++) {\n            if ($c[$i]\
    \ == $s[$j]) {\n                $arr[$j] = '';\n            }\n        }\n   \
    \ }\n    $s = '';\n    for ($i = 0; $i < count($arr); $i++) {\n        $s .= $arr[$i];\n\
    \    }\n    $arr = [];\n    $arr[] = $s;\n    if ($s == strrev($s)) {\n      \
    \  $arr[] = true;\n    } else {\n        $arr[] = false;\n    }\n    return $arr;\n\
    }\nprint_r(reverse_delete(\"abcde\", \"ae\"));\nprint_r(reverse_delete(\"abcdef\"\
    , \"b\"));\nprint_r(reverse_delete(\"abcdedcba\", \"ab\"));", "  $s = str_split($s);\n\
    \  $c = str_split($c);\n  $word = \"\";\n  for ($i=0; $i < count($s); $i++) {\n\
    \    if(!in_array($s[$i], $c)){\n      $word .= $s[$i];\n    }\n  }\n  $isPalindrome\
    \ = true;\n  for ($i=0; $i < strlen($word)/2; $i++) {\n    if($word[$i] !== $word[strlen($word)-1-$i]){\n\
    \      $isPalindrome = false;\n    }\n  }\n  return array($word, $isPalindrome);\n\
    }", "    $arr = str_split($s);\n    $c = str_split($c);\n    foreach ($arr as\
    \ $key => $value) {\n        foreach ($c as $value2) {\n            if ($value\
    \ == $value2) {\n                unset($arr[$key]);\n            }\n        }\n\
    \    }\n    $string = implode($arr);\n    $string_reverse = strrev($string);\n\
    \    if ($string == $string_reverse) {\n        return array($string, true);\n\
    \    } else {\n        return array($string, false);\n    }\n}", "    $s = preg_replace(\"\
    /$c/\", '', $s);\n    return [$s, strrev($s) === $s];\n}", "    $str = [];\n \
    \   $str[0] = preg_replace(\"/[$c]/\", \"\", $s);\n    $str[1] = $str[0] == strrev($str[0])\
    \ ? true : false;\n    return $str;\n}", "    $output = '';\n    for ($i = 0;\
    \ $i < strlen($s); $i++) {\n        if (!strstr($c, $s[$i])) {\n            $output\
    \ .= $s[$i];\n        }\n    }\n    return [$output, $output == strrev($output)];\n\
    }\n", "    $count = 0;\n    $a = str_split($s);\n    $b = str_split($c);\n   \
    \ $z = 0;\n    for ($i = 0; $i < count($a); $i++) {\n        for ($j = 0; $j <\
    \ count($b); $j++) {\n            if ($a[$i] == $b[$j]) {\n                unset($a[$i]);\n\
    \                $count++;\n            }\n        }\n    }\n    $s1 = implode(\"\
    \", $a);\n    $z = count($a) - $count;\n    for ($i = 0; $i < $z / 2; $i++) {\n\
    \        if ($s1[$i] != $s1[$z - $i - 1]) {\n            return array($s1, false);\n\
    \        }\n    }\n    return array($s1, true);\n}\nprint_r(reverse_delete(\"\
    abcde\", \"ae\"));\nprint_r(reverse_delete(\"abcdef\", \"b\"));\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    $c = str_split($c);\n    $res = '';\n    foreach\
    \ (str_split($s) as $char) {\n        if (!in_array($char, $c)) {\n          \
    \  $res .= $char;\n        }\n    }\n    return [$res, strrev($res) === $res];\n\
    }", "    for ($i = 0; $i < strlen($c); $i++) {\n        $s = str_replace($c[$i],\
    \ \"\", $s);\n    }\n    $s = strrev($s);\n    return [$s, $s == strrev($s)];\n\
    }\necho '<pre>';\nprint_r(reverse_delete(\"abcde\", \"ae\"));\necho '</pre>';\n\
    echo '<pre>';\nprint_r(reverse_delete(\"abcdef\", \"b\"));\necho '</pre>';\necho\
    \ '<pre>';\nprint_r(reverse_delete(\"abcdedcba\", \"ab\"));\necho '</pre>';",
  "    // Write your code here\n    // To print results to the standard output you\
    \ can use print\n    // Example: print \"Hello world!\";\n    $s = str_split($s);\n\
    \    $result = \"\";\n    $c = str_split($c);\n    foreach ($s as $sValue) {\n\
    \        if (!in_array($sValue, $c)) {\n            $result .= $sValue;\n    \
    \    }\n    }\n    return array($result, $result === strrev($result));\n}", " \
    \ $str = str_split($s);\n  $to_delete = str_split($c);\n  foreach ($str as $key\
    \ => $letter) {\n    foreach ($to_delete as $del) {\n      if ($letter == $del)\
    \ {\n        unset($str[$key]);\n      }\n    }\n  }\n  $result_string = implode('',\
    \ $str);\n  if ($result_string == strrev($result_string)) {\n    return [$result_string,\
    \ true];\n  } else {\n    return [$result_string, false];\n  }\n}\n", "  for ($i\
    \ = 0; $i < strlen($c); $i++) {\n    $s = str_replace($c[$i], \"\", $s);\n  }\n\
    \  return array($s, $s == strrev($s));\n}\nprint_r(reverse_delete(\"abcdedcba\"\
    , \"ab\"));", "    $s = str_split($s);\n    $c = str_split($c);\n    $arr = [];\n\
    \    foreach ($s as $key => $value) {\n        foreach ($c as $v) {\n        \
    \    if ($value == $v) {\n                unset($s[$key]);\n            }\n  \
    \      }\n    }\n    $arr[] = implode('', $s);\n    $arr[] = $arr[0] == strrev($arr[0])\
    \ ? true : false;\n    return $arr;\n}\nprint_r(reverse_delete(\"abcdedcba\",\
    \ \"ab\"));", "    $s = str_split($s);\n    $c = str_split($c);\n    foreach ($s\
    \ as $k=>$v) {\n        if (in_array($v, $c)) unset($s[$k]);\n    }\n    $s =\
    \ implode('', $s);\n    return array($s, $s==strrev($s));\n}\n\nprint_r(reverse_delete(\"\
    abcde\", \"ae\"));\nprint_r(reverse_delete(\"abcdef\", \"b\"));\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "  $intersect = array_intersect(str_split($s), str_split($c));\n\
    \  $removed = array_diff(str_split($s), $intersect);\n  $result = array_merge($removed);\n\
    \  $output = implode(\"\", $result);\n  $palindrome = $output === strrev($output)\
    \ ? true : false;\n  return array($output, $palindrome);\n}\n", "  $s = str_split($s);\n\
    \  $c = str_split($c);\n  foreach ($s as $key => $value) {\n    foreach ($c as\
    \ $key2 => $value2) {\n      if ($value == $value2) {\n        unset($s[$key]);\n\
    \      }\n    }\n  }\n  $s = implode($s);\n  $s = str_split($s);\n  $s_rev = array_reverse($s);\n\
    \  $s_rev = implode($s_rev);\n  if ($s_rev == implode($s)) {\n    return array(implode($s),\
    \ true);\n  } else {\n    return array(implode($s), false);\n  }\n}\nprint_r(reverse_delete(\"\
    abcde\", \"ae\"));\nprint_r(reverse_delete(\"abcdef\", \"b\"));\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    $result = \"\";\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        if (!strstr($c, $s[$i])) {\n            $result .= $s[$i];\n\
    \        }\n    }\n    return [$result, strrev($result) == $result];\n}", "\t\
    $i = 0;\n\t$arr1 = [];\n\t$arr2 = [];\n\twhile ($i < strlen($s)) {\n\t\t$arr1[]\
    \ = $s[$i];\n\t\t$i++;\n\t}\n\t$i = 0;\n\twhile ($i < strlen($c)) {\n\t\t$arr2[]\
    \ = $c[$i];\n\t\t$i++;\n\t}\n\t$result = array_diff($arr1, $arr2);\n\t$result\
    \ = array_values($result);\n\t$result = implode($result);\n\t$result = [$result,\
    \ strrev($result) == $result];\n\treturn $result;\n}\nprint_r(reverse_delete(\"\
    abcde\", \"ae\"));", "    $c = str_split($c);\n    $s = str_split($s);\n    $temp\
    \ = [];\n    foreach ($s as $i) {\n        if (!in_array($i, $c)) {\n        \
    \    $temp[] = $i;\n        }\n    }\n    return array(implode('', $temp), palindrome(implode('',\
    \ $temp)));\n}\n", "    $arr = str_split($s);\n    $arr2 = str_split($c);\n  \
    \  $newArr = [];\n    $result = [];\n    foreach ($arr as $key => $value) {\n\
    \        if (!in_array($value, $arr2)) {\n            $newArr[] = $value;\n  \
    \      }\n    }\n    $reversed = implode(\"\", array_reverse($newArr));\n    $string\
    \ = implode(\"\", $newArr);\n    if ($string == $reversed) {\n        $result[]\
    \ = $string;\n        $result[] = true;\n    } else {\n        $result[] = $string;\n\
    \        $result[] = false;\n    }\n    return $result;\n}", "    // your code\
    \ here\n    $match = preg_replace(\"/[$c]/\", \"\", $s);\n    return array($match,\
    \ $match == strrev($match));\n}\n", "\t$flag = true;\n\tfor ($i = 0; $i < strlen($c);\
    \ $i++) {\n\t\tif (strpos($s, $c[$i]) !== false) {\n\t\t\t$s = str_replace($c[$i],\
    \ \"\", $s);\n\t\t}\n\t}\n\tif ($s !== strrev($s)) {\n\t\t$flag = false;\n\t}\n\
    \treturn [$s, $flag];\n}", "  $s = str_split($s);\n  $c = str_split($c);\n  foreach\
    \ ($s as $key => $value) {\n    foreach ($c as $key1 => $value1) {\n      if ($value\
    \ == $value1) {\n        unset($s[$key]);\n      }\n    }\n  }\n  $s = implode($s);\n\
    \  if ($s == strrev($s)) {\n    return [$s, true];\n  }\n  return [$s, false];\n\
    }\n", "    $all_chars = $s;\n    $all_chars .= $c;\n    $all_chars = str_split($all_chars);\n\
    \    $all_chars = array_unique($all_chars);\n    $all_chars = implode('', $all_chars);\n\
    \    $all_chars = str_split($all_chars);\n    $counter = 0;\n    $result = [];\n\
    \    foreach ($all_chars as $char) {\n        $x = stripos($s, $char);\n     \
    \   if ($x === false) {\n            $counter++;\n        }\n    }\n    if ($counter\
    \ === count($all_chars)) {\n        return [$s, true];\n    }\n    foreach ($s\
    \ as $char) {\n        $x = stripos($c, $char);\n        if ($x === false) {\n\
    \            $result[] = $char;\n        }\n    }\n    $result = implode('', $result);\n\
    \    $result_array = [$result, false];\n    return $result_array;\n}"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
