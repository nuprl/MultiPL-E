language: php
name: HumanEval_59_largest_prime_factor
results:
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  // Prime number checker.\n  // >>>\
    \ is_prime(4)\n  // False\n  // >>> is_prime(11)\n  // True\n  function is_prime($n)\
    \ {\n    $divisor = 2;\n    while ($divisor < $n) {\n      if ($n % $divisor ==\
    \ 0) {\n        return False;\n      }\n      $divisor++;\n    }\n    return True;\n\
    \  }\n\n  $divisor = 2;\n  while ($divisor < $n) {\n    if ($n % $divisor == 0)\
    \ {\n      $n = $n / $divisor;\n      if (is_prime($n)) {\n        return $n;\n\
    \      }\n    }\n    $divisor++;\n  }\n  return $n;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Cannot redeclare is_prime() (previously declared in /tmp/tmphwxnx6rg.php:13)
    in /tmp/tmphwxnx6rg.php on line 13

    '
  timestamp: 1659822393
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  // FIXME: Implement\n  return 0;\n\
    }\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpughpj9mu.php:17\n\
    Stack trace:\n#0 /tmp/tmpughpj9mu.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpughpj9mu.php\
    \ on line 17\n"
  timestamp: 1659822393
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $lpf = 2;\n    while ($n % $lpf\
    \ == 0) {\n        $n /= $lpf;\n    }\n    $lpf = 3;\n    while ($n > 1) {\n \
    \       while ($n % $lpf == 0) {\n            $n /= $lpf;\n        }\n       \
    \ $lpf += 2;\n    }\n    return $lpf - 2;\n}\n\nfunction candidate(...$args) {\n\
    \    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63)\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !==\
    \ 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !==\
    \ 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822393
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  for ($i = 2; $i < $n; $i++) {\n \
    \   if (is_prime($i) && $n % $i == 0) {\n      $lpf = $i;\n    }\n  }\n  return\
    \ $lpf;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp9xl2tytt.php:9\nStack trace:\n#0 /tmp/tmp9xl2tytt.php(17): largest_prime_factor(15)\n\
    #1 /tmp/tmp9xl2tytt.php(21): candidate(15)\n#2 /tmp/tmp9xl2tytt.php(28): test()\n\
    #3 {main}\n  thrown in /tmp/tmp9xl2tytt.php on line 9\n"
  timestamp: 1659822393
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    // write your code here\n    $i\
    \ = 2;\n    while($i * $i <= $n) {\n        if($n % $i == 0) {\n            $n\
    \ /= $i;\n        } else {\n            $i++;\n        }\n    }\n    return $n;\n\
    }\n\necho largest_prime_factor(2048);\nfunction candidate(...$args) {\n    return\
    \ largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(15)\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !== 7)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '2'
  timestamp: 1659822393
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <=\
    \ $n) {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n\
    \            $i++;\n        }\n    }\n    return $n;\n}\n\nprint largest_prime_factor(13195);\n\
    function candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '29'
  timestamp: 1659822393
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  for ($i = 2; $i < $n; $i++) {\n \
    \   if ($n % $i == 0) {\n      return largest_prime_factor($n / $i);\n    }\n\
    \  }\n  return $n;\n}\n\necho largest_prime_factor(600851475143) . \"\\n\";\n\
    function candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '6857

    '
  timestamp: 1659822393
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $p = 2;\n  while ($n > 1) {\n   \
    \ while ($n % $p == 0) {\n      $n /= $p;\n    }\n    $p++;\n  }\n  return $p\
    \ - 1;\n}\n\nvar_dump(largest_prime_factor(13195));\nvar_dump(largest_prime_factor(2048));\n\
    function candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'int(29)

    int(2)

    '
  timestamp: 1659822393
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $primes = array();\n    $divisor\
    \ = 2;\n    while ($n > 1) {\n        while ($n % $divisor == 0) {\n         \
    \   $primes[] = $divisor;\n            $n /= $divisor;\n        }\n        $divisor\
    \ += ($divisor == 2) ? 1 : 2;\n    }\n    return max($primes);\n}\n\nfunction\
    \ candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822393
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $i = 2;\n  while ($i * $i <= $n)\
    \ {\n    if ($n % $i == 0) {\n      $n /= $i;\n    } else {\n      $i++;\n   \
    \ }\n  }\n  return $n;\n}\necho largest_prime_factor(600851475143).\"\\n\";\n\
    function candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '6857

    '
  timestamp: 1659822393
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $p = 2;\n    for (; $p <= $n; $p++)\
    \ {\n        if ($n % $p == 0) {\n            break;\n        }\n    }\n    if\
    \ ($p == $n) {\n        return $n;\n    }\n    return largest_prime_factor($n\
    \ / $p);\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822393
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  // TODO\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp47fy5ait.php:16\n\
    Stack trace:\n#0 /tmp/tmp47fy5ait.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp47fy5ait.php\
    \ on line 16\n"
  timestamp: 1659822393
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $div = 2;\n    while ($n > 1) {\n\
    \        while ($n % $div == 0) {\n            $n /= $div;\n        }\n      \
    \  $div += 1;\n    }\n    return $div - 1;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822393
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <=\
    \ $n) {\n        if ($n % $i) {\n            $i += 1;\n        } else {\n    \
    \        $n /= $i;\n        }\n    }\n    return $n;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822393
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $primes = get_primes_less_than($n);\n\
    \    $largest = 2;\n    $num = $n;\n    foreach ($primes as $prime) {\n      \
    \  while ($num % $prime == 0) {\n            $num /= $prime;\n            $largest\
    \ = $prime;\n        }\n    }\n    return $largest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_primes_less_than()\
    \ in /tmp/tmp4pmy2ty5.php:8\nStack trace:\n#0 /tmp/tmp4pmy2ty5.php(21): largest_prime_factor(15)\n\
    #1 /tmp/tmp4pmy2ty5.php(25): candidate(15)\n#2 /tmp/tmp4pmy2ty5.php(32): test()\n\
    #3 {main}\n  thrown in /tmp/tmp4pmy2ty5.php on line 8\n"
  timestamp: 1659822393
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  // Find the largest prime factor.\n\
    \  $i = 2;\n  while ($i * $i <= $n) {\n    while ($n % $i == 0) {\n      $n =\
    \ $n / $i;\n    }\n    $i = $i + 1;\n  }\n  return $n;\n}\n\nprint(\"\\nThe largest\
    \ prime factor of 13195 is \" . largest_prime_factor(13195));\nprint(\"\\nThe\
    \ largest prime factor of 2048 is \" . largest_prime_factor(2048));\nprint(\"\\\
    n\");\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nThe largest prime factor of 13195 is 29\nThe largest prime factor of\
    \ 2048 is 1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx49qkqyx.php:28\n\
    Stack trace:\n#0 /tmp/tmpx49qkqyx.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpx49qkqyx.php\
    \ on line 28\n"
  timestamp: 1659822393
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $result = $n;\n  for ($i = 2; $i\
    \ <= $n; $i++) {\n    if ($n % $i == 0) {\n      $result = $i;\n      break;\n\
    \    }\n  }\n  return $result;\n}\n\necho largest_prime_factor(13195);\necho \"\
    \\n\";\necho largest_prime_factor(2048);\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "5\n2\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp47dcbjmm.php:27\n\
    Stack trace:\n#0 /tmp/tmp47dcbjmm.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp47dcbjmm.php\
    \ on line 27\n"
  timestamp: 1659822393
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    // The largest prime factor of\
    \ a number is the number divided by the \n    // smallest prime factor (which\
    \ must also be the largest prime factor).\n    $smallest_prime_factor = smallest_prime_factor($n);\n\
    \    return $n / $smallest_prime_factor;\n}\n\nfunction candidate(...$args) {\n\
    \    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63)\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !==\
    \ 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !==\
    \ 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function smallest_prime_factor()\
    \ in /tmp/tmptfv9s7uf.php:10\nStack trace:\n#0 /tmp/tmptfv9s7uf.php(15): largest_prime_factor(15)\n\
    #1 /tmp/tmptfv9s7uf.php(19): candidate(15)\n#2 /tmp/tmptfv9s7uf.php(26): test()\n\
    #3 {main}\n  thrown in /tmp/tmptfv9s7uf.php on line 10\n"
  timestamp: 1659822393
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $d = 2;\n  while ($n > 1) {\n   \
    \ if ($n % $d == 0) {\n      $f = $d;\n      while ($n % $d == 0) {\n        $n\
    \ /= $d;\n      }\n    }\n    $d += 1;\n  }\n  return $f;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822393
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    for ($i = floor(sqrt($n)); $i >\
    \ 1; $i--) {\n        if ($n % $i == 0 && is_prime($i)) {\n            return\
    \ $i;\n        }\n    }\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpm5m77vkx.php:9\nStack trace:\n#0 /tmp/tmpm5m77vkx.php(16): largest_prime_factor(15)\n\
    #1 /tmp/tmpm5m77vkx.php(20): candidate(15)\n#2 /tmp/tmpm5m77vkx.php(27): test()\n\
    #3 {main}\n  thrown in /tmp/tmpm5m77vkx.php on line 9\n"
  timestamp: 1659822393
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  // your code goes here\n  $max =\
    \ sqrt($n);\n  $i = 3;\n  $factors = [];\n  while($i <= $max) {\n    if($n % $i\
    \ == 0) {\n      $factors[] = $i;\n      $n = $n / $i;\n      $max = sqrt($n);\n\
    \    } else {\n      $i++;\n    }\n  }\n  return $n;\n}\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfi2ott7z.php:31\n\
    Stack trace:\n#0 /tmp/tmpfi2ott7z.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpfi2ott7z.php\
    \ on line 31\n"
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $primes = array();\n    for ($i\
    \ = 2; $i <= sqrt($n); $i++) {\n        if (is_prime($i)) {\n            if ($n\
    \ % $i == 0) {\n                $primes[] = $i;\n            }\n        }\n  \
    \  }\n    return $primes[count($primes) - 1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmppct8i9cg.php:10\nStack trace:\n#0 /tmp/tmppct8i9cg.php(20): largest_prime_factor(15)\n\
    #1 /tmp/tmppct8i9cg.php(24): candidate(15)\n#2 /tmp/tmppct8i9cg.php(31): test()\n\
    #3 {main}\n  thrown in /tmp/tmppct8i9cg.php on line 10\n"
  timestamp: 1660029131
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    for ($i = 2; $i <= sqrt($n); $i++)\
    \ {\n        if ($n % $i == 0) {\n            $factor = largest_prime_factor($n\
    \ / $i);\n            if ($factor > $i) {\n                return $factor;\n \
    \           } else {\n                return $i;\n            }\n        }\n \
    \   }\n    return $n;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $max_divisor = floor(sqrt($n));\n\
    \  for ($i = $max_divisor; $i > 1; $i--) {\n    if ($n % $i == 0) {\n      $n\
    \ /= $i;\n      $max_divisor = floor(sqrt($n));\n      $i = $max_divisor + 1;\n\
    \    }\n  }\n  return $n;\n}\necho largest_prime_factor(600851475143) . \"\\n\"\
    ;\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1471\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7chfy9_1.php:24\n\
    Stack trace:\n#0 /tmp/tmp7chfy9_1.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp7chfy9_1.php\
    \ on line 24\n"
  timestamp: 1660029131
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    for ($i = 2; $i < $n; $i++) {\n\
    \        if ($n % $i == 0) {\n            $n /= $i;\n            $i--;\n     \
    \   }\n    }\n    return $n;\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(15)\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !== 7)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while($i < sqrt($n))\
    \ {\n        if($n % $i == 0) {\n            $n /= $i;\n        } else {\n   \
    \         $i++;\n        }\n    }\n    return $n;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkmfab36m.php:25\n\
    Stack trace:\n#0 /tmp/tmpkmfab36m.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpkmfab36m.php\
    \ on line 25\n"
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  for ($m = floor(sqrt($n)); $m > 1;\
    \ $m--) {\n    if (0 == $n % $m) {\n      if (is_prime($m)) {\n        return\
    \ $m;\n      }\n    }\n  }\n  return $n;\n}\n\nfunction candidate(...$args) {\n\
    \    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63)\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !==\
    \ 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !==\
    \ 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpo74l9s1y.php:10\nStack trace:\n#0 /tmp/tmpo74l9s1y.php(19): largest_prime_factor(15)\n\
    #1 /tmp/tmpo74l9s1y.php(23): candidate(15)\n#2 /tmp/tmpo74l9s1y.php(30): test()\n\
    #3 {main}\n  thrown in /tmp/tmpo74l9s1y.php on line 10\n"
  timestamp: 1660029131
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  // PHP doesn't support do-while loops,\
    \ so we need a flag.\n  $first = true;\n  $divisor = $n - 1;\n  while ($first\
    \ || $n % $divisor !== 0) {\n    if ($first) {\n      $first = false;\n    }\n\
    \    $divisor--;\n  }\n  // The loop found a divisor, now do a primality test\
    \ on it.\n  $prime = true;\n  $test = 2;\n  while ($prime && $test < $divisor)\
    \ {\n    if ($divisor % $test === 0) {\n      $prime = false;\n    }\n    $test++;\n\
    \  }\n  if ($prime) {\n    return $divisor;\n  } else {\n    return largest_prime_factor($divisor);\n\
    \  }\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $factors = get_factors($n);\n \
    \   $prime_factors = array_filter($factors, 'is_prime');\n    return max($prime_factors);\n\
    }\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_factors()\
    \ in /tmp/tmpelytu4ys.php:8\nStack trace:\n#0 /tmp/tmpelytu4ys.php(14): largest_prime_factor(15)\n\
    #1 /tmp/tmpelytu4ys.php(18): candidate(15)\n#2 /tmp/tmpelytu4ys.php(25): test()\n\
    #3 {main}\n  thrown in /tmp/tmpelytu4ys.php on line 8\n"
  timestamp: 1660029131
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $i = 2;\n    $isPrime = false;\n\
    \    if ($n <= 3) {\n        return $n;\n    }\n    while ($n >= 2) {\n      \
    \  if ($n % $i == 0) {\n            $n = $n / $i;\n            $isPrime = true;\n\
    \        } else {\n            $i++;\n        }\n    }\n    return $i;\n}\n\n\
    function candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029131
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $m = $n;\n    $i = 2;\n    while\
    \ ($i <= $m) {\n        if ($m % $i == 0) {\n            $m /= $i;\n        }\
    \ else {\n            $i++;\n        }\n    }\n    return $i;\n}\necho largest_prime_factor(13195)\
    \ . \"\\n\";\necho largest_prime_factor(2048) . \"\\n\";\necho largest_prime_factor(600851475143)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '29

    2

    6857

    '
  timestamp: 1660029131
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  if ($n < 4) {\n    return $n;\n \
    \ }\n  $factor = 2;\n  while ($n > 1) {\n    if ($n % $factor == 0) {\n      $n\
    \ /= $factor;\n    } else {\n      $factor++;\n    }\n  }\n  return $factor;\n\
    }\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029131
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i <= $n) {\n\
    \        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n      \
    \      $i++;\n        }\n    }\n    return $i;\n}\necho largest_prime_factor(600851475143)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '6857

    '
  timestamp: 1660029131
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  for ($i = 2; $i < $n; $i++) {\n \
    \   if ($n % $i == 0) {\n      return largest_prime_factor($n / $i);\n    }\n\
    \  }\n  return $n;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029131
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $factor = 2;\n  while ($n > 1) {\n\
    \    if ($n % $factor == 0) {\n      $n /= $factor;\n    } else {\n      $factor++;\n\
    \    }\n  }\n  return $factor;\n}\n\necho largest_prime_factor(600851475143) .\
    \ \"\\n\";\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '6857

    '
  timestamp: 1660029131
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $largest_factor = 1;\n    $i =\
    \ 2;\n    while ($i * $i <= $n) {\n        if ($n % $i == 0) {\n            $largest_factor\
    \ = $i;\n            $n /= $i;\n        } else {\n            $i++;\n        }\n\
    \    }\n    if ($n > 1) {\n        $largest_factor = $n;\n    }\n    return $largest_factor;\n\
    }\n\necho largest_prime_factor(600851475143) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '6857

    '
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $factors = array();\n  // get factors\n\
    \  $n_sqrt = sqrt($n);\n  for ($i = 2; $i <= $n_sqrt; $i++) {\n    if (fmod($n,\
    \ $i) == 0) {\n      $factors[] = $i;\n    }\n  }\n  // remove non-primes\n  for\
    \ ($i = 0; $i < count($factors); $i++) {\n    for ($j = $i + 1; $j < count($factors);\
    \ $j++) {\n      if (fmod($factors[$j], $factors[$i]) == 0) {\n        array_splice($factors,\
    \ $j, 1);\n        $j--;\n      }\n    }\n  }\n  // get largest\n  $largest =\
    \ 2;\n  for ($i = 0; $i < count($factors); $i++) {\n    if ($factors[$i] > $largest)\
    \ {\n      $largest = $factors[$i];\n    }\n  }\n  return $largest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0jedq944.php:40\n\
    Stack trace:\n#0 /tmp/tmp0jedq944.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp0jedq944.php\
    \ on line 40\n"
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $max = 0;\n    $factors = factorize($n);\n\
    \    foreach ($factors as $k => $v) {\n        if ($v == 1) {\n            $max\
    \ = $k;\n        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorize() in\
    \ /tmp/tmpjq7q76ry.php:9\nStack trace:\n#0 /tmp/tmpjq7q76ry.php(19): largest_prime_factor(15)\n\
    #1 /tmp/tmpjq7q76ry.php(23): candidate(15)\n#2 /tmp/tmpjq7q76ry.php(30): test()\n\
    #3 {main}\n  thrown in /tmp/tmpjq7q76ry.php on line 9\n"
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $factors = [];\n    for ($i = 2;\
    \ $i < $n; $i++) {\n        if ($n % $i == 0) {\n            array_push($factors,\
    \ $i);\n        }\n    }\n    $primes = array_filter($factors, function($f) {\n\
    \        return is_prime($f);\n    });\n    return max($primes);\n}\n\nfunction\
    \ candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2uu34x2g.php:15\nStack trace:\n#0 [internal function]: {closure}(3)\n\
    #1 /tmp/tmp2uu34x2g.php(16): array_filter(Array, Object(Closure))\n#2 /tmp/tmp2uu34x2g.php(21):\
    \ largest_prime_factor(15)\n#3 /tmp/tmp2uu34x2g.php(25): candidate(15)\n#4 /tmp/tmp2uu34x2g.php(32):\
    \ test()\n#5 {main}\n  thrown in /tmp/tmp2uu34x2g.php on line 15\n"
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    // TODO\n}\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu01cg5fr.php:15\n\
    Stack trace:\n#0 /tmp/tmpu01cg5fr.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpu01cg5fr.php\
    \ on line 15\n"
  timestamp: 1660029131
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  for ($i = 2; $i < $n; $i++) {\n \
    \   if ($n % $i == 0) {\n      $n /= $i;\n      $i--;\n    }\n  }\n  return $n;\n\
    }\n\nassert(largest_prime_factor(13195) == 29);\nassert(largest_prime_factor(2048)\
    \ == 2);\necho largest_prime_factor(600851475143);\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '6857'
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    // Find all prime factors of n.\n\
    \    $prime_factors = prime_factors($n);\n    // Return the largest prime factor.\n\
    \    return max($prime_factors);\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(15)\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !== 7)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function prime_factors()\
    \ in /tmp/tmp842k4ohm.php:9\nStack trace:\n#0 /tmp/tmp842k4ohm.php(15): largest_prime_factor(15)\n\
    #1 /tmp/tmp842k4ohm.php(19): candidate(15)\n#2 /tmp/tmp842k4ohm.php(26): test()\n\
    #3 {main}\n  thrown in /tmp/tmp842k4ohm.php on line 9\n"
  timestamp: 1660029131
- exit_code: -1
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $largest = null;\n    $candidate\
    \ = 3;\n\n    while ($n != 1) {\n        while ($n % $candidate == 0) {\n    \
    \        $largest = $candidate;\n            $n /= $candidate;\n        }\n  \
    \      $candidate += 2;\n    }\n\n    return $largest;\n}\n\nassert(29 == largest_prime_factor(13195));\n\
    assert(2 == largest_prime_factor(2048));\n\necho largest_prime_factor(600851475143)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660029136
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $largest_prime_factor = 1;\n  \
    \  $divisor = 2;\n    while ($n > 1) {\n        while ($n % $divisor == 0) {\n\
    \            $largest_prime_factor = $divisor;\n            $n /= $divisor;\n\
    \        }\n        if ($divisor == 2) {\n            $divisor++;\n        } else\
    \ {\n            $divisor += 2;\n        }\n    }\n    return $largest_prime_factor;\n\
    }\necho largest_prime_factor(13195) . \"\\n\";\necho largest_prime_factor(2048)\
    \ . \"\\n\";\necho largest_prime_factor(600851475143) . \"\\n\";\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '29

    2

    6857

    '
  timestamp: 1660029131
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $prime_factor = 2;\n  $largest_prime_factor\
    \ = 1;\n  $limit = sqrt($n);\n  while ($prime_factor <= $limit) {\n    if ($n\
    \ % $prime_factor == 0) {\n      $n /= $prime_factor;\n      $largest_prime_factor\
    \ = $prime_factor;\n    } else {\n      $prime_factor++;\n    }\n  }\n  // $n\
    \ must be the largest prime factor (and prime) at this point.\n  if ($n > $largest_prime_factor)\
    \ {\n    $largest_prime_factor = $n;\n  }\n  return $largest_prime_factor;\n}\n\
    \nlargest_prime_factor(600851475143);\nfunction candidate(...$args) {\n    return\
    \ largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(15)\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !== 7)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029131
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $factor = 2;\n  while ($n != 1) {\n\
    \    if ($n % $factor == 0) {\n      $n /= $factor;\n    } else {\n      $factor++;\n\
    \    }\n  }\n  return $factor;\n}\n\nprintf(\"%d\\n\", largest_prime_factor(13195));\n\
    printf(\"%d\\n\", largest_prime_factor(2048));\nprintf(\"%d\\n\", largest_prime_factor(600851475143));\n\
    function candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '29

    2

    6857

    '
  timestamp: 1660029131
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $div = 2;\n    while ($n > 1) {\n\
    \        while ($n % $div == 0) {\n            $n /= $div;\n        }\n      \
    \  $div++;\n    }\n    return $div - 1;\n}\n\nfunction candidate(...$args) {\n\
    \    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63)\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !==\
    \ 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !==\
    \ 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029131
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    for ($i = 2; $i < $n; $i++) {\n\
    \        if ($n % $i == 0) {\n            return largest_prime_factor($n / $i);\n\
    \        }\n    }\n    return $n;\n}\necho largest_prime_factor(2048);\nfunction\
    \ candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: '2'
  timestamp: 1660029131
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $m = floor(sqrt($n));\n    for\
    \ ($i = 2; $i <= $m; $i++) {\n        if ($n % $i == 0) {\n            return\
    \ max(largest_prime_factor($n / $i), largest_prime_factor($i));\n        }\n \
    \   }\n    return $n;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029131
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $divisor = 2;\n  while ($n > 1) {\n\
    \    while ($n % $divisor === 0) {\n      $n /= $divisor;\n    }\n    $divisor++;\n\
    \  }\n  return $divisor - 1;\n}\n\necho largest_prime_factor(13195) . \"\\n\"\
    ;\necho largest_prime_factor(2048) . \"\\n\";\nfunction candidate(...$args) {\n\
    \    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63)\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !==\
    \ 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !==\
    \ 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '29

    2

    '
  timestamp: 1660029131
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $max_prime = 1;\n    $i = 2;\n\
    \    while ($i * $i <= $n) {\n        if ($n % $i == 0) {\n            $max_prime\
    \ = $i;\n            $n = $n / $i;\n        } else {\n            $i += 1;\n \
    \       }\n    }\n    if ($n > $max_prime) {\n        $max_prime = $n;\n    }\n\
    \    return $max_prime;\n}\n\n$n = 100;\n$result = largest_prime_factor($n);\n\
    print \"The largest prime factor of $n is $result.\\n\";\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'The largest prime factor of 100 is 5.

    '
  timestamp: 1660029131
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  for ($i = 2; $i < $n; $i++) {\n \
    \   if ($n % $i == 0) {\n      return largest_prime_factor($n / $i);\n    }\n\
    \  }\n  return $n;\n}\n\necho largest_prime_factor(600851475143);\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '6857'
  timestamp: 1660029131
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $factor = 2;\n  while ($n > 1) {\n\
    \    if ($n % $factor == 0) {\n      $n /= $factor;\n    } else {\n      $factor++;\n\
    \    }\n  }\n  return $factor;\n}\n\nassert_options(ASSERT_BAIL, 1);\nassert(largest_prime_factor(13195)\
    \ == 29);\nassert(largest_prime_factor(2048) == 2);\n\n$start = microtime(true);\n\
    echo \"Result: \" . largest_prime_factor(600851475143) . \"\\n\";\n$end = microtime(true);\n\
    echo \"Time: \" . ($end - $start) . \"\\n\";\nfunction candidate(...$args) {\n\
    \    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63)\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !==\
    \ 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !==\
    \ 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Result: 6857

    Time: 0.0002291202545166

    '
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $c = 0;\n  $lpf = 0;\n  for ($i =\
    \ 2; $i < $n; $i++) {\n    if ($n % $i == 0) {\n      if (is_prime($i)) {\n  \
    \      $lpf = $i;\n      }\n    }\n  }\n  return $lpf;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpa6ukcwsn.php:12\nStack trace:\n#0 /tmp/tmpa6ukcwsn.php(21): largest_prime_factor(15)\n\
    #1 /tmp/tmpa6ukcwsn.php(25): candidate(15)\n#2 /tmp/tmpa6ukcwsn.php(32): test()\n\
    #3 {main}\n  thrown in /tmp/tmpa6ukcwsn.php on line 12\n"
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  // The largest prime factor must\
    \ be less than the square root of $n.\n  $max = sqrt($n);\n  // If $n is even,\
    \ then 2 is a factor, but 2 is prime.\n  if ($n % 2 == 0) {\n    $result = 2;\n\
    \    $n /= 2;\n  }\n  else {\n    $result = 1;\n  }\n  // $f is a candidate prime\
    \ factor.\n  for ($f = 3; $f <= $max; $f += 2) {\n    // If $f is a factor, then\
    \ it's prime.\n    if ($n % $f == 0) {\n      $result = $f;\n      $n /= $f;\n\
    \    }\n  }\n  // $n is now the largest prime factor of the original $n.\n  return\
    \ $n;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfztfsuwe.php:36\n\
    Stack trace:\n#0 /tmp/tmpfztfsuwe.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpfztfsuwe.php\
    \ on line 36\n"
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    // prime factorization of n\n \
    \   $prime_factors = array();\n    for ($factor = 2; $factor <= $n; $factor++)\
    \ {\n        if ($n % $factor === 0) {\n            $prime_factors[] = $factor;\n\
    \            $n /= $factor;\n        }\n    }\n    return max($prime_factors);\n\
    }\n\necho largest_prime_factor(600851475143), \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "6857\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt5kv5mjp.php:26\n\
    Stack trace:\n#0 /tmp/tmpt5kv5mjp.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpt5kv5mjp.php\
    \ on line 26\n"
  timestamp: 1660029131
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $factor = 0;\n    $divisor = 2;\n\
    \    while ($n > 1) {\n        while ($n % $divisor == 0) {\n            $factor\
    \ = $divisor;\n            $n /= $divisor;\n        }\n        $divisor++;\n \
    \   }\n    return $factor;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029131
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $prime = 2;\n    while($n % $prime\
    \ != 0) {\n        $prime += 1;\n    }\n    if($n == $prime) {\n        return\
    \ $n;\n    }\n    return largest_prime_factor($n / $prime);\n}\n\n$ans = largest_prime_factor(600851475143);\n\
    print(\"Answer: $ans\\n\");\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Answer: 6857

    '
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $factors = [];\n    while ($n %\
    \ 2 == 0) {\n        $factors[] = 2;\n        $n /= 2;\n    }\n    for ($i = 3;\
    \ $i <= sqrt($n); $i += 2) {\n        while ($n % $i == 0) {\n            $factors[]\
    \ = $i;\n            $n /= $i;\n        }\n    }\n    if ($n > 2) {\n        $factors[]\
    \ = $n;\n    }\n    return $factors[count($factors) - 1];\n}\n\necho largest_prime_factor(600851475143);\n\
    function candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '6857'
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $div = 2;\n  while ($n > 1) {\n \
    \   if ($n % $div == 0) {\n      $n /= $div;\n    } else {\n      $div++;\n  \
    \  }\n  }\n  return $div;\n}\n\n$n = largest_prime_factor(13195);\necho \"Test\
    \ 1: expected 29, got $n\\n\";\n$n = largest_prime_factor(2048);\necho \"Test\
    \ 2: expected 2, got $n\\n\";\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Test 1: expected 29, got 29

    Test 2: expected 2, got 2

    '
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $n = abs($n);\n  $factor = 0;\n \
    \ for ($i = 3; $i < sqrt($n); $i += 2) {\n    if ($n % $i == 0) {\n      $factor\
    \ = $i;\n      break;\n    }\n  }\n  if ($factor > 0) {\n    return largest_prime_factor($n\
    \ / $factor);\n  } else {\n    return $n;\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj_fm85kz.php:29\n\
    Stack trace:\n#0 /tmp/tmpj_fm85kz.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpj_fm85kz.php\
    \ on line 29\n"
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $prime_factors = array();\n  $primes\
    \ = array();\n  $sqrt_n = sqrt($n);\n  for ($i = 2; $i <= $sqrt_n; $i++) {\n \
    \   if (is_prime($i, $primes)) {\n      $primes[] = $i;\n      if ($n % $i ==\
    \ 0) {\n        $prime_factors[] = $i;\n      }\n    }\n  }\n  return max($prime_factors);\n\
    }\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp5_ncs26g.php:12\nStack trace:\n#0 /tmp/tmp5_ncs26g.php(23): largest_prime_factor(15)\n\
    #1 /tmp/tmp5_ncs26g.php(27): candidate(15)\n#2 /tmp/tmp5_ncs26g.php(34): test()\n\
    #3 {main}\n  thrown in /tmp/tmp5_ncs26g.php on line 12\n"
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $i = 2;\n  while ($i < $n) {\n  \
    \  if ($n % $i == 0) {\n      $n = $n / $i;\n    } else {\n      $i++;\n    }\n\
    \  }\n  return $n;\n}\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $i = 2;\n  while ($i * $i <= $n)\
    \ {\n    if ($n % $i == 0) {\n      $n /= $i;\n    } else {\n      $i++;\n   \
    \ }\n  }\n  return $n;\n}\n\necho largest_prime_factor(13195) . \"\\n\";\necho\
    \ largest_prime_factor(2048) . \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(15)\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !== 7)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '29

    2

    '
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $l = largest_prime_factor_helper($n);\n\
    \  return $l;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function largest_prime_factor_helper()\
    \ in /tmp/tmp6rndetzo.php:8\nStack trace:\n#0 /tmp/tmp6rndetzo.php(13): largest_prime_factor(15)\n\
    #1 /tmp/tmp6rndetzo.php(17): candidate(15)\n#2 /tmp/tmp6rndetzo.php(24): test()\n\
    #3 {main}\n  thrown in /tmp/tmp6rndetzo.php on line 8\n"
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $numPrimes = 0;\n    for ($i =\
    \ 1; $i <= $n; $i++) {\n        if (is_prime($i)) {\n            $primeFactors[$numPrimes]\
    \ = $i;\n            $numPrimes++;\n        }\n    }\n    $numDivisors = 0;\n\
    \    for ($i = 1; $i <= $n; $i++) {\n        if (is_divisor($n, $i)) {\n     \
    \       $divisors[$numDivisors] = $i;\n            $numDivisors++;\n        }\n\
    \    }\n    for ($i = 0; $i < $numDivisors; $i++) {\n        for ($j = 0; $j <\
    \ $numPrimes; $j++) {\n            if ($divisors[$i] == $primeFactors[$j]) {\n\
    \                $largestPrimeFactor = $divisors[$i];\n            }\n       \
    \ }\n    }\n    return $largestPrimeFactor;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpuvn_ztbp.php:10\nStack trace:\n#0 /tmp/tmpuvn_ztbp.php(33): largest_prime_factor(15)\n\
    #1 /tmp/tmpuvn_ztbp.php(37): candidate(15)\n#2 /tmp/tmpuvn_ztbp.php(44): test()\n\
    #3 {main}\n  thrown in /tmp/tmpuvn_ztbp.php on line 10\n"
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $largest = 2;\n    while ($n >\
    \ 1) {\n        if ($n % $largest == 0) {\n            $n /= $largest;\n     \
    \   } else {\n            $largest += ($largest == 2) ? 1 : 2;\n        }\n  \
    \  }\n    return $largest;\n}\n\nvar_dump(largest_prime_factor(13195));\nvar_dump(largest_prime_factor(2048));\n\
    function candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'int(29)

    int(2)

    '
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $factor = 2;\n    while ($n % $factor\
    \ != 0) {\n        $factor++;\n    }\n    if ($n == $factor) {\n        return\
    \ $n;\n    } else {\n        return largest_prime_factor($n / $factor);\n    }\n\
    }\n\necho largest_prime_factor(13195);\nfunction candidate(...$args) {\n    return\
    \ largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(15)\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !== 7)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '29'
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <=\
    \ $n) {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n\
    \            $i++;\n        }\n    }\n    return $n;\n}\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    for ($i = 2; $i <= $n; $i++) {\n\
    \        if ($n % $i == 0) {\n            $n /= $i;\n            $i--;\n     \
    \   }\n    }\n    return $i;\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(15)\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !== 7)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <=\
    \ $n) {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n\
    \            $i++;\n        }\n    }\n    return $n;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $largest_factor = 1;\n    $i =\
    \ 2;\n    while ($i <= $n) {\n        if (fmod($n, $i) == 0) {\n            $n\
    \ = $n / $i;\n            $largest_factor = $i;\n        } else {\n          \
    \  $i++;\n        }\n    }\n    return $largest_factor;\n}\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  for ($i = 2; $i <= $n / 2; $i++)\
    \ {\n    if ($n % $i == 0) {\n      return largest_prime_factor($n / $i);\n  \
    \  }\n  }\n  return $n;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $primes = primes_less_than($n);\n\
    \    for ($i = count($primes) - 1; $i >= 0; $i--) {\n        if ($n % $primes[$i]\
    \ == 0) {\n            return $primes[$i];\n        }\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function primes_less_than()\
    \ in /tmp/tmpipotvvr_.php:8\nStack trace:\n#0 /tmp/tmpipotvvr_.php(17): largest_prime_factor(15)\n\
    #1 /tmp/tmpipotvvr_.php(21): candidate(15)\n#2 /tmp/tmpipotvvr_.php(28): test()\n\
    #3 {main}\n  thrown in /tmp/tmpipotvvr_.php on line 8\n"
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    for ($i = 2; $i <= $n / 2; $i++)\
    \ {\n        if ($n % $i == 0) {\n            return largest_prime_factor($n /\
    \ $i);\n        }\n    }\n    return $n;\n}\n\necho largest_prime_factor(600851475143);\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '6857

    '
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $i = 2;\n  while ($i <= sqrt($n))\
    \ {\n    while ($n % $i == 0) {\n      $n /= $i;\n    }\n    $i++;\n  }\n  return\
    \ $n;\n}\n\necho largest_prime_factor(600851475143) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "6857\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptcbc499n.php:25\n\
    Stack trace:\n#0 /tmp/tmptcbc499n.php(31): test()\n#1 {main}\n  thrown in /tmp/tmptcbc499n.php\
    \ on line 25\n"
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $factors = array();\n    $t = 2;\n\
    \    while ($n > 1) {\n        while ($n % $t == 0) {\n            $factors[]\
    \ = $t;\n            $n /= $t;\n        }\n        $t++;\n    }\n    $largest\
    \ = max($factors);\n    return $largest;\n}\necho largest_prime_factor(600851475143);\n\
    function candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '6857'
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  for ($factor = 2; $factor * $factor\
    \ <= $n; $factor++) {\n    if ($n % $factor == 0) {\n      $n /= $factor;\n  \
    \    $factor--;\n    }\n  }\n  return $n;\n}\n\necho largest_prime_factor(13195)\
    \ . \"\\n\";\necho largest_prime_factor(2048) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '29

    2

    '
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $smallest_prime_factor = 2;\n \
    \   $largest_prime_factor = 1;\n    while ($n > 1) {\n        if ($n % $smallest_prime_factor\
    \ == 0) {\n            $largest_prime_factor = $smallest_prime_factor;\n     \
    \       $n /= $smallest_prime_factor;\n        } else {\n            ++$smallest_prime_factor;\n\
    \        }\n    }\n    return $largest_prime_factor;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $last = $n;\n  for ($i = 2; $i <=\
    \ $last; $i++) {\n    if ($n % $i == 0) {\n      $last = $n / $i;\n      $n =\
    \ $last;\n    }\n  }\n  return $last;\n}\n\necho largest_prime_factor(13195) .\
    \ \"\\n\";\necho largest_prime_factor(2048) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n2\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_i0egop2.php:25\n\
    Stack trace:\n#0 /tmp/tmp_i0egop2.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp_i0egop2.php\
    \ on line 25\n"
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    for ($i = 2; $i <= $n; $i++) {\n\
    \        if ($n % $i == 0) {\n            $n /= $i;\n            $i--;\n     \
    \   }\n    }\n    return $i;\n}\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $largest_prime_factor = null;\n \
    \ $primes = primes(intval(sqrt($n)));\n  foreach ($primes as $p) {\n    if ($n\
    \ % $p == 0) {\n      $largest_prime_factor = $p;\n    }\n  }\n  return $largest_prime_factor;\n\
    }\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function primes() in /tmp/tmps3ejv811.php:9\n\
    Stack trace:\n#0 /tmp/tmps3ejv811.php(18): largest_prime_factor(15)\n#1 /tmp/tmps3ejv811.php(22):\
    \ candidate(15)\n#2 /tmp/tmps3ejv811.php(29): test()\n#3 {main}\n  thrown in /tmp/tmps3ejv811.php\
    \ on line 9\n"
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    // Find the factors of n.\n   \
    \ $factors = array();\n    for ($i = 2; $i <= sqrt($n); $i++) {\n        while\
    \ ($n % $i == 0) {\n            $factors[] = $i;\n            $n /= $i;\n    \
    \    }\n    }\n    // If we haven't actually factored n, just add it.\n    if\
    \ ($n > 1) {\n        $factors[] = $n;\n    }\n    // Since we're only interested\
    \ in the largest prime factor, we can\n    // simply return the last prime.\n\
    \    return end($factors);\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $prime = false;\n    $factor =\
    \ $n;\n    while (!$prime) {\n        $factor--;\n        $prime = is_prime($factor);\n\
    \    }\n    return $factor;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpqlvyrri_.php:12\nStack trace:\n#0 /tmp/tmpqlvyrri_.php(18): largest_prime_factor(15)\n\
    #1 /tmp/tmpqlvyrri_.php(22): candidate(15)\n#2 /tmp/tmpqlvyrri_.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmpqlvyrri_.php on line 12\n"
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <=\
    \ $n) {\n        if ($n % $i) {\n            $i += 1;\n        } else {\n    \
    \        $n /= $i;\n        }\n    }\n    return $n;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822393
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    if ($n <= 1) return 0;\n    $i\
    \ = 2;\n    while ($i < $n) {\n        if ($n % $i == 0) {\n            $n /=\
    \ $i;\n        } else {\n            $i++;\n        }\n    }\n    return $n;\n\
    }\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $largest_prime_factor = 1;\n  $i\
    \ = 2;\n  while ($i * $i <= $n) {\n    while ($n % $i == 0) {\n      $largest_prime_factor\
    \ = $i;\n      $n /= $i;\n    }\n    $i++;\n  }\n  return $largest_prime_factor;\n\
    }\n\n$result = largest_prime_factor(600851475143);\nprintf(\"Largest prime factor\
    \ of 600851475143 is %d.\\n\", $result);\nfunction candidate(...$args) {\n   \
    \ return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !==\
    \ 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Largest prime factor of 600851475143 is 1471.\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpqgni4nnq.php:27\nStack trace:\n#0 /tmp/tmpqgni4nnq.php(34):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpqgni4nnq.php on line 27\n"
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    if ($n == 1) return 1;\n    for\
    \ ($i = 2; $i <= $n; $i++) {\n        if ($n % $i == 0) {\n            return\
    \ max($i, largest_prime_factor($n / $i));\n        }\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029132
- exit_code: -1
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  // If there's a prime factor 2, it's\
    \ the largest\n  if ($n % 2 == 0) {\n    $n /= 2;\n    // If $n is even, the largest\
    \ prime factor is 2.\n    if ($n == 1) {\n      return 2;\n    }\n  }\n  // If\
    \ $n is odd, we start at 3\n  $factor = 3;\n  // Only increment by 2 as we don't\
    \ need to check even numbers.\n  while ($n != 1) {\n    if ($n % $factor == 0)\
    \ {\n      $n /= $factor;\n    }\n    else {\n      $factor += 2;\n    }\n  }\n\
    \  return $factor;\n}\n\necho largest_prime_factor(13195);\necho \"\\n\";\necho\
    \ largest_prime_factor(2048);\necho \"\\n\";\necho largest_prime_factor(600851475143);\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: '29

    '
  timestamp: 1660029137
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $p = 2;\n    $factor = 0;\n   \
    \ while ($n != 1) {\n        if ($n % $p == 0) {\n            $factor = $p;\n\
    \            $n /= $p;\n        } else {\n            $p += 1;\n        }\n  \
    \  }\n    return $factor;\n}\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    // Start with the largest possible\
    \ prime factor, floor(sqrt(n))\n    $prime = floor(sqrt($n));\n    // Decrement\
    \ through odd numbers only\n    while ($prime > 1) {\n        $prime -= 2;\n \
    \       // If the current number is a factor and is prime, we're done\n      \
    \  if ($n % $prime == 0 && is_prime($prime))\n            return $prime;\n   \
    \ }\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpsjwanl3_.php:14\nStack trace:\n#0 /tmp/tmpsjwanl3_.php(20): largest_prime_factor(15)\n\
    #1 /tmp/tmpsjwanl3_.php(24): candidate(15)\n#2 /tmp/tmpsjwanl3_.php(31): test()\n\
    #3 {main}\n  thrown in /tmp/tmpsjwanl3_.php on line 14\n"
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  // TODO\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp47fy5ait.php:16\n\
    Stack trace:\n#0 /tmp/tmp47fy5ait.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp47fy5ait.php\
    \ on line 16\n"
  timestamp: 1659822393
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $p = $n;\n  for ($i = 2; $i <= sqrt($n);\
    \ $i++) {\n    if ($p % $i == 0) {\n      while ($p % $i == 0) {\n        $p /=\
    \ $i;\n      }\n    }\n  }\n  return $p;\n}\n\nfunction candidate(...$args) {\n\
    \    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63)\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !==\
    \ 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !==\
    \ 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoehckdxw.php:25\n\
    Stack trace:\n#0 /tmp/tmpoehckdxw.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpoehckdxw.php\
    \ on line 25\n"
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    for ($i = 2; $i <= $n; $i++) {\n\
    \        if (is_prime($i) && $n % $i == 0) {\n            return $i;\n       \
    \ }\n    }\n}\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpw9sl7koy.php:9\nStack trace:\n#0 /tmp/tmpw9sl7koy.php(15): largest_prime_factor(15)\n\
    #1 /tmp/tmpw9sl7koy.php(19): candidate(15)\n#2 /tmp/tmpw9sl7koy.php(26): test()\n\
    #3 {main}\n  thrown in /tmp/tmpw9sl7koy.php on line 9\n"
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $m = floor(sqrt($n));\n    for\
    \ ($i = 2; $i <= $m; $i++) {\n        if ($n % $i == 0) {\n            return\
    \ max(largest_prime_factor($n / $i), largest_prime_factor($i));\n        }\n \
    \   }\n    return $n;\n}\n\n$n = 13195;\n$res = largest_prime_factor($n);\necho\
    \ \"largest prime factor of $n is $res\\n\";\n\n$n = 2048;\n$res = largest_prime_factor($n);\n\
    echo \"largest prime factor of $n is $res\\n\";\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'largest prime factor of 13195 is 29

    largest prime factor of 2048 is 2

    '
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $i = 2;\n  while ($i <= $n) {\n \
    \   if ($n % $i == 0) {\n      $n /= $i;\n    } else {\n      $i++;\n    }\n \
    \ }\n  return $i;\n}\n\necho largest_prime_factor(13195) . PHP_EOL;\necho largest_prime_factor(2048)\
    \ . PHP_EOL;\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '29

    2

    '
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    if ($n < 1) return false;\n   \
    \ // Simple case\n    if ($n <= 3) return $n;\n    // Small numbers\n    if ($n\
    \ % 2 == 0) return 2;\n    if ($n % 3 == 0) return 3;\n    // General case\n \
    \   for ($i = 3; $i <= sqrt($n); $i++) {\n        if ($n % $i == 0) {\n      \
    \      if (is_prime($i)) return $i;\n        }\n    }\n    return $n;\n}\nfunction\
    \ candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpds3qnmah.php:27\n\
    Stack trace:\n#0 /tmp/tmpds3qnmah.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpds3qnmah.php\
    \ on line 27\n"
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  for ($i = 2; $i < $n; $i++) {\n \
    \   if ($n % $i == 0) {\n      // $i is a factor of $n.\n      $largest_factor\
    \ = largest_prime_factor($n / $i);\n      if ($largest_factor > $i) {\n      \
    \  return $largest_factor;\n      } else {\n        return $i;\n      }\n    }\n\
    \  }\n  return $n;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $largest_prime_factor = 0;\n  //\
    \ We just need to check up to sqrt(n).\n  $sqrt_n = (int)sqrt($n);\n  for ($i\
    \ = 2; $i <= $sqrt_n; $i++) {\n    // If $i is a factor of $n, update $largest_prime_factor.\n\
    \    if ($n % $i == 0) {\n      // We only want prime factors.\n      if (is_prime($i))\
    \ {\n        $largest_prime_factor = $i;\n      }\n    }\n  }\n  return $largest_prime_factor;\n\
    }\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpu0qk011j.php:15\nStack trace:\n#0 /tmp/tmpu0qk011j.php(24): largest_prime_factor(15)\n\
    #1 /tmp/tmpu0qk011j.php(28): candidate(15)\n#2 /tmp/tmpu0qk011j.php(35): test()\n\
    #3 {main}\n  thrown in /tmp/tmpu0qk011j.php on line 15\n"
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $factor = 2;\n  $last_factor = 1;\n\
    \  while ($n != 1) {\n    if ($n % $factor != 0) {\n      $factor++;\n    } else\
    \ {\n      $n /= $factor;\n      if ($factor != $last_factor) {\n        $last_factor\
    \ = $factor;\n      }\n    }\n  }\n  return $last_factor;\n}\n\necho largest_prime_factor(13195)\
    \ . \"\\n\";\necho largest_prime_factor(2048) . \"\\n\";\necho largest_prime_factor(600851475143)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '29

    2

    6857

    '
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $lpf = 0;\n    $prime = 2;\n  \
    \  while ($n != 1) {\n        while ($n % $prime == 0) {\n            $lpf = $prime;\n\
    \            $n /= $prime;\n        }\n        $prime++;\n    }\n    return $lpf;\n\
    }\n\nprint(largest_prime_factor(13195));\nprint(\"\\n\");\nprint(largest_prime_factor(2048));\n\
    print(\"\\n\");\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '29

    2

    '
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $i = 2;\n  while ($i * $i <= $n)\
    \ {\n    if ($n % $i == 0) {\n      $n /= $i;\n    } else {\n      $i += 1;\n\
    \    }\n  }\n  return $n;\n}\n\necho largest_prime_factor(13195) . \"\\n\";\n\
    echo largest_prime_factor(2048) . \"\\n\";\nfunction candidate(...$args) {\n \
    \   return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63)\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !==\
    \ 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !==\
    \ 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '29

    2

    '
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  for ($divisor = 2; $divisor < $n;\
    \ $divisor++) {\n    if ($n % $divisor == 0) {\n      $factor = $n / $divisor;\n\
    \      return largest_prime_factor($factor);\n    }\n  }\n  return $n;\n}\n\n\
    function candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $p = 2;\n    while ($n > 1) {\n\
    \        if ($n % $p == 0) {\n            $n /= $p;\n        } else {\n      \
    \      $p++;\n        }\n    }\n    return $p;\n}\n\n$r = largest_prime_factor(13195);\n\
    assert($r == 29);\n\n$r = largest_prime_factor(2048);\nassert($r == 2);\n\necho\
    \ \"Success\";\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Success
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    for ($i = floor(sqrt($n)); $i >\
    \ 1; $i--) {\n        if ($n % $i == 0) {\n            if (is_prime($i)) return\
    \ $i;\n        }\n    }\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpp4_rm8rg.php:10\nStack trace:\n#0 /tmp/tmpp4_rm8rg.php(16): largest_prime_factor(15)\n\
    #1 /tmp/tmpp4_rm8rg.php(20): candidate(15)\n#2 /tmp/tmpp4_rm8rg.php(27): test()\n\
    #3 {main}\n  thrown in /tmp/tmpp4_rm8rg.php on line 10\n"
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    // Initialize $lpf, the largest\
    \ prime factor, to 2.\n    $lpf = 2;\n    // Loop through all odd numbers from\
    \ 3 to $n / 2,\n    // setting $lpf to the larger of $lpf and the largest prime\
    \ factor of $n.\n    for ($i = 3; $i <= $n / 2; $i += 2) {\n        if ($n % $i\
    \ === 0) {\n            $lpf = max($lpf, largest_prime_factor($n / $i));\n   \
    \     }\n    }\n    // Return $lpf.\n    return $lpf;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvxr879a0.php:26\n\
    Stack trace:\n#0 /tmp/tmpvxr879a0.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpvxr879a0.php\
    \ on line 26\n"
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  // Code here.\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp45x6di9z.php:16\n\
    Stack trace:\n#0 /tmp/tmp45x6di9z.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp45x6di9z.php\
    \ on line 16\n"
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $p = 2;\n  $q = $n;\n  while ($q\
    \ > $p) {\n    if ($q % $p == 0) {\n      $q = $q / $p;\n    } else {\n      $p\
    \ = $p + 1;\n    }\n  }\n  return $p;\n}\n\nfunction candidate(...$args) {\n \
    \   return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63)\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !==\
    \ 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !==\
    \ 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    // First, the simple optimizations.\n\
    \    if ($n % 2 == 0) {\n        return largest_prime_factor($n / 2);\n    }\n\
    \n    // Each time we call this function, we check for 2 and 3.\n    // So we\
    \ can start with 5, which is 2 + 3.\n    $factor = 5;\n    $max_factor = sqrt($n);\n\
    \n    while ($n > 1 && $factor <= $max_factor) {\n        while ($n % $factor\
    \ == 0) {\n            $n /= $factor;\n            $max_factor = sqrt($n);\n \
    \       }\n        $factor += 2;\n    }\n\n    return $n;\n}\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl77ec0qr.php:33\n\
    Stack trace:\n#0 /tmp/tmpl77ec0qr.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpl77ec0qr.php\
    \ on line 33\n"
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  if ($n <= 1) {\n    return 0;\n \
    \ }\n  $factor = 2;\n  $prime_factor = $n;\n  while ($factor <= $n) {\n    if\
    \ ($n % $factor == 0) {\n      if (is_prime($factor)) {\n        $prime_factor\
    \ = $factor;\n      }\n      $n /= $factor;\n    } else {\n      $factor++;\n\
    \    }\n  }\n  return $prime_factor;\n}\n\nfunction candidate(...$args) {\n  \
    \  return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !==\
    \ 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp4zbs92ur.php:15\nStack trace:\n#0 /tmp/tmp4zbs92ur.php(27): largest_prime_factor(15)\n\
    #1 /tmp/tmp4zbs92ur.php(31): candidate(15)\n#2 /tmp/tmp4zbs92ur.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmp4zbs92ur.php on line 15\n"
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    if ($n == 2) return 2;\n    $factors\
    \ = [];\n    while ($n % 2 == 0) {\n        $factors[] = 2;\n        $n /= 2;\n\
    \    }\n    for ($i = 3; $i <= $n; $i += 2) {\n        while ($n % $i == 0) {\n\
    \            $factors[] = $i;\n            $n /= $i;\n        }\n    }\n    return\
    \ max($factors);\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    // This method assumes that $n\
    \ is an integer.\n    $max = $n / 2;\n    for ($i = 2; $i <= $max; $i++) {\n \
    \       $r = $n % $i;\n        if ($r == 0) {\n            $primes[] = $i;\n \
    \       }\n    }\n    // print_r($primes);\n    $largest = array_pop($primes);\n\
    \    return $largest;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbhuk8sta.php:27\n\
    Stack trace:\n#0 /tmp/tmpbhuk8sta.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpbhuk8sta.php\
    \ on line 27\n"
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $max = 1;\n  for ($i = 2; $i <= $n;\
    \ $i++) {\n    if ($n % $i == 0) {\n      $max = $i;\n      $n /= $i;\n      $i\
    \ = 1;\n    }\n  }\n  return $max;\n}\necho largest_prime_factor(13195) . PHP_EOL;\n\
    echo largest_prime_factor(2048) . PHP_EOL;\nfunction candidate(...$args) {\n \
    \   return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63)\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !==\
    \ 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !==\
    \ 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '29

    2

    '
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  if ($n == 1) return 1;\n  for ($i\
    \ = 2; $i <= sqrt($n); $i++) {\n    if ($n % $i == 0) {\n      $factor1 = $i;\n\
    \      $factor2 = $n / $i;\n      if (is_prime($factor1)) return $factor1;\n \
    \     if (is_prime($factor2)) return $factor2;\n    }\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp7oqxolm2.php:13\nStack trace:\n#0 /tmp/tmp7oqxolm2.php(20): largest_prime_factor(15)\n\
    #1 /tmp/tmp7oqxolm2.php(24): candidate(15)\n#2 /tmp/tmp7oqxolm2.php(31): test()\n\
    #3 {main}\n  thrown in /tmp/tmp7oqxolm2.php on line 13\n"
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  // Your code here.\n}\n\nassert_options(ASSERT_BAIL,\
    \ 1);\nassert(largest_prime_factor(13195) == 29);\nassert(largest_prime_factor(2048)\
    \ == 2);\necho \"All tests passed.\\n\";\nfunction candidate(...$args) {\n   \
    \ return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !==\
    \ 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught AssertionError: assert(largest_prime_factor(13195)\
    \ == 29) in /tmp/tmpth_wdb0_.php:12\nStack trace:\n#0 /tmp/tmpth_wdb0_.php(12):\
    \ assert(false, 'assert(largest_...')\n#1 {main}\n  thrown in /tmp/tmpth_wdb0_.php\
    \ on line 12\n"
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $prime_factors = array();\n   \
    \ $i = 2;\n    while ($n > 1) {\n        while ($n % $i == 0) {\n            $prime_factors[]\
    \ = $i;\n            $n /= $i;\n        }\n        $i++;\n    }\n    return max($prime_factors);\n\
    }\necho largest_prime_factor(13195);\necho PHP_EOL;\necho largest_prime_factor(2048);\n\
    echo PHP_EOL;\necho largest_prime_factor(600851475143);\necho PHP_EOL;\nfunction\
    \ candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: '29

    2

    6857

    '
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $result = 1;\n    $i = 2;\n   \
    \ while ($i <= $n) {\n        if ($n % $i == 0) {\n            $result = $i;\n\
    \            $n /= $i;\n        } else {\n            $i++;\n        }\n    }\n\
    \    return $result;\n}\necho largest_prime_factor(600851475143);\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '6857'
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $factor = 2;\n  while ($n > 1) {\n\
    \    while ($n % $factor == 0) {\n      $n /= $factor;\n    }\n    $factor++;\n\
    \  }\n  return $factor - 1;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $factors = array_filter(array_values(prime_factors($n)),\
    \ function($f) {\n    return $f != 1;\n  });\n  return max($factors);\n}\n\nfunction\
    \ candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function prime_factors()\
    \ in /tmp/tmpzlkh_dnp.php:8\nStack trace:\n#0 /tmp/tmpzlkh_dnp.php(15): largest_prime_factor(15)\n\
    #1 /tmp/tmpzlkh_dnp.php(19): candidate(15)\n#2 /tmp/tmpzlkh_dnp.php(26): test()\n\
    #3 {main}\n  thrown in /tmp/tmpzlkh_dnp.php on line 8\n"
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $prime_factor = 1;\n    $factor\
    \ = 2;\n    while ($n != 1) {\n        while ($n % $factor == 0) {\n         \
    \   $prime_factor = $factor;\n            $n /= $factor;\n        }\n        $factor\
    \ += 1;\n    }\n    return $prime_factor;\n}\n\necho largest_prime_factor(600851475143),\
    \ \"\\n\";\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '6857

    '
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    for ($i = 2; $i < $n; $i++) {\n\
    \        if ($n % $i == 0) {\n            return max(largest_prime_factor($n /\
    \ $i), largest_prime_factor($i));\n        }\n    }\n    return $n;\n}\n\nlargest_prime_factor(13195);\n\
    function candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $f = 2;\n    while ($n > 1) {\n\
    \        while ($n % $f == 0) {\n            $n /= $f;\n        }\n        $f++;\n\
    \    }\n    return $f-1;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  for ($i = 2; $i <= $n; $i++) {\n\
    \    if ($n % $i == 0) {\n      $n /= $i;\n      $largest = $i;\n    }\n  }\n\
    \  return $largest;\n}\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5f981aar.php:22\n\
    Stack trace:\n#0 /tmp/tmp5f981aar.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp5f981aar.php\
    \ on line 22\n"
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    // TODO\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpba277ry_.php:16\n\
    Stack trace:\n#0 /tmp/tmpba277ry_.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpba277ry_.php\
    \ on line 16\n"
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $i = 2;\n  while($i * $i <= $n) {\n\
    \    if ($n % $i == 0) {\n      $n /= $i;\n    } else {\n      $i += 1;\n    }\n\
    \  }\n  return $n;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  // Start with the smallest prime\
    \ factor, 2.\n  $i = 2;\n  while ($i <= $n) {\n    // While i divides n, divide\
    \ n by i.\n    while ($n % $i == 0) {\n      $n = $n / $i;\n    }\n    // Increment\
    \ i until it is > n.\n    if ($i < $n) {\n      $i++;\n    }\n  }\n  return $i;\n\
    }\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $i = 2;\n  while ($i <= $n) {\n \
    \   if ($n % $i == 0) {\n      $n /= $i;\n    } else {\n      $i++;\n    }\n \
    \ }\n  return $i;\n}\n\necho largest_prime_factor(600851475143);\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '6857'
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $d = 2;\n    while ($n > 1) {\n\
    \        while ($n % $d == 0) {\n            $n /= $d;\n        }\n        $d\
    \ += 1;\n    }\n    return $d - 1;\n}\necho largest_prime_factor(13195), PHP_EOL;\n\
    echo largest_prime_factor(2048), PHP_EOL;\nfunction candidate(...$args) {\n  \
    \  return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !==\
    \ 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '29

    2

    '
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  // Find all the prime factors of\
    \ n.\n  $factors = array();\n  $factors = get_all_prime_factors($n);\n  // Return\
    \ the largest one.\n  return max($factors);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_all_prime_factors()\
    \ in /tmp/tmp5j2hlefq.php:10\nStack trace:\n#0 /tmp/tmp5j2hlefq.php(16): largest_prime_factor(15)\n\
    #1 /tmp/tmp5j2hlefq.php(20): candidate(15)\n#2 /tmp/tmp5j2hlefq.php(27): test()\n\
    #3 {main}\n  thrown in /tmp/tmp5j2hlefq.php on line 10\n"
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $f = 2;\n  while ($n % $f != 0) {\n\
    \    $f++;\n  }\n  if ($n == $f) {\n    return $n;\n  }\n  return largest_prime_factor($n\
    \ / $f);\n}\n\nassert(29 == largest_prime_factor(13195));\nassert(2 == largest_prime_factor(2048));\n\
    assert(5 == largest_prime_factor(25));\nassert(29 == largest_prime_factor(13195));\n\
    assert(997 == largest_prime_factor(997));\nassert(37 == largest_prime_factor(1337));\n\
    assert(325115 == largest_prime_factor(600851475143));\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught AssertionError: assert(37 == largest_prime_factor(1337))\
    \ in /tmp/tmp3nvenyom.php:23\nStack trace:\n#0 /tmp/tmp3nvenyom.php(23): assert(false,\
    \ 'assert(37 == la...')\n#1 {main}\n  thrown in /tmp/tmp3nvenyom.php on line 23\n"
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $primes = [1];\n    for ($i = 2;\
    \ $i <= $n; $i++) {\n        if ($n % $i == 0) {\n            $primes[] = $i;\n\
    \            while ($n % $i == 0) {\n                $n /= $i;\n            }\n\
    \        }\n    }\n    return $primes[count($primes) - 1];\n}\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $factors = array();\n    for ($i\
    \ = 2; $i <= sqrt($n); $i++) {\n        if ($n % $i == 0) {\n            $factors[]\
    \ = $i;\n            if (is_prime($n / $i)) {\n                $factors[] = $n\
    \ / $i;\n                break;\n            }\n        }\n    }\n    return max($factors);\n\
    }\n\nassert(largest_prime_factor(13195) == 29);\nassert(largest_prime_factor(2048)\
    \ == 2);\n\necho largest_prime_factor(600851475143) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpuq6cy4l2.php:12\nStack trace:\n#0 /tmp/tmpuq6cy4l2.php(21): largest_prime_factor(13195)\n\
    #1 {main}\n  thrown in /tmp/tmpuq6cy4l2.php on line 12\n"
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $i = floor(sqrt($n));\n    while\
    \ ($i > 0) {\n        if ($n % $i == 0) {\n            if (is_prime($i)) return\
    \ $i;\n        }\n        $i--;\n    }\n}\n\nfunction candidate(...$args) {\n\
    \    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63)\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !==\
    \ 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !==\
    \ 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpgoxquyt_.php:11\nStack trace:\n#0 /tmp/tmpgoxquyt_.php(18): largest_prime_factor(15)\n\
    #1 /tmp/tmpgoxquyt_.php(22): candidate(15)\n#2 /tmp/tmpgoxquyt_.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmpgoxquyt_.php on line 11\n"
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $i = floor(sqrt($n));\n    while\
    \ ($i > 1) {\n        if ($n % $i == 0) {\n            if (is_prime($i)) {\n \
    \               return $i;\n            }\n        }\n        $i--;\n    }\n}\n\
    function candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpozyvit8u.php:11\nStack trace:\n#0 /tmp/tmpozyvit8u.php(19): largest_prime_factor(15)\n\
    #1 /tmp/tmpozyvit8u.php(23): candidate(15)\n#2 /tmp/tmpozyvit8u.php(30): test()\n\
    #3 {main}\n  thrown in /tmp/tmpozyvit8u.php on line 11\n"
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $i = 2;\n  while ($i <= $n) {\n \
    \   if ($n % $i == 0) {\n      $n /= $i;\n    } else {\n      $i++;\n    }\n \
    \ }\n  return $i;\n}\n\necho largest_prime_factor(13195).\"\\n\";\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '29

    '
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    // write your code here\n}\n\n\
    function candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxlepjqbb.php:16\n\
    Stack trace:\n#0 /tmp/tmpxlepjqbb.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpxlepjqbb.php\
    \ on line 16\n"
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i <= $n) {\n\
    \        if (is_prime($i) && $n % $i == 0) {\n            $n /= $i;\n        }\
    \ else {\n            $i++;\n        }\n    }\n    return $i;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp1lcztc7_.php:10\nStack trace:\n#0 /tmp/tmp1lcztc7_.php(20): largest_prime_factor(15)\n\
    #1 /tmp/tmp1lcztc7_.php(24): candidate(15)\n#2 /tmp/tmp1lcztc7_.php(31): test()\n\
    #3 {main}\n  thrown in /tmp/tmp1lcztc7_.php on line 10\n"
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $p = 2;\n    while ($n > 1) {\n\
    \        while ($n % $p == 0) {\n            $n /= $p;\n        }\n        $p++;\n\
    \    }\n    return $p - 1;\n}\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  for ($i = 2; $i <= $n; $i++) {\n\
    \    if ($n % $i == 0) {\n      $n /= $i;\n      $i = 1;\n    }\n  }\n  return\
    \ $n;\n}\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvekihaw_.php:21\n\
    Stack trace:\n#0 /tmp/tmpvekihaw_.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpvekihaw_.php\
    \ on line 21\n"
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $i = 2;\n  while ($i < $n) {\n  \
    \  while ($n % $i == 0) {\n      $n /= $i;\n    }\n    $i++;\n  }\n  return $n;\n\
    }\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsmeubuq5.php:24\n\
    Stack trace:\n#0 /tmp/tmpsmeubuq5.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpsmeubuq5.php\
    \ on line 24\n"
  timestamp: 1660029132
- exit_code: -1
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $x = $n;\n    $factors = [];\n\
    \    $isPrime = function($n) use (&$isPrime) {\n        if ($n == 2) return true;\n\
    \        $sqrt = sqrt($n);\n        for ($i = 2; $i <= $sqrt; $i++) {\n      \
    \      if ($n % $i == 0) return false;\n        }\n        return true;\n    };\n\
    \    while ($x > 1) {\n        $sqrt = sqrt($x);\n        for ($i = 2; $i <= $sqrt;\
    \ $i++) {\n            if ($x % $i == 0) {\n                if ($isPrime($i))\
    \ {\n                    $factors[] = $i;\n                    $x /= $i;\n   \
    \                 break;\n                }\n            }\n        }\n    }\n\
    \    return $factors[count($factors) - 1];\n}\necho largest_prime_factor(600851475143);\n\
    function candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660029137
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    if ($n < 2) return false;\n   \
    \ $factor = 2;\n    while ($n % $factor != 0) {\n        $factor++;\n    }\n \
    \   if ($n == $factor) return $n;\n    $div = $n / $factor;\n    return largest_prime_factor($div);\n\
    }\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029132
- exit_code: -1
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $factor = 2;\n  $n = $n / $factor;\n\
    \  while ($n != 1) {\n    if ($n % $factor == 0) {\n      $n = $n / $factor;\n\
    \    } else {\n      $factor += 1;\n    }\n  }\n  return $factor;\n}\necho \"\
    Largest prime factor of 13195: \" . largest_prime_factor(13195) . \"\\n\";\necho\
    \ \"Largest prime factor of 2048: \" . largest_prime_factor(2048) . \"\\n\";\n\
    function candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: '

    Deprecated: Implicit conversion from float 6597.5 to int loses precision in /tmp/tmpww8gts5s.php
    on line 11


    Deprecated: Implicit conversion from float 6597.5 to int loses precision in /tmp/tmpww8gts5s.php
    on line 11


    Deprecated: Implicit conversion from float 2199.1666666666665 to int loses precision
    in /tmp/tmpww8gts5s.php on line 11


    Deprecated: Implicit conversion from float 733.0555555555555 to int loses precision
    in /tmp/tmpww8gts5s.php on line 11


    Deprecated: Implicit conversion from float 733.0555555555555 to int loses precision
    in /tmp/tmpww8gts5s.php on line 11


    Deprecated: Implicit conversion from float 733.0555555555555 to int loses precision
    in /tmp/tmpww8gts5s.php on line 11


    Deprecated: Implicit conversion from float 733.0555555555555 to int loses precision
    in /tmp/tmpww8gts5s.php on line 11


    Deprecated: Implicit conversion from float 733.0555555555555 to int loses precision
    in /tmp/tmpww8gts5s.php on line 11


    Deprecated: Implicit conversion from float 733.0555555555555 to int loses precision
    in /tmp/tmpww8gts5s.php on line 11


    Deprecated: Implicit conversion from float 733.0555555555555 to int loses precision
    in /tmp/tmpww8gts5s.php on line 11


    Deprecated: Implicit conversion from float 733.0555555555555 to int loses precision
    in /tmp/tmpww8gts5s.php on line 11


    Deprecated: Implicit conversion from float 733.0555555555555 to int loses precision
    in /tmp/tmpww8gts5s.php on line 11


    Deprecated: Implicit conversion from float 733.0555555555555 to int loses precision
    in /tmp/tmpww8gts5s.php on line 11


    Deprecated: Implicit conversion from float 733.0555555555555 to int loses precision
    in /tmp/tmpww8gts5s.php on line 11


    Deprecated: Implicit conversion from float 733.0555555555555 to int loses precision
    in /tmp/tmpww8gts5s.php on line 11


    Deprecated: Implicit conversion from float 733.0555555555555 to int loses precision
    in /tmp/tmpww8gts5s.php on line 11


    Deprecated: Implicit conversion from float 733.0555555555555 to int loses precision
    in /tmp/tmpww8gts5s.php on line 11


    Deprecated: Implicit convers'
  timestamp: 1660029137
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $factors = [];\n    $fac = 2;\n\
    \    while ($n != 1) {\n        while ($n % $fac == 0) {\n            $factors[]\
    \ = $fac;\n            $n /= $fac;\n        }\n        $fac++;\n    }\n    return\
    \ max($factors);\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    for ($i = 2; $i <= floor(sqrt($n));\
    \ $i++) {\n        if ($n % $i == 0) {\n            return max(largest_prime_factor($n\
    \ / $i), largest_prime_factor($i));\n        }\n    }\n    return $n;\n}\n\nfunction\
    \ candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    //Return the last prime factor\n\
    \    for ($i = 2; $i < $n; $i++) {\n        if ($n % $i == 0) {\n            return\
    \ largest_prime_factor($n / $i);\n        }\n    }\n    return $n;\n}\n\necho\
    \ largest_prime_factor(2048);\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '2'
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i <= $n) {\n\
    \        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n      \
    \      $i++;\n        }\n    }\n    return $i;\n}\n\necho largest_prime_factor(13195).\"\
    \\n\";\necho largest_prime_factor(2048).\"\\n\";\necho largest_prime_factor(600851475143).\"\
    \\n\";\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '29

    2

    6857

    '
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $prime_factors = array();\n   \
    \ for ($i = 2; $i <= $n; $i++) {\n        while ($n % $i == 0) {\n           \
    \ $prime_factors[] = $i;\n            $n /= $i;\n        }\n    }\n    return\
    \ max($prime_factors);\n}\necho \"Largest prime factor of 13195: \" . largest_prime_factor(13195)\
    \ . \"\\n\";\necho \"Largest prime factor of 2048: \" . largest_prime_factor(2048)\
    \ . \"\\n\";\necho \"Largest prime factor of 600851475143: \" . largest_prime_factor(600851475143)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Largest prime factor of 13195: 29

    Largest prime factor of 2048: 2

    Largest prime factor of 600851475143: 6857

    '
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    // $primes = array(2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97);\n    $primes = array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127,\
    \ 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211,\
    \ 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307,\
    \ 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401,\
    \ 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499,\
    \ 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607,\
    \ 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709,\
    \ 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823,\
    \ 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937,\
    \ 941, 947, 953, 967, 971, 977, 983, 991, 997);\n    $largest = 1;\n    for ($i\
    \ = 0; $i < count($primes); $i++) {\n        if\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "(" in /tmp/tmptikfdn3q.php
    on line 13

    '
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $i = 2;\n    $factor = 1;\n   \
    \ while ($i <= $n / $i) {\n        if ($n % $i == 0) {\n            $factor =\
    \ $i;\n            $n /= $i;\n        } else {\n            $i++;\n        }\n\
    \    }\n    if ($n > 1) {\n        $factor = $n;\n    }\n    return $factor;\n\
    }\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $factors = [];\n    // Try dividing\
    \ by 2 and odd numbers up to sqrt(n).\n    for ($divisor = 2; $divisor <= sqrt($n);\
    \ $divisor++) {\n        while ($n % $divisor == 0) {\n            $factors[]\
    \ = $divisor;\n            $n /= $divisor;\n        }\n    }\n    if ($n > 1)\
    \ {\n        $factors[] = $n;\n    }\n    // Return the largest factor.\n    return\
    \ max($factors);\n}\nlargest_prime_factor(13195);\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  // Implement this function.\n}\n\n\
    function candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxa4lor8o.php:16\n\
    Stack trace:\n#0 /tmp/tmpxa4lor8o.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpxa4lor8o.php\
    \ on line 16\n"
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  if ($n == 2) return 2;\n  if ($n\
    \ == 3) return 3;\n  if ($n % 2 == 0) return 2;\n  if ($n % 3 == 0) return 3;\n\
    \  $p = 5;\n  while ($p * $p <= $n) {\n    if ($n % $p == 0) return $p;\n    if\
    \ ($n % ($p + 2) == 0) return $p + 2;\n    $p += 6;\n  }\n  return $n;\n}\necho\
    \ largest_prime_factor(600851475143) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "71\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpib_42w3a.php:26\n\
    Stack trace:\n#0 /tmp/tmpib_42w3a.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpib_42w3a.php\
    \ on line 26\n"
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $factor = 2;\n    while ($n !=\
    \ 1) {\n        while ($n % $factor == 0) {\n            $n /= $factor;\n    \
    \    }\n        $factor++;\n    }\n    return $factor - 1;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $i = 2;\n    $limit = ceil(sqrt($n));\n\
    \    while ($i <= $limit) {\n        if ($n % $i == 0) {\n            $n /= $i;\n\
    \            $limit = ceil(sqrt($n));\n        } else {\n            $i++;\n \
    \       }\n    }\n    return $n;\n}\n\n$input = isset($argv[1]) ? $argv[1] : 1000;\n\
    $start = microtime(true);\n$result = largest_prime_factor($input);\n$end = microtime(true);\n\
    \nprintf(\"The largest prime factor of %d is %d.\\n\", $input, $result);\nprintf(\"\
    Elapsed time: %f sec.\\n\", $end - $start);\nfunction candidate(...$args) {\n\
    \    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63)\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !==\
    \ 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !==\
    \ 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'The largest prime factor of 1000 is 5.

    Elapsed time: 0.000016 sec.

    '
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $factors = [];\n  $prime_factors\
    \ = [];\n  for ($i = 1; $i <= sqrt($n); $i++) {\n    if ($n % $i == 0) {\n   \
    \   $factors[] = $i;\n      $factors[] = $n / $i;\n    }\n  }\n  foreach ($factors\
    \ as $factor) {\n    $is_prime = true;\n    if ($factor == 1) {\n      $is_prime\
    \ = false;\n    }\n    for ($i = 2; $i <= sqrt($factor); $i++) {\n      if ($factor\
    \ % $i == 0) {\n        $is_prime = false;\n        break;\n      }\n    }\n \
    \   if ($is_prime) {\n      $prime_factors[] = $factor;\n    }\n  }\n  return\
    \ max($prime_factors);\n}\necho \"largest_prime_factor(13195): \" . largest_prime_factor(13195)\
    \ . \"\\n\";\necho \"largest_prime_factor(2048): \" . largest_prime_factor(2048)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'largest_prime_factor(13195): 29

    largest_prime_factor(2048): 2

    '
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $i = 1;\n    $factors = [];\n \
    \   while ($i < $n) {\n        $i++;\n        if ($n % $i == 0) {\n          \
    \  $factors[] = $i;\n        }\n    }\n    $divisors = [];\n    foreach ($factors\
    \ as $factor) {\n        $k = 1;\n        while ($k < $factor) {\n           \
    \ $k++;\n            if ($factor % $k == 0) {\n                $divisors[] = $k;\n\
    \            }\n        }\n    }\n    $prime_factors = array_diff($factors, $divisors);\n\
    \    return max($prime_factors);\n}\nfunction candidate(...$args) {\n    return\
    \ largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(15)\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !== 7)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught ValueError: max(): Argument #1 ($value) must contain\
    \ at least one element in /tmp/tmp3sptypjm.php:27\nStack trace:\n#0 /tmp/tmp3sptypjm.php(27):\
    \ max(Array)\n#1 /tmp/tmp3sptypjm.php(30): largest_prime_factor(15)\n#2 /tmp/tmp3sptypjm.php(34):\
    \ candidate(15)\n#3 /tmp/tmp3sptypjm.php(41): test()\n#4 {main}\n  thrown in /tmp/tmp3sptypjm.php\
    \ on line 27\n"
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $prime_factors = prime_factors($n);\n\
    \    return max($prime_factors);\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(15)\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !== 7)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function prime_factors()\
    \ in /tmp/tmp4ecte1po.php:8\nStack trace:\n#0 /tmp/tmp4ecte1po.php(13): largest_prime_factor(15)\n\
    #1 /tmp/tmp4ecte1po.php(17): candidate(15)\n#2 /tmp/tmp4ecte1po.php(24): test()\n\
    #3 {main}\n  thrown in /tmp/tmp4ecte1po.php on line 8\n"
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $prime = 1;\n  $prime_factor = 2;\n\
    \  while ($n > 1) {\n    while ($n % $prime_factor == 0) {\n      $prime = $prime_factor;\n\
    \      $n /= $prime_factor;\n    }\n    $prime_factor++;\n  }\n  return $prime;\n\
    }\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $primes = array();\n    while ($n\
    \ % 2 == 0) {\n        $primes[] = 2;\n        $n /= 2;\n    }\n    $p = 3;\n\
    \    while ($n != 1) {\n        while ($n % $p == 0) {\n            $primes[]\
    \ = $p;\n            $n /= $p;\n        }\n        $p += 2;\n    }\n    return\
    \ $primes[count($primes) - 1];\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(15)\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !== 7)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $factor = 2;\n    while ($n > 1)\
    \ {\n        if ($n % $factor == 0) {\n            $n /= $factor;\n        } else\
    \ {\n            $factor++;\n        }\n    }\n    return $factor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $lpf = null;\n    $divisor = 2;\n\
    \    while ($n > 1) {\n        if (is_prime($divisor)) {\n            if ($n %\
    \ $divisor == 0) {\n                $lpf = $divisor;\n                $n /= $divisor;\n\
    \            } else {\n                $divisor++;\n            }\n        } else\
    \ {\n            $divisor++;\n        }\n    }\n    return $lpf;\n}\n\nfunction\
    \ candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpg1_zpu_y.php:11\nStack trace:\n#0 /tmp/tmpg1_zpu_y.php(26): largest_prime_factor(15)\n\
    #1 /tmp/tmpg1_zpu_y.php(30): candidate(15)\n#2 /tmp/tmpg1_zpu_y.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmpg1_zpu_y.php on line 11\n"
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $largest_factor = 0;\n    for ($factor\
    \ = 1; $factor < $n; $factor++) {\n        if ($n % $factor == 0) {\n        \
    \    $largest_factor = $factor;\n        }\n    }\n    return $largest_factor;\n\
    }\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt3um3ukm.php:23\n\
    Stack trace:\n#0 /tmp/tmpt3um3ukm.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpt3um3ukm.php\
    \ on line 23\n"
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $factors = prime_factors($n);\n \
    \ return array_pop($factors);\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(15)\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !== 7)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function prime_factors()\
    \ in /tmp/tmp_z_6dd0s.php:8\nStack trace:\n#0 /tmp/tmp_z_6dd0s.php(13): largest_prime_factor(15)\n\
    #1 /tmp/tmp_z_6dd0s.php(17): candidate(15)\n#2 /tmp/tmp_z_6dd0s.php(24): test()\n\
    #3 {main}\n  thrown in /tmp/tmp_z_6dd0s.php on line 8\n"
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <=\
    \ $n) {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n\
    \            $i++;\n        }\n    }\n    return $n;\n}\n\necho largest_prime_factor(15),\
    \ \"\\n\";\necho largest_prime_factor(13195), \"\\n\";\necho largest_prime_factor(2048),\
    \ \"\\n\";\necho largest_prime_factor(600851475143), \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '5

    29

    2

    6857

    '
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $largest = 1;\n    $i = 2;\n  \
    \  while ($i <= $n) {\n        while ($n % $i == 0) {\n            $largest =\
    \ $i;\n            $n /= $i;\n        }\n        $i++;\n    }\n    return $largest;\n\
    }\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  if($n <= 1) {\n    return \"ERROR:\
    \ number must be greater than 1\";\n  }\n  for($i = 2; $i <= $n; $i++) {\n   \
    \ if($n % $i == 0) {\n      $n /= $i;\n      $i--;\n    }\n  }\n  return $i;\n\
    }\necho largest_prime_factor(2048);\nfunction candidate(...$args) {\n    return\
    \ largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(15)\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !== 7)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '2'
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  // 2 is the smallest prime number\n\
    \  if ($n < 2) return;\n  $n2 = $n;\n  $largest = 1;\n  $next_prime = 2;\n  while\
    \ ($n2 > 1) {\n    if ($n2 % $next_prime == 0) {\n      $n2 /= $next_prime;\n\
    \      $largest = $next_prime;\n    } else {\n      $next_prime = next_prime($next_prime);\n\
    \    }\n  }\n  return $largest;\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(15)\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !== 7)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function next_prime()\
    \ in /tmp/tmp98g_9qvz.php:18\nStack trace:\n#0 /tmp/tmp98g_9qvz.php(25): largest_prime_factor(15)\n\
    #1 /tmp/tmp98g_9qvz.php(29): candidate(15)\n#2 /tmp/tmp98g_9qvz.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmp98g_9qvz.php on line 18\n"
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $largest_prime_factor = 1;\n  \
    \  $divisor = 2;\n    while ($n != 1) {\n        if ($n % $divisor == 0) {\n \
    \           $largest_prime_factor = $divisor;\n            $n /= $divisor;\n \
    \       } else {\n            $divisor++;\n        }\n    }\n    return $largest_prime_factor;\n\
    }\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $largest_factor = 1;\n    $factor\
    \ = 2;\n    while ($n > 1) {\n        if ($n % $factor == 0) {\n            $largest_factor\
    \ = $factor;\n            $n /= $factor;\n            $factor = 2;\n        }\
    \ else {\n            $factor++;\n        }\n    }\n    return $largest_factor;\n\
    }\necho largest_prime_factor(600851475143);\nfunction candidate(...$args) {\n\
    \    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63)\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !==\
    \ 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !==\
    \ 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '6857'
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    // Because $n > 1, the first factor\
    \ will always be 2.\n    $prime = 2;\n    while ($n > 1) {\n        if ($n % $prime\
    \ === 0) {\n            $n /= $prime;\n        } else {\n            $prime +=\
    \ 1;\n        }\n    }\n    return $prime;\n}\nfunction candidate(...$args) {\n\
    \    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63)\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !==\
    \ 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !==\
    \ 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $prime_factors = array();\n  $i =\
    \ 2;\n  while ($n > 1) {\n    if ($n % $i == 0) {\n      $prime_factors[] = $i;\n\
    \      $n /= $i;\n    } else {\n      $i++;\n    }\n  }\n  $answer = array_pop($prime_factors);\n\
    \  return $answer;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i <= $n) {\n\
    \        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n      \
    \      $i++;\n        }\n    }\n    return $i;\n}\n\necho largest_prime_factor(600851475143);\n\
    function candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '6857'
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <=\
    \ $n) {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n\
    \            $i++;\n        }\n    }\n    return $n;\n}\n\necho largest_prime_factor(600851475143);\n\
    function candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '6857'
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $i = 2;\n  while ($i <= $n) {\n \
    \   if ($n % $i == 0) {\n      $n /= $i;\n    } else {\n      $i++;\n    }\n \
    \ }\n  return $i;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  // Your code here\n}\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjsuanf46.php:15\n\
    Stack trace:\n#0 /tmp/tmpjsuanf46.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpjsuanf46.php\
    \ on line 15\n"
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $pfs = factor($n);\n    return\
    \ end($pfs);\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factor() in /tmp/tmpf38kj7ns.php:8\n\
    Stack trace:\n#0 /tmp/tmpf38kj7ns.php(13): largest_prime_factor(15)\n#1 /tmp/tmpf38kj7ns.php(17):\
    \ candidate(15)\n#2 /tmp/tmpf38kj7ns.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpf38kj7ns.php\
    \ on line 8\n"
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $factor = $n;\n    // If the number\
    \ is divisible by 2 then we should divide by 2.\n    while ($factor % 2 == 0)\
    \ {\n        $factor = $factor / 2;\n    }\n    $divisor = 3;\n    // If a number\
    \ is divisible by another number, then one of the factors\n    // of that number\
    \ is at most its square root.\n    while ($divisor <= floor(sqrt($factor))) {\n\
    \        if ($factor % $divisor == 0) {\n            $factor = $factor / $divisor;\n\
    \        } else {\n            $divisor += 2;\n        }\n    }\n    return $factor;\n\
    }\necho largest_prime_factor(13195).\"\\n\";\necho largest_prime_factor(2048).\"\
    \\n\";\necho largest_prime_factor(600851475143).\"\\n\";\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '29

    1

    6857

    '
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $prime_factor = 2;\n\n    while\
    \ ($n > $prime_factor) {\n        if ($n % $prime_factor == 0) {\n           \
    \ $n /= $prime_factor;\n        } else {\n            $prime_factor++;\n     \
    \   }\n    }\n\n    return $prime_factor;\n}\n\necho largest_prime_factor(2048);\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '2

    '
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $factor = 2;\n    while ($n > 1)\
    \ {\n        if ($n % $factor == 0) {\n            $n /= $factor;\n        } else\
    \ {\n            $factor += 1;\n        }\n    }\n    return $factor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $i = 1;\n    $last_prime = 1;\n\
    \    while ($i < $n) {\n        $i++;\n        if ($n % $i != 0) {\n         \
    \   continue;\n        }\n        $last_prime = $i;\n        $n = $n / $i;\n \
    \   }\n    return $last_prime;\n}\n\necho largest_prime_factor(172073) . \"\\\
    n\";\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15643\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpffxpur_b.php:28\n\
    Stack trace:\n#0 /tmp/tmpffxpur_b.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpffxpur_b.php\
    \ on line 28\n"
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $min = 1;\n\n    for ($i = $n -\
    \ 1; $i > $min; $i--) {\n        if ($n % $i == 0) {\n            $min = $i;\n\
    \            break;\n        }\n    }\n\n    for ($i = $min - 1; $i > 1; $i--)\
    \ {\n        if ($min % $i == 0) {\n            return largest_prime_factor($min);\n\
    \        }\n    }\n\n    return $min;\n}\n\nfunction candidate(...$args) {\n \
    \   return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63)\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !==\
    \ 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !==\
    \ 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <=\
    \ $n) {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n\
    \            $i++;\n        }\n    }\n    return $n;\n}\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $d = 2;\n    while ($n > 1) {\n\
    \        while ($n % $d == 0) {\n            $n /= $d;\n        }\n        $d\
    \ += 1;\n    }\n    return $d;\n}\n\n$time_start = microtime(true);\n\necho largest_prime_factor(600851475143).\"\
    \\n\";\n\n$time_end = microtime(true);\n$time = $time_end - $time_start;\necho\
    \ \"Completed in {$time} seconds.\\n\";\nfunction candidate(...$args) {\n    return\
    \ largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(15)\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !== 7)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "6858\nCompleted in 0.00020503997802734 seconds.\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpttqvytju.php:30\nStack trace:\n#0 /tmp/tmpttqvytju.php(37):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpttqvytju.php on line 30\n"
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    // Go down factors of n to find\
    \ the largest prime factor.\n    $largest_factor = 1;\n    $factor = 2;\n    while\
    \ ($factor <= $n) {\n        // If factor divides n, find the next factor, and\
    \ set n to the quotient.\n        if ($n % $factor == 0) {\n            $largest_factor\
    \ = $factor;\n            $n /= $factor;\n        } else {\n            // If\
    \ the next number is prime, then go to it. Otherwise, go to the\n            //\
    \ next prime.\n            $factor = (is_prime($factor + 1)) ? $factor + 1 : next_prime($factor);\n\
    \        }\n    }\n    return $largest_factor;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp5aoikfuw.php:19\nStack trace:\n#0 /tmp/tmp5aoikfuw.php(26): largest_prime_factor(15)\n\
    #1 /tmp/tmp5aoikfuw.php(30): candidate(15)\n#2 /tmp/tmp5aoikfuw.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmp5aoikfuw.php on line 19\n"
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $factor = 2;\n    while ($n > 1)\
    \ {\n        if ($n % $factor === 0) {\n            $n /= $factor;\n        }\
    \ else {\n            $factor += 1;\n        }\n    }\n    return $factor;\n}\n\
    \nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $largest = 1;\n    $last = floor(sqrt($n));\n\
    \    for ($i = 2; $i <= $last; $i++) {\n        if ($n % $i == 0) {\n        \
    \    $largest = $i;\n            do {\n                $n /= $i;\n           \
    \ } while ($n % $i == 0);\n            $last = floor(sqrt($n));\n        }\n \
    \   }\n    return $n > 1 ? $n : $largest;\n}\n\nfunction candidate(...$args) {\n\
    \    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63)\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !==\
    \ 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !==\
    \ 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $i = 2;\n    $result = 1;\n   \
    \ while ($i < $n) {\n        if (is_prime($i) && $n % $i == 0) {\n           \
    \ $result = $i;\n        }\n        $i++;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpsquxsyn8.php:11\nStack trace:\n#0 /tmp/tmpsquxsyn8.php(20): largest_prime_factor(15)\n\
    #1 /tmp/tmpsquxsyn8.php(24): candidate(15)\n#2 /tmp/tmpsquxsyn8.php(31): test()\n\
    #3 {main}\n  thrown in /tmp/tmpsquxsyn8.php on line 11\n"
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $max = floor(sqrt($n));\n    for\
    \ ($i = $max; $i > 1; $i--) {\n        if ($n % $i == 0) {\n            return\
    \ largest_prime_factor($n / $i);\n        }\n    }\n    return $n;\n}\n\nif (count($argv)\
    \ > 1) {\n    print_r(largest_prime_factor($argv[1]));\n}\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxouu9smy.php:25\n\
    Stack trace:\n#0 /tmp/tmpxouu9smy.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpxouu9smy.php\
    \ on line 25\n"
  timestamp: 1660029132
- exit_code: -1
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  if ($n == 1) return 0;\n  if ($n\
    \ % 2 == 0) {\n    $max_factor = 2;\n    $n /= 2;\n    while ($n % 2 == 0) {\n\
    \      $n /= 2;\n    }\n  } else {\n    $max_factor = 1;\n  }\n  $p = 3;\n  $max_prime\
    \ = sqrt($n);\n  while ($n > 1 && $p <= $max_prime) {\n    if ($n % $p == 0) {\n\
    \      $max_factor = $p;\n      $n /= $p;\n      while ($n % $p == 0) {\n    \
    \    $n /= $p;\n      }\n      $max_prime = sqrt($n);\n    }\n    $p += 2;\n \
    \ }\n  if ($n == 1) {\n    return $max_factor;\n  } else {\n    return $n;\n \
    \ }\n}\n\n$n = (int)$argv[1];\n$result = largest_prime_factor($n);\necho $result\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: '

    Warning: Undefined array key 1 in /tmp/tmpwkrwe1_i.php on line 38

    '
  timestamp: 1660029137
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <=\
    \ $n) {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n\
    \            $i++;\n        }\n    }\n    return $n;\n}\n\necho \"Answer is: \"\
    \ . largest_prime_factor(600851475143) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Answer is: 6857

    '
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    for ($i = 2; $i < $n; $i++) {\n\
    \        if ($n % $i == 0) {\n            $n /= $i;\n            $i--;\n     \
    \   }\n    }\n    return $n;\n}\n\necho largest_prime_factor(600851475143);\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '6857

    '
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  // TODO: Implement this function.\n\
    \  $largest = $n;\n  $i = 2;\n  while ($i < $largest) {\n    if ($largest % $i\
    \ == 0) {\n      $largest = $largest / $i;\n    }\n    $i++;\n  }\n  return $largest;\n\
    }\n\nlargest_prime_factor(13195);\n\nfunction candidate(...$args) {\n    return\
    \ largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(15)\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !== 7)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpenlif5ws.php:28\n\
    Stack trace:\n#0 /tmp/tmpenlif5ws.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpenlif5ws.php\
    \ on line 28\n"
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $divisor = 2;\n    while($n > 1)\
    \ {\n        if($n % $divisor == 0) {\n            $n /= $divisor;\n        }\
    \ else {\n            $divisor++;\n        }\n    }\n    return $divisor;\n}\n\
    \necho largest_prime_factor(600851475143) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '6857

    '
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $prime_factors = [];\n    $p =\
    \ 2;\n    while ($n > 1) {\n        while ($n % $p == 0) {\n            $prime_factors[]\
    \ = $p;\n            $n /= $p;\n        }\n        $p++;\n    }\n    return $prime_factors[count($prime_factors)\
    \ - 1];\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <=\
    \ $n) {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n\
    \            $i++;\n        }\n    }\n    return $n;\n}\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $result = 1;\n    // Get all the\
    \ prime factors of n.\n    $factors = prime_factors($n);\n    // Return the largest\
    \ of them.\n    return array_pop($factors);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function prime_factors()\
    \ in /tmp/tmpbot58d6x.php:10\nStack trace:\n#0 /tmp/tmpbot58d6x.php(16): largest_prime_factor(15)\n\
    #1 /tmp/tmpbot58d6x.php(20): candidate(15)\n#2 /tmp/tmpbot58d6x.php(27): test()\n\
    #3 {main}\n  thrown in /tmp/tmpbot58d6x.php on line 10\n"
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    if (is_prime($n)) {\n        return\
    \ $n;\n    }\n    $mid = floor(sqrt($n));\n    for ($i = 2; $i <= $mid; $i++)\
    \ {\n        if ($n % $i == 0) {\n            return largest_prime_factor($n /\
    \ $i);\n        }\n    }\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp60m0tpt3.php:8\nStack trace:\n#0 /tmp/tmp60m0tpt3.php(20): largest_prime_factor(15)\n\
    #1 /tmp/tmp60m0tpt3.php(24): candidate(15)\n#2 /tmp/tmp60m0tpt3.php(31): test()\n\
    #3 {main}\n  thrown in /tmp/tmp60m0tpt3.php on line 8\n"
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $max = 1;\n    for ($i = 2; $i\
    \ < $n; $i++) {\n        if ($n % $i == 0) {\n            $max = $i;\n       \
    \     $n = $n / $i;\n            $i = 1;\n        }\n    }\n    return $max;\n\
    }\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpan7yktfi.php:24\n\
    Stack trace:\n#0 /tmp/tmpan7yktfi.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpan7yktfi.php\
    \ on line 24\n"
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $largest = 1;\n  while ($n % 2 ==\
    \ 0) {\n    $largest = 2;\n    $n /= 2;\n  }\n  $p = 3;\n  while ($n > 1) {\n\
    \    if ($n % $p == 0) {\n      $largest = $p;\n      $n /= $p;\n    } else {\n\
    \      $p += 2;\n    }\n  }\n  return $largest;\n}\n\nvar_dump(largest_prime_factor(13195));\n\
    var_dump(largest_prime_factor(2048));\nfunction candidate(...$args) {\n    return\
    \ largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(15)\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !== 7)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'int(29)

    int(2)

    '
  timestamp: 1660029132
