language: php
name: HumanEval_58_common
results:
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    $uniqueKeys = array_flip(array_unique(array_merge($l1,\
    \ $l2)));\n    // find elements that are not common between both arrays\n    $l1\
    \ = array_diff_key($l1, $uniqueKeys);\n    $l2 = array_diff_key($l2, $uniqueKeys);\n\
    \    // fill the uniqueKeys with the common elements\n    foreach($l1 as $el)\
    \ {\n        if(isset($l2[$el])) {\n            $uniqueKeys[$el] = null;\n   \
    \     }\n    }\n    return array_keys($uniqueKeys);\n}\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqpw6cj2k.php:25\n\
    Stack trace:\n#0 /tmp/tmpqpw6cj2k.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpqpw6cj2k.php\
    \ on line 25\n"
  timestamp: 1659823480
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n  return array_unique(array_intersect($l1, $l2));\n}\nfunction\
    \ candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653,\
    \ 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2,\
    \ 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp52ywnhc_.php:15\n\
    Stack trace:\n#0 /tmp/tmp52ywnhc_.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp52ywnhc_.php\
    \ on line 15\n"
  timestamp: 1659823480
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n\treturn array_values(array_unique(array_intersect($l1,\
    \ $l2)));\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7j2o1z0w.php:16\n\
    Stack trace:\n#0 /tmp/tmp7j2o1z0w.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp7j2o1z0w.php\
    \ on line 16\n"
  timestamp: 1659823480
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n  $out = array();\n  sort($l1);\n  sort($l2);\n  $set1 =\
    \ array_unique($l1);\n  $set2 = array_unique($l2);\n  foreach ($set1 as $i) {\n\
    \    if (in_array($i, $set2)) {\n      $out[] = $i;\n    }\n  }\n  return $out;\n\
    }\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7,\
    \ 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823480
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n  $s = array_intersect($l1, $l2);\n  sort($s);\n  return\
    \ $s;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5,\
    \ 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823480
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n  $result = array();\n  $toFind = array();\n  foreach ($l1\
    \ as $e) {\n    $toFind[$e] = false;\n  }\n  foreach ($l2 as $e) {\n    if (array_key_exists($e,\
    \ $toFind)) {\n      $toFind[$e] = true;\n    }\n  }\n  foreach ($toFind as $k\
    \ => $v) {\n    if ($v === true) {\n      $result[] = $k;\n    }\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpftehe1fe.php:31\n\
    Stack trace:\n#0 /tmp/tmpftehe1fe.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpftehe1fe.php\
    \ on line 31\n"
  timestamp: 1659823480
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    $result = [];\n    foreach ($l1 as $e1) {\n        foreach\
    \ ($l2 as $e2) {\n            if ($e1 == $e2) {\n                $result[] = $e1;\n\
    \            }\n        }\n    }\n    return array_unique($result);\n}\n\nfunction\
    \ candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653,\
    \ 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2,\
    \ 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2t14hg2d.php:24\n\
    Stack trace:\n#0 /tmp/tmp2t14hg2d.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp2t14hg2d.php\
    \ on line 24\n"
  timestamp: 1659823480
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n  sort($l1);\n  sort($l2);\n  $count1 = count($l1);\n  $count2\
    \ = count($l2);\n  $result = array();\n  $i = 0;\n  $j = 0;\n  while ($i < $count1\
    \ && $j < $count2) {\n    if ($l1[$i] == $l2[$j]) {\n      $result[] = $l1[$i];\n\
    \      $i++;\n      $j++;\n    } elseif ($l1[$i] < $l2[$j]) {\n      $i++;\n \
    \   } else {\n      $j++;\n    }\n  }\n  return $result;\n}\nprint_r(common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)));\nprint_r(common(array(5,\
    \ 3, 2, 8), array(3, 2)));\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 5\n    [2] => 653\n)\nArray\n(\n   \
    \ [0] => 2\n    [1] => 3\n)\n"
  timestamp: 1659823480
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n  $result = array();\n  $s1 = array_unique($l1);\n  $s2\
    \ = array_unique($l2);\n  sort($s1);\n  sort($s2);\n  $i = 0;\n  $j = 0;\n  while\
    \ ($i < count($s1) && $j < count($s2)) {\n    if ($s1[$i] == $s2[$j]) {\n    \
    \  $result[] = $s1[$i];\n      $i++;\n      $j++;\n    } else if ($s1[$i] < $s2[$j])\
    \ {\n      $i++;\n    } else {\n      $j++;\n    }\n  }\n  return $result;\n}\n\
    $l1 = array(1, 4, 3, 34, 653, 2, 5);\n$l2 = array(5, 7, 1, 5, 9, 653, 121);\n\
    $l3 = array(5, 3, 2, 8);\n$l4 = array(3, 2);\nprint_r(common($l1, $l2));\nprint_r(common($l3,\
    \ $l4));\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5,\
    \ 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 5\n    [2] => 653\n)\nArray\n(\n   \
    \ [0] => 2\n    [1] => 3\n)\n"
  timestamp: 1659823480
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n\t$result = array();\n\t$iter = function($l1, $l2) use (&$result,\
    \ &$iter) {\n\t\tif (count($l1) === 0 || count($l2) === 0) return;\n\t\t$head\
    \ = array_shift($l1);\n\t\tif (in_array($head, $l2)) $result[] = $head;\n\t\t\
    $iter($l1, $l2);\n\t};\n\t$iter($l1, $l2);\n\treturn array_unique($result);\n\
    }\n\n$l1 = [1, 4, 3, 34, 653, 2, 5];\n$l2 = [5, 7, 1, 5, 9, 653, 121];\nassert(common($l1,\
    \ $l2) === [1, 5, 653]);\n$l1 = [5, 3, 2, 8];\n$l2 = [3, 2];\nassert(common($l1,\
    \ $l2) === [2, 3]);\n\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught AssertionError: assert(common($l1, $l2) === [1,\
    \ 5, 653]) in /tmp/tmpc93htw_q.php:21\nStack trace:\n#0 /tmp/tmpc93htw_q.php(21):\
    \ assert(false, 'assert(common($...')\n#1 {main}\n  thrown in /tmp/tmpc93htw_q.php\
    \ on line 21\n"
  timestamp: 1659823480
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n\t$l1 = array_unique($l1);\n\t$l2 = array_unique($l2);\n\
    \tsort($l1);\n\tsort($l2);\n\treturn array_intersect($l1, $l2);\n}\n\nfunction\
    \ candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653,\
    \ 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2,\
    \ 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8oq7_k84.php:20\n\
    Stack trace:\n#0 /tmp/tmp8oq7_k84.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp8oq7_k84.php\
    \ on line 20\n"
  timestamp: 1659823480
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n  $l1_sorted = $l1;\n  sort($l1_sorted);\n  $l2_sorted =\
    \ $l2;\n  sort($l2_sorted);\n  $i1 = 0;\n  $i2 = 0;\n  $result = array();\n  while\
    \ ($i1 < count($l1_sorted) && $i2 < count($l2_sorted)) {\n    if ($l1_sorted[$i1]\
    \ == $l2_sorted[$i2]) {\n      if (count($result) == 0 || $result[count($result)\
    \ - 1] != $l1_sorted[$i1]) {\n        $result[] = $l1_sorted[$i1];\n      }\n\
    \      $i1++;\n      $i2++;\n    } else if ($l1_sorted[$i1] < $l2_sorted[$i2])\
    \ {\n      $i1++;\n    } else {\n      $i2++;\n    }\n  }\n  return $result;\n\
    }\n\n$failed = false;\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823480
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n  $l1 = array_values(array_unique($l1));\n  $l2 = array_values(array_unique($l2));\n\
    \  $n1 = count($l1);\n  $n2 = count($l2);\n  $i1 = 0;\n  $i2 = 0;\n  $result =\
    \ array();\n  while ($i1 < $n1 && $i2 < $n2) {\n    if ($l1[$i1] == $l2[$i2])\
    \ {\n      $result[] = $l1[$i1];\n      $i1++;\n      $i2++;\n    } else if ($l1[$i1]\
    \ < $l2[$i2]) {\n      $i1++;\n    } else {\n      $i2++;\n    }\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjogvjn7v.php:34\n\
    Stack trace:\n#0 /tmp/tmpjogvjn7v.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpjogvjn7v.php\
    \ on line 34\n"
  timestamp: 1659823480
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n  $set1 = array_flip($l1);\n  $result = array();\n  foreach\
    \ ($l2 as $item) {\n    if (isset($set1[$item])) {\n      $result[] = $item;\n\
    \    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphzjxbd10.php:23\n\
    Stack trace:\n#0 /tmp/tmphzjxbd10.php(29): test()\n#1 {main}\n  thrown in /tmp/tmphzjxbd10.php\
    \ on line 23\n"
  timestamp: 1659823480
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n  $l1 = array_unique($l1);\n  $l2 = array_unique($l2);\n\
    \  sort($l1);\n  sort($l2);\n  $i = 0;\n  $j = 0;\n  $l = array();\n  while ($i\
    \ < count($l1) && $j < count($l2)) {\n    if ($l1[$i] < $l2[$j]) {\n      $i +=\
    \ 1;\n    } else if ($l1[$i] > $l2[$j]) {\n      $j += 1;\n    } else {\n    \
    \  $l[] = $l1[$i];\n      $i += 1;\n      $j += 1;\n    }\n  }\n  return $l;\n\
    }\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7,\
    \ 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823480
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    $common = array();\n    for ($i = 0; $i < count($l1);\
    \ $i++) {\n        for ($j = 0; $j < count($l2); $j++) {\n            if ($l1[$i]\
    \ == $l2[$j]) {\n                $common[] = $l1[$i];\n            }\n       \
    \ }\n    }\n    return $common;\n}\n\nfunction candidate(...$args) {\n    return\
    \ common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps_qw9av8.php:24\n\
    Stack trace:\n#0 /tmp/tmps_qw9av8.php(30): test()\n#1 {main}\n  thrown in /tmp/tmps_qw9av8.php\
    \ on line 24\n"
  timestamp: 1659823480
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    // TODO\n}\n\nfunction candidate(...$args) {\n    return\
    \ common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk54jdyhd.php:16\n\
    Stack trace:\n#0 /tmp/tmpk54jdyhd.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpk54jdyhd.php\
    \ on line 16\n"
  timestamp: 1659823480
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    $list1 = $l1;\n    $list2 = $l2;\n    sort($list1);\n\
    \    sort($list2);\n    $i = 0;\n    $j = 0;\n    $result = array();\n    while\
    \ ($i < count($list1) && $j < count($list2)) {\n        if ($list1[$i] < $list2[$j])\
    \ {\n            $i++;\n        } else if ($list1[$i] > $list2[$j]) {\n      \
    \      $j++;\n        } else {\n            $result[] = $list1[$i];\n        \
    \    $i++;\n            $j++;\n        }\n    }\n    return $result;\n}\n$list1\
    \ = array(5, 3, 2, 8);\n$list2 = array(3, 2);\n\necho \"<pre>\";\nprint_r(common($list1,\
    \ $list2));\necho \"</pre>\";\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => 2\n    [1] => 3\n)\n</pre>"
  timestamp: 1659823480
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    //test_compare_array($l1, $l2);\n    $length = min(count($l1),\
    \ count($l2));\n    $i = 0;\n    $j = 0;\n    $result = array();\n    while ($i\
    \ < $length && $j < $length) {\n        if ($l1[$i] == $l2[$j]) {\n          \
    \  $result[] = $l1[$i];\n            $i++;\n            $j++;\n        } else\
    \ if ($l1[$i] < $l2[$j]) {\n            $i++;\n        } else {\n            $j++;\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvba47zvb.php:32\n\
    Stack trace:\n#0 /tmp/tmpvba47zvb.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpvba47zvb.php\
    \ on line 32\n"
  timestamp: 1659823480
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    $h1 = array_count_values($l1);\n    $h2 = array_count_values($l2);\n\
    \    $ret = array();\n    foreach ($h1 as $key => $value) {\n        if (isset($h2[$key]))\
    \ {\n            array_push($ret, $key);\n        }\n    }\n    sort($ret);\n\
    \    return $ret;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823480
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    return array_values(array_intersect($l1, $l2));\n}\n\
    \nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7,\
    \ 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv5e_987n.php:16\n\
    Stack trace:\n#0 /tmp/tmpv5e_987n.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpv5e_987n.php\
    \ on line 16\n"
  timestamp: 1659978444
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n  $l1 = array_unique($l1);\n  $l2 = array_unique($l2);\n\
    \  sort($l1);\n  sort($l2);\n  $c = [];\n  $i = 0;\n  $j = 0;\n  while ($i < count($l1)\
    \ && $j < count($l2)) {\n    if ($l1[$i] === $l2[$j]) {\n      $c[] = $l1[$i];\n\
    \      $i++;\n      $j++;\n    } else if ($l1[$i] < $l2[$j]) {\n      $i++;\n\
    \    } else {\n      $j++;\n    }\n  }\n  return $c;\n}\n\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978444
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    return array_flip(array_intersect_key($l1,\
    \ $l2));\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp67jqvt9s.php:20\n\
    Stack trace:\n#0 /tmp/tmp67jqvt9s.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp67jqvt9s.php\
    \ on line 20\n"
  timestamp: 1659978444
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    $ret = [];\n    for ($i = 0; $i < count($l1); $i++) {\n        for ($j =\
    \ 0; $j < count($l2); $j++) {\n            if ($l1[$i] == $l2[$j]) {\n       \
    \         $ret[] = $l1[$i];\n            }\n        }\n    }\n    sort($ret);\n\
    \    return $ret;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Warning: Undefined array key 3 in /tmp/tmpuhngd6_d.php on line 13


    Warning: Undefined array key 3 in /tmp/tmpuhngd6_d.php on line 13


    Warning: Undefined array key 3 in /tmp/tmpuhngd6_d.php on line 13


    Warning: Undefined array key 3 in /tmp/tmpuhngd6_d.php on line 13


    Warning: Undefined array key 3 in /tmp/tmpuhngd6_d.php on line 13


    Warning: Undefined array key 3 in /tmp/tmpuhngd6_d.php on line 13


    Warning: Undefined array key 3 in /tmp/tmpuhngd6_d.php on line 13

    '
  timestamp: 1659978444
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    $uniq1 = array_unique($l1);\n    $uniq2 = array_unique($l2);\n\
    \    $common = array();\n    $i = 0;\n    $j = 0;\n    while ($i < count($uniq1)\
    \ && $j < count($uniq2)) {\n        if ($uniq1[$i] == $uniq2[$j]) {\n        \
    \    $common[] = $uniq1[$i];\n            $i++;\n            $j++;\n        }\
    \ else if ($uniq1[$i] < $uniq2[$j]) {\n            $i++;\n        } else {\n \
    \           $j++;\n        }\n    }\n    return $common;\n}\n\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 3 in /tmp/tmp2k1s6ztg.php on line 14\n\n\
    Warning: Undefined array key 3 in /tmp/tmp2k1s6ztg.php on line 18\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp2k1s6ztg.php:32\nStack trace:\n\
    #0 /tmp/tmp2k1s6ztg.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp2k1s6ztg.php\
    \ on line 32\n"
  timestamp: 1659978444
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n\t$s = array_intersect($l1, $l2);\n\tsort($s);\n\treturn\
    \ $s;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5,\
    \ 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978444
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n\t$result = array();\n\t$l1 = array_unique($l1);\n\t$l2\
    \ = array_unique($l2);\n\tforeach ($l1 as $element) {\n\t\tif (in_array($element,\
    \ $l2)) {\n\t\t\t$result[] = $element;\n\t\t}\n\t}\n\treturn $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653,\
    \ 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2,\
    \ 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl3j5n07h.php:24\n\
    Stack trace:\n#0 /tmp/tmpl3j5n07h.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpl3j5n07h.php\
    \ on line 24\n"
  timestamp: 1659978444
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    sort($l1);\n    sort($l2);\n    $temp = array();\n \
    \   $result = array();\n    $last = false;\n    foreach($l1 as $k1 => $v1) {\n\
    \        foreach($l2 as $k2 => $v2) {\n            if ($v1 == $v2) {\n       \
    \         if ($v1 != $last) {\n                    $temp[] = $v1;\n          \
    \          $last = $v1;\n                }\n            }\n        }\n    }\n\
    \    $last = false;\n    foreach($temp as $k => $v) {\n        if ($v != $last)\
    \ {\n            $result[] = $v;\n            $last = $v;\n        }\n    }\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978444
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    $result = [];\n    $l1_copy = $l1;\n    foreach ($l1\
    \ as $value) {\n        if (in_array($value, $l2)) {\n            $result[] =\
    \ $value;\n            unset($l1_copy[array_search($value, $l1_copy)]);\n    \
    \    }\n    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978444
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n  return array_values(array_unique(array_intersect($l1,\
    \ $l2)));\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptdpwpnou.php:16\n\
    Stack trace:\n#0 /tmp/tmptdpwpnou.php(22): test()\n#1 {main}\n  thrown in /tmp/tmptdpwpnou.php\
    \ on line 16\n"
  timestamp: 1659978444
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n  sort($l1);\n  sort($l2);\n  $i = 0;\n  $j = 0;\n  $n1\
    \ = count($l1);\n  $n2 = count($l2);\n  $res = array();\n  while ($i < $n1 &&\
    \ $j < $n2) {\n    if ($l1[$i] == $l2[$j]) {\n      $res[] = $l1[$i];\n      $i++;\n\
    \      $j++;\n    } else if ($l1[$i] < $l2[$j]) {\n      $i++;\n    } else {\n\
    \      $j++;\n    }\n  }\n  return $res;\n}\n\nfunction candidate(...$args) {\n\
    \    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978444
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    $arr = array_unique(array_merge($l1, $l2));\n    foreach\
    \ ($arr as $k => $v) {\n        if (!in_array($v, $l1) || !in_array($v, $l2))\
    \ {\n            unset($arr[$k]);\n        }\n    }\n    sort($arr);\n    return\
    \ $arr;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5,\
    \ 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978444
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n  $c = [];\n  for ($i = 0; $i < count($l1); $i++) {\n  \
    \  for ($j = 0; $j < count($l2); $j++) {\n      if ($l1[$i] == $l2[$j]) {\n  \
    \      $c[] = $l1[$i];\n      }\n    }\n  }\n  sort($c);\n  return array_unique($c);\n\
    }\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7,\
    \ 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9mapowg8.php:25\n\
    Stack trace:\n#0 /tmp/tmp9mapowg8.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp9mapowg8.php\
    \ on line 25\n"
  timestamp: 1659978444
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n\t$list1 = array_unique($l1);\n\t$list2 = array_unique($l2);\n\
    \treturn array_intersect($list1, $list2);\n}\nfunction candidate(...$args) {\n\
    \    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_1vn0a9p.php:17\n\
    Stack trace:\n#0 /tmp/tmp_1vn0a9p.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp_1vn0a9p.php\
    \ on line 17\n"
  timestamp: 1659978444
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    $tempArray = [];\n    foreach ($l1 as $element) {\n\
    \        if (in_array($element, $l2)) {\n            array_push($tempArray, $element);\n\
    \        }\n    }\n    sort($tempArray);\n    return array_unique($tempArray);\n\
    }\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7,\
    \ 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978444
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n  sort($l1);\n  sort($l2);\n  $i = 0;\n  $j = 0;\n  $result\
    \ = array();\n  while ($i < count($l1) && $j < count($l2)) {\n    if ($l1[$i]\
    \ == $l2[$j]) {\n      $result[] = $l1[$i];\n      $i++;\n      $j++;\n    } else\
    \ if ($l1[$i] < $l2[$j]) {\n      $i++;\n    } else {\n      $j++;\n    }\n  }\n\
    \  return $result;\n}\necho json_encode(common(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)));\necho \"\\n\";\necho json_encode(common(array(5,\
    \ 3, 2, 8), array(3, 2)));\necho \"\\n\";\nfunction candidate(...$args) {\n  \
    \  return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[1,5,653]

    [2,3]

    '
  timestamp: 1659978444
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n\t$map = [];\n\t$result = [];\n\t$max = max($l1);\n\t$min\
    \ = min($l2);\n\tforeach ($l1 as $item) {\n\t\tif ($item <= $min) {\n\t\t\tcontinue;\n\
    \t\t}\n\t\t$map[$item] = true;\n\t}\n\tforeach ($l2 as $item) {\n\t\tif ($item\
    \ > $max) {\n\t\t\tbreak;\n\t\t}\n\t\tif (isset($map[$item])) {\n\t\t\t$result[]\
    \ = $item;\n\t\t}\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6v1d_hxq.php:34\n\
    Stack trace:\n#0 /tmp/tmp6v1d_hxq.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp6v1d_hxq.php\
    \ on line 34\n"
  timestamp: 1659978444
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    $res = [];\n    foreach ($l1 as $e) {\n        if (in_array($e,\
    \ $l2)) {\n            $res[] = $e;\n        }\n    }\n    return array_unique($res);\n\
    }\n\necho json_encode(common(\n    array(1, 4, 3, 34, 653, 2, 5),\n    array(5,\
    \ 7, 1, 5, 9, 653, 121)\n));\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "[1,653,5]\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppqz_72e2.php:26\n\
    Stack trace:\n#0 /tmp/tmppqz_72e2.php(32): test()\n#1 {main}\n  thrown in /tmp/tmppqz_72e2.php\
    \ on line 26\n"
  timestamp: 1659978444
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n  $dict = array();\n  foreach ($l1 as $e) {\n    if (!array_key_exists($e,\
    \ $dict)) {\n      $dict[$e] = 1;\n    } else {\n      $dict[$e]++;\n    }\n \
    \ }\n  $result = array();\n  foreach ($l2 as $e) {\n    if (array_key_exists($e,\
    \ $dict) && $dict[$e] > 0) {\n      $result[] = $e;\n      $dict[$e]--;\n    }\n\
    \  }\n  sort($result);\n  return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978444
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n\treturn array_intersect($l1, $l2);\n}\n\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprfmql_vv.php:16\n\
    Stack trace:\n#0 /tmp/tmprfmql_vv.php(22): test()\n#1 {main}\n  thrown in /tmp/tmprfmql_vv.php\
    \ on line 16\n"
  timestamp: 1659978444
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n  $c = array_intersect($l1, $l2);\n  sort($c);\n  return\
    \ $c;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5,\
    \ 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978444
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    return array_unique(array_intersect($l1, $l2));\n}\n\
    \nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7,\
    \ 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4mz9rbbn.php:16\n\
    Stack trace:\n#0 /tmp/tmp4mz9rbbn.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp4mz9rbbn.php\
    \ on line 16\n"
  timestamp: 1659978444
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    $unique1 = array_unique($l1);\n    $unique2 = array_unique($l2);\n\
    \    $common = array();\n    foreach ($unique1 as $value) {\n        if (in_array($value,\
    \ $unique2)) {\n            $common[] = $value;\n        }\n    }\n    return\
    \ $common;\n}\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp81sfr5in.php:23\n\
    Stack trace:\n#0 /tmp/tmp81sfr5in.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp81sfr5in.php\
    \ on line 23\n"
  timestamp: 1659978444
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    return array_values(array_intersect($l1, $l2));\n}\n\
    \nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7,\
    \ 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv5e_987n.php:16\n\
    Stack trace:\n#0 /tmp/tmpv5e_987n.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpv5e_987n.php\
    \ on line 16\n"
  timestamp: 1659978444
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    $r = array();\n    $i = 0;\n    $j = 0;\n    while ($i\
    \ < count($l1) && $j < count($l2)) {\n        if ($l1[$i] == $l2[$j]) {\n    \
    \        if (empty($r) || end($r) != $l1[$i]) {\n                $r[] = $l1[$i];\n\
    \            }\n            $i++;\n            $j++;\n        } else if ($l1[$i]\
    \ < $l2[$j]) {\n            $i++;\n        } else {\n            $j++;\n     \
    \   }\n    }\n    return $r;\n}\n\nvar_dump(common(array(1, 4, 3, 34, 653, 2,\
    \ 5), array(5, 7, 1, 5, 9, 653, 121)));\nvar_dump(common(array(5, 3, 2, 8), array(3,\
    \ 2)));\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7,\
    \ 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(1) {\n  [0]=>\n  int(653)\n}\narray(0) {\n}\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpbl6m5e0c.php:34\nStack trace:\n#0 /tmp/tmpbl6m5e0c.php(40):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpbl6m5e0c.php on line 34\n"
  timestamp: 1659978444
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    $result = [];\n    foreach ($l1 as $e1) {\n        if\
    \ (in_array($e1, $l2)) {\n            $result[] = $e1;\n        }\n    }\n   \
    \ sort($result);\n    return array_unique($result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978444
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    $res = [];\n    $l1 = array_unique($l1);\n    $l2 =\
    \ array_unique($l2);\n    sort($l1);\n    sort($l2);\n    for ($i = 0; $i < count($l1);\
    \ $i++) {\n        for ($j = 0; $j < count($l2); $j++) {\n            if ($l1[$i]\
    \ == $l2[$j]) {\n                $res[] = $l1[$i];\n            }\n        }\n\
    \    }\n    return $res;\n}\necho \"common(array(1, 4, 3, 34, 653, 2, 5), array(5,\
    \ 7, 1, 5, 9, 653, 121))\\n\";\nprint_r(common(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)));\necho \"\\n\";\necho \"common(array(5, 3,\
    \ 2, 8), array(3, 2))\\n\";\nprint_r(common(array(5, 3, 2, 8), array(3, 2)));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n\
    Array\n(\n    [0] => 1\n    [1] => 5\n    [2] => 653\n)\n\ncommon(array(5, 3,\
    \ 2, 8), array(3, 2))\nArray\n(\n    [0] => 2\n    [1] => 3\n)\n\n"
  timestamp: 1659978444
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n  $c = array_intersect($l1, $l2);\n  sort($c);\n  return\
    \ $c;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5,\
    \ 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978444
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    $result = [];\n    foreach ($l1 as $e1) {\n        foreach\
    \ ($l2 as $e2) {\n            if ($e1 == $e2) {\n                $result[] = $e1;\n\
    \            }\n        }\n    }\n    sort($result);\n    return array_unique($result);\n\
    }\n\n$l1 = [5, 3, 2, 8];\n$l2 = [3, 2];\n$expect = [2, 3];\nassert(common($l1,\
    \ $l2) == $expect);\n\n$l1 = [1, 4, 3, 34, 653, 2, 5];\n$l2 = [5, 7, 1, 5, 9,\
    \ 653, 121];\n$expect = [1, 5, 653];\nassert(common($l1, $l2) == $expect);\nfunction\
    \ candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653,\
    \ 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2,\
    \ 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught AssertionError: assert(common($l1, $l2) == $expect)\
    \ in /tmp/tmpa4xzdihi.php:28\nStack trace:\n#0 /tmp/tmpa4xzdihi.php(28): assert(false,\
    \ 'assert(common($...')\n#1 {main}\n  thrown in /tmp/tmpa4xzdihi.php on line 28\n"
  timestamp: 1659978444
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    $uniqArr = array_unique(array_merge($l1, $l2));\n  \
    \  sort($uniqArr);\n    return $uniqArr;\n}\n\nfunction candidate(...$args) {\n\
    \    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw__a728q.php:18\n\
    Stack trace:\n#0 /tmp/tmpw__a728q.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpw__a728q.php\
    \ on line 18\n"
  timestamp: 1659978444
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n  $l1 = array_unique($l1);\n  $l2 = array_unique($l2);\n\
    \  $l1 = array_values($l1);\n  $l2 = array_values($l2);\n  $l1_len = count($l1);\n\
    \  $l2_len = count($l2);\n  $i = 0;\n  $j = 0;\n  $k = 0;\n  $res = array();\n\
    \  while($i < $l1_len && $j < $l2_len) {\n    if($l1[$i] == $l2[$j]) {\n     \
    \ $res[$k++] = $l1[$i];\n      $i++;\n      $j++;\n    } else if($l1[$i] < $l2[$j])\
    \ {\n      $i++;\n    } else {\n      $j++;\n    }\n  }\n  return $res;\n}\n\n\
    echo \"common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\\\
    n\";\nvar_dump(common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653,\
    \ 121)));\necho \"common(array(5, 3, 2, 8), array(3, 2))\\n\";\nvar_dump(common(array(5,\
    \ 3, 2, 8), array(3, 2)));\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n\
    array(1) {\n  [0]=>\n  int(653)\n}\ncommon(array(5, 3, 2, 8), array(3, 2))\narray(0)\
    \ {\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6ks3bs8g.php:41\n\
    Stack trace:\n#0 /tmp/tmp6ks3bs8g.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp6ks3bs8g.php\
    \ on line 41\n"
  timestamp: 1659978444
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n\t$common_elements = array();\n\tforeach ($l1 as $element)\
    \ {\n\t\tif (in_array($element, $l2)) {\n\t\t\t$common_elements[] = $element;\n\
    \t\t}\n\t}\n\tsort($common_elements);\n\treturn array_unique($common_elements);\n\
    }\n$l1 = array(1, 4, 3, 34, 653, 2, 5);\n$l2 = array(5, 7, 1, 5, 9, 653, 121);\n\
    print_r(common($l1, $l2));\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 5\n    [2] => 653\n)\n"
  timestamp: 1659978444
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    $result = [];\n    foreach ($l1 as $el) {\n        if\
    \ (in_array($el, $l2)) {\n            $result[] = $el;\n        }\n    }\n   \
    \ sort($result);\n    return array_unique($result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978444
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    sort($l1);\n    sort($l2);\n    $i = 0;\n    $j = 0;\n\
    \    $k = 0;\n    $ln1 = count($l1);\n    $ln2 = count($l2);\n    $l3 = array();\n\
    \    while (($i < $ln1) && ($j < $ln2)) {\n        if ($l1[$i] < $l2[$j]) {\n\
    \            $i++;\n        } elseif ($l1[$i] > $l2[$j]) {\n            $j++;\n\
    \        } else {\n            $l3[$k] = $l1[$i];\n            $i++;\n       \
    \     $j++;\n            $k++;\n        }\n    }\n    return $l3;\n}\n\necho \"\
    common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\\n\";\n\
    print_r(common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)));\n\
    echo \"\\n\";\necho \"common(array(5, 3, 2, 8), array(3, 2))\\n\";\nprint_r(common(array(5,\
    \ 3, 2, 8), array(3, 2)));\necho \"\\n\";\nfunction candidate(...$args) {\n  \
    \  return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n\
    Array\n(\n    [0] => 1\n    [1] => 5\n    [2] => 653\n)\n\ncommon(array(5, 3,\
    \ 2, 8), array(3, 2))\nArray\n(\n    [0] => 2\n    [1] => 3\n)\n\n"
  timestamp: 1659978444
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    return array_intersect($l1, $l2);\n}\n\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbzxu5vsl.php:16\n\
    Stack trace:\n#0 /tmp/tmpbzxu5vsl.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpbzxu5vsl.php\
    \ on line 16\n"
  timestamp: 1659978444
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n  $common = array();\n  foreach ($l1 as $el1) {\n    foreach\
    \ ($l2 as $el2) {\n      if ($el1 == $el2) {\n        $common[] = $el1;\n    \
    \  }\n    }\n  }\n  return array_unique($common);\n}\n\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp44bx968b.php:24\n\
    Stack trace:\n#0 /tmp/tmp44bx968b.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp44bx968b.php\
    \ on line 24\n"
  timestamp: 1659978444
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n\tsort($l1);\n\tsort($l2);\n\treturn array_unique(array_intersect($l1,\
    \ $l2));\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqt6qtmmp.php:18\n\
    Stack trace:\n#0 /tmp/tmpqt6qtmmp.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpqt6qtmmp.php\
    \ on line 18\n"
  timestamp: 1659978444
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    $arr = array_merge($l1, $l2);\n    $arr = array_unique($arr);\n\
    \    return $arr;\n}\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnecek4lh.php:17\n\
    Stack trace:\n#0 /tmp/tmpnecek4lh.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpnecek4lh.php\
    \ on line 17\n"
  timestamp: 1659978444
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n  return array_unique(array_intersect($l1, $l2));\n}\n\n\
    function candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9,\
    \ 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp83b2z70t.php:16\n\
    Stack trace:\n#0 /tmp/tmp83b2z70t.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp83b2z70t.php\
    \ on line 16\n"
  timestamp: 1659978444
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n\t$array1 = array_unique($l1);\n\t$array2 = array_unique($l2);\n\
    \t$common = array();\n\tforeach ($array1 as $a) {\n\t\tif (in_array($a, $array2))\
    \ {\n\t\t\t$common[] = $a;\n\t\t}\n\t}\n\treturn $common;\n}\n\n$l1 = array(1,\
    \ 4, 3, 34, 653, 2, 5);\n$l2 = array(5, 7, 1, 5, 9, 653, 121);\n$l3 = array(5,\
    \ 3, 2, 8);\n$l4 = array(3, 2);\nprint_r(common($l1, $l2));\nprint_r(common($l3,\
    \ $l4));\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5,\
    \ 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 653\n    [2] => 5\n)\nArray\n(\n   \
    \ [0] => 3\n    [1] => 2\n)\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmp6odzz7u1.php:31\nStack trace:\n#0 /tmp/tmp6odzz7u1.php(37): test()\n\
    #1 {main}\n  thrown in /tmp/tmp6odzz7u1.php on line 31\n"
  timestamp: 1659978444
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    sort($l1);\n    sort($l2);\n    $inter = array_intersect($l1,\
    \ $l2);\n    return array_unique($inter);\n}\n\nfunction candidate(...$args) {\n\
    \    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp30fh7x8h.php:19\n\
    Stack trace:\n#0 /tmp/tmp30fh7x8h.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp30fh7x8h.php\
    \ on line 19\n"
  timestamp: 1659978444
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n\tsort($l1);\n\tsort($l2);\n\t$i = 0;\n\t$j = 0;\n\t$result\
    \ = array();\n\twhile ($i < count($l1) && $j < count($l2)) {\n\t\tif ($l1[$i]\
    \ == $l2[$j]) {\n\t\t\t$result[] = $l1[$i];\n\t\t\t$i++;\n\t\t\t$j++;\n\t\t} else\
    \ if ($l1[$i] < $l2[$j]) {\n\t\t\t$i++;\n\t\t} else {\n\t\t\t$j++;\n\t\t}\n\t\
    }\n\treturn $result;\n}\n\n$l1 = array(1, 4, 3, 34, 653, 2, 5);\n$l2 = array(5,\
    \ 7, 1, 5, 9, 653, 121);\nprint_r(common($l1, $l2));\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 5\n    [2] => 653\n)\n"
  timestamp: 1659978444
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    $l1 = array_values(array_unique($l1));\n    $l2 = array_values(array_unique($l2));\n\
    \    $result = [];\n    foreach ($l1 as $x) {\n        if (in_array($x, $l2))\
    \ {\n            $result[] = $x;\n        }\n    }\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9,\
    \ 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpscaa89li.php:24\n\
    Stack trace:\n#0 /tmp/tmpscaa89li.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpscaa89li.php\
    \ on line 24\n"
  timestamp: 1659978444
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    asort($l1);\n    asort($l2);\n    return array_intersect($l1, $l2);\n}\n\
    function candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9,\
    \ 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf1fu1sev.php:19\n\
    Stack trace:\n#0 /tmp/tmpf1fu1sev.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpf1fu1sev.php\
    \ on line 19\n"
  timestamp: 1659978444
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    $common = array();\n    for ($i = 0; $i < count($l1);\
    \ $i++) {\n        for ($j = 0; $j < count($l2); $j++) {\n            if ($l1[$i]\
    \ == $l2[$j]) {\n                array_push($common, $l1[$i]);\n            }\n\
    \        }\n    }\n    sort($common);\n    return array_unique($common);\n}\n\n\
    function candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9,\
    \ 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoud76hlg.php:25\n\
    Stack trace:\n#0 /tmp/tmpoud76hlg.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpoud76hlg.php\
    \ on line 25\n"
  timestamp: 1659978444
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    $result = [];\n    foreach ($l1 as $val) {\n       \
    \ if (in_array($val, $l2)) {\n            $result[] = $val;\n        }\n    }\n\
    \    return array_unique($result);\n}\n\nfunction candidate(...$args) {\n    return\
    \ common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzlo54ghq.php:22\n\
    Stack trace:\n#0 /tmp/tmpzlo54ghq.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpzlo54ghq.php\
    \ on line 22\n"
  timestamp: 1659978444
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n  // Your solution goes here!\n}\n\nif (__FILE__ == '4-comon.php')\
    \ {\n  try {\n    $result = common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7,\
    \ 1, 5, 9, 653, 121));\n    if ($result !== array(1, 5, 653)) {\n      throw new\
    \ Exception(\"Test 1 of common failed.\");\n    }\n    $result = common(array(5,\
    \ 3, 2, 8), array(3, 2));\n    if ($result !== array(2, 3)) {\n      throw new\
    \ Exception(\"Test 2 of common failed.\");\n    }\n    echo \"All tests of common\
    \ passed!\\n\";\n  } catch (Exception $e) {\n    echo $e->getMessage();\n  }\n\
    }\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7,\
    \ 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp14bn4mmu.php:31\n\
    Stack trace:\n#0 /tmp/tmp14bn4mmu.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp14bn4mmu.php\
    \ on line 31\n"
  timestamp: 1659978444
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    sort($l1);\n    sort($l2);\n    $l1c = count($l1);\n\
    \    $l2c = count($l2);\n    $l1i = 0;\n    $l2i = 0;\n    $lc = array();\n  \
    \  while (($l1i < $l1c) && ($l2i < $l2c)) {\n        if ($l1[$l1i] == $l2[$l2i])\
    \ {\n            if ((!$l1i) || ($l1[$l1i] != $l1[$l1i - 1])) {\n            \
    \    $lc[] = $l1[$l1i];\n            }\n            $l1i++;\n            $l2i++;\n\
    \        } elseif ($l1[$l1i] < $l2[$l2i]) {\n            $l1i++;\n        } else\
    \ {\n            $l2i++;\n        }\n    }\n    return $lc;\n}\n\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978444
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n\t$uniques = array_unique(array_merge($l1, $l2));\n\t$result\
    \ = array();\n\tforeach ($uniques as $u) {\n\t\tif (count(array_keys($l1, $u))\
    \ && count(array_keys($l2, $u))) {\n\t\t\t$result[] = $u;\n\t\t}\n\t}\n\treturn\
    \ $result;\n}\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb_gthxk7.php:22\n\
    Stack trace:\n#0 /tmp/tmpb_gthxk7.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpb_gthxk7.php\
    \ on line 22\n"
  timestamp: 1659978444
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    $result = [];\n    $s1 = [];\n    $s2 = [];\n    foreach\
    \ ($l1 as $i) {\n        if (!in_array($i, $s1)) {\n            $s1[] = $i;\n\
    \        }\n    }\n    foreach ($l2 as $i) {\n        if (!in_array($i, $s2))\
    \ {\n            $s2[] = $i;\n        }\n    }\n    sort($s1);\n    sort($s2);\n\
    \    $len1 = count($s1);\n    $len2 = count($s2);\n    $i = 0;\n    $j = 0;\n\
    \    while ($i < $len1 && $j < $len2) {\n        if ($s1[$i] == $s2[$j]) {\n \
    \           $result[] = $s1[$i];\n            $i++;\n            $j++;\n     \
    \   } elseif ($s1[$i] < $s2[$j]) {\n            $i++;\n        } else {\n    \
    \        $j++;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978444
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n\t$l1 = array_unique($l1);\n\t$l2 = array_unique($l2);\n\
    \t$res = array();\n\tforeach ($l1 as $el) {\n\t\tif (in_array($el, $l2)) {\n\t\
    \t\t$res[] = $el;\n\t\t}\n\t}\n\tsort($res);\n\treturn $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978444
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n  $res = array();\n  sort($l1);\n  sort($l2);\n  $length1\
    \ = count($l1);\n  $length2 = count($l2);\n  $p1 = 0;\n  $p2 = 0;\n  while ($p1\
    \ < $length1 && $p2 < $length2) {\n    if ($l1[$p1] == $l2[$p2]) {\n      $res[]\
    \ = $l1[$p1];\n      $p1++;\n      $p2++;\n    } else if ($l1[$p1] < $l2[$p2])\
    \ {\n      $p1++;\n    } else {\n      $p2++;\n    }\n  }\n  return $res;\n}\n\
    \nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7,\
    \ 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978444
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    $p = array_intersect($l1, $l2);\n    sort($p);\n   \
    \ return $p;\n}\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978444
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    return array_intersect($l1, $l2);\n}\n\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbzxu5vsl.php:16\n\
    Stack trace:\n#0 /tmp/tmpbzxu5vsl.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpbzxu5vsl.php\
    \ on line 16\n"
  timestamp: 1659978444
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n  return array_values(array_unique(array_intersect($l1,\
    \ $l2)));\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptdpwpnou.php:16\n\
    Stack trace:\n#0 /tmp/tmptdpwpnou.php(22): test()\n#1 {main}\n  thrown in /tmp/tmptdpwpnou.php\
    \ on line 16\n"
  timestamp: 1659978444
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    sort($l1);\n    sort($l2);\n    $result = array();\n\
    \    $i = 0;\n    $j = 0;\n    while ($i < count($l1) && $j < count($l2)) {\n\
    \        if ($l1[$i] == $l2[$j]) {\n            $result[] = $l1[$i];\n       \
    \     $i++;\n            $j++;\n        } else if ($l1[$i] < $l2[$j]) {\n    \
    \        $i++;\n        } else {\n            $j++;\n        }\n    }\n    return\
    \ $result;\n}\n\necho implode(', ', common(array(1, 4, 3, 34, 653, 2, 5), array(5,\
    \ 7, 1, 5, 9, 653, 121))), \"\\n\";\necho implode(', ', common(array(5, 3, 2,\
    \ 8), array(3, 2))), \"\\n\";\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1, 5, 653

    2, 3

    '
  timestamp: 1659978444
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n  $ret = array();\n  sort($l1);\n  sort($l2);\n  $l1len\
    \ = count($l1);\n  $l2len = count($l2);\n  $i = 0;\n  $j = 0;\n  while ($i < $l1len\
    \ && $j < $l2len) {\n    if ($l1[$i] == $l2[$j]) {\n      $ret[] = $l1[$i];\n\
    \      $i++;\n      $j++;\n    } else if ($l1[$i] < $l2[$j]) {\n      $i++;\n\
    \    } else {\n      $j++;\n    }\n  }\n  return $ret;\n}\n\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978444
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    $unique = array_unique(array_merge($l1, $l2));\n   \
    \ sort($unique);\n    foreach ($unique as $item) {\n        if (in_array($item,\
    \ $l1) && in_array($item, $l2)) {\n            $res[] = $item;\n        }\n  \
    \  }\n    return $res;\n}\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $res in /tmp/tmpt72exuix.php on line 15\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt72exuix.php:25\nStack\
    \ trace:\n#0 /tmp/tmpt72exuix.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpt72exuix.php\
    \ on line 25\n"
  timestamp: 1659978444
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    $arr1 = array_values(array_unique($l1));\n    $arr2\
    \ = array_values(array_unique($l2));\n    $result = [];\n    foreach ($arr1 as\
    \ $el1) {\n        foreach ($arr2 as $el2) {\n            if ($el1 == $el2) {\n\
    \                $result[] = $el1;\n            }\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978444
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    $l1_i = 0;\n    $l2_i = 0;\n    $common = array();\n\
    \    $l1_count = count($l1);\n    $l2_count = count($l2);\n    while (($l1_i <\
    \ $l1_count) && ($l2_i < $l2_count)) {\n        if ($l1[$l1_i] == $l2[$l2_i])\
    \ {\n            $common[] = $l1[$l1_i];\n            $l1_i++;\n            $l2_i++;\n\
    \        } else if ($l1[$l1_i] < $l2[$l2_i]) {\n            $l1_i++;\n       \
    \ } else {\n            $l2_i++;\n        }\n    }\n    return $common;\n}\nfunction\
    \ candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653,\
    \ 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2,\
    \ 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps9nf3e40.php:31\n\
    Stack trace:\n#0 /tmp/tmps9nf3e40.php(37): test()\n#1 {main}\n  thrown in /tmp/tmps9nf3e40.php\
    \ on line 31\n"
  timestamp: 1659978444
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n\t$arr1 = array_values($l1);\n\t$arr2 = array_values($l2);\n\
    \t$length1 = count($arr1);\n\t$length2 = count($arr2);\n\t$i = 0;\n\t$j = 0;\n\
    \t$arr3 = array();\n\twhile (($i < $length1) && ($j < $length2)) {\n\t\tif ($arr1[$i]\
    \ == $arr2[$j]) {\n\t\t\tarray_push($arr3, $arr1[$i]);\n\t\t\t$i++;\n\t\t\t$j++;\n\
    \t\t} else if ($arr1[$i] < $arr2[$j]) {\n\t\t\t$i++;\n\t\t} else {\n\t\t\t$j++;\n\
    \t\t}\n\t}\n\treturn $arr3;\n}\n\nprint_r(common(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)));\nfunction candidate(...$args) {\n    return\
    \ common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 653\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpedvblc04.php:35\nStack trace:\n#0 /tmp/tmpedvblc04.php(41): test()\n\
    #1 {main}\n  thrown in /tmp/tmpedvblc04.php on line 35\n"
  timestamp: 1659978444
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n\t$a = array_unique(array_intersect($l1, $l2));\n\tsort($a);\n\
    \treturn $a;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978444
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n\t$res = array();\n\tsort($l1);\n\tsort($l2);\n\t$l1 = array_unique($l1);\n\
    \t$l2 = array_unique($l2);\n\tfor ($i = 0; $i < count($l1); $i++) {\n\t\tfor ($j\
    \ = 0; $j < count($l2); $j++) {\n\t\t\tif ($l1[$i] == $l2[$j]) {\n\t\t\t\t$res[]\
    \ = $l1[$i];\n\t\t\t}\n\t\t}\n\t}\n\treturn $res;\n}\nprint_r(common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)));\nprint_r(common(array(5,\
    \ 3, 2, 8), array(3, 2)));\n\necho \"\\n\";\nfunction candidate(...$args) {\n\
    \    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 2 in /tmp/tmp68nma_ks.php on line 15\n\n\
    Warning: Undefined array key 2 in /tmp/tmp68nma_ks.php on line 15\n\nWarning:\
    \ Undefined array key 2 in /tmp/tmp68nma_ks.php on line 15\n\nWarning: Undefined\
    \ array key 2 in /tmp/tmp68nma_ks.php on line 15\n\nWarning: Undefined array key\
    \ 2 in /tmp/tmp68nma_ks.php on line 15\n\nWarning: Undefined array key 2 in /tmp/tmp68nma_ks.php\
    \ on line 15\n\nWarning: Undefined array key 2 in /tmp/tmp68nma_ks.php on line\
    \ 15\nArray\n(\n    [0] => 1\n    [1] => 5\n)\nArray\n(\n    [0] => 2\n    [1]\
    \ => 3\n)\n\n\nWarning: Undefined array key 2 in /tmp/tmp68nma_ks.php on line\
    \ 15\n\nWarning: Undefined array key 2 in /tmp/tmp68nma_ks.php on line 15\n\n\
    Warning: Undefined array key 2 in /tmp/tmp68nma_ks.php on line 15\n\nWarning:\
    \ Undefined array key 2 in /tmp/tmp68nma_ks.php on line 15\n\nWarning: Undefined\
    \ array key 2 in /tmp/tmp68nma_ks.php on line 15\n\nWarning: Undefined array key\
    \ 2 in /tmp/tmp68nma_ks.php on line 15\n\nWarning: Undefined array key 2 in /tmp/tmp68nma_ks.php\
    \ on line 15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp68nma_ks.php:31\n\
    Stack trace:\n#0 /tmp/tmp68nma_ks.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp68nma_ks.php\
    \ on line 31\n"
  timestamp: 1659978444
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    $res = [];\n    $cnt1 = count($l1);\n    $cnt2 = count($l2);\n\
    \    if ($cnt1 > $cnt2) {\n        $l2 = array_unique($l2);\n        foreach ($l1\
    \ as $elem) {\n            if (in_array($elem, $l2))\n                $res[] =\
    \ $elem;\n        }\n    } else {\n        $l1 = array_unique($l1);\n        foreach\
    \ ($l2 as $elem) {\n            if (in_array($elem, $l1))\n                $res[]\
    \ = $elem;\n        }\n    }\n    return $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx2tfry09.php:32\n\
    Stack trace:\n#0 /tmp/tmpx2tfry09.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpx2tfry09.php\
    \ on line 32\n"
  timestamp: 1659978444
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    sort($l1);\n    sort($l2);\n    $result = [];\n    $i = 0;\n    $j = 0;\n\
    \    while ($i < count($l1) && $j < count($l2)) {\n        if ($l1[$i] < $l2[$j])\
    \ {\n            $i++;\n        } else if ($l1[$i] > $l2[$j]) {\n            $j++;\n\
    \        } else {\n            $result[] = $l1[$i];\n            $i++;\n     \
    \       $j++;\n        }\n    }\n    return $result;\n}\n\nprint_r(common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]));\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 5\n    [2] => 653\n)\n"
  timestamp: 1659978444
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    $res = [];\n    if (count($l1) >= count($l2)) {\n  \
    \      $big = $l1;\n        $small = $l2;\n    } else {\n        $big = $l2;\n\
    \        $small = $l1;\n    }\n    sort($big);\n    sort($small);\n    $i = 0;\n\
    \    $j = 0;\n    while ($i < count($big) && $j < count($small)) {\n        if\
    \ ($big[$i] == $small[$j]) {\n            $res[] = $big[$i];\n            $i++;\n\
    \            $j++;\n        } elseif ($big[$i] > $small[$j]) {\n            $j++;\n\
    \        } else {\n            $i++;\n        }\n    }\n    return $res;\n}\n\n\
    function candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9,\
    \ 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978444
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n  $hash1 = array_flip($l1);\n  $hash2 = array_flip($l2);\n\
    \  return array_values(array_intersect_key($hash1, $hash2));\n}\n\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3mgjv103.php:18\n\
    Stack trace:\n#0 /tmp/tmp3mgjv103.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp3mgjv103.php\
    \ on line 18\n"
  timestamp: 1659978444
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    return array_values(array_intersect($l1, $l2));\n}\n\
    \nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7,\
    \ 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv5e_987n.php:16\n\
    Stack trace:\n#0 /tmp/tmpv5e_987n.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpv5e_987n.php\
    \ on line 16\n"
  timestamp: 1659978444
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n  // Create a map for the first list.\n  $frequencies =\
    \ array();\n  foreach ($l1 as $value) {\n    $frequencies[$value] = isset($frequencies[$value])\
    \ ? $frequencies[$value] + 1 : 1;\n  }\n\n  // Filter second list with the map\
    \ and find the top items in the list.\n  $result = array();\n  foreach ($l2 as\
    \ $value) {\n    if (isset($frequencies[$value]) && $frequencies[$value] > 0)\
    \ {\n      $result[] = $value;\n      $frequencies[$value]--;\n    }\n  }\n\n\
    \  // Sort the result and return it.\n  sort($result);\n  return $result;\n}\n\
    \n$l1 = array(1, 4, 3, 34, 653, 2, 5);\n$l2 = array(5, 7, 1, 5, 9, 653, 121);\n\
    $result = common($l1, $l2);\nprint_r($result);\n\n$l1 = array(5, 3, 2, 8);\n$l2\
    \ = array(3, 2);\n$result = common($l1, $l2);\nprint_r($result);\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 5\n    [2] => 653\n)\nArray\n(\n   \
    \ [0] => 2\n    [1] => 3\n)\n"
  timestamp: 1659978444
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    $result = [];\n    $l1 = array_unique($l1);\n    $l2\
    \ = array_unique($l2);\n    $len1 = count($l1);\n    $len2 = count($l2);\n   \
    \ for ($i = 0; $i < $len1; $i++) {\n        for ($j = 0; $j < $len2; $j++) {\n\
    \            if ($l1[$i] == $l2[$j]) {\n                $result[] = $l1[$i];\n\
    \            }\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 3 in /tmp/tmp0as52als.php on line 15\n\n\
    Warning: Undefined array key 3 in /tmp/tmp0as52als.php on line 15\n\nWarning:\
    \ Undefined array key 3 in /tmp/tmp0as52als.php on line 15\n\nWarning: Undefined\
    \ array key 3 in /tmp/tmp0as52als.php on line 15\n\nWarning: Undefined array key\
    \ 3 in /tmp/tmp0as52als.php on line 15\n\nWarning: Undefined array key 3 in /tmp/tmp0as52als.php\
    \ on line 15\n\nWarning: Undefined array key 3 in /tmp/tmp0as52als.php on line\
    \ 15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0as52als.php:27\n\
    Stack trace:\n#0 /tmp/tmp0as52als.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp0as52als.php\
    \ on line 27\n"
  timestamp: 1659978444
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    // Create a list of common elements by comparing the\
    \ two lists.\n    $common = array();\n    foreach ($l1 as $element) {\n      \
    \  if (in_array($element, $l2)) {\n            array_push($common, $element);\n\
    \        }\n    }\n    // Sort the resulting list.\n    sort($common);\n    //\
    \ Return the resulting list without duplicates.\n    return array_unique($common);\n\
    }\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7,\
    \ 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978444
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    $intersection = array_intersect($l1, $l2);\n    sort($intersection);\n\
    \    return array_unique($intersection);\n}\n\nfunction candidate(...$args) {\n\
    \    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978444
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    $lc = [];\n    $f1 = array_unique($l1);\n    $f2 = array_unique($l2);\n\
    \    sort($f1);\n    sort($f2);\n    foreach ($f1 as $e) {\n        foreach ($f2\
    \ as $e2) {\n            if ($e == $e2)\n                $lc[] = $e;\n       \
    \ }\n    }\n    return $lc;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978445
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n\t$res = array();\n\tsort($l1);\n\tsort($l2);\n\t$count1\
    \ = count($l1);\n\t$count2 = count($l2);\n\t$i = 0;\n\t$j = 0;\n\twhile ($i <\
    \ $count1 && $j < $count2) {\n\t\tif ($l1[$i] < $l2[$j]) {\n\t\t\t$i++;\n\t\t\
    } else if ($l1[$i] > $l2[$j]) {\n\t\t\t$j++;\n\t\t} else {\n\t\t\tif (empty($res)\
    \ || $res[count($res) - 1] !== $l1[$i]) {\n\t\t\t\t$res[] = $l1[$i];\n\t\t\t}\n\
    \t\t\t$i++;\n\t\t\t$j++;\n\t\t}\n\t}\n\treturn $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978444
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    $output = [];\n    foreach($l1 as $item) {\n       \
    \ if (in_array($item, $l2)) {\n            $output[] = $item;\n        }\n   \
    \ }\n    return array_unique($output);\n}\n\nprint_r(common(array(1, 4, 3, 34,\
    \ 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)));\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 653\n    [2] => 5\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpn8qqkgk1.php:23\nStack trace:\n\
    #0 /tmp/tmpn8qqkgk1.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpn8qqkgk1.php\
    \ on line 23\n"
  timestamp: 1659978444
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n\t$result = array();\n\tsort($l1);\n\tsort($l2);\n\t$i =\
    \ 0;\n\t$j = 0;\n\twhile ($i < count($l1) && $j < count($l2)) {\n\t\tif ($l1[$i]\
    \ == $l2[$j]) {\n\t\t\tif (end($result) != $l1[$i]) {\n\t\t\t\t$result[] = $l1[$i];\n\
    \t\t\t}\n\t\t\t$i++;\n\t\t\t$j++;\n\t\t} else if ($l1[$i] < $l2[$j]) {\n\t\t\t\
    $i++;\n\t\t} else {\n\t\t\t$j++;\n\t\t}\n\t}\n\treturn $result;\n}\nprint_r(common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)));\nprint_r(common(array(5,\
    \ 3, 2, 8), array(3, 2)));\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 5\n    [2] => 653\n)\nArray\n(\n   \
    \ [0] => 2\n    [1] => 3\n)\n"
  timestamp: 1659978445
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    $ml = new MList(array_merge($l1, $l2));\n    $ml->sort();\n\
    \    $p = $ml->head();\n    while (!$p->is_nil()) {\n        if ($p->next()->value()\
    \ == $p->value()) {\n            $p->set_next($p->next()->next());\n        }\
    \ else {\n            $p = $p->next();\n        }\n    }\n    $ml->remove(null);\n\
    \    return $ml->to_array();\n}\n\nfunction candidate(...$args) {\n    return\
    \ common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Class \"MList\" not found in /tmp/tmp67o542e_.php:8\n\
    Stack trace:\n#0 /tmp/tmp67o542e_.php(23): common(Array, Array)\n#1 /tmp/tmp67o542e_.php(27):\
    \ candidate(Array, Array)\n#2 /tmp/tmp67o542e_.php(33): test()\n#3 {main}\n  thrown\
    \ in /tmp/tmp67o542e_.php on line 8\n"
  timestamp: 1659978445
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    $common = [];\n    for ($i = 0; $i < count($l1); $i++) {\n        for ($j\
    \ = 0; $j < count($l2); $j++) {\n            if ($l1[$i] == $l2[$j]) {\n     \
    \           $common[] = $l1[$i];\n            }\n        }\n    }\n    sort($common);\n\
    \    return $common;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Warning: Undefined array key 3 in /tmp/tmplqxbgs3y.php on line 13


    Warning: Undefined array key 3 in /tmp/tmplqxbgs3y.php on line 13


    Warning: Undefined array key 3 in /tmp/tmplqxbgs3y.php on line 13


    Warning: Undefined array key 3 in /tmp/tmplqxbgs3y.php on line 13


    Warning: Undefined array key 3 in /tmp/tmplqxbgs3y.php on line 13


    Warning: Undefined array key 3 in /tmp/tmplqxbgs3y.php on line 13


    Warning: Undefined array key 3 in /tmp/tmplqxbgs3y.php on line 13

    '
  timestamp: 1659978445
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    sort($l1);\n    sort($l2);\n    $i = 0;\n    $j = 0;\n\
    \    $length1 = count($l1);\n    $length2 = count($l2);\n    $common = array();\n\
    \    while ($i < $length1 && $j < $length2) {\n        if ($l1[$i] == $l2[$j])\
    \ {\n            if (!count($common) || $common[count($common) - 1] != $l1[$i])\
    \ {\n                $common[] = $l1[$i];\n            }\n            $i++;\n\
    \            $j++;\n        } else if ($l1[$i] < $l2[$j]) {\n            $i++;\n\
    \        } else {\n            $j++;\n        }\n    }\n    return $common;\n\
    }\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7,\
    \ 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978444
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    return array_intersect($l1, $l2);\n}\nprint_r(common(array(1, 4, 3, 34, 653,\
    \ 2, 5), array(5, 7, 1, 5, 9, 653, 121)));\nprint_r(common(array(5, 3, 2, 8),\
    \ array(3, 2)));\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [4] => 653\n    [6] => 5\n)\nArray\n(\n   \
    \ [1] => 3\n    [2] => 2\n)\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpqwr2gm4a.php:19\nStack trace:\n#0 /tmp/tmpqwr2gm4a.php(25): test()\n\
    #1 {main}\n  thrown in /tmp/tmpqwr2gm4a.php on line 19\n"
  timestamp: 1659978445
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n\t$result = array();\n\t$i = 0;\n\t$j = 0;\n\tsort($l1);\n\
    \tsort($l2);\n\t$len1 = count($l1);\n\t$len2 = count($l2);\n\twhile ($i < $len1\
    \ && $j < $len2) {\n\t\tif ($l1[$i] < $l2[$j]) {\n\t\t\t$i++;\n\t\t} else if ($l1[$i]\
    \ > $l2[$j]) {\n\t\t\t$j++;\n\t\t} else {\n\t\t\tif (!in_array($l1[$i], $result))\
    \ {\n\t\t\t\t$result[] = $l1[$i];\n\t\t\t}\n\t\t\t$i++;\n\t\t\t$j++;\n\t\t}\n\t\
    }\n\treturn $result;\n}\n$l1 = array(1, 4, 3, 34, 653, 2, 5);\n$l2 = array(5,\
    \ 7, 1, 5, 9, 653, 121);\nprint_r(common($l1, $l2));\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 5\n    [2] => 653\n)\n"
  timestamp: 1659978444
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    $a = array_unique(array_intersect($l1, $l2));\n    sort($a);\n\
    \    return $a;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978445
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    // Don't use array_intersect() because it needs to sort\
    \ the lists.\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n   \
    \ if (!$l1 || !$l2) return array();\n    $results = array();\n    for ($i = 0;\
    \ $i < count($l1); $i++) {\n        for ($j = 0; $j < count($l2); $j++) {\n  \
    \          if ($l1[$i] == $l2[$j]) {\n                $results[] = $l1[$i];\n\
    \                break;\n            }\n        }\n    }\n    return $results;\n\
    }\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7,\
    \ 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 3 in /tmp/tmpmzx_0wv9.php on line 15\n\n\
    Warning: Undefined array key 3 in /tmp/tmpmzx_0wv9.php on line 15\n\nWarning:\
    \ Undefined array key 3 in /tmp/tmpmzx_0wv9.php on line 15\n\nWarning: Undefined\
    \ array key 3 in /tmp/tmpmzx_0wv9.php on line 15\n\nWarning: Undefined array key\
    \ 3 in /tmp/tmpmzx_0wv9.php on line 15\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpmzx_0wv9.php:29\nStack trace:\n#0 /tmp/tmpmzx_0wv9.php(35):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpmzx_0wv9.php on line 29\n"
  timestamp: 1659978445
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n\t// $l1 = array_unique($l1);\n\t// $l2 = array_unique($l2);\n\
    \t$l3 = array_intersect($l1, $l2);\n\tasort($l3);\n\treturn $l3;\n}\n\nfunction\
    \ candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653,\
    \ 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2,\
    \ 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv3m8l4z3.php:20\n\
    Stack trace:\n#0 /tmp/tmpv3m8l4z3.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpv3m8l4z3.php\
    \ on line 20\n"
  timestamp: 1659978444
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n\treturn array_unique(array_intersect($l1, $l2));\n}\n\n\
    function candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9,\
    \ 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdqexjkdo.php:16\n\
    Stack trace:\n#0 /tmp/tmpdqexjkdo.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpdqexjkdo.php\
    \ on line 16\n"
  timestamp: 1659978445
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n\tsort($l1);\n\tsort($l2);\n\t$i = 0;\n\t$j = 0;\n\t$unique\
    \ = [];\n\twhile ($i < count($l1) && $j < count($l2)) {\n\t\tif ($l1[$i] < $l2[$j])\
    \ {\n\t\t\t$i++;\n\t\t} else if ($l1[$i] > $l2[$j]) {\n\t\t\t$j++;\n\t\t} else\
    \ {\n\t\t\tif (count($unique) == 0 || end($unique) != $l1[$i]) {\n\t\t\t\t$unique[]\
    \ = $l1[$i];\n\t\t\t}\n\t\t\t$i++;\n\t\t\t$j++;\n\t\t}\n\t}\n\treturn $unique;\n\
    }\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7,\
    \ 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978445
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    $filtered = [];\n    $i1 = 0;\n    $i2 = 0;\n    $l1\
    \ = count($l1);\n    $l2 = count($l2);\n    while ($i1 < $l1 && $i2 < $l2) {\n\
    \        if ($l1[$i1] < $l2[$i2]) {\n            $i1++;\n        } elseif ($l1[$i1]\
    \ > $l2[$i2]) {\n            $i2++;\n        } else {\n            $filtered[]\
    \ = $l1[$i1];\n            $i1++;\n            $i2++;\n        }\n    }\n    return\
    \ $filtered;\n}\n\nprint_r(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653,\
    \ 121]));\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5,\
    \ 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Warning: Trying to access array offset on value of type int in /tmp/tmphnzhazee.php
    on line 14


    Warning: Trying to access array offset on value of type int in /tmp/tmphnzhazee.php
    on line 14


    Warning: Trying to access array offset on value of type int in /tmp/tmphnzhazee.php
    on line 16


    Warning: Trying to access array offset on value of type int in /tmp/tmphnzhazee.php
    on line 16


    Warning: Trying to access array offset on value of type int in /tmp/tmphnzhazee.php
    on line 19


    Warning: Trying to access array offset on value of type int in /tmp/tmphnzhazee.php
    on line 14


    Warning: Trying to access array offset on value of type int in /tmp/tmphnzhazee.php
    on line 14


    Warning: Trying to access array offset on value of type int in /tmp/tmphnzhazee.php
    on line 16


    Warning: Trying to access array offset on value of type int in /tmp/tmphnzhazee.php
    on line 16


    Warning: Trying to access array offset on value of type int in /tmp/tmphnzhazee.php
    on line 19


    Warning: Trying to access array offset on value of type int in /tmp/tmphnzhazee.php
    on line 14


    Warning: Trying to access array offset on value of type int in /tmp/tmphnzhazee.php
    on line 14


    Warning: Trying to access array offset on value of type int in /tmp/tmphnzhazee.php
    on line 16


    Warning: Trying to access array offset on value of type int in /tmp/tmphnzhazee.php
    on line 16


    Warning: Trying to access array offset on value of type int in /tmp/tmphnzhazee.php
    on line 19


    Warning: Trying to access array offset on value of type int in /tmp/tmphnzhazee.php
    on line 14


    Warning: Trying to access array offset on value of type int in /tmp/tmphnzhazee.php
    on line 14


    Warning: Trying to access array offset on value of type int in /tmp/tmphnzhazee.php
    on line 16


    Warning: Trying to access array offset on value of type int in /tmp/tmphnzhazee.php
    on line 16


    Warning: Trying to access array offset on value of type int in /tmp/tmphnzhazee.php
    on line 19


    Warning: Trying to access array offset on value of type int in /tmp/tmphnzhazee.php
    on line 14


    Warning: Trying to access array'
  timestamp: 1659978445
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    $result = [];\n    $size1 = count($l1);\n    $size2\
    \ = count($l2);\n    for ($i = 0; $i < $size1; $i++) {\n        for ($j = 0; $j\
    \ < $size2; $j++) {\n            if ($l1[$i] == $l2[$j]) {\n                $result[]\
    \ = $l1[$i];\n            }\n        }\n    }\n    return array_unique($result);\n\
    }\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7,\
    \ 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvfapqv5y.php:26\n\
    Stack trace:\n#0 /tmp/tmpvfapqv5y.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpvfapqv5y.php\
    \ on line 26\n"
  timestamp: 1659978445
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n\t$out = array();\n\tfor ($i = 0; $i < count($l1); $i++)\
    \ {\n\t\tfor ($j = 0; $j < count($l2); $j++) {\n\t\t\tif ($l1[$i] == $l2[$j])\
    \ {\n\t\t\t\t$out[] = $l1[$i];\n\t\t\t}\n\t\t}\n\t}\n\treturn array_unique($out);\n\
    }\nprint_r(common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)));\n\
    function candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9,\
    \ 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 653\n    [2] => 5\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp6li7vbic.php:24\nStack trace:\n\
    #0 /tmp/tmp6li7vbic.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp6li7vbic.php\
    \ on line 24\n"
  timestamp: 1659978445
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n  $result = array();\n  sort($l1);\n  sort($l2);\n  $i =\
    \ 0;\n  $j = 0;\n  while ($i < count($l1) && $j < count($l2)) {\n    if ($l1[$i]\
    \ == $l2[$j]) {\n      $result[] = $l1[$i];\n      $i++;\n      $j++;\n    } else\
    \ if ($l1[$i] < $l2[$j]) {\n      $i++;\n    } else {\n      $j++;\n    }\n  }\n\
    \  return $result;\n}\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978445
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    $result = [];\n    $merged = array_merge($l1, $l2);\n\
    \    $temp = array_unique($merged);\n    for ($i = 0; $i < count($temp); $i++)\
    \ {\n        if (in_array($temp[$i], $l1) && in_array($temp[$i], $l2)) {\n   \
    \         $result[] = $temp[$i];\n        }\n    }\n    return $result;\n}\necho\
    \ 'common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) <br>';\n\
    var_dump(common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)));\n\
    echo '<br>common(array(5, 3, 2, 8), array(3, 2)) <br>';\nvar_dump(common(array(5,\
    \ 3, 2, 8), array(3, 2)));\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) <br>\n\
    Warning: Undefined array key 7 in /tmp/tmpalapyktc.php on line 12\n\nWarning:\
    \ Undefined array key 9 in /tmp/tmpalapyktc.php on line 12\narray(3) {\n  [0]=>\n\
    \  int(1)\n  [1]=>\n  int(653)\n  [2]=>\n  int(5)\n}\n<br>common(array(5, 3, 2,\
    \ 8), array(3, 2)) <br>array(2) {\n  [0]=>\n  int(3)\n  [1]=>\n  int(2)\n}\n\n\
    Warning: Undefined array key 7 in /tmp/tmpalapyktc.php on line 12\n\nWarning:\
    \ Undefined array key 9 in /tmp/tmpalapyktc.php on line 12\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpalapyktc.php:27\nStack trace:\n#0 /tmp/tmpalapyktc.php(33):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpalapyktc.php on line 27\n"
  timestamp: 1659978445
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n  $l1 = array_unique($l1);\n  $l2 = array_unique($l2);\n\
    \  $result = [];\n  for ($i = 0; $i < count($l1); $i++) {\n    for ($j = 0; $j\
    \ < count($l2); $j++) {\n      if ($l1[$i] == $l2[$j]) {\n        $result[] =\
    \ $l1[$i];\n      }\n    }\n  }\n  sort($result);\n  return $result;\n}\n\n$l1\
    \ = [1, 4, 3, 34, 653, 2, 5];\n$l2 = [5, 7, 1, 5, 9, 653, 121];\nprint_r(common($l1,\
    \ $l2));\n\n$l1 = [5, 3, 2, 8];\n$l2 = [3, 2];\nprint_r(common($l1, $l2));\nfunction\
    \ candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653,\
    \ 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2,\
    \ 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "\nWarning: Undefined array key 3 in /tmp/tmprtcwvcbq.php on line 13\n\n\
    Warning: Undefined array key 3 in /tmp/tmprtcwvcbq.php on line 13\n\nWarning:\
    \ Undefined array key 3 in /tmp/tmprtcwvcbq.php on line 13\n\nWarning: Undefined\
    \ array key 3 in /tmp/tmprtcwvcbq.php on line 13\n\nWarning: Undefined array key\
    \ 3 in /tmp/tmprtcwvcbq.php on line 13\n\nWarning: Undefined array key 3 in /tmp/tmprtcwvcbq.php\
    \ on line 13\n\nWarning: Undefined array key 3 in /tmp/tmprtcwvcbq.php on line\
    \ 13\nArray\n(\n    [0] => 1\n    [1] => 5\n    [2] => 653\n)\nArray\n(\n    [0]\
    \ => 2\n    [1] => 3\n)\n\nWarning: Undefined array key 3 in /tmp/tmprtcwvcbq.php\
    \ on line 13\n\nWarning: Undefined array key 3 in /tmp/tmprtcwvcbq.php on line\
    \ 13\n\nWarning: Undefined array key 3 in /tmp/tmprtcwvcbq.php on line 13\n\n\
    Warning: Undefined array key 3 in /tmp/tmprtcwvcbq.php on line 13\n\nWarning:\
    \ Undefined array key 3 in /tmp/tmprtcwvcbq.php on line 13\n\nWarning: Undefined\
    \ array key 3 in /tmp/tmprtcwvcbq.php on line 13\n\nWarning: Undefined array key\
    \ 3 in /tmp/tmprtcwvcbq.php on line 13\n"
  timestamp: 1659978445
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n  $l1 = array_unique($l1);\n  $l2 = array_unique($l2);\n\
    \  $common = array();\n  $max = max(count($l1), count($l2));\n  for ($i = 0; $i\
    \ < $max; $i++) {\n    if (isset($l1[$i]) && isset($l2[$i]) && $l1[$i] == $l2[$i])\
    \ {\n      $common[] = $l1[$i];\n    }\n  }\n  return $common;\n}\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmailgrzi.php:24\n\
    Stack trace:\n#0 /tmp/tmpmailgrzi.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpmailgrzi.php\
    \ on line 24\n"
  timestamp: 1659978445
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n\t$result = array();\n\tif (count($l1) > count($l2)) {\n\
    \t\t$l1 = array_unique($l1);\n\t\t$l2 = array_unique($l2);\n\t\tsort($l1);\n\t\
    \tsort($l2);\n\t\tfor ($i = 0; $i < count($l1); $i++) {\n\t\t\tfor ($j = 0; $j\
    \ < count($l2); $j++) {\n\t\t\t\tif ($l1[$i] == $l2[$j]) {\n\t\t\t\t\t$result[]\
    \ = $l1[$i];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} else {\n\t\t$l1 = array_unique($l1);\n\
    \t\t$l2 = array_unique($l2);\n\t\tsort($l1);\n\t\tsort($l2);\n\t\tfor ($i = 0;\
    \ $i < count($l2); $i++) {\n\t\t\tfor ($j = 0; $j < count($l1); $j++) {\n\t\t\t\
    \tif ($l2[$i] == $l1[$j]) {\n\t\t\t\t\t$result[] = $l2[$i];\n\t\t\t\t}\n\t\t\t\
    }\n\t\t}\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978445
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    return array_intersect($l1, $l2);\n}\nprint_r(common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)));\nprint_r(common(array(5,\
    \ 3, 2, 8), array(3, 2)));\n\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [4] => 653\n    [6] => 5\n)\nArray\n(\n   \
    \ [1] => 3\n    [2] => 2\n)\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpsezti6om.php:18\nStack trace:\n#0 /tmp/tmpsezti6om.php(24): test()\n\
    #1 {main}\n  thrown in /tmp/tmpsezti6om.php on line 18\n"
  timestamp: 1659978445
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    sort($l1);\n    sort($l2);\n    $common = [];\n    $i = 0;\n    $j = 0;\n\
    \    while($i < count($l1) && $j < count($l2)) {\n        if($l1[$i] == $l2[$j])\
    \ {\n            $common[] = $l1[$i];\n            $i++;\n            $j++;\n\
    \        } else if($l1[$i] < $l2[$j]) {\n            $i++;\n        } else {\n\
    \            $j++;\n        }\n    }\n    return $common;\n}\n\n$l1 = [1, 4, 3,\
    \ 34, 653, 2, 5];\n$l2 = [5, 7, 1, 5, 9, 653, 121];\nvar_dump(common($l1, $l2));\n\
    function candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9,\
    \ 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "array(3) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(5)\n  [2]=>\n  int(653)\n\
    }\n"
  timestamp: 1659978445
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n  return array_unique(array_intersect($l1, $l2));\n}\n\n\
    var_dump(common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)));\n\
    var_dump(common(array(5, 3, 2, 8), array(3, 2)));\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(3) {\n  [0]=>\n  int(1)\n  [4]=>\n  int(653)\n  [6]=>\n  int(5)\n\
    }\narray(2) {\n  [1]=>\n  int(3)\n  [2]=>\n  int(2)\n}\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpd_04me0k.php:18\nStack trace:\n#0 /tmp/tmpd_04me0k.php(24):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpd_04me0k.php on line 18\n"
  timestamp: 1659978445
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    $s1 = array_unique($l1);\n    $s2 = array_unique($l2);\n\
    \    $s = array();\n    foreach ($s1 as $i) {\n        if (in_array($i, $s2))\
    \ {\n            $s[] = $i;\n        }\n    }\n    sort($s);\n    return $s;\n\
    }\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7,\
    \ 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978445
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n\t$l1 = array_unique($l1);\n\t$l2 = array_unique($l2);\n\
    \t$common = array();\n\tfor ($i = 0; $i < count($l1); $i++) {\n\t\tfor ($j = 0;\
    \ $j < count($l2); $j++) {\n\t\t\tif ($l1[$i] == $l2[$j]) {\n\t\t\t\t$common[]\
    \ = $l1[$i];\n\t\t\t}\n\t\t}\n\t}\n\treturn $common;\n}\n\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 3 in /tmp/tmpgxz2ooxq.php on line 13\n\n\
    Warning: Undefined array key 3 in /tmp/tmpgxz2ooxq.php on line 13\n\nWarning:\
    \ Undefined array key 3 in /tmp/tmpgxz2ooxq.php on line 13\n\nWarning: Undefined\
    \ array key 3 in /tmp/tmpgxz2ooxq.php on line 13\n\nWarning: Undefined array key\
    \ 3 in /tmp/tmpgxz2ooxq.php on line 13\n\nWarning: Undefined array key 3 in /tmp/tmpgxz2ooxq.php\
    \ on line 13\n\nWarning: Undefined array key 3 in /tmp/tmpgxz2ooxq.php on line\
    \ 13\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgxz2ooxq.php:26\n\
    Stack trace:\n#0 /tmp/tmpgxz2ooxq.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpgxz2ooxq.php\
    \ on line 26\n"
  timestamp: 1659978445
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n  // Your code here\n}\n\n$l1 = array(1, 4, 3, 34, 653,\
    \ 2, 5);\n$l2 = array(5, 7, 1, 5, 9, 653, 121);\n$l3 = array(5, 3, 2, 8);\n$l4\
    \ = array(3, 2);\necho json_encode(common($l1, $l2)) . \"\\n\";\necho json_encode(common($l3,\
    \ $l4)) . \"\\n\";\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "null\nnull\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo136_zix.php:22\n\
    Stack trace:\n#0 /tmp/tmpo136_zix.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpo136_zix.php\
    \ on line 22\n"
  timestamp: 1659978445
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n\t$ret = array();\n\tforeach ($l1 as $x) {\n\t\tforeach\
    \ ($l2 as $y) {\n\t\t\tif ($x == $y) {\n\t\t\t\t$ret[] = $x;\n\t\t\t}\n\t\t}\n\
    \t}\n\treturn array_unique($ret);\n}\n\n$data = [\n\t[\n\t\t\"name\" => \"common\"\
    ,\n\t\t\"args\" => [\n\t\t\t[1, 4, 3, 34, 653, 2, 5],\n\t\t\t[5, 7, 1, 5, 9, 653,\
    \ 121]\n\t\t],\n\t\t\"expect\" => [1, 5, 653]\n\t],\n\t[\n\t\t\"name\" => \"common\"\
    ,\n\t\t\"args\" => [\n\t\t\t[5, 3, 2, 8],\n\t\t\t[3, 2]\n\t\t],\n\t\t\"expect\"\
    \ => [2, 3]\n\t]\n];\n\nrequire_once \"common.php\";\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: require_once(common.php): Failed to open stream: No such file\
    \ or directory in /tmp/tmp9vslvm_o.php on line 38\n\nFatal error: Uncaught Error:\
    \ Failed opening required 'common.php' (include_path='.:') in /tmp/tmp9vslvm_o.php:38\n\
    Stack trace:\n#0 {main}\n  thrown in /tmp/tmp9vslvm_o.php on line 38\n"
  timestamp: 1659978445
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n\t$l1 = array_unique($l1);\n\t$l2 = array_unique($l2);\n\
    \t$output = array();\n\tfor ($i = 0; $i < count($l1); $i++) {\n\t\tfor ($j = 0;\
    \ $j < count($l2); $j++) {\n\t\t\tif ($l1[$i] == $l2[$j]) {\n\t\t\t\t$output[]\
    \ = $l1[$i];\n\t\t\t}\n\t\t}\n\t}\n\tsort($output);\n\treturn $output;\n}\n\n\
    print_r(common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)));\n\
    print_r(common(array(5, 3, 2, 8), array(3, 2)));\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "\nWarning: Undefined array key 3 in /tmp/tmpuwq4szps.php on line 13\n\n\
    Warning: Undefined array key 3 in /tmp/tmpuwq4szps.php on line 13\n\nWarning:\
    \ Undefined array key 3 in /tmp/tmpuwq4szps.php on line 13\n\nWarning: Undefined\
    \ array key 3 in /tmp/tmpuwq4szps.php on line 13\n\nWarning: Undefined array key\
    \ 3 in /tmp/tmpuwq4szps.php on line 13\n\nWarning: Undefined array key 3 in /tmp/tmpuwq4szps.php\
    \ on line 13\n\nWarning: Undefined array key 3 in /tmp/tmpuwq4szps.php on line\
    \ 13\nArray\n(\n    [0] => 1\n    [1] => 5\n    [2] => 653\n)\nArray\n(\n    [0]\
    \ => 2\n    [1] => 3\n)\n\nWarning: Undefined array key 3 in /tmp/tmpuwq4szps.php\
    \ on line 13\n\nWarning: Undefined array key 3 in /tmp/tmpuwq4szps.php on line\
    \ 13\n\nWarning: Undefined array key 3 in /tmp/tmpuwq4szps.php on line 13\n\n\
    Warning: Undefined array key 3 in /tmp/tmpuwq4szps.php on line 13\n\nWarning:\
    \ Undefined array key 3 in /tmp/tmpuwq4szps.php on line 13\n\nWarning: Undefined\
    \ array key 3 in /tmp/tmpuwq4szps.php on line 13\n\nWarning: Undefined array key\
    \ 3 in /tmp/tmpuwq4szps.php on line 13\n"
  timestamp: 1659978445
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n  $l1 = array_unique($l1);\n  $l2 = array_unique($l2);\n\
    \  sort($l1);\n  sort($l2);\n  $l3 = array();\n  $j = 0;\n  $k = 0;\n  while ($j\
    \ < count($l1) && $k < count($l2)) {\n    if ($l1[$j] == $l2[$k]) {\n      $l3[]\
    \ = $l1[$j];\n      $j++;\n      $k++;\n    } else if ($l1[$j] < $l2[$k]) {\n\
    \      $j++;\n    } else {\n      $k++;\n    }\n  }\n  return $l3;\n}\n\nfunction\
    \ candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653,\
    \ 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2,\
    \ 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978445
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    return array_intersect($l1, $l2);\n}\n\nfunction candidate(...$args) {\n\
    \    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpybz5kq87.php:18\n\
    Stack trace:\n#0 /tmp/tmpybz5kq87.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpybz5kq87.php\
    \ on line 18\n"
  timestamp: 1659978445
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n\t$s = array_intersect($l1, $l2);\n\tsort($s);\n\treturn\
    \ $s;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5,\
    \ 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978444
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n  $result = array();\n  $both = array_merge($l1, $l2);\n\
    \  foreach (array_unique($both) as $e) {\n    if (count(array_keys($l1, $e)) >\
    \ 0 and count(array_keys($l2, $e)) > 0) {\n      $result[] = $e;\n    }\n  }\n\
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpttpjortd.php:23\n\
    Stack trace:\n#0 /tmp/tmpttpjortd.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpttpjortd.php\
    \ on line 23\n"
  timestamp: 1659978445
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    $result = [];\n    $n1 = count($l1);\n    $n2 = count($l2);\n\
    \    $i1 = 0;\n    $i2 = 0;\n    while ($i1 < $n1 && $i2 < $n2) {\n        if\
    \ ($l1[$i1] == $l2[$i2]) {\n            $result[] = $l1[$i1];\n            $i1\
    \ += 1;\n            $i2 += 1;\n        } else if ($l1[$i1] < $l2[$i2]) {\n  \
    \          $i1 += 1;\n        } else {\n            $i2 += 1;\n        }\n   \
    \ }\n    return $result;\n}\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkmiinqmi.php:31\n\
    Stack trace:\n#0 /tmp/tmpkmiinqmi.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpkmiinqmi.php\
    \ on line 31\n"
  timestamp: 1659978445
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    sort($l1);\n    sort($l2);\n    return array_unique(array_intersect($l1,\
    \ $l2));\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxd1et_mc.php:18\n\
    Stack trace:\n#0 /tmp/tmpxd1et_mc.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpxd1et_mc.php\
    \ on line 18\n"
  timestamp: 1659978445
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n  sort($l1);\n  sort($l2);\n  return array_values(array_intersect($l1,\
    \ $l2));\n}\nprint_r(common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9,\
    \ 653, 121)));\nprint_r(common(array(5, 3, 2, 8), array(3, 2)));\necho \"\\n\"\
    ;\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7,\
    \ 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 5\n    [2] => 653\n)\nArray\n(\n   \
    \ [0] => 2\n    [1] => 3\n)\n\n"
  timestamp: 1659978445
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    $result = [];\n    for ($i = 0; $i < count($l1); $i++)\
    \ {\n        for ($j = 0; $j < count($l2); $j++) {\n            if ($l1[$i] ==\
    \ $l2[$j]) {\n                $result[] = $l1[$i];\n            }\n        }\n\
    \    }\n    return $result;\n}\nprint_r(common(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)));\necho '<br>';\nprint_r(common(array(5, 3,\
    \ 2, 8), array(3, 2)));\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 653\n    [2] => 5\n    [3] => 5\n)\n\
    <br>Array\n(\n    [0] => 3\n    [1] => 2\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpu4ghjwrb.php:26\nStack trace:\n#0 /tmp/tmpu4ghjwrb.php(32):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpu4ghjwrb.php on line 26\n"
  timestamp: 1659978445
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n\t$res = array();\n\tif (!$l1 || !$l2) {\n\t\treturn $res;\n\
    \t}\n\t$p1 = 0;\n\t$p2 = 0;\n\t$ln1 = count($l1);\n\t$ln2 = count($l2);\n\twhile\
    \ ($p1 < $ln1 && $p2 < $ln2) {\n\t\tif ($l1[$p1] < $l2[$p2]) {\n\t\t\t$p1++;\n\
    \t\t} else if ($l1[$p1] > $l2[$p2]) {\n\t\t\t$p2++;\n\t\t} else {\n\t\t\t$res[]\
    \ = $l1[$p1];\n\t\t\t$p1++;\n\t\t\t$p2++;\n\t\t}\n\t}\n\treturn $res;\n}\n\nfunction\
    \ candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653,\
    \ 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2,\
    \ 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu18l9jte.php:35\n\
    Stack trace:\n#0 /tmp/tmpu18l9jte.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpu18l9jte.php\
    \ on line 35\n"
  timestamp: 1659978445
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n\tif (empty($l1) || empty($l2)) {\n\t\treturn array();\n\
    \t}\n\t$l1 = array_unique($l1);\n\t$l2 = array_unique($l2);\n\tsort($l1);\n\t\
    sort($l2);\n\t$s1 = count($l1);\n\t$s2 = count($l2);\n\t$c = array();\n\t$i =\
    \ 0;\n\t$j = 0;\n\twhile ($i < $s1 && $j < $s2) {\n\t\tif ($l1[$i] == $l2[$j])\
    \ {\n\t\t\t$c[] = $l1[$i];\n\t\t\t$i++;\n\t\t\t$j++;\n\t\t} elseif ($l1[$i] <\
    \ $l2[$j]) {\n\t\t\t$i++;\n\t\t} else {\n\t\t\t$j++;\n\t\t}\n\t}\n\treturn $c;\n\
    }\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7,\
    \ 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978445
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    $hash1 = [];\n    $hash2 = [];\n    foreach ($l1 as\
    \ $val) {\n        $hash1[$val] = 1;\n    }\n    foreach ($l2 as $val) {\n   \
    \     $hash2[$val] = 1;\n    }\n    $common = [];\n    foreach ($hash1 as $k =>\
    \ $v) {\n        if (isset($hash2[$k])) {\n            $common[] = $k;\n     \
    \   }\n    }\n    sort($common);\n    return $common;\n}\n\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978445
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n\t$l1 = array_values(array_unique($l1));\n\t$l2 = array_values(array_unique($l2));\n\
    \t$res = array();\n\tfor ($i=0; $i<count($l1); $i++) {\n\t\tfor ($j=0; $j<count($l2);\
    \ $j++) {\n\t\t\tif ($l1[$i] == $l2[$j]) {\n\t\t\t\t$res[] = $l1[$i];\n\t\t\t\
    }\n\t\t}\n\t}\n\tsort($res);\n\treturn $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978445
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    // Write your code here.\n}\n\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr9mvlhjt.php:16\n\
    Stack trace:\n#0 /tmp/tmpr9mvlhjt.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpr9mvlhjt.php\
    \ on line 16\n"
  timestamp: 1659978445
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    return array_values(array_intersect($l1, $l2));\n}\n\
    \nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7,\
    \ 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv5e_987n.php:16\n\
    Stack trace:\n#0 /tmp/tmpv5e_987n.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpv5e_987n.php\
    \ on line 16\n"
  timestamp: 1659978444
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n  $l1_unique = array_unique($l1);\n  $l2_unique = array_unique($l2);\n\
    \  return array_intersect($l1_unique, $l2_unique);\n}\n\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvg5z7vm9.php:18\n\
    Stack trace:\n#0 /tmp/tmpvg5z7vm9.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpvg5z7vm9.php\
    \ on line 18\n"
  timestamp: 1659978445
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n  $n1 = count($l1);\n  $n2 = count($l2);\n  $i1 = 0;\n \
    \ $i2 = 0;\n  $result = array();\n  while ($i1 < $n1 && $i2 < $n2) {\n    if ($l1[$i1]\
    \ < $l2[$i2]) {\n      $i1++;\n    } else if ($l1[$i1] > $l2[$i2]) {\n      $i2++;\n\
    \    } else {\n      if (!$result || $result[count($result) - 1] != $l1[$i1])\
    \ {\n        $result[] = $l1[$i1];\n      }\n      $i1++;\n      $i2++;\n    }\n\
    \  }\n  return $result;\n}\n\n$l1 = array(1, 4, 3, 34, 653, 2, 5);\n$l2 = array(5,\
    \ 7, 1, 5, 9, 653, 121);\n$l3 = array(5, 3, 2, 8);\n$l4 = array(3, 2);\n\n$tests\
    \ = array(\n  array($l1, $l2),\n  array($l3, $l4),\n);\n\nforeach ($tests as $test)\
    \ {\n  $l1 = $test[0];\n  $l2 = $test[1];\n  printf(\"common(%s, %s) => %s\\n\"\
    , json_encode($l1), json_encode($l2), json_encode(common($l1, $l2)));\n}\nfunction\
    \ candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653,\
    \ 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2,\
    \ 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "common([1,4,3,34,653,2,5], [5,7,1,5,9,653,121]) => [653]\ncommon([5,3,2,8],\
    \ [3,2]) => []\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf9131unt.php:49\n\
    Stack trace:\n#0 /tmp/tmpf9131unt.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpf9131unt.php\
    \ on line 49\n"
  timestamp: 1659978445
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n  return array_intersect($l1, $l2);\n}\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkeyhk9ke.php:15\n\
    Stack trace:\n#0 /tmp/tmpkeyhk9ke.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpkeyhk9ke.php\
    \ on line 15\n"
  timestamp: 1659978445
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    return array_intersect($l1, $l2);\n}\n\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbzxu5vsl.php:16\n\
    Stack trace:\n#0 /tmp/tmpbzxu5vsl.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpbzxu5vsl.php\
    \ on line 16\n"
  timestamp: 1659978444
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    $result = [];\n    foreach ($l1 as $l) {\n        if (in_array($l, $l2))\
    \ {\n            $result[] = $l;\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\nprint_r(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]));\n\
    print_r(common([5, 3, 2, 8], [3, 2]));\nfunction candidate(...$args) {\n    return\
    \ common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 5\n    [2] => 653\n)\nArray\n(\n   \
    \ [0] => 2\n    [1] => 3\n)\n"
  timestamp: 1659978445
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n  $l = array_intersect($l1, $l2);\n  sort($l);\n  return\
    \ $l;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5,\
    \ 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978445
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n  $result = array();\n  $cnt = array();\n  foreach ($l1\
    \ as $e1) {\n    foreach ($l2 as $e2) {\n      if ($e1 == $e2) {\n        if (!array_key_exists($e1,\
    \ $cnt)) {\n          $cnt[$e1] = 0;\n        }\n        $cnt[$e1]++;\n      }\n\
    \    }\n  }\n  foreach ($cnt as $key => $value) {\n    if ($value == 2) {\n  \
    \    $result[] = $key;\n    }\n  }\n  sort($result);\n  return $result;\n}\n$a\
    \ = array(5, 3, 2, 8);\n$b = array(3, 2);\nprint_r(common($a, $b));\nprint_r(common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)));\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n    [0] => 5\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpqwvhhvht.php:37\nStack trace:\n#0 /tmp/tmpqwvhhvht.php(43):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpqwvhhvht.php on line 37\n"
  timestamp: 1659978445
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n\treturn array_unique(array_intersect($l1, $l2));\n}\n\n\
    function candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9,\
    \ 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdqexjkdo.php:16\n\
    Stack trace:\n#0 /tmp/tmpdqexjkdo.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpdqexjkdo.php\
    \ on line 16\n"
  timestamp: 1659978445
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n  $s1 = array_unique($l1);\n  $s2 = array_unique($l2);\n\
    \  $result = array();\n  foreach ($s1 as $v) {\n    if (in_array($v, $s2)) {\n\
    \      $result[] = $v;\n    }\n  }\n  sort($result);\n  return $result;\n}\n\n\
    function candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9,\
    \ 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978445
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n\t// TODO\n}\nfunction candidate(...$args) {\n    return\
    \ common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgmi16d51.php:15\n\
    Stack trace:\n#0 /tmp/tmpgmi16d51.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpgmi16d51.php\
    \ on line 15\n"
  timestamp: 1659978445
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n  $s1 = count($l1);\n  $s2 = count($l2);\n  if ($s1 == 0\
    \ || $s2 == 0) return [];\n  if ($s1 == 1) {\n    if (in_array($l1[0], $l2)) return\
    \ $l1;\n    return [];\n  }\n  if ($s2 == 1) {\n    if (in_array($l2[0], $l1))\
    \ return $l2;\n    return [];\n  }\n  $i = 0;\n  $j = 0;\n  $r = [];\n  while\
    \ ($i < $s1 && $j < $s2) {\n    if ($l1[$i] == $l2[$j]) {\n      if (!in_array($l1[$i],\
    \ $r)) {\n        $r[] = $l1[$i];\n      }\n      $i++;\n      $j++;\n    } elseif\
    \ ($l1[$i] < $l2[$j]) {\n      $i++;\n    } else {\n      $j++;\n    }\n  }\n\
    \  return $r;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp07owrii2.php:43\n\
    Stack trace:\n#0 /tmp/tmp07owrii2.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp07owrii2.php\
    \ on line 43\n"
  timestamp: 1659978445
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n\t$common = array();\n\t$l1 = array_unique($l1);\n\t$l2\
    \ = array_unique($l2);\n\t$l1 = array_values($l1);\n\t$l2 = array_values($l2);\n\
    \t$i = 0;\n\t$j = 0;\n\twhile($i < count($l1) && $j < count($l2)) {\n\t\tif($l1[$i]\
    \ < $l2[$j]) {\n\t\t\t$i++;\n\t\t} else if($l1[$i] > $l2[$j]) {\n\t\t\t$j++;\n\
    \t\t} else {\n\t\t\t$common[] = $l1[$i];\n\t\t\t$i++;\n\t\t\t$j++;\n\t\t}\n\t\
    }\n\treturn $common;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp93xrm7r8.php:34\n\
    Stack trace:\n#0 /tmp/tmp93xrm7r8.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp93xrm7r8.php\
    \ on line 34\n"
  timestamp: 1659978445
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n\t$l3 = array_intersect($l1, $l2);\n\tsort($l3);\n\treturn\
    \ $l3;\n}\necho '<pre>';\nprint_r(common(array(1, 4, 3, 34, 653, 2, 5), array(5,\
    \ 7, 1, 5, 9, 653, 121)));\necho '</pre>';\necho '<pre>';\nprint_r(common(array(5,\
    \ 3, 2, 8), array(3, 2)));\necho '</pre>';\nfunction candidate(...$args) {\n \
    \   return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => 1\n    [1] => 5\n    [2] => 653\n)\n</pre><pre>Array\n\
    (\n    [0] => 2\n    [1] => 3\n)\n</pre>"
  timestamp: 1659978445
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    $l3 = array_unique(array_merge($l1, $l2));\n    sort($l3);\n\
    \    return $l3;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt7w4rf50.php:18\n\
    Stack trace:\n#0 /tmp/tmpt7w4rf50.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpt7w4rf50.php\
    \ on line 18\n"
  timestamp: 1659978445
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    $out = array();\n    sort($l1);\n    sort($l2);\n  \
    \  $i = 0;\n    $j = 0;\n    while($i < count($l1) && $j < count($l2)) {\n   \
    \     if($l1[$i] < $l2[$j]) {\n            $i++;\n        } else if($l1[$i] >\
    \ $l2[$j]) {\n            $j++;\n        } else {\n            $out[] = $l1[$i];\n\
    \            $i++;\n            $j++;\n        }\n    }\n    return $out;\n}\n\
    \n$x = array(1, 2, 5, 7, 9, 34, 534, 123, 653, 5, 7, 43, 2, 5, 7, 1, 2, 5, 7,\
    \ 3, 2, 5, 7, 1, 2, 5, 7, 3, 2, 5, 7, 1, 2, 5, 7, 3, 2, 5, 7, 1, 2, 5, 7, 3, 2,\
    \ 5, 7, 1, 2, 5, 7, 3, 2, 5, 7, 1, 2, 5, 7, 3, 2, 5, 7, 1, 2, 5, 7, 3, 2, 5, 7,\
    \ 1, 2, 5, 7, 3, 2, 5, 7, 1, 2, 5, 7, 3, 2, 5, 7, 1, 2, 5, 7, 3, 2, 5, 7, 1, 2,\
    \ 5, 7, 3, 2, 5, 7, 1, 2, 5, 7, 3, 2, 5, 7, 1, 2, 5, 7, 3, 2, 5, 7, 1, 2, 5, 7,\
    \ 3, 2, 5, 7, 1, 2, 5, 7, 3, 2, 5, 7, 1, 2, 5, 7, 3, 2, 5, 7, 1, 2, 5, 7, 3, 2,\
    \ 5, 7, 1, 2, 5, 7, 3, 2, 5, 7, 1, 2, 5, 7, 3, 2, 5, 7, 1, 2, 5, 7, 3, 2, 5, 7,\
    \ 1, 2, 5\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5,\
    \ 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmp2_usjn5n.php
    on line 28

    '
  timestamp: 1659978445
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    $n1 = count($l1);\n    $n2 = count($l2);\n    $i = 0;\n\
    \    $j = 0;\n    $res = array();\n    while ($i < $n1 && $j < $n2) {\n      \
    \  if ($l1[$i] == $l2[$j]) {\n            $res[] = $l1[$i];\n            while\
    \ ($i < $n1 && $l1[$i] == $l1[$i + 1]) {\n                $i++;\n            }\n\
    \            while ($j < $n2 && $l2[$j] == $l2[$j + 1]) {\n                $j++;\n\
    \            }\n            $i++;\n            $j++;\n        } else if ($l1[$i]\
    \ < $l2[$j]) {\n            $i++;\n        } else {\n            $j++;\n     \
    \   }\n    }\n    return $res;\n}\n\nfunction candidate(...$args) {\n    return\
    \ common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpits4krx_.php:38\n\
    Stack trace:\n#0 /tmp/tmpits4krx_.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpits4krx_.php\
    \ on line 38\n"
  timestamp: 1659978445
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    return array_values(array_intersect($l1, $l2));\n}\n\
    \nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7,\
    \ 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv5e_987n.php:16\n\
    Stack trace:\n#0 /tmp/tmpv5e_987n.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpv5e_987n.php\
    \ on line 16\n"
  timestamp: 1659978444
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n  $s = [];\n  if ($l1) {\n    if ($l2) {\n      if ($l1[0]\
    \ < $l2[0]) {\n        $l1 = array_slice($l1, 1);\n      } else if ($l1[0] > $l2[0])\
    \ {\n        $l2 = array_slice($l2, 1);\n      } else {\n        $s[] = $l1[0];\n\
    \        $l1 = array_slice($l1, 1);\n        $l2 = array_slice($l2, 1);\n    \
    \  }\n      $s = array_merge($s, common($l1, $l2));\n    }\n  }\n  return $s;\n\
    }\necho \"common\";\nvar_dump(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9,\
    \ 653, 121]));\nvar_dump(common([5, 3, 2, 8], [3, 2]));\necho \"\\n\";\n\nfunction\
    \ candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653,\
    \ 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2,\
    \ 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "commonarray(1) {\n  [0]=>\n  int(653)\n}\narray(0) {\n}\n\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpzy5vd7j3.php:35\nStack trace:\n\
    #0 /tmp/tmpzy5vd7j3.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpzy5vd7j3.php\
    \ on line 35\n"
  timestamp: 1659978445
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    return array_unique(array_intersect($l1, $l2));\n}\n\
    \nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7,\
    \ 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4mz9rbbn.php:16\n\
    Stack trace:\n#0 /tmp/tmp4mz9rbbn.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp4mz9rbbn.php\
    \ on line 16\n"
  timestamp: 1659978444
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n\t$l1 = array_unique($l1);\n\t$l2 = array_unique($l2);\n\
    \tasort($l1);\n\tasort($l2);\n\t$l1 = array_values($l1);\n\t$l2 = array_values($l2);\n\
    \tif (count($l1) === 0 || count($l2) === 0) {\n\t\treturn array();\n\t}\n\t$common\
    \ = array();\n\t$i = 0;\n\t$j = 0;\n\t$end1 = count($l1) - 1;\n\t$end2 = count($l2)\
    \ - 1;\n\twhile (1) {\n\t\tif ($l1[$i] == $l2[$j]) {\n\t\t\t$common[] = $l1[$i];\n\
    \t\t\tif ($i == $end1 || $j == $end2) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t$i++;\n\
    \t\t\t$j++;\n\t\t} elseif ($l1[$i] < $l2[$j]) {\n\t\t\tif ($i == $end1) {\n\t\t\
    \t\tbreak;\n\t\t\t}\n\t\t\t$i++;\n\t\t} else {\n\t\t\tif ($j == $end2) {\n\t\t\
    \t\tbreak;\n\t\t\t}\n\t\t\t$j++;\n\t\t}\n\t}\n\treturn $common;\n}\nassert(common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) == array(1, 5, 653));\n\
    assert(common(array(5, 3, 2, 8), array(3, 2)) == array(2, 3));\n\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978445
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n\t$l = [];\n\twhile (count($l1) && count($l2)) {\n\t\tif\
    \ ($l1[0] == $l2[0]) {\n\t\t\t$l[] = array_shift($l1);\n\t\t\tarray_shift($l2);\n\
    \t\t} else if ($l1[0] < $l2[0]) {\n\t\t\tarray_shift($l1);\n\t\t} else {\n\t\t\
    \tarray_shift($l2);\n\t\t}\n\t}\n\treturn $l;\n}\n\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx9sd5_xj.php:27\n\
    Stack trace:\n#0 /tmp/tmpx9sd5_xj.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpx9sd5_xj.php\
    \ on line 27\n"
  timestamp: 1659978445
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    $c = array_intersect($l1, $l2);\n    sort($c);\n   \
    \ return $c;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978445
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n  $l1 = array_unique($l1);\n  $l2 = array_unique($l2);\n\
    \  $intersection = array_intersect($l1, $l2);\n  sort($intersection);\n  return\
    \ $intersection;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978445
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    $n = count($l1);\n    $m = count($l2);\n    if ($n ==\
    \ 0 || $m == 0) {\n        return array();\n    } else {\n        $l1_unique =\
    \ array_unique($l1);\n        $l2_unique = array_unique($l2);\n        sort($l1_unique);\n\
    \        sort($l2_unique);\n        if ($l1_unique[0] < $l2_unique[0]) {\n   \
    \         $lower = $l1_unique;\n            $upper = $l2_unique;\n        } else\
    \ {\n            $lower = $l2_unique;\n            $upper = $l1_unique;\n    \
    \    }\n        $result = array();\n        foreach ($lower as $el) {\n      \
    \      if (in_array($el, $upper)) {\n                $result[] = $el;\n      \
    \      }\n        }\n        return $result;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978445
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    $n1 = count($l1);\n    $n2 = count($l2);\n    sort($l1);\n\
    \    sort($l2);\n    $i = 0;\n    $j = 0;\n    $res = array();\n    while ($i\
    \ < $n1 && $j < $n2) {\n        if ($l1[$i] < $l2[$j]) {\n            $i++;\n\
    \        } else if ($l1[$i] > $l2[$j]) {\n            $j++;\n        } else {\n\
    \            $res[] = $l1[$i];\n            $i++;\n            $j++;\n       \
    \ }\n    }\n    return $res;\n}\n\nfunction candidate(...$args) {\n    return\
    \ common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978445
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    sort($l1);\n    sort($l2);\n    $len = min(count($l1),\
    \ count($l2));\n    $l = array();\n    for ($i = 0; $i < $len; $i++) {\n     \
    \   if ($l1[$i] == $l2[$i]) {\n            $l[] = $l1[$i];\n        }\n    }\n\
    \    return $l;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjshdj77w.php:25\n\
    Stack trace:\n#0 /tmp/tmpjshdj77w.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpjshdj77w.php\
    \ on line 25\n"
  timestamp: 1659978445
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n\t$l1 = array_unique($l1);\n\t$l2 = array_unique($l2);\n\
    \tsort($l1);\n\tsort($l2);\n\treturn array_values(array_intersect($l1, $l2));\n\
    }\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7,\
    \ 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978445
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n\treturn array_intersect($l1, $l2);\n}\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp92e8fdg2.php:15\n\
    Stack trace:\n#0 /tmp/tmp92e8fdg2.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp92e8fdg2.php\
    \ on line 15\n"
  timestamp: 1659978445
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    $result = [];\n    $l1 = array_unique($l1);\n    $l2\
    \ = array_unique($l2);\n    sort($l1);\n    sort($l2);\n    for ($i = 0; $i <\
    \ count($l1); $i++) {\n        for ($j = 0; $j < count($l2); $j++) {\n       \
    \     if ($l1[$i] == $l2[$j]) {\n                $result[] = $l1[$i];\n      \
    \      }\n        }\n    }\n    return $result;\n}\necho '<pre>';\nvar_dump(common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)));\nvar_dump(common(array(5,\
    \ 3, 2, 8), array(3, 2)));\necho '</pre>';\nfunction candidate(...$args) {\n \
    \   return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>array(3) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(5)\n  [2]=>\n  int(653)\n\
    }\narray(2) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(3)\n}\n</pre>"
  timestamp: 1659978445
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    $intersect = array_intersect($l1, $l2);\n    sort($intersect);\n    return\
    \ $intersect;\n}\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978445
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    $result = [];\n    $l1 = array_unique($l1);\n    $l2\
    \ = array_unique($l2);\n    foreach ($l1 as $el) {\n        if (in_array($el,\
    \ $l2)) {\n            $result[] = $el;\n        }\n    }\n    return $result;\n\
    }\n\necho \"<pre>\";\nprint_r(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9,\
    \ 653, 121]));\necho \"</pre>\";\n\nfunction candidate(...$args) {\n    return\
    \ common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => 1\n    [1] => 653\n    [2] => 5\n)\n</pre>\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp3nef5qo2.php:28\nStack\
    \ trace:\n#0 /tmp/tmp3nef5qo2.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp3nef5qo2.php\
    \ on line 28\n"
  timestamp: 1659978445
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n\t$result = array();\n\tforeach ($l1 as $el1) {\n\t\tforeach\
    \ ($l2 as $el2) {\n\t\t\tif ($el1 == $el2) {\n\t\t\t\t$result[] = $el1;\n\t\t\t\
    }\n\t\t}\n\t}\n\tsort($result);\n\treturn array_unique($result);\n}\n$l1 = array(1,\
    \ 4, 3, 34, 653, 2, 5);\n$l2 = array(5, 7, 1, 5, 9, 653, 121);\nprint_r(common($l1,\
    \ $l2));\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5,\
    \ 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 5\n    [3] => 653\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp4hm5ehp4.php:27\nStack trace:\n\
    #0 /tmp/tmp4hm5ehp4.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp4hm5ehp4.php\
    \ on line 27\n"
  timestamp: 1659978445
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    sort($l1);\n    sort($l2);\n    $i = 0;\n    $j = 0;\n    $res = array();\n\
    \    while ($i < count($l1) && $j < count($l2)) {\n        if ($l1[$i] < $l2[$j])\
    \ {\n            $i++;\n        } else if ($l1[$i] > $l2[$j]) {\n            $j++;\n\
    \        } else {\n            $res[] = $l1[$i];\n            $i++;\n        \
    \    $j++;\n        }\n    }\n    return $res;\n}\nprint_r(common(array(1, 4,\
    \ 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)));\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 5\n    [2] => 653\n)\n"
  timestamp: 1659978445
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    // TODO: your code here\n}\n\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp965d79wy.php:16\n\
    Stack trace:\n#0 /tmp/tmp965d79wy.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp965d79wy.php\
    \ on line 16\n"
  timestamp: 1659978445
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n  // return array_unique(array_intersect($l1, $l2));\n \
    \ $hash = array();\n  foreach ($l1 as $i) {\n    $hash[$i] = True;\n  }\n  $result\
    \ = array();\n  foreach ($l2 as $i) {\n    if (array_key_exists($i, $hash)) {\n\
    \      $result[] = $i;\n    }\n  }\n  return array_unique($result);\n}\n\nfunction\
    \ candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653,\
    \ 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2,\
    \ 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphgehcenn.php:27\n\
    Stack trace:\n#0 /tmp/tmphgehcenn.php(33): test()\n#1 {main}\n  thrown in /tmp/tmphgehcenn.php\
    \ on line 27\n"
  timestamp: 1659978445
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    $s1 = array_unique($l1);\n    $s2 = array_unique($l2);\n\
    \    sort($s1);\n    sort($s2);\n    $i1 = 0;\n    $i2 = 0;\n    $s3 = array();\n\
    \    while($i1 < count($s1) && $i2 < count($s2)) {\n        if($s1[$i1] == $s2[$i2])\
    \ {\n            $s3[] = $s1[$i1];\n            $i1++;\n            $i2++;\n \
    \       } else if($s1[$i1] < $s2[$i2]) {\n            $i1++;\n        } else {\n\
    \            $i2++;\n        }\n    }\n    return $s3;\n}\n$input = array(1, 4,\
    \ 3, 34, 653, 2, 5);\n$input2 = array(5, 7, 1, 5, 9, 653, 121);\nprint_r(common($input,\
    \ $input2));\necho \"\\n\";\n\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 5\n    [2] => 653\n)\n\n"
  timestamp: 1659978445
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n  $unique = array_unique(array_merge($l1, $l2));\n  $common\
    \ = array();\n  foreach ($unique as $i) {\n    if (in_array($i, $l1) && in_array($i,\
    \ $l2)) {\n      $common[] = $i;\n    }\n  }\n  sort($common);\n  return $common;\n\
    }\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7,\
    \ 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978445
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    $res = [];\n    foreach ($l1 as $item) {\n        if\
    \ (in_array($item, $l2)) {\n            $res[] = $item;\n        }\n    }\n  \
    \  return array_unique($res);\n}\n\nfunction candidate(...$args) {\n    return\
    \ common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjx2nl0ni.php:22\n\
    Stack trace:\n#0 /tmp/tmpjx2nl0ni.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpjx2nl0ni.php\
    \ on line 22\n"
  timestamp: 1659978445
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    $m = min(count($l1), count($l2));\n    $first = [];\n\
    \    $second = [];\n    $i = 0;\n    while ($i < $m) {\n        $first[] = $l1[$i];\n\
    \        $second[] = $l2[$i];\n        $i++;\n    }\n    $s_first = sort($first);\n\
    \    $s_second = sort($second);\n    $u_first = array_unique($s_first);\n    $u_second\
    \ = array_unique($s_second);\n    $result = [];\n    foreach ($u_first as $k =>\
    \ $v) {\n        if (in_array($v, $u_second)) {\n            $result[] = $v;\n\
    \        }\n    }\n    return $result;\n}\nvar_dump(common(array(1, 4, 3, 34,\
    \ 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)));\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: array_unique(): Argument #1 ($array)\
    \ must be of type array, bool given in /tmp/tmpp6dekpgf.php:19\nStack trace:\n\
    #0 /tmp/tmpp6dekpgf.php(19): array_unique(true)\n#1 /tmp/tmpp6dekpgf.php(29):\
    \ common(Array, Array)\n#2 {main}\n  thrown in /tmp/tmpp6dekpgf.php on line 19\n"
  timestamp: 1659978445
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    return array_intersect($l1, $l2);\n}\nfunction candidate(...$args) {\n  \
    \  return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppjabdmg6.php:17\n\
    Stack trace:\n#0 /tmp/tmppjabdmg6.php(23): test()\n#1 {main}\n  thrown in /tmp/tmppjabdmg6.php\
    \ on line 17\n"
  timestamp: 1659978445
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    return array_values(array_intersect($l1, $l2));\n}\n\
    \nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7,\
    \ 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv5e_987n.php:16\n\
    Stack trace:\n#0 /tmp/tmpv5e_987n.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpv5e_987n.php\
    \ on line 16\n"
  timestamp: 1659978444
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    $len1 = count($l1);\n    $len2 = count($l2);\n    $result = [];\n    for\
    \ ($i = 0; $i < $len1; $i++) {\n        for ($j = 0; $j < $len2; $j++) {\n   \
    \         if ($l1[$i] == $l2[$j]) {\n                $result[] = $l1[$i];\n  \
    \          }\n        }\n    }\n    return $result;\n}\n$list1 = [1, 2, 3, 2,\
    \ 1, 2, 3, 2, 1];\n$list2 = [2, 2, 3, 2, 1, 2, 3, 2, 1];\n$list3 = [1, 2, 3, 2,\
    \ 1, 2, 3, 2, 1];\n$list4 = [1, 2, 3, 2, 1, 2, 3, 2, 1];\n\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 3 in /tmp/tmp3sa946pb.php on line 15\n\n\
    Warning: Undefined array key 3 in /tmp/tmp3sa946pb.php on line 15\n\nWarning:\
    \ Undefined array key 3 in /tmp/tmp3sa946pb.php on line 15\n\nWarning: Undefined\
    \ array key 3 in /tmp/tmp3sa946pb.php on line 15\n\nWarning: Undefined array key\
    \ 3 in /tmp/tmp3sa946pb.php on line 15\n\nWarning: Undefined array key 3 in /tmp/tmp3sa946pb.php\
    \ on line 15\n\nWarning: Undefined array key 3 in /tmp/tmp3sa946pb.php on line\
    \ 15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3sa946pb.php:32\n\
    Stack trace:\n#0 /tmp/tmp3sa946pb.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp3sa946pb.php\
    \ on line 32\n"
  timestamp: 1659978445
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n  $l1 = array_flip($l1);\n  $l2 = array_flip($l2);\n  $l1\
    \ = array_intersect_key($l1, $l2);\n  return array_keys($l1);\n}\n\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppg8ew8zz.php:19\n\
    Stack trace:\n#0 /tmp/tmppg8ew8zz.php(25): test()\n#1 {main}\n  thrown in /tmp/tmppg8ew8zz.php\
    \ on line 19\n"
  timestamp: 1659978445
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    return array_unique(array_intersect($l1, $l2));\n}\n\
    function candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9,\
    \ 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj9ajhdbt.php:15\n\
    Stack trace:\n#0 /tmp/tmpj9ajhdbt.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpj9ajhdbt.php\
    \ on line 15\n"
  timestamp: 1659978445
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n  $m = array_flip($l1);\n  $a = array();\n  foreach ($l2\
    \ as $e)\n    if (isset($m[$e]))\n      $a[] = $e;\n  return $a;\n}\n\nassert(common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) == array(1, 5, 653));\n\
    assert(common(array(5, 3, 2, 8), array(3, 2)) == array(2, 3));\n\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught AssertionError: assert(common([1, 4, 3, 34, 653,\
    \ 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]) in /tmp/tmp2mxm9ey0.php:16\n\
    Stack trace:\n#0 /tmp/tmp2mxm9ey0.php(16): assert(false, 'assert(common([...')\n\
    #1 {main}\n  thrown in /tmp/tmp2mxm9ey0.php on line 16\n"
  timestamp: 1659978445
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n\t$s = array_intersect($l1, $l2);\n\tsort($s);\n\treturn\
    \ $s;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5,\
    \ 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978444
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n\tsort($l1);\n\tsort($l2);\n\t$a = 0;\n\t$b = 0;\n\t$n =\
    \ array();\n\twhile ($a < count($l1) && $b < count($l2)) {\n\t\tif ($l1[$a] ==\
    \ $l2[$b]) {\n\t\t\t$n[] = $l1[$a];\n\t\t\t$a++;\n\t\t\t$b++;\n\t\t} else if ($l1[$a]\
    \ < $l2[$b]) {\n\t\t\t$a++;\n\t\t} else {\n\t\t\t$b++;\n\t\t}\n\t}\n\treturn $n;\n\
    }\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7,\
    \ 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978445
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    $result = [];\n    sort($l1);\n    sort($l2);\n    $len1\
    \ = count($l1);\n    $len2 = count($l2);\n    for ($i = 0, $j = 0; $i < $len1\
    \ && $j < $len2; ) {\n        if ($l1[$i] === $l2[$j]) {\n            $result[]\
    \ = $l1[$i];\n            $i++;\n            $j++;\n        } else if ($l1[$i]\
    \ < $l2[$j]) {\n            $i++;\n        } else {\n            $j++;\n     \
    \   }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978445
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n\treturn array_intersect($l1, $l2);\n}\n\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprfmql_vv.php:16\n\
    Stack trace:\n#0 /tmp/tmprfmql_vv.php(22): test()\n#1 {main}\n  thrown in /tmp/tmprfmql_vv.php\
    \ on line 16\n"
  timestamp: 1659978444
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    $array1 = array_unique($l1);\n    $array2 = array_unique($l2);\n\
    \    $common_elements = array();\n    foreach ($array1 as $element) {\n      \
    \  if (in_array($element, $array2)) {\n            $common_elements[] = $element;\n\
    \        }\n    }\n    sort($common_elements);\n    return $common_elements;\n\
    }\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7,\
    \ 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978445
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    $res = [];\n    sort($l1);\n    sort($l2);\n    $i =\
    \ 0;\n    $j = 0;\n    while ($i < count($l1) && $j < count($l2)) {\n        if\
    \ ($l1[$i] == $l2[$j]) {\n            $res[] = $l1[$i];\n            $i++;\n \
    \           $j++;\n        } else if ($l1[$i] < $l2[$j]) {\n            $i++;\n\
    \        } else {\n            $j++;\n        }\n    }\n    return $res;\n}\n\n\
    echo '<pre>';\nvar_dump(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653,\
    \ 121]));\nvar_dump(common([5, 3, 2, 8], [3, 2]));\necho '</pre>';\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>array(3) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(5)\n  [2]=>\n  int(653)\n\
    }\narray(2) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(3)\n}\n</pre>"
  timestamp: 1659978445
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    $result = [];\n    foreach ($l1 as $x) {\n        if (in_array($x, $l2))\
    \ {\n            $result[] = $x;\n        }\n    }\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9,\
    \ 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdq8xn0w3.php:24\n\
    Stack trace:\n#0 /tmp/tmpdq8xn0w3.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpdq8xn0w3.php\
    \ on line 24\n"
  timestamp: 1659978445
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    $result = [];\n    $uniq = [];\n    foreach ($l1 as\
    \ $i) {\n        foreach ($l2 as $j) {\n            if ($i == $j) {\n        \
    \        if (!in_array($i, $uniq)) {\n                    $result[] = $i;\n  \
    \                  $uniq[] = $i;\n                }\n            }\n        }\n\
    \    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978445
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    $l1_unique = array_unique($l1);\n    $l2_unique = array_unique($l2);\n\
    \    $l1_sort = sort($l1_unique);\n    $l2_sort = sort($l2_unique);\n    $l3 =\
    \ array_intersect($l1_unique, $l2_unique);\n    sort($l3);\n    return $l3;\n\
    }\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7,\
    \ 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978445
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    $list = [];\n    $index = 0;\n    foreach ($l1 as $item) {\n        if (in_array($item,\
    \ $l2)) {\n            $list[$index] = $item;\n            $index++;\n       \
    \ }\n    }\n    sort($list);\n    return $list;\n}\n\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978445
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n  $r1 = array_unique($l1);\n  $r2 = array_unique($l2);\n\
    \  $r3 = array_intersect($r1, $r2);\n  sort($r3);\n  return $r3;\n}\n\nfunction\
    \ candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653,\
    \ 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2,\
    \ 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978445
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    // Sort\n    $a1 = sort_list($l1);\n    $a2 = sort_list($l2);\n\
    \    // Unique\n    $u1 = unique($a1);\n    $u2 = unique($a2);\n    // Iterate\n\
    \    $r = array();\n    foreach ($u1 as $e1) {\n        foreach ($u2 as $e2) {\n\
    \            if ($e1 == $e2)\n                $r[] = $e1;\n        }\n    }\n\
    \    return $r;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sort_list() in\
    \ /tmp/tmp4r19ksr1.php:9\nStack trace:\n#0 /tmp/tmp4r19ksr1.php(26): common(Array,\
    \ Array)\n#1 /tmp/tmp4r19ksr1.php(30): candidate(Array, Array)\n#2 /tmp/tmp4r19ksr1.php(36):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp4r19ksr1.php on line 9\n"
  timestamp: 1659978445
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n  $l3 = array_intersect($l1, $l2);\n  sort($l3);\n  return\
    \ $l3;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5,\
    \ 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978445
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n\t$result = array();\n\t$l1 = array_unique($l1);\n\t$l2\
    \ = array_unique($l2);\n\tsort($l1);\n\tsort($l2);\n\t$i = 0;\n\t$j = 0;\n\t$len1\
    \ = count($l1);\n\t$len2 = count($l2);\n\twhile ($i < $len1 && $j < $len2) {\n\
    \t\tif ($l1[$i] == $l2[$j]) {\n\t\t\t$result[] = $l1[$i];\n\t\t\t$i++;\n\t\t\t\
    $j++;\n\t\t} else if ($l1[$i] < $l2[$j]) {\n\t\t\t$i++;\n\t\t} else {\n\t\t\t\
    $j++;\n\t\t}\n\t}\n\treturn $result;\n}\n\nprint_r(common(array(1, 4, 3, 34, 653,\
    \ 2, 5), array(5, 7, 1, 5, 9, 653, 121)));\nprint_r(common(array(5, 3, 2, 8),\
    \ array(3, 2)));\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 5\n    [2] => 653\n)\nArray\n(\n   \
    \ [0] => 2\n    [1] => 3\n)\n"
  timestamp: 1659978445
- exit_code: 0
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n  $dict1 = [];\n  foreach ($l1 as $item)\n    $dict1[$item]\
    \ = True;\n  $dict2 = [];\n  foreach ($l2 as $item)\n    $dict2[$item] = True;\n\
    \  $result = [];\n  foreach ($dict1 as $item => $val)\n    if (isset($dict2[$item]))\n\
    \      $result[] = $item;\n  sort($result);\n  return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978445
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n\t$l1 = array_unique($l1);\n\t$l2 = array_unique($l2);\n\
    \tasort($l1);\n\tasort($l2);\n\t$common = array();\n\t$i = 0;\n\t$j = 0;\n\t$n1\
    \ = count($l1);\n\t$n2 = count($l2);\n\twhile ($i < $n1 && $j < $n2) {\n\t\tif\
    \ ($l1[$i] == $l2[$j]) {\n\t\t\t$common[] = $l1[$i];\n\t\t\t$i++;\n\t\t\t$j++;\n\
    \t\t} else if ($l1[$i] < $l2[$j]) {\n\t\t\t$i++;\n\t\t} else {\n\t\t\t$j++;\n\t\
    \t}\n\t}\n\treturn $common;\n}\n\nassert(array(1, 5, 653) == common(array(1, 4,\
    \ 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)));\nassert(array(2, 3) ==\
    \ common(array(5, 3, 2, 8), array(3, 2)));\nassert(array() == common(array(5,\
    \ 3, 2, 8), array(13, 12)));\nassert(array(1, 10, 100) == common(array(1, 10,\
    \ 100), array(1, 10, 100)));\nassert(array(1, 10, 100) == common(array(1, 10,\
    \ 100), array(1, 10, 100, 200)));\nassert(array(1, 10, 100) == common(array(1,\
    \ 10, 100, 200), array(1, 10, 100)));\nfunction candidate(...$args) {\n    return\
    \ common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 3 in /tmp/tmpit2b7ngm.php on line 18\n\n\
    Warning: Undefined array key 3 in /tmp/tmpit2b7ngm.php on line 22\n\nFatal error:\
    \ Uncaught AssertionError: assert([1, 5, 653] == common([1, 4, 3, 34, 653, 2,\
    \ 5], [5, 7, 1, 5, 9, 653, 121])) in /tmp/tmpit2b7ngm.php:31\nStack trace:\n#0\
    \ /tmp/tmpit2b7ngm.php(31): assert(false, 'assert([1, 5, 6...')\n#1 {main}\n \
    \ thrown in /tmp/tmpit2b7ngm.php on line 31\n"
  timestamp: 1659978445
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n  $l1 = array_unique($l1);\n  $l2 = array_unique($l2);\n\
    \  $len1 = count($l1);\n  $len2 = count($l2);\n  $i = 0;\n  $j = 0;\n  $result\
    \ = array();\n  while ($i < $len1 && $j < $len2) {\n    if ($l1[$i] < $l2[$j])\
    \ {\n      $i++;\n    } else if ($l1[$i] > $l2[$j]) {\n      $j++;\n    } else\
    \ {\n      $result[] = $l1[$i];\n      $i++;\n      $j++;\n    }\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 3 in /tmp/tmp5wv6i7ia.php on line 16\n\n\
    Warning: Undefined array key 3 in /tmp/tmp5wv6i7ia.php on line 18\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp5wv6i7ia.php:34\nStack trace:\n\
    #0 /tmp/tmp5wv6i7ia.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp5wv6i7ia.php\
    \ on line 34\n"
  timestamp: 1659978445
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n  $result = array();\n  $count = 0;\n  for ($i = 0; $i <\
    \ count($l1); $i++) {\n    if (!in_array($l1[$i], $result)) {\n      for ($j =\
    \ 0; $j < count($l2); $j++) {\n        if ($l1[$i] == $l2[$j]) {\n          $result[$count]\
    \ = $l1[$i];\n          $count++;\n        }\n      }\n    }\n  }\n  sort($result);\n\
    \  return $result;\n}\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp499rx8ao.php:28\n\
    Stack trace:\n#0 /tmp/tmp499rx8ao.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp499rx8ao.php\
    \ on line 28\n"
  timestamp: 1659978445
- exit_code: 255
  program: "<?php\n// Return sorted unique common elements for two arrays.\n// >>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1,\
    \ 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction\
    \ common($l1, $l2) {\n    $result = [];\n    foreach ($l1 as $e) {\n        if\
    \ (in_array($e, $l2)) {\n            $result[] = $e;\n        }\n    }\n    return\
    \ array_unique($result);\n}\n\nassert([1, 5, 653] == common([1, 4, 3, 34, 653,\
    \ 2, 5], [5, 7, 1, 5, 9, 653, 121]));\nassert([2, 3] == common([5, 3, 2, 8], [3,\
    \ 2]));\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7,\
    \ 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught AssertionError: assert([1, 5, 653] == common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])) in /tmp/tmpy49mgjm_.php:17\n\
    Stack trace:\n#0 /tmp/tmpy49mgjm_.php(17): assert(false, 'assert([1, 5, 6...')\n\
    #1 {main}\n  thrown in /tmp/tmpy49mgjm_.php on line 17\n"
  timestamp: 1659978445
