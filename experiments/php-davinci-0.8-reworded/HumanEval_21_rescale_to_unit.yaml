name: HumanEval_21_rescale_to_unit
language: php
prompt: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
  \ transform to that array,\n// such that the smallest number will become 0 and the\
  \ largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0, 5.0))\n\
  // array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers) {\n"
tests: "function candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
  \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0))\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9))\
  \ !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
  \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
  \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
  \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
  Test failed!\"); }\n}\n\ntest();"
completions: ["  $numbers = array_map(function($x) { return floatval($x); }, $numbers);\n\
    \  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function($x)\
    \ use ($min, $max) { return ($x - $min) / ($max - $min); }, $numbers);\n}\n",
  "    $numbers = array_values($numbers);\n    $max = max($numbers);\n    $min = min($numbers);\n\
    \    if ($max - $min == 0) {\n        return array_fill(0, count($numbers), 0);\n\
    \    }\n    $result = array();\n    foreach ($numbers as $number) {\n        $result[]\
    \ = ($number - $min) / ($max - $min);\n    }\n    return $result;\n}\n", "  $min\
    \ = min($numbers);\n  $max = max($numbers);\n  return array_map(function($number)\
    \ use ($min, $max) {\n    return ($number - $min) / ($max - $min);\n  }, $numbers);\n\
    }\n", "    // find min and max in array\n    $min = min($numbers);\n    $max =\
    \ max($numbers);\n    // apply linear transform with return of abs min and max\n\
    \    $return = [];\n    foreach ($numbers as $number) {\n        $return[] = ($number\
    \ - $min) / ($max - $min);\n    }\n    return $return;\n}\n", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $span = $max - $min;\n    $res = array();\n  \
    \  foreach ($numbers as $value) {\n        $res[] = ($value - $min) / $span;\n\
    \    }\n    return $res;\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n\
    \  if ($min == $max) return $numbers;\n  foreach ($numbers as $i => $number) {\n\
    \    $numbers[$i] = ($number - $min) / ($max - $min);\n  }\n  return $numbers;\n\
    }\n", "  $min = min($numbers);\n  $max = max($numbers);\n  $delta = $max - $min;\n\
    \  $transform = function($x) use ($min, $delta) {\n    return ($x - $min) / $delta;\n\
    \  };\n  return array_map($transform, $numbers);\n}\n", "    // Just in case...\n\
    \    if (count($numbers) < 2) {\n        return $numbers;\n    }\n\n    // Find\
    \ min and max\n    $min = $numbers[0];\n    $max = $numbers[0];\n    foreach ($numbers\
    \ as $value) {\n        if ($value < $min) {\n            $min = $value;\n   \
    \     }\n        if ($value > $max) {\n            $max = $value;\n        }\n\
    \    }\n\n    // Apply transform to numbers\n    $result = array();\n    $range\
    \ = $max - $min;\n    foreach ($numbers as $value) {\n        $new_value = ($value\
    \ - $min) / $range;\n        $result[] = $new_value;\n    }\n\n    return $result;\n\
    }", "    $count = count($numbers);\n    $min = min($numbers);\n    $max = max($numbers);\n\
    \    for ($i = 0; $i < $count; $i++) {\n        $numbers[$i] = ($numbers[$i] -\
    \ $min) / ($max - $min);\n    }\n    return $numbers;\n}", "    if (!is_array($numbers))\
    \ {\n        throw new InvalidArgumentException('The argument must be an array');\n\
    \    }\n    if (count($numbers) < 2) {\n        throw new InvalidArgumentException('The\
    \ argument must contain at least two elements');\n    }\n    $min = null;\n  \
    \  $max = null;\n    foreach ($numbers as $number) {\n        if ($min === null\
    \ || $number < $min) {\n            $min = $number;\n        }\n        if ($max\
    \ === null || $number > $max) {\n            $max = $number;\n        }\n    }\n\
    \    if ($min == $max) {\n        return $numbers;\n    }\n    $range = $max -\
    \ $min;\n    $output = array();\n    foreach ($numbers as $number) {\n       \
    \ $output[] = ($number - $min) / $range;\n    }\n    return $output;\n}\n", " \
    \   $min = min($numbers);\n    $max = max($numbers);\n    $multiplier = 1 / ($max\
    \ - $min);\n    foreach ($numbers as $key => $value) {\n        $numbers[$key]\
    \ = ($value - $min) * $multiplier;\n    }\n    return $numbers;\n}\n", "    $min\
    \ = min($numbers);\n    $max = max($numbers);\n    $range = $max - $min;\n   \
    \ $rescaled = array();\n    foreach ($numbers as $number) {\n        $rescaled[]\
    \ = ($number - $min) / $range;\n    }\n    return $rescaled;\n}\n", "  $max =\
    \ max($numbers);\n  $min = min($numbers);\n  $delta = $max - $min;\n  $result\
    \ = array();\n  foreach ($numbers as $number) {\n    $result[] = ($number - $min)\
    \ / $delta;\n  }\n  return $result;\n}\n", "  $min = min($numbers);\n  $max =\
    \ max($numbers);\n  $range = $max - $min;\n  $scaled = array();\n  foreach ($numbers\
    \ as $number) {\n    $scaled[] = ($number - $min) / $range;\n  }\n  return $scaled;\n\
    }\n", "    $result = array();\n    $min = min($numbers);\n    $max = max($numbers);\n\
    \    foreach ($numbers as $value) {\n        $result[] = ($value - $min) / ($max\
    \ - $min);\n    }\n    return $result;\n}", "  // TODO : Rescale to unit\n}",
  "    // if the length of the array is 1, throw an exception\n    if (count($numbers)\
    \ == 1) {\n        throw new Exception('Array length cannot be 1');\n    }\n\n\
    \    // get the smallest and largest number in the array\n    $min = min($numbers);\n\
    \    $max = max($numbers);\n\n    // perform linear scaling for each number in\
    \ the array\n    for ($i = 0; $i < count($numbers); $i++) {\n        $numbers[$i]\
    \ = ($numbers[$i] - $min) / ($max - $min);\n    }\n\n    return $numbers;\n}\n\
    \necho \"<pre>\";\nprint_r(rescale_to_unit(array(0.0, -4.0, 5.0, -1.0, 2.0)));\n\
    echo \"</pre>\";\n", "    $min = min($numbers);\n    $max = max($numbers);\n \
    \   return array_map(function($i) use ($min, $max) {\n        return ($i - $min)\
    \ / ($max - $min);\n    }, $numbers);\n}\n", "  $min = min($numbers);\n  $max\
    \ = max($numbers);\n  return array_map(function($a) use ($min, $max) {\n    return\
    \ ($a - $min) / ($max - $min);\n  }, $numbers);\n}\n", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $scale = $max - $min;\n    $return = array();\n\
    \    foreach ($numbers as $n) {\n        $return[] = ($n - $min) / $scale;\n \
    \   }\n    return $return;\n}"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
