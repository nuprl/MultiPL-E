name: HumanEval_163_generate_integers
language: php
prompt: "<?php\n// Given two positive integers a and b, return the even digits between\
  \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
  \ 8)\n// array(2, 4, 6, 8)\n// >>> generate_integers(8, 2)\n// array(2, 4, 6, 8)\n\
  // >>> generate_integers(10, 14)\n// array()\nfunction generate_integers($a, $b)\
  \ {\n"
tests: "function candidate(...$args) {\n    return generate_integers(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(2, 10) !== array(2, 4, 6, 8)) {\
  \ throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== array(2,\
  \ 4, 6, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(132, 2)\
  \ !== array(2, 4, 6, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17,\
  \ 89) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["  $even_numbers = [];\n  for ($i = $a; $i <= $b; $i++) {\n    if ($i\
    \ % 2 == 0) {\n      $even_numbers[] = $i;\n    }\n  }\n  return $even_numbers;\n\
    }\necho \"generate_integers(2, 8): \";\nvar_dump(generate_integers(2, 8));\necho\
    \ \"generate_integers(8, 2): \";\nvar_dump(generate_integers(8, 2));\necho \"\
    generate_integers(10, 14): \";\nvar_dump(generate_integers(10, 14));", "    if\
    \ ($a > $b) {\n        $c = $a;\n        $a = $b;\n        $b = $c;\n    }\n \
    \   $arr = [];\n    for ($i = $a; $i <= $b; $i++) {\n        if ($i % 2 == 0)\
    \ {\n            $arr[] = $i;\n        }\n    }\n    return $arr;\n}\n", "  $even_digits\
    \ = array();\n  if ($a < $b) {\n    for ($i = $a; $i <= $b; $i++) {\n      if\
    \ ($i % 2 == 0) {\n        array_push($even_digits, $i);\n      }\n    }\n  }\
    \ else {\n    for ($i = $a; $i >= $b; $i--) {\n      if ($i % 2 == 0) {\n    \
    \    array_push($even_digits, $i);\n      }\n    }\n  }\n  return $even_digits;\n\
    }", "  $even = function($n) { return $n % 2 == 0; };\n  return array_filter(range($a,\
    \ $b), $even);\n}", "\tif ($a > $b) {\n\t\t$tmp = $a;\n\t\t$a = $b;\n\t\t$b =\
    \ $tmp;\n\t}\n\t$out = array();\n\tfor ($i = $a; $i <= $b; $i++) {\n\t\tif ($i\
    \ % 2 == 0) {\n\t\t\t$out[] = $i;\n\t\t}\n\t}\n\treturn $out;\n}\n\necho implode(',\
    \ ', generate_integers(2, 8)) . \"\\n\";\necho implode(', ', generate_integers(8,\
    \ 2)) . \"\\n\";\necho implode(', ', generate_integers(10, 14)) . \"\\n\";", " \
    \   if ($a <= $b) {\n        $a1 = $a;\n        $b1 = $b;\n    } else {\n    \
    \    $a1 = $b;\n        $b1 = $a;\n    }\n    $result = [];\n    if ($a1 % 2 ==\
    \ 0) {\n        $result[] = $a1;\n    }\n    for ($i = $a1 + 1; $i < $b1; $i++)\
    \ {\n        if ($i % 2 == 0) {\n            $result[] = $i;\n        }\n    }\n\
    \    if ($b1 % 2 == 0) {\n        $result[] = $b1;\n    }\n    return $result;\n\
    }\nprint_r(generate_integers(4, 8));", "    $result = [];\n    if ($a > $b) {\n\
    \        $temp = $a;\n        $a = $b;\n        $b = $temp;\n    }\n    for ($i\
    \ = $a; $i <= $b; $i++) {\n        if ($i % 2 == 0) {\n            $result[] =\
    \ $i;\n        }\n    }\n    return $result;\n}\n\n$inputs = [\n    [\n      \
    \  'a' => 2,\n        'b' => 8,\n    ],\n    [\n        'a' => 8,\n        'b'\
    \ => 2,\n    ],\n    [\n        'a' => 10,\n        'b' => 14,\n    ],\n];\n\n\
    foreach ($inputs as $input) {\n    var_dump(generate_integers($input['a'], $input['b']));\n\
    }", "    $arr = [];\n    if ($a < $b) {\n        for ($i = $a; $i <= $b; $i++)\
    \ {\n            if ($i % 2 == 0) {\n                $arr[] = $i;\n          \
    \  }\n        }\n    } else {\n        for ($i = $a; $i >= $b; $i--) {\n     \
    \       if ($i % 2 == 0) {\n                $arr[] = $i;\n            }\n    \
    \    }\n    }\n    return $arr;\n}", "  $low = $a;\n  $high = $b;\n  if ($a >\
    \ $b) {\n    $low = $b;\n    $high = $a;\n  }\n  $result = array();\n  for ($i\
    \ = $low; $i <= $high; $i++) {\n    if ($i % 2 == 0) {\n      $result[] = $i;\n\
    \    }\n  }\n  return $result;\n}", "  if ($a > $b) {\n    $tmp = $a;\n    $a\
    \ = $b;\n    $b = $tmp;\n  }\n  $even_digits = array();\n  while ($a <= $b) {\n\
    \    if ($a % 2 == 0) {\n      $even_digits[] = $a;\n    }\n    $a++;\n  }\n \
    \ return $even_digits;\n}\n\nprint_r(generate_integers(2, 8));\nprint_r(generate_integers(8,\
    \ 2));\nprint_r(generate_integers(10, 14));", "  $result = [];\n  if ($a > $b)\
    \ {\n    $current = $b;\n    $end = $a;\n  } else {\n    $current = $a;\n    $end\
    \ = $b;\n  }\n  while ($current <= $end) {\n    if ($current % 2 == 0) {\n   \
    \   $result[] = $current;\n    }\n    $current++;\n  }\n  return $result;\n}\n\
    print_r(generate_integers(2, 8));\nprint_r(generate_integers(8, 2));\nprint_r(generate_integers(10,\
    \ 14));", "    if ($a > $b) {\n        list($a, $b) = [$b, $a];\n    }\n    $result\
    \ = [];\n    for ($i = $a; $i <= $b; $i++) {\n        if ($i % 2 === 0) {\n  \
    \          $result[] = $i;\n        }\n    }\n    return $result;\n}\necho '<pre>';\n\
    print_r(generate_integers(2, 8));\nprint_r(generate_integers(8, 2));\nprint_r(generate_integers(10,\
    \ 14));\necho '</pre>';", "  $even_array = array();\n  for ($i = $a; $i <= $b;\
    \ $i++) {\n    if ($i % 2 == 0) {\n      array_push($even_array, $i);\n    }\n\
    \  }\n  return $even_array;\n}\necho implode(', ', generate_integers(2, 8)) .\
    \ \"\\n\";\necho implode(', ', generate_integers(8, 2)) . \"\\n\";\necho implode(',\
    \ ', generate_integers(10, 14)) . \"\\n\";", "    $evens = [];\n    $begin = ($a\
    \ > $b) ? $b : $a;\n    $end = ($a > $b) ? $a : $b;\n    for ($i = $begin; $i\
    \ <= $end; $i++) {\n        if ($i % 2 == 0) {\n            $evens[] = $i;\n \
    \       }\n    }\n    return $evens;\n}\n", "  $numbers = [];\n  if ($a < $b)\
    \ {\n    $smaller = $a;\n    $larger = $b;\n  } else {\n    $smaller = $b;\n \
    \   $larger = $a;\n  }\n  for ($i = $smaller; $i <= $larger; $i++) {\n    if ($i\
    \ % 2 == 0) {\n      $numbers[] = $i;\n    }\n  }\n  return $numbers;\n}\nprint_r(generate_integers(10,\
    \ 14));", "  $result = [];\n  if ($a > $b) {\n    $first = $b;\n    $last = $a;\n\
    \  } else {\n    $first = $a;\n    $last = $b;\n  }\n  while ($first <= $last)\
    \ {\n    if ($first % 2 == 0) {\n      $result[] = $first;\n    }\n    $first++;\n\
    \  }\n  return $result;\n}\n", "  $result = [];\n  if ($a <= $b) {\n    for ($i\
    \ = $a; $i <= $b; $i++) {\n      if ($i % 2 == 0) {\n        $result[] = $i;\n\
    \      }\n    }\n  } else {\n    for ($i = $a; $i >= $b; $i--) {\n      if ($i\
    \ % 2 == 0) {\n        $result[] = $i;\n      }\n    }\n  }\n  return $result;\n\
    }\n", "  // TODO: Your code here!\n}", "  $result = [];\n  if ($a > $b) {\n  \
    \  $temp = $a;\n    $a = $b;\n    $b = $temp;\n  }\n  for ($i = $a; $i <= $b;\
    \ $i++) {\n    if ($i % 2 == 0) {\n      $result[] = $i;\n    }\n  }\n  return\
    \ $result;\n}", "\t$temp = $a;\n\t$return_array = array();\n\twhile($temp <= $b)\
    \ {\n\t\tif($temp % 2 == 0) {\n\t\t\tarray_push($return_array, $temp);\n\t\t}\n\
    \t\t$temp++;\n\t}\n\treturn $return_array;\n}\n\nprint_r(generate_integers(8,\
    \ 2));"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
