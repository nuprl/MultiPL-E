name: HumanEval_48_is_palindrome
language: php
prompt: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
  \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
  )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
  \ {\n"
tests: "function candidate(...$args) {\n    return is_palindrome(...$args);\n}\n\n\
  function test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
  Test failed!\"); }\n}\n\ntest();"
completions: ["    $text = strtolower($text);\n    $length = strlen($text);\n    for\
    \ ($i = 0; $i < $length / 2; $i++) {\n        if ($text[$i] != $text[$length -\
    \ $i - 1]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\necho is_palindrome(\"abba\") ? \"true\" : \"false\";", "\tif (strlen($text)\
    \ == 0) {\n\t\treturn true;\n\t}\n\tif (strlen($text) == 1) {\n\t\treturn true;\n\
    \t}\n\tif (strlen($text) == 2) {\n\t\tif ($text[0] == $text[1]) {\n\t\t\treturn\
    \ true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif ($text[0] == $text[strlen($text)\
    \ - 1]) {\n\t\treturn is_palindrome(substr($text, 1, strlen($text) - 2));\n\t\
    } else {\n\t\treturn false;\n\t}\n}", "    return $text == strrev($text);\n}\n",
  "  return $text == strrev($text);\n}\n", "    return $text == strrev($text);\n}\n",
  "\t$reversed = strrev($text);\n\treturn ($text == $reversed);\n}\n", "    $text\
    \ = strtolower($text);\n    $text = preg_replace('/[^a-z]/', '', $text);\n   \
    \ $length = strlen($text);\n    for ($i = 0; $i < $length; $i++) {\n        if\
    \ ($text[$i] != $text[$length - $i - 1]) {\n            return false;\n      \
    \  }\n    }\n    return true;\n}\n", "  // your solution here\n}\n", "\t$text=strtolower($text);\n\
    \t$text=str_replace(\" \",\"\",$text);\n\t$reversed=strrev($text);\n\tif($text==$reversed)\
    \ {\n\t\techo \"True\";\n\t} else {\n\t\techo \"False\";\n\t}\n}\n", "\t$length\
    \ = strlen($text);\n\tfor ($i = 0; $i < $length / 2; $i++) {\n\t\tif ($text[$i]\
    \ != $text[$length - $i - 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n\
    }\n", "\t$length = strlen($text);\n\t$i = 0;\n\twhile ($i < $length) {\n\t\tif\
    \ ($text[$i] != $text[$length - $i - 1]) {\n\t\t\treturn false;\n\t\t}\n\t\t$i++;\n\
    \t}\n\treturn true;\n}\n", "    if (strlen($text) <= 1)\n        return true;\n\
    \    if ($text[0] !== $text[strlen($text) - 1])\n        return false;\n    return\
    \ is_palindrome(substr($text, 1, strlen($text) - 2));\n}\n", "    $right = strlen($text)\
    \ - 1;\n    $left = 0;\n    while ($left < $right) {\n        if ($text[$left]\
    \ != $text[$right]) {\n            return false;\n        }\n        $left++;\n\
    \        $right--;\n    }\n    return true;\n}\n\necho is_palindrome(\"aba\")\
    \ . PHP_EOL;\necho is_palindrome(\"aaaaa\") . PHP_EOL;\necho is_palindrome(\"\
    zbcd\") . PHP_EOL;\n", "    $text = strtolower($text);\n    $text = preg_replace('/[^a-z]/',\
    \ '', $text);\n    $reverse = strrev($text);\n    return $text == $reverse;\n\
    }\n", "    $reversed = reverse($text);\n    if ($reversed == $text) {\n      \
    \  return true;\n    } else {\n        return false;\n    }\n}\n", "    // YOUR\
    \ CODE HERE\n}", "    $text = strtolower($text);\n    $len = strlen($text);\n\
    \    $midpoint = floor($len / 2);\n    for ($i = 0; $i < $midpoint; $i++) {\n\
    \        if ($text[$i] != $text[$len - 1 - $i]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}", "    if (empty($text)) {\n        return\
    \ true;\n    }\n    else {\n        $length = strlen($text);\n        if ($length\
    \ % 2 == 0) {\n            $left = substr($text, 0, ($length / 2));\n        \
    \    $right = substr($text, -($length / 2));\n        }\n        else {\n    \
    \        $left = substr($text, 0, floor($length / 2));\n            $right = substr($text,\
    \ -(floor($length / 2)));\n        }\n        $left_rev = strrev($left);\n   \
    \     if ($left_rev == $right) {\n            return true;\n        }\n      \
    \  else {\n            return false;\n        }\n    }\n}\n", "\tif ($text ==\
    \ strrev($text)) {\n\t\treturn true;\n\t}\n\treturn false;\n}", "\t\n\t$str_length\
    \ = strlen($text);\n\t$str_length_half = floor($str_length / 2);\n\t$str_rev =\
    \ strrev($text);\n\t\n\tfor ($i = 0; $i < $str_length_half; $i++) {\n\t\tif ($text[$i]\
    \ != $str_rev[$i]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
