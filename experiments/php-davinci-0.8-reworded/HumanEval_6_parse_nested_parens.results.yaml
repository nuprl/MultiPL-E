language: php
name: HumanEval_6_parse_nested_parens
results:
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  // Extract multiple groups of parenthesis and store them in an array\n\
    \  $paren_groups = preg_split(\"/\\s+/\", $paren_string);\n  // Initialize an\
    \ array for storing the max nesting level for each group\n  $result = array();\n\
    \  foreach ($paren_groups as $group) {\n    // Initialize the max nesting level\
    \ for each group as 0\n    $max_nesting_level = 0;\n    // Initialize the current\
    \ nesting level as 0\n    $current_nesting_level = 0;\n    // Loop through each\
    \ parenthesis of the group and update the current and max nesting level\n    foreach\
    \ (str_split($group) as $p) {\n      if ($p == '(') {\n        $current_nesting_level++;\n\
    \        if ($current_nesting_level > $max_nesting_level) {\n          $max_nesting_level\
    \ = $current_nesting_level;\n        }\n      } else {\n        $current_nesting_level--;\n\
    \      }\n    }\n    // Store the max nesting level of the group\n    $result[]\
    \ = $max_nesting_level;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823842
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $nested_parens = preg_split('/ /', $paren_string);\n    $output = array();\n\
    \    foreach ($nested_parens as $value) {\n        $max_nested_parens = 0;\n \
    \       $open_paren_cnt = 0;\n        $close_paren_cnt = 0;\n        $num_parentheses\
    \ = strlen($value);\n        for ($i = 0; $i < $num_parentheses; $i++) {\n   \
    \         if ($value[$i] == '(') {\n                $open_paren_cnt++;\n     \
    \           if ($open_paren_cnt - $close_paren_cnt > $max_nested_parens) {\n \
    \                   $max_nested_parens = $open_paren_cnt - $close_paren_cnt;\n\
    \                }\n            } else {\n                $close_paren_cnt++;\n\
    \            }\n        }\n        array_push($output, $max_nested_parens);\n\
    \    }\n    return $output;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823842
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_array = explode(\" \"\
    , $paren_string);\n    $paren_array_length = count($paren_array);\n    $max_nesting_array\
    \ = array();\n    for ($i = 0; $i < $paren_array_length; $i++) {\n        $temp_counter\
    \ = 0;\n        $temp_max_count = 0;\n        $temp_paren_count = strlen($paren_array[$i]);\n\
    \        for ($j = 0; $j < $temp_paren_count; $j++) {\n            if ($paren_array[$i][$j]\
    \ == \"(\") {\n                $temp_counter++;\n                if ($temp_counter\
    \ > $temp_max_count) {\n                    $temp_max_count = $temp_counter;\n\
    \                }\n            } else if ($paren_array[$i][$j] == \")\") {\n\
    \                $temp_counter--;\n            }\n        }\n        $max_nesting_array[]\
    \ = $temp_max_count;\n    }\n    return $max_nesting_array;\n}\n\n$paren_string\
    \ = \"() () () () ()\";\n$max_nesting_array = parse_nested_parens($paren_string);\n\
    var_dump($max_nesting_array);\n$paren_string = \"(()()) ((())) () ((())()())\"\
    ;\n$max_nesting_array = parse_nested_parens($paren_string);\nvar_dump($max_nesting_array);\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "array(5) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(1)\n  [2]=>\n  int(1)\n \
    \ [3]=>\n  int(1)\n  [4]=>\n  int(1)\n}\narray(4) {\n  [0]=>\n  int(2)\n  [1]=>\n\
    \  int(3)\n  [2]=>\n  int(1)\n  [3]=>\n  int(3)\n}\n"
  timestamp: 1659823842
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $groups\
    \ = explode(\"()\", $paren_string);\n    $group_levels = array();\n    foreach\
    \ ($groups as $group) {\n        $level = 0;\n        if ($group) {\n        \
    \    $level = floor(strlen($group) / 2) + 1;\n        }\n        $group_levels[]\
    \ = $level;\n    }\n    return $group_levels;\n}\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyu65wx9m.php:25\n\
    Stack trace:\n#0 /tmp/tmpyu65wx9m.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpyu65wx9m.php\
    \ on line 25\n"
  timestamp: 1659823842
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_list = explode(' ', $paren_string);\n    $paren_levels = array();\n\
    \    foreach ($paren_list as $paren) {\n        if (substr($paren, 0, 1) == '('\
    \ && substr($paren, -1) == ')') {\n            // remove outer parentheses\n \
    \           $paren = substr($paren, 1, -1);\n            $paren_level = 0;\n \
    \           $in_paren = false;\n            for ($i = 0; $i < strlen($paren);\
    \ $i++) {\n                if ($paren[$i] == '(') {\n                    $in_paren\
    \ = true;\n                    $paren_level++;\n                } else if ($paren[$i]\
    \ == ')') {\n                    $in_paren = false;\n                } else {\n\
    \                    if ($in_paren) {\n                        throw new Exception(\"\
    Invalid input string: $paren_string\");\n                    }\n             \
    \   }\n            }\n            if ($in_paren) {\n                throw new\
    \ Exception(\"Invalid input string: $paren_string\");\n            }\n       \
    \     $paren_levels[] = $paren_level;\n        } else {\n            throw new\
    \ Exception(\"Invalid input string: $paren_string\");\n        }\n    }\n    return\
    \ $paren_levels;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbglq4ds5.php:44\n\
    Stack trace:\n#0 /tmp/tmpbglq4ds5.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpbglq4ds5.php\
    \ on line 44\n"
  timestamp: 1659823842
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_arr = explode(' ', $paren_string);\n  $paren_depth = array();\n\
    \  foreach ($paren_arr as $paren) {\n    $depth = 0;\n    $max_depth = 0;\n  \
    \  foreach (str_split($paren) as $char) {\n      if ($char == '(') {\n       \
    \ $depth++;\n      } else {\n        $depth--;\n      }\n      if ($depth > $max_depth)\
    \ {\n        $max_depth = $depth;\n      }\n    }\n    $paren_depth[] = $max_depth;\n\
    \  }\n  return $paren_depth;\n}\n\necho json_encode(parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\"));\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[2,3,1,3]'
  timestamp: 1659823842
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_counts = array();\n  $paren_array = str_split($paren_string);\n\
    \  $paren_array_length = count($paren_array);\n  $paren_count = 0;\n  $prev_paren_char\
    \ = \"\";\n  for ($i = 0; $i < $paren_array_length; $i++) {\n    $paren_char =\
    \ $paren_array[$i];\n    if ($paren_char == \"(\") {\n      $paren_count++;\n\
    \    } else if ($paren_char == \")\") {\n      $paren_count--;\n    } else if\
    \ ($paren_char == \" \") {\n      if ($prev_paren_char == \")\") {\n        array_push($paren_counts,\
    \ $paren_count);\n        $paren_count = 0;\n      }\n    }\n    $prev_paren_char\
    \ = $paren_char;\n  }\n  if ($paren_count > 0) {\n    array_push($paren_counts,\
    \ $paren_count);\n  }\n  return $paren_counts;\n}\n\n$paren_string = \"(()())\
    \ ((())) () ((())()())\";\necho \"The maximum nested parenthesis level of each\
    \ group in $paren_string is \";\nprint_r(parse_nested_parens($paren_string));\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "The maximum nested parenthesis level of each group in (()()) ((())) ()\
    \ ((())()()) is Array\n(\n    [0] => 0\n    [1] => 0\n    [2] => 0\n)\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmp1c_jbids.php:41\nStack trace:\n\
    #0 /tmp/tmp1c_jbids.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp1c_jbids.php\
    \ on line 41\n"
  timestamp: 1659823842
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(\" \", $paren_string);\n  $output = array();\n \
    \ foreach ($paren_array as $key => $value) {\n    $level = 0;\n    $max_level\
    \ = 0;\n    for ($i = 0; $i < strlen($value); $i++) {\n      if ($value[$i] ==\
    \ \"(\") {\n        $level++;\n        if ($level > $max_level) {\n          $max_level\
    \ = $level;\n        }\n      } else if ($value[$i] == \")\") {\n        $level--;\n\
    \      }\n    }\n    $output[] = $max_level;\n  }\n  return $output;\n}\n\n$paren_string\
    \ = \"(()()) ((())) () ((())()())\";\nprint_r(parse_nested_parens($paren_string));\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 2\n    [1] => 3\n    [2] => 1\n    [3] => 3\n)\n"
  timestamp: 1659823842
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $result = array();\n\
    \    foreach ($paren_array as $paren_string) {\n        $paren_list = str_split($paren_string);\n\
    \        $stack = array();\n        $max_depth = 0;\n        foreach ($paren_list\
    \ as $paren) {\n            if ($paren == '(') {\n                array_push($stack,\
    \ $paren);\n                $max_depth = max($max_depth, count($stack));\n   \
    \         } else {\n                array_pop($stack);\n            }\n      \
    \  }\n        $result[] = $max_depth;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823842
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $group_levels = array();\n  $group_level = 0;\n  $n = strlen($paren_string);\n\
    \  for ($i = 0; $i < $n; $i++) {\n    $c = $paren_string[$i];\n    if ($c == '(')\
    \ {\n      $group_level++;\n    } else if ($c == ')') {\n      $group_levels[]\
    \ = $group_level;\n      $group_level--;\n    }\n  }\n  return $group_levels;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq15xq0ur.php:28\n\
    Stack trace:\n#0 /tmp/tmpq15xq0ur.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpq15xq0ur.php\
    \ on line 28\n"
  timestamp: 1659823842
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_depth = array();\n\n    // Create an array with all of the separate\
    \ groups of parens\n    $paren_groups = explode(\" \", $paren_string);\n\n   \
    \ // Loop through each of the paren groups and parse for max depth\n    foreach\
    \ ($paren_groups as $group) {\n        $paren_depth[] = parse_paren_depth($group);\n\
    \    }\n\n    return $paren_depth;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function parse_paren_depth()\
    \ in /tmp/tmp2c0rlb6a.php:15\nStack trace:\n#0 /tmp/tmp2c0rlb6a.php(22): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmp2c0rlb6a.php(26): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmp2c0rlb6a.php(31): test()\n#3 {main}\n  thrown in /tmp/tmp2c0rlb6a.php\
    \ on line 15\n"
  timestamp: 1659823842
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_arr = explode(' ', $paren_string);\n    $result = array();\n \
    \   foreach ($paren_arr as $item) {\n        $count = 0;\n        $level = 0;\n\
    \        for ($i = 0; $i < strlen($item); $i++) {\n            $char = $item[$i];\n\
    \            if ($char == '(') {\n                $count++;\n                if\
    \ ($count > $level) {\n                    $level = $count;\n                }\n\
    \            } else {\n                $count--;\n            }\n        }\n \
    \       $result[] = $level;\n    }\n    return $result;\n}\n\n$result = parse_nested_parens(\"\
    (()()) ((())) () ((())()())\");\necho '<pre>';\nprint_r($result);\necho '</pre>';\n\
    echo '<br>';\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => 2\n    [1] => 3\n    [2] => 1\n    [3] => 3\n\
    )\n</pre><br>"
  timestamp: 1659823842
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $output = array();\n\
    \    foreach ($paren_array as $paren) {\n        $current_level = 0;\n       \
    \ $max_level = 0;\n        $paren_length = strlen($paren);\n        for ($i =\
    \ 0; $i < $paren_length; $i++) {\n            if ($paren[$i] == \"(\") {\n   \
    \             $current_level++;\n                if ($current_level > $max_level)\
    \ {\n                    $max_level = $current_level;\n                }\n   \
    \         } else {\n                $current_level--;\n            }\n       \
    \ }\n        $output[] = $max_level;\n    }\n    return $output;\n}\n$paren_string\
    \ = \"(()()) ((())) () ((())()())\";\n$output = parse_nested_parens($paren_string);\n\
    print_r($output);\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 2\n    [1] => 3\n    [2] => 1\n    [3] => 3\n)\n"
  timestamp: 1659823842
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    // Return an array of integers\n    $paren_arr = explode(\" \", $paren_string);\n\
    \    $result = array();\n    foreach ($paren_arr as $i) {\n        $nested_level\
    \ = 0;\n        $temp = 0;\n        for ($j = 0; $j < strlen($i); $j++) {\n  \
    \          if ($i[$j] == \"(\") {\n                $temp += 1;\n            }\
    \ else {\n                $temp -= 1;\n            }\n            if ($temp >\
    \ $nested_level) {\n                $nested_level = $temp;\n            }\n  \
    \      }\n        array_push($result, $nested_level);\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823842
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $groups = explode(' ', $paren_string);\n  $levels = array();\n  foreach\
    \ ($groups as $g) {\n    $count = 0;\n    $level = 0;\n    for ($i = 0; $i < strlen($g);\
    \ $i++) {\n      if ($g[$i] == '(') {\n        $count++;\n        if ($count >\
    \ $level) {\n          $level = $count;\n        }\n      } else if ($g[$i] ==\
    \ ')') {\n        $count--;\n      }\n    }\n    $levels[] = $level;\n  }\n  return\
    \ $levels;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823842
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $matches = [];\n    $paren_string = trim($paren_string);\n    if (strlen($paren_string)\
    \ == 0) {\n        return $matches;\n    }\n    // Match any group of nested parentheses\n\
    \    // Capture all groups: [1, 2, 3, ...]\n    $pattern = '/((\\()+((\\()*[^()]*)*(\\\
    ))+)+/';\n    preg_match_all($pattern, $paren_string, $matches);\n    $groups\
    \ = $matches[0];\n    $output = [];\n    foreach ($groups as $group) {\n     \
    \   // Maximum number of nested parentheses in a group\n        $num_parens =\
    \ preg_match_all('/\\(/', $group);\n        $output[] = $num_parens;\n    }\n\
    \    return $output;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq4s3v62q.php:32\n\
    Stack trace:\n#0 /tmp/tmpq4s3v62q.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpq4s3v62q.php\
    \ on line 32\n"
  timestamp: 1659823842
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $max = 0;\n    $max_arr = array();\n    $paren_array = explode(\" \"\
    , $paren_string);\n    foreach ($paren_array as $paren_string) {\n        $nested_level\
    \ = 0;\n        for ($i = 0; $i < strlen($paren_string); $i++) {\n           \
    \ if ($paren_string[$i] == \"(\") {\n                $nested_level++;\n      \
    \      } else if ($paren_string[$i] == \")\") {\n                $nested_level--;\n\
    \            }\n        }\n        $max_arr[] = $nested_level;\n    }\n    return\
    \ $max_arr;\n}\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpefc0i629.php:29\n\
    Stack trace:\n#0 /tmp/tmpefc0i629.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpefc0i629.php\
    \ on line 29\n"
  timestamp: 1659823842
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $max_paren_array =\
    \ array();\n    foreach ($paren_array as $paren) {\n        $max_paren_array[]\
    \ = get_nested_parens($paren);\n    }\n    return $max_paren_array;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_nested_parens()\
    \ in /tmp/tmpq2z5xgzf.php:11\nStack trace:\n#0 /tmp/tmpq2z5xgzf.php(17): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmpq2z5xgzf.php(21): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmpq2z5xgzf.php(26): test()\n#3 {main}\n  thrown in /tmp/tmpq2z5xgzf.php\
    \ on line 11\n"
  timestamp: 1659823842
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_arr = explode(' ', $paren_string);\n    $max_nesting = 0;\n  \
    \  $nested_groups = array();\n    foreach ($paren_arr as $group) {\n        $len\
    \ = strlen($group);\n        $nesting = 0;\n        for ($i = 0; $i < $len; $i++)\
    \ {\n            if ($group[$i] == '(') {\n                $nesting++;\n     \
    \       } else if ($group[$i] == ')') {\n                $nesting--;\n       \
    \     }\n        }\n        $nested_groups[] = $nesting;\n    }\n    return $nested_groups;\n\
    }\n\n$group_string = \"(()()) ((())) () ((())()())\";\n$result = parse_nested_parens($group_string);\n\
    print_r($result);\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 0\n    [1] => 0\n    [2] => 0\n    [3] => 0\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpl2hzzssc.php:34\nStack\
    \ trace:\n#0 /tmp/tmpl2hzzssc.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpl2hzzssc.php\
    \ on line 34\n"
  timestamp: 1659823842
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $result = array();\n    $paren_array = explode(\" \", $paren_string);\n\
    \    foreach ($paren_array as $paren) {\n        $num_parens = 0;\n        $max_parens\
    \ = 0;\n        $curr_char = \"\";\n        for ($i = 0; $i < strlen($paren);\
    \ $i++) {\n            $curr_char = $paren[$i];\n            if ($curr_char ==\
    \ \"(\") {\n                $num_parens++;\n            } else if ($curr_char\
    \ == \")\") {\n                $num_parens--;\n            }\n            if ($num_parens\
    \ > $max_parens) {\n                $max_parens = $num_parens;\n            }\n\
    \        }\n        array_push($result, $max_parens);\n    }\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823842
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $max_depth\
    \ = 0;\n    $depth = 0;\n    $paren_depth = array();\n    for ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n        if ($paren_string[$i] == '(') {\n            $depth++;\n  \
    \          if ($depth > $max_depth) {\n                $max_depth = $depth;\n\
    \            }\n        } else if ($paren_string[$i] == ')') {\n            $paren_depth[]\
    \ = $depth;\n            $depth--;\n        }\n    }\n    return $paren_depth;\n\
    }\n\n$input = \"(()()) ((())) () ((())()())\";\necho '<pre>';\nprint_r(parse_nested_parens($input));\n\
    echo '</pre>';\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => 2\n    [1] => 2\n    [2] => 1\n    [3] => 3\n\
    \    [4] => 2\n    [5] => 1\n    [6] => 1\n    [7] => 3\n    [8] => 2\n    [9]\
    \ => 2\n    [10] => 2\n    [11] => 1\n)\n</pre>\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpvff0r78a.php:36\nStack trace:\n#0 /tmp/tmpvff0r78a.php(41):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpvff0r78a.php on line 36\n"
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $results = array();\n    $paren_strings = explode(\" \", $paren_string);\n\
    \    foreach ($paren_strings as $paren_string) {\n        $level = 0;\n      \
    \  $max = 0;\n        for ($i = 0; $i < strlen($paren_string); $i++) {\n     \
    \       $char = $paren_string[$i];\n            if ($char == \"(\") {\n      \
    \          $level++;\n                if ($level > $max) {\n                 \
    \   $max = $level;\n                }\n            } elseif ($char == \")\") {\n\
    \                $level--;\n            }\n        }\n        $results[] = $max;\n\
    \    }\n    return $results;\n}\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $paren_count = array();\n\
    \    foreach ($paren_array as $key => $string) {\n        $string_array = str_split($string);\n\
    \        $curr_count = 0;\n        $max_count = 0;\n        foreach ($string_array\
    \ as $key => $char) {\n            if ($char == \"(\") {\n                $curr_count\
    \ += 1;\n                if ($curr_count > $max_count) {\n                   \
    \ $max_count = $curr_count;\n                }\n            } elseif ($char ==\
    \ \")\") {\n                $curr_count -= 1;\n            }\n        }\n    \
    \    array_push($paren_count, $max_count);\n    }\n    return $paren_count;\n\
    }\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = trim($paren_string);\n  $paren_arr = array();\n  $paren_length\
    \ = strlen($paren_string);\n  for ($i = 0; $i < $paren_length; $i++) {\n    $cur_paren\
    \ = $paren_string[$i];\n    if ($cur_paren == '(') {\n      if (!isset($cur_paren_level))\
    \ {\n        $cur_paren_level = 1;\n      } else {\n        $cur_paren_level++;\n\
    \      }\n    } elseif ($cur_paren == ')') {\n      $cur_paren_level--;\n    \
    \  if ($cur_paren_level == 0) {\n        $paren_arr[] = $paren_count;\n      \
    \  unset($paren_count);\n      }\n    } elseif ($cur_paren == ' ') {\n      continue;\n\
    \    } else {\n      throw new Exception(\"Invalid input. Must be ( or ).\\n\"\
    );\n    }\n    if (isset($cur_paren_level)) {\n      if (!isset($paren_count))\
    \ {\n        $paren_count = 1;\n      } else {\n        $paren_count++;\n    \
    \  }\n    }\n  }\n  if (isset($cur_paren_level)) {\n    throw new Exception(\"\
    Invalid input. String must end with ).\\n\");\n  }\n  return $paren_arr;\n}\n\n\
    $paren_string = \"(()()) ((())) () ((())()())\";\necho \"Input: \" . $paren_string\
    \ . \"\\n\";\necho \"Output: \" . implode(\", \", parse_nested_parens($paren_string))\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Input: (()()) ((())) () ((())()())\n\nFatal error: Uncaught Exception:\
    \ Invalid input. String must end with ).\n in /tmp/tmpmteyrfnm.php:39\nStack trace:\n\
    #0 /tmp/tmpmteyrfnm.php(46): parse_nested_parens('(()()) ((())) (...')\n#1 {main}\n\
    \  thrown in /tmp/tmpmteyrfnm.php on line 39\n"
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    // Keep track of the output in an array\n    $output = array();\n   \
    \ // Break the string into an array, splitting on spaces\n    $group_strings =\
    \ explode(\" \", $paren_string);\n    // For each substring\n    foreach ($group_strings\
    \ as $group_string) {\n        // Initialize the level counter to 0\n        $level\
    \ = 0;\n        // Initialize the highest level encountered to 0\n        $max_level\
    \ = 0;\n        // Iterate through each character in the substring\n        for\
    \ ($i = 0; $i < strlen($group_string); $i++) {\n            // If we're at an\
    \ opening parenthesis, increment the level\n            if ($group_string[$i]\
    \ == \"(\") {\n                $level++;\n            }\n            // If we're\
    \ at a closing parenthesis, decrement the level\n            elseif ($group_string[$i]\
    \ == \")\") {\n                $level--;\n            }\n            // If we\
    \ have a new maximum level, save it as the new maximum\n            if ($level\
    \ > $max_level) {\n                $max_level = $level;\n            }\n     \
    \   }\n        // Add the maximum level found for this substring to the output\
    \ array\n        $output[] = $max_level;\n    }\n    // Return the output array\n\
    \    return $output;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $arr = str_split($paren_string);\n  $paren_counts = array();\n  $current_count\
    \ = 0;\n  foreach ($arr as $char) {\n    if ($char == \"(\") {\n      $current_count++;\n\
    \    } else if ($char == \")\") {\n      $paren_counts[] = $current_count;\n \
    \     $current_count = 0;\n    }\n  }\n  return $paren_counts;\n}\n\n$res = parse_nested_parens(\"\
    (()()) ((())) () ((())()())\");\necho implode(\", \", $res);\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "2, 1, 0, 3, 0, 0, 1, 3, 0, 1, 1, 0\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpuc37y1so.php:29\nStack trace:\n#0 /tmp/tmpuc37y1so.php(34):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpuc37y1so.php on line 29\n"
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    // Use a stack to help us keep track of nested parentheses.\n    $stack\
    \ = [];\n    $max_nesting = 0;\n    $nesting_count = 0;\n    $nesting_counts =\
    \ [];\n    for ($i = 0; $i < strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n\
    \        if ($char == '(') {\n            $stack[] = '(';\n            $nesting_count++;\n\
    \            $max_nesting = max($max_nesting, $nesting_count);\n        } else\
    \ if ($char == ')') {\n            $stack_top = array_pop($stack);\n         \
    \   if ($stack_top != '(') {\n                return false;\n            }\n \
    \           $nesting_count--;\n        } else if ($char == ' ') {\n          \
    \  if (empty($stack)) {\n                $nesting_counts[] = $max_nesting;\n \
    \               $max_nesting = 0;\n                $nesting_count = 0;\n     \
    \       }\n        }\n    }\n    if (!empty($stack)) {\n        return false;\n\
    \    }\n    return $nesting_counts;\n}\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp98_58hfu.php:43\n\
    Stack trace:\n#0 /tmp/tmp98_58hfu.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp98_58hfu.php\
    \ on line 43\n"
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_arr = explode(' ', $paren_string);\n    $result = array();\n \
    \   foreach ($paren_arr as $value) {\n        $result[] = parse_parens($value);\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function parse_parens()\
    \ in /tmp/tmpuawjd5z5.php:11\nStack trace:\n#0 /tmp/tmpuawjd5z5.php(17): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmpuawjd5z5.php(21): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmpuawjd5z5.php(26): test()\n#3 {main}\n  thrown in /tmp/tmpuawjd5z5.php\
    \ on line 11\n"
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_levels = [];\n    $max_level = -1;\n    $cur_level = 0;\n    $string_len\
    \ = strlen($paren_string);\n    $paren_strings = explode(\" \", $paren_string);\n\
    \    foreach ($paren_strings as $s) {\n        $paren_char_list = str_split($s);\n\
    \        foreach ($paren_char_list as $c) {\n            if ($c == \"(\") {\n\
    \                $cur_level++;\n                if ($cur_level > $max_level) {\n\
    \                    $max_level = $cur_level;\n                }\n           \
    \ } else if ($c == \")\") {\n                $cur_level--;\n            }\n  \
    \      }\n        $paren_levels[] = $max_level;\n        $max_level = -1;\n  \
    \      $cur_level = 0;\n    }\n    return $paren_levels;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $max_levels = array();\n  $paren_groups = explode(\" \", $paren_string);\n\
    \  foreach ($paren_groups as $group) {\n    $count = 0;\n    $len = strlen($group);\n\
    \    for ($i = 0; $i < $len; $i++) {\n      if ($group[$i] == \"(\") {\n     \
    \   $count++;\n      } else {\n        $count--;\n      }\n    }\n    $max_levels[]\
    \ = $count;\n  }\n  return $max_levels;\n}\nfunction candidate(...$args) {\n \
    \   return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3ucf0_zt.php:29\n\
    Stack trace:\n#0 /tmp/tmp3ucf0_zt.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp3ucf0_zt.php\
    \ on line 29\n"
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $counts = array();\n    $start = 0;\n    for ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n        if ($paren_string[$i] == '(') {\n            $start++;\n  \
    \      } else if ($paren_string[$i] == ')') {\n            $start--;\n       \
    \ } else if ($paren_string[$i] == ' ') {\n            $counts[] = $start;\n  \
    \      }\n    }\n    return $counts;\n}\n\nfunction candidate(...$args) {\n  \
    \  return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdpw5id23.php:27\n\
    Stack trace:\n#0 /tmp/tmpdpw5id23.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpdpw5id23.php\
    \ on line 27\n"
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = str_replace(' ', '', $paren_string);\n  $group_arr = explode(')(',\
    \ $paren_string);\n  foreach ($group_arr as $key => $value) {\n    if ($value[0]\
    \ !== '(' || substr($value, -1) !== ')') {\n      return null;\n    }\n    $count\
    \ = 0;\n    $max_count = 0;\n    for ($i = 0; $i < strlen($value); $i++) {\n \
    \     if ($value[$i] === '(') {\n        $count++;\n      } else {\n        $count--;\n\
    \      }\n      if ($count > $max_count) {\n        $max_count = $count;\n   \
    \   }\n    }\n    $count_arr[] = $max_count;\n  }\n  return $count_arr;\n}\n\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsdd9pbwm.php:36\n\
    Stack trace:\n#0 /tmp/tmpsdd9pbwm.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpsdd9pbwm.php\
    \ on line 36\n"
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $ret_arr = array();\n    $temp_arr = explode(\" \", $paren_string);\n\
    \    foreach ($temp_arr as $item) {\n        // find number of opening parentheses\n\
    \        $count_open = substr_count($item, \"(\");\n        // find number of\
    \ closing parentheses\n        $count_close = substr_count($item, \")\");\n  \
    \      // if number of opening and closing parentheses match, then\n        //\
    \ their difference is the maximum number of levels of nested parens\n        if\
    \ ($count_open == $count_close) {\n            $ret_arr[] = $count_open - $count_close;\n\
    \        }\n    }\n    return $ret_arr;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4a0we4y_.php:29\n\
    Stack trace:\n#0 /tmp/tmp4a0we4y_.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp4a0we4y_.php\
    \ on line 29\n"
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $result = array();\n  $last_open_paren_pos = 0;\n  $open_paren_count =\
    \ 0;\n  $max_nesting_level = 0;\n  for ($i = 0; $i < strlen($paren_string); $i++)\
    \ {\n    if ($paren_string[$i] == '(') {\n      $open_paren_count++;\n      if\
    \ ($open_paren_count > $max_nesting_level) {\n        $max_nesting_level = $open_paren_count;\n\
    \      }\n    } else if ($paren_string[$i] == ')') {\n      $open_paren_count--;\n\
    \    } else if ($paren_string[$i] == ' ') {\n      $result[] = $max_nesting_level;\n\
    \      $max_nesting_level = 0;\n      $open_paren_count = 0;\n    }\n  }\n  $result[]\
    \ = $max_nesting_level;\n  return $result;\n}\n\n$paren_string = \"(()()) ((()))\
    \ () ((())()())\";\nvar_dump(parse_nested_parens($paren_string));\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: "array(4) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(3)\n  [2]=>\n  int(1)\n \
    \ [3]=>\n  int(3)\n}\n"
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_arr = explode(' ', $paren_string);\n  $output = array();\n  foreach\
    \ ($paren_arr as $paren) {\n    $stack = array();\n    $flag = False;\n    for\
    \ ($i = 0; $i < strlen($paren); $i++) {\n      if ($paren[$i] == '(') {\n    \
    \    array_push($stack, $paren[$i]);\n      } elseif ($paren[$i] == ')') {\n \
    \       if (count($stack) > 0) {\n          array_pop($stack);\n        } else\
    \ {\n          $flag = True;\n          break;\n        }\n      }\n    }\n  \
    \  if ($flag == True) {\n      array_push($output, 0);\n    } else {\n      array_push($output,\
    \ count($stack));\n    }\n  }\n  return $output;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkala16o8.php:39\n\
    Stack trace:\n#0 /tmp/tmpkala16o8.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpkala16o8.php\
    \ on line 39\n"
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $result = array();\n    $paren_groups = explode(\" \", $paren_string);\n\
    \    foreach ($paren_groups as $group) {\n        $levels = $open = 0;\n     \
    \   for ($i = 0; $i < strlen($group); $i++) {\n            if ($group[$i] == \"\
    (\") {\n                $open++;\n                $levels = max($levels, $open);\n\
    \            } else {\n                $open--;\n            }\n        }\n  \
    \      $result[] = $levels;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $result = array();\n    $paren_string = str_replace('(', '( ', $paren_string);\n\
    \    $paren_string = str_replace(')', ' )', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_arr = explode(' ', $paren_string);\n    $stack = array();\n    $level\
    \ = 0;\n    foreach ($paren_arr as $paren) {\n        if ($paren == '(') {\n \
    \           array_push($stack, $paren);\n            $level++;\n        } else\
    \ if ($paren == ')') {\n            array_pop($stack);\n            array_push($result,\
    \ $level);\n            $level--;\n        }\n    }\n    return $result;\n}\n\n\
    $paren_string = \"(()()) ((())) () ((())()())\";\nprint_r(parse_nested_parens($paren_string));\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 2\n    [1] => 1\n    [2] => 3\n    [3] => 2\n    [4]\
    \ => 1\n    [5] => 1\n    [6] => 3\n    [7] => 2\n    [8] => 1\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmps9jav1oc.php:36\nStack trace:\n\
    #0 /tmp/tmps9jav1oc.php(41): test()\n#1 {main}\n  thrown in /tmp/tmps9jav1oc.php\
    \ on line 36\n"
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    // Input validation\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('((',\
    \ '(', $paren_string);\n    $paren_string = str_replace('))', ')', $paren_string);\n\
    \    $paren_string = str_replace(')()', ')', $paren_string);\n    $paren_string\
    \ = str_replace('()(', '(', $paren_string);\n    $paren_string = str_replace('(()',\
    \ '(', $paren_string);\n    $paren_string = str_replace('())', ')', $paren_string);\n\
    \    $paren_string = str_replace('()()', '', $paren_string);\n    $paren_string\
    \ = str_replace(')()()', ')', $paren_string);\n    $paren_string = str_replace('(()())',\
    \ '(', $paren_string);\n    $paren_string = str_replace('(()))', '(', $paren_string);\n\
    \    $paren_string = str_replace('((()))', '(', $paren_string);\n    $paren_string\
    \ = str_replace('((()))', '(', $paren_string);\n    $paren_string = str_replace('(((())))',\
    \ '(', $paren_string);\n    $paren_string = str_replace('((())(()))', '(', $paren_string);\n\
    \    $paren_string = str_replace('(()((()))())', '(', $paren_string);\n    $paren_string\
    \ = str_replace('(()()(()()))', '(', $paren_string);\n    $paren_string = str_replace('(((((())))))',\
    \ '(', $paren_string);\n    $paren_string = str_replace('((((()()))))', '(', $paren_string);\n\
    \    $paren_string = str_replace('(((()()())))', '(', $paren_string);\n    $paren_string\
    \ = str_replace('((()()())())', '(', $paren_string);\n    $paren_string = str_replace('(((())))((()))',\
    \ '(\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "(", expecting ")" in /tmp/tmpt56hzxaw.php
    on line 31

    '
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_arr = explode(' ', $paren_string);\n    foreach ($paren_arr as\
    \ $key => $element) {\n        $max_level = 0;\n        $level = 0;\n        for\
    \ ($i = 0; $i < strlen($element); $i++) {\n            if ($element[$i] == '(')\
    \ {\n                $level++;\n                if ($level > $max_level) {\n \
    \                   $max_level = $level;\n                }\n            } else\
    \ {\n                $level--;\n            }\n        }\n        $paren_arr[$key]\
    \ = $max_level;\n    }\n    return $paren_arr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $current_parenthesis_level = 0;\n    $paren_levels = array();\n    for\
    \ ($i = 0; $i < strlen($paren_string); $i++) {\n        if ($paren_string[$i]\
    \ == '(') {\n            $current_parenthesis_level++;\n        } else if ($paren_string[$i]\
    \ == ')') {\n            array_push($paren_levels, $current_parenthesis_level);\n\
    \            $current_parenthesis_level--;\n        }\n    }\n    return $paren_levels;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9a7sa2co.php:26\n\
    Stack trace:\n#0 /tmp/tmp9a7sa2co.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp9a7sa2co.php\
    \ on line 26\n"
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    // This is a very basic recursive descent parser.\n    // We scan a character\
    \ at a time, and keep track of our current \"state\" as a function.\n    // When\
    \ we hit a parenthesis, we increment or decrement the nesting level, and output\n\
    \    // that value when we hit the end of a group.\n    // Our state is represented\
    \ by a function:\n    //  * $state() scans the next character\n    //  * $state(depth)\
    \ emits the depth of the deepest nest and returns the new state\n    //  * $state(\"\
    end\") indicates the end of the string\n    $state = function($char = null) use\
    \ (&$state) {\n        static $nesting = 0;\n        static $max_nesting = 0;\n\
    \        static $group_start = true;\n        static $emit_depth = false;\n  \
    \      static $depth = 0;\n        static $init = true;\n        static $end =\
    \ false;\n        if ($init) {\n            $init = false;\n            if ($char\
    \ === null) {\n                return $state;\n            }\n        }\n    \
    \    if ($end) {\n            throw new Exception(\"Parser is at end of string\"\
    );\n        }\n        if ($emit_depth) {\n            $emit_depth = false;\n\
    \            $max_nesting = 0;\n            $nesting = 0;\n            $group_start\
    \ = true;\n            return $state($depth);\n        }\n        if ($char ===\
    \ \"end\") {\n            $end = true;\n            return $state($depth);\n \
    \       }\n        if ($char === \"(\") {\n            $nesting++;\n         \
    \   if ($nesting > $max_nesting) {\n                $max_nesting = $nesting;\n\
    \            }\n        } else if ($char === \")\") {\n            $nesting--;\n\
    \        } else if ($char === \" \") {\n            if ($group_start) {\n    \
    \            // Ignore spaces at the start of a group\n            } else {\n\
    \                $depth = $max_nesting;\n                $emit_depth = true;\n\
    \            }\n        } else {\n            throw new Exception(\"Unexpected\
    \ character\");\n        }\n        $group_start = false;\n        return\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmppzlxpolz.php on line 63

    '
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_levels = [];\n    $level = 0;\n    for ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n        if ($paren_string[$i] == '(') {\n            $level++;\n  \
    \      } else if ($paren_string[$i] == ')') {\n            $level--;\n       \
    \ } else if ($paren_string[$i] == ' ') {\n            array_push($paren_levels,\
    \ $level);\n            $level = 0;\n        }\n    }\n    array_push($paren_levels,\
    \ $level);\n    return $paren_levels;\n}\n\nfunction candidate(...$args) {\n \
    \   return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg8jhz2_7.php:29\n\
    Stack trace:\n#0 /tmp/tmpg8jhz2_7.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpg8jhz2_7.php\
    \ on line 29\n"
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $current_level = 0;\n    $max_level = 0;\n\
    \    foreach ($paren_array as $paren) {\n        if ($paren == \"(\") {\n    \
    \        $current_level++;\n            if ($current_level > $max_level) {\n \
    \               $max_level = $current_level;\n            }\n        } else {\n\
    \            $current_level--;\n        }\n    }\n    return $max_level;\n}\n\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfc2aulcw.php:30\n\
    Stack trace:\n#0 /tmp/tmpfc2aulcw.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpfc2aulcw.php\
    \ on line 30\n"
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $levels = [];\n    $open_parens = 0;\n    foreach (explode(' ', $paren_string)\
    \ as $paren_group) {\n        $open_parens = 0;\n        $current_level = 0;\n\
    \        for ($i = 0; $i < strlen($paren_group); $i++) {\n            if ($paren_group[$i]\
    \ == '(') {\n                $open_parens++;\n                $current_level =\
    \ max($current_level, $open_parens);\n            } else if ($paren_group[$i]\
    \ == ')') {\n                $open_parens--;\n            }\n        }\n     \
    \   $levels[] = $current_level;\n    }\n    return $levels;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $output = array();\n    $paren_strings = explode(\" \", $paren_string);\n\
    \    foreach ($paren_strings as $paren_str) {\n        $level = 0;\n        $max_level\
    \ = 0;\n        for ($i = 0; $i < strlen($paren_str); $i++) {\n            if\
    \ ($paren_str[$i] == \"(\") {\n                $level++;\n                if ($level\
    \ > $max_level) {\n                    $max_level = $level;\n                }\n\
    \            } else {\n                $level--;\n            }\n        }\n \
    \       $output[] = $max_level;\n    }\n    return $output;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $result = array();\n    $splitted_parens = explode(\" \", $paren_string);\n\
    \    foreach ($splitted_parens as $paren) {\n        $result[] = parse_single_parens($paren);\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function parse_single_parens()\
    \ in /tmp/tmpi4z6t69f.php:11\nStack trace:\n#0 /tmp/tmpi4z6t69f.php(17): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmpi4z6t69f.php(21): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmpi4z6t69f.php(26): test()\n#3 {main}\n  thrown in /tmp/tmpi4z6t69f.php\
    \ on line 11\n"
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = preg_split('/\\s+/', $paren_string);\n    $paren_depth\
    \ = array();\n    foreach ($paren_array as $paren_group) {\n        $stack = array();\n\
    \        $max_depth = 0;\n        $cur_depth = 0;\n        for ($i = 0; $i < strlen($paren_group);\
    \ $i++) {\n            if ($paren_group[$i] == '(') {\n                $cur_depth++;\n\
    \                if ($cur_depth > $max_depth) {\n                    $max_depth\
    \ = $cur_depth;\n                }\n            } else if ($paren_group[$i] ==\
    \ ')') {\n                if ($cur_depth > 0) {\n                    $cur_depth--;\n\
    \                }\n            }\n        }\n        $paren_depth[] = $max_depth;\n\
    \    }\n    return $paren_depth;\n}\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $result = array();\n\
    \    foreach ($paren_array as $group) {\n        $result[] = count_deepest_nested_parens($group);\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_deepest_nested_parens()\
    \ in /tmp/tmpspqx_eph.php:11\nStack trace:\n#0 /tmp/tmpspqx_eph.php(17): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmpspqx_eph.php(21): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmpspqx_eph.php(26): test()\n#3 {main}\n  thrown in /tmp/tmpspqx_eph.php\
    \ on line 11\n"
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $counts = array();\n    $paren_arr = str_split($paren_string);\n    $count\
    \ = 0;\n    foreach ($paren_arr as $char) {\n        if ($char == '(') {\n   \
    \         $count++;\n        } elseif ($char == ')') {\n            $counts[]\
    \ = $count;\n            $count = 0;\n        }\n    }\n    return $counts;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqd4_1hol.php:27\n\
    Stack trace:\n#0 /tmp/tmpqd4_1hol.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpqd4_1hol.php\
    \ on line 27\n"
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $res = array();\n\
    \    foreach ($paren_array as $paren) {\n        $paren_count = 0;\n        $nested_paren_count\
    \ = 0;\n        for ($i = 0; $i < strlen($paren); $i++) {\n            if ($paren[$i]\
    \ == \"(\") {\n                $paren_count++;\n                $nested_paren_count\
    \ = max($nested_paren_count, $paren_count);\n            } else if ($paren[$i]\
    \ == \")\") {\n                $paren_count--;\n            }\n        }\n   \
    \     $res[] = $nested_paren_count;\n    }\n    return $res;\n}\n\nprint_r(parse_nested_parens(\"\
    (()()) ((())) () ((())()())\"));\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 2\n    [1] => 3\n    [2] => 1\n    [3] => 3\n)\n"
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    // parse string into individual groups\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n    $group_parens\
    \ = explode(' ', $paren_string);\n    $parentheses_level = array();\n    foreach\
    \ ($group_parens as $group) {\n        $max_level = 0;\n        $current_level\
    \ = 0;\n        $error = false;\n        // iterate over each character in the\
    \ group\n        for ($i = 0; $i < strlen($group); $i++) {\n            $char\
    \ = $group[$i];\n            // if we have an opening paren, increase current\
    \ level and check max level\n            if ($char == '(') {\n               \
    \ $current_level++;\n                if ($current_level > $max_level) {\n    \
    \                $max_level = $current_level;\n                }\n           \
    \ }\n            // if we have a closing paren, decrease current level and check\
    \ if we end up below zero\n            else if ($char == ')') {\n            \
    \    $current_level--;\n                if ($current_level < 0) {\n          \
    \          $error = true;\n                    break;\n                }\n   \
    \         }\n            // if we find an invalid character, exit the loop\n \
    \           else {\n                $error = true;\n                break;\n \
    \           }\n        }\n        // if the group was formatted correctly and\
    \ the groups ended at a level of zero, add the max level to the array\n      \
    \  if (!$error && $current_level == 0) {\n            $parentheses_level[] = $max_level;\n\
    \        }\n        // otherwise return an empty array\n        else {\n     \
    \       return array();\n        }\n    }\n    return $parentheses_level;\n}\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_group = explode(\" \"\
    , $paren_string);\n    $nested_counts = array();\n    foreach ($paren_group as\
    \ $paren_group_i) {\n        $paren_group_i = trim($paren_group_i);\n        $max_nested_count\
    \ = 0;\n        $nested_count = 0;\n        $in_paren = false;\n        $paren_index\
    \ = 0;\n        while ($paren_index < strlen($paren_group_i)) {\n            $char\
    \ = $paren_group_i[$paren_index];\n            if ($char == '(') {\n         \
    \       $in_paren = true;\n                $nested_count++;\n                if\
    \ ($nested_count > $max_nested_count) {\n                    $max_nested_count\
    \ = $nested_count;\n                }\n            } else if ($char == ')') {\n\
    \                $in_paren = false;\n                $nested_count--;\n      \
    \      }\n            $paren_index++;\n        }\n        if ($in_paren || $nested_count\
    \ > 0) {\n            throw new Exception(\"Invalid parens at $paren_group_i\"\
    );\n        }\n        $nested_counts[] = $max_nested_count;\n    }\n    return\
    \ $nested_counts;\n}\necho implode(\", \", parse_nested_parens(\"(()()) ((()))\
    \ () ((())()())\"));\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 2, 3, 1, 3
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(\" \", $paren_string);\n  $depth_array = array();\n\
    \  foreach ($paren_array as $paren_group) {\n    $depth = 0;\n    $max_depth =\
    \ 0;\n    for ($i = 0; $i < strlen($paren_group); $i++) {\n      if ($paren_group[$i]\
    \ == \"(\") {\n        $depth++;\n      } else {\n        $depth--;\n      }\n\
    \      if ($depth > $max_depth) {\n        $max_depth = $depth;\n      }\n   \
    \ }\n    $depth_array[] = $max_depth;\n  }\n  return $depth_array;\n}\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    // Write your code here\n    $output = array();\n    $levels = array();\n\
    \    $level = 0;\n    $i = 0;\n    while ($i < strlen($paren_string)) {\n    \
    \    $char = $paren_string[$i];\n        if ($char == '(') {\n            $level\
    \ += 1;\n        } else if ($char == ')') {\n            $level -= 1;\n      \
    \  } else if ($char == ' ') {\n            array_push($output, max($levels));\n\
    \            $levels = array();\n            $level = 0;\n        }\n        array_push($levels,\
    \ $level);\n        $i += 1;\n    }\n    array_push($output, max($levels));\n\
    \    return $output;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $max_depth = [];\n  $current_depth = 0;\n  for ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n    if ($paren_string[$i] == '(') {\n      $current_depth++;\n    }\
    \ else if ($paren_string[$i] == ')') {\n      $current_depth--;\n    } else if\
    \ ($paren_string[$i] == ' ') {\n      $max_depth[] = $current_depth;\n      $current_depth\
    \ = 0;\n    }\n  }\n  return $max_depth;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3d48lzlo.php:28\n\
    Stack trace:\n#0 /tmp/tmp3d48lzlo.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp3d48lzlo.php\
    \ on line 28\n"
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_groups = explode(' ', $paren_string);\n    $max_nesting = [];\n\
    \    foreach ($paren_groups as $paren_group) {\n        // Intuition 1: Use stack\
    \ to keep track of '(' and ')'\n        // Intuition 2: The deepest nesting of\
    \ parenthesis is the number of '(' - number of ')'\n        $stack = [];\n   \
    \     $nesting = 0;\n        for ($i = 0; $i < strlen($paren_group); $i++) {\n\
    \            $char = $paren_group[$i];\n            if ($char == '(') {\n    \
    \            array_push($stack, $char);\n            } else if ($char == ')')\
    \ {\n                if (!empty($stack)) {\n                    array_pop($stack);\n\
    \                }\n            }\n            $nesting = count($stack);\n   \
    \     }\n        array_push($max_nesting, $nesting);\n    }\n    return $max_nesting;\n\
    }\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphcgeo6ey.php:35\n\
    Stack trace:\n#0 /tmp/tmphcgeo6ey.php(40): test()\n#1 {main}\n  thrown in /tmp/tmphcgeo6ey.php\
    \ on line 35\n"
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_arr = explode(' ', $paren_string);\n    $max_depth = 0;\n    $depth_arr\
    \ = array();\n    foreach ($paren_arr as $paren_section) {\n        $depth = 0;\n\
    \        for ($i = 0; $i < strlen($paren_section); $i++) {\n            if ($paren_section[$i]\
    \ == '(') {\n                $depth++;\n            } else {\n               \
    \ $depth--;\n            }\n            if ($depth > $max_depth) {\n         \
    \       $max_depth = $depth;\n            }\n        }\n        $depth_arr[] =\
    \ $max_depth;\n    }\n    return $depth_arr;\n}\n\necho '<pre>';\nprint_r(parse_nested_parens(\"\
    (()()) ((())) () ((())()())\"));\necho '</pre>';\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => 2\n    [1] => 3\n    [2] => 3\n    [3] => 3\n\
    )\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk2tyu_tw.php:37\n\
    Stack trace:\n#0 /tmp/tmpk2tyu_tw.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpk2tyu_tw.php\
    \ on line 37\n"
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"(\", \"[\", $paren_string);\n    $paren_string = str_replace(\"\
    )\", \"]\", $paren_string);\n    $paren_string = str_replace(\"][\", \"][[\",\
    \ $paren_string);\n    $paren_string = str_replace(\"]]\", \"]]]\", $paren_string);\n\
    \    $paren_string = str_replace(\"[[\", \"[[]]\", $paren_string);\n    $paren_string\
    \ = str_replace(\"[[[\", \"[[[]]]\", $paren_string);\n    $paren_string = str_replace(\"\
    [[[[\", \"[[[[]]]]\", $paren_string);\n    $paren_string = str_replace(\"[[[[[\"\
    , \"[[[[[]]]]]\", $paren_string);\n    $paren_string = str_replace(\"[[[[[[\"\
    , \"[[[[[[]]]]]]\", $paren_string);\n    $paren_string = str_replace(\"[[[[[[[\"\
    , \"[[[[[[[]]]]]]]\", $paren_string);\n    $paren_string = str_replace(\"[[[[[[[[\"\
    , \"[[[[[[[[]]]]]]]]\", $paren_string);\n    $paren_string = str_replace(\"[[[[[[[[[\"\
    , \"[[[[[[[[[]]]]]]]]]\", $paren_string);\n    $paren_string = str_replace(\"\
    [[[[[[[[[[\", \"[[[[[[[[[[]]]]]]]]]]\", $paren_string);\n    $paren_string = str_replace(\"\
    [[[[[[[[[[[\", \"[[[[[[[[[[[]]]]]]]]]]]\", $paren_string);\n    $paren_string\
    \ = str_replace(\"[[[[[[[[[[[[\", \"[[[[[[[[[[[[]]]]]]]]]]]]\", $paren_string);\n\
    \    $paren_string = str_replace(\"[[[[[[[[[[[[[\", \"[[[[[[[[[[[[[]]]]]]]]]]]]]\"\
    , $paren_string);\n    $paren_string = str_replace(\"[[[[[[[[[[[[[[\", \"[[[[[[[[[[[[[[]]]]]]]]]]]]]]\"\
    , $paren_string);\n   \nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 7 in /tmp/tmp2x6hln9t.php on line 37

    '
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_stack = array();\n    $paren_max = array();\n    $paren_max_counter\
    \ = 0;\n    $paren_string_len = strlen($paren_string);\n    for ($i = 0; $i <\
    \ $paren_string_len; $i++) {\n        $c = $paren_string[$i];\n        if ($c\
    \ == '(') {\n            array_push($paren_stack, $c);\n        } else if ($c\
    \ == ')') {\n            $popped = array_pop($paren_stack);\n            if ($popped)\
    \ {\n                $paren_max_counter += 2;\n            } else {\n        \
    \        $paren_max[] = $paren_max_counter;\n                $paren_max_counter\
    \ = 0;\n            }\n        }\n    }\n    return $paren_max;\n}\n\n$input =\
    \ \"(()()) ((())) () ((())()())\";\n$output = parse_nested_parens($input);\n\n\
    echo \"Input: \" . $input . \"\\n\";\necho \"Output: \" . implode(\" \", $output)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Input: (()()) ((())) () ((())()())\nOutput: \n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpkiv6v4ny.php:39\nStack trace:\n#0 /tmp/tmpkiv6v4ny.php(44):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpkiv6v4ny.php on line 39\n"
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  // Split the string into an array of substrings each representing one of\
    \ the groups\n  $paren_groups = explode(\" \", $paren_string);\n  // For each\
    \ group, create an array with elements that are the depth of nesting\n  $depth_array\
    \ = array_map(function($group) {\n    $counter = 0;\n    $max_depth = 0;\n   \
    \ // For each character in the group, if it is an opening parenthesis, we have\
    \ gone deeper.\n    // If it is a closing parenthesis, we have gone back up a\
    \ level.\n    // Keep track of the maximum depth.\n    for ($i = 0; $i < strlen($group);\
    \ $i++) {\n      if ($group[$i] == \"(\") {\n        $counter++;\n      } else\
    \ if ($group[$i] == \")\") {\n        $counter--;\n      }\n      if ($counter\
    \ > $max_depth) {\n        $max_depth = $counter;\n      }\n    }\n    return\
    \ $max_depth;\n  }, $paren_groups);\n  return $depth_array;\n}\n\n$tests = array(\"\
    (()()) ((())) () ((())()())\",\n               \"()\",\n               \"((()())\"\
    ,\n               \"())(\",\n               \"(((())))((()))\");\n\n$results =\
    \ array(array(2, 3, 1, 3),\n                 array(0),\n                 array(3),\n\
    \                 array(),\n                 array(3, 2));\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_split = explode(\" \", $paren_string);\n    $max_paren_array =\
    \ array();\n    foreach ($paren_split as $single_paren) {\n        // At first,\
    \ we initialize a counter.\n        $count = 0;\n        // Loop through each\
    \ of the character.\n        for ($i = 0; $i < strlen($single_paren); $i++) {\n\
    \            if ($single_paren[$i] == \"(\") {\n                // Increment counter\
    \ when we see an opening parentheses.\n                $count++;\n           \
    \ } else if ($single_paren[$i] == \")\") {\n                // Decrement counter\
    \ when we see a closing parentheses.\n                $count--;\n            }\n\
    \        }\n        // If the count is 0, it means that the number of opening\
    \ parentheses and closing parentheses match.\n        if ($count == 0) {\n   \
    \         // Push the count of opening parentheses to the array.\n           \
    \ array_push($max_paren_array, $count);\n        }\n    }\n    return $max_paren_array;\n\
    }\necho \">>>> parse_nested_parens(\\\"(()()) ((())) () ((())()())\\\")\\n\";\n\
    print_r(parse_nested_parens(\"(()()) ((())) () ((())()())\"));\necho \"\\n\";\n\
    \necho \">>>> parse_nested_parens(\\\"(()()) ((())) () ((())()())\\\")\\n\";\n\
    print_r(parse_nested_parens(\"(()()) ((())) () ((())()())\"));\necho \"\\n\";\n\
    \necho \">>>> parse_nested_parens(\\\"(()()) ((())) () ((())()())\\\")\\n\";\n\
    print_r(parse_nested_parens(\"(()()) ((())) () ((())()())\"));\necho \"\\n\";\n\
    \necho \">>>> parse_nested_parens(\\\"(()()) ((())) () ((())()())\\\")\\n\";\n\
    print_r(parse_nested_parens(\"(()()) ((())) () ((())()())\"));\necho \"\\n\";\n\
    \necho \">>>> parse_nested_parens(\\\"(()()) ((())) () ((())()()\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token ")" in /tmp/tmp4m60f0t1.php on line
    53

    '
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $max_paren_nested_levels = array();\n  $paren_groups = explode(\" \", $paren_string);\n\
    \  foreach ($paren_groups as $paren_group) {\n    $max_paren_nested_levels[] =\
    \ get_max_paren_nested_level($paren_group);\n  }\n  return $max_paren_nested_levels;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_max_paren_nested_level()\
    \ in /tmp/tmpk2lyjfd1.php:11\nStack trace:\n#0 /tmp/tmpk2lyjfd1.php(17): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmpk2lyjfd1.php(21): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmpk2lyjfd1.php(26): test()\n#3 {main}\n  thrown in /tmp/tmpk2lyjfd1.php\
    \ on line 11\n"
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $max_nesting = 0;\n    $max_nesting_array = array();\n    $nesting_level\
    \ = 0;\n    $paren_array = str_split($paren_string);\n    foreach ($paren_array\
    \ as $paren) {\n        if ($paren == '(') {\n            $nesting_level++;\n\
    \            if ($nesting_level > $max_nesting) {\n                $max_nesting\
    \ = $nesting_level;\n            }\n        } elseif ($paren == ')') {\n     \
    \       $nesting_level--;\n        } elseif ($paren == ' ') {\n            array_push($max_nesting_array,\
    \ $max_nesting);\n            $max_nesting = 0;\n            $nesting_level =\
    \ 0;\n        }\n    }\n    return $max_nesting_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0u8fhhpx.php:34\n\
    Stack trace:\n#0 /tmp/tmp0u8fhhpx.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp0u8fhhpx.php\
    \ on line 34\n"
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $max_depth = 0;\n    $depth = 0;\n    $result = array();\n    foreach\
    \ (str_split($paren_string) as $c) {\n        if ($c == '(') {\n            $depth++;\n\
    \            if ($depth > $max_depth) {\n                $max_depth = $depth;\n\
    \            }\n        } else if ($c == ')') {\n            $depth--;\n     \
    \   } else if ($c == ' ') {\n            $result[] = $max_depth;\n           \
    \ $max_depth = 0;\n            $depth = 0;\n        }\n    }\n    $result[] =\
    \ $max_depth;\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $current_count = 0;\n    $max_count = 0;\n    $count_array = array();\n\
    \    $paren_array = str_split($paren_string);\n    for ($i = 0; $i < count($paren_array);\
    \ $i++) {\n        if ($paren_array[$i] == \"(\") {\n            $current_count++;\n\
    \            if ($current_count > $max_count) {\n                $max_count =\
    \ $current_count;\n            }\n        } else if ($paren_array[$i] == \")\"\
    ) {\n            $current_count--;\n        } else if ($paren_array[$i] == \"\
    \ \") {\n            array_push($count_array, $max_count);\n            $max_count\
    \ = 0;\n            $current_count = 0;\n        }\n    }\n    array_push($count_array,\
    \ $max_count);\n    return $count_array;\n}\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $nested_parens = array();\n    $max_depth = 0;\n    $count = 0;\n   \
    \ $paren_string = str_split($paren_string);\n    foreach ($paren_string as $char)\
    \ {\n        if ($char == '(') {\n            $count++;\n            if ($count\
    \ > $max_depth) {\n                $max_depth = $count;\n            }\n     \
    \   } elseif ($char == ')') {\n            $count--;\n        } elseif ($char\
    \ == ' ') {\n            $nested_parens[] = $max_depth;\n            $max_depth\
    \ = 0;\n            $count = 0;\n        }\n    }\n    $nested_parens[] = $max_depth;\n\
    \    return $nested_parens;\n}\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_string = str_replace(\"\
    \ \", \"\", $paren_string);\n    $stack = array();\n    $max_depth = 0;\n    $current_depth\
    \ = 0;\n    for ($i = 0; $i < strlen($paren_string); $i++) {\n        if ($paren_string[$i]\
    \ == \"(\") {\n            $current_depth++;\n            if ($current_depth >\
    \ $max_depth) {\n                $max_depth = $current_depth;\n            }\n\
    \        } else {\n            $current_depth--;\n        }\n    }\n    return\
    \ $max_depth;\n}\n\n$paren_string = \"(()()) ((())) () ((())()())\";\nprint_r(parse_nested_parens($paren_string));\n\
    \nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "3\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm5_wqn7c.php:34\n\
    Stack trace:\n#0 /tmp/tmpm5_wqn7c.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpm5_wqn7c.php\
    \ on line 34\n"
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_groups = explode(' ', $paren_string);\n  foreach ($paren_groups\
    \ as $group) {\n    echo get_nested_depth($group) . \"\\n\";\n  }\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_nested_depth()\
    \ in /tmp/tmp099mniob.php:10\nStack trace:\n#0 /tmp/tmp099mniob.php(15): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmp099mniob.php(19): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmp099mniob.php(24): test()\n#3 {main}\n  thrown in /tmp/tmp099mniob.php\
    \ on line 10\n"
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_list = explode(' ', $paren_string);\n  $result = array();\n  foreach\
    \ ($paren_list as $paren) {\n    $stack = array();\n    $max_depth = 0;\n    $depth\
    \ = 0;\n    for ($i = 0; $i < strlen($paren); $i++) {\n      if ($paren[$i] ==\
    \ '(') {\n        array_push($stack, $paren[$i]);\n        $depth++;\n       \
    \ if ($depth > $max_depth) {\n          $max_depth = $depth;\n        }\n    \
    \  } else {\n        array_pop($stack);\n        $depth--;\n      }\n    }\n \
    \   $result[] = $max_depth;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $result = array();\n    $group_length = strlen($paren_string);\n    $j\
    \ = 0;\n    for ($i = 0; $i < $group_length; $i++) {\n        $char = $paren_string[$i];\n\
    \        if ($char === '(') {\n            $j++;\n        } else if ($char ===\
    \ ')') {\n            $j--;\n        } else if ($char === ' ') {\n           \
    \ $result[] = $j;\n            $j = 0;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnu1rloxb.php:30\n\
    Stack trace:\n#0 /tmp/tmpnu1rloxb.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpnu1rloxb.php\
    \ on line 30\n"
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_string\
    \ = explode(' ', $paren_string);\n    $depth = [];\n    foreach ($paren_string\
    \ as $word) {\n        $level = 0;\n        $max = 0;\n        for ($i = 0; $i\
    \ < strlen($word); $i++) {\n            if ($word[$i] == '(') {\n            \
    \    $level++;\n            } elseif ($word[$i] == ')') {\n                $level--;\n\
    \            }\n            if ($level > $max) {\n                $max = $level;\n\
    \            }\n        }\n        $depth[] = $max;\n    }\n    return $depth;\n\
    }\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $output = array();\n  $matches = preg_split(\"/(\\()/\", $paren_string,\
    \ -1, PREG_SPLIT_DELIM_CAPTURE);\n  $stack = array();\n  $max_depth = 1;\n  foreach\
    \ ($matches as $match) {\n    if ($match == \"(\") {\n      array_push($stack,\
    \ 1);\n    } else if ($match == \")\") {\n      $depth = array_pop($stack);\n\
    \      $max_depth = max($max_depth, $depth);\n      if (count($stack) > 0) {\n\
    \        $stack[count($stack) - 1] += $depth;\n      }\n    } else {\n      array_push($output,\
    \ $max_depth);\n      $max_depth = 1;\n    }\n  }\n  return $output;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8fba_ltq.php:34\n\
    Stack trace:\n#0 /tmp/tmp8fba_ltq.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp8fba_ltq.php\
    \ on line 34\n"
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $max_levels = array();\n    $paren_groups = explode(\" \", $paren_string);\n\
    \    foreach ($paren_groups as $group) {\n        $max_level = 0;\n        $level\
    \ = 0;\n        for ($i = 0; $i < strlen($group); $i++) {\n            if ($group[$i]\
    \ == \"(\") {\n                $level++;\n            } else if ($group[$i] ==\
    \ \")\") {\n                $level--;\n            }\n            if ($level >\
    \ $max_level) {\n                $max_level = $level;\n            }\n       \
    \ }\n        $max_levels[] = $max_level;\n    }\n    return $max_levels;\n}\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    // Break the string of nested parentheses into an array of individual\n\
    \    // parenthesized strings.\n    $paren_arr = explode(' ', $paren_string);\n\
    \    $max_nesting = 0;\n    $max_arr = array();\n    foreach ($paren_arr as $paren)\
    \ {\n        // Count the number of nested parentheses for each individual\n \
    \       // parenthesized string.\n        $nesting = 0;\n        $len = strlen($paren);\n\
    \        for ($i = 0; $i < $len; $i++) {\n            if ($paren[$i] == '(') {\n\
    \                $nesting++;\n            } else if ($paren[$i] == ')') {\n  \
    \              $nesting--;\n            }\n        }\n        // If the current\
    \ string of nested parentheses has more layers of\n        // nesting than any\
    \ others we've seen, set max_nesting to this and \n        // empty the max_arr\
    \ array. If the current string of nested parentheses\n        // has the same\
    \ number of layers of nesting as the most nested we've\n        // seen, add it\
    \ to the max_arr array.\n        if ($nesting > $max_nesting) {\n            $max_nesting\
    \ = $nesting;\n            $max_arr = array();\n            $max_arr[] = $paren;\n\
    \        } else if ($nesting == $max_nesting) {\n            $max_arr[] = $paren;\n\
    \        }\n    }\n    return $max_arr;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1ln9soa1.php:46\n\
    Stack trace:\n#0 /tmp/tmp1ln9soa1.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp1ln9soa1.php\
    \ on line 46\n"
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_groups = explode(' ', $paren_string);\n    $paren_levels = array();\n\
    \    foreach ($paren_groups as $group) {\n        $paren_levels[] = count_paren_levels($group);\n\
    \    }\n    return $paren_levels;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_paren_levels()\
    \ in /tmp/tmp48n4abpr.php:11\nStack trace:\n#0 /tmp/tmp48n4abpr.php(17): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmp48n4abpr.php(21): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmp48n4abpr.php(26): test()\n#3 {main}\n  thrown in /tmp/tmp48n4abpr.php\
    \ on line 11\n"
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $result = array();\n    $count_parens = 0;\n    $max_count_parens = 0;\n\
    \    $arr_parens = str_split($paren_string);\n    foreach ($arr_parens as $char)\
    \ {\n        if ($char == \"(\") {\n            $count_parens++;\n           \
    \ if ($count_parens > $max_count_parens) {\n                $max_count_parens\
    \ = $count_parens;\n            }\n        } else if ($char == \")\") {\n    \
    \        $count_parens--;\n        } else if ($char == \" \") {\n            $result[]\
    \ = $max_count_parens;\n            $max_count_parens = 0;\n            $count_parens\
    \ = 0;\n        }\n    }\n    $result[] = $max_count_parens;\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $level_array = array();\n\
    \    foreach ($paren_array as $paren) {\n        $level = 0;\n        $l = strlen($paren);\n\
    \        $max = 0;\n        for ($i = 0; $i < $l; $i++) {\n            if ($paren[$i]\
    \ == \"(\") {\n                $level++;\n                if ($level > $max) {\n\
    \                    $max = $level;\n                }\n            } else {\n\
    \                $level--;\n            }\n        }\n        $level_array[] =\
    \ $max;\n    }\n    return $level_array;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $output = array();\n    $paren_group = preg_split(\"/\\s+/\", $paren_string);\n\
    \    $pattern = \"/\\(/\";\n    $paren_group_count = count($paren_group);\n  \
    \  for ($j = 0; $j < $paren_group_count; $j++) {\n        preg_match_all($pattern,\
    \ $paren_group[$j], $matches);\n        $output[] = count($matches[0]);\n    }\n\
    \    return $output;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5xv9d260.php:24\n\
    Stack trace:\n#0 /tmp/tmp5xv9d260.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp5xv9d260.php\
    \ on line 24\n"
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $max_nest_level = [];\n  $level = 0;\n  for ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n    if ($paren_string[$i] == '(') {\n      $level++;\n    } else if\
    \ ($paren_string[$i] == ')') {\n      $level--;\n    } else if ($paren_string[$i]\
    \ == ' ') {\n      $max_nest_level[] = $level;\n      $level = 0;\n    }\n  }\n\
    \  return $max_nest_level;\n}\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprkuccb3g.php:27\n\
    Stack trace:\n#0 /tmp/tmprkuccb3g.php(32): test()\n#1 {main}\n  thrown in /tmp/tmprkuccb3g.php\
    \ on line 27\n"
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $deepest_nesting = [];\n\n    // TODO: implement this function.\n   \
    \ return $deepest_nesting;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl9tpfqio.php:19\n\
    Stack trace:\n#0 /tmp/tmpl9tpfqio.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpl9tpfqio.php\
    \ on line 19\n"
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $max_depth = array();\n\n    $depth = 0;\n    for ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n        $letter = $paren_string[$i];\n        if ($letter == '(') {\n\
    \            $depth++;\n        } else if ($letter == ')') {\n            $depth--;\n\
    \        } else if ($letter == ' ') {\n            array_push($max_depth, $depth);\n\
    \            $depth = 0;\n        }\n    }\n    array_push($max_depth, $depth);\n\
    \n    return $max_depth;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzf5r212t.php:32\n\
    Stack trace:\n#0 /tmp/tmpzf5r212t.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpzf5r212t.php\
    \ on line 32\n"
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    // TODO: Add code here.\n\t$ans = array();\n\t//echo $paren_string.\"\
    \\n\";\n\t$paren_arr = explode(\" \", $paren_string);\n\tfor($i=0; $i<count($paren_arr);\
    \ $i++){\n\t\t$paren = $paren_arr[$i];\n\t\t$cnt = 0;\n\t\t$max = 0;\n\t\tfor($j=0;\
    \ $j<strlen($paren); $j++){\n\t\t\tif($paren[$j] == '('){\n\t\t\t\t$cnt++;\n\t\
    \t\t\tif($cnt > $max){\n\t\t\t\t\t$max = $cnt;\n\t\t\t\t}\n\t\t\t}else if($paren[$j]\
    \ == ')'){\n\t\t\t\t$cnt--;\n\t\t\t}\n\t\t}\n\t\t$ans[] = $max;\n\t}\n\t\n\treturn\
    \ $ans;\n}\n\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n    $split_parens\
    \ = explode(' ', $paren_string);\n    $parsed_parens = array();\n    foreach ($split_parens\
    \ as $paren) {\n        $paren_length = strlen($paren);\n        $paren_array\
    \ = str_split($paren);\n        $open_count = 0;\n        $close_count = 0;\n\
    \        $depth = 0;\n        $max_depth = 0;\n        for ($i = 0; $i < $paren_length;\
    \ $i++) {\n            if ($paren_array[$i] == '(') {\n                $open_count++;\n\
    \                $depth++;\n                if ($depth > $max_depth) {\n     \
    \               $max_depth = $depth;\n                }\n            } elseif\
    \ ($paren_array[$i] == ')') {\n                $close_count++;\n             \
    \   $depth--;\n            }\n        }\n        if ($open_count != $close_count)\
    \ {\n            $max_depth = false;\n        }\n        $parsed_parens[] = $max_depth;\n\
    \    }\n    return $parsed_parens;\n}\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_groups = explode(' ', $paren_string);\n  $paren_level = array();\n\
    \  foreach ($paren_groups as $group) {\n    $paren_level[] = parse_nested_parens_for_one_group($group);\n\
    \  }\n  return $paren_level;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function parse_nested_parens_for_one_group()\
    \ in /tmp/tmpinm6t3ou.php:11\nStack trace:\n#0 /tmp/tmpinm6t3ou.php(17): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmpinm6t3ou.php(21): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmpinm6t3ou.php(26): test()\n#3 {main}\n  thrown in /tmp/tmpinm6t3ou.php\
    \ on line 11\n"
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $max_level = [];\n\
    \    foreach ($paren_array as $paren_expression) {\n        $level = 0;\n    \
    \    $prev_char = '';\n        $max_depth = 0;\n        for ($i = 0; $i < strlen($paren_expression);\
    \ $i++) {\n            $char = $paren_expression[$i];\n            if ($char ==\
    \ '(') {\n                $level++;\n                if ($level > $max_depth)\
    \ {\n                    $max_depth = $level;\n                }\n           \
    \ } else if ($char == ')') {\n                $level--;\n            }\n     \
    \   }\n        $max_level[] = $max_depth;\n    }\n    return $max_level;\n}\n\n\
    echo implode(', ', parse_nested_parens(\"(()()) ((())) () ((())()())\"));\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 2, 3, 1, 3
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    // TODO: Your code here.\n}\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1_f28qvu.php:15\n\
    Stack trace:\n#0 /tmp/tmp1_f28qvu.php(20): test()\n#1 {main}\n  thrown in /tmp/tmp1_f28qvu.php\
    \ on line 15\n"
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    // The array is the stack keeping track of the current position in a\
    \ group of nested parentheses\n    $stk = array();\n    $stk_pos = 0;\n    $groups\
    \ = explode(\" \", $paren_string);\n    $max_group_levels = array();\n    foreach\
    \ ($groups as $group) {\n        $cur_level = 0;\n        for ($i = 0; $i < strlen($group);\
    \ $i++) {\n            if ($group[$i] == \"(\") {\n                $stk[$stk_pos++]\
    \ = $cur_level;\n                $cur_level++;\n            } else {\n       \
    \         $cur_level = $stk[--$stk_pos];\n            }\n        }\n        $max_group_levels[]\
    \ = $cur_level;\n    }\n    return $max_group_levels;\n}\n\n$test = \"(()()) ((()))\
    \ () ((())()())\";\n$res = parse_nested_parens($test);\nprint_r($res);\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 0\n    [1] => 0\n    [2] => 0\n    [3] => 0\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp6lzpuh4u.php:36\nStack\
    \ trace:\n#0 /tmp/tmp6lzpuh4u.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp6lzpuh4u.php\
    \ on line 36\n"
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    // Your code here\n    $paren_array = explode(\" \", $paren_string);\n\
    \    $result = array();\n    foreach ($paren_array as $paren) {\n        $nest_level\
    \ = 0;\n        $max_nest_level = 0;\n        for ($i = 0; $i < strlen($paren);\
    \ $i++) {\n            if ($paren[$i] == \"(\") {\n                $nest_level++;\n\
    \            } else {\n                $nest_level--;\n            }\n       \
    \     if ($nest_level > $max_nest_level) {\n                $max_nest_level =\
    \ $nest_level;\n            }\n        }\n        array_push($result, $max_nest_level);\n\
    \    }\n    return $result;\n}\n\n$paren_string = \"(()()) ((())) () ((())()())\"\
    ;\nprint_r(parse_nested_parens($paren_string));\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 2\n    [1] => 3\n    [2] => 1\n    [3] => 3\n)\n"
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = str_replace(\" \", \"\", $paren_string);\n  $paren_stack\
    \ = [];\n  $max_levels = 0;\n  $result = [];\n  foreach (str_split($paren_string)\
    \ as $symbol) {\n    if ($symbol == \"(\") {\n      array_push($paren_stack, 0);\n\
    \    } else if ($symbol == \")\") {\n      if (count($paren_stack) <= 0) {\n \
    \       throw new Exception(\"No matching open paren found for: $symbol\");\n\
    \      }\n      $level = array_pop($paren_stack);\n      if ($level > $max_levels)\
    \ {\n        $max_levels = $level;\n      }\n      array_push($result, $max_levels);\n\
    \    } else {\n      throw new Exception(\"Invalid symbol: $symbol\");\n    }\n\
    \  }\n  if (count($paren_stack) > 0) {\n    throw new Exception(\"Unmatched parens\"\
    );\n  }\n  return $result;\n}\n\ntry {\n  var_dump(parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\"));\n} catch (Exception $e) {\n  print $e->getMessage();\n\
    }\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(12) {\n  [0]=>\n  int(0)\n  [1]=>\n  int(0)\n  [2]=>\n  int(0)\n\
    \  [3]=>\n  int(0)\n  [4]=>\n  int(0)\n  [5]=>\n  int(0)\n  [6]=>\n  int(0)\n\
    \  [7]=>\n  int(0)\n  [8]=>\n  int(0)\n  [9]=>\n  int(0)\n  [10]=>\n  int(0)\n\
    \  [11]=>\n  int(0)\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzbrpam0t.php:44\n\
    Stack trace:\n#0 /tmp/tmpzbrpam0t.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpzbrpam0t.php\
    \ on line 44\n"
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = preg_split('/\\s+/', $paren_string);\n  $result = array();\n\
    \  foreach ($paren_array as $paren_str) {\n    $count = 0;\n    $max_count = 0;\n\
    \    for ($i = 0; $i < strlen($paren_str); $i++) {\n      if ($paren_str[$i] ==\
    \ '(') {\n        $count++;\n        if ($count > $max_count) {\n          $max_count\
    \ = $count;\n        }\n      } else {\n        $count--;\n      }\n    }\n  \
    \  $result[] = $max_count;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $max = 0;\n    $current = 0;\n    $parens = str_split($paren_string);\n\
    \    foreach ($parens as $paren) {\n        if ($paren == '(') {\n           \
    \ $current++;\n            if ($current > $max) {\n                $max = $current;\n\
    \            }\n        } else if ($paren == ')') {\n            $current--;\n\
    \        }\n    }\n    return $max;\n}\n\n$paren_string = \"(()()) ((())) () ((())()())\"\
    ;\n$result = parse_nested_parens($paren_string);\n\nvar_dump($result);\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "int(3)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsnvhdy82.php:33\n\
    Stack trace:\n#0 /tmp/tmpsnvhdy82.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpsnvhdy82.php\
    \ on line 33\n"
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_groups = explode(' ', $paren_string);\n  $depth_array = array();\n\
    \  foreach ($paren_groups as $group) {\n    $depth = 0;\n    $max_depth = 0;\n\
    \    for ($i = 0; $i < strlen($group); $i++) {\n      if ($group[$i] == '(') {\n\
    \        $depth++;\n      } else if ($group[$i] == ')') {\n        $depth--;\n\
    \      }\n      if ($depth > $max_depth) {\n        $max_depth = $depth;\n   \
    \   }\n    }\n    $depth_array[] = $max_depth;\n  }\n  return $depth_array;\n\
    }\n\n$paren_string = \"(()()) ((())) () ((())()())\";\n$depth_array = parse_nested_parens($paren_string);\n\
    print_r($depth_array);\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 2\n    [1] => 3\n    [2] => 1\n    [3] => 3\n)\n"
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $start_paren = \"(\";\n    $end_paren = \")\";\n    $result = array();\n\
    \    $paren_groups = explode(\" \", $paren_string);\n    foreach ($paren_groups\
    \ as $group) {\n        $depth = 0;\n        $current_max = 0;\n        for ($i\
    \ = 0; $i < strlen($group); $i++) {\n            if ($group[$i] == $start_paren)\
    \ {\n                $depth++;\n                if ($depth > $current_max) {\n\
    \                    $current_max = $depth;\n                }\n            }\
    \ else if ($group[$i] == $end_paren) {\n                $depth--;\n          \
    \  }\n        }\n        $result[] = $current_max;\n    }\n    return $result;\n\
    }\n\necho implode(\", \", parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    ));\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 2, 3, 1, 3
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_groups = explode(' ', $paren_string);\n  $result = array();\n  foreach\
    \ ($paren_groups as $group) {\n    $paren_nesting = 0;\n    $max_nesting = 0;\n\
    \    $n = strlen($group);\n    for ($i = 0; $i < $n; $i++) {\n      if ($group[$i]\
    \ == '(') {\n        $paren_nesting++;\n        if ($paren_nesting > $max_nesting)\
    \ {\n          $max_nesting = $paren_nesting;\n        }\n      } else if ($group[$i]\
    \ == ')') {\n        $paren_nesting--;\n      }\n    }\n    $result[] = $max_nesting;\n\
    \  }\n  return $result;\n}\n\necho '<pre>';\nprint_r(parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\"));\necho '</pre>';\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => 2\n    [1] => 3\n    [2] => 1\n    [3] => 3\n\
    )\n</pre>"
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(\" \", $paren_string);\n  $output = array();\n \
    \ foreach ($paren_array as $i => $paren) {\n    $p = $paren;\n    $stack = array();\n\
    \    $max_depth = 0;\n    while(strlen($p) > 0) {\n      if(strpos($p, '(') ===\
    \ 0) {\n        array_push($stack, '(');\n        $p = substr($p, 1);\n      }\
    \ else {\n        array_pop($stack);\n        $p = substr($p, 1);\n      }\n \
    \     $max_depth = max($max_depth, count($stack));\n    }\n    $output[] = $max_depth;\n\
    \  }\n  return $output;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_groups = explode(' ', $paren_string);\n  $max_nest_levels = array();\n\
    \  foreach ($paren_groups as $group) {\n    $nest_level = 0;\n    $max_nest_level\
    \ = 0;\n    for ($i = 0; $i < strlen($group); $i++) {\n      $char = $group[$i];\n\
    \      if ($char == '(') {\n        $nest_level++;\n      } elseif ($char == ')')\
    \ {\n        $nest_level--;\n      }\n      if ($nest_level > $max_nest_level)\
    \ {\n        $max_nest_level = $nest_level;\n      }\n    }\n    $max_nest_levels[]\
    \ = $max_nest_level;\n  }\n  return $max_nest_levels;\n}\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $level_array = array();\n\
    \    foreach ($paren_array as $sub_paren_string) {\n        $sub_paren_string_len\
    \ = strlen($sub_paren_string);\n        $sub_paren_level = 0;\n        $sub_paren_level_max\
    \ = 0;\n        for ($i = 0; $i < $sub_paren_string_len; $i++) {\n           \
    \ if ($sub_paren_string[$i] == \"(\") {\n                $sub_paren_level++;\n\
    \                if ($sub_paren_level > $sub_paren_level_max) {\n            \
    \        $sub_paren_level_max = $sub_paren_level;\n                }\n       \
    \     } else if ($sub_paren_string[$i] == \")\") {\n                $sub_paren_level--;\n\
    \            }\n        }\n        array_push($level_array, $sub_paren_level_max);\n\
    \    }\n    return $level_array;\n}\n\n$a = \"(()()) ((())) () ((())()())\";\n\
    var_dump(parse_nested_parens($a));\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "array(4) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(3)\n  [2]=>\n  int(1)\n \
    \ [3]=>\n  int(3)\n}\n"
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $tokens = array();\n    $depth = 0;\n    $start = 0;\n    $len = strlen($paren_string);\n\
    \    $token = '';\n    for ($i = 0; $i < $len; $i++) {\n        $ch = $paren_string[$i];\n\
    \        if ($ch == '(') {\n            $depth++;\n        } else if ($ch == ')')\
    \ {\n            $depth--;\n        } else if ($ch == ' ') {\n            if ($depth\
    \ == 0) {\n                $tokens[] = array('token' => $token, 'depth' => $depth);\n\
    \                $token = '';\n            }\n        }\n        $token .= $ch;\n\
    \    }\n    $tokens[] = array('token' => $token, 'depth' => $depth);\n    $depths\
    \ = array();\n    foreach ($tokens as $token) {\n        $depths[] = count_paren_depth($token['token']);\n\
    \    }\n    return $depths;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_paren_depth()\
    \ in /tmp/tmpi0o1pfkf.php:30\nStack trace:\n#0 /tmp/tmpi0o1pfkf.php(36): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmpi0o1pfkf.php(40): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmpi0o1pfkf.php(45): test()\n#3 {main}\n  thrown in /tmp/tmpi0o1pfkf.php\
    \ on line 30\n"
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $levels = [];\n  $nesting_level = 0;\n  $in_paren = false;\n  for ($i =\
    \ 0; $i < strlen($paren_string); $i++) {\n    if ($paren_string[$i] == \"(\")\
    \ {\n      $in_paren = true;\n      $nesting_level++;\n    } else if ($paren_string[$i]\
    \ == \")\") {\n      $nesting_level--;\n      if ($nesting_level == 0) {\n   \
    \     $in_paren = false;\n        $levels[] = $nesting_level;\n      }\n    }\
    \ else if ($paren_string[$i] == \" \" && !$in_paren) {\n      $levels[] = $nesting_level;\n\
    \    }\n  }\n  return $levels;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx4zxgtmi.php:33\n\
    Stack trace:\n#0 /tmp/tmpx4zxgtmi.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpx4zxgtmi.php\
    \ on line 33\n"
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $string_arr = explode(' ', $paren_string);\n   \
    \ $result = array();\n    foreach ($string_arr as $string) {\n        $result[]\
    \ = count_parens($string);\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_parens()\
    \ in /tmp/tmpfa3g2wtk.php:13\nStack trace:\n#0 /tmp/tmpfa3g2wtk.php(19): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmpfa3g2wtk.php(23): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmpfa3g2wtk.php(28): test()\n#3 {main}\n  thrown in /tmp/tmpfa3g2wtk.php\
    \ on line 13\n"
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_groups = explode(' ', $paren_string);\n  $nesting_levels = array();\n\
    \  foreach ($paren_groups as $group) {\n    $last_paren = '';\n    $nesting_level\
    \ = 0;\n    $max_nesting_level = 0;\n    for ($i = 0; $i < strlen($group); $i++)\
    \ {\n      $paren = $group[$i];\n      if ($paren == '(') {\n        if ($last_paren\
    \ == '(') {\n          $nesting_level++;\n        } else {\n          $nesting_level\
    \ = 1;\n        }\n      } else {\n        if ($last_paren == ')') {\n       \
    \   $nesting_level--;\n        } else {\n          $nesting_level = 0;\n     \
    \   }\n      }\n      $last_paren = $paren;\n      $max_nesting_level = max($max_nesting_level,\
    \ $nesting_level);\n    }\n    $nesting_levels[] = $max_nesting_level;\n  }\n\
    \  return $nesting_levels;\n}\n\n$paren_string = \"(()()) ((())) () ((())()())\"\
    ;\n$nesting_levels = parse_nested_parens($paren_string);\nprint_r($nesting_levels);\n\
    \nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 2\n    [1] => 3\n    [2] => 1\n    [3] => 3\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpw1b9a04k.php:48\nStack\
    \ trace:\n#0 /tmp/tmpw1b9a04k.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpw1b9a04k.php\
    \ on line 48\n"
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $output = array();\n    // Find all integers in each of the parenthesis\n\
    \    preg_match_all('/\\((.*?)\\)/', $paren_string, $matches);\n    // Iterate\
    \ through all parenthesis found\n    foreach ($matches[1] as $paren_set) {\n \
    \       // Count the depth of nested parenthesis\n        $count = 1;\n      \
    \  $max_count = 0;\n        // Start from the first character, if it is an opening\
    \ parenthesis, increment the counter.\n        // Else if it is a closing parenthesis,\
    \ decrement the counter and store the max value.\n        for ($i = 0; $i < strlen($paren_set);\
    \ $i++) {\n            if ($paren_set[$i] == '(') {\n                $count++;\n\
    \            } else if ($paren_set[$i] == ')') {\n                $count--;\n\
    \            }\n            $max_count = max($max_count, $count);\n        }\n\
    \        $output[] = $max_count;\n    }\n    return $output;\n}\n\necho '<pre>';\n\
    var_dump(parse_nested_parens(\"(()()) ((())) () ((())()())\"));\necho '</pre>';\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>array(7) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(0)\n  [2]=>\n  int(3)\n\
    \  [3]=>\n  int(0)\n  [4]=>\n  int(3)\n  [5]=>\n  int(0)\n  [6]=>\n  int(0)\n\
    }\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_cfj_tkv.php:39\n\
    Stack trace:\n#0 /tmp/tmp_cfj_tkv.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp_cfj_tkv.php\
    \ on line 39\n"
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $nest_arr = explode(' ', $paren_string);\n    $nest_level = [];\n   \
    \ foreach ($nest_arr as $nest) {\n        $max_nest = 0;\n        $cur_nest =\
    \ 0;\n        for ($i = 0; $i < strlen($nest); $i++) {\n            if ($nest[$i]\
    \ == '(') {\n                $cur_nest++;\n                if ($cur_nest > $max_nest)\
    \ {\n                    $max_nest = $cur_nest;\n                }\n         \
    \   } else if ($nest[$i] == ')') {\n                $cur_nest--;\n           \
    \ }\n        }\n        $nest_level[] = $max_nest;\n    }\n    return $nest_level;\n\
    }\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $open_paren = \"(\";\n  $closed_paren = \")\";\n  $paren_array = str_split($paren_string);\n\
    \  $count = 0;\n  $output = array();\n  foreach ($paren_array as $paren) {\n \
    \   if ($paren == $open_paren) {\n      $count++;\n    } elseif ($paren == $closed_paren)\
    \ {\n      $count--;\n    } elseif ($paren == \" \") {\n      array_push($output,\
    \ $count);\n      $count = 0;\n    }\n  }\n  return $output;\n}\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpayrmwz4j.php:30\n\
    Stack trace:\n#0 /tmp/tmpayrmwz4j.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpayrmwz4j.php\
    \ on line 30\n"
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $levels = array();\n\
    \    foreach ($paren_array as $paren_seq) {\n        $level = 0;\n        $next_level\
    \ = 0;\n        for ($i = 0; $i < strlen($paren_seq); $i++) {\n            $paren\
    \ = $paren_seq[$i];\n            if ($paren == \"(\") {\n                $next_level++;\n\
    \            } else {\n                $next_level--;\n            }\n       \
    \     if ($next_level > $level) {\n                $level = $next_level;\n   \
    \         }\n        }\n        $levels[] = $level;\n    }\n    return $levels;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = str_replace(\" \", \"\", $paren_string);\n  $paren_array\
    \ = str_split($paren_string);\n  $open_paren_arr = array();\n  $max_nested_array\
    \ = array();\n  $max_nested = 0;\n  foreach ($paren_array as $char) {\n    if\
    \ ($char == \"(\") {\n      array_push($open_paren_arr, $char);\n    } else {\n\
    \      if (count($open_paren_arr) > 0) {\n        array_pop($open_paren_arr);\n\
    \      }\n      if (count($open_paren_arr) == 0) {\n        array_push($max_nested_array,\
    \ $max_nested);\n        $max_nested = 0;\n      }\n    }\n    $max_nested++;\n\
    \  }\n  return $max_nested_array;\n}\n\n$result = parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\");\nvar_dump($result);\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "array(4) {\n  [0]=>\n  int(5)\n  [1]=>\n  int(6)\n  [2]=>\n  int(2)\n \
    \ [3]=>\n  int(10)\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpie12team.php:37\n\
    Stack trace:\n#0 /tmp/tmpie12team.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpie12team.php\
    \ on line 37\n"
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $max_depth = array();\n  $depth = 0;\n  for ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n    $ch = $paren_string[$i];\n    if ($ch == '(') {\n      $depth++;\n\
    \    } else if ($ch == ')') {\n      $depth--;\n    } else if ($ch == ' ') {\n\
    \      array_push($max_depth, $depth);\n      $depth = 0;\n    }\n  }\n  array_push($max_depth,\
    \ $depth);\n  return $max_depth;\n}\n\n$paren_string = \"(()()) ((())) () ((())()())\"\
    ;\nvar_dump(parse_nested_parens($paren_string));\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "array(4) {\n  [0]=>\n  int(0)\n  [1]=>\n  int(0)\n  [2]=>\n  int(0)\n \
    \ [3]=>\n  int(0)\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdoe5re2j.php:33\n\
    Stack trace:\n#0 /tmp/tmpdoe5re2j.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpdoe5re2j.php\
    \ on line 33\n"
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = trim($paren_string);\n  if (!$paren_string) {\n    return\
    \ array();\n  }\n  $paren_groups = explode(' ', $paren_string);\n  $max_nestings\
    \ = array();\n  foreach ($paren_groups as $group) {\n    $match_count = 0;\n \
    \   $nesting_count = 0;\n    for ($i = 0; $i < strlen($group); $i++) {\n     \
    \ if ($group[$i] == '(') {\n        $match_count++;\n        $nesting_count =\
    \ max($nesting_count, $match_count);\n      } else if ($group[$i] == ')') {\n\
    \        $match_count--;\n      }\n    }\n    $max_nestings[] = $nesting_count;\n\
    \  }\n  return $max_nestings;\n}\n\nvar_dump(parse_nested_parens(\"(()()) ((()))\
    \ () ((())()())\"));\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "array(4) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(3)\n  [2]=>\n  int(1)\n \
    \ [3]=>\n  int(3)\n}\n"
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  // Convert the input string to a 2D array.\n  $paren_list = explode(\"\
    \ \", $paren_string);\n  // Initialize $result_list as an empty array.\n  $result_list\
    \ = array();\n  // Iterate over each $paren_item in $paren_list.\n  foreach ($paren_list\
    \ as $paren_item) {\n    // Initialize $counter as 0.\n    $counter = 0;\n   \
    \ // Initialize $max_counter as 0.\n    $max_counter = 0;\n    // Initialize $paren_length\
    \ as the length of the $paren_item.\n    $paren_length = strlen($paren_item);\n\
    \    // Iterate over each character in $paren_item.\n    for ($i = 0; $i < $paren_length;\
    \ $i++) {\n      // If the character is \"(\", increment $counter by 1.\n    \
    \  if ($paren_item[$i] == \"(\") {\n        $counter++;\n      }\n      // If\
    \ the character is \")\", decrement $counter by 1.\n      if ($paren_item[$i]\
    \ == \")\") {\n        $counter--;\n      }\n      // If $counter is greater than\
    \ $max_counter, set $max_counter to $counter.\n      if ($counter > $max_counter)\
    \ {\n        $max_counter = $counter;\n      }\n    }\n    // Push $max_counter\
    \ to $result_list.\n    array_push($result_list, $max_counter);\n  }\n  // Return\
    \ $result_list.\n  return $result_list;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $split_groups = explode(\" \", $paren_string);\n\n    for ($i = 0; $i\
    \ < count($split_groups); $i++) {\n        // Considers a non-empty string with\
    \ no opening bracket and only closing brackets as having one level of nesting.\n\
    \        if ($split_groups[$i] == \"\" || $split_groups[$i][0] != \"(\") {\n \
    \           $split_groups[$i] = 1;\n            continue;\n        }\n\n     \
    \   $current_level = 0;\n        $maximum_level = 0;\n        $split_groups[$i]\
    \ = str_split($split_groups[$i]);\n\n        foreach ($split_groups[$i] as $character)\
    \ {\n            if ($character == \"(\") {\n                $current_level++;\n\
    \            } else {\n                $current_level--;\n            }\n\n  \
    \          if ($current_level > $maximum_level) {\n                $maximum_level\
    \ = $current_level;\n            }\n        }\n\n        $split_groups[$i] = $maximum_level;\n\
    \    }\n\n    return $split_groups;\n}\n\nprint_r(parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\"));\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 2\n    [1] => 3\n    [2] => 1\n    [3] => 3\n)\n"
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $levels = [];\n    $stack = [];\n    foreach (str_split($paren_string)\
    \ as $char) {\n        if ($char == \"(\") {\n            array_push($stack, $char);\n\
    \        } elseif ($char == \")\") {\n            array_pop($stack);\n       \
    \ } elseif ($char == \" \") {\n            array_push($levels, count($stack));\n\
    \        }\n    }\n    return $levels;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprps482eb.php:27\n\
    Stack trace:\n#0 /tmp/tmprps482eb.php(32): test()\n#1 {main}\n  thrown in /tmp/tmprps482eb.php\
    \ on line 27\n"
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_depth = 0;\n    $max_depth\
    \ = 0;\n    $paren_array = array();\n    for ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n        if ($paren_string[$i] == '(') {\n            $paren_depth++;\n\
    \            if ($paren_depth > $max_depth) {\n                $max_depth = $paren_depth;\n\
    \            }\n        } else if ($paren_string[$i] == ')') {\n            if\
    \ ($paren_depth == 0) {\n                throw new Exception(\"Unmatched parenthesis\"\
    );\n            }\n            $paren_depth--;\n        } else if ($paren_string[$i]\
    \ == ' ') {\n            $paren_array[] = $max_depth;\n            $max_depth\
    \ = 0;\n        } else {\n            throw new Exception(\"Invalid character\
    \ in string\");\n        }\n    }\n    if ($paren_depth != 0) {\n        throw\
    \ new Exception(\"Unmatched parenthesis\");\n    }\n    $paren_array[] = $max_depth;\n\
    \    return $paren_array;\n}\n\necho var_dump(parse_nested_parens(\"(()()) ((()))\
    \ () ((())()())\"));\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "array(4) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(3)\n  [2]=>\n  int(1)\n \
    \ [3]=>\n  int(3)\n}\n"
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = str_replace(\" \", \"\", $paren_string);\n  $paren_string\
    \ = preg_replace(\"/[^()]/\", \"\", $paren_string);\n  $max_depth = 0;\n  $current_depth\
    \ = 0;\n  $paren_depths = array();\n  for ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n    if ($paren_string[$i] == \"(\") {\n      $current_depth++;\n  \
    \    if ($current_depth > $max_depth) {\n        $max_depth = $current_depth;\n\
    \      }\n    } else if ($paren_string[$i] == \")\") {\n      $paren_depths[]\
    \ = $current_depth;\n      $current_depth--;\n    }\n  }\n  return $paren_depths;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0xfvlll8.php:32\n\
    Stack trace:\n#0 /tmp/tmp0xfvlll8.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp0xfvlll8.php\
    \ on line 32\n"
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $max_level = 0;\n  $paren_level = 0;\n  $paren_level_arr = array();\n \
    \ for ($i = 0; $i < strlen($paren_string); $i++) {\n    if ($paren_string[$i]\
    \ == '(') {\n      $paren_level++;\n      if ($paren_level > $max_level) {\n \
    \       $max_level = $paren_level;\n      }\n    } else if ($paren_string[$i]\
    \ == ')') {\n      $paren_level_arr[] = $paren_level;\n      $paren_level--;\n\
    \    }\n  }\n  return $paren_level_arr;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf3rwso6m.php:30\n\
    Stack trace:\n#0 /tmp/tmpf3rwso6m.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpf3rwso6m.php\
    \ on line 30\n"
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $result = array();\n    $paren_array = explode(\" \", $paren_string);\n\
    \    for ($i = 0; $i < count($paren_array); $i++) {\n        $paren_item = $paren_array[$i];\n\
    \        $curr_count = 0;\n        $max_count = 0;\n        for ($j = 0; $j <\
    \ strlen($paren_item); $j++) {\n            if ($paren_item[$j] == \"(\") {\n\
    \                $curr_count++;\n                if ($curr_count > $max_count)\
    \ {\n                    $max_count = $curr_count;\n                }\n      \
    \      } else {\n                $curr_count--;\n            }\n        }\n  \
    \      $result[] = $max_count;\n    }\n    return $result;\n}\n\n$output = parse_nested_parens(\"\
    (()()) ((())) () ((())()())\");\nvar_dump($output);\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: "array(4) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(3)\n  [2]=>\n  int(1)\n \
    \ [3]=>\n  int(3)\n}\n"
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = trim($paren_string);\n  $paren_string = str_replace(' ',\
    \ '', $paren_string);\n  $paren_array = str_split($paren_string);\n  $is_open\
    \ = false;\n  $level = 0;\n  $levels = array();\n  foreach ($paren_array as $paren)\
    \ {\n    if ($paren == '(') {\n      $is_open = true;\n      $level += 1;\n  \
    \  } elseif ($paren == ')') {\n      $is_open = false;\n      $levels[] = $level;\n\
    \      $level = 0;\n    } else {\n      throw new Exception(\"Invalid parenthesis\
    \ '$paren' found.\");\n    }\n  }\n  return $levels;\n}\n\n$paren_string = \"\
    (()()) ((())) () ((())()())\";\nprint_r(parse_nested_parens($paren_string));\n\
    \nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 2\n    [1] => 1\n    [2] => 0\n    [3] => 3\n    [4]\
    \ => 0\n    [5] => 0\n    [6] => 1\n    [7] => 3\n    [8] => 0\n    [9] => 1\n\
    \    [10] => 1\n    [11] => 0\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpy4oowws1.php:37\nStack trace:\n#0 /tmp/tmpy4oowws1.php(42): test()\n\
    #1 {main}\n  thrown in /tmp/tmpy4oowws1.php on line 37\n"
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_groups = explode(' ', $paren_string);\n  $result = array();\n  foreach\
    \ ($paren_groups as $p) {\n    $result[] = strlen($p) - strlen(str_replace('(',\
    \ '', $p));\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n   \
    \ return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe2ivpy9x.php:21\n\
    Stack trace:\n#0 /tmp/tmpe2ivpy9x.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpe2ivpy9x.php\
    \ on line 21\n"
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $output = array();\n  $paren_groups = explode(\" \", $paren_string);\n\
    \  foreach ($paren_groups as $group) {\n    $depth = 0;\n    $max_depth = 0;\n\
    \    for ($i = 0; $i < strlen($group); $i++) {\n      if ($group[$i] == \"(\"\
    ) {\n        $depth++;\n        if ($depth > $max_depth) {\n          $max_depth\
    \ = $depth;\n        }\n      } else if ($group[$i] == \")\") {\n        $depth--;\n\
    \      }\n    }\n    $output[] = $max_depth;\n  }\n  return $output;\n}\n\n$out\
    \ = parse_nested_parens(\"(()()) ((())) () ((())()())\");\n$expected = array(2,\
    \ 3, 1, 3);\nassert(implode(\",\", $out) == implode(\",\", $expected));\n\n$out\
    \ = parse_nested_parens(\"(()) (())(())\");\n$expected = array(2, 1);\nassert(implode(\"\
    ,\", $out) == implode(\",\", $expected));\n\n$out = parse_nested_parens(\"((()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token ")" in /tmp/tmpmnofruje.php on line
    42

    '
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $result = array();\n  $paren_array = preg_split(\"/[\\s]/\", $paren_string);\n\
    \n  foreach ($paren_array as $paren_group) {\n    $count = 0;\n    $max_count\
    \ = 0;\n    $length = strlen($paren_group);\n    for ($i = 0; $i < $length; $i++)\
    \ {\n      if ($paren_group[$i] == \"(\") {\n        $count++;\n        if ($count\
    \ > $max_count) {\n          $max_count = $count;\n        }\n      } else if\
    \ ($paren_group[$i] == \")\") {\n        $count--;\n      }\n    }\n    $result[]\
    \ = $max_count;\n  }\n  return $result;\n}\n\n$result = parse_nested_parens(\"\
    (()()) ((())) () ((())()())\");\n\nforeach ($result as $res) {\n  echo $res .\
    \ \" \";\n}\necho \"\\n\";\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "2 3 1 3 \n"
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_arr = explode(' ', $paren_string);\n  $max_levels = [];\n  foreach\
    \ ($paren_arr as $paren) {\n    $curr_level = 0;\n    $max_level = 0;\n    for\
    \ ($i = 0; $i < strlen($paren); $i++) {\n      if ($paren[$i] == '(') {\n    \
    \    $curr_level++;\n      } else if ($paren[$i] == ')') {\n        $curr_level--;\n\
    \      }\n      $max_level = max($max_level, $curr_level);\n    }\n    $max_levels[]\
    \ = $max_level;\n  }\n  return $max_levels;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  // Remove all the characters that are not '(' or ')'\n  $paren_string =\
    \ preg_replace('/[^()]/', '', $paren_string);\n  // Split into an array of single\
    \ char.\n  $paren_array = str_split($paren_string);\n  $nesting_depth = 0;\n \
    \ $nesting_array = array();\n  foreach ($paren_array as $paren) {\n    if ($paren\
    \ == '(') {\n      $nesting_depth++;\n    }\n    else {\n      array_push($nesting_array,\
    \ $nesting_depth);\n      $nesting_depth--;\n    }\n  }\n  return $nesting_array;\n\
    }\n\n$test_paren_string = \"(()()) ((())) () ((())()())\";\n$nesting_array = parse_nested_parens($test_paren_string);\n\
    print_r($nesting_array);\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 2\n    [1] => 2\n    [2] => 1\n    [3] => 3\n    [4]\
    \ => 2\n    [5] => 1\n    [6] => 1\n    [7] => 3\n    [8] => 2\n    [9] => 2\n\
    \    [10] => 2\n    [11] => 1\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpwh2xep_d.php:34\nStack trace:\n#0 /tmp/tmpwh2xep_d.php(39): test()\n\
    #1 {main}\n  thrown in /tmp/tmpwh2xep_d.php on line 34\n"
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $parsed_string = $paren_string;\n    $pattern = '/\\(\\)/';\n    preg_match_all($pattern,\
    \ $parsed_string, $matches);\n    while (!empty($matches[0])) {\n        $paren_string\
    \ = str_replace($matches[0], '', $paren_string);\n        preg_match_all($pattern,\
    \ $paren_string, $matches);\n    }\n    $nested_parens = array();\n    $paren_string\
    \ = preg_replace('/\\s+/', '', $paren_string);\n    for ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n        $nested_parens[] = substr_count($paren_string, '(', 0, $i +\
    \ 1);\n    }\n    return $nested_parens;\n}\n\n$test_input = \"(()()) ((())) ()\
    \ ((())()())\";\necho \"<pre>\";\nprint_r(parse_nested_parens($test_input));\n\
    echo \"</pre>\";\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n)\n</pre>\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp16zgjwf5.php:32\nStack trace:\n#0 /tmp/tmp16zgjwf5.php(37): test()\n\
    #1 {main}\n  thrown in /tmp/tmp16zgjwf5.php on line 32\n"
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_arr = preg_split('/ /', $paren_string);\n  $max_levels = array();\n\
    \  foreach ($paren_arr as $str) {\n    $max_levels[] = count_parens($str);\n \
    \ }\n  return $max_levels;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_parens()\
    \ in /tmp/tmpawxu_qq7.php:11\nStack trace:\n#0 /tmp/tmpawxu_qq7.php(17): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmpawxu_qq7.php(21): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmpawxu_qq7.php(26): test()\n#3 {main}\n  thrown in /tmp/tmpawxu_qq7.php\
    \ on line 11\n"
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_stack = [];\n  $max_levels = 0;\n  $level_count = 0;\n  $paren_string\
    \ = str_split($paren_string);\n  $paren_len = count($paren_string);\n  $ret_arr\
    \ = [];\n  for ($i = 0; $i < $paren_len; $i++) {\n    $cur_char = $paren_string[$i];\n\
    \    if ($cur_char == '(') {\n      $paren_stack[] = $cur_char;\n      $level_count++;\n\
    \      if ($level_count > $max_levels) {\n        $max_levels = $level_count;\n\
    \      }\n    } else if ($cur_char == ')') {\n      if (count($paren_stack) >\
    \ 0) {\n        array_pop($paren_stack);\n        $level_count--;\n      }\n \
    \   } else if ($cur_char == ' ') {\n      if (count($paren_stack) == 0) {\n  \
    \      $ret_arr[] = $max_levels;\n        $max_levels = 0;\n        $level_count\
    \ = 0;\n      }\n    }\n  }\n  return $ret_arr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyn9n9yvl.php:43\n\
    Stack trace:\n#0 /tmp/tmpyn9n9yvl.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpyn9n9yvl.php\
    \ on line 43\n"
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $result = array();\n  $temp = explode(\" \", $paren_string);\n  foreach\
    \ ($temp as $paren_group) {\n    $level = 0;\n    $max = 0;\n    for ($i = 0;\
    \ $i < strlen($paren_group); $i++) {\n      $paren = $paren_group[$i];\n     \
    \ if ($paren == \"(\") {\n        $level++;\n      } else if ($paren == \")\"\
    ) {\n        $level--;\n      }\n      if ($level > $max) {\n        $max = $level;\n\
    \      }\n    }\n    $result[] = $max;\n  }\n  return $result;\n}\n\necho json_encode(parse_nested_parens(\"\
    (()()) ((())) () ((())()())\"));\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[2,3,1,3]'
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = str_replace(\" \", \"\", $paren_string);\n  $max_nesting\
    \ = 0;\n  $count = 0;\n  $res = array();\n  for ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n    $paren = $paren_string[$i];\n    if ($paren == \"(\") {\n     \
    \ $count++;\n      if ($count > $max_nesting) {\n        $max_nesting = $count;\n\
    \      }\n    } else {\n      $count--;\n      if ($count == 0) {\n        array_push($res,\
    \ $max_nesting);\n        $max_nesting = 0;\n      }\n    }\n  }\n  return $res;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $result = array();\n  $paren_groups = explode(\" \", $paren_string);\n\
    \  foreach ($paren_groups as $paren_group) {\n    $paren_stack = array();\n  \
    \  $curr_depth = 0;\n    $max_depth = 0;\n    for ($i = 0; $i < strlen($paren_group);\
    \ $i++) {\n      $paren = $paren_group[$i];\n      if ($paren == \"(\") {\n  \
    \      $curr_depth++;\n        if ($curr_depth > $max_depth) {\n          $max_depth\
    \ = $curr_depth;\n        }\n      } else {\n        $curr_depth--;\n      }\n\
    \    }\n    $result[] = $max_depth;\n  }\n  return $result;\n}\n\n$result = parse_nested_parens(\"\
    (()()) ((())) () ((())()())\");\nprint_r($result);\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 2\n    [1] => 3\n    [2] => 1\n    [3] => 3\n)\n"
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $arrParens = explode(\" \", $paren_string);\n    $arrResults = array();\n\
    \    foreach ($arrParens as $paren) {\n        $maxCount = 0;\n        $count\
    \ = 0;\n        for ($i = 0; $i < strlen($paren); $i++) {\n            if ($paren[$i]\
    \ == \"(\") {\n                $count++;\n                if ($count > $maxCount)\
    \ {\n                    $maxCount = $count;\n                }\n            }\
    \ else if ($paren[$i] == \")\") {\n                $count--;\n            }\n\
    \        }\n        $arrResults[] = $maxCount;\n    }\n    return $arrResults;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_list = explode(' ', $paren_string);\n  $levels = array();\n  foreach\
    \ ($paren_list as $paren) {\n    $len = strlen($paren);\n    $level = 0;\n   \
    \ $max_level = 0;\n    for ($i = 0; $i < $len; $i++) {\n      if ($paren[$i] ==\
    \ '(') {\n        $level++;\n      } else {\n        $level--;\n      }\n    \
    \  if ($level > $max_level) {\n        $max_level = $level;\n      }\n    }\n\
    \    $levels[] = $max_level;\n  }\n  return $levels;\n}\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $result = array();\n    $paren_string = preg_replace('/[^()]/', '', $paren_string);\n\
    \    $paren_array = explode(' ', $paren_string);\n    foreach ($paren_array as\
    \ $paren) {\n        $result[] = parse_nested_parens_helper($paren);\n    }\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function parse_nested_parens_helper()\
    \ in /tmp/tmp9k53hglg.php:12\nStack trace:\n#0 /tmp/tmp9k53hglg.php(18): parse_nested_parens('(()())((()))()(...')\n\
    #1 /tmp/tmp9k53hglg.php(22): candidate('(()()) ((())) (...')\n#2 /tmp/tmp9k53hglg.php(27):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp9k53hglg.php on line 12\n"
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    // First find the start and end of each group by iterating over the string\
    \ once.\n    $paren_groups = array();\n    $start = 0;\n    $end = 0;\n    for\
    \ ($i = 0; $i < strlen($paren_string); $i++) {\n        if ($paren_string[$i]\
    \ == '(') {\n            $start = $i;\n        } else if ($paren_string[$i] ==\
    \ ')') {\n            $end = $i;\n            $paren_groups[] = array($start,\
    \ $end);\n        }\n    }\n\n    // Now go over each group to find the depth\
    \ of parentheses within each.\n    $depths = array();\n    foreach ($paren_groups\
    \ as $i => $group) {\n        $depth = 0;\n        $max_depth = 0;\n        for\
    \ ($j = $group[0]; $j <= $group[1]; $j++) {\n            if ($paren_string[$j]\
    \ == '(') {\n                $depth++;\n            } else if ($paren_string[$j]\
    \ == ')') {\n                $depth--;\n            }\n            $max_depth\
    \ = max($max_depth, $depth);\n        }\n        $depths[] = $max_depth;\n   \
    \ }\n    return $depths;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpafodz9j7.php:44\n\
    Stack trace:\n#0 /tmp/tmpafodz9j7.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpafodz9j7.php\
    \ on line 44\n"
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $ret = array();\n  // TODO\n  return $ret;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp70l7hsqv.php:18\n\
    Stack trace:\n#0 /tmp/tmp70l7hsqv.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp70l7hsqv.php\
    \ on line 18\n"
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $result = array();\n\
    \    foreach ($paren_array as $paren) {\n        $result[] = find_deepest_nested_parens($paren);\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function find_deepest_nested_parens()\
    \ in /tmp/tmpz9k_y5x4.php:11\nStack trace:\n#0 /tmp/tmpz9k_y5x4.php(17): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmpz9k_y5x4.php(21): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmpz9k_y5x4.php(26): test()\n#3 {main}\n  thrown in /tmp/tmpz9k_y5x4.php\
    \ on line 11\n"
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $tokens = explode(' ', $paren_string);\n  $levels = array();\n  foreach\
    \ ($tokens as $token) {\n    $current_level = 0;\n    $max_level = 0;\n    $paren_length\
    \ = strlen($token);\n    for ($i = 0; $i < $paren_length; $i++) {\n      $current_char\
    \ = $token[$i];\n      if ($current_char == '(') {\n        $current_level++;\n\
    \      } else {\n        $current_level--;\n      }\n      if ($current_level\
    \ > $max_level) {\n        $max_level = $current_level;\n      }\n    }\n    $levels[]\
    \ = $max_level;\n  }\n  return $levels;\n}\n\nprint_r(parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\"));\nprint_r(parse_nested_parens(\"()\"));\nprint_r(parse_nested_parens(\"\
    (()((()))))\"));\nprint_r(parse_nested_parens(\"((((()))))\"));\nprint_r(parse_nested_parens(\"\
    ()()()()()\"));\nprint_r(parse_nested_parens(\"(()()(()))\"));\nprint_r(parse_nested_parens(\"\
    (((((((()))(((((()))))))((()))))))\"));\nprint_r(parse_nested_parens(\"(((((((()))(((((()))))))((()))))))(\"\
    ));\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 2\n    [1] => 3\n    [2] => 1\n    [3] => 3\n)\nArray\n\
    (\n    [0] => 1\n)\nArray\n(\n    [0] => 4\n)\nArray\n(\n    [0] => 5\n)\nArray\n\
    (\n    [0] => 1\n)\nArray\n(\n    [0] => 3\n)\nArray\n(\n    [0] => 11\n)\nArray\n\
    (\n    [0] => 11\n)\n"
  timestamp: 1659979722
- exit_code: 1
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $out_arr = array();\n  $level = 0;\n  for ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n    if ($paren_string[$i] == '(') {\n      $level++;\n    } else if\
    \ ($paren_string[$i] == ')') {\n      if ($level == 0) {\n        echo \"Non-matching\
    \ parentheses!\\n\";\n        exit(1);\n      }\n      $level--;\n    } else if\
    \ ($paren_string[$i] == ' ') {\n      array_push($out_arr, $level);\n      $level\
    \ = 0;\n    } else {\n      echo \"Invalid input!\\n\";\n      exit(1);\n    }\n\
    \  }\n  array_push($out_arr, $level);\n  return $out_arr;\n}\n\nvar_dump(parse_nested_parens(\"\
    (()()) ((())) () ((())()())\"));\nvar_dump(parse_nested_parens(\"(((x))\"));\n\
    var_dump(parse_nested_parens(\"(((x)))\"));\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "array(4) {\n  [0]=>\n  int(0)\n  [1]=>\n  int(0)\n  [2]=>\n  int(0)\n \
    \ [3]=>\n  int(0)\n}\nInvalid input!\n"
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $counts = array();\n  $level = 0;\n  $current_index = 0;\n  for ($i = 0;\
    \ $i < strlen($paren_string); $i++) {\n    $char = $paren_string[$i];\n    if\
    \ ($char == '(') {\n      $level++;\n    } else if ($char == ')') {\n      $level--;\n\
    \    } else if ($char == ' ') {\n      $counts[$current_index] = $level;\n   \
    \   $current_index++;\n      $level = 0;\n    }\n  }\n  return $counts;\n}\n\n\
    assert(parse_nested_parens(\"(()()) ((())) () ((())()())\") == array(2, 3, 1,\
    \ 3));\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught AssertionError: assert(parse_nested_parens('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]) in /tmp/tmphjjzbrid.php:26\nStack trace:\n\
    #0 /tmp/tmphjjzbrid.php(26): assert(false, 'assert(parse_ne...')\n#1 {main}\n\
    \  thrown in /tmp/tmphjjzbrid.php on line 26\n"
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $pattern = '#\\([^()]*\\)#';\n    $pattern = '#\\(|\\)#';\n    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_tokens = str_split($paren_string);\n\
    \    print_r($paren_tokens);\n    $paren_counts = array();\n    $paren_count =\
    \ 0;\n    foreach ($paren_tokens as $paren_token) {\n        if ($paren_token\
    \ == '(') {\n            $paren_count++;\n        } elseif ($paren_token == ')')\
    \ {\n            $paren_counts[] = $paren_count;\n            $paren_count = 0;\n\
    \        }\n    }\n    return $paren_counts;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => (\n    [1] => (\n    [2] => )\n    [3] => (\n    [4]\
    \ => )\n    [5] => )\n    [6] => (\n    [7] => (\n    [8] => (\n    [9] => )\n\
    \    [10] => )\n    [11] => )\n    [12] => (\n    [13] => )\n    [14] => (\n \
    \   [15] => (\n    [16] => (\n    [17] => )\n    [18] => )\n    [19] => (\n  \
    \  [20] => )\n    [21] => (\n    [22] => )\n    [23] => )\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmppsy5id0l.php:31\nStack trace:\n#0 /tmp/tmppsy5id0l.php(36):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmppsy5id0l.php on line 31\n"
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_groups\
    \ = explode(' ', $paren_string);\n    $nesting_level = array();\n    foreach ($paren_groups\
    \ as $paren_group) {\n        $nesting_level[] = parse_nested_parens_for_group($paren_group);\n\
    \    }\n    return $nesting_level;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function parse_nested_parens_for_group()\
    \ in /tmp/tmp0alwrlfp.php:12\nStack trace:\n#0 /tmp/tmp0alwrlfp.php(18): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmp0alwrlfp.php(22): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmp0alwrlfp.php(27): test()\n#3 {main}\n  thrown in /tmp/tmp0alwrlfp.php\
    \ on line 12\n"
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $result = array();\n\
    \    foreach ($paren_array as $paren) {\n        $result[] = parse_parens($paren);\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function parse_parens()\
    \ in /tmp/tmppexf14ks.php:11\nStack trace:\n#0 /tmp/tmppexf14ks.php(17): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmppexf14ks.php(21): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmppexf14ks.php(26): test()\n#3 {main}\n  thrown in /tmp/tmppexf14ks.php\
    \ on line 11\n"
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_arr = preg_split('/\\s+/', $paren_string);\n    $max_nest_arr\
    \ = array();\n    foreach ($paren_arr as $paren) {\n        $paren_len = strlen($paren);\n\
    \        $max_nest = 0;\n        $nest_level = 0;\n        for ($i = 0; $i < $paren_len;\
    \ $i++) {\n            if ($paren[$i] == '(') {\n                $nest_level++;\n\
    \                if ($nest_level > $max_nest) {\n                    $max_nest\
    \ = $nest_level;\n                }\n            } else if ($paren[$i] == ')')\
    \ {\n                $nest_level--;\n            }\n        }\n        $max_nest_arr[]\
    \ = $max_nest;\n    }\n    return $max_nest_arr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_arr = explode(' ', $paren_string);\n  $deepest_nesting = array();\n\
    \  for ($i = 0; $i < count($paren_arr); $i++) {\n    $deepest_nesting[$i] = 0;\n\
    \    $tmp_level = 0;\n    for ($j = 0; $j < strlen($paren_arr[$i]); $j++) {\n\
    \      if ($paren_arr[$i][$j] == '(') {\n        $tmp_level++;\n      } else {\n\
    \        $tmp_level--;\n      }\n      if ($tmp_level > $deepest_nesting[$i])\
    \ {\n        $deepest_nesting[$i] = $tmp_level;\n      }\n    }\n  }\n  return\
    \ $deepest_nesting;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $out = array();\n    $paren_arr = explode(\" \", $paren_string);\n  \
    \  foreach ($paren_arr as $paren) {\n        $nesting = 0;\n        $max_nesting\
    \ = 0;\n        for ($i = 0; $i < strlen($paren); $i++) {\n            $char =\
    \ $paren[$i];\n            if ($char == \"(\") {\n                $nesting++;\n\
    \            } else if ($char == \")\") {\n                $nesting--;\n     \
    \       }\n            if ($nesting > $max_nesting) {\n                $max_nesting\
    \ = $nesting;\n            }\n        }\n        $out[] = $max_nesting;\n    }\n\
    \    return $out;\n}\n\n$paren_string = \"(()()) ((())) () ((())()())\";\n$nested_parens\
    \ = parse_nested_parens($paren_string);\nprint_r($nested_parens);\n\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 2\n    [1] => 3\n    [2] => 1\n    [3] => 3\n)\n"
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    //first thing to do is to split the string into an array of strings,\
    \ each element is a group of parens\n    $paren_array = explode(\" \", $paren_string);\n\
    \    //loop through the array and send each group of parens to the helper function\
    \ which will return the depth of nesting\n    foreach ($paren_array as $value)\
    \ {\n        $output[] = find_paren_depth($value);\n    }\n    return $output;\n\
    }\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function find_paren_depth()\
    \ in /tmp/tmpcx_naxlg.php:12\nStack trace:\n#0 /tmp/tmpcx_naxlg.php(17): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmpcx_naxlg.php(21): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmpcx_naxlg.php(26): test()\n#3 {main}\n  thrown in /tmp/tmpcx_naxlg.php\
    \ on line 12\n"
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_strs = explode(' ', $paren_string);\n  $ans = array();\n  foreach\
    \ ($paren_strs as $paren_str) {\n    if (strlen($paren_str) > 0) {\n      array_push($ans,\
    \ parse_nested_parens_core($paren_str));\n    }\n  }\n  return $ans;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function parse_nested_parens_core()\
    \ in /tmp/tmpvva4nluo.php:12\nStack trace:\n#0 /tmp/tmpvva4nluo.php(19): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmpvva4nluo.php(23): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmpvva4nluo.php(28): test()\n#3 {main}\n  thrown in /tmp/tmpvva4nluo.php\
    \ on line 12\n"
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  // Remove spaces since they are no longer needed\n  $paren_string = str_replace('\
    \ ', '', $paren_string);\n  $paren_string_length = strlen($paren_string);\n  $paren_level\
    \ = 0;\n  $max_paren_level = 0;\n  $paren_level_array = array();\n  for ($i =\
    \ 0; $i < $paren_string_length; $i++) {\n    if ($paren_string[$i] == '(') {\n\
    \      $paren_level++;\n      if ($paren_level > $max_paren_level) {\n       \
    \ $max_paren_level = $paren_level;\n      }\n    }\n    elseif ($paren_string[$i]\
    \ == ')') {\n      $paren_level_array[] = $paren_level;\n      $paren_level--;\n\
    \    }\n  }\n  return $paren_level_array;\n}\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbmra14f7.php:33\n\
    Stack trace:\n#0 /tmp/tmpbmra14f7.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpbmra14f7.php\
    \ on line 33\n"
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_groups = explode(' ', $paren_string);\n  $paren_groups_parsed =\
    \ array();\n  foreach ($paren_groups as $paren_group) {\n    $paren_group_parsed\
    \ = 0;\n    for ($i = 0; $i < strlen($paren_group); $i++) {\n      if ($paren_group[$i]\
    \ == '(') {\n        $paren_group_parsed++;\n      }\n    }\n    $paren_groups_parsed[]\
    \ = $paren_group_parsed;\n  }\n  return $paren_groups_parsed;\n}\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplyw0ymzq.php:26\n\
    Stack trace:\n#0 /tmp/tmplyw0ymzq.php(31): test()\n#1 {main}\n  thrown in /tmp/tmplyw0ymzq.php\
    \ on line 26\n"
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $deepest_counts = array();\n    $paren_groups = explode(\" \", $paren_string);\n\
    \    foreach ($paren_groups as $paren_group) {\n        $level = 0;\n        $deepest_level\
    \ = 0;\n        $group_length = strlen($paren_group);\n        for ($i = 0; $i\
    \ < $group_length; $i++) {\n            $char = $paren_group[$i];\n          \
    \  if ($char == \"(\") {\n                $level++;\n                if ($level\
    \ > $deepest_level) {\n                    $deepest_level = $level;\n        \
    \        }\n            } elseif ($char == \")\") {\n                $level--;\n\
    \            }\n        }\n        $deepest_counts[] = $deepest_level;\n    }\n\
    \    return $deepest_counts;\n}\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    // Find each '(' and ')' and put in an array\n    $matches = [];\n  \
    \  preg_match_all('/\\(|\\)/', $paren_string, $matches);\n    $paren_array = $matches[0];\n\
    \n    // Iterate through this array, adding 1 for '(' and subtracting 1 for ')'\n\
    \    // When the sum is 0, a closed group has been found, so save this value\n\
    \    $cnt = 0;\n    $max_cnt = 0;\n    $paren_array_size = count($paren_array);\n\
    \    for ($i = 0; $i < $paren_array_size; $i++) {\n        if ($paren_array[$i]\
    \ == '(') {\n            $cnt++;\n        } else {\n            $cnt--;\n    \
    \    }\n        if ($cnt > $max_cnt) {\n            $max_cnt = $cnt;\n       \
    \ }\n        if ($cnt == 0) {\n            $results[] = $max_cnt;\n          \
    \  $max_cnt = 0;\n        }\n    }\n    return $results;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(\" \", $paren_string);\n  $nested_parens = array();\n\
    \  foreach ($paren_array as $paren_group) {\n    $current_paren_group = array();\n\
    \    $current_nested_level = 0;\n    for ($i = 0; $i < strlen($paren_group); $i++)\
    \ {\n      $char = $paren_group[$i];\n      if ($char == \"(\") {\n        $current_nested_level++;\n\
    \      } elseif ($char == \")\") {\n        $current_nested_level--;\n      }\n\
    \      $current_paren_group[] = $current_nested_level;\n    }\n    $nested_parens[]\
    \ = max($current_paren_group);\n  }\n  return $nested_parens;\n}\n\n$paren_string\
    \ = \"(()()) ((())) () ((())()())\";\n$nested_parens = parse_nested_parens($paren_string);\n\
    echo \"Paren string: $paren_string\\n\";\necho \"Nested parens: \" . json_encode($nested_parens)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Paren string: (()()) ((())) () ((())()())

    Nested parens: [2,3,1,3]

    '
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $str = trim($paren_string);\n  $nested_parens = array();\n  while (strlen($str)\
    \ > 0) {\n    $start_pos = strpos($str, '(');\n    $parens_list = substr($str,\
    \ $start_pos, strpos($str, ')') - $start_pos + 1);\n    $nested_parens[] = find_parens_nesting($parens_list);\n\
    \    $str = substr($str, strpos($str, ')') + 1);\n  }\n  return $nested_parens;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function find_parens_nesting()\
    \ in /tmp/tmpkr8h_mk2.php:13\nStack trace:\n#0 /tmp/tmpkr8h_mk2.php(20): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmpkr8h_mk2.php(24): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmpkr8h_mk2.php(29): test()\n#3 {main}\n  thrown in /tmp/tmpkr8h_mk2.php\
    \ on line 13\n"
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_groups = explode(' ', $paren_string);\n    $max_nest_level = [];\n\
    \    foreach ($paren_groups as $paren_group) {\n        $chars = str_split($paren_group);\n\
    \        $current_level = 0;\n        $max_level = 0;\n        foreach ($chars\
    \ as $char) {\n            if ($char == '(') {\n                $current_level++;\n\
    \            } else {\n                $current_level--;\n            }\n    \
    \        if ($current_level > $max_level) {\n                $max_level = $current_level;\n\
    \            }\n        }\n        $max_nest_level[] = $max_level;\n    }\n  \
    \  return $max_nest_level;\n}\n\n$test_string = '(()()) ((())) () ((())()())';\n\
    $test_result = parse_nested_parens($test_string);\nvar_dump($test_result);\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "array(4) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(3)\n  [2]=>\n  int(1)\n \
    \ [3]=>\n  int(3)\n}\n"
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_arr = explode(' ', $paren_string);\n    $depth_arr = array();\n\
    \    foreach ($paren_arr as $paren) {\n        $depth = 0;\n        $max_depth\
    \ = 0;\n        for ($i = 0; $i < strlen($paren); $i++) {\n            if ($paren[$i]\
    \ == '(') {\n                $depth++;\n            } else {\n               \
    \ $depth--;\n            }\n            if ($depth > $max_depth) {\n         \
    \       $max_depth = $depth;\n            }\n        }\n        $depth_arr[] =\
    \ $max_depth;\n    }\n    return $depth_arr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    // Iterate through each group separately\n    $groups = explode(\" \"\
    , $paren_string);\n    $max_depth = array();\n    foreach ($groups as $group)\
    \ {\n        $depth = 0;\n        $max_depth[] = 0;\n        for ($i = 0; $i <\
    \ strlen($group); $i++) {\n            // Increment depth if open parentheses\
    \ found\n            if ($group[$i] == \"(\") {\n                $depth++;\n \
    \           } else {\n                // Decrement depth, and update the maximum\
    \ value found\n                $depth--;\n                $max_depth[count($max_depth)\
    \ - 1] = max($max_depth[count($max_depth) - 1], $depth);\n            }\n    \
    \    }\n    }\n    return $max_depth;\n}\n\nfunction candidate(...$args) {\n \
    \   return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprt7n8v7m.php:33\n\
    Stack trace:\n#0 /tmp/tmprt7n8v7m.php(38): test()\n#1 {main}\n  thrown in /tmp/tmprt7n8v7m.php\
    \ on line 33\n"
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $output = array();\n    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_groups = explode(' ', $paren_string);\n\
    \    foreach ($paren_groups as $paren_group) {\n        //pre-processing paren\
    \ groups to remove all non () elements\n        $paren_group = preg_replace('/[^()]/',\
    \ '', $paren_group);\n        $max_depth = -1;\n        $current_depth = 0;\n\
    \        for ($i = 0; $i < strlen($paren_group); $i++) {\n            if ($paren_group[$i]\
    \ == '(') {\n                $current_depth++;\n            } else if ($paren_group[$i]\
    \ == ')') {\n                $current_depth--;\n            }\n            if\
    \ ($current_depth > $max_depth) {\n                $max_depth = $current_depth;\n\
    \            }\n        }\n        $output[] = $max_depth;\n    }\n    return\
    \ $output;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $deepest_level = 0;\n    $res = array();\n    $cur_level = 0;\n    for\
    \ ($i = 0; $i < strlen($paren_string); $i++) {\n        if ($paren_string[$i]\
    \ == '(') {\n            $cur_level++;\n            if ($cur_level > $deepest_level)\
    \ {\n                $deepest_level = $cur_level;\n            }\n        } else\
    \ if ($paren_string[$i] == ')') {\n            $cur_level--;\n        } else if\
    \ ($paren_string[$i] == ' ') {\n            $res[] = $deepest_level;\n       \
    \     $deepest_level = 0;\n            $cur_level = 0;\n        }\n    }\n   \
    \ return $res;\n}\n\necho 'parse_nested_parens: ';\nvar_dump(parse_nested_parens(\"\
    (()()) ((())) () ((())()())\"));\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "parse_nested_parens: array(3) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(3)\n\
    \  [2]=>\n  int(1)\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj3ssrgve.php:36\n\
    Stack trace:\n#0 /tmp/tmpj3ssrgve.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpj3ssrgve.php\
    \ on line 36\n"
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(\" \", $paren_string);\n  $levels = array();\n \
    \ for ($i = 0; $i < count($paren_array); $i++) {\n    $paren_group = $paren_array[$i];\n\
    \    $paren_level = 0;\n    $inner_paren_level = 0;\n    for ($j = 0; $j < strlen($paren_group);\
    \ $j++) {\n      $character = $paren_group[$j];\n      if ($character == \"(\"\
    ) {\n        $paren_level++;\n        if ($inner_paren_level < $paren_level) {\n\
    \          $inner_paren_level = $paren_level;\n        }\n      } elseif ($character\
    \ == \")\") {\n        $paren_level--;\n      }\n    }\n    array_push($levels,\
    \ $inner_paren_level);\n  }\n  return $levels;\n}\n\n$test_string = \"(()()) ((()))\
    \ () ((())()())\";\n$result = parse_nested_parens($test_string);\necho \"<h2>Parse\
    \ nested parentheses</h2>\";\necho \"<pre>Test string = '$test_string'</pre>\"\
    ;\necho \"<pre>Result = \";\nprint_r($result);\necho \"</pre>\";\necho \"<hr>\"\
    ;\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<h2>Parse nested parentheses</h2><pre>Test string = '(()()) ((())) () ((())()())'</pre><pre>Result\
    \ = Array\n(\n    [0] => 2\n    [1] => 3\n    [2] => 1\n    [3] => 3\n)\n</pre><hr>"
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_list = explode(' ', $paren_string);\n    $deepest_nest = [];\n\
    \    foreach ($paren_list as $sub_paren) {\n        // For each group, find the\
    \ maximum number of pairs of parentheses.\n        $nest_counter = 0;\n      \
    \  $nest_max = 0;\n        $len = strlen($sub_paren);\n        for ($i = 0; $i\
    \ < $len; $i++) {\n            if ($sub_paren[$i] == '(') {\n                $nest_counter++;\n\
    \            } else if ($sub_paren[$i] == ')') {\n                $nest_counter--;\n\
    \            }\n            $nest_max = max($nest_max, $nest_counter);\n     \
    \   }\n        $deepest_nest[] = $nest_max;\n    }\n    return $deepest_nest;\n\
    }\n$dummy = \"(()()) ((())) () ((())()())\";\nvar_dump(parse_nested_parens($dummy));\n\
    \nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "array(4) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(3)\n  [2]=>\n  int(1)\n \
    \ [3]=>\n  int(3)\n}\n"
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $groups = explode(' ', $paren_string);\n    $depth = array();\n    foreach\
    \ ($groups as $group) {\n        $count = 0;\n        $temp = 0;\n        for\
    \ ($i = 0; $i < strlen($group); $i++) {\n            if ($group[$i] == '(') {\n\
    \                $temp++;\n            } else if ($group[$i] == ')') {\n     \
    \           $temp--;\n            }\n            if ($temp > $count) {\n     \
    \           $count = $temp;\n            }\n        }\n        $depth[] = $count;\n\
    \    }\n    return $depth;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $result = array();\n    $paren_string = preg_replace('/\\s+/', '', $paren_string);\n\
    \    for ($i = 0; $i < strlen($paren_string); $i++) {\n        $paren = $paren_string[$i];\n\
    \        if ($paren == '(') {\n            $result[] = 1;\n        } else {\n\
    \            $j = sizeof($result) - 1;\n            while ($j >= 0 && $result[$j]\
    \ > 0) {\n                $result[$j]++;\n                $j--;\n            }\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdfd9s5yp.php:30\n\
    Stack trace:\n#0 /tmp/tmpdfd9s5yp.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpdfd9s5yp.php\
    \ on line 30\n"
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $nested_parens = [];\n    $open_parens = 0;\n    $deepest_parens = 0;\n\
    \    for ($i = 0; $i < strlen($paren_string); $i++) {\n        if ($paren_string[$i]\
    \ == '(') {\n            $open_parens++;\n            if ($open_parens > $deepest_parens)\
    \ {\n                $deepest_parens = $open_parens;\n            }\n        }\
    \ else if ($paren_string[$i] == ')') {\n            $open_parens--;\n        }\
    \ else if ($paren_string[$i] == ' ') {\n            $nested_parens[] = $deepest_parens;\n\
    \            $deepest_parens = 0;\n            $open_parens = 0;\n        }\n\
    \    }\n    $nested_parens[] = $deepest_parens;\n    return $nested_parens;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = explode(' ', $paren_string);\n    $return_array = array();\n\
    \    foreach ($paren_string as $value) {\n        $deep_count = 0;\n        $inner_count\
    \ = 0;\n        $len = strlen($value);\n        $return_array[] = $deep_count;\n\
    \        for ($i = 0; $i < $len; $i++) {\n            if ($value[$i] == '(') {\n\
    \                $inner_count++;\n                if ($inner_count > $deep_count)\
    \ {\n                    $deep_count = $inner_count;\n                }\n    \
    \        } elseif ($value[$i] == ')') {\n                $inner_count--;\n   \
    \         }\n        }\n        $return_array[] = $deep_count;\n    }\n    return\
    \ $return_array;\n}\nprint_r(parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    ));\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 0\n    [1] => 2\n    [2] => 0\n    [3] => 3\n    [4]\
    \ => 0\n    [5] => 1\n    [6] => 0\n    [7] => 3\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp6m0aui0a.php:35\nStack trace:\n#0 /tmp/tmp6m0aui0a.php(40):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp6m0aui0a.php on line 35\n"
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $max_nesting = array();\n\
    \    foreach ($paren_array as $paren) {\n        $paren_len = strlen($paren);\n\
    \        $max_level = 0;\n        $level = 0;\n        for ($i = 0; $i < $paren_len;\
    \ $i++) {\n            if ($paren[$i] == \"(\") {\n                $level++;\n\
    \                if ($level > $max_level) {\n                    $max_level =\
    \ $level;\n                }\n            } else if ($paren[$i] == \")\") {\n\
    \                $level--;\n            }\n        }\n        $max_nesting[] =\
    \ $max_level;\n    }\n    return $max_nesting;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = explode(' ', $paren_string);\n    foreach ($paren_string\
    \ as $paren) {\n        $result[] = get_max_level($paren);\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_max_level()\
    \ in /tmp/tmpgcyleec4.php:10\nStack trace:\n#0 /tmp/tmpgcyleec4.php(16): parse_nested_parens(Array)\n\
    #1 /tmp/tmpgcyleec4.php(20): candidate('(()()) ((())) (...')\n#2 /tmp/tmpgcyleec4.php(25):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpgcyleec4.php on line 10\n"
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    // Break string into an array of group\n    $groups = explode(\" \",\
    \ $paren_string);\n    $num_groups = count($groups);\n    $max_depth = array();\n\
    \    // For each group, using stack approach to count the maximum depth\n    for\
    \ ($i = 0; $i < $num_groups; $i++) {\n        $stack = array();\n        $cur_depth\
    \ = 0;\n        $max_depth_cur_group = 0;\n        for ($j = 0; $j < strlen($groups[$i]);\
    \ $j++) {\n            if ($groups[$i][$j] == \"(\") {\n                $cur_depth++;\n\
    \                $max_depth_cur_group = max($max_depth_cur_group, $cur_depth);\n\
    \            } else if ($groups[$i][$j] == \")\") {\n                $cur_depth--;\n\
    \            }\n        }\n        $max_depth[] = $max_depth_cur_group;\n    }\n\
    \    return $max_depth;\n}\n\nprint_r(parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    ));\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 2\n    [1] => 3\n    [2] => 1\n    [3] => 3\n)\n"
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $output = array();\n\
    \    foreach ($paren_array as $paren_group) {\n        $level = 0;\n        $max_level\
    \ = 0;\n        for ($i = 0; $i < strlen($paren_group); $i++) {\n            if\
    \ ($paren_group[$i] == \"(\") {\n                $level++;\n                if\
    \ ($level > $max_level) {\n                    $max_level = $level;\n        \
    \        }\n            } else if ($paren_group[$i] == \")\") {\n            \
    \    $level--;\n            }\n        }\n        array_push($output, $max_level);\n\
    \    }\n    return $output;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  // Your solution here\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpswslyxk_.php:16\n\
    Stack trace:\n#0 /tmp/tmpswslyxk_.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpswslyxk_.php\
    \ on line 16\n"
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_arr = explode(' ', $paren_string);\n    $levels = array();\n \
    \   foreach ($paren_arr as $pa) {\n        if (strlen($pa) % 2 == 0) {\n     \
    \       $level = 0;\n            for ($i = 0; $i < strlen($pa); $i++) {\n    \
    \            if ($pa[$i] == '(') {\n                    $level++;\n          \
    \      } else {\n                    $level--;\n                }\n          \
    \  }\n            if ($level == 0) {\n                $levels[] = strlen($pa)\
    \ / 2;\n            } else {\n                $levels[] = -1;\n            }\n\
    \        } else {\n            $levels[] = -1;\n        }\n    }\n    return $levels;\n\
    }\n\n$result = parse_nested_parens(\"(()()) ((())) () ((())()())\");\nprint_r($result);\n\
    \nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 3\n    [1] => 3\n    [2] => 1\n    [3] => 5\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp_w0vdnn5.php:40\nStack\
    \ trace:\n#0 /tmp/tmp_w0vdnn5.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp_w0vdnn5.php\
    \ on line 40\n"
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $nesting_level = array();\n\n    $max_nest = 0;\n    $max_nest_index\
    \ = -1;\n    $index = 0;\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    for ($i = 0; $i < strlen($paren_string); $i++) {\n        if ($paren_string[$i]\
    \ == '(') {\n            if ($max_nest_index == -1) {\n                $max_nest_index\
    \ = $index;\n            }\n            $max_nest++;\n        } else {\n     \
    \       $nesting_level[$max_nest_index] = $max_nest;\n            $max_nest =\
    \ 0;\n            $max_nest_index = -1;\n            $index++;\n        }\n  \
    \  }\n    return $nesting_level;\n}\n\n$result = parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\");\necho implode(', ', $result);\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "2, 1, 0, 3, 1, 3, 1, 1\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmplhydn6zt.php:37\nStack trace:\n#0 /tmp/tmplhydn6zt.php(42): test()\n\
    #1 {main}\n  thrown in /tmp/tmplhydn6zt.php on line 37\n"
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_arr = explode(' ', $paren_string);\n  $out_arr = array();\n  foreach\
    \ ($paren_arr as $paren) {\n    $paren_arr = str_split($paren);\n    $i = 0;\n\
    \    $level = 0;\n    $max_level = 0;\n    while ($i < count($paren_arr)) {\n\
    \      if ($paren_arr[$i] == '(') {\n        $level += 1;\n        if ($level\
    \ > $max_level) {\n          $max_level = $level;\n        }\n      } else {\n\
    \        $level -= 1;\n      }\n      $i += 1;\n    }\n    $out_arr[] = $max_level;\n\
    \  }\n  return $out_arr;\n}\necho '<pre>';\nprint_r(parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\"));\necho '</pre>';\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => 2\n    [1] => 3\n    [2] => 1\n    [3] => 3\n\
    )\n</pre>"
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_groups = explode(' ', $paren_string);\n    $result = array();\n\
    \    for ($i = 0; $i < count($paren_groups); $i++) {\n        $result[] = parse_nested_parens_group($paren_groups[$i]);\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function parse_nested_parens_group()\
    \ in /tmp/tmpslxpljqa.php:11\nStack trace:\n#0 /tmp/tmpslxpljqa.php(17): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmpslxpljqa.php(21): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmpslxpljqa.php(26): test()\n#3 {main}\n  thrown in /tmp/tmpslxpljqa.php\
    \ on line 11\n"
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    // TODO: Implement me\n    $paren_list = explode(\" \", $paren_string);\n\
    \    $max_nesting = 0;\n    foreach ($paren_list as $paren) {\n        $cur_nesting\
    \ = 0;\n        $cur_max = 0;\n        for ($i = 0; $i < strlen($paren); $i++)\
    \ {\n            if ($paren[$i] == \"(\") {\n                $cur_nesting++;\n\
    \                if ($cur_nesting > $cur_max) {\n                    $cur_max\
    \ = $cur_nesting;\n                }\n            } else {\n                $cur_nesting--;\n\
    \            }\n        }\n        if ($cur_max > $max_nesting) {\n          \
    \  $max_nesting = $cur_max;\n        }\n    }\n    return $max_nesting;\n}\n\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcwp8p4vx.php:36\n\
    Stack trace:\n#0 /tmp/tmpcwp8p4vx.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpcwp8p4vx.php\
    \ on line 36\n"
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_level = 0;\n    $max_nesting = 0;\n    $max_nesting_per_group\
    \ = array();\n    $paren_count = 0;\n    $parsed_level = 0;\n    $is_left_bracket\
    \ = false;\n    $paren_len = strlen($paren_string);\n    for ($i = 0; $i < $paren_len;\
    \ $i++) {\n        $ch = $paren_string[$i];\n        if ($ch == '(') {\n     \
    \       $paren_level++;\n            $is_left_bracket = true;\n        } else\
    \ if ($ch == ')') {\n            $paren_level--;\n            $paren_count++;\n\
    \            if ($is_left_bracket) {\n                $max_nesting_per_group[$parsed_level]\
    \ = 0;\n                $parsed_level++;\n                $is_left_bracket = false;\n\
    \            }\n        } else if ($ch == ' ') {\n            $max_nesting_per_group[$parsed_level]\
    \ = $max_nesting;\n            $parsed_level++;\n            $max_nesting = 0;\n\
    \        } else {\n            exit(\"Input is not a valid string.\\n\");\n  \
    \      }\n        if ($paren_level > $max_nesting) {\n            $max_nesting\
    \ = $paren_level;\n        }\n    }\n    if ($paren_count != $parsed_level) {\n\
    \        exit(\"Input is not a valid string.\\n\");\n    }\n    return $max_nesting_per_group;\n\
    }\n\necho var_export(parse_nested_parens(\"(()()) ((())) () ((())()())\"), true);\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Input is not a valid string.

    '
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $start = microtime(true);\n    $levels = array();\n    $stack = array();\n\
    \    $current_level = 0;\n    $n_parens = strlen($paren_string);\n    for ($i\
    \ = 0; $i < $n_parens; $i++) {\n        $c = $paren_string[$i];\n        if ($c\
    \ == '(') {\n            array_push($stack, $c);\n            $current_level +=\
    \ 1;\n        } else if ($c == ')') {\n            array_pop($stack);\n      \
    \      $levels[] = $current_level;\n            $current_level -= 1;\n       \
    \ }\n    }\n    echo \"Done in \" . (microtime(true) - $start) . \" seconds\\\
    n\";\n    return $levels;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Done in 2.3126602172852E-5 seconds\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp8y59rlwi.php:33\nStack trace:\n#0 /tmp/tmp8y59rlwi.php(38):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp8y59rlwi.php on line 33\n"
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = str_replace(')', ' ', $paren_string);\n  $paren_string\
    \ = str_replace('(', '', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace(' ', ')(', $paren_string);\n  $str_arr = str_split($paren_string);\n\
    \  $stack = [];\n  $count_arr = [];\n  $index = 0;\n  foreach ($str_arr as $char)\
    \ {\n    if ($char == '(') {\n      array_push($stack, $char);\n    } else {\n\
    \      array_pop($stack);\n      $count_arr[$index] = count($stack);\n      $index++;\n\
    \    }\n  }\n  return $count_arr;\n}\n\n$test_string = \"(()()) ((())) () ((())()())\"\
    ;\n$test_string2 = \"()\";\nprint_r(parse_nested_parens($test_string));\nprint_r(parse_nested_parens($test_string2));\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 0\n)\nArray\n(\n    [0] => 0\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmppryksq9f.php:37\nStack trace:\n#0 /tmp/tmppryksq9f.php(42):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmppryksq9f.php on line 37\n"
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = preg_replace('/\\s+/', ' ', $paren_string); // Replace\
    \ multiple spaces with single space\n    $paren_groups = explode(' ', $paren_string);\
    \ // Split by spaces\n    $levels = array();\n    foreach ($paren_groups as $group)\
    \ {\n        $level = 0;\n        $max_level = 0;\n        foreach (str_split($group)\
    \ as $char) {\n            if ($char == '(') $level++;\n            else if ($char\
    \ == ')') $level--;\n            $max_level = max($max_level, $level);\n     \
    \   }\n        $levels[] = $max_level;\n    }\n    return $levels;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $result = array();\n    $stack\
    \ = array();\n    $paren_len = strlen($paren_string);\n    for ($i = 0; $i < $paren_len;\
    \ $i++) {\n        if ($paren_string[$i] == \"(\") {\n            array_push($stack,\
    \ $paren_string[$i]);\n        } elseif ($paren_string[$i] == \")\") {\n     \
    \       array_pop($stack);\n        } elseif ($paren_string[$i] == \" \") {\n\
    \            array_push($result, count($stack));\n        }\n    }\n    return\
    \ $result;\n}\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp54mp750w.php:28\n\
    Stack trace:\n#0 /tmp/tmp54mp750w.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp54mp750w.php\
    \ on line 28\n"
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  // TODO: Fill in the code for this function\n  $result_arr = array();\n\
    \  $paren_arr = explode(\" \", $paren_string);\n  foreach ($paren_arr as $paren_item)\
    \ {\n    $paren_cnt = 0;\n    $paren_cnt_max = 0;\n    $prev_paren_cnt = 0;\n\
    \    for ($i = 0; $i < strlen($paren_item); $i++) {\n      if (substr($paren_item,\
    \ $i, 1) == \"(\") {\n        $paren_cnt++;\n        if ($paren_cnt > $paren_cnt_max)\
    \ {\n          $paren_cnt_max = $paren_cnt;\n        }\n      } else if (substr($paren_item,\
    \ $i, 1) == \")\") {\n        $paren_cnt--;\n      }\n    }\n    $result_arr[]\
    \ = $paren_cnt_max;\n  }\n  return $result_arr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $result = array();\n  $len = strlen($paren_string);\n  $level = 0;\n  $max_level\
    \ = 0;\n  for ($i = 0; $i < $len; $i++) {\n    if ($paren_string[$i] == '(') {\n\
    \      $level++;\n      if ($level > $max_level) {\n        $max_level = $level;\n\
    \      }\n    } else if ($paren_string[$i] == ')') {\n      $level--;\n    } else\
    \ if ($paren_string[$i] == ' ') {\n      array_push($result, $max_level);\n  \
    \    $max_level = 0;\n      $level = 0;\n    }\n  }\n  array_push($result, $max_level);\n\
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $level_counts = array();\n  $start_paren = \"(\";\n  $end_paren = \")\"\
    ;\n  $end_of_paren = $start_of_paren = 0;\n  $start_of_paren = strpos($paren_string,\
    \ $start_paren);\n  $end_of_paren = strpos($paren_string, $end_paren);\n  while\
    \ ($start_of_paren !== FALSE && $end_of_paren !== FALSE) {\n    if ($start_of_paren\
    \ > $end_of_paren) {\n      $start_of_paren = $end_of_paren = 0;\n      $end_of_paren\
    \ = strpos($paren_string, $end_paren);\n      continue;\n    }\n    $level_count\
    \ = 1;\n    $start_of_paren = $end_of_paren + 1;\n    while ($start_of_paren !==\
    \ FALSE && $end_of_paren !== FALSE) {\n      $start_of_paren = strpos($paren_string,\
    \ $start_paren, $start_of_paren);\n      $end_of_paren = strpos($paren_string,\
    \ $end_paren, $end_of_paren+1);\n      if ($start_of_paren !== FALSE && $end_of_paren\
    \ !== FALSE) {\n        if ($start_of_paren > $end_of_paren) {\n          $level_count++;\n\
    \          $end_of_paren = strpos($paren_string, $end_paren, $end_of_paren+1);\n\
    \        } else {\n          $level_count--;\n          $start_of_paren = strpos($paren_string,\
    \ $start_paren, $start_of_paren+1);\n        }\n      }\n    }\n    array_push($level_counts,\
    \ $level_count);\n    $end_of_paren = strpos($paren_string, $end_paren, $end_of_paren+1);\n\
    \  }\n  return $level_counts;\n}\n\n$paren_string = \"(()()) ((())) () ((())()())\"\
    ;\nprint_r(parse_nested_parens($paren_\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmp4ykc3wmv.php
    on line 43

    '
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $groups = explode(' ', $paren_string);\n    $result = array();\n    foreach\
    \ ($groups as $group) {\n        $temp = 0;\n        $max = 0;\n        foreach\
    \ (str_split($group) as $char) {\n            if ($char == '(') {\n          \
    \      $temp++;\n            } else {\n                $temp--;\n            }\n\
    \            if ($temp > $max) {\n                $max = $temp;\n            }\n\
    \        }\n        $result[] = $max;\n    }\n    return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(\" \", $paren_string);\n  $depth_array = array();\n\
    \  foreach ($paren_array as $paren_str) {\n    $depth = 0;\n    $max_depth = 0;\n\
    \    $paren_length = strlen($paren_str);\n    for ($i = 0; $i < $paren_length;\
    \ $i++) {\n      if ($paren_str[$i] == \"(\") {\n        $depth++;\n        if\
    \ ($depth > $max_depth) {\n          $max_depth = $depth;\n        }\n      }\
    \ else {\n        $depth--;\n      }\n    }\n    array_push($depth_array, $max_depth);\n\
    \  }\n  return $depth_array;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(\" \", $paren_string);\n  foreach ($paren_array\
    \ as $str) {\n    $str_arr = str_split($str);\n    $current_level = 0;\n    $stack\
    \ = [];\n    $max_level = 0;\n    for ($i = 0; $i < count($str_arr); $i++) {\n\
    \      $char = $str_arr[$i];\n      if ($char == \"(\") {\n        array_push($stack,\
    \ $char);\n        $current_level++;\n        if ($current_level > $max_level)\
    \ {\n          $max_level = $current_level;\n        }\n      } else if ($char\
    \ == \")\") {\n        if (count($stack) == 0) {\n          return null;\n   \
    \     }\n        $popped = array_pop($stack);\n        if ($popped != \"(\") {\n\
    \          return null;\n        }\n        $current_level--;\n      }\n    }\n\
    \    $result[] = $max_level;\n  }\n  return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $depth = 0;\n    $depth_array = array();\n    $char_array = str_split($paren_string);\n\
    \    foreach ($char_array as $char) {\n        if ($char == '(') {\n         \
    \   $depth += 1;\n        } elseif ($char == ')') {\n            $depth -= 1;\n\
    \        } elseif ($char == ' ') {\n            array_push($depth_array, $depth);\n\
    \        }\n    }\n    return $depth_array;\n}\n\n$test_case = \"(()()) ((()))\
    \ () ((())()())\";\necho \"Test case: \".$test_case.\"\\n\";\necho \"Result: \"\
    .var_export(parse_nested_parens($test_case), true).\"\\n\";\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "Test case: (()()) ((())) () ((())()())\nResult: array (\n  0 => 0,\n  1\
    \ => 0,\n  2 => 0,\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr3dxq7vb.php:32\n\
    Stack trace:\n#0 /tmp/tmpr3dxq7vb.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpr3dxq7vb.php\
    \ on line 32\n"
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_matches = explode(' ', $paren_string);\n    $max_nesting = array();\n\
    \    foreach ($paren_matches as $match) {\n        $nesting = 0;\n        $max_nesting_this_match\
    \ = 0;\n        for ($i = 0; $i < strlen($match); $i++) {\n            if ($match[$i]\
    \ == '(') {\n                $nesting++;\n                if ($nesting > $max_nesting_this_match)\
    \ {\n                    $max_nesting_this_match = $nesting;\n               \
    \ }\n            } else {\n                $nesting--;\n            }\n      \
    \  }\n        array_push($max_nesting, $max_nesting_this_match);\n    }\n    return\
    \ $max_nesting;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(\" \", $paren_string);\n  $num_parens = count($paren_array);\n\
    \  $max_level = array();\n  for ($i = 0; $i < $num_parens; $i++) {\n    $paren_idx\
    \ = strpos($paren_array[$i], \"(\");\n    $level = 0;\n    while ($paren_idx !==\
    \ FALSE) {\n      $level++;\n      $paren_idx = strpos($paren_array[$i], \"(\"\
    , $paren_idx + 1);\n    }\n    $max_level[] = $level;\n  }\n  return $max_level;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4kwr6_sl.php:28\n\
    Stack trace:\n#0 /tmp/tmp4kwr6_sl.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp4kwr6_sl.php\
    \ on line 28\n"
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = preg_replace('!\\s+!', ' ', $paren_string);\n  $paren_array\
    \ = explode(' ', $paren_string);\n  $nested_levels = array();\n  foreach ($paren_array\
    \ as $paren_group) {\n    $level = 0;\n    $max_level = 0;\n    for ($i = 0; $i\
    \ < strlen($paren_group); $i++) {\n      if ($paren_group[$i] == '(') {\n    \
    \    $level++;\n        if ($level > $max_level) {\n          $max_level = $level;\n\
    \        }\n      } else if ($paren_group[$i] == ')') {\n        $level--;\n \
    \     }\n    }\n    array_push($nested_levels, $max_level);\n  }\n  return $nested_levels;\n\
    }\n\nprint_r(parse_nested_parens(\"(()()) ((())) () ((())()())\"));\nprint_r(parse_nested_parens(\"\
    ((()))\"));\nprint_r(parse_nested_parens(\"()\"));\nprint_r(parse_nested_parens(\"\
    (()\"));\nprint_r(parse_nested_parens(\"(()())\"));\nprint_r(parse_nested_parens(\"\
    (((())))) ()\"));\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 2\n    [1] => 3\n    [2] => 1\n    [3] => 3\n)\nArray\n\
    (\n    [0] => 3\n)\nArray\n(\n    [0] => 1\n)\nArray\n(\n    [0] => 2\n)\nArray\n\
    (\n    [0] => 2\n)\nArray\n(\n    [0] => 4\n    [1] => 1\n)\n"
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  // Add code here\n\t$arr = explode(\" \", $paren_string);\n\t$res = array();\n\
    \tfor($i = 0; $i < count($arr); $i++) {\n\t\t$res[] = parse_nested_parens_helper($arr[$i]);\n\
    \t}\n\treturn $res;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function parse_nested_parens_helper()\
    \ in /tmp/tmp3pupnlhg.php:12\nStack trace:\n#0 /tmp/tmp3pupnlhg.php(18): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmp3pupnlhg.php(22): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmp3pupnlhg.php(27): test()\n#3 {main}\n  thrown in /tmp/tmp3pupnlhg.php\
    \ on line 12\n"
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    // Remove spaces\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    // Remove the unneeded characters\n    $paren_string = str_replace(array('(',\
    \ ')'), '', $paren_string);\n    // Parse each element of the string\n    $res\
    \ = array();\n    foreach (str_split($paren_string) as $ch) {\n        if (count($res)\
    \ == 0) {\n            $res[] = 1;\n        } else {\n            $last_elem =\
    \ $res[count($res) - 1];\n            if ($ch == '(') {\n                $res[]\
    \ = $last_elem + 1;\n            } else {\n                $res[] = $last_elem\
    \ - 1;\n            }\n        }\n    }\n    return $res;\n}\n\n$paren_string\
    \ = \"(()()) ((())) () ((())()())\";\n$result = parse_nested_parens($paren_string);\n\
    print_r($result);\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpgwlhx2mw.php:38\nStack trace:\n#0 /tmp/tmpgwlhx2mw.php(43): test()\n\
    #1 {main}\n  thrown in /tmp/tmpgwlhx2mw.php on line 38\n"
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $groups = explode(' ', $paren_string);\n  $nesting_levels = array();\n\
    \  foreach ($groups as $group) {\n    if ($group[0] !== '(') {\n      throw new\
    \ InvalidArgumentException('Invalid input string.');\n    }\n    $level = 0;\n\
    \    $max_level = 0;\n    for ($i = 0; $i < strlen($group); $i++) {\n      if\
    \ ($group[$i] === '(') {\n        $level++;\n      } else if ($group[$i] === ')')\
    \ {\n        $level--;\n      } else {\n        throw new InvalidArgumentException('Invalid\
    \ input string.');\n      }\n      if ($level > $max_level) {\n        $max_level\
    \ = $level;\n      }\n    }\n    $nesting_levels[] = $max_level;\n  }\n  return\
    \ $nesting_levels;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $nested_parens = [];\n  $levels = [];\n  $curr_level = 0;\n  $groups =\
    \ explode(' ', $paren_string);\n  foreach ($groups as $group) {\n    $levels[]\
    \ = 0;\n    for ($i = 0; $i < strlen($group); $i++) {\n      if ($group[$i] ==\
    \ '(') {\n        $levels[$curr_level]++;\n      } else {\n        $levels[$curr_level]--;\n\
    \      }\n    }\n    $curr_level++;\n  }\n  return $levels;\n}\n\n$paren_string\
    \ = \"(()()) ((())) () ((())()())\";\nprint_r(parse_nested_parens($paren_string));\n\
    \nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 0\n    [1] => 0\n    [2] => 0\n    [3] => 0\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpaovp21uy.php:34\nStack\
    \ trace:\n#0 /tmp/tmpaovp21uy.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpaovp21uy.php\
    \ on line 34\n"
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $result = array();\n    $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \    $paren_string = str_replace(')', ' ) ', $paren_string);\n    $tokens = explode('\
    \ ', $paren_string);\n    $paren_level = 0;\n    $max_paren_level = 0;\n    foreach\
    \ ($tokens as $token) {\n        if ($token == '(') {\n            $paren_level++;\n\
    \            if ($paren_level > $max_paren_level) {\n                $max_paren_level\
    \ = $paren_level;\n            }\n        } else if ($token == ')') {\n      \
    \      $paren_level--;\n        } else {\n            $result[] = $max_paren_level;\n\
    \            $max_paren_level = 0;\n        }\n    }\n    return $result;\n}\n\
    \nvar_dump(parse_nested_parens(\"(()()) ((())) () ((())()())\"));\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "array(28) {\n  [0]=>\n  int(0)\n  [1]=>\n  int(1)\n  [2]=>\n  int(2)\n\
    \  [3]=>\n  int(0)\n  [4]=>\n  int(2)\n  [5]=>\n  int(0)\n  [6]=>\n  int(0)\n\
    \  [7]=>\n  int(0)\n  [8]=>\n  int(1)\n  [9]=>\n  int(2)\n  [10]=>\n  int(3)\n\
    \  [11]=>\n  int(0)\n  [12]=>\n  int(0)\n  [13]=>\n  int(0)\n  [14]=>\n  int(0)\n\
    \  [15]=>\n  int(1)\n  [16]=>\n  int(0)\n  [17]=>\n  int(0)\n  [18]=>\n  int(1)\n\
    \  [19]=>\n  int(2)\n  [20]=>\n  int(3)\n  [21]=>\n  int(0)\n  [22]=>\n  int(0)\n\
    \  [23]=>\n  int(2)\n  [24]=>\n  int(0)\n  [25]=>\n  int(2)\n  [26]=>\n  int(0)\n\
    \  [27]=>\n  int(0)\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4yu7uzek.php:36\n\
    Stack trace:\n#0 /tmp/tmp4yu7uzek.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp4yu7uzek.php\
    \ on line 36\n"
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $max_levels = [];\n    $levels = [];\n    $max_level = 0;\n    $count\
    \ = 0;\n    $paren_array = str_split($paren_string);\n    $paren_count = count($paren_array);\n\
    \    for ($i = 0; $i < $paren_count; $i++) {\n        $paren = $paren_array[$i];\n\
    \        if ($paren == '(') {\n            $levels[] = 1;\n            $count\
    \ += 1;\n        } elseif ($paren == ')') {\n            $level = $levels[$count-1];\n\
    \            $level += 1;\n            array_pop($levels);\n            $levels[]\
    \ = $level;\n            $count -= 1;\n        } elseif ($paren == ' ') {\n  \
    \          $max_levels[] = max($levels);\n            $levels = [];\n        \
    \    $count = 0;\n        }\n    }\n    $max_levels[] = max($levels);\n    return\
    \ $max_levels;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_h_zouw6.php:40\n\
    Stack trace:\n#0 /tmp/tmp_h_zouw6.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp_h_zouw6.php\
    \ on line 40\n"
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    // TODO your code here\n    $groups = explode(\" \", $paren_string);\n\
    \    $max_nested_level = array();\n    for ($i = 0; $i < count($groups); $i++)\
    \ {\n      $max_nested_level[$i] = 0;\n      $curr_level = 0;\n      for ($j =\
    \ 0; $j < strlen($groups[$i]); $j++) {\n        if ($groups[$i][$j] == \"(\")\
    \ {\n          $curr_level++;\n        } else if ($groups[$i][$j] == \")\") {\n\
    \          $curr_level--;\n        }\n        if ($curr_level > $max_nested_level[$i])\
    \ {\n          $max_nested_level[$i] = $curr_level;\n        }\n      }\n    }\n\
    \    return $max_nested_level;\n}\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    // Write your code here\n}\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyuff7i9p.php:15\n\
    Stack trace:\n#0 /tmp/tmpyuff7i9p.php(20): test()\n#1 {main}\n  thrown in /tmp/tmpyuff7i9p.php\
    \ on line 15\n"
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $group_arr = explode(\" \", $paren_string);\n    $max_level_arr = array();\n\
    \    foreach ($group_arr as $group) {\n        $level = 0;\n        $max_level\
    \ = 0;\n        $paren_arr = str_split($group);\n        foreach ($paren_arr as\
    \ $paren) {\n            if ($paren == \"(\") {\n                $level++;\n \
    \           } else if ($paren == \")\") {\n                $level--;\n       \
    \     }\n            if ($level > $max_level) {\n                $max_level =\
    \ $level;\n            }\n        }\n        array_push($max_level_arr, $max_level);\n\
    \    }\n    return $max_level_arr;\n}\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(\" \", $paren_string);\n  $count_array = array();\n\
    \  foreach ($paren_array as $paren_group) {\n    $count = 0;\n    $depth = 0;\n\
    \    $i = 0;\n    while ($i < strlen($paren_group)) {\n      if ($paren_group[$i]\
    \ == \"(\") {\n        $count++;\n        if ($count > $depth) {\n          $depth\
    \ = $count;\n        }\n      } else if ($paren_group[$i] == \")\") {\n      \
    \  $count--;\n      }\n      $i++;\n    }\n    $count_array[] = $depth;\n  }\n\
    \  return $count_array;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $nested_parens = array();\n\
    \    foreach ($paren_array as $paren) {\n        $last_index = -1;\n        $paren_length\
    \ = strlen($paren);\n        for ($i = 0; $i < $paren_length; $i++) {\n      \
    \      if ($paren[$i] == \"(\") {\n                $last_index = $i;\n       \
    \     }\n        }\n        $nested_parens[] = $last_index + 1;\n    }\n    return\
    \ $nested_parens;\n}\n$paren_string = \"(()()) ((())) () ((())()())\";\n$nested_parens\
    \ = parse_nested_parens($paren_string);\nprint_r($nested_parens);\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 4\n    [1] => 3\n    [2] => 1\n    [3] => 8\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp11_ndjcm.php:30\nStack\
    \ trace:\n#0 /tmp/tmp11_ndjcm.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp11_ndjcm.php\
    \ on line 30\n"
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_arr = preg_split('/\\s+/', $paren_string);\n  $result = array();\n\
    \  foreach ($paren_arr as $paren) {\n    $max_nesting = 0;\n    $temp_nesting\
    \ = 0;\n    for ($i = 0; $i < strlen($paren); $i++) {\n      if ($paren[$i] ==\
    \ '(') {\n        $temp_nesting++;\n      } else if ($paren[$i] == ')') {\n  \
    \      $temp_nesting--;\n      }\n      if ($temp_nesting > $max_nesting) {\n\
    \        $max_nesting = $temp_nesting;\n      }\n    }\n    $result[] = $max_nesting;\n\
    \  }\n  return $result;\n}\necho implode(', ', parse_nested_parens(\"(()()) ((()))\
    \ () ((())()())\"));\necho PHP_EOL;\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '2, 3, 1, 3

    '
  timestamp: 1659979722
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_arr = explode(' ', $paren_string);\n  $results = array();\n  foreach\
    \ ($paren_arr as $paren) {\n    $paren_count = 0;\n    $max_paren_count = 0;\n\
    \    for ($i = 0; $i < strlen($paren); $i++) {\n      if ($paren[$i] == '(') {\n\
    \        $paren_count++;\n      } else if ($paren[$i] == ')') {\n        $paren_count--;\n\
    \      }\n      if ($paren_count > $max_paren_count) {\n        $max_paren_count\
    \ = $paren_count;\n      }\n    }\n    $results[] = $max_paren_count;\n  }\n \
    \ return $results;\n}\n\n$paren_string = \"(()()) ((())) () ((())()())\";\nprint_r(parse_nested_parens($paren_string));\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 2\n    [1] => 3\n    [2] => 1\n    [3] => 3\n)\n"
  timestamp: 1659979722
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $result = array();\n\
    \    foreach ($paren_array as $key => $paren) {\n        $result[] = count_max_nesting($paren);\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_max_nesting()\
    \ in /tmp/tmp4p8p1mii.php:11\nStack trace:\n#0 /tmp/tmp4p8p1mii.php(17): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmp4p8p1mii.php(21): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmp4p8p1mii.php(26): test()\n#3 {main}\n  thrown in /tmp/tmp4p8p1mii.php\
    \ on line 11\n"
  timestamp: 1659979722
