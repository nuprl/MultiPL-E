language: php
name: HumanEval_63_fibfib
results:
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    if ($n == 0) {\n        return 0;\n    } else\
    \ if ($n == 1) {\n        return 0;\n    } else if ($n == 2) {\n        return\
    \ 1;\n    } else {\n        return fibfib($n - 1) + fibfib($n - 2) + fibfib($n\
    \ - 3);\n    }\n}\n\necho fibfib(5) . \"\\n\";\necho fibfib(8) . \"\\n\";\necho\
    \ fibfib(1) . \"\\n\";\necho fibfib(3) . \"\\n\";\necho fibfib(0) . \"\\n\";\n\
    \nfunction candidate(...$args) {\n    return fibfib(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== 81) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !==\
    \ 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14) !== 927)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '4

    24

    0

    1

    0

    '
  timestamp: 1659824266
- exit_code: 255
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n  $result = array(0, 0, 1);\n  for ($i = 3; $i <=\
    \ $n; $i++) {\n    $result[$i % 3] = $result[($i - 1) % 3] + $result[($i - 2)\
    \ % 3] + $result[($i - 3) % 3];\n  }\n  return $result[$n % 3];\n}\n\nprint_r(fibfib(0));\n\
    print_r(fibfib(1));\nprint_r(fibfib(2));\nprint_r(fibfib(3));\nprint_r(fibfib(4));\n\
    print_r(fibfib(5));\nprint_r(fibfib(6));\nprint_r(fibfib(7));\nprint_r(fibfib(8));\n\
    print_r(fibfib(9));\nprint_r(fibfib(10));\nprint_r(fibfib(11));\nprint_r(fibfib(12));\n\
    print_r(fibfib(13));\nprint_r(fibfib(14));\nprint_r(fibfib(15));\nprint_r(fibfib(16));\n\
    print_r(fibfib(17));\nprint_r(fibfib(18));\nprint_r(fibfib(19));\nprint_r(fibfib(20));\n\
    print_r(fibfib(21));\nprint_r(fibfib(22));\nprint_r(fibfib(23));\nprint_r(fibfib(24));\n\
    print_r(fibfib(25));\nprint_r(fibfib(26));\nprint_r(fibfib(27));\nprint_r(fibfib(28));\n\
    print_r(fibfib(29));\nprint_r(fibfib(30));\nprint_r(fibfib(31));\nprint_r(fibfib(32));\n\
    print_r(fibfib(33));\nprint_r(fibfib(\nfunction candidate(...$args) {\n    return\
    \ fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== 81) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpi7bzhdyk.php on line 57

    '
  timestamp: 1659824266
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    if ($n == 0) {\n        return 0;\n    }\n \
    \   if ($n == 1) {\n        return 0;\n    }\n    if ($n == 2) {\n        return\
    \ 1;\n    }\n    return fibfib($n - 1) + fibfib($n - 2) + fibfib($n - 3);\n}\n\
    \nfunction candidate(...$args) {\n    return fibfib(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== 81) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !==\
    \ 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14) !== 927)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824266
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n\tif($n === 0) {\n\t\treturn 0;\n\t}\n\tif($n ===\
    \ 1) {\n\t\treturn 0;\n\t}\n\tif($n === 2) {\n\t\treturn 1;\n\t}\n\t$a = 0;\n\t\
    $b = 0;\n\t$c = 1;\n\tfor($i = 2; $i < $n; $i++) {\n\t\t$d = $a + $b + $c;\n\t\
    \t$a = $b;\n\t\t$b = $c;\n\t\t$c = $d;\n\t}\n\treturn $d;\n}\n\necho fibfib(0);\n\
    echo \"\\n\";\necho fibfib(1);\necho \"\\n\";\necho fibfib(2);\necho \"\\n\";\n\
    echo fibfib(5);\necho \"\\n\";\necho fibfib(8);\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 81) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '0

    0

    1

    4

    24

    '
  timestamp: 1659824266
- exit_code: 255
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    $values = [0, 0, 1];\n    if ($n > 2) {\n  \
    \      for ($i = 3; $i <= $n; $i++) {\n            $values[$i] = $values[$i -\
    \ 1] + $values[$i - 2] + $values[$i - 3];\n        }\n    }\n    return $values[$n];\n\
    }\n\necho fibfib(0);\necho fibfib(1);\necho fibfib(2);\necho fibfib(3);\necho\
    \ fibfib(4);\necho fibfib(5);\necho fibfib(6);\necho fibfib(7);\necho fibfib(8);\n\
    echo fibfib(9);\necho fibfib(10);\necho fibfib(11);\necho fibfib(12);\necho fibfib(13);\n\
    echo fibfib(14);\necho fibfib(15);\necho fibfib(16);\necho fibfib(17);\necho fibfib(18);\n\
    echo fibfib(19);\necho fibfib(20);\necho fibfib(21);\necho fibfib(22);\necho fibfib(23);\n\
    echo fibfib(24);\necho fibfib(25);\necho fibfib(26);\necho fibfib(27);\necho fibfib(28);\n\
    echo fibfib(29);\necho fibfib(30);\necho fibfib(31);\necho fibfib(32);\necho fibfib(33);\n\
    echo fibfib(34);\necho fibfib(35);\necho fibfib(36);\necho fibfib(37);\necho fibfib(38);\n\
    echo fibfib(39);\necho fibfib(40);\necho fibfib(41);\necho fibfib(42);\necho fibfib(43);\n\
    echo fibfib(44);\necho fibfib(45);\necho fibfib(46);\necho fibfib(47);\necho fibfib(48);\n\
    echo fibfib(49);\necho fibfib(50);\necho fibfib(51);\necho fibf\nfunction candidate(...$args)\
    \ {\n    return fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 81) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "," or ";" in
    /tmp/tmpjzns_9n2.php on line 77

    '
  timestamp: 1659824266
- exit_code: 255
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    $fib1 = 0;\n    $fib2 = 0;\n    $fib3 = 1;\n\
    \    $fib = 1;\n    for ($i = 2; $i <= $n; $i++) {\n        $fib = $fib1 + $fib2\
    \ + $fib3;\n        $fib1 = $fib2;\n        $fib2 = $fib3;\n        $fib3 = $fib;\n\
    \    }\n    return $fib;\n}\nfunction candidate(...$args) {\n    return fibfib(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 81) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14)\
    \ !== 927) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3fjidvid.php:33\n\
    Stack trace:\n#0 /tmp/tmp3fjidvid.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp3fjidvid.php\
    \ on line 33\n"
  timestamp: 1659824266
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n  if ($n < 0) return 0;\n  if ($n == 0) return 0;\n\
    \  if ($n == 1) return 0;\n  if ($n == 2) return 1;\n  return fibfib($n-1) + fibfib($n-2)\
    \ + fibfib($n-3);\n}\n\necho fibfib(1);\necho \"\\n\";\necho fibfib(5);\necho\
    \ \"\\n\";\necho fibfib(8);\necho \"\\n\";\n\nfunction candidate(...$args) {\n\
    \    return fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 81) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '0

    4

    24

    '
  timestamp: 1659824266
- exit_code: 255
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    $num1 = 0;\n    $num2 = 0;\n    $num3 = 1;\n\
    \    $count = 2;\n    if ($n < 2) {\n        return $num1;\n    }\n    while ($count\
    \ < $n) {\n        $currentNum = $num1 + $num2 + $num3;\n        $num1 = $num2;\n\
    \        $num2 = $num3;\n        $num3 = $currentNum;\n        $count++;\n   \
    \ }\n    return $currentNum;\n}\n\nfunction candidate(...$args) {\n    return\
    \ fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== 81) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $currentNum in /tmp/tmpbbz2m13p.php on line\
    \ 29\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbbz2m13p.php:37\n\
    Stack trace:\n#0 /tmp/tmpbbz2m13p.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpbbz2m13p.php\
    \ on line 37\n"
  timestamp: 1659824266
- exit_code: 255
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n\n}\nfunction candidate(...$args) {\n    return\
    \ fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== 81) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3v4yyh02.php:22\n\
    Stack trace:\n#0 /tmp/tmp3v4yyh02.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp3v4yyh02.php\
    \ on line 22\n"
  timestamp: 1659824266
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n  $fibfibs = array(0, 0, 1);\n  for ($i = 3; $i\
    \ <= $n; $i++) {\n    $fibfibs[$i] = $fibfibs[$i - 1] + $fibfibs[$i - 2] + $fibfibs[$i\
    \ - 3];\n  }\n  return $fibfibs[$n];\n}\nfunction candidate(...$args) {\n    return\
    \ fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== 81) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824266
- exit_code: 255
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n  // your code here\n}\nfunction candidate(...$args)\
    \ {\n    return fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 81) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwnqzf38x.php:22\n\
    Stack trace:\n#0 /tmp/tmpwnqzf38x.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpwnqzf38x.php\
    \ on line 22\n"
  timestamp: 1659824266
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n\tif ($n == 0) {\n\t\treturn 0;\n\t} else if ($n\
    \ == 1) {\n\t\treturn 0;\n\t} else if ($n == 2) {\n\t\treturn 1;\n\t} else {\n\
    \t\treturn fibfib($n-1) + fibfib($n-2) + fibfib($n-3);\n\t}\n}\necho fibfib(1)\
    \ . PHP_EOL;\necho fibfib(5) . PHP_EOL;\necho fibfib(8) . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 81) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '0

    4

    24

    '
  timestamp: 1659824266
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n  if ($n == 0) {\n    return 0;\n  }\n  else if\
    \ ($n == 1) {\n    return 0;\n  }\n  else if ($n == 2) {\n    return 1;\n  }\n\
    \  else {\n    return fibfib($n-1) + fibfib($n-2) + fibfib($n-3);\n  }\n}\necho\
    \ fibfib(1);\necho \"\\n\";\necho fibfib(5);\necho \"\\n\";\necho fibfib(8);\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return fibfib(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 81) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14)\
    \ !== 927) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '0

    4

    24

    '
  timestamp: 1659824266
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    if($n === 0) {\n        return 0;\n    } else\
    \ if($n === 1) {\n        return 0;\n    } else if($n === 2) {\n        return\
    \ 1;\n    } else {\n        return fibfib($n-1) + fibfib($n-2) + fibfib($n-3);\n\
    \    }\n}\nfunction candidate(...$args) {\n    return fibfib(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 81) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14)\
    \ !== 927) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824266
- exit_code: 255
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n  if ($n <= 1) return 0;\n  if ($n == 2) return\
    \ 1;\n  $a = 0;\n  $b = 0;\n  $c = 1;\n  $d = 1;\n  for ($i = 4; $i <= $n; $i++)\
    \ {\n    $d = $c + $b + $a;\n    $a = $b;\n    $b = $c;\n    $c = $d;\n  }\n \
    \ return $d;\n}\n\nfunction candidate(...$args) {\n    return fibfib(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 81) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14)\
    \ !== 927) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_q07krds.php:37\n\
    Stack trace:\n#0 /tmp/tmp_q07krds.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp_q07krds.php\
    \ on line 37\n"
  timestamp: 1659824266
- exit_code: 255
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n  $arr = [0, 0, 1];\n  if ($n < 3) {\n    return\
    \ $arr[$n];\n  }\n  $arr[2] = 1;\n  for ($i = 3; $i <= $n; $i++) {\n    $arr[0]\
    \ = $arr[1];\n    $arr[1] = $arr[2];\n    $arr[2] = $arr[0] + $arr[1] + $arr[2];\n\
    \  }\n  return $arr[2];\n}\n\necho fibfib(2) . PHP_EOL;\necho fibfib(5) . PHP_EOL;\n\
    echo fibfib(8) . PHP_EOL;\nfunction candidate(...$args) {\n    return fibfib(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 81) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14)\
    \ !== 927) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n12\n169\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplv68t6wi.php:38\n\
    Stack trace:\n#0 /tmp/tmplv68t6wi.php(45): test()\n#1 {main}\n  thrown in /tmp/tmplv68t6wi.php\
    \ on line 38\n"
  timestamp: 1659824266
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n\tif($n == 0) {\n\t\treturn 0;\n\t}\n\tif($n ==\
    \ 1) {\n\t\treturn 0;\n\t}\n\tif($n == 2) {\n\t\treturn 1;\n\t}\n\t$nums = [0,\
    \ 0, 1];\n\t$i = 3;\n\twhile($i <= $n) {\n\t\t$temp = $nums[2] + $nums[1] + $nums[0];\n\
    \t\t$nums[0] = $nums[1];\n\t\t$nums[1] = $nums[2];\n\t\t$nums[2] = $temp;\n\t\t\
    $i++;\n\t}\n\treturn $nums[2];\n}\necho fibfib(1) . PHP_EOL;\necho fibfib(5) .\
    \ PHP_EOL;\necho fibfib(8) . PHP_EOL;\n\nfunction candidate(...$args) {\n    return\
    \ fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== 81) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '0

    4

    24

    '
  timestamp: 1659824266
- exit_code: 255
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    $fibfib = 0;\n    if ($n <= 2) {\n        $fibfib\
    \ = 1;\n    } else {\n        $n2 = 1;\n        $n1 = 1;\n        for ($i = 3;\
    \ $i <= $n; $i++) {\n            $fibfib = $n1 + $n2 + $fibfib;\n            $n2\
    \ = $n1;\n            $n1 = $fibfib;\n        }\n    }\n    return $fibfib;\n\
    }\necho fibfib(6);\nfunction candidate(...$args) {\n    return fibfib(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 81) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14)\
    \ !== 927) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "29\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpru5w247s.php:36\n\
    Stack trace:\n#0 /tmp/tmpru5w247s.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpru5w247s.php\
    \ on line 36\n"
  timestamp: 1659824266
- exit_code: 255
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n  $result = 0;\n  for ($i = 0; $i < $n; $i++) {\n\
    \    $result = $result + fibfib($i);\n  }\n  return $result;\n}\n\necho fibfib(8);\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return fibfib(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 81) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14)\
    \ !== 927) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "0\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnxfrdyew.php:29\n\
    Stack trace:\n#0 /tmp/tmpnxfrdyew.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpnxfrdyew.php\
    \ on line 29\n"
  timestamp: 1659824266
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n\tif($n == 0) {\n\t\treturn 0;\n\t}\n\telse if($n\
    \ == 1) {\n\t\treturn 0;\n\t}\n\telse if($n == 2) {\n\t\treturn 1;\n\t}\n\telse\
    \ {\n\t\treturn fibfib($n-1) + fibfib($n-2) + fibfib($n-3);\n\t}\n}\n$n = 8;\n\
    echo \"The \".$n.\"-th element of the fibfib number sequence is: \".fibfib($n);\n\
    function candidate(...$args) {\n    return fibfib(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== 81) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !==\
    \ 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14) !== 927)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'The 8-th element of the fibfib number sequence is: 24'
  timestamp: 1659824266
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    if ($n == 0) return 0;\n    if ($n == 1) return\
    \ 0;\n    if ($n == 2) return 1;\n    return fibfib($n-1) + fibfib($n-2) + fibfib($n-3);\n\
    }\necho fibfib(1) . \"\\n\";\necho fibfib(5) . \"\\n\";\necho fibfib(8) . \"\\\
    n\";\nfunction candidate(...$args) {\n    return fibfib(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== 81) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !==\
    \ 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14) !== 927)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '0

    4

    24

    '
  timestamp: 1660008977
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    if ($n == 0) {\n        return 0;\n    } else\
    \ if ($n == 1) {\n        return 0;\n    } else if ($n == 2) {\n        return\
    \ 1;\n    }\n    return fibfib($n - 1) + fibfib($n - 2) + fibfib($n - 3);\n}\n\
    echo fibfib(1);\necho \"<br>\";\necho fibfib(5);\necho \"<br>\";\necho fibfib(8);\n\
    echo \"<br>\";\n\nfunction candidate(...$args) {\n    return fibfib(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 81) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14)\
    \ !== 927) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 0<br>4<br>24<br>
  timestamp: 1660008977
- exit_code: 255
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    $n1 = 0;\n    $n2 = 0;\n    $n3 = 1;\n    $count\
    \ = 2;\n    while ($count <= $n) {\n        $temp = $n1 + $n2 + $n3;\n       \
    \ $n1 = $n2;\n        $n2 = $n3;\n        $n3 = $temp;\n        $count++;\n  \
    \  }\n    return $n3;\n}\n$n = $argv[1];\necho fibfib($n) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return fibfib(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(2) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== 24) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !==\
    \ 81) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(14) !== 927) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 1 in /tmp/tmpgnr8svd4.php on line 28\n1\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgnr8svd4.php:36\nStack\
    \ trace:\n#0 /tmp/tmpgnr8svd4.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpgnr8svd4.php\
    \ on line 36\n"
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n  if($n === 0) {\n    return 0;\n  } else if($n\
    \ === 1) {\n    return 0;\n  } else if($n === 2) {\n    return 1;\n  } else {\n\
    \    return fibfib($n-1) + fibfib($n-2) + fibfib($n-3);\n  }\n}\n\necho fibfib(1);\n\
    echo fibfib(5);\necho fibfib(8);\nfunction candidate(...$args) {\n    return fibfib(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 81) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14)\
    \ !== 927) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '0424'
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n  $sequence = [0, 0, 1];\n  if ($n <= 2) {\n   \
    \ return $sequence[$n];\n  }\n  for ($i = 3; $i <= $n; $i++) {\n    $sequence[$i]\
    \ = $sequence[$i - 1] + $sequence[$i - 2] + $sequence[$i - 3];\n  }\n  return\
    \ $sequence[$n];\n}\n\nfunction candidate(...$args) {\n    return fibfib(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 81) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14)\
    \ !== 927) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    if ($n === 0) {\n        return 0;\n    }\n\
    \    if ($n === 1) {\n        return 0;\n    }\n    if ($n === 2) {\n        return\
    \ 1;\n    }\n    $fib = [0, 0, 1];\n    for ($i = 3; $i <= $n; $i++) {\n     \
    \   $fib[$i] = $fib[$i - 1] + $fib[$i - 2] + $fib[$i - 3];\n    }\n    return\
    \ $fib[$n];\n}\n\necho fibfib(1) . PHP_EOL;\necho fibfib(5) . PHP_EOL;\necho fibfib(8)\
    \ . PHP_EOL;\nfunction candidate(...$args) {\n    return fibfib(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 81) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14)\
    \ !== 927) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '0

    4

    24

    '
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    if ($n == 0) {\n        return 0;\n    } else\
    \ if ($n == 1) {\n        return 0;\n    } else if ($n == 2) {\n        return\
    \ 1;\n    } else {\n        return fibfib($n - 1) + fibfib($n - 2) + fibfib($n\
    \ - 3);\n    }\n}\necho fibfib(5);\necho \"\\n\";\n\nfunction candidate(...$args)\
    \ {\n    return fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 81) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '4

    '
  timestamp: 1660028760
- exit_code: 255
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n\t$a = 0;\n\t$b = 0;\n\t$c = 1;\n\tif ($n == 0)\
    \ {\n\t\treturn $a;\n\t}\n\telseif ($n == 1) {\n\t\treturn $b;\n\t}\n\telseif\
    \ ($n == 2) {\n\t\treturn $c;\n\t}\n\tfor ($i = 3; $i <= $n; $i++) {\n\t\t$a =\
    \ $b;\n\t\t$b = $c;\n\t\t$c = $a + $b + $c;\n\t}\n\treturn $c;\n}\necho fibfib(8);\n\
    function candidate(...$args) {\n    return fibfib(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== 81) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !==\
    \ 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14) !== 927)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "169\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8cjyy6ty.php:42\n\
    Stack trace:\n#0 /tmp/tmp8cjyy6ty.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp8cjyy6ty.php\
    \ on line 42\n"
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n  if ($n == 0) {\n    return 0;\n  } else if ($n\
    \ == 1) {\n    return 0;\n  } else if ($n == 2) {\n    return 1;\n  }\n  return\
    \ fibfib($n-1) + fibfib($n-2) + fibfib($n-3);\n}\necho fibfib(1);\necho \"\\n\"\
    ;\necho fibfib(5);\necho \"\\n\";\necho fibfib(8);\necho \"\\n\";\n\nfunction\
    \ candidate(...$args) {\n    return fibfib(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(2) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== 24) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !==\
    \ 81) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(14) !== 927) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '0

    4

    24

    '
  timestamp: 1660028760
- exit_code: 255
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    // Your code here\n}\nfunction candidate(...$args)\
    \ {\n    return fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 81) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqnnte6wk.php:22\n\
    Stack trace:\n#0 /tmp/tmpqnnte6wk.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpqnnte6wk.php\
    \ on line 22\n"
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    if ($n == 0) return 0;\n    else if ($n == 1)\
    \ return 0;\n    else if ($n == 2) return 1;\n    else return fibfib($n-1) + fibfib($n-2)\
    \ + fibfib($n-3);\n}\n\necho fibfib(1) . \"\\n\";\necho fibfib(5) . \"\\n\";\n\
    echo fibfib(8) . \"\\n\";\nfunction candidate(...$args) {\n    return fibfib(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 81) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14)\
    \ !== 927) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '0

    4

    24

    '
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    if ($n < 2) {\n        return 0;\n    }\n  \
    \  if ($n == 2) {\n        return 1;\n    }\n    $first = 0;\n    $second = 0;\n\
    \    $third = 1;\n    $result = 1;\n    for ($i = 3; $i <= $n; $i++) {\n     \
    \   $result = $first + $second + $third;\n        $first = $second;\n        $second\
    \ = $third;\n        $third = $result;\n    }\n    return $result;\n}\n\necho\
    \ fibfib(1) . PHP_EOL;\necho fibfib(5) . PHP_EOL;\necho fibfib(8) . PHP_EOL;\n\
    function candidate(...$args) {\n    return fibfib(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== 81) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !==\
    \ 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14) !== 927)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '0

    4

    24

    '
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    $total = 0;\n    $res = [0, 0, 1];\n    if ($n\
    \ <= 2) {\n        return $res[$n];\n    }\n    for ($i = 3; $i <= $n; $i++) {\n\
    \        $res[$i] = $res[$i - 1] + $res[$i - 2] + $res[$i - 3];\n    }\n    return\
    \ $res[$n];\n}\necho fibfib(1);\necho fibfib(5);\necho fibfib(8);\nfunction candidate(...$args)\
    \ {\n    return fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 81) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '0424'
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n\tif($n == 0) return 0;\n\tif($n == 1) return 0;\n\
    \tif($n == 2) return 1;\n\tif($n == 3) return 1;\n\tif($n == 4) return 2;\n\t\
    return fibfib($n-1) + fibfib($n-2) + fibfib($n-3);\n}\necho fibfib(1).\"\\n\"\
    ;\necho fibfib(5).\"\\n\";\necho fibfib(8).\"\\n\";\nfunction candidate(...$args)\
    \ {\n    return fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 81) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '0

    4

    24

    '
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    if ($n < 0) return;\n    if ($n == 0) return\
    \ 0;\n    if ($n == 1) return 0;\n    if ($n == 2) return 1;\n    return fibfib($n-1)\
    \ + fibfib($n-2) + fibfib($n-3);\n}\n\necho fibfib(4) . \"\\n\";\necho fibfib(5)\
    \ . \"\\n\";\necho fibfib(6) . \"\\n\";\n\nfunction candidate(...$args) {\n  \
    \  return fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 81) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '2

    4

    7

    '
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    if ($n < 2) {\n        return 0;\n    }\n  \
    \  if ($n == 2) {\n        return 1;\n    }\n    $fibfib = [0, 0, 1];\n    for\
    \ ($i = 3; $i <= $n; $i++) {\n        $fibfib[$i] = $fibfib[$i - 1] + $fibfib[$i\
    \ - 2] + $fibfib[$i - 3];\n    }\n    return $fibfib[$n];\n}\n\nprint_r(fibfib(8));\n\
    \nfunction candidate(...$args) {\n    return fibfib(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== 81) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !==\
    \ 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14) !== 927)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '24'
  timestamp: 1660028760
- exit_code: 255
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    if ($n <= 1) {\n        return 0;\n    }\n \
    \   $f1 = 0;\n    $f2 = 0;\n    $f3 = 1;\n    $fib = 0;\n    for ($i = 2; $i <=\
    \ $n; $i++) {\n        $fib = $f1 + $f2 + $f3;\n        $f1 = $f2;\n        $f2\
    \ = $f3;\n        $f3 = $fib;\n    }\n    return $fib;\n}\n\necho fibfib(1) .\
    \ \"\\n\";\necho fibfib(5) . \"\\n\";\necho fibfib(8) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 81) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "0\n7\n44\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp65p1xn0d.php:41\n\
    Stack trace:\n#0 /tmp/tmp65p1xn0d.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp65p1xn0d.php\
    \ on line 41\n"
  timestamp: 1660028760
- exit_code: 255
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n\t$a = $b = $c = 0;\n\t$tmp = 1;\n\tfor ($i = 0;\
    \ $i < $n; $i++) {\n\t\t$a = $b;\n\t\t$b = $c;\n\t\t$c = $a + $b + $tmp;\n\t\t\
    $tmp = $a;\n\t}\n\treturn $a;\n}\nfunction candidate(...$args) {\n    return fibfib(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 81) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14)\
    \ !== 927) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9jhjommc.php:30\n\
    Stack trace:\n#0 /tmp/tmp9jhjommc.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp9jhjommc.php\
    \ on line 30\n"
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    if ($n == 0) return 0;\n    if ($n == 1) return\
    \ 0;\n    if ($n == 2) return 1;\n    return fibfib($n-1) + fibfib($n-2) + fibfib($n-3);\n\
    }\n\nfunction candidate(...$args) {\n    return fibfib(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== 81) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !==\
    \ 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14) !== 927)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    if ($n < 2) return 0;\n    if ($n == 2) return\
    \ 1;\n    return fibfib($n-1) + fibfib($n-2) + fibfib($n-3);\n}\nfunction candidate(...$args)\
    \ {\n    return fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 81) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028760
- exit_code: 255
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n\n}\n\nfunction candidate(...$args) {\n    return\
    \ fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== 81) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpidwjv6s9.php:23\n\
    Stack trace:\n#0 /tmp/tmpidwjv6s9.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpidwjv6s9.php\
    \ on line 23\n"
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n\t$a = 0;\n\t$b = 0;\n\t$c = 1;\n\tif ($n == 0)\
    \ {\n\t\treturn $a;\n\t}\n\tif ($n == 1) {\n\t\treturn $b;\n\t}\n\tif ($n == 2)\
    \ {\n\t\treturn $c;\n\t}\n\tfor ($i = 2; $i < $n; $i++) {\n\t\t$d = $a + $b +\
    \ $c;\n\t\t$a = $b;\n\t\t$b = $c;\n\t\t$c = $d;\n\t}\n\treturn $d;\n}\n\nfunction\
    \ candidate(...$args) {\n    return fibfib(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(2) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== 24) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !==\
    \ 81) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(14) !== 927) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n  $fibFib0 = 0;\n  $fibFib1 = 0;\n  $fibFib2 = 1;\n\
    \  $fibFibN = 0;\n  if ($n == 0) {\n    return $fibFib0;\n  } else if ($n == 1)\
    \ {\n    return $fibFib1;\n  } else if ($n == 2) {\n    return $fibFib2;\n  }\
    \ else {\n    for ($i = 2; $i < $n; $i++) {\n      $fibFibN = $fibFib2 + $fibFib1\
    \ + $fibFib0;\n      $fibFib0 = $fibFib1;\n      $fibFib1 = $fibFib2;\n      $fibFib2\
    \ = $fibFibN;\n    }\n    return $fibFibN;\n  }\n}\n\necho fibfib(1) . \"\\n\"\
    ;\necho fibfib(5) . \"\\n\";\necho fibfib(8) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 81) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '0

    4

    24

    '
  timestamp: 1660028760
- exit_code: 255
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n\n}\nfunction candidate(...$args) {\n    return\
    \ fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== 81) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3v4yyh02.php:22\n\
    Stack trace:\n#0 /tmp/tmp3v4yyh02.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp3v4yyh02.php\
    \ on line 22\n"
  timestamp: 1659824266
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    if ($n == 0) {\n        return 0;\n    }\n \
    \   if ($n == 1) {\n        return 0;\n    }\n    if ($n == 2) {\n        return\
    \ 1;\n    }\n    $fibs = [0, 0, 1];\n    for ($i = 3; $i <= $n; $i++) {\n    \
    \    $fibs[$i] = $fibs[$i - 1] + $fibs[$i - 2] + $fibs[$i - 3];\n    }\n    return\
    \ $fibs[$n];\n}\nfunction candidate(...$args) {\n    return fibfib(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 81) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14)\
    \ !== 927) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028760
- exit_code: 255
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    // YOUR CODE HERE\n    return $n;\n}\n\nfunction\
    \ candidate(...$args) {\n    return fibfib(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(2) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== 24) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !==\
    \ 81) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(14) !== 927) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg6h03j4i.php:24\n\
    Stack trace:\n#0 /tmp/tmpg6h03j4i.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpg6h03j4i.php\
    \ on line 24\n"
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    if ($n == 0) {\n        return 0;\n    }\n \
    \   if ($n == 1) {\n        return 0;\n    }\n    if ($n == 2) {\n        return\
    \ 1;\n    }\n    $a = 0;\n    $b = 0;\n    $c = 1;\n    for ($i = 3; $i <= $n;\
    \ $i++) {\n        $d = $a + $b + $c;\n        $a = $b;\n        $b = $c;\n  \
    \      $c = $d;\n    }\n    return $d;\n}\n\nfunction candidate(...$args) {\n\
    \    return fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 81) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028760
- exit_code: 255
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n\tif ($n < 0) {\n\t\treturn false;\n\t}\n\t$arr\
    \ = array(0, 0, 1);\n\t$i = 3;\n\twhile ($i < $n) {\n\t\t$arr[0] = $arr[1];\n\t\
    \t$arr[1] = $arr[2];\n\t\t$arr[2] = $arr[0] + $arr[1] + $arr[2];\n\t\t$i++;\n\t\
    }\n\treturn $arr[2];\n}\necho fibfib(1).\"\\n\";\necho fibfib(5).\"\\n\";\necho\
    \ fibfib(8).\"\\n\";\nfunction candidate(...$args) {\n    return fibfib(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 81) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14)\
    \ !== 927) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n5\n70\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5oj22src.php:37\n\
    Stack trace:\n#0 /tmp/tmp5oj22src.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp5oj22src.php\
    \ on line 37\n"
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n\tif ($n == 0) {\n\t\treturn 0;\n\t} else if ($n\
    \ == 1) {\n\t\treturn 0;\n\t} else if ($n == 2) {\n\t\treturn 1;\n\t} else {\n\
    \t\treturn fibfib($n-1) + fibfib($n-2) + fibfib($n-3);\n\t}\n}\nfunction candidate(...$args)\
    \ {\n    return fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 81) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    if ($n == 0) {\n        return 0;\n    }\n \
    \   if ($n == 1) {\n        return 0;\n    }\n    if ($n == 2) {\n        return\
    \ 1;\n    }\n    return fibfib($n - 1) + fibfib($n - 2) + fibfib($n - 3);\n}\n\
    \necho fibfib(8);\nfunction candidate(...$args) {\n    return fibfib(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 81) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14)\
    \ !== 927) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '24'
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n\t$fibs = [0, 0, 1];\n\tfor ($i = 3; $i <= $n; $i++)\
    \ {\n\t\t$fibs[$i] = $fibs[$i - 1] + $fibs[$i - 2] + $fibs[$i - 3];\n\t}\n\treturn\
    \ $fibs[$n];\n}\n\necho fibfib(1);\necho \"\\n\";\necho fibfib(5);\necho \"\\\
    n\";\necho fibfib(8);\necho \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== 81) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '0

    4

    24

    '
  timestamp: 1660028760
- exit_code: 255
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n  if($n === 0) {\n    return 0;\n  }\n  if($n <=\
    \ 2) {\n    return 1;\n  }\n  return fibfib($n - 1) + fibfib($n - 2) + fibfib($n\
    \ - 3);\n}\nfunction candidate(...$args) {\n    return fibfib(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 81) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14)\
    \ !== 927) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgpuhw9m6.php:29\n\
    Stack trace:\n#0 /tmp/tmpgpuhw9m6.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpgpuhw9m6.php\
    \ on line 29\n"
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    // your code here\n    $arr[0] = 0;\n    $arr[1]\
    \ = 0;\n    $arr[2] = 1;\n    if ($n<3) {\n        return $arr[$n];\n    }\n \
    \   for ($i=3; $i <= $n; $i++) { \n        $arr[$i] = $arr[$i-1] + $arr[$i-2]\
    \ + $arr[$i-3];\n    }\n    return $arr[$n];\n}\nprint_r(fibfib(8));\nfunction\
    \ candidate(...$args) {\n    return fibfib(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(2) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== 24) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !==\
    \ 81) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(14) !== 927) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '24'
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    if ($n == 0) {\n        return 0;\n    } else\
    \ if ($n == 1) {\n        return 0;\n    } else if ($n == 2) {\n        return\
    \ 1;\n    } else {\n        return fibfib($n - 1) + fibfib($n - 2) + fibfib($n\
    \ - 3);\n    }\n}\n\nfunction candidate(...$args) {\n    return fibfib(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 81) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14)\
    \ !== 927) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n\t$lookup = [0, 0, 1];\n\tfor ($i = 3; $i <= $n;\
    \ $i++) {\n\t\t$lookup[$i] = $lookup[$i - 1] + $lookup[$i - 2] + $lookup[$i -\
    \ 3];\n\t}\n\treturn $lookup[$n];\n}\necho fibfib(4);\nfunction candidate(...$args)\
    \ {\n    return fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 81) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '2'
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    $arr = array(0, 0, 1);\n    if ($n <= 2) {\n\
    \        return $arr[$n];\n    }\n    for ($i = 3; $i <= $n; $i++) {\n       \
    \ $arr[$i] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i - 3];\n    }\n    return $arr[$n];\n\
    }\necho fibfib(1).\"\\n\";\necho fibfib(5).\"\\n\";\necho fibfib(8).\"\\n\";\n\
    function candidate(...$args) {\n    return fibfib(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== 81) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !==\
    \ 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14) !== 927)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '0

    4

    24

    '
  timestamp: 1660028760
- exit_code: 255
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    // your code here\n}\nfunction candidate(...$args)\
    \ {\n    return fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 81) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5r3zg5nu.php:22\n\
    Stack trace:\n#0 /tmp/tmp5r3zg5nu.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp5r3zg5nu.php\
    \ on line 22\n"
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    //if($n <= 0) return 0;\n    //if($n == 1) return\
    \ 0;\n    //if($n == 2) return 1;\n    //return fibfib($n-1) + fibfib($n-2) +\
    \ fibfib($n-3);\n    $result = [0, 0, 1];\n    for($i = 3; $i <= $n; $i++) {\n\
    \        $result[$i%3] = $result[($i-1)%3] + $result[($i-2)%3] + $result[($i-3)%3];\n\
    \    }\n    return $result[$n%3];\n}\n$n = 9;\necho fibfib($n);\nfunction candidate(...$args)\
    \ {\n    return fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 81) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '44'
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n\t$prev1 = 0;\n\t$prev2 = 0;\n\t$curr = 1;\n\tif\
    \ ($n < 3) {\n\t\treturn $n-1;\n\t}\n\tfor ($i = 3; $i <= $n; $i++) {\n\t\t$next\
    \ = $prev1 + $prev2 + $curr;\n\t\t$prev1 = $prev2;\n\t\t$prev2 = $curr;\n\t\t\
    $curr = $next;\n\t}\n\treturn $curr;\n}\n\nfunction candidate(...$args) {\n  \
    \  return fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 81) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n\t$n = abs($n);\n\tif ($n == 0) {\n\t\treturn 0;\n\
    \t} else if ($n == 1) {\n\t\treturn 0;\n\t} else if ($n == 2) {\n\t\treturn 1;\n\
    \t} else {\n\t\treturn fibfib($n-1) + fibfib($n-2) + fibfib($n-3);\n\t}\n}\n\n\
    echo fibfib(6);\n\nfunction candidate(...$args) {\n    return fibfib(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 81) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14)\
    \ !== 927) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '7'
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n\t$memo = array(0, 0, 1);\n\tfor ($i = 3; $i <=\
    \ $n; $i++) {\n\t\t$memo[$i] = $memo[$i-1] + $memo[$i-2] + $memo[$i-3];\n\t}\n\
    \treturn $memo[$n];\n}\n\nfunction candidate(...$args) {\n    return fibfib(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 81) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14)\
    \ !== 927) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n  if ($n == 0) {\n    return 0;\n  }\n  if ($n ==\
    \ 1) {\n    return 0;\n  }\n  if ($n == 2) {\n    return 1;\n  }\n  return fibfib($n\
    \ - 1) + fibfib($n - 2) + fibfib($n - 3);\n}\necho fibfib(1) . PHP_EOL;\necho\
    \ fibfib(5) . PHP_EOL;\necho fibfib(8) . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 81) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '0

    4

    24

    '
  timestamp: 1660028760
- exit_code: 255
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n\tif ($n < 2) {\n\t\treturn 0;\n\t}\n\tif ($n ===\
    \ 2) {\n\t\treturn 1;\n\t}\n\t$a = 0;\n\t$b = 0;\n\t$c = 1;\n\tfor ($i = 3; $i\
    \ <= $n; $i++) {\n\t\t$a = $b;\n\t\t$b = $c;\n\t\t$c = $a + $b + $c;\n\t}\n\t\
    return $c;\n}\n\necho fibfib(8) . \"\\n\";\necho fibfib(20) . \"\\n\";\necho fibfib(1)\
    \ . \"\\n\";\necho fibfib(0) . \"\\n\";\necho fibfib(7) . \"\\n\";\necho fibfib(2)\
    \ . \"\\n\";\necho fibfib(4) . \"\\n\";\necho fibfib(5) . \"\\n\";\necho fibfib(3)\
    \ . \"\\n\";\necho fibfib(6) . \"\\n\";\necho fibfib(9) . \"\\n\";\necho fibfib(10)\
    \ . \"\\n\";\necho fibfib(11) . \"\\n\";\necho fibfib(12) . \"\\n\";\necho fibfib(13)\
    \ . \"\\n\";\necho fibfib(14) . \"\\n\";\necho fibfib(15) . \"\\n\";\necho fibfib(16)\
    \ . \"\\n\";\necho fibfib(17) . \"\\n\";\necho fibfib(18) . \"\\n\";\necho fibfib(19)\
    \ . \"\\n\";\necho fibfib(20) . \"\\n\";\necho fibfib(21) . \"\\n\";\necho fibfib(22)\
    \ . \"\\n\";\necho fibfib(23) . \"\\n\";\necho fibfib(24) . \"\\n\";\necho fibfib(25)\
    \ . \"\\n\";\necho fibfib(26) . \"\\n\";\necho fibfib(27) . \"\\n\";\necho fibfib(28)\
    \ . \"\\n\";\necho fibfib(29) . \"\\n\";\necho fibfib(30) . \"\\n\";\necho fibfib(31)\n\
    function candidate(...$args) {\n    return fibfib(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== 81) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !==\
    \ 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14) !== 927)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "," or ";" in
    /tmp/tmpvhw590xd.php on line 65

    '
  timestamp: 1660028760
- exit_code: 255
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    $last3 = array(0, 0, 1);\n    for ($i = 3; $i\
    \ <= $n; $i++) {\n        $last3 = array($last3[1], $last3[2], $last3[0] + $last3[1]\
    \ + $last3[2]);\n    }\n    return $last3[2];\n}\n\necho fibfib(1) . \"\\n\";\n\
    echo fibfib(5) . \"\\n\";\necho fibfib(8) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 81) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n4\n24\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgyb44i0a.php:31\n\
    Stack trace:\n#0 /tmp/tmpgyb44i0a.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpgyb44i0a.php\
    \ on line 31\n"
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n  if ($n == 0) {\n    return 0;\n  }\n  else if\
    \ ($n == 1) {\n    return 0;\n  }\n  else if ($n == 2) {\n    return 1;\n  }\n\
    \  else {\n    return fibfib($n-1) + fibfib($n-2) + fibfib($n-3);\n  }\n}\nfunction\
    \ candidate(...$args) {\n    return fibfib(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(2) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== 24) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !==\
    \ 81) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(14) !== 927) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028760
- exit_code: 255
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    $a = 0;\n    $b = 0;\n    $c = 1;\n    for ($i\
    \ = 2; $i <= $n; $i++) {\n        $d = $a + $b + $c;\n        $a = $b;\n     \
    \   $b = $c;\n        $c = $d;\n    }\n    return $c;\n}\n\nfunction candidate(...$args)\
    \ {\n    return fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 81) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdu7czpvb.php:33\n\
    Stack trace:\n#0 /tmp/tmpdu7czpvb.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpdu7czpvb.php\
    \ on line 33\n"
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    $result = [];\n    $result[0] = 0;\n    $result[1]\
    \ = 0;\n    $result[2] = 1;\n    for ($i = 3; $i <= $n; $i++) {\n        $result[$i]\
    \ = $result[$i - 1] + $result[$i - 2] + $result[$i - 3];\n    }\n    return $result[$n];\n\
    }\nfunction candidate(...$args) {\n    return fibfib(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== 81) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !==\
    \ 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14) !== 927)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    if($n == 0) {\n        return 0;\n    }\n  \
    \  if($n == 1) {\n        return 0;\n    }\n    if($n == 2) {\n        return\
    \ 1;\n    }\n    $last3 = [0, 0, 1];\n    for($i = 3; $i <= $n; $i++) {\n    \
    \    $current = $last3[0] + $last3[1] + $last3[2];\n        $last3[0] = $last3[1];\n\
    \        $last3[1] = $last3[2];\n        $last3[2] = $current;\n    }\n    return\
    \ $last3[2];\n}\n\necho fibfib(8);\nfunction candidate(...$args) {\n    return\
    \ fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== 81) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '24'
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    $a = 0;\n    $b = 0;\n    $c = 1;\n    for ($i\
    \ = 0; $i < $n; $i++) {\n        $d = $a + $b + $c;\n        $a = $b;\n      \
    \  $b = $c;\n        $c = $d;\n    }\n    return $a;\n}\n\nfunction candidate(...$args)\
    \ {\n    return fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 81) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028760
- exit_code: 255
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    $output = \"\";\n    // Your code here\n   \
    \ return $output;\n}\nfunction candidate(...$args) {\n    return fibfib(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 81) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14)\
    \ !== 927) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsq36o735.php:24\n\
    Stack trace:\n#0 /tmp/tmpsq36o735.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpsq36o735.php\
    \ on line 24\n"
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n\t$fibfibs = array();\n\t$fibfibs[0] = 0;\n\t$fibfibs[1]\
    \ = 0;\n\t$fibfibs[2] = 1;\n\tif ($n < 3) {\n\t\treturn $fibfibs[$n];\n\t}\n\t\
    for ($i = 3; $i <= $n; $i++) {\n\t\t$fibfibs[$i] = $fibfibs[$i-1] + $fibfibs[$i-2]\
    \ + $fibfibs[$i-3];\n\t}\n\treturn $fibfibs[$n];\n}\n\nfunction candidate(...$args)\
    \ {\n    return fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 81) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n\tif ($n <= 1) {\n\t\treturn 0;\n\t}\n\tif ($n ==\
    \ 2) {\n\t\treturn 1;\n\t}\n\treturn fibfib($n-1) + fibfib($n-2) + fibfib($n-3);\n\
    }\n\nfunction candidate(...$args) {\n    return fibfib(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== 81) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !==\
    \ 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14) !== 927)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n  $fibs = array();\n  for ($i = 0; $i <= $n; $i++)\
    \ {\n    if ($i == 0) {\n      $fibs[$i] = 0;\n    } else if ($i == 1) {\n   \
    \   $fibs[$i] = 0;\n    } else if ($i == 2) {\n      $fibs[$i] = 1;\n    } else\
    \ {\n      $fibs[$i] = $fibs[$i-1] + $fibs[$i-2] + $fibs[$i-3];\n    }\n  }\n\
    \  return $fibs[$n];\n}\nfunction candidate(...$args) {\n    return fibfib(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 81) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14)\
    \ !== 927) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    if ($n == 0) {\n        return 0;\n    }\n \
    \   if ($n == 1) {\n        return 0;\n    }\n    if ($n == 2) {\n        return\
    \ 1;\n    }\n    return fibfib($n - 1) + fibfib($n - 2) + fibfib($n - 3);\n}\n\
    \nfunction candidate(...$args) {\n    return fibfib(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== 81) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !==\
    \ 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14) !== 927)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824266
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n\tif ($n <= 1) return 0;\n\tif ($n == 2) return\
    \ 1;\n\t$fib = [0, 0, 1];\n\tfor ($i = 3; $i <= $n; $i++) {\n\t\t$fib[$i] = $fib[$i-1]\
    \ + $fib[$i-2] + $fib[$i-3];\n\t}\n\treturn $fib[$n];\n}\nfunction candidate(...$args)\
    \ {\n    return fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 81) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    if ($n == 0) {\n        return 0;\n    }\n \
    \   if ($n == 1) {\n        return 0;\n    }\n    if ($n == 2) {\n        return\
    \ 1;\n    }\n    return fibfib($n - 1) + fibfib($n - 2) + fibfib($n - 3);\n}\n\
    echo fibfib(10);\nfunction candidate(...$args) {\n    return fibfib(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 81) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14)\
    \ !== 927) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '81'
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n  $cache = [0, 0, 1];\n  for ($i = 2; $i < $n; $i++)\
    \ {\n    $cache[$i + 1] = $cache[$i] + $cache[$i - 1] + $cache[$i - 2];\n  }\n\
    \  return $cache[$n];\n}\n\nfunction candidate(...$args) {\n    return fibfib(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 81) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14)\
    \ !== 927) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n  if ($n == 0) {\n    return 0;\n  } else if ($n\
    \ == 1) {\n    return 0;\n  } else if ($n == 2) {\n    return 1;\n  }\n  return\
    \ fibfib($n-1) + fibfib($n-2) + fibfib($n-3);\n}\nfunction candidate(...$args)\
    \ {\n    return fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 81) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n  $nums = array(0, 0, 1);\n  for ($i = 3; $i <=\
    \ $n; $i++) {\n    $nums[$i % 3] = $nums[($i - 1) % 3] + $nums[($i - 2) % 3] +\
    \ $nums[($i - 3) % 3];\n  }\n  return $nums[$n % 3];\n}\n\nfunction candidate(...$args)\
    \ {\n    return fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 81) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028760
- exit_code: 255
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    if ($n == 0) return 0;\n    if ($n == 1) return\
    \ 0;\n    if ($n == 2) return 1;\n    $n3 = 1;\n    $n2 = 1;\n    $n1 = 2;\n \
    \   for ($i = 3; $i < $n; $i++) {\n        $n0 = $n1 + $n2 + $n3;\n        $n3\
    \ = $n2;\n        $n2 = $n1;\n        $n1 = $n0;\n    }\n    return $n1;\n}\n\n\
    function candidate(...$args) {\n    return fibfib(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== 81) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !==\
    \ 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14) !== 927)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv0iq7i25.php:37\n\
    Stack trace:\n#0 /tmp/tmpv0iq7i25.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpv0iq7i25.php\
    \ on line 37\n"
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n\tif($n <= 1) {\n\t\treturn 0;\n\t}\n\tif($n ==\
    \ 2) {\n\t\treturn 1;\n\t}\n\treturn fibfib($n-1) + fibfib($n-2) + fibfib($n-3);\n\
    }\necho fibfib(0);\necho fibfib(1);\necho fibfib(2);\necho fibfib(3);\necho fibfib(4);\n\
    echo fibfib(5);\necho fibfib(6);\necho fibfib(7);\necho fibfib(8);\necho fibfib(9);\n\
    echo fibfib(10);\necho fibfib(11);\necho fibfib(12);\nfunction candidate(...$args)\
    \ {\n    return fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 81) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 001124713244481149274
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n  $arr = [0, 0, 1];\n  for ($i = 3; $i <= $n; $i++)\
    \ {\n    $arr[$i] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i - 3];\n  }\n  return\
    \ $arr[$n];\n}\nprint_r(fibfib(1));\nprint_r(fibfib(5));\nprint_r(fibfib(8));\n\
    function candidate(...$args) {\n    return fibfib(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== 81) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !==\
    \ 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14) !== 927)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '0424'
  timestamp: 1660028760
- exit_code: 255
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    $back1 = 0;\n    $back2 = 0;\n    $back3 = 1;\n\
    \    $result = 0;\n    for ($i = 2; $i <= $n; $i++) {\n        $result = $back1\
    \ + $back2 + $back3;\n        $back1 = $back2;\n        $back2 = $back3;\n   \
    \     $back3 = $result;\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 81) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5bbxsg2t.php:34\n\
    Stack trace:\n#0 /tmp/tmp5bbxsg2t.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp5bbxsg2t.php\
    \ on line 34\n"
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n\t$fibs = [0, 0, 1];\n\tfor ($i = 3; $i <= $n; $i++)\
    \ {\n\t\t$fibs[$i] = $fibs[$i - 1] + $fibs[$i - 2] + $fibs[$i - 3];\n\t}\n\treturn\
    \ $fibs[$n];\n}\n\nfunction candidate(...$args) {\n    return fibfib(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 81) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14)\
    \ !== 927) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028760
- exit_code: 255
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n\t$last = 0;\n\t$lastlast = 0;\n\t$lastlastlast\
    \ = 0;\n\tfor ($i = 0; $i < $n; $i++) {\n\t\tif ($i == 0) {\n\t\t\t$curr = 0;\n\
    \t\t} else if ($i == 1) {\n\t\t\t$curr = 0;\n\t\t} else if ($i == 2) {\n\t\t\t\
    $curr = 1;\n\t\t} else {\n\t\t\t$curr = $last + $lastlast + $lastlastlast;\n\t\
    \t}\n\t\t$lastlastlast = $lastlast;\n\t\t$lastlast = $last;\n\t\t$last = $curr;\n\
    \t}\n\treturn $curr;\n}\n\necho \"The first five fibfib numbers are: \";\nfor\
    \ ($i = 0; $i < 5; $i++) {\n\techo fibfib($i) . \" \";\n}\necho \"\\n\";\n\necho\
    \ \"The eighth fibfib number is: \" . fibfib(8) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 81) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "The first five fibfib numbers are: \nWarning: Undefined variable $curr\
    \ in /tmp/tmpecqlm_54.php on line 32\n 0 0 1 1 \nThe eighth fibfib number is:\
    \ 13\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpecqlm_54.php:47\n\
    Stack trace:\n#0 /tmp/tmpecqlm_54.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpecqlm_54.php\
    \ on line 47\n"
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    if($n === 0) {\n        return 0;\n    } else\
    \ if($n === 1) {\n        return 0;\n    } else if($n === 2) {\n        return\
    \ 1;\n    } else {\n        return fibfib($n-1) + fibfib($n-2) + fibfib($n-3);\n\
    \    }\n}\n\necho fibfib(8) . PHP_EOL;\nfunction candidate(...$args) {\n    return\
    \ fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== 81) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '24

    '
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    $a = 0;\n    $b = 0;\n    $c = 1;\n    for ($i\
    \ = 0; $i < $n; $i++) {\n        $d = $a + $b + $c;\n        $a = $b;\n      \
    \  $b = $c;\n        $c = $d;\n    }\n    return $a;\n}\necho fibfib(5).\"\\n\"\
    ;\necho fibfib(8).\"\\n\";\nfunction candidate(...$args) {\n    return fibfib(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 81) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14)\
    \ !== 927) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '4

    24

    '
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    $fibfib = array(0, 0, 1);\n    for ($i = 3;\
    \ $i <= $n; $i++) {\n        $fibfib[$i] = $fibfib[$i - 1] + $fibfib[$i - 2] +\
    \ $fibfib[$i - 3];\n    }\n    return $fibfib[$n];\n}\n\nfunction candidate(...$args)\
    \ {\n    return fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 81) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    if($n == 0) return 0;\n    if($n == 1) return\
    \ 0;\n    if($n == 2) return 1;\n    return fibfib($n-1) + fibfib($n-2) + fibfib($n-3);\n\
    }\n\nfor($i = 0; $i < 10; $i++)\n    echo \"fibfib($i): \" . fibfib($i) . \"\\\
    n\";\n\nfunction candidate(...$args) {\n    return fibfib(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== 81) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !==\
    \ 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14) !== 927)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'fibfib(0): 0

    fibfib(1): 0

    fibfib(2): 1

    fibfib(3): 1

    fibfib(4): 2

    fibfib(5): 4

    fibfib(6): 7

    fibfib(7): 13

    fibfib(8): 24

    fibfib(9): 44

    '
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    if($n == 0 || $n == 1) return 0;\n    if($n\
    \ == 2) return 1;\n    $fib = [0, 0, 1];\n    for($i = 3; $i <= $n; $i++) {\n\
    \        $fib[$i] = $fib[$i-1] + $fib[$i-2] + $fib[$i-3];\n    }\n    return $fib[$n];\n\
    }\n\nfunction candidate(...$args) {\n    return fibfib(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== 81) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !==\
    \ 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14) !== 927)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    if ($n <= 1) {\n        return 0;\n    } else\
    \ if ($n == 2) {\n        return 1;\n    } else {\n        return fibfib($n -\
    \ 1) + fibfib($n - 2) + fibfib($n - 3);\n    }\n}\n\n$tests = array(1, 5, 8);\n\
    foreach ($tests as $test) {\n    echo fibfib($test), \"\\n\";\n}\nfunction candidate(...$args)\
    \ {\n    return fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 81) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '0

    4

    24

    '
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    if ($n === 0) {\n        return 0;\n    }\n\
    \    if ($n === 1) {\n        return 0;\n    }\n    if ($n === 2) {\n        return\
    \ 1;\n    }\n    return fibfib($n - 1) + fibfib($n - 2) + fibfib($n - 3);\n}\n\
    print fibfib(1) . \"\\n\";\nprint fibfib(5) . \"\\n\";\nprint fibfib(8) . \"\\\
    n\";\nfunction candidate(...$args) {\n    return fibfib(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== 81) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !==\
    \ 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14) !== 927)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '0

    4

    24

    '
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n\tif ($n < 2) return 0;\n\tif ($n == 2) return 1;\n\
    \t$memo[0] = 0;\n\t$memo[1] = 0;\n\t$memo[2] = 1;\n\tfor ($i = 3; $i <= $n; $i++)\
    \ {\n\t\t$memo[$i] = $memo[$i-1] + $memo[$i-2] + $memo[$i-3];\n\t}\n\treturn $memo[$n];\n\
    }\necho \"fibfib(1) = \" . fibfib(1) . \"\\n\";\necho \"fibfib(5) = \" . fibfib(5)\
    \ . \"\\n\";\necho \"fibfib(8) = \" . fibfib(8) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 81) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'fibfib(1) = 0

    fibfib(5) = 4

    fibfib(8) = 24

    '
  timestamp: 1660028760
- exit_code: 255
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    //YOUR CODE GOES HERE\n    return 0;\n}\n\n\
    function candidate(...$args) {\n    return fibfib(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== 81) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !==\
    \ 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14) !== 927)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfwvdp6kb.php:24\n\
    Stack trace:\n#0 /tmp/tmpfwvdp6kb.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpfwvdp6kb.php\
    \ on line 24\n"
  timestamp: 1660028760
- exit_code: 255
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    $a = 0;\n    $b = 0;\n    $c = 1;\n    $i =\
    \ 2;\n    while ($i < $n) {\n        $a = $b;\n        $b = $c;\n        $c =\
    \ $a + $b + $c;\n        $i++;\n    }\n    return $c;\n}\necho fibfib(1) . \"\\\
    n\";\necho fibfib(5) . \"\\n\";\necho fibfib(8) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 81) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n12\n169\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmmldn7zw.php:36\n\
    Stack trace:\n#0 /tmp/tmpmmldn7zw.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpmmldn7zw.php\
    \ on line 36\n"
  timestamp: 1660028760
- exit_code: 255
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    $fibs = [0, 0, 1];\n    for ($i = 2; $i < $n;\
    \ $i++) {\n        $fibs[$i % 3] = $fibs[($i - 1) % 3] + $fibs[($i - 2) % 3] +\
    \ $fibs[($i - 3) % 3];\n    }\n    return $fibs[($n - 1) % 3];\n}\nfunction candidate(...$args)\
    \ {\n    return fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 81) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph2heyrw4.php:26\n\
    Stack trace:\n#0 /tmp/tmph2heyrw4.php(35): test()\n#1 {main}\n  thrown in /tmp/tmph2heyrw4.php\
    \ on line 26\n"
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    if ($n < 2) {\n        return 0;\n    } else\
    \ if ($n < 3) {\n        return 1;\n    } else {\n        return fibfib($n - 1)\
    \ + fibfib($n - 2) + fibfib($n - 3);\n    }\n}\n\nvar_dump(fibfib(1));\nvar_dump(fibfib(5));\n\
    var_dump(fibfib(8));\nfunction candidate(...$args) {\n    return fibfib(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 81) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14)\
    \ !== 927) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'int(0)

    int(4)

    int(24)

    '
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n  if ($n <= 1) return 0;\n  if ($n == 2) return\
    \ 1;\n  $fibfib = [0, 0, 1];\n  for ($i = 3; $i <= $n; $i++) {\n    $fibfib[$i]\
    \ = $fibfib[$i - 1] + $fibfib[$i - 2] + $fibfib[$i - 3];\n  }\n  return $fibfib[$n];\n\
    }\n\n$n = $argv[1];\necho fibfib($n);\nfunction candidate(...$args) {\n    return\
    \ fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== 81) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Warning: Undefined array key 1 in /tmp/tmpjaivfpn6.php on line 24

    0'
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    if ($n == 0) {\n        return 0;\n    } else\
    \ if ($n == 1) {\n        return 0;\n    } else if ($n == 2) {\n        return\
    \ 1;\n    }\n    $fib = [0, 0, 1];\n    for ($i = 3; $i <= $n; $i++) {\n     \
    \   $fib[$i] = $fib[$i - 1] + $fib[$i - 2] + $fib[$i - 3];\n    }\n    return\
    \ $fib[$n];\n}\necho fibfib(1) . \"\\n\";\necho fibfib(5) . \"\\n\";\necho fibfib(8)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return fibfib(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 81) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14)\
    \ !== 927) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '0

    4

    24

    '
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    if ($n == 0) {\n        return 0;\n    } else\
    \ if ($n == 1) {\n        return 0;\n    } else if ($n == 2) {\n        return\
    \ 1;\n    } else {\n        return fibfib($n - 1) + fibfib($n - 2) + fibfib($n\
    \ - 3);\n    }\n}\nfunction candidate(...$args) {\n    return fibfib(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 81) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14)\
    \ !== 927) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    if ($n == 0) {\n        return 0;\n    } else\
    \ if ($n == 1) {\n        return 0;\n    } else if ($n == 2) {\n        return\
    \ 1;\n    } else {\n        return fibfib($n - 1) + fibfib($n - 2) + fibfib($n\
    \ - 3);\n    }\n}\nfunction candidate(...$args) {\n    return fibfib(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 81) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14)\
    \ !== 927) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    $a = 0;\n    $b = 0;\n    $c = 1;\n    for ($i\
    \ = 0; $i < $n; $i++) {\n        $temp = $a + $b + $c;\n        $a = $b;\n   \
    \     $b = $c;\n        $c = $temp;\n    }\n    return $a;\n}\nfunction candidate(...$args)\
    \ {\n    return fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 81) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n  $num = 0;\n  $num_1 = 0;\n  $num_2 = 0;\n  $num_3\
    \ = 1;\n  if ($n == 0) {\n    return 0;\n  }\n  if ($n == 1) {\n    return 0;\n\
    \  }\n  if ($n == 2) {\n    return 1;\n  }\n  for ($i = 2; $i < $n; $i++) {\n\
    \    $num = $num_1 + $num_2 + $num_3;\n    $num_1 = $num_2;\n    $num_2 = $num_3;\n\
    \    $num_3 = $num;\n  }\n  return $num;\n}\n\nfunction candidate(...$args) {\n\
    \    return fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 81) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028760
- exit_code: 255
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    $i = 0;\n    $cache = array();\n    while ($i\
    \ < $n) {\n        if ($i == 0) {\n            $cache[$i] = 0;\n        } else\
    \ if ($i == 1) {\n            $cache[$i] = 0;\n        } else if ($i == 2) {\n\
    \            $cache[$i] = 1;\n        } else {\n            $cache[$i] = $cache[$i-1]\
    \ + $cache[$i-2] + $cache[$i-3];\n        }\n        $i++;\n    }\n    return\
    \ $cache[$n-1];\n}\n\necho fibfib(1) . \"\\n\";\necho fibfib(5) . \"\\n\";\necho\
    \ fibfib(8) . \"\\n\";\nfunction candidate(...$args) {\n    return fibfib(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 81) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14)\
    \ !== 927) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "0\n2\n13\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz_ltnxqj.php:40\n\
    Stack trace:\n#0 /tmp/tmpz_ltnxqj.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpz_ltnxqj.php\
    \ on line 40\n"
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    $a = 0;\n    $b = 0;\n    $c = 1;\n    $d =\
    \ 0;\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n     \
    \   return 0;\n    }\n    if ($n == 2) {\n        return 1;\n    }\n    for ($i\
    \ = 3; $i <= $n; $i++) {\n        $d = $a + $b + $c;\n        $a = $b;\n     \
    \   $b = $c;\n        $c = $d;\n    }\n    return $d;\n}\nfunction candidate(...$args)\
    \ {\n    return fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 81) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n  if ($n < 2) {\n    return 0;\n  } else if ($n\
    \ == 2) {\n    return 1;\n  } else {\n    return fibfib($n - 1) + fibfib($n -\
    \ 2) + fibfib($n - 3);\n  }\n}\n\nfunction candidate(...$args) {\n    return fibfib(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 81) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14)\
    \ !== 927) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    $a = 0;\n    $b = 0;\n    $c = 1;\n    $arr\
    \ = [$a, $b, $c];\n    if ($n <= 3) {\n        return $arr[$n];\n    }\n    for\
    \ ($i = 3; $i <= $n; $i++) {\n        $a = $b;\n        $b = $c;\n        $c =\
    \ $b + $a + $arr[$i - 3];\n        $arr[] = $c;\n    }\n    return $c;\n}\necho\
    \ fibfib(8);\nfunction candidate(...$args) {\n    return fibfib(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 81) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14)\
    \ !== 927) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '24'
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n\t$sequence = array(0, 0, 1);\n\tif ($n < 3) {\n\
    \t\treturn $sequence[$n];\n\t}\n\t$result = 0;\n\tfor ($i = 3; $i <= $n; $i++)\
    \ {\n\t\t$result = $sequence[$i - 1] + $sequence[$i - 2] + $sequence[$i - 3];\n\
    \t\tarray_push($sequence, $result);\n\t}\n\treturn $result;\n}\nfunction candidate(...$args)\
    \ {\n    return fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 81) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028760
- exit_code: 255
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n  $f1 = 0;\n  $f2 = 0;\n  $f3 = 1;\n  $f4 = 1;\n\
    \  $i = 4;\n  while ($i <= $n) {\n    $f1 = $f2;\n    $f2 = $f3;\n    $f3 = $f4;\n\
    \    $f4 = $f1 + $f2 + $f3;\n    $i++;\n  }\n  return $f4;\n}\n\necho fibfib(0);\n\
    echo fibfib(1);\necho fibfib(2);\necho fibfib(8);\nfunction candidate(...$args)\
    \ {\n    return fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 81) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "11124\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi7a_95c7.php:40\n\
    Stack trace:\n#0 /tmp/tmpi7a_95c7.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpi7a_95c7.php\
    \ on line 40\n"
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    if ($n < 2) {\n        return 0;\n    }\n  \
    \  if ($n === 2) {\n        return 1;\n    }\n    $back = $cur = 1;\n    $backBack\
    \ = 0;\n    $n -= 3;\n    while ($n) {\n        $backBackTemp = $backBack;\n \
    \       $backBack = $back;\n        $back = $cur;\n        $cur = $backBackTemp\
    \ + $back + $backBack;\n        $n--;\n    }\n    return $cur;\n}\n\nfunction\
    \ candidate(...$args) {\n    return fibfib(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(2) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== 24) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !==\
    \ 81) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(14) !== 927) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n\tif ($n == 0) {\n\t\treturn 0;\n\t} else if ($n\
    \ == 1) {\n\t\treturn 0;\n\t} else if ($n == 2) {\n\t\treturn 1;\n\t}\n\t$n1 =\
    \ 0;\n\t$n2 = 0;\n\t$n3 = 1;\n\t$sum = 1;\n\tfor ($i = 3; $i <= $n; $i++) {\n\t\
    \t$sum = $n1 + $n2 + $n3;\n\t\t$n1 = $n2;\n\t\t$n2 = $n3;\n\t\t$n3 = $sum;\n\t\
    }\n\treturn $sum;\n}\n\nprint fibfib(1) . \"\\n\";\nprint fibfib(5) . \"\\n\"\
    ;\nprint fibfib(8) . \"\\n\";\n\nfunction candidate(...$args) {\n    return fibfib(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 81) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14)\
    \ !== 927) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '0

    4

    24

    '
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    if ($n == 0) {\n        return 0;\n    }\n \
    \   if ($n == 1) {\n        return 0;\n    }\n    if ($n == 2) {\n        return\
    \ 1;\n    }\n    return fibfib($n - 1) + fibfib($n - 2) + fibfib($n - 3);\n}\n\
    print_r(fibfib(1));\nprint_r(fibfib(5));\nprint_r(fibfib(8));\n\nfunction candidate(...$args)\
    \ {\n    return fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 81) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '0424'
  timestamp: 1660028760
- exit_code: 255
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    // Your code here\n}\n\nfunction candidate(...$args)\
    \ {\n    return fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 81) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp00dg2ghy.php:23\n\
    Stack trace:\n#0 /tmp/tmp00dg2ghy.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp00dg2ghy.php\
    \ on line 23\n"
  timestamp: 1660028760
- exit_code: 255
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n\t$fib1 = 0;\n\t$fib2 = 0;\n\t$fib3 = 1;\n\t$fib4\
    \ = 0;\n\tif ($n < 3) {\n\t\treturn $fib4;\n\t}\n\tfor ($i = 3; $i <= $n; $i++)\
    \ {\n\t\t$fib4 = $fib1 + $fib2 + $fib3;\n\t\t$fib1 = $fib2;\n\t\t$fib2 = $fib3;\n\
    \t\t$fib3 = $fib4;\n\t}\n\treturn $fib4;\n}\n\nvar_dump(fibfib(8));\nfunction\
    \ candidate(...$args) {\n    return fibfib(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(2) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== 24) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !==\
    \ 81) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(14) !== 927) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "int(24)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe4fbtn94.php:37\n\
    Stack trace:\n#0 /tmp/tmpe4fbtn94.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpe4fbtn94.php\
    \ on line 37\n"
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    $fibfibs = array(0, 0, 1);\n    for ($i = 3;\
    \ $i <= $n; $i++) {\n        $fibfibs[$i] = $fibfibs[$i - 1] + $fibfibs[$i - 2]\
    \ + $fibfibs[$i - 3];\n    }\n    return $fibfibs[$n];\n}\n\nfunction candidate(...$args)\
    \ {\n    return fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 81) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    // TODO: Implement me!\n    if($n == 0) return\
    \ 0;\n    if($n == 1) return 0;\n    if($n == 2) return 1;\n    return fibfib($n-1)\
    \ + fibfib($n-2) + fibfib($n-3);\n}\nfunction candidate(...$args) {\n    return\
    \ fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== 81) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    $fibfib = array(0, 0, 1);\n    for ($i = 3;\
    \ $i <= $n; $i++) {\n        $fibfib[$i] = $fibfib[$i - 1] + $fibfib[$i - 2] +\
    \ $fibfib[$i - 3];\n    }\n    return $fibfib[$n];\n}\n\necho fibfib(1);\necho\
    \ \"\\n\";\necho fibfib(5);\necho \"\\n\";\necho fibfib(8);\necho \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return fibfib(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(2) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== 24) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !==\
    \ 81) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(14) !== 927) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '0

    4

    24

    '
  timestamp: 1660028760
- exit_code: 255
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n\t$a = 0;\n\t$b = 0;\n\t$c = 1;\n\tfor ($i = 0;\
    \ $i < $n; $i++) {\n\t\t$a = $b;\n\t\t$b = $c;\n\t\t$c = $a + $b + $c;\n\t}\n\t\
    return $a;\n}\nfunction candidate(...$args) {\n    return fibfib(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 81) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14)\
    \ !== 927) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7p623qes.php:32\n\
    Stack trace:\n#0 /tmp/tmp7p623qes.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp7p623qes.php\
    \ on line 32\n"
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    if ($n < 0) {\n        return -1;\n    } else\
    \ if ($n < 2) {\n        return 0;\n    } else if ($n == 2) {\n        return\
    \ 1;\n    } else {\n        return fibfib($n - 1) + fibfib($n - 2) + fibfib($n\
    \ - 3);\n    }\n}\n$n = 5;\necho fibfib($n) . \"\\n\";\n\nfunction candidate(...$args)\
    \ {\n    return fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 81) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '4

    '
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    if ($n == 0) {\n        return 0;\n    } else\
    \ if ($n == 1) {\n        return 0;\n    } else if ($n == 2) {\n        return\
    \ 1;\n    } else {\n        return fibfib($n - 1) + fibfib($n - 2) + fibfib($n\
    \ - 3);\n    }\n}\n\nfibfib(5);\nfunction candidate(...$args) {\n    return fibfib(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 81) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14)\
    \ !== 927) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    if ($n == 0) {\n        return 0;\n    }\n \
    \   else if ($n == 1) {\n        return 0;\n    }\n    else if ($n == 2) {\n \
    \       return 1;\n    }\n    else {\n        return fibfib($n-1) + fibfib($n-2)\
    \ + fibfib($n-3);\n    }\n}\necho \"fibfib(5) = \".fibfib(5).\"\\n\";\necho \"\
    fibfib(10) = \".fibfib(10).\"\\n\";\nfunction candidate(...$args) {\n    return\
    \ fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== 81) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'fibfib(5) = 4

    fibfib(10) = 81

    '
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    $arr=[0,0,1];\n    if($n<=2){\n        return\
    \ $arr[$n];\n    }\n    for($i=3;$i<=$n;$i++){\n        $tmp=$arr[0]+$arr[1]+$arr[2];\n\
    \        $arr[0]=$arr[1];\n        $arr[1]=$arr[2];\n        $arr[2]=$tmp;\n \
    \   }\n    return $arr[2];\n}\necho fibfib(4);\nfunction candidate(...$args) {\n\
    \    return fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 81) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '2'
  timestamp: 1660028760
- exit_code: 255
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    $arr = array(0, 0, 1);\n    if($n == 0) {\n\
    \        return $arr[0];\n    }\n    else if($n == 1) {\n        return $arr[1];\n\
    \    }\n    else if($n == 2) {\n        return $arr[2];\n    }\n    for($i = 3;\
    \ $i <= $n; $i++) {\n        $arr[0] = $arr[1];\n        $arr[1] = $arr[2];\n\
    \        $arr[2] = $arr[0] + $arr[1] + $arr[2];\n    }\n    return $arr[2];\n\
    }\necho fibfib(1).\"\\n\";\necho fibfib(5).\"\\n\";\necho fibfib(8).\"\\n\";\n\
    \nfunction candidate(...$args) {\n    return fibfib(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== 81) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !==\
    \ 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14) !== 927)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "0\n12\n169\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcraw3try.php:43\n\
    Stack trace:\n#0 /tmp/tmpcraw3try.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpcraw3try.php\
    \ on line 43\n"
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    if ($n === 0) {\n        return 0;\n    }\n\
    \    if ($n === 1) {\n        return 0;\n    }\n    if ($n === 2) {\n        return\
    \ 1;\n    }\n    return fibfib($n - 1) + fibfib($n - 2) + fibfib($n - 3);\n}\n\
    echo fibfib(1).\"\\n\";\necho fibfib(5).\"\\n\";\necho fibfib(8).\"\\n\";\nfunction\
    \ candidate(...$args) {\n    return fibfib(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(2) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== 24) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !==\
    \ 81) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(14) !== 927) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '0

    4

    24

    '
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n  if ($n == 0) {\n    return 0;\n  }\n  else if\
    \ ($n == 1) {\n    return 0;\n  }\n  else if ($n == 2) {\n    return 1;\n  }\n\
    \  else {\n    return fibfib($n-1) + fibfib($n-2) + fibfib($n-3);\n  }\n}\n\n\
    function candidate(...$args) {\n    return fibfib(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== 81) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !==\
    \ 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14) !== 927)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    if ($n == 0) return 0;\n    if ($n == 1) return\
    \ 0;\n    if ($n == 2) return 1;\n    return fibfib($n-1) + fibfib($n-2) + fibfib($n-3);\n\
    }\nfunction candidate(...$args) {\n    return fibfib(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== 81) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !==\
    \ 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14) !== 927)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    if ($n < 2) {\n        return 0;\n    }\n  \
    \  if ($n == 2) {\n        return 1;\n    }\n    $prev = [0, 0, 1];\n    $i =\
    \ 3;\n    while ($i <= $n) {\n        $curr = $prev[0] + $prev[1] + $prev[2];\n\
    \        $prev[0] = $prev[1];\n        $prev[1] = $prev[2];\n        $prev[2]\
    \ = $curr;\n        $i++;\n    }\n    return $curr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 81) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    if ($n == 0) {\n        return 0;\n    }\n \
    \   if ($n == 1) {\n        return 0;\n    }\n    if ($n == 2) {\n        return\
    \ 1;\n    }\n    return fibfib($n - 1) + fibfib($n - 2) + fibfib($n - 3);\n}\n\
    function candidate(...$args) {\n    return fibfib(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== 81) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !==\
    \ 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14) !== 927)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    if ($n == 0) {\n        return 0;\n    }\n \
    \   if ($n == 1) {\n        return 0;\n    }\n    if ($n == 2) {\n        return\
    \ 1;\n    }\n    return fibfib($n - 1) + fibfib($n - 2) + fibfib($n - 3);\n}\n\
    \necho fibfib(8) . \"\\n\";\necho fibfib(1) . \"\\n\";\necho fibfib(5) . \"\\\
    n\";\n\nfunction candidate(...$args) {\n    return fibfib(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== 81) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !==\
    \ 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14) !== 927)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '24

    0

    4

    '
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    if($n <= 1) {\n        return 0;\n    }\n  \
    \  if($n == 2) {\n        return 1;\n    }\n    $fib = [0, 0, 1];\n    for($i\
    \ = 3; $i <= $n; $i++) {\n        $fib[$i % 3] = $fib[($i - 1) % 3] + $fib[($i\
    \ - 2) % 3] + $fib[($i - 3) % 3];\n    }\n    return $fib[$n % 3];\n}\nfunction\
    \ candidate(...$args) {\n    return fibfib(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(2) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== 24) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !==\
    \ 81) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(14) !== 927) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    // Your code here\n    $fibFib = [0, 0, 1];\n\
    \    for ($i = 3; $i <= $n; $i++) {\n        $fibFib[$i] = $fibFib[$i - 1] + $fibFib[$i\
    \ - 2] + $fibFib[$i - 3];\n    }\n    return $fibFib[$n];\n}\necho fibfib(8);\n\
    function candidate(...$args) {\n    return fibfib(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== 81) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !==\
    \ 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14) !== 927)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '24'
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    if ($n === 0) {\n        return 0;\n    } else\
    \ if ($n === 1) {\n        return 0;\n    } else if ($n === 2) {\n        return\
    \ 1;\n    } else {\n        return fibfib($n - 1) + fibfib($n - 2) + fibfib($n\
    \ - 3);\n    }\n}\n\nfibfib(4);\n\nfunction candidate(...$args) {\n    return\
    \ fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== 81) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    if ($n === 0) {\n        return 0;\n    }\n\
    \    if ($n === 1) {\n        return 0;\n    }\n    if ($n === 2) {\n        return\
    \ 1;\n    }\n    return fibfib($n - 1) + fibfib($n - 2) + fibfib($n - 3);\n}\n\
    function candidate(...$args) {\n    return fibfib(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== 81) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !==\
    \ 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14) !== 927)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n  if($n == 0) {\n    return 0;\n  }\n  if($n ==\
    \ 1) {\n    return 0;\n  }\n  if($n == 2) {\n    return 1;\n  }\n  return fibfib($n-1)\
    \ + fibfib($n-2) + fibfib($n-3);\n}\n\n$n = $argv[1];\necho fibfib($n) . \"\\\
    n\";\nfunction candidate(...$args) {\n    return fibfib(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== 81) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !==\
    \ 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14) !== 927)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Warning: Undefined array key 1 in /tmp/tmpo6qo_mwp.php on line 27

    0

    '
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n\tif ($n == 0) {\n\t\treturn 0;\n\t}\n\tif ($n ==\
    \ 1) {\n\t\treturn 0;\n\t}\n\tif ($n == 2) {\n\t\treturn 1;\n\t}\n\treturn fibfib($n-1)\
    \ + fibfib($n-2) + fibfib($n-3);\n}\nfunction candidate(...$args) {\n    return\
    \ fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== 81) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028760
- exit_code: 255
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    // Calculate the $n-th element of the fibfib\
    \ number sequence.\n    if ($n <= 0) {\n        return 0;\n    }\n    if ($n ==\
    \ 1) {\n        return 0;\n    }\n    if ($n == 2) {\n        return 1;\n    }\n\
    \    $result = 0;\n    $x = 1;\n    $y = 1;\n    $z = 2;\n    $iter = 3;\n   \
    \ while ($iter <= $n) {\n        $result = $x + $y + $z;\n        $x = $y;\n \
    \       $y = $z;\n        $z = $result;\n        $iter++;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return fibfib(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== 81) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !==\
    \ 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14) !== 927)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9x98vqz6.php:47\n\
    Stack trace:\n#0 /tmp/tmp9x98vqz6.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp9x98vqz6.php\
    \ on line 47\n"
  timestamp: 1660028760
- exit_code: 255
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    $a = 0;\n    $b = 0;\n    $c = 1;\n    for ($i\
    \ = 0; $i < $n; $i++) {\n        $a = $b;\n        $b = $c;\n        $c = $a +\
    \ $b + $c;\n    }\n    return $a;\n}\n\necho \"fibfib(1) == \" . fibfib(1) . \"\
    \\n\";\necho \"fibfib(5) == \" . fibfib(5) . \"\\n\";\necho \"fibfib(8) == \"\
    \ . fibfib(8) . \"\\n\";\n\nfunction candidate(...$args) {\n    return fibfib(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 81) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14)\
    \ !== 927) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "fibfib(1) == 0\nfibfib(5) == 12\nfibfib(8) == 169\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp0qr1zke_.php:37\nStack trace:\n#0 /tmp/tmp0qr1zke_.php(44):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp0qr1zke_.php on line 37\n"
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    $a = 0;\n    $b = 0;\n    $c = 1;\n    for ($i\
    \ = 0; $i < $n; $i++) {\n        $t = $a + $b + $c;\n        $a = $b;\n      \
    \  $b = $c;\n        $c = $t;\n    }\n    return $a;\n}\n\nfunction candidate(...$args)\
    \ {\n    return fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 81) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n\tif ($n < 0) {\n\t\treturn 0;\n\t}\n\t\n\t$sequence\
    \ = array(0, 0, 1);\n\t\n\twhile (count($sequence) < $n + 1) {\n\t\t$sequence[]\
    \ = $sequence[count($sequence) - 1] + $sequence[count($sequence) - 2] + $sequence[count($sequence)\
    \ - 3];\n\t}\n\t\n\treturn $sequence[$n];\n}\n\nfunction candidate(...$args) {\n\
    \    return fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 81) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    if ($n < 2) {\n        return 0;\n    }\n  \
    \  if ($n == 2) {\n        return 1;\n    }\n    $first = 0;\n    $second = 0;\n\
    \    $third = 1;\n    $result = 0;\n    for ($i = 3; $i <= $n; $i++) {\n     \
    \   $result = $first + $second + $third;\n        $first = $second;\n        $second\
    \ = $third;\n        $third = $result;\n    }\n    return $result;\n}\n\necho\
    \ fibfib(1) . PHP_EOL;\necho fibfib(5) . PHP_EOL;\necho fibfib(8) . PHP_EOL;\n\
    function candidate(...$args) {\n    return fibfib(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== 81) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !==\
    \ 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14) !== 927)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '0

    4

    24

    '
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    $arr = [0, 0, 1];\n    if ($n <= 2) {\n    \
    \    return $arr[$n];\n    }\n    for ($i = 3; $i <= $n; $i++) {\n        $arr[$i]\
    \ = $arr[$i - 1] + $arr[$i - 2] + $arr[$i - 3];\n    }\n    return $arr[$n];\n\
    }\n\n$fibfib = fibfib(1);\nvar_dump($fibfib);\n$fibfib = fibfib(5);\nvar_dump($fibfib);\n\
    $fibfib = fibfib(8);\nvar_dump($fibfib);\nfunction candidate(...$args) {\n   \
    \ return fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 81) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'int(0)

    int(4)

    int(24)

    '
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    $nums = [0, 0, 1];\n    for ($i = 3; $i <= $n;\
    \ $i++) {\n        $nums[$i] = $nums[$i - 1] + $nums[$i - 2] + $nums[$i - 3];\n\
    \    }\n    return $nums[$n];\n}\n\necho fibfib(0) . \"\\n\";\necho fibfib(1)\
    \ . \"\\n\";\necho fibfib(2) . \"\\n\";\necho fibfib(5) . \"\\n\";\necho fibfib(8)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return fibfib(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 81) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14)\
    \ !== 927) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '0

    0

    1

    4

    24

    '
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    if ($n == 0) {\n        return 0;\n    }\n \
    \   if ($n == 1) {\n        return 0;\n    }\n    if ($n == 2) {\n        return\
    \ 1;\n    }\n    return fibfib($n - 1) + fibfib($n - 2) + fibfib($n - 3);\n}\n\
    function candidate(...$args) {\n    return fibfib(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== 81) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !==\
    \ 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14) !== 927)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n  $result = [];\n  $result[0] = 0;\n  $result[1]\
    \ = 0;\n  $result[2] = 1;\n  for ($i = 3; $i <= $n; $i++) {\n    $result[$i] =\
    \ $result[$i - 1] + $result[$i - 2] + $result[$i - 3];\n  }\n  return $result[$n];\n\
    }\nfunction candidate(...$args) {\n    return fibfib(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== 81) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !==\
    \ 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14) !== 927)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n  if ($n == 0) return 0;\n  if ($n == 1) return\
    \ 0;\n  if ($n == 2) return 1;\n  $n0 = 0;\n  $n1 = 0;\n  $n2 = 1;\n  for ($i\
    \ = 3; $i <= $n; $i++) {\n    $n3 = $n2 + $n1 + $n0;\n    $n0 = $n1;\n    $n1\
    \ = $n2;\n    $n2 = $n3;\n  }\n  return $n2;\n}\n\nfunction candidate(...$args)\
    \ {\n    return fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 81) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028760
- exit_code: 255
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    if ($n < 3) {\n        return $n;\n    }\n \
    \   return fibfib($n - 1) + fibfib($n - 2) + fibfib($n - 3);\n}\n\nfunction candidate(...$args)\
    \ {\n    return fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 81) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfz_m41nv.php:26\n\
    Stack trace:\n#0 /tmp/tmpfz_m41nv.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpfz_m41nv.php\
    \ on line 26\n"
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    if ($n == 0) {\n        return 0;\n    } else\
    \ if ($n == 1) {\n        return 0;\n    } else if ($n == 2) {\n        return\
    \ 1;\n    } else {\n        return fibfib($n - 1) + fibfib($n - 2) + fibfib($n\
    \ - 3);\n    }\n}\nfunction candidate(...$args) {\n    return fibfib(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 81) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14)\
    \ !== 927) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n  if($n == 0) {\n    return 0;\n  } else if($n ==\
    \ 1) {\n    return 0;\n  } else if($n == 2) {\n    return 1;\n  } else {\n   \
    \ return fibfib($n-1) + fibfib($n-2) + fibfib($n-3);\n  }\n}\n\necho fibfib(1)\
    \ . PHP_EOL;\necho fibfib(5) . PHP_EOL;\necho fibfib(8) . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 81) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '0

    4

    24

    '
  timestamp: 1660028760
- exit_code: 255
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    $a = 0;\n    $b = 0;\n    $c = 1;\n    $d =\
    \ 0;\n    if ($n==0) {\n        return 0;\n    } else if ($n==1) {\n        return\
    \ 0;\n    } else if ($n==2) {\n        return 1;\n    } else {\n        for ($i=0;\
    \ $i<$n-3; $i++) {\n            $d = $a + $b + $c;\n            $a = $b;\n   \
    \         $b = $c;\n            $c = $d;\n        }\n        return $d;\n    }\n\
    }\nfunction candidate(...$args) {\n    return fibfib(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== 81) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !==\
    \ 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14) !== 927)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbzfhizke.php:42\n\
    Stack trace:\n#0 /tmp/tmpbzfhizke.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpbzfhizke.php\
    \ on line 42\n"
  timestamp: 1660028760
- exit_code: 255
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n  return $n < 3 ? 0 : fibfib($n - 1) + fibfib($n\
    \ - 2) + fibfib($n - 3);\n}\necho fibfib(5) . \"\\n\";\necho fibfib(8) . \"\\\
    n\";\necho fibfib(1) . \"\\n\";\nfunction candidate(...$args) {\n    return fibfib(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 81) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14)\
    \ !== 927) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "0\n0\n0\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcyt3ym38.php:25\n\
    Stack trace:\n#0 /tmp/tmpcyt3ym38.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpcyt3ym38.php\
    \ on line 25\n"
  timestamp: 1660028760
- exit_code: 255
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n  if ($n == 0) {\n    return 0;\n  }\n  if ($n ==\
    \ 1) {\n    return 0;\n  }\n  if ($n == 2) {\n    return 1;\n  }\n  $prev = 0;\n\
    \  $prevprev = 0;\n  $curr = 1;\n  for ($i = 3; $i <= $n; $i++) {\n    $prevprev\
    \ = $prev;\n    $prev = $curr;\n    $curr = $prev + $prevprev + $i - 3;\n  }\n\
    \  return $curr;\n}\necho fibfib(5) . \"\\n\";\nfunction candidate(...$args) {\n\
    \    return fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 81) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "6\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr8b9ylds.php:42\n\
    Stack trace:\n#0 /tmp/tmpr8b9ylds.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpr8b9ylds.php\
    \ on line 42\n"
  timestamp: 1660028760
- exit_code: 255
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    if ($n <= 0) return 0;\n    if ($n <= 2) return\
    \ 1;\n    $nums = [0, 0, 1];\n    for ($i = 3; $i <= $n; $i++) {\n        $nums[0]\
    \ = $nums[1];\n        $nums[1] = $nums[2];\n        $nums[2] = $nums[0] + $nums[1]\
    \ + $nums[2];\n    }\n    return $nums[2];\n}\n\nfunction candidate(...$args)\
    \ {\n    return fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 81) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf7prv04v.php:32\n\
    Stack trace:\n#0 /tmp/tmpf7prv04v.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpf7prv04v.php\
    \ on line 32\n"
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    $fibfib = array(0, 0, 1);\n    for ($i = 3;\
    \ $i <= $n; $i++) {\n        $fibfib[$i] = $fibfib[$i - 1] + $fibfib[$i - 2] +\
    \ $fibfib[$i - 3];\n    }\n    return $fibfib[$n];\n}\n\nfibfib(1); // 0\nfibfib(5);\
    \ // 4\nfibfib(8); // 24\nfunction candidate(...$args) {\n    return fibfib(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 81) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14)\
    \ !== 927) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    if ($n == 0) {\n        return 0;\n    }\n \
    \   if ($n == 1) {\n        return 0;\n    }\n    if ($n == 2) {\n        return\
    \ 1;\n    }\n    return fibfib($n - 1) + fibfib($n - 2) + fibfib($n - 3);\n}\n\
    \necho fibfib(1) . PHP_EOL;\necho fibfib(5) . PHP_EOL;\necho fibfib(8) . PHP_EOL;\n\
    function candidate(...$args) {\n    return fibfib(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== 81) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !==\
    \ 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14) !== 927)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '0

    4

    24

    '
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n  if ($n < 3) {\n    return $n - 1;\n  }\n  $a =\
    \ 0;\n  $b = 0;\n  $c = 1;\n  $i = 2;\n  while ($i < $n) {\n    $d = $a + $b +\
    \ $c;\n    $a = $b;\n    $b = $c;\n    $c = $d;\n    $i++;\n  }\n  return $d;\n\
    }\n\nfunction candidate(...$args) {\n    return fibfib(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== 81) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !==\
    \ 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14) !== 927)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    $fibfib = array();\n    $fibfib[0] = 0;\n  \
    \  $fibfib[1] = 0;\n    $fibfib[2] = 1;\n    for ($i = 3; $i <= $n; $i++) {\n\
    \        $fibfib[$i] = $fibfib[$i - 1] + $fibfib[$i - 2] + $fibfib[$i - 3];\n\
    \    }\n    return $fibfib[$n];\n}\necho \"fibfib(1) => \" . fibfib(1) . \"<br>\"\
    ;\necho \"fibfib(5) => \" . fibfib(5) . \"<br>\";\necho \"fibfib(8) => \" . fibfib(8)\
    \ . \"<br>\";\necho \"fibfib(9) => \" . fibfib(9) . \"<br>\";\necho \"fibfib(10)\
    \ => \" . fibfib(10) . \"<br>\";\necho \"fibfib(12) => \" . fibfib(12) . \"<br>\"\
    ;\nfunction candidate(...$args) {\n    return fibfib(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== 81) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !==\
    \ 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14) !== 927)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: fibfib(1) => 0<br>fibfib(5) => 4<br>fibfib(8) => 24<br>fibfib(9) => 44<br>fibfib(10)
    => 81<br>fibfib(12) => 274<br>
  timestamp: 1660028760
- exit_code: 255
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n\t$previous = [0, 0, 1];\n\tif ($n < 3) return $previous[$n];\n\
    \t$sequence = array();\n\tfor ($i = 3; $i <= $n; $i++) {\n\t\t$sequence[$i] =\
    \ $previous[$i-1] + $previous[$i-2] + $previous[$i-3];\n\t\tarray_shift($previous);\n\
    \t\tarray_push($previous, $sequence[$i]);\n\t}\n\treturn $sequence[$n];\n}\n\n\
    echo fibfib(10) . \"\\n\";\nfunction candidate(...$args) {\n    return fibfib(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 81) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14)\
    \ !== 927) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 3 in /tmp/tmp5ws1u_d8.php on line 19\n\n\
    Warning: Undefined array key 4 in /tmp/tmp5ws1u_d8.php on line 19\n\nWarning:\
    \ Undefined array key 3 in /tmp/tmp5ws1u_d8.php on line 19\n\nWarning: Undefined\
    \ array key 5 in /tmp/tmp5ws1u_d8.php on line 19\n\nWarning: Undefined array key\
    \ 4 in /tmp/tmp5ws1u_d8.php on line 19\n\nWarning: Undefined array key 3 in /tmp/tmp5ws1u_d8.php\
    \ on line 19\n\nWarning: Undefined array key 6 in /tmp/tmp5ws1u_d8.php on line\
    \ 19\n\nWarning: Undefined array key 5 in /tmp/tmp5ws1u_d8.php on line 19\n\n\
    Warning: Undefined array key 4 in /tmp/tmp5ws1u_d8.php on line 19\n\nWarning:\
    \ Undefined array key 7 in /tmp/tmp5ws1u_d8.php on line 19\n\nWarning: Undefined\
    \ array key 6 in /tmp/tmp5ws1u_d8.php on line 19\n\nWarning: Undefined array key\
    \ 5 in /tmp/tmp5ws1u_d8.php on line 19\n\nWarning: Undefined array key 8 in /tmp/tmp5ws1u_d8.php\
    \ on line 19\n\nWarning: Undefined array key 7 in /tmp/tmp5ws1u_d8.php on line\
    \ 19\n\nWarning: Undefined array key 6 in /tmp/tmp5ws1u_d8.php on line 19\n\n\
    Warning: Undefined array key 9 in /tmp/tmp5ws1u_d8.php on line 19\n\nWarning:\
    \ Undefined array key 8 in /tmp/tmp5ws1u_d8.php on line 19\n\nWarning: Undefined\
    \ array key 7 in /tmp/tmp5ws1u_d8.php on line 19\n0\n\nWarning: Undefined array\
    \ key 3 in /tmp/tmp5ws1u_d8.php on line 19\n\nWarning: Undefined array key 4 in\
    \ /tmp/tmp5ws1u_d8.php on line 19\n\nWarning: Undefined array key 3 in /tmp/tmp5ws1u_d8.php\
    \ on line 19\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5ws1u_d8.php:34\n\
    Stack trace:\n#0 /tmp/tmp5ws1u_d8.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp5ws1u_d8.php\
    \ on line 34\n"
  timestamp: 1660028760
- exit_code: 255
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    if ($n == 0) {\n        return 0;\n    }\n \
    \   if ($n == 1) {\n        return 0;\n    }\n    if ($n == 2) {\n        return\
    \ 1;\n    }\n    $prev1 = 1;\n    $prev2 = 1;\n    $prev3 = 0;\n    for ($i =\
    \ 3; $i <= $n; $i++) {\n        $res = $prev1 + $prev2 + $prev3;\n        $prev3\
    \ = $prev2;\n        $prev2 = $prev1;\n        $prev1 = $res;\n    }\n    return\
    \ $res;\n}\n\necho fibfib(0).\"\\n\";\necho fibfib(1).\"\\n\";\necho fibfib(2).\"\
    \\n\";\necho fibfib(3).\"\\n\";\necho fibfib(4).\"\\n\";\necho fibfib(5).\"\\\
    n\";\necho fibfib(6).\"\\n\";\necho fibfib(7).\"\\n\";\necho fibfib(8).\"\\n\"\
    ;\necho fibfib(9).\"\\n\";\necho fibfib(10).\"\\n\";\necho fibfib(11).\"\\n\"\
    ;\necho fibfib(12).\"\\n\";\necho fibfib(13).\"\\n\";\necho fibfib(14).\"\\n\"\
    ;\necho fibfib(15).\"\\n\";\necho fibfib(16).\"\\n\";\necho fibfib(17).\"\\n\"\
    ;\necho fibfib(18).\"\\n\";\necho fibfib(19).\"\\n\";\necho fibfib(20).\"\\n\"\
    ;\necho fibfib(21).\"\\n\";\necho fibfib(22).\"\\n\";\necho fibfib(23).\"\\n\"\
    ;\necho fibfib(24).\"\\n\";\necho fibfib(25).\"\\n\";\necho fibfib(26).\"\\n\"\
    ;\necho fibfib(27).\"\\n\";\necho fibfib(28).\"\\n\";\necho fibfib(29).\"\\n\"\
    ;\necho fibfib(30).\"\\n\";\necho fibfib(31).\"\\n\";\necho fibfib(32).\"\\\n\
    function candidate(...$args) {\n    return fibfib(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== 81) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !==\
    \ 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14) !== 927)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "Test", expecting "," or ";"
    in /tmp/tmpkcktisov.php on line 74

    '
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    if ($n == 0) return 0;\n    if ($n == 1) return\
    \ 0;\n    if ($n == 2) return 1;\n    return fibfib($n-1) + fibfib($n-2) + fibfib($n-3);\n\
    }\n\nfunction candidate(...$args) {\n    return fibfib(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== 81) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !==\
    \ 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14) !== 927)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    $arr = [0, 0, 1];\n    for ($i = 3; $i <= $n;\
    \ $i++) {\n        $arr[$i] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i - 3];\n  \
    \  }\n    return $arr[$n];\n}\n\nfunction candidate(...$args) {\n    return fibfib(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 81) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14)\
    \ !== 927) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028760
- exit_code: 255
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n  $first  = 0;\n  $second = 0;\n  $third  = 1;\n\
    \  $i = 3;\n  while ($i <= $n) {\n    $fourth = $first + $second + $third;\n \
    \   $first  = $second;\n    $second = $third;\n    $third  = $fourth;\n    $i++;\n\
    \  }\n  return $fourth;\n}\n\n$i = 0;\nwhile ($i < 8) {\n  echo fibfib($i), \"\
    \\n\";\n  $i++;\n}\nfunction candidate(...$args) {\n    return fibfib(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 81) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14)\
    \ !== 927) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $fourth in /tmp/tmp00t8b0me.php on line 26\n\
    \n\nWarning: Undefined variable $fourth in /tmp/tmp00t8b0me.php on line 26\n\n\
    \nWarning: Undefined variable $fourth in /tmp/tmp00t8b0me.php on line 26\n\n1\n\
    2\n4\n7\n13\n\nWarning: Undefined variable $fourth in /tmp/tmp00t8b0me.php on\
    \ line 26\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp00t8b0me.php:39\n\
    Stack trace:\n#0 /tmp/tmp00t8b0me.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp00t8b0me.php\
    \ on line 39\n"
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n  // Your code here\n  $fibfib = [0, 0, 1];\n  for\
    \ ($i = 3; $i <= $n; $i++) {\n    $fibfib[$i] = $fibfib[$i - 1] + $fibfib[$i -\
    \ 2] + $fibfib[$i - 3];\n  }\n  return $fibfib[$n];\n}\nfunction candidate(...$args)\
    \ {\n    return fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 81) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028760
- exit_code: 255
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    $x = 0;\n    $y = 0;\n    $z = 1;\n    for ($i\
    \ = 0; $i < $n; $i++) {\n        $x = $y;\n        $y = $z;\n        $z = $x +\
    \ $y + $z;\n    }\n    return $x;\n}\nfunction candidate(...$args) {\n    return\
    \ fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== 81) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx6slh_1y.php:32\n\
    Stack trace:\n#0 /tmp/tmpx6slh_1y.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpx6slh_1y.php\
    \ on line 32\n"
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n  if($n < 0) {\n    return -1;\n  } else if($n ===\
    \ 0) {\n    return 0;\n  } else if($n === 1) {\n    return 0;\n  } else if($n\
    \ === 2) {\n    return 1;\n  }\n  return fibfib($n-1) + fibfib($n-2) + fibfib($n-3);\n\
    }\n\necho fibfib(10);\nfunction candidate(...$args) {\n    return fibfib(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 81) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14)\
    \ !== 927) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '81'
  timestamp: 1660028760
- exit_code: 255
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n  return $n < 3 ? $n - 1 : fibfib($n - 1) + fibfib($n\
    \ - 2) + fibfib($n - 3);\n}\nprint fibfib(1);\nfunction candidate(...$args) {\n\
    \    return fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 81) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "0\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8tiewb09.php:25\n\
    Stack trace:\n#0 /tmp/tmp8tiewb09.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp8tiewb09.php\
    \ on line 25\n"
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n  if ($n < 2) {\n    return 0;\n  }\n  if ($n ==\
    \ 2) {\n    return 1;\n  }\n  $a = 0;\n  $b = 0;\n  $c = 1;\n  for ($i = 2; $i\
    \ < $n; $i++) {\n    $d = $a + $b + $c;\n    $a = $b;\n    $b = $c;\n    $c =\
    \ $d;\n  }\n  return $d;\n}\n\nfunction candidate(...$args) {\n    return fibfib(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 81) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14)\
    \ !== 927) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028760
- exit_code: 255
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n\tif ($n < 3) {\n\t\treturn $n - 1;\n\t}\n\treturn\
    \ fibfib($n - 1) + fibfib($n - 2) + fibfib($n - 3);\n}\n\necho fibfib(5);\nfunction\
    \ candidate(...$args) {\n    return fibfib(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(2) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== 24) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !==\
    \ 81) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(14) !== 927) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcbhoqpe1.php:29\n\
    Stack trace:\n#0 /tmp/tmpcbhoqpe1.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpcbhoqpe1.php\
    \ on line 29\n"
  timestamp: 1660028760
- exit_code: 255
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    $a = $b = $c = 0;\n    $result = 1;\n    if\
    \ ($n <= 2) {\n        return $result;\n    }\n    for ($i = 2; $i < $n; $i++)\
    \ {\n        $result = $a + $b + $c;\n        $a = $b;\n        $b = $c;\n   \
    \     $c = $result;\n    }\n    return $result;\n}\necho fibfib(8) . PHP_EOL;\n\
    \nfunction candidate(...$args) {\n    return fibfib(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== 81) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !==\
    \ 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14) !== 927)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "0\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpis85of8z.php:36\n\
    Stack trace:\n#0 /tmp/tmpis85of8z.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpis85of8z.php\
    \ on line 36\n"
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    if ($n < 0) {\n        return null;\n    }\n\
    \n    if ($n < 2) {\n        return 0;\n    }\n\n    if ($n < 3) {\n        return\
    \ 1;\n    }\n\n    $f0 = 0;\n    $f1 = 0;\n    $f2 = 1;\n    $f3 = 1;\n\n    for\
    \ ($i = 3; $i <= $n; $i++) {\n        $f3 = $f0 + $f1 + $f2;\n        $f0 = $f1;\n\
    \        $f1 = $f2;\n        $f2 = $f3;\n    }\n\n    return $f3;\n}\n\nfunction\
    \ candidate(...$args) {\n    return fibfib(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(2) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== 24) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !==\
    \ 81) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(14) !== 927) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n\tif ($n == 0) {\n\t\treturn 0;\n\t} else if ($n\
    \ == 1) {\n\t\treturn 0;\n\t} else if ($n == 2) {\n\t\treturn 1;\n\t} else {\n\
    \t\treturn fibfib($n-1) + fibfib($n-2) + fibfib($n-3);\n\t}\n}\n\necho fibfib(8);\n\
    function candidate(...$args) {\n    return fibfib(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== 81) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !==\
    \ 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14) !== 927)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '24'
  timestamp: 1660028760
- exit_code: 255
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n\tif ($n === 0) {\n\t\treturn 0;\n\t}\n\tif ($n\
    \ === 1) {\n\t\treturn 0;\n\t}\n\tif ($n === 2) {\n\t\treturn 1;\n\t}\n\t$sum\
    \ = 0;\n\t$fibfib_i_minus_1 = 0;\n\t$fibfib_i_minus_2 = 0;\n\t$fibfib_i_minus_3\
    \ = 1;\n\tfor ($i = 2; $i < $n; $i++) {\n\t\t$sum = $fibfib_i_minus_1 + $fibfib_i_minus_2\
    \ + $fibfib_i_minus_3;\n\t\t$fibfib_i_minus_3 = $fibfib_i_minus_2;\n\t\t$fibfib_i_minus_2\
    \ = $fibfib_i_minus_1;\n\t\t$fibfib_i_minus_1 = $sum;\n\t}\n\treturn $sum;\n}\n\
    echo fibfib(3) . \"\\n\";\necho fibfib(4) . \"\\n\";\necho fibfib(5) . \"\\n\"\
    ;\necho fibfib(6) . \"\\n\";\necho fibfib(7) . \"\\n\";\necho fibfib(8) . \"\\\
    n\";\necho fibfib(9) . \"\\n\";\necho fibfib(10) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 81) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n1\n2\n4\n7\n13\n24\n44\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpklsa2cab.php:51\nStack trace:\n#0 /tmp/tmpklsa2cab.php(58): test()\n\
    #1 {main}\n  thrown in /tmp/tmpklsa2cab.php on line 51\n"
  timestamp: 1660028760
- exit_code: 255
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    if ($n == 0) return 0;\n    if ($n == 1) return\
    \ 0;\n    if ($n == 2) return 1;\n    $res = 0;\n    $c = 0;\n    $b = 1;\n  \
    \  $a = 0;\n    for ($i = 2; $i < $n; $i++) {\n        $res = $a + $b + $c;\n\
    \        $a = $b;\n        $b = $c;\n        $c = $res;\n    }\n    return $res;\n\
    }\necho \"Testing fibfib(8)\\n\";\nassert(fibfib(8) == 24);\necho \"PASSED!\\\
    n\";\n\nfunction candidate(...$args) {\n    return fibfib(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== 81) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !==\
    \ 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14) !== 927)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Testing fibfib(8)\n\nFatal error: Uncaught AssertionError: assert(fibfib(8)\
    \ == 24) in /tmp/tmpc9_eao58.php:31\nStack trace:\n#0 /tmp/tmpc9_eao58.php(31):\
    \ assert(false, 'assert(fibfib(8...')\n#1 {main}\n  thrown in /tmp/tmpc9_eao58.php\
    \ on line 31\n"
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    if ($n <= 1) {\n        return 0;\n    }\n \
    \   if ($n == 2) {\n        return 1;\n    }\n    $fib = array(0, 0, 1);\n   \
    \ for ($i = 3; $i <= $n; $i++) {\n        $fib[$i] = $fib[$i - 1] + $fib[$i -\
    \ 2] + $fib[$i - 3];\n    }\n    return $fib[$n];\n}\n\nfunction candidate(...$args)\
    \ {\n    return fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 81) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028760
- exit_code: 255
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n  // @TODO: Implement the fibfib function\n  $a\
    \ = 0;\n  $b = 0;\n  $c = 1;\n  for ($i = 2; $i <= $n; $i++) {\n    $d = $a +\
    \ $b + $c;\n    $a = $b;\n    $b = $c;\n    $c = $d;\n  }\n  return $c;\n}\n\n\
    echo fibfib(1).\"\\n\";\necho fibfib(5).\"\\n\";\necho fibfib(8).\"\\n\";\nfunction\
    \ candidate(...$args) {\n    return fibfib(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(2) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== 24) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !==\
    \ 81) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(14) !== 927) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n7\n44\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvjtww_nk.php:37\n\
    Stack trace:\n#0 /tmp/tmpvjtww_nk.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpvjtww_nk.php\
    \ on line 37\n"
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    if ($n == 0) return 0;\n    if ($n == 1) return\
    \ 0;\n    if ($n == 2) return 1;\n    return fibfib($n-1) + fibfib($n-2) + fibfib($n-3);\n\
    }\necho fibfib(1);\necho PHP_EOL;\necho fibfib(5);\necho PHP_EOL;\necho fibfib(8);\n\
    echo PHP_EOL;\n\nfunction candidate(...$args) {\n    return fibfib(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 81) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14)\
    \ !== 927) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '0

    4

    24

    '
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n  if ($n < 2) {\n    return 0;\n  } else if ($n\
    \ < 3) {\n    return 1;\n  } else {\n    return fibfib($n - 1) + fibfib($n - 2)\
    \ + fibfib($n - 3);\n  }\n}\n\nfunction candidate(...$args) {\n    return fibfib(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 81) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14)\
    \ !== 927) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028760
- exit_code: 255
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    $result = 0;\n    $i = 0;\n    $j = 1;\n   \
    \ $k = 1;\n    while ($n > 0) {\n        $result = $i + $j + $k;\n        $i =\
    \ $j;\n        $j = $k;\n        $k = $result;\n        $n--;\n    }\n    return\
    \ $result;\n}\n\n$input = 8;\n$output = fibfib($input);\necho $output;\nfunction\
    \ candidate(...$args) {\n    return fibfib(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(2) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== 24) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !==\
    \ 81) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(14) !== 927) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "149\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwflw1b7w.php:37\n\
    Stack trace:\n#0 /tmp/tmpwflw1b7w.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpwflw1b7w.php\
    \ on line 37\n"
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n\tif($n == 0 || $n == 1) {\n\t\treturn 0;\n\t} else\
    \ if($n == 2) {\n\t\treturn 1;\n\t} else {\n\t\treturn fibfib($n-1) + fibfib($n-2)\
    \ + fibfib($n-3);\n\t}\n}\necho \"fibfib(1) == 0? \" . ((fibfib(1) == 0) ? \"\
    TRUE\" : \"FALSE\") . \"\\n\";\necho \"fibfib(5) == 4? \" . ((fibfib(5) == 4)\
    \ ? \"TRUE\" : \"FALSE\") . \"\\n\";\necho \"fibfib(8) == 24? \" . ((fibfib(8)\
    \ == 24) ? \"TRUE\" : \"FALSE\") . \"\\n\";\necho \"fibfib(20) == 63898059? \"\
    \ . ((fibfib(20) == 63898059) ? \"TRUE\" : \"FALSE\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 81) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'fibfib(1) == 0? TRUE

    fibfib(5) == 4? TRUE

    fibfib(8) == 24? TRUE

    fibfib(20) == 63898059? FALSE

    '
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n  // Fill this in.\n  $fib = array();\n  $fib[0]\
    \ = 0;\n  $fib[1] = 0;\n  $fib[2] = 1;\n  for($i = 3; $i <= $n; $i++) {\n    \
    \  $fib[$i] = $fib[$i-1] + $fib[$i-2] + $fib[$i-3];\n  }\n  return $fib[$n];\n\
    }\n\nprint fibfib(1) . \"\\n\";\nprint fibfib(5) . \"\\n\";\nprint fibfib(8) .\
    \ \"\\n\";\nfunction candidate(...$args) {\n    return fibfib(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 81) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14)\
    \ !== 927) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '0

    4

    24

    '
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n  if ($n == 0) {\n    return 0;\n  } else if ($n\
    \ == 1) {\n    return 0;\n  } else if ($n == 2) {\n    return 1;\n  } else {\n\
    \    return fibfib($n-1) + fibfib($n-2) + fibfib($n-3);\n  }\n}\n\necho \"fibfib(1)\
    \ = \".fibfib(1).\"\\n\";\necho \"fibfib(5) = \".fibfib(5).\"\\n\";\necho \"fibfib(8)\
    \ = \".fibfib(8).\"\\n\";\nfunction candidate(...$args) {\n    return fibfib(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 81) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14)\
    \ !== 927) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'fibfib(1) = 0

    fibfib(5) = 4

    fibfib(8) = 24

    '
  timestamp: 1660028760
- exit_code: 255
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    if ($n <= 1) {\n        return 0;\n    }\n \
    \   if ($n == 2) {\n        return 1;\n    }\n    return fibfib($n - 1) + fibfib($n\
    \ - 2) + fibfib($n - 3);\n}\n\n$fh = fopen($argv[1], \"r\");\nwhile (!feof($fh))\
    \ {\n    $test = trim(fgets($fh));\n    if ($test != \"\") {\n        echo fibfib($test)\
    \ . \"\\n\";\n    }\n}\nfclose($fh);\nfunction candidate(...$args) {\n    return\
    \ fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== 81) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 1 in /tmp/tmp6swpb01d.php on line 24\n\n\
    Deprecated: fopen(): Passing null to parameter #1 ($filename) of type string is\
    \ deprecated in /tmp/tmp6swpb01d.php on line 24\n\nFatal error: Uncaught ValueError:\
    \ Path cannot be empty in /tmp/tmp6swpb01d.php:24\nStack trace:\n#0 /tmp/tmp6swpb01d.php(24):\
    \ fopen('', 'r')\n#1 {main}\n  thrown in /tmp/tmp6swpb01d.php on line 24\n"
  timestamp: 1660028760
- exit_code: 255
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    if($n <= 0) {\n        return 0;\n    } else\
    \ if($n <= 1) {\n        return 1;\n    } else {\n        return fibfib($n-1)\
    \ + fibfib($n-2) + fibfib($n-3);\n    }\n}\nfunction candidate(...$args) {\n \
    \   return fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 81) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps8hre2ek.php:29\n\
    Stack trace:\n#0 /tmp/tmps8hre2ek.php(37): test()\n#1 {main}\n  thrown in /tmp/tmps8hre2ek.php\
    \ on line 29\n"
  timestamp: 1660028760
- exit_code: 255
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n\t$current = 0;\n\t$next = 1;\n\t$new = 0;\n\tfor\
    \ ($i = 0; $i < $n; $i++) {\n\t\t$new = $current + $next + $new;\n\t\t$current\
    \ = $next;\n\t\t$next = $new;\n\t}\n\treturn $current;\n}\nvar_dump(fibfib(1));\n\
    var_dump(fibfib(5));\nvar_dump(fibfib(8));\n\nfunction candidate(...$args) {\n\
    \    return fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 81) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "int(1)\nint(17)\nint(239)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpxgoo6l0z.php:35\nStack trace:\n#0 /tmp/tmpxgoo6l0z.php(43): test()\n\
    #1 {main}\n  thrown in /tmp/tmpxgoo6l0z.php on line 35\n"
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    if ($n == 0) {\n        return 0;\n    } else\
    \ if ($n == 1) {\n        return 0;\n    } else if ($n == 2) {\n        return\
    \ 1;\n    } else {\n        return fibfib($n - 1) + fibfib($n - 2) + fibfib($n\
    \ - 3);\n    }\n}\n\necho fibfib(3);\nfunction candidate(...$args) {\n    return\
    \ fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== 81) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1'
  timestamp: 1660028760
- exit_code: 255
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    if ($n < 3) {\n        return $n-1;\n    }\n\
    \    return fibfib($n-1) + fibfib($n-2) + fibfib($n-3);\n}\n\nfunction candidate(...$args)\
    \ {\n    return fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 81) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplj1437o3.php:28\n\
    Stack trace:\n#0 /tmp/tmplj1437o3.php(35): test()\n#1 {main}\n  thrown in /tmp/tmplj1437o3.php\
    \ on line 28\n"
  timestamp: 1660028760
- exit_code: 255
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n\t$f = 0;\n\t$f1 = 0;\n\t$f2 = 1;\n\t$f3 = 1;\n\t\
    if ($n == 0) {\n\t\treturn $f;\n\t} elseif ($n == 1) {\n\t\treturn $f1;\n\t} elseif\
    \ ($n == 2) {\n\t\treturn $f2;\n\t} else {\n\t\tfor ($i = 3; $i <= $n; $i++) {\n\
    \t\t\t$f = $f1 + $f2 + $f3;\n\t\t\t$f1 = $f2;\n\t\t\t$f2 = $f3;\n\t\t\t$f3 = $f;\n\
    \t\t}\n\t\treturn $f;\n\t}\n}\nfunction candidate(...$args) {\n    return fibfib(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 81) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14)\
    \ !== 927) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwm8xoe2a.php:42\n\
    Stack trace:\n#0 /tmp/tmpwm8xoe2a.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpwm8xoe2a.php\
    \ on line 42\n"
  timestamp: 1660028760
- exit_code: 255
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    if ($n < 3) return 0;\n    $a = 0;\n    $b =\
    \ 0;\n    $c = 1;\n    for ($i = 3; $i <= $n; $i++) {\n        $d = $a + $b +\
    \ $c;\n        $a = $b;\n        $b = $c;\n        $c = $d;\n    }\n    return\
    \ $d;\n}\nfunction candidate(...$args) {\n    return fibfib(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 81) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14)\
    \ !== 927) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr3g_w3yb.php:32\n\
    Stack trace:\n#0 /tmp/tmpr3g_w3yb.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpr3g_w3yb.php\
    \ on line 32\n"
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n  if ($n == 0) {\n    return 0;\n  } else if ($n\
    \ == 1) {\n    return 0;\n  } else if ($n == 2) {\n    return 1;\n  } else {\n\
    \    return fibfib($n-1) + fibfib($n-2) + fibfib($n-3);\n  }\n}\necho fibfib(1)\
    \ . \"\\n\";\necho fibfib(5) . \"\\n\";\necho fibfib(8) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 81) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '0

    4

    24

    '
  timestamp: 1660028760
- exit_code: 255
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    $fib = [0, 0, 1];\n    if ($n == 0) {\n    \
    \    return $fib[0];\n    } elseif ($n == 1) {\n        return $fib[1];\n    }\
    \ elseif ($n == 2) {\n        return $fib[2];\n    }\n    for ($i = 3; $i <= $n;\
    \ $i++) {\n        $fib[0] = $fib[1];\n        $fib[1] = $fib[2];\n        $fib[2]\
    \ = $fib[0] + $fib[1] + $fib[2];\n    }\n    return $fib[2];\n}\n\nfunction candidate(...$args)\
    \ {\n    return fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 81) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkfk4jxfn.php:38\n\
    Stack trace:\n#0 /tmp/tmpkfk4jxfn.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpkfk4jxfn.php\
    \ on line 38\n"
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    if ($n == 0) {\n        return 0;\n    } else\
    \ if ($n == 1) {\n        return 0;\n    } else if ($n == 2) {\n        return\
    \ 1;\n    } else {\n        return fibfib($n - 1) + fibfib($n - 2) + fibfib($n\
    \ - 3);\n    }\n}\necho \"fibfib(1) => \" . fibfib(1) . \"\\n\";\necho \"fibfib(5)\
    \ => \" . fibfib(5) . \"\\n\";\necho \"fibfib(8) => \" . fibfib(8) . \"\\n\";\n\
    echo \"fibfib(0) => \" . fibfib(0) . \"\\n\";\nfunction candidate(...$args) {\n\
    \    return fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 81) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'fibfib(1) => 0

    fibfib(5) => 4

    fibfib(8) => 24

    fibfib(0) => 0

    '
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    $fib = [0,0,1];\n    if ($n < 3) return $fib[$n];\n\
    \    for ($i = 3; $i <= $n; $i++) {\n        $fib[$i] = $fib[$i-1] + $fib[$i-2]\
    \ + $fib[$i-3];\n    }\n    return $fib[$n];\n}\n\nfunction candidate(...$args)\
    \ {\n    return fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 81) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    $fibfib[0] = 0;\n    $fibfib[1] = 0;\n    $fibfib[2]\
    \ = 1;\n    if ($n < 3) return $fibfib[$n];\n    for ($i = 3; $i <= $n; $i++)\
    \ {\n        $fibfib[$i] = $fibfib[$i-1] + $fibfib[$i-2] + $fibfib[$i-3];\n  \
    \  }\n    return $fibfib[$n];\n}\necho fibfib(1) . \"\\n\";\necho fibfib(5) .\
    \ \"\\n\";\necho fibfib(8) . \"\\n\";\n\nfunction candidate(...$args) {\n    return\
    \ fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== 81) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '0

    4

    24

    '
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    if ($n == 0) return 0;\n    if ($n == 1) return\
    \ 0;\n    if ($n == 2) return 1;\n    return fibfib($n-1) + fibfib($n-2) + fibfib($n-3);\n\
    }\nfunction candidate(...$args) {\n    return fibfib(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== 81) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !==\
    \ 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14) !== 927)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028760
- exit_code: 255
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n\t$array = [0, 0, 1];\n\tfor ($i = 2; $i < $n; $i++)\
    \ {\n\t\t$array[2] = $array[0] + $array[1] + $array[2];\n\t\t$array[0] = $array[1];\n\
    \t\t$array[1] = $array[2] - $array[0] - $array[1];\n\t}\n\treturn $array[2];\n\
    }\n\necho fibfib(1);\necho \"\\n\";\necho fibfib(5);\necho \"\\n\";\necho fibfib(8);\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return fibfib(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 81) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14)\
    \ !== 927) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n3\n18\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppx5yuvpg.php:36\n\
    Stack trace:\n#0 /tmp/tmppx5yuvpg.php(44): test()\n#1 {main}\n  thrown in /tmp/tmppx5yuvpg.php\
    \ on line 36\n"
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    if ($n <= 1) return 0;\n    if ($n == 2) return\
    \ 1;\n    return fibfib($n-1) + fibfib($n-2) + fibfib($n-3);\n}\necho fibfib(5)\
    \ . \"\\n\";\necho fibfib(8) . \"\\n\";\n\nfunction candidate(...$args) {\n  \
    \  return fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 81) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '4

    24

    '
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n\tif ($n <= 1) {\n\t\treturn 0;\n\t} else if ($n\
    \ == 2) {\n\t\treturn 1;\n\t} else {\n\t\treturn fibfib($n-1) + fibfib($n-2) +\
    \ fibfib($n-3);\n\t}\n}\n\nfunction candidate(...$args) {\n    return fibfib(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 81) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14)\
    \ !== 927) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    //your code here\n    $array = [0, 0, 1];\n\
    \    if ($n <= 2) {\n        return $array[$n];\n    }\n    for ($i = 3; $i <=\
    \ $n; $i++) {\n        $array[$i] = $array[$i - 1] + $array[$i - 2] + $array[$i\
    \ - 3];\n    }\n    return $array[$n];\n}\necho fibfib(1);\necho \"\\n\";\necho\
    \ fibfib(5);\necho \"\\n\";\necho fibfib(8);\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 81) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '0

    4

    24

    '
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n    if ($n <= 1) {\n        return 0;\n    }\n \
    \   if ($n == 2) {\n        return 1;\n    }\n    $a = 0;\n    $b = 0;\n    $c\
    \ = 1;\n    for ($i = 3; $i <= $n; $i++) {\n        $d = $a + $b + $c;\n     \
    \   $a = $b;\n        $b = $c;\n        $c = $d;\n    }\n    return $d;\n}\necho\
    \ fibfib(1);\necho fibfib(5);\necho fibfib(8);\nfunction candidate(...$args) {\n\
    \    return fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 81) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '0424'
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n  if ($n <= 1) return 0;\n  if ($n == 2) return\
    \ 1;\n  return fibfib($n-1) + fibfib($n-2) + fibfib($n-3);\n}\n\necho fibfib(5)\
    \ . \"\\n\";\necho fibfib(8) . \"\\n\";\necho fibfib(9) . \"\\n\";\necho fibfib(10)\
    \ . \"\\n\";\necho fibfib(14) . \"\\n\";\necho fibfib(15) . \"\\n\";\necho fibfib(16)\
    \ . \"\\n\";\necho fibfib(17) . \"\\n\";\necho fibfib(18) . \"\\n\";\n\nfunction\
    \ candidate(...$args) {\n    return fibfib(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(2) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== 24) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !==\
    \ 81) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(14) !== 927) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '4

    24

    44

    81

    927

    1705

    3136

    5768

    10609

    '
  timestamp: 1660028760
- exit_code: 0
  program: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n\
    // fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib($n) {\n\tif ($n == 0) {\n\t\treturn 0;\n\t}\n\telseif ($n\
    \ == 1) {\n\t\treturn 0;\n\t}\n\telseif ($n == 2) {\n\t\treturn 1;\n\t}\n\telse\
    \ {\n\t\treturn fibfib($n-1) + fibfib($n-2) + fibfib($n-3);\n\t}\n}\nfunction\
    \ candidate(...$args) {\n    return fibfib(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(2) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== 24) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !==\
    \ 81) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(14) !== 927) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028760
