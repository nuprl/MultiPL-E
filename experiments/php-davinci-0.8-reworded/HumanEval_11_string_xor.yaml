name: HumanEval_11_string_xor
language: php
prompt: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n//\
  \ Perform binary XOR on these inputs and return result also as a string.\n// >>>\
  \ string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n"
tests: "function candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\"\
  ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
  ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["\t// $a, $b are both binary strings\n\t// convert them to decimal integers\n\
    \t$a_dec = bindec($a);\n\t$b_dec = bindec($b);\n\t// perform binary xor on the\
    \ decimals\n\t$result_dec = $a_dec ^ $b_dec;\n\t// convert result back to binary\
    \ string\n\t$result = decbin($result_dec);\n\treturn $result;\n}\n\necho string_xor(\"\
    010\", \"110\");", "\t$result = \"\";\n\t$len = strlen($a);\n\tfor ($i = 0; $i\
    \ < $len; $i++) {\n\t\t$result .= $a[$i] ^ $b[$i];\n\t}\n\treturn $result;\n}\n",
  "  // Your code here\n}", "  $xor_string = \"\";\n  for ($i = 0; $i < strlen($a);\
    \ $i++) {\n    $xor_string .= $a[$i] ^ $b[$i];\n  }\n  return $xor_string;\n}\n",
  "    $lena = strlen($a);\n    $lenb = strlen($b);\n    if ($lena != $lenb) {\n \
    \       return \"\";\n    }\n    $ret = \"\";\n    for ($i = 0; $i < $lena; $i++)\
    \ {\n        $ret .= $a[$i] ^ $b[$i];\n    }\n    return $ret;\n}\n", "  $a_len\
    \ = strlen($a);\n  $b_len = strlen($b);\n  $length = max($a_len, $b_len);\n  $a\
    \ = str_pad($a, $length, '0', STR_PAD_LEFT);\n  $b = str_pad($b, $length, '0',\
    \ STR_PAD_LEFT);\n  $xor = '';\n  for ($i = 0; $i < $length; $i++) {\n    $a_bit\
    \ = (int) $a[$i];\n    $b_bit = (int) $b[$i];\n    $bit = $a_bit ^ $b_bit;\n \
    \   $xor .= (string) $bit;\n  }\n  return $xor;\n}", "  $c = '';\n  for ($i =\
    \ 0; $i < strlen($a); $i++) {\n    $c .= $a[$i] xor $b[$i];\n  }\n  return $c;\n\
    }", "  $result = \"\";\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .=\
    \ intval($a[$i]) ^ intval($b[$i]);\n  }\n  return $result;\n}\n", "  // Your code\
    \ here\n  // $a = convertToBin($a);\n  // $b = convertToBin($b);\n  return decbin(bindec($a)\
    \ ^ bindec($b));\n  // return bin2hex(bindec($a) ^ bindec($b));\n}\n", "  if (strlen($a)\
    \ != strlen($b)) {\n    return \"Length mismatch\";\n  }\n  $out = \"\";\n  for\
    \ ($i = 0; $i < strlen($a); $i++) {\n    $out .= ($a[$i] ^ $b[$i]);\n  }\n  return\
    \ $out;\n}\n", "  $result = \"\";\n  for ($i = 0; $i < strlen($a); $i++) {\n \
    \   $result .= ($a[$i] ^ $b[$i]);\n  }\n  return $result;\n}\n", "  $result =\
    \ array();\n  $a = str_split($a);\n  $b = str_split($b);\n  $size = count($a);\n\
    \  for ($i = 0; $i < $size; $i++) {\n    $result[] = (int) $a[$i] ^ (int) $b[$i];\n\
    \  }\n  return implode($result);\n}", "  $result = \"\";\n  for ($i = 0; $i <\
    \ strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n  }\n  return $result;\n\
    }", "    return decbin(bindec($a) ^ bindec($b));\n}", "\treturn strval(bindec($a)\
    \ ^ bindec($b));\n}\n", "    $num1 = (int)$a;\n    $num2 = (int)$b;\n    $res\
    \ = decbin($num1 ^ $num2);\n    return $res;\n}", "  $length = max(strlen($a),\
    \ strlen($b));\n  $result = \"\";\n  for ($i = 0; $i < $length; $i++) {\n    $x\
    \ = ($i < strlen($a)) ? (int)$a[$i] : 0;\n    $y = ($i < strlen($b)) ? (int)$b[$i]\
    \ : 0;\n    $result .= ($x ^ $y);\n  }\n  return $result;\n}\n", "    // Convert\
    \ hex string to binary string\n    $aBin = hex2bin($a);\n    $bBin = hex2bin($b);\n\
    \    $aBin = str_split($aBin);\n    $bBin = str_split($bBin);\n    $result = \"\
    \";\n    // XOR strings by iterating through them\n    foreach($aBin as $key =>\
    \ $val) {\n        if ($val == $bBin[$key]) {\n            $result .= \"0\";\n\
    \        } else {\n            $result .= \"1\";\n        }\n    }\n    // Return\
    \ result as hex string\n    return bin2hex($result);\n}\n\necho string_xor(\"\
    010\", \"110\");\n", "    $res = \"\";\n    for ($i = 0; $i < strlen($a); $i++)\
    \ {\n        $res .= intval($a[$i]) ^ intval($b[$i]);\n    }\n    return $res;\n\
    }\n", "    $a = str_split($a);\n    $b = str_split($b);\n    $len = count($a);\n\
    \    $result = [];\n    for ($i = 0; $i < $len; $i++) {\n        $result[] = ($a[$i]\
    \ == $b[$i]) ? 0 : 1;\n    }\n    return implode($result);\n}", "  $stringLength\
    \ = strlen($a);\n  $result = '';\n  for ($i = 0; $i < $stringLength; $i++) {\n\
    \    $aBit = substr($a, $i, 1);\n    $bBit = substr($b, $i, 1);\n    if ($aBit\
    \ == $bBit) {\n      $result .= '0';\n    } else {\n      $result .= '1';\n  \
    \  }\n  }\n  return $result;\n}\n", "  $nA = strlen($a);\n  $nB = strlen($b);\n\
    \  $nMax = max($nA, $nB);\n  $a = str_pad($a, $nMax, '0', STR_PAD_LEFT);\n  $b\
    \ = str_pad($b, $nMax, '0', STR_PAD_LEFT);\n  for ($i = 0; $i < $nMax; $i++) {\n\
    \    $res[$i] = $a[$i] ^ $b[$i];\n  }\n  return implode('', $res);\n}\n$res =\
    \ string_xor(\"010\", \"110\");\nprint_r($res);", "  \n}\n", "  $result = '';\n\
    \  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n  }\n\
    \  return $result;\n}", "  // your code here\n}", "\tif (strlen($a) == strlen($b))\
    \ {\n\t\t$result = \"\";\n\t\tfor ($i = 0; $i < strlen($a); $i++) {\n\t\t\tif\
    \ ($a[$i] == $b[$i]) {\n\t\t\t\t$result .= \"0\";\n\t\t\t} else {\n\t\t\t\t$result\
    \ .= \"1\";\n\t\t\t}\n\t\t}\n\t\treturn $result;\n\t} else {\n\t\treturn false;\n\
    \t}\n}\necho string_xor(\"010\", \"110\") . \"\\n\";\n", "    $xor = [];\n   \
    \ $a_len = strlen($a);\n    $b_len = strlen($b);\n    $len = max($a_len, $b_len);\n\
    \    for ($i = 0; $i < $len; $i++) {\n        $xor[] = ($a[$i] ?? '0') ^ ($b[$i]\
    \ ?? '0');\n    }\n    return implode('', $xor);\n}\n\necho string_xor(\"001\"\
    , \"110\");", "    $xor = $a ^ $b;\n    $bin = decbin($xor);\n    return str_pad($bin,\
    \ strlen($a), '0', STR_PAD_LEFT);\n}\n", "  $a_bin = str_split($a);\n  $b_bin\
    \ = str_split($b);\n  $result = '';\n  for ($i = 0; $i < count($a_bin); $i++)\
    \ {\n    $result .= $a_bin[$i] ^ $b_bin[$i];\n  }\n  return $result;\n}", "  \
    \  // First, ensure that the two strings are the same length.\n    $a_len = strlen($a);\n\
    \    $b_len = strlen($b);\n    if ($a_len !== $b_len) {\n        $min = min($a_len,\
    \ $b_len);\n        $max = max($a_len, $b_len);\n        $diff = $max - $min;\n\
    \        if ($a_len === $max) {\n            $a = str_pad($a, $max, '0', STR_PAD_LEFT);\n\
    \        } else {\n            $b = str_pad($b, $max, '0', STR_PAD_LEFT);\n  \
    \      }\n    }\n    // XOR the two strings.\n    $result = '';\n    for ($i =\
    \ 0; $i < strlen($a); $i++) {\n        $result .= $a[$i] ^ $b[$i];\n    }\n  \
    \  return $result;\n}", "\t$aLen = strlen($a);\n\t$bLen = strlen($b);\n\tif ($aLen\
    \ != $bLen) {\n\t\tthrow new Exception(\"Strings not of equal length\");\n\t}\n\
    \t$result = \"\";\n\tfor ($i = 0; $i < $aLen; $i++) {\n\t\t$aChr = substr($a,\
    \ $i, 1);\n\t\t$bChr = substr($b, $i, 1);\n\t\tif ($aChr == $bChr) {\n\t\t\t$result\
    \ .= \"0\";\n\t\t} else {\n\t\t\t$result .= \"1\";\n\t\t}\n\t}\n\treturn $result;\n\
    }\n", "\t$i = 0;\n\t$str = \"\";\n\twhile($i < strlen($a)) {\n\t\tif($a[$i] ==\
    \ $b[$i]) {\n\t\t\t$str .= \"0\";\n\t\t} else {\n\t\t\t$str .= \"1\";\n\t\t}\n\
    \t\t$i++;\n\t}\n\treturn $str;\n}\n\n$a = \"01001010101\";\n$b = \"010010101010\"\
    ;\necho string_xor($a, $b);", "  // your code\n}", "  $str_xor = '';\n  $len =\
    \ strlen($a);\n  for ($i = 0; $i < $len; $i++) {\n    $a_digit = substr($a, $i,\
    \ 1);\n    $b_digit = substr($b, $i, 1);\n    $xor_result = $a_digit ^ $b_digit;\n\
    \    $str_xor .= $xor_result;\n  }\n  return $str_xor;\n}", "  $strlen = strlen($a);\n\
    \  $result = \"\";\n  for ($i = 0; $i < $strlen; $i++) {\n    $result .= ((int)$a[$i]\
    \ ^ (int)$b[$i]);\n  }\n  return $result;\n}\n", "  $result = \"\";\n  for ($i\
    \ = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n  }\n  return\
    \ $result;\n}", "  if (strlen($a) !== strlen($b)) {\n    return \"\";\n  }\n \
    \ $length = strlen($a);\n  $result = \"\";\n  for ($i = 0; $i < $length; $i++)\
    \ {\n    $result .= $a[$i] ^ $b[$i];\n  }\n  return $result;\n}\n", "  $result\
    \ = \"\";\n  $number = strlen($a);\n  for ($i = 0; $i < $number; $i++) {\n   \
    \ if ($a[$i] == $b[$i]) {\n      $result .= \"0\";\n    } else {\n      $result\
    \ .= \"1\";\n    }\n  }\n  return $result;\n}\n\necho string_xor(\"010\", \"110\"\
    ) . \"\\n\";\necho string_xor(\"010\", \"000\") . \"\\n\";\necho string_xor(\"\
    111\", \"000\") . \"\\n\";", "  $strlen = strlen($a);\n  $c = \"\";\n  for ($i\
    \ = 0; $i < $strlen; $i++) {\n    $c .= ($a[$i] ^ $b[$i]) ? \"1\" : \"0\";\n \
    \ }\n  return $c;\n}\n", "    $str1 = $a;\n    $str2 = $b;\n    $bin_str1 = str_split($str1);\n\
    \    $bin_str2 = str_split($str2);\n    $result = [];\n    for ($i = 0; $i < strlen($str1);\
    \ $i++) {\n        if ($bin_str1[$i] == $bin_str2[$i]) {\n            $result[]\
    \ = '0';\n        } else {\n            $result[] = '1';\n        }\n    }\n \
    \   return implode('', $result);\n}\n", "    $a = str_split($a);\n    $b = str_split($b);\n\
    \    $r = [];\n    for ($i = 0; $i < count($a); $i++) {\n        $r[] = (int)$a[$i]\
    \ xor (int)$b[$i];\n    }\n    return implode($r);\n}", "  $xor = '';\n  for ($i\
    \ = 0; $i < strlen($a); $i++) {\n    $xor .= (intval($a[$i]) + intval($b[$i]))\
    \ % 2;\n  }\n  return $xor;\n}", "  $len = max(strlen($a), strlen($b));\n  $a\
    \ = str_pad($a, $len, \"0\", STR_PAD_LEFT);\n  $b = str_pad($b, $len, \"0\", STR_PAD_LEFT);\n\
    \  $result = '';\n  for ($i = 0; $i < $len; $i++) {\n    $result .= $a[$i] ===\
    \ $b[$i] ? \"0\" : \"1\";\n  }\n  return $result;\n}", "    $out = \"\";\n   \
    \ for($i = 0; $i < strlen($a); $i++) {\n        $out .= $a[$i] ^ $b[$i];\n   \
    \ }\n    return $out;\n}\n\n/*\n     * Decrypt the AES encrypted $encrypted with\
    \ $password\n     *\n     * Note that the initialization vector (iv) must be the\
    \ same as the one\n     * used to encrypt the data.\n     *\n     * @param string\
    \ $encrypted Hexadecimal encrypted data.\n     * @param string $password  The\
    \ plaintext password\n     * @param string $iv        Hexadecimal initialization\
    \ vector.\n     *\n     * @return string Decrypted data\n     */", "  return decbin(bindec($a)\
    \ ^ bindec($b));\n}", "  $out = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $out .= (int)$a[$i] ^ (int)$b[$i];\n  }\n  return $out;\n}\necho string_xor(\"\
    010\", \"110\");", "    $arr_a = str_split($a);\n    $arr_b = str_split($b);\n\
    \    $len = count($arr_a);\n    $result = [];\n    for ($i = 0; $i < $len; $i++)\
    \ {\n        $result[] = (int)$arr_a[$i] ^ (int)$arr_b[$i];\n    }\n    return\
    \ implode($result);\n}\n", "    return decbin(bindec($a) ^ bindec($b));\n}", " \
    \ $answer = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $answer .= (int)$a[$i]\
    \ ^ (int)$b[$i];\n  }\n  return $answer;\n}", "    $result = '';\n    for ($i\
    \ = 0; $i < strlen($a); $i++) {\n        $result .= $a[$i] != $b[$i] ? '1' : '0';\n\
    \    }\n    return $result;\n}\n", "  // Your code here\n}", "  return implode('',\
    \ array_map(function($i, $j) {\n    return $i ^ $j;\n  }, str_split($a), str_split($b)));\n\
    }\n", "  $result = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .=\
    \ intval($a[$i])^intval($b[$i]);\n  }\n  return $result;\n}", "\n}", "  // your\
    \ code here\n  return str_pad(decbin(bindec($a) ^ bindec($b)), strlen($a), '0',\
    \ STR_PAD_LEFT);\n}\n\nvar_dump(string_xor(\"010\", \"110\"));", "  $str = '';\n\
    \  $length = strlen($a);\n  for ($i = 0; $i < $length; $i++) {\n    $str .= $a[$i]\
    \ == $b[$i] ? 0 : 1;\n  }\n  return $str;\n}\n\necho string_xor(\"010\", \"110\"\
    );", "  $res = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $res .= $a[$i]\
    \ ^ $b[$i];\n  }\n  return $res;\n}\n\necho string_xor(\"010\", \"110\") . \"\\\
    n\";\necho string_xor(\"100\", \"100\") . \"\\n\";\necho string_xor(\"101\", \"\
    001\") . \"\\n\";\necho string_xor(\"101\", \"101\") . \"\\n\";", "\t$ar = str_split($a);\n\
    \t$br = str_split($b);\n\t$ret = '';\n\tfor ($i = 0; $i < count($ar); $i++) {\n\
    \t\t$ret .= ($ar[$i] == $br[$i]) ? '0' : '1';\n\t}\n\treturn $ret;\n}\n\n$fh =\
    \ fopen($argv[1], \"r\");\nwhile (!feof($fh)) {\n\t$val = fgets($fh);\n\tif ($val\
    \ != \"\") {\n\t\tlist($a, $b) = explode(' ', $val);\n\t\techo string_xor($a,\
    \ $b) . PHP_EOL;\n\t}\n}\nfclose($fh);", "    return implode(array_map(function($x,\
    \ $y) {\n        return $x ^ $y;\n    }, str_split($a), str_split($b)));\n}\n",
  "  $r = \"\";\n  for ($i = 0; $i < strlen($a); $i++) {\n    $r .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $r;\n}", "  \n}", "\t$xor = '';\n\t$a_arr = str_split($a);\n\t\
    $b_arr = str_split($b);\n\tfor ($i = 0; $i < count($a_arr); $i++) {\n\t\t$xor\
    \ .= $a_arr[$i] === $b_arr[$i] ? 0 : 1;\n\t}\n\treturn $xor;\n}\n", "    $result\
    \ = \"\";\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result .= (int)$a[$i]\
    \ ^ (int)$b[$i];\n    }\n    return $result;\n}\n", "  return (string) (\n   \
    \ (int) $a\n      ^ (int) $b\n  );\n}\n\necho string_xor(\"010\", \"110\");",
  "  $len = strlen($a);\n  $ret = \"\";\n  for ($i = 0; $i < $len; $i++) {\n    $ret\
    \ .= $a[$i] ^ $b[$i];\n  }\n  return $ret;\n}\n", "\t$c = '';\n\tfor ($i = 0;\
    \ $i < strlen($a); $i++) {\n\t\t$c .= $a[$i] ^ $b[$i];\n\t}\n\treturn $c;\n}",
  "  $result = '';\n  $max = max(strlen($a), strlen($b));\n  for ($i = 0; $i < $max;\
    \ $i++) {\n    $result .= ((int) $a[$i % strlen($a)] ^ (int) $b[$i % strlen($b)])\n\
    \        ? '1' : '0';\n  }\n  return $result;\n}", "  return implode(array_map(function($a,\
    \ $b) { return ($a != $b) ? \"1\" : \"0\"; }, str_split($a), str_split($b)));\n\
    }", "\treturn implode('', array_map(function($a, $b) { return $a ^ $b; }, str_split($a),\
    \ str_split($b)));\n}\n", "  return decbin(bindec($a) ^ bindec($b));\n}", "  $ret\
    \ = \"\";\n  for ($i = 0; $i < strlen($a); $i++) {\n    $ret .= (strval($a[$i])\
    \ != strval($b[$i])) ? \"1\" : \"0\";\n  }\n  return $ret;\n}\n", "  $result =\
    \ \"\";\n  $longer = strlen($a) >= strlen($b) ? $a : $b;\n  $short = strlen($a)\
    \ < strlen($b) ? $a : $b;\n  for ($i = 0; $i < strlen($longer); $i++) {\n    $result\
    \ .= $i < strlen($short) ? (($longer[$i] ^ $short[$i]) ? \"1\" : \"0\") : $longer[$i];\n\
    \  }\n  return $result;\n}\n", "    $result = '';\n    for ($i = 0; $i < strlen($a);\
    \ $i++) {\n        $result .= $a[$i] ^ $b[$i];\n    }\n    return $result;\n}\n\
    \nvar_dump(string_xor(\"010\", \"110\"));\n", "\t$result = array();\n\t$a = str_split($a);\n\
    \t$b = str_split($b);\n\tfor ($i = 0; $i < count($a); $i++) {\n\t\t$result[] =\
    \ $a[$i] ^ $b[$i];\n\t}\n\treturn implode($result);\n}\necho string_xor(\"010\"\
    , \"110\") . PHP_EOL;", "  $result = \"\";\n  for ($i = 0; $i < strlen($a); $i++)\
    \ {\n    $result .= $a[$i] ^ $b[$i];\n  }\n  return $result;\n}\n\n$string_xor_tests\
    \ = array(\n  array(\n    \"name\" => \"only true\",\n    \"a\" => \"1111\",\n\
    \    \"b\" => \"1111\",\n    \"expected\" => \"0000\"\n  ),\n  array(\n    \"\
    name\" => \"only false\",\n    \"a\" => \"0000\",\n    \"b\" => \"0000\",\n  \
    \  \"expected\" => \"0000\"\n  ),\n  array(\n    \"name\" => \"mixed\",\n    \"\
    a\" => \"1100\",\n    \"b\" => \"0011\",\n    \"expected\" => \"1111\"\n  ),\n\
    \  array(\n    \"name\" => \"mixed 2\",\n    \"a\" => \"0110\",\n    \"b\" =>\
    \ \"1001\",\n    \"expected\" => \"1101\"\n  ),\n  array(\n    \"name\" => \"\
    mixed 3\",\n    \"a\" => \"0110\",\n    \"b\" => \"1101\",\n    \"expected\" =>\
    \ \"1001\"\n  ),\n  array(\n    \"name\" => \"mixed 4\",\n    \"a\" => \"0110\"\
    ,\n    \"b\" => \"1111\",\n    \"expected\" => \"1001\"\n  ),\n  array(\n    \"\
    name\" => \"a is longer\",\n    \"a\" => \"1110\",\n    \"b\" => \"1111\",\n \
    \   \"expected\" => \"0001\"\n  ),\n  array(\n    \"name\" => \"b is longer\"\
    ,\n    \"a\" => \"1111\",\n    \"b\" => \"1110\",\n    \"expected\" => \"0001\"\
    \n  ),\n  array(\n    \"name\" => \"a and b are different lengths\",\n    \"a\"\
    \ => \"1111\",\n    \"b\" => \"11100\",\n    \"expected\" => \"00001\"\n  ),\n\
    );\n\nrun_tests($string_xor_tests, \"string_xor\");\n", "    $result = \"\";\n\
    \    for ($i = 0; $i < strlen($a); $i++) {\n        $result .= $a[$i] ^ $b[$i];\n\
    \    }\n    return $result;\n}\n", "  $result = '';\n  for ($i = 0; $i < strlen($a);\
    \ $i++) {\n    $result .= $a[$i] ^ $b[$i];\n  }\n  return $result;\n}", "  \n\
    }\n", "  $result = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .=\
    \ $a[$i] ^ $b[$i];\n  }\n  return $result;\n}\n", "  $result = '';\n  for ($i\
    \ = 0; $i < strlen($a); $i++) {\n    $result .= (int)$a[$i] ^ (int)$b[$i];\n \
    \ }\n  return $result;\n}\n", "  $result = \"\";\n  for ($i = 0; $i < strlen($a);\
    \ $i++) {\n    $result .= $a[$i] ^ $b[$i];\n  }\n  return $result;\n}\n\n$key\
    \ = \"100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100",
  "    $result = '';\n    $a = str_split($a);\n    $b = str_split($b);\n    for ($i\
    \ = 0; $i < count($a); $i++) {\n        $result .= ($a[$i] ^ $b[$i]);\n    }\n\
    \    return $result;\n}\n", "    $a_bin = toBinary($a);\n    $b_bin = toBinary($b);\n\
    \    $xor = $a_bin ^ $b_bin;\n    return toString($xor);\n}\n", "    $result =\
    \ '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result .= $a[$i] ^\
    \ $b[$i];\n    }\n    return $result;\n}\n", "    $result = '';\n    for ($i =\
    \ 0; $i < strlen($a); $i++) {\n        $result .= ($a[$i] == $b[$i]) ? '0' : '1';\n\
    \    }\n    return $result;\n}\n", "    $aBin = str_split($a);\n    $bBin = str_split($b);\n\
    \    $result = \"\";\n    foreach ($aBin as $key => $value) {\n        if ($value\
    \ == $bBin[$key]) {\n            $result .= \"0\";\n        } else {\n       \
    \     $result .= \"1\";\n        }\n    }\n    return $result;\n}\n", "  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= (int) $a[$i]\
    \ ^ (int) $b[$i];\n  }\n  return $result;\n}\n", "  $xorString = \"\";\n  for\
    \ ($i = 0; $i < strlen($a); $i++) {\n    $xorString .= ($a[$i] != $b[$i]) ? \"\
    1\" : \"0\";\n  }\n  return $xorString;\n}", "  $lena = strlen($a);\n  $lenb =\
    \ strlen($b);\n  $len = max($lena, $lenb);\n  $output = '';\n  for ($i = 0; $i\
    \ < $len; $i++) {\n    $a_bit = 0;\n    $b_bit = 0;\n    if ($i < $lena) {\n \
    \     $a_bit = $a[$lena - $i - 1];\n    }\n    if ($i < $lenb) {\n      $b_bit\
    \ = $b[$lenb - $i - 1];\n    }\n    $output = ($a_bit xor $b_bit) . $output;\n\
    \  }\n  return $output;\n}\n", "  $result = '';\n  $m = max(strlen($a), strlen($b));\n\
    \  for ($i = 0; $i < $m; $i++) {\n    $result .= $a[$i] ^ $b[$i];\n  }\n  return\
    \ $result;\n}\n", "  $a = str_split($a);\n  $b = str_split($b);\n  $out = [];\n\
    \  foreach ($a as $key => $value) {\n    if ($value === $b[$key]) {\n      $out[]\
    \ = 0;\n    } else {\n      $out[] = 1;\n    }\n  }\n  return implode($out);\n\
    }\n", "    $str_final = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n     \
    \   $str_final .= $a[$i] ^ $b[$i];\n    }\n    return $str_final;\n}\n\necho string_xor(\"\
    010\", \"110\") . PHP_EOL;", "  $aBin = bindec($a);\n  $bBin = bindec($b);\n \
    \ $answer = decbin($aBin ^ $bBin);\n  return $answer;\n}\n", "    $a = str_split($a);\n\
    \    $b = str_split($b);\n    $res = [];\n    for ($i = 0; $i < count($a); $i++)\
    \ {\n        if ($a[$i] == $b[$i]) {\n            $res[] = '0';\n        } else\
    \ {\n            $res[] = '1';\n        }\n    }\n    return implode('', $res);\n\
    }", "  // convert strings to arrays\n  $a = str_split($a);\n  $b = str_split($b);\n\
    \  // check if the two arrays are of the same length\n  if (count($a) !== count($b))\
    \ {\n    trigger_error('String length must be equal', E_USER_WARNING);\n    return\
    \ false;\n  }\n  $result = [];\n  // iterate through the arrays\n  for ($i = 0;\
    \ $i < count($a); $i++) {\n    // if they match, write 0 to $result\n    if ($a[$i]\
    \ == $b[$i]) {\n      $result[$i] = 0;\n    }\n    // if they don't match, write\
    \ 1 to $result\n    else {\n      $result[$i] = 1;\n    }\n  }\n  // convert $result\
    \ back to string and return it\n  return implode($result);\n}\n", "    $output\
    \ = \"\";\n    $len_a = strlen($a);\n    $len_b = strlen($b);\n    if ($len_a\
    \ !== $len_b) {\n        throw new Exception(\"Strings are not equal lengths!\"\
    );\n    }\n    for ($i = 0; $i < $len_a; $i++) {\n        $char_a = $a[$i];\n\
    \        $char_b = $b[$i];\n        if ($char_a === $char_b) {\n            $output\
    \ .= \"0\";\n        } else {\n            $output .= \"1\";\n        }\n    }\n\
    \    return $output;\n}", "    $res = \"\";\n    for ($i = 0; $i < strlen($a);\
    \ $i++) {\n        $a_bit = $a[$i];\n        $b_bit = $b[$i];\n        $res .=\
    \ ($a_bit != $b_bit) ? \"1\" : \"0\";\n    }\n    return $res;\n}", "\t$xor =\
    \ '';\n\t$l = strlen($a);\n\tfor ($i = 0; $i < $l; $i++) {\n\t\t$xor .= $a[$i]\
    \ ^ $b[$i];\n\t}\n\treturn $xor;\n}\n", "  $result = \"\";\n  for ($i = 0; $i\
    \ < strlen($a); $i++) {\n    $a_char = substr($a, $i, 1);\n    $b_char = substr($b,\
    \ $i, 1);\n    if ($a_char == $b_char) {\n      $result .= \"0\";\n    } else\
    \ {\n      $result .= \"1\";\n    }\n  }\n  return $result;\n}", "  $result =\
    \ '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\necho \"string_xor(010, 110) = \" . string_xor(\"010\"\
    , \"110\") . \"\\n\";\necho \"string_xor(101, 010) = \" . string_xor(\"101\",\
    \ \"010\") . \"\\n\";\necho \"string_xor(000, 111) = \" . string_xor(\"000\",\
    \ \"111\") . \"\\n\";\necho \"string_xor(111, 000) = \" . string_xor(\"111\",\
    \ \"000\") . \"\\n\";", "  $res = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $res .= $a[$i] ^ $b[$i];\n  }\n  return $res;\n}\n\n$fptr = fopen(getenv(\"\
    OUTPUT_PATH\"), \"w\");\n\n$__fp = fopen(\"php://stdin\", \"r\");\n\nfscanf($__fp,\
    \ \"%d\", $testCases);\n\nfor ($testCasesItr = 0; $testCasesItr < $testCases;\
    \ $testCasesItr++) {\n    fscanf($__fp, \"%[^\\n]\", $a);\n\n    fscanf($__fp,\
    \ \"%[^\\n]\", $b);\n\n    $result = string_xor($a, $b);\n\n    fwrite($fptr,\
    \ $result . \"\\n\");\n}\n\nfclose($__fp);\nfclose($fptr);", "  $xor = function($a,\
    \ $b) {\n    return $a xor $b;\n  };\n  $xor_string = function($a, $b) use ($xor)\
    \ {\n    return array_map($xor, str_split($a), str_split($b));\n  };\n  return\
    \ implode(\"\", array_map(\"intval\", $xor_string($a, $b)));\n}\n", "    $result\
    \ = array();\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result[] = $a[$i]\
    \ == $b[$i] ? 0 : 1;\n    }\n    return implode('', $result);\n}", "  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n", "    $len = strlen($a);\n    $bin = '';\n    for\
    \ ($i = 0; $i < $len; $i++) {\n        $bin .= ($a[$i] xor $b[$i]) ? '1' : '0';\n\
    \    }\n    return $bin;\n}\n", "    // your code\n}", "  // Split the strings\
    \ into an array of 1's and 0's\n  $a = str_split($a);\n  $b = str_split($b);\n\
    \  // Initialize the result\n  $res = [];\n  for ($i = 0; $i < count($a); $i++)\
    \ {\n    // XOR each of the digits. If they're the same, 0^0=0 and 1^1=0.\n  \
    \  // If they're different, 0^1=1 and 1^0=1.\n    $res[$i] = $a[$i] ^ $b[$i];\n\
    \  }\n  // Put our result back into a string and return it\n  return implode($res);\n\
    }\n", "    // Your code here!\n    $aBin = str_split($a);\n    $bBin = str_split($b);\n\
    \    $cBin = [];\n    for ($i = 0; $i < sizeof($aBin); $i++) {\n        if ($aBin[$i]\
    \ == $bBin[$i]) {\n            $cBin[$i] = 0;\n        } else {\n            $cBin[$i]\
    \ = 1;\n        }\n    }\n    return implode($cBin);\n}", "  $out = '';\n  for\
    \ ($i = 0; $i < strlen($a); $i++) {\n    $out .= $a[$i] ^ $b[$i];\n  }\n  return\
    \ $out;\n}\n", "\t//invalid input\n\tif(!is_string($a) || !is_string($b))\n\t\t\
    return false;\n\t\n\t//inputs are not of equal length\n\tif(strlen($a) != strlen($b))\n\
    \t\treturn false;\n\t\n\t//compute the xor\n\t$c = '';\n\tfor($i = 0; $i < strlen($a);\
    \ $i++)\n\t\t$c .= ($a[$i] ^ $b[$i]);\n\treturn $c;\n}\n\necho string_xor(\"010\"\
    , \"110\");\necho string_xor(\"0\", \"0\");\necho string_xor(\"1\", \"0\");\n\
    echo string_xor(\"0\", \"1\");\necho string_xor(\"1\", \"1\");", "    $xor = array();\n\
    \    for ($i = 0; $i < strlen($a); $i++) {\n        $xor[] = ((int)$a[$i] ^ (int)$b[$i]);\n\
    \    }\n    return implode('', $xor);\n}\n\nvar_dump(string_xor(\"010\", \"110\"\
    ));", "  $r = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $r .= $a[$i] ^\
    \ $b[$i];\n  }\n  return $r;\n}", "  // Your code here\n}", "  $a = str_split($a);\n\
    \  $b = str_split($b);\n  $res = [];\n  for ($i = 0; $i < count($a); $i++) {\n\
    \    $res[] = $a[$i] ^ $b[$i];\n  }\n  return implode($res);\n}\n\necho string_xor(\"\
    010\", \"110\") . \"\\n\";\n", "  $result = \"\";\n  for ($i = 0; $i < strlen($a);\
    \ $i++) {\n    $result .= ($a[$i] ^ $b[$i]);\n  }\n  return $result;\n}", "  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++){\n    $result = $result.(int)($a[$i]\
    \ != $b[$i]);\n  }\n  return $result;\n}", "  $len = strlen($a);\n  $result =\
    \ '';\n  for ($i = 0; $i < $len; $i++) {\n    $result .= ($a[$i] == $b[$i]) ?\
    \ '0' : '1';\n  }\n  return $result;\n}\necho string_xor(\"010\", \"110\");\n\
    echo \"<br>\";\necho string_xor(\"111\", \"000\");", "   $result = \"\";\n   for($i=0;\
    \ $i<strlen($a); $i++) {\n     $result .= (int)$a[$i] ^ (int)$b[$i];\n   }\n \
    \  return $result;\n}", "    $a = str_split($a);\n    $b = str_split($b);\n  \
    \  $result = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result .=\
    \ ($a[$i] + $b[$i]) % 2;\n    }\n    return $result;\n}\n", "  $result = \"\"\
    ;\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= (int) $a[$i] ^ (int)\
    \ $b[$i];\n  }\n  return $result;\n}", "\t$xor = \"\";\n\tfor ($i = 0; $i < strlen($a);\
    \ $i++) {\n\t\t$xor .= (intval($a[$i]) != intval($b[$i])) ? \"1\" : \"0\";\n\t\
    }\n\treturn $xor;\n}", "  $ans = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $ans .= $a[$i] ^ $b[$i];\n  }\n  return $ans;\n}", "  // Your code here\n\
    }\n", "\t$r = '';\n\tfor ($i = 0; $i < strlen($a); $i++) {\n\t\t$r .= $a[$i] ^\
    \ $b[$i];\n\t}\n\treturn $r;\n}\n", "   $result = \"\";\n\n   for ($i = 0; $i\
    \ < strlen($a); $i++) {\n      $result .= $a[$i] ^ $b[$i];\n   }\n\n   return\
    \ $result;\n}\n", "    $xor = [];\n    for ($i = 0; $i < strlen($a); $i++) {\n\
    \        $xor[] = ((int)$a[$i] xor (int)$b[$i]);\n    }\n    return implode('',\
    \ $xor);\n}", "    $a = str_split($a);\n    $b = str_split($b);\n    $string =\
    \ '';\n    foreach ($a as $i => $char) {\n        $string .= $char == $b[$i] ?\
    \ '0' : '1';\n    }\n    return $string;\n}\n\n/*", "  $ans = \"\";\n  for ($i\
    \ = 0; $i < strlen($a); $i++) {\n    $ans .= ($a[$i] == $b[$i]) ? \"0\" : \"1\"\
    ;\n  }\n  return $ans;\n}\n", "    $a = str_split($a);\n    $b = str_split($b);\n\
    \    $str = \"\";\n    for ($i = 0; $i < count($a); $i++) {\n        if ($a[$i]\
    \ != $b[$i]) {\n            $str .= \"1\";\n        } else {\n            $str\
    \ .= \"0\";\n        }\n    }\n    return $str;\n}\n", "    $count = max(strlen($a),\
    \ strlen($b));\n    $result = '';\n    for ($i = 0; $i < $count; $i++) {\n   \
    \     $result .= $a[$i] != $b[$i] ? '1' : '0';\n    }\n    return $result;\n}\n",
  "  $aLen = strlen($a);\n  $bLen = strlen($b);\n  $result = \"\";\n  $aIndex = 0;\n\
    \  $bIndex = 0;\n  while($aIndex < $aLen || $bIndex < $bLen) {\n    if($aIndex\
    \ < $aLen && $bIndex < $bLen) {\n      $result .= $a[$aIndex] ^ $b[$bIndex];\n\
    \      $aIndex++;\n      $bIndex++;\n    } else if($aIndex < $aLen) {\n      $result\
    \ .= $a[$aIndex];\n      $aIndex++;\n    } else {\n      $result .= $b[$bIndex];\n\
    \      $bIndex++;\n    }\n  }\n  return $result;\n}\n", "    $c = \"\";\n    for\
    \ ($i = 0; $i < strlen($a); $i++) {\n        $c .= ($a[$i] == $b[$i]) ? '0' :\
    \ '1';\n    }\n    return $c;\n}\necho string_xor(\"01\", \"11\");\necho string_xor(\"\
    01\", \"10\");\necho string_xor(\"00\", \"10\");", "  $res = \"\";\n  for ($i\
    \ = 0; $i < strlen($a); $i++) {\n    $res .= $a[$i] == $b[$i] ? \"0\" : \"1\"\
    ;\n  }\n  return $res;\n}\n", "    $r = \"\";\n    for ($i = 0; $i < strlen($a);\
    \ $i++) {\n        $r .= ((int)$a[$i] ^ (int)$b[$i]) ? \"1\" : \"0\";\n    }\n\
    \    return $r;\n}\n", "  $output = '';\n  for ($i = 0; $i < strlen($a); $i++)\
    \ {\n    $output .= (intval($a[$i]) ^ intval($b[$i])) ? '1' : '0';\n  }\n  return\
    \ $output;\n}\n\necho string_xor(\"010\", \"110\");\necho \"\\n\";\n", "    //\
    \ Your code here\n}\n", "  // Your code here!\n}", "  $result = \"\";\n  for ($i\
    \ = 0; $i < strlen($a); $i++) {\n    $result .= ((int)$a[$i] ^ (int)$b[$i]);\n\
    \  }\n  return $result;\n}\n", "    $c = \"\";\n    for ($i = 0; $i < strlen($a);\
    \ $i++) {\n        $c .= ($a[$i] ^ $b[$i]);\n    }\n    return $c;\n}", "    $str\
    \ = \"\";\n    for ($i = 0; $i < strlen($a); $i++) {\n        $str .= $a[$i] ^\
    \ $b[$i];\n    }\n    return $str;\n}", "\t$result = '';\n\tfor ($i = 0; $i <\
    \ strlen($a); $i++) {\n\t\t$result .= ($a[$i] ^ $b[$i]) ? \"1\" : \"0\";\n\t}\n\
    \treturn $result;\n}\n\necho string_xor(\"010\", \"110\");", "\t$result = '';\n\
    \tfor ($i = 0; $i < strlen($a); $i++) {\n\t\t$result .= $a[$i] == $b[$i] ? '0'\
    \ : '1';\n\t}\n\treturn $result;\n}\n", "    $str1 = str_split($a);\n    $str2\
    \ = str_split($b);\n    $res = '';\n    for ($i = 0; $i < count($str1); $i++)\
    \ {\n        if ($str1[$i] == $str2[$i]) {\n            $res .= '0';\n       \
    \ } else {\n            $res .= '1';\n        }\n    }\n    return $res;\n}",
  "    $r = [];\n    $c = '';\n    $la = strlen($a);\n    $lb = strlen($b);\n    $l\
    \ = max($la, $lb);\n    for ($i = 0; $i < $l; $i++) {\n        $r[] = ($a[$la\
    \ - $i - 1] xor $b[$lb - $i - 1]) ? '1' : '0';\n    }\n    while (strlen($c) !=\
    \ $l) {\n        $c .= array_pop($r);\n    }\n    return $c;\n}\n\necho string_xor(\"\
    010\", \"110\");", "  return decbin(bindec($a) ^ bindec($b));\n}", "    // Split\
    \ the strings into arrays of 8-bit binary numbers\n    $a = str_split(str_pad(base_convert($a,\
    \ 2, 10), strlen($a) + strlen($a) % 8, '0', STR_PAD_LEFT), 8);\n    $b = str_split(str_pad(base_convert($b,\
    \ 2, 10), strlen($b) + strlen($b) % 8, '0', STR_PAD_LEFT), 8);\n    // Convert\
    \ the arrays into decimal numbers\n    $a = array_map('base_convert', $a, array_fill(0,\
    \ count($a), 10), array_fill(0, count($a), 2));\n    $b = array_map('base_convert',\
    \ $b, array_fill(0, count($b), 10), array_fill(0, count($b), 2));\n    // XOR\
    \ the arrays and convert back to binary\n    $c = array_map('base_convert', array_map('^',\
    \ $a, $b), array_fill(0, count($a), 2), array_fill(0, count($a), 10));\n    //\
    \ Convert the array of decimal numbers back into binary\n    return implode('',\
    \ $c);\n}\n\nprint_r(string_xor(\"010\", \"110\"));", "  $result = \"\";\n  for\
    \ ($i = 0; $i < strlen($a); $i++) {\n    $result .= intval($a[$i]) ^ intval($b[$i]);\n\
    \  }\n  return $result;\n}\n\n$test_input = array(\n  array(\"010\", \"110\"),\n\
    \  array(\"0\", \"0\"),\n  array(\"00\", \"11\"),\n  array(\"000\", \"111\"),\n\
    \  array(\"00110\", \"01001\"),\n  array(\"0\", \"1\"),\n  array(\"10\", \"11\"\
    ),\n  array(\"101\", \"010\"),\n  array(\"000\", \"001\"),\n  array(\"10101\"\
    , \"01010\"),\n  array(\"001001101010010011101100111010110010010011100100100100\"\
    , \"111110010010010011000100110101001110010010010010010011\"),\n  array(\"11010001110101010111110101000011010111010101001001101\"\
    , \"110101110101000111111010111010101110010101010101011110\"),\n  array(\"111011010101001010101101101110110100100011011010101101\"\
    , \"0110111101011011011010011010010110111101101001001001100\"),\n  array(\"001000001100100100100111001000111111001001110010010011\"\
    , \"1101110111010111010100011101011101110101110101111101110\"),\n  array(\"110101010001000110101110100110111010101010011010111010\"\
    , \"1011010101101101010100101010110110101101011010101010010\"),\n  array(\"000010110101011110101011110101011011010111011101010110\"\
    , \"1110111010111010101010101011101010101010101010101110010\"),\n  array(\"000110010010010011100100100100100100100100100100100100\"\
    , \"1111111111111111111111111111111111111111111111111111111\"),\n ", "  $a = str_split($a);\n\
    \  $b = str_split($b);\n  $result = [];\n  for ($i = 0; $i < strlen($a); $i++)\
    \ {\n    if ($a[$i] == $b[$i]) {\n      $result[] = 0;\n    } else {\n      $result[]\
    \ = 1;\n    }\n  }\n  return implode($result);\n}", "  $ret = \"\";\n  $len =\
    \ max(strlen($a), strlen($b));\n  for ($i = 0; $i < $len; $i++) {\n    $ret .=\
    \ ($a[$i] ^ $b[$i]) ? \"1\" : \"0\";\n  }\n  return $ret;\n}\n", "    $res = \"\
    \";\n    for ($i = 0; $i < strlen($a); $i++) {\n        $res .= $a[$i] ^ $b[$i];\n\
    \    }\n    return $res;\n}\n", "    $out = \"\";\n    for($i = 0; $i < strlen($a);\
    \ $i++) {\n        $out .= ($a[$i] ^ $b[$i]);\n    }\n    return $out;\n}\n",
  "  if (strlen($a) !== strlen($b))\n    return \"00\";\n  $result = \"\";\n  for\
    \ ($i = 0; $i < strlen($a); $i++) {\n    $result .= (string)($a[$i] ^ $b[$i]);\n\
    \  }\n  return $result;\n}\n", "  return array_reduce(range(0, strlen($a) - 1),\
    \ function($carry, $i) use ($a, $b) {\n    $carry .= ($a[$i] ^ $b[$i]) ? \"1\"\
    \ : \"0\";\n    return $carry;\n  }, \"\");\n}\n", "  $c = \"\";\n  for ($i =\
    \ 0; $i < strlen($a); $i++) {\n    $c .= $a[$i] ^ $b[$i];\n  }\n  return $c;\n\
    }\n", "\t$lena = strlen($a);\n\t$lenb = strlen($b);\n\t$len = $lena > $lenb ?\
    \ $lena : $lenb;\n\t$xor = [];\n\tfor ($i = 0; $i < $len; $i++) {\n\t\t$ai = strlen($a)\
    \ - $i - 1;\n\t\t$bi = strlen($b) - $i - 1;\n\t\t$xor[] = isset($a[$ai]) && $a[$ai]\
    \ === '1'\n\t\t\t^ isset($b[$bi]) && $b[$bi] === '1'\n\t\t\t? '1' : '0';\n\t}\n\
    \treturn implode(array_reverse($xor));\n}\n", "  return array_reduce(str_split($a),\
    \ function($r, $a) use ($b) {\n    $r .= $a ^ $b[strlen($r)];\n    return $r;\n\
    \  }, '');\n}", "  $a = trim($a);\n  $b = trim($b);\n  if(strlen($a) > strlen($b))\
    \ {\n    $longStr = $a;\n    $shortStr = $b;\n  } else {\n    $longStr = $b;\n\
    \    $shortStr = $a;\n  }\n  $longStrLen = strlen($longStr);\n  $shortStrLen =\
    \ strlen($shortStr);\n  $diffLen = $longStrLen - $shortStrLen;\n  $shortStr =\
    \ str_pad($shortStr, $longStrLen, '0', STR_PAD_LEFT);\n  $result = '';\n  for($i\
    \ = 0; $i < $longStrLen; $i++) {\n    if($longStr[$i] == $shortStr[$i]) {\n  \
    \    $result .= '0';\n    } else {\n      $result .= '1';\n    }\n  }\n  return\
    \ $result;\n}", "  return join(\"\", array_map(function($x, $y) { return ($x==$y)\
    \ ? 0 : 1; }, str_split($a), str_split($b)));\n}\n", "    $a = str_split($a);\n\
    \    $b = str_split($b);\n    $result = [];\n    foreach ($a as $key => $value)\
    \ {\n        if ($value == $b[$key]) {\n            $result[] = '0';\n       \
    \ } else {\n            $result[] = '1';\n        }\n    }\n    return implode($result);\n\
    }\n\nprint string_xor(\"010\", \"110\");", "  $result = \"\";\n  for ($i = 0;\
    \ $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n  }\n  return $result;\n\
    }", "  $result = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .=\
    \ $a[$i] == $b[$i] ? '0' : '1';\n  }\n  return $result;\n}\n", "    $aBits = str_split($a);\n\
    \    $bBits = str_split($b);\n    $xorBits = [];\n    for ($i = 0; $i < count($aBits);\
    \ $i++) {\n        $xorBits[] = $aBits[$i] == $bBits[$i] ? '0' : '1';\n    }\n\
    \    return implode($xorBits);\n}\n", "  $result = \"\";\n  for ($i = 0; $i <\
    \ strlen($a); $i++) {\n    $a_char = substr($a, $i, 1);\n    $b_char = substr($b,\
    \ $i, 1);\n    if ($a_char != $b_char) {\n      $result .= \"1\";\n    } else\
    \ {\n      $result .= \"0\";\n    }\n  }\n  return $result;\n}\n", "    $xor =\
    \ array();\n    for ($i = 0; $i < strlen($a); $i++) {\n        $xor[] = ($a[$i]\
    \ != $b[$i]) ? 1 : 0;\n    }\n    return implode('', $xor);\n}\n$result = string_xor(\"\
    010\", \"110\");\nprint($result);", "  $r = \"\";\n  for ($i = 0; $i < strlen($a);\
    \ $i++) {\n    $r .= $a[$i] ^ $b[$i];\n  }\n  return $r;\n}\n", "    return array_reduce(str_split($a),\
    \ function($x, $y) use ($b) {\n        return ($x ^ $b[0] ^ $y);\n    });\n}",
  "\n}\n", "  $result = \"\";\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result\
    \ .= ((int)$a[$i] ^ (int)$b[$i]);\n  }\n  return $result;\n}", "\t$result = \"\
    \";\n\tfor ($i = 0; $i < strlen($a); $i++) {\n\t\t$result .= intval($a[$i]) ^\
    \ intval($b[$i]);\n\t}\n\treturn $result;\n}", "    $arr1 = str_split($a);\n \
    \   $arr2 = str_split($b);\n    $output = \"\";\n    for ($i = 0; $i < sizeof($arr1);\
    \ $i++) {\n        if ($arr1[$i] == $arr2[$i]) {\n            $output .= \"0\"\
    ;\n        } else {\n            $output .= \"1\";\n        }\n    }\n    return\
    \ $output;\n}\n", "  $c = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $c\
    \ .= ($a[$i] xor $b[$i]) ? '1' : '0';\n  }\n  return $c;\n}\n", "    $xor = '';\n\
    \    for ($i = 0; $i < strlen($a); $i++) {\n        $xor .= $a[$i] === $b[$i]\
    \ ? '0' : '1';\n    }\n    return $xor;\n}\n", "  $a = str_split($a);\n  $b =\
    \ str_split($b);\n  $res = [];\n  for ($i = 0; $i < count($a); $i++) {\n    if\
    \ ($a[$i] == $b[$i]) {\n      $res[] = 0;\n    } else {\n      $res[] = 1;\n \
    \   }\n  }\n  return implode('', $res);\n}\n\necho string_xor(\"010\", \"110\"\
    );", "\t$a = str_split($a);\n\t$b = str_split($b);\n\tforeach ($a as $i => $val)\
    \ {\n\t\tif ($a[$i] == $b[$i]) {\n\t\t\t$a[$i] = 0;\n\t\t} else {\n\t\t\t$a[$i]\
    \ = 1;\n\t\t}\n\t}\n\treturn implode($a);\n}", "\t$aBits = str_split($a);\n\t\
    $bBits = str_split($b);\n\t$results = [];\n\tforeach ($aBits as $index => $bit)\
    \ {\n\t\t$results[] = (int)$bit ^ (int)$bBits[$index];\n\t}\n\treturn implode($results);\n\
    }\n", "  $a = str_split($a);\n  $b = str_split($b);\n  $x = \"\";\n  for ($i =\
    \ 0; $i < count($a); $i++) {\n    $x .= $a[$i]^$b[$i];\n  }\n  return $x;\n}",
  "    $a_bits = str_split($a);\n    $b_bits = str_split($b);\n    if (count($a_bits)\
    \ != count($b_bits)) {\n        throw new Exception(\"String lengths are not equal\"\
    );\n    }\n    $result = \"\";\n    for ($i = 0; $i < count($a_bits); $i++) {\n\
    \        $result .= $a_bits[$i] ^ $b_bits[$i];\n    }\n    return $result;\n}\n",
  "  // your code\n}\n```\n", "    // Your code here.\n    $res='';\n    for($i=0;$i<strlen($a);$i++){\n\
    \        if($a[$i]==$b[$i])\n            $res.='0';\n        else\n          \
    \  $res.='1';\n    }\n    return $res;\n}\n\n/**\n * TEST\n */\nassert_options(ASSERT_EXCEPTION,\
    \ 1);\nassert(string_xor(\"010\", \"110\") == \"100\");\nassert(string_xor(\"\
    1010\", \"101\") == \"1111\");\n\n$a = 0b0101;\n$b = 0b0100;\n$c = 0b0011;\n\n\
    assert(string_xor($a, $b) == $c);\n\necho 'Success';", "    $r = \"\";\n    for\
    \ ($i = 0; $i < strlen($a); $i++) {\n        $r .= ($a[$i] == $b[$i]) ? '0' :\
    \ '1';\n    }\n    return $r;\n}", "\t$result = \"\";\n\tfor ($i = 0; $i < strlen($a);\
    \ $i++) {\n\t\t$result .= $a[$i] == $b[$i] ? \"0\" : \"1\";\n\t}\n\treturn $result;\n\
    }\n\necho string_xor(\"010\", \"110\") . \"\\n\";", "  $output='';\n  for($i=0;$i<strlen($a);$i++){\n\
    \    $output.=(int)$a[$i]^(int)$b[$i];\n  }\n  return $output;\n}", "    $length\
    \ = max(strlen($a), strlen($b));\n    $result = '';\n    for ($i = 0; $i < $length;\
    \ $i++) {\n        $result .= $a[$i] == $b[$i] ? '0' : '1';\n    }\n    return\
    \ $result;\n}\n\necho string_xor(\"010\", \"110\");\necho \"<br />\";\n", "  $output\
    \ = \"\";\n  for ($i = 0; $i < strlen($a); $i++) {\n    $output .= ((int)$a[$i]\
    \ ^ (int)$b[$i]);\n  }\n  return $output;\n}\n\n$a = \"010\";\n$b = \"110\";\n\
    echo string_xor($a, $b);", "  $a = str_split($a);\n  $b = str_split($b);\n  $result\
    \ = [];\n  for ($i = 0; $i < count($a); $i++) {\n    if ($a[$i] === $b[$i]) {\n\
    \      $result[] = 0;\n    } else {\n      $result[] = 1;\n    }\n  }\n  return\
    \ implode('', $result);\n}\n", "  $ret = \"\";\n  for ($i = 0; $i < strlen($a);\
    \ $i++) {\n    $ret .= (($a[$i]==\"1\") xor ($b[$i]==\"1\")) ? \"1\" : \"0\";\n\
    \  }\n  return $ret;\n}", "    // Your code here\n    //$a = str_split($a);\n\
    \    //$b = str_split($b);\n    //$res = \"\";\n    //for($i = 0; $i < count($a);\
    \ $i++){\n    //    $res .= $a[$i] ^ $b[$i];\n    //}\n    //return $res;\n  \
    \  \n    $a = str_split($a);\n    $b = str_split($b);\n    $res = \"\";\n    foreach\
    \ ($a as $key => $value) {\n        $res .= $value ^ $b[$key];\n    }\n    return\
    \ $res;\n}\n\necho string_xor(\"010\", \"110\") . \"\\n\";\necho string_xor(\"\
    111\", \"010\") . \"\\n\";\necho string_xor(\"1010\", \"1111\") . \"\\n\";\necho\
    \ string_xor(\"1111\", \"1010\") . \"\\n\";\necho string_xor(\"001011011010101101101010111111\"\
    , \"101011011010101101101010111111\") . \"\\n\";\necho string_xor(\"001011011010101101101010111111\"\
    , \"111111111111111111111111110111\") . \"\\n\";\necho string_xor(\"001011011010101101101010111111\"\
    , \"01011011010101101101010111111\") . \"\\n\";\necho string_xor(\"001011011010101101101010111111\"\
    , \"001011011010101101101010111111\") . \"\\n\";\necho string_xor(\"001011011010101101101010111111\"\
    , \"101011011010101101101010111111\") . \"\\n\";\necho string_xor(\"001011011010101101101010111111\"\
    , \"001011011010101101101010111111\") . \"\\n\";\n", "  // Your code here\n}",
  "    return strtr(bin2hex($a ^ $b), '0123456789abcdef', '0123456789');\n}\n", " \
    \ $result = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i]\
    \ ^ $b[$i];\n  }\n  return $result;\n}\necho string_xor(\"010\", \"110\");\n",
  "    $a = str_split($a);\n    $b = str_split($b);\n    $result = [];\n    for ($i\
    \ = 0; $i < count($a); $i++) {\n        $result[] = $a[$i] ^ $b[$i];\n    }\n\
    \    return implode('', $result);\n}\n", "    $out = '';\n    for ($i = 0; $i\
    \ < strlen($a); $i++) {\n        $out .= ($a[$i] ^ $b[$i]);\n    }\n    return\
    \ $out;\n}\n\n$tests = array(\n    \"string_xor('010', '110')\" => '100',\n  \
    \  \"string_xor('1010', '1011')\" => '0001',\n    \"string_xor('00111010010101',\
    \ '11110110111010')\" => '11000100110001',\n    \"string_xor('00111010010101',\
    \ '11110110111010')\" => '11000100110001',\n    \"string_xor('10', '111')\" =>\
    \ '\"Equal length strings expected\"',\n    \"string_xor('', '111')\" => '\"Equal\
    \ length strings expected\"',\n    \"string_xor('10', '')\" => '\"Equal length\
    \ strings expected\"',\n    \"string_xor('0010101', '0101010')\" => '\"0111111\"\
    ',\n    \"string_xor('00101010100110', '01010101010010')\" => '\"01111110000100\"\
    ',\n    \"string_xor('0000000111111111', '111111100100100100100')\" => '\"111111101101101101101\"\
    ',\n    \"string_xor('1010101010101', '0101010101010')\" => '\"1111111111111\"\
    ',\n    \"string_xor('00101010100110', '01010101010010')\" => '\"01111110000100\"\
    ',\n    \"string_xor('0000000111111111', '111111100100100100100')\" => '\"111111101101101101101\"\
    ',\n    \"string_xor('1010101010101', '0101010101010')\" => '\"1111111111111\"\
    ',\n    \"string_xor('10', '10')\" => '\"0\"',\n    \"string_xor('10', '11')\"\
    \ => '\"1\"',\n    \"string_xor('111", "    $length=strlen($a);\n    $result='';\n\
    \    for($i=0;$i<$length;$i++){\n        $result.=($a[$i]^$b[$i]);\n    }\n  \
    \  return $result;\n}", "    $output = \"\";\n    if(strlen($a) == strlen($b)){\n\
    \        for($i = 0; $i < strlen($a); $i++){\n            if($a[$i] == $b[$i]){\n\
    \                $output .= \"0\";\n            } else {\n                $output\
    \ .= \"1\";\n            }\n        }\n    }\n    return $output;\n}\n", "   \
    \ $xor = \"\";\n    for ($i = 0; $i < strlen($a); $i++) {\n        $xor .= $a[$i]\
    \ ^ $b[$i];\n    }\n    return $xor;\n}", "    $output = '';\n    $a_len = strlen($a);\n\
    \    $b_len = strlen($b);\n    if ($a_len == $b_len) {\n        for ($i = 0; $i\
    \ < $a_len; $i++) {\n            $output .= $a[$i] ^ $b[$i];\n        }\n    }\n\
    \    return $output;\n}\n", "    $str = \"\";\n    for ($i = 0; $i < strlen($a);\
    \ $i++) {\n        $str .= $a[$i] == $b[$i] ? \"0\" : \"1\";\n    }\n    return\
    \ $str;\n}\n", "  $result = \"\";\n  $binary = array(\"0\",\"1\");\n  for ($i=0;\
    \ $i<strlen($a); $i++) {\n    $result .= in_array($a[$i], $binary) && in_array($b[$i],\
    \ $binary) && $a[$i] == $b[$i] ? \"0\" : \"1\";\n  }\n  return $result;\n}", "\t\
    $result = '';\n\t$len = max(strlen($a), strlen($b));\n\tfor ($i = 0; $i < $len;\
    \ $i++) {\n\t\t$v1 = $i < strlen($a) ? (int) $a[$i] : 0;\n\t\t$v2 = $i < strlen($b)\
    \ ? (int) $b[$i] : 0;\n\t\t$result .= (int) ($v1 xor $v2);\n\t}\n\treturn $result;\n\
    }\n\nprint string_xor(\"010\", \"110\") . \"\\n\";", "    $out = '';\n    for\
    \ ($i = 0; $i < strlen($a); $i++) {\n        $out .= $a[$i] ^ $b[$i];\n    }\n\
    \    return $out;\n}"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
