language: php
name: HumanEval_49_modp
results:
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\t$s = 1;\n\
    \t$e = $n;\n\twhile ($e != 0) {\n\t\tif (($e & 1) == 1) {\n\t\t\t$s = ($s * $n)\
    \ % $p;\n\t\t}\n\t\t$n = ($n * $n) % $p;\n\t\t$e = $e >> 1;\n\t}\n\treturn $s;\n\
    }\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5i285ns9.php:31\n\
    Stack trace:\n#0 /tmp/tmp5i285ns9.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp5i285ns9.php\
    \ on line 31\n"
  timestamp: 1659824326
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\t$mod = 1;\n\
    \t$a = 2;\n\twhile ($n > 0) {\n\t\tif ($n % 2 == 1)\n\t\t\t$mod = ($mod * $a)\
    \ % $p;\n\t\t$n = (int)($n / 2);\n\t\t$a = ($a * $a) % $p;\n\t}\n\treturn $mod;\n\
    }\n\n$n = 101;\n\n$p = array(5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101);\n\n$r = 0;\n\nfor ($i = 0; $i\
    \ < count($p); $i++) {\n\t$r = max($r, modp($n, $p[$i]));\n}\n\nprint($r . \"\\\
    n\");\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '72

    '
  timestamp: 1659824326
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  $a = 1;\n\
    \  for ($i = 0; $i < $n; $i++) {\n    $a = ($a * 2) % $p;\n  }\n  return $a;\n\
    }\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824326
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  $m = 1;\n\
    \  $mval = 1;\n  while ($n > 0) {\n    if ($n % 2 == 1) {\n      $m = ($m * $mval)\
    \ % $p;\n    }\n    $mval = ($mval * $mval) % $p;\n    $n = floor($n / 2);\n \
    \ }\n  return $m;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpds7r4slk.php:31\n\
    Stack trace:\n#0 /tmp/tmpds7r4slk.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpds7r4slk.php\
    \ on line 31\n"
  timestamp: 1659824326
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\t$n = intval($n);\n\
    \t$p = intval($p);\n\t$answer = 1;\n\twhile($n) {\n\t\tif ($n % 2) {\n\t\t\t$answer\
    \ = ($answer * $p) % $p;\n\t\t}\n\t\t$p = ($p * $p) % $p;\n\t\t$n /= 2;\n\t}\n\
    \treturn $answer;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nDeprecated: Implicit conversion from float 1.5 to int loses precision\
    \ in /tmp/tmp8apsdwwg.php on line 18\n\nFatal error: Uncaught DivisionByZeroError:\
    \ Modulo by zero in /tmp/tmp8apsdwwg.php:19\nStack trace:\n#0 /tmp/tmp8apsdwwg.php(28):\
    \ modp(1.5, 0)\n#1 /tmp/tmp8apsdwwg.php(32): candidate(3, 5)\n#2 /tmp/tmp8apsdwwg.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp8apsdwwg.php on line 19\n"
  timestamp: 1659824326
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if ($n\
    \ == 0) {\n        return 1;\n    }\n    else {\n        $num = pow(2, $n) % $p;\n\
    \        return $num;\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nDeprecated: Implicit conversion from float INF to int loses precision\
    \ in /tmp/tmpoeqlt0ky.php on line 18\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpoeqlt0ky.php:29\nStack trace:\n#0 /tmp/tmpoeqlt0ky.php(37):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpoeqlt0ky.php on line 29\n"
  timestamp: 1659824326
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  $r = 1;\n\
    \  $d = 2;\n  while ($n > 0) {\n    if ($n % 2) {\n      $r = ($r * $d) % $p;\n\
    \    }\n    $d = ($d * $d) % $p;\n    $n = (int)($n / 2);\n  }\n  return $r;\n\
    }\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824326
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  // TODO:\
    \ Write your code here.\n  if ($n === 0) {\n    return 1;\n  }\n\n  $ret = 1;\n\
    \  $a = $n;\n  while ($a > 0) {\n    if ($a % 2 === 1) {\n      $ret = ($ret *\
    \ $n) % $p;\n    }\n    $n = ($n * $n) % $p;\n    $a = floor($a / 2);\n  }\n \
    \ return $ret;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph5oz9dt1.php:36\n\
    Stack trace:\n#0 /tmp/tmph5oz9dt1.php(45): test()\n#1 {main}\n  thrown in /tmp/tmph5oz9dt1.php\
    \ on line 36\n"
  timestamp: 1659824326
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\t$res = 1;\n\
    \t$m = $n;\n\twhile ($m > 0) {\n\t\tif ($m & 1)\n\t\t\t$res = ($res * $n) % $p;\n\
    \t\t$n = ($n * $n) % $p;\n\t\t$m >>= 1;\n\t}\n\treturn $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi7tpm424.php:30\n\
    Stack trace:\n#0 /tmp/tmpi7tpm424.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpi7tpm424.php\
    \ on line 30\n"
  timestamp: 1659824326
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if ($n\
    \ == 0) {\n        return 1;\n    } else if ($n == 1) {\n        return $n;\n\
    \    } else {\n        $n1 = $n % $p;\n        $n2 = ($n - $n1) / $p;\n      \
    \  return ($n1 * $n1) % $p;\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxh95jue_.php:30\n\
    Stack trace:\n#0 /tmp/tmpxh95jue_.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpxh95jue_.php\
    \ on line 30\n"
  timestamp: 1659824326
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  $res = 1;\n\
    \  $n %= $p;\n  while ($n) {\n    if ($n & 1) $res = ($res * $n) % $p;\n    $n\
    \ >>= 1;\n    $n %= $p;\n  }\n  return $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp05fwi3g1.php:30\n\
    Stack trace:\n#0 /tmp/tmp05fwi3g1.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp05fwi3g1.php\
    \ on line 30\n"
  timestamp: 1659824326
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\tif ($n ==\
    \ 0) {\n\t\treturn 1;\n\t}\n\tif ($n == 1) {\n\t\treturn $n;\n\t}\n\t$p = abs($p);\n\
    \tif ($p == 1) {\n\t\treturn 0;\n\t}\n\t$r = 1;\n\t$b = $n;\n\twhile (true) {\n\
    \t\tif ($n & 1) {\n\t\t\t$r = ($r * $b) % $p;\n\t\t}\n\t\t$n >>= 1;\n\t\tif ($n\
    \ == 0) {\n\t\t\tbreak;\n\t\t}\n\t\t$b = ($b * $b) % $p;\n\t}\n\treturn $r;\n\
    }\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn6xs0f8q.php:44\n\
    Stack trace:\n#0 /tmp/tmpn6xs0f8q.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpn6xs0f8q.php\
    \ on line 44\n"
  timestamp: 1659824326
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\tif ($n <=\
    \ 0) return 1;\n\tif ($n % 2 == 0) {\n\t\t$sub = modp($n / 2, $p);\n\t\treturn\
    \ ($sub * $sub) % $p;\n\t} else {\n\t\t$sub = modp(($n - 1) / 2, $p);\n\t\treturn\
    \ ((($sub * $sub) % $p) * 2) % $p;\n\t}\n}\nfunction candidate(...$args) {\n \
    \   return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824326
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\tif ($n <\
    \ $p) return $n;\n\t$n = strval($n);\n\t$res = 1;\n\tfor ($i = 0; $i < strlen($n);\
    \ $i++) {\n\t\t$res = bcmod(bcmul($res, 2), $p);\n\t\tif ($n[$i] == \"1\") {\n\
    \t\t\t$res = bcmod(bcadd($res, 1), $p);\n\t\t}\n\t}\n\treturn $res;\n}\n\nfunction\
    \ candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function bcmod() in /tmp/tmp9kz202zk.php:18\n\
    Stack trace:\n#0 /tmp/tmp9kz202zk.php(27): modp('1101', 101)\n#1 /tmp/tmp9kz202zk.php(32):\
    \ candidate(1101, 101)\n#2 /tmp/tmp9kz202zk.php(40): test()\n#3 {main}\n  thrown\
    \ in /tmp/tmp9kz202zk.php on line 18\n"
  timestamp: 1659824326
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\t$r = 1;\n\
    \t$m = $n;\n\twhile($m > 0) {\n\t\tif($m % 2 == 1) {\n\t\t\t$r = ($r * $n) % $p;\n\
    \t\t}\n\t\t$n = ($n * $n) % $p;\n\t\t$m = $m >> 1;\n\t}\n\treturn $r;\n}\n\nfunction\
    \ candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnqp164z3.php:31\n\
    Stack trace:\n#0 /tmp/tmpnqp164z3.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpnqp164z3.php\
    \ on line 31\n"
  timestamp: 1659824326
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  // Handle\
    \ a few easy cases.\n  if ($n === 0) return 1;\n  if ($n === 1) return $n;\n \
    \ if ($n === 2) return ($n % $p);\n\n  // Use binary decomposition to split $n\
    \ into a sum of powers of 2.\n  $sum = 1;\n  $x = 2;\n  for ($i = $n; $i > 0;\
    \ $i = $i >> 1) {\n    if ($i & 1) {\n      $sum = ($sum * $x) % $p;\n    }\n\
    \    $x = ($x * $x) % $p;\n  }\n  return $sum;\n}\n\n$n = intval(trim(fgets(STDIN)));\n\
    $p = intval(trim(fgets(STDIN)));\n\necho modp($n, $p) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    '
  timestamp: 1659824326
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $num =\
    \ 1;\n    for ($i = 0; $i < $n; $i++) {\n        $num = ($num * 2) % $p;\n   \
    \ }\n    return $num;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824326
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * ($n & 1 ? 2 : 1)) % $p;\n        $n\
    \ >>= 1;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqiohpx5x.php:27\n\
    Stack trace:\n#0 /tmp/tmpqiohpx5x.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpqiohpx5x.php\
    \ on line 27\n"
  timestamp: 1659824326
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if ($n\
    \ === 0) return 1;\n    $res = 1;\n    $x = 2;\n    while ($n > 0) {\n       \
    \ if ($n & 1) $res = $res * $x % $p;\n        $x = $x * $x % $p;\n        $n >>=\
    \ 1;\n    }\n    return $res;\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824326
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\t$tmp = 1;\n\
    \tfor ($i = 0; $i < $n; $i++) {\n\t\t$tmp = ($tmp * 2) % $p;\n\t}\n\treturn $tmp;\n\
    }\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824326
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if ($n\
    \ == 0) {\n        return 1;\n    } else if ($n % 2 == 0) {\n        $m = modp($n\
    \ / 2, $p);\n        return $m * $m % $p;\n    } else {\n        return 2 * modp($n\
    \ - 1, $p) % $p;\n    }\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009037
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if ($n\
    \ == 0) {\n        return 1;\n    }\n    if ($n % 2 == 0) {\n        $k = modp($n\
    \ / 2, $p);\n        return $k * $k % $p;\n    } else {\n        return $n * modp($n\
    \ - 1, $p) % $p;\n    }\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp66_dq4a2.php:31\n\
    Stack trace:\n#0 /tmp/tmp66_dq4a2.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp66_dq4a2.php\
    \ on line 31\n"
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\t$result =\
    \ 1;\n\twhile ($n > 0) {\n\t\tif ($n & 1) {\n\t\t\t$result = ($result * $p) %\
    \ ($p + 1);\n\t\t}\n\t\t$p = ($p * $p) % ($p + 1);\n\t\t$n >>= 1;\n\t}\n\treturn\
    \ $result;\n}\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphdsi_ot4.php:29\n\
    Stack trace:\n#0 /tmp/tmphdsi_ot4.php(38): test()\n#1 {main}\n  thrown in /tmp/tmphdsi_ot4.php\
    \ on line 29\n"
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $mod =\
    \ 0;\n    for ($i = 0; $i < strlen($n); $i++) {\n        $mod *= 2;\n        $mod\
    \ += (int) $n[$i];\n        $mod %= $p;\n    }\n    return $mod;\n}\n\necho modp(1101,\
    \ 101) . \"\\n\";\necho modp(0, 101) . \"\\n\";\necho modp(3, 11) . \"\\n\";\n\
    echo modp(100, 101) . \"\\n\";\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Trying to access array offset on value of type int in /tmp/tmpvs640n57.php\
    \ on line 17\n\nWarning: Trying to access array offset on value of type int in\
    \ /tmp/tmpvs640n57.php on line 17\n\nWarning: Trying to access array offset on\
    \ value of type int in /tmp/tmpvs640n57.php on line 17\n\nWarning: Trying to access\
    \ array offset on value of type int in /tmp/tmpvs640n57.php on line 17\n0\n\n\
    Warning: Trying to access array offset on value of type int in /tmp/tmpvs640n57.php\
    \ on line 17\n0\n\nWarning: Trying to access array offset on value of type int\
    \ in /tmp/tmpvs640n57.php on line 17\n0\n\nWarning: Trying to access array offset\
    \ on value of type int in /tmp/tmpvs640n57.php on line 17\n\nWarning: Trying to\
    \ access array offset on value of type int in /tmp/tmpvs640n57.php on line 17\n\
    \nWarning: Trying to access array offset on value of type int in /tmp/tmpvs640n57.php\
    \ on line 17\n0\n\nWarning: Trying to access array offset on value of type int\
    \ in /tmp/tmpvs640n57.php on line 17\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpvs640n57.php:32\nStack trace:\n#0 /tmp/tmpvs640n57.php(41):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpvs640n57.php on line 32\n"
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\t//if ($n\
    \ == 0) return 1;\n\t//if ($n & 1) return modp($n-1, $p) * 2 % $p;\n\t//return\
    \ modp($n/2, $p) * modp($n/2, $p) % $p;\n\t$result = 1;\n\t$base = 2;\n\twhile\
    \ ($n > 0) {\n\t\tif ($n & 1) {\n\t\t\t$result = bcmod(bcmul($result, $base),\
    \ $p);\n\t\t}\n\t\t$base = bcmod(bcmul($base, $base), $p);\n\t\t$n >>= 1;\n\t\
    }\n\treturn $result;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function bcmod() in /tmp/tmpgx2jyav2.php:21\n\
    Stack trace:\n#0 /tmp/tmpgx2jyav2.php(30): modp(3, 5)\n#1 /tmp/tmpgx2jyav2.php(34):\
    \ candidate(3, 5)\n#2 /tmp/tmpgx2jyav2.php(43): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpgx2jyav2.php on line 21\n"
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if ($n\
    \ == 0) {\n        return 1;\n    }\n    if ($n % 2 == 0) {\n        return (modp($n\
    \ / 2, $p) ** 2) % $p;\n    } else {\n        return (((modp(($n - 1) / 2, $p)\
    \ ** 2) % $p) * $n) % $p;\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpli0h4toz.php:30\n\
    Stack trace:\n#0 /tmp/tmpli0h4toz.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpli0h4toz.php\
    \ on line 30\n"
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    // base\
    \ case\n    if ($n == 0) {\n        return 1;\n    }\n    // recursive case: n\
    \ is even\n    if ($n % 2 == 0) {\n        return modp(($n / 2) % $p, $p) ** 2\
    \ % $p;\n    }\n    // recursive case: n is odd\n    if ($n % 2 == 1) {\n    \
    \    return (2 * modp(($n - 1) / 2, $p) ** 2) % $p;\n    }\n}\necho modp(3, 5)\
    \ . \"\\n\";\necho modp(1101, 101) . \"\\n\";\necho modp(0, 101) . \"\\n\";\n\
    echo modp(3, 11) . \"\\n\";\necho modp(100, 101) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "3\n15\n1\n8\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo14__ywb.php:38\n\
    Stack trace:\n#0 /tmp/tmpo14__ywb.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpo14__ywb.php\
    \ on line 38\n"
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if ($n\
    \ < 0) return modp(bcadd($n, $p), $p);\n    if ($n < $p) return $n;\n    $r =\
    \ $n % $p;\n    if ($r < 0) $r += $p;\n    return $r;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm2gew_ov.php:27\n\
    Stack trace:\n#0 /tmp/tmpm2gew_ov.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpm2gew_ov.php\
    \ on line 27\n"
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if ($n\
    \ == 0) {\n        return 1;\n    }\n    if ($n % 2 == 0) {\n        $tmp = modp($n\
    \ / 2, $p);\n        return $tmp * $tmp % $p;\n    } else {\n        return ($n\
    \ % $p) * modp($n - 1, $p) % $p;\n    }\n}\nfunction candidate(...$args) {\n \
    \   return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplko3nk3a.php:30\n\
    Stack trace:\n#0 /tmp/tmplko3nk3a.php(38): test()\n#1 {main}\n  thrown in /tmp/tmplko3nk3a.php\
    \ on line 30\n"
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if ($n\
    \ <= 0) {\n        return 1;\n    } else if ($n == 1) {\n        return $n;\n\
    \    } else {\n        $r = modp($n / 2, $p);\n        $r = ($r * $r) % $p;\n\
    \        if ($n % 2 == 1) {\n            $r = ($r * $n) % $p;\n        }\n   \
    \     return $r;\n    }\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Deprecated: Implicit conversion from float 5.0E-324 to int loses precision in
    /tmp/tmppsjtqcst.php on line 21


    Deprecated: Implicit conversion from float 1.0E-323 to int loses precision in
    /tmp/tmppsjtqcst.php on line 21


    Deprecated: Implicit conversion from float 1.5E-323 to int loses precision in
    /tmp/tmppsjtqcst.php on line 21


    Deprecated: Implicit conversion from float 3.0E-323 to int loses precision in
    /tmp/tmppsjtqcst.php on line 21


    Deprecated: Implicit conversion from float 6.0E-323 to int loses precision in
    /tmp/tmppsjtqcst.php on line 21


    Deprecated: Implicit conversion from float 1.2E-322 to int loses precision in
    /tmp/tmppsjtqcst.php on line 21


    Deprecated: Implicit conversion from float 2.37E-322 to int loses precision in
    /tmp/tmppsjtqcst.php on line 21


    Deprecated: Implicit conversion from float 4.74E-322 to int loses precision in
    /tmp/tmppsjtqcst.php on line 21


    Deprecated: Implicit conversion from float 9.5E-322 to int loses precision in
    /tmp/tmppsjtqcst.php on line 21


    Deprecated: Implicit conversion from float 1.897E-321 to int loses precision in
    /tmp/tmppsjtqcst.php on line 21


    Deprecated: Implicit conversion from float 3.794E-321 to int loses precision in
    /tmp/tmppsjtqcst.php on line 21


    Deprecated: Implicit conversion from float 7.59E-321 to int loses precision in
    /tmp/tmppsjtqcst.php on line 21


    Deprecated: Implicit conversion from float 1.518E-320 to int loses precision in
    /tmp/tmppsjtqcst.php on line 21


    Deprecated: Implicit conversion from float 3.0355E-320 to int loses precision
    in /tmp/tmppsjtqcst.php on line 21


    Deprecated: Implicit conversion from float 6.071E-320 to int loses precision in
    /tmp/tmppsjtqcst.php on line 21


    Deprecated: Implicit conversion from float 1.2142E-319 to int loses precision
    in /tmp/tmppsjtqcst.php on line 21


    Deprecated: Implicit conversion from float 2.42843E-319 to int loses precision
    in /tmp/tmppsjtqcst.php on line 21


    Deprecated: Implicit conversion from float 4.85686E-319 to int loses precision
    in /tmp/tmppsjtqcst.php on line 21


    Deprecated: Implicit con'
  timestamp: 1660028825
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\tif ($n ==\
    \ 0) {\n\t\treturn 1;\n\t} elseif ($n == 1) {\n\t\treturn 2;\n\t} elseif ($n %\
    \ 2 == 0) {\n\t\t$u = modp($n / 2, $p);\n\t\treturn ($u * $u) % $p;\n\t} else\
    \ {\n\t\t$u = modp(($n - 1) / 2, $p);\n\t\treturn ((($u * $u) % $p) * 2) % $p;\n\
    \t}\n}\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028825
- exit_code: -1
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\t$b = 1;\n\
    \twhile ($n != 0) {\n\t\tif ($n & 1) {\n\t\t\t$b = ($b * $n) % $p;\n\t\t}\n\t\t\
    $n = $n >> 1;\n\t\t$n = ($n * $n) % $p;\n\t}\n\treturn $b;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660028830
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if ($n\
    \ == 0) {\n        return 1;\n    }\n    if ($n == 1) {\n        return $n;\n\
    \    }\n    $i = 1;\n    $s = $n;\n    $res = 1;\n    while ($i <= $n) {\n   \
    \     $res = bcmod($res*$s, $p);\n        $i += 1;\n    }\n    return $res;\n\
    }\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function bcmod() in /tmp/tmpjpvxwldf.php:24\n\
    Stack trace:\n#0 /tmp/tmpjpvxwldf.php(31): modp(3, 5)\n#1 /tmp/tmpjpvxwldf.php(35):\
    \ candidate(3, 5)\n#2 /tmp/tmpjpvxwldf.php(44): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpjpvxwldf.php on line 24\n"
  timestamp: 1660028825
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    for ($i = 1; $i <= $n; $i++) {\n        $r = ($r * 2) % $p;\n    }\n    return\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\t$r = 1;\n\
    \twhile ($n > 0) {\n\t\tif ($n & 1)\n\t\t\t$r = ($r * $p) % 2147483647;\n\t\t\
    $p = ($p * $p) % 2147483647;\n\t\t$n >>= 1;\n\t}\n\treturn $r;\n}\n\n$s = 27722;\n\
    $x = $s;\n$y = $s;\n\n$c = 0;\nfor ($i = 0; $i < 5000000; $i++) {\n\tdo {\n\t\t\
    $x = ($x * 16807) % 2147483647;\n\t} while ($x & 3);\n\tdo {\n\t\t$y = ($y * 48271)\
    \ % 2147483647;\n\t} while ($y & 7);\n\tif (($x & 0xffff) == ($y & 0xffff))\n\t\
    \t$c++;\n}\necho \"$c\\n\";\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "307\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2imac_em.php:45\n\
    Stack trace:\n#0 /tmp/tmp2imac_em.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp2imac_em.php\
    \ on line 45\n"
  timestamp: 1660028827
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\tif ($n ==\
    \ 0) return 1;\n\t$result = 1;\n\t$base = $n % $p;\n\twhile ($n > 0) {\n\t\tif\
    \ ($n % 2) $result = ($result * $base) % $p;\n\t\t$n = $n / 2;\n\t\t$base = ($base\
    \ * $base) % $p;\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Deprecated: Implicit conversion from float 1.5 to int loses precision in /tmp/tmpb0t2_bds.php
    on line 18


    Deprecated: Implicit conversion from float 0.75 to int loses precision in /tmp/tmpb0t2_bds.php
    on line 18


    Deprecated: Implicit conversion from float 0.375 to int loses precision in /tmp/tmpb0t2_bds.php
    on line 18


    Deprecated: Implicit conversion from float 0.1875 to int loses precision in /tmp/tmpb0t2_bds.php
    on line 18


    Deprecated: Implicit conversion from float 0.09375 to int loses precision in /tmp/tmpb0t2_bds.php
    on line 18


    Deprecated: Implicit conversion from float 0.046875 to int loses precision in
    /tmp/tmpb0t2_bds.php on line 18


    Deprecated: Implicit conversion from float 0.0234375 to int loses precision in
    /tmp/tmpb0t2_bds.php on line 18


    Deprecated: Implicit conversion from float 0.01171875 to int loses precision in
    /tmp/tmpb0t2_bds.php on line 18


    Deprecated: Implicit conversion from float 0.005859375 to int loses precision
    in /tmp/tmpb0t2_bds.php on line 18


    Deprecated: Implicit conversion from float 0.0029296875 to int loses precision
    in /tmp/tmpb0t2_bds.php on line 18


    Deprecated: Implicit conversion from float 0.00146484375 to int loses precision
    in /tmp/tmpb0t2_bds.php on line 18


    Deprecated: Implicit conversion from float 0.000732421875 to int loses precision
    in /tmp/tmpb0t2_bds.php on line 18


    Deprecated: Implicit conversion from float 0.0003662109375 to int loses precision
    in /tmp/tmpb0t2_bds.php on line 18


    Deprecated: Implicit conversion from float 0.00018310546875 to int loses precision
    in /tmp/tmpb0t2_bds.php on line 18


    Deprecated: Implicit conversion from float 9.1552734375E-5 to int loses precision
    in /tmp/tmpb0t2_bds.php on line 18


    Deprecated: Implicit conversion from float 4.57763671875E-5 to int loses precision
    in /tmp/tmpb0t2_bds.php on line 18


    Deprecated: Implicit conversion from float 2.288818359375E-5 to int loses precision
    in /tmp/tmpb0t2_bds.php on line 18


    Deprecated: Implicit conversion from float 1.1444091796875E-5 to int loses precision
    in /tmp/tmpb0t2_bds.php on lin'
  timestamp: 1660028825
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\tif ($n ==\
    \ 0) {\n\t\treturn 1;\n\t} elseif ($n == 1) {\n\t\treturn 2;\n\t} elseif ($n %\
    \ 2 == 0) {\n\t\t$m = modp($n / 2, $p);\n\t\treturn ($m * $m) % $p;\n\t} else\
    \ {\n\t\t$m = modp(($n - 1) / 2, $p);\n\t\treturn ((($m * $m) % $p) * 2) % $p;\n\
    \t}\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028825
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if ($n\
    \ == 0) return 1;\n    $t = modp($n/2, $p);\n    if ($n % 2 == 0) {\n        return\
    \ $t * $t % $p;\n    } else {\n        return $t * $t * 2 % $p;\n    }\n}\n\n\
    function candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Deprecated: Implicit conversion from float 5.0E-324 to int loses precision in
    /tmp/tmpi4xwav3_.php on line 16


    Deprecated: Implicit conversion from float 1.0E-323 to int loses precision in
    /tmp/tmpi4xwav3_.php on line 16


    Deprecated: Implicit conversion from float 1.5E-323 to int loses precision in
    /tmp/tmpi4xwav3_.php on line 16


    Deprecated: Implicit conversion from float 3.0E-323 to int loses precision in
    /tmp/tmpi4xwav3_.php on line 16


    Deprecated: Implicit conversion from float 6.0E-323 to int loses precision in
    /tmp/tmpi4xwav3_.php on line 16


    Deprecated: Implicit conversion from float 1.2E-322 to int loses precision in
    /tmp/tmpi4xwav3_.php on line 16


    Deprecated: Implicit conversion from float 2.37E-322 to int loses precision in
    /tmp/tmpi4xwav3_.php on line 16


    Deprecated: Implicit conversion from float 4.74E-322 to int loses precision in
    /tmp/tmpi4xwav3_.php on line 16


    Deprecated: Implicit conversion from float 9.5E-322 to int loses precision in
    /tmp/tmpi4xwav3_.php on line 16


    Deprecated: Implicit conversion from float 1.897E-321 to int loses precision in
    /tmp/tmpi4xwav3_.php on line 16


    Deprecated: Implicit conversion from float 3.794E-321 to int loses precision in
    /tmp/tmpi4xwav3_.php on line 16


    Deprecated: Implicit conversion from float 7.59E-321 to int loses precision in
    /tmp/tmpi4xwav3_.php on line 16


    Deprecated: Implicit conversion from float 1.518E-320 to int loses precision in
    /tmp/tmpi4xwav3_.php on line 16


    Deprecated: Implicit conversion from float 3.0355E-320 to int loses precision
    in /tmp/tmpi4xwav3_.php on line 16


    Deprecated: Implicit conversion from float 6.071E-320 to int loses precision in
    /tmp/tmpi4xwav3_.php on line 16


    Deprecated: Implicit conversion from float 1.2142E-319 to int loses precision
    in /tmp/tmpi4xwav3_.php on line 16


    Deprecated: Implicit conversion from float 2.42843E-319 to int loses precision
    in /tmp/tmpi4xwav3_.php on line 16


    Deprecated: Implicit conversion from float 4.85686E-319 to int loses precision
    in /tmp/tmpi4xwav3_.php on line 16


    Deprecated: Implicit con'
  timestamp: 1660028825
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $result\
    \ = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $result = ($result * 2) %\
    \ $p;\n    }\n    return $result;\n}\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\tif($n ==\
    \ 0) {\n\t\treturn 1;\n\t}\n\tif($n == 1) {\n\t\treturn $n;\n\t}\n\t$res = 1;\n\
    \t$square = 2;\n\t$bits = array();\n\t$x = $n;\n\twhile($x > 0) {\n\t\tarray_push($bits,\
    \ $x % 2);\n\t\t$x = $x >> 1;\n\t}\n\tfor($i = count($bits) - 1; $i >= 0; $i--)\
    \ {\n\t\tif($bits[$i] == 1) {\n\t\t\t$res = ($res * $square) % $p;\n\t\t}\n\t\t\
    $square = ($square * $square) % $p;\n\t}\n\treturn $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzunot1xm.php:43\n\
    Stack trace:\n#0 /tmp/tmpzunot1xm.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpzunot1xm.php\
    \ on line 43\n"
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $b = 1;\n\
    \    $x = 2;\n    $c = 0;\n    $m = strlen($n);\n    for ($i = 0; $i < $m; $i++)\
    \ {\n        $c = $c * 2 + (int)$n[$i];\n        if ($x > $c) {\n            continue;\n\
    \        }\n        $c -= $x;\n        $b = ($b * $x) % $p;\n    }\n    return\
    \ $b;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Trying to access array offset on value of type int in /tmp/tmp1q0b4tvg.php\
    \ on line 19\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1q0b4tvg.php:34\n\
    Stack trace:\n#0 /tmp/tmp1q0b4tvg.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp1q0b4tvg.php\
    \ on line 34\n"
  timestamp: 1660028825
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\tif($n < 0)\
    \ {\n\t\treturn modp(-1 * $n, $p);\n\t}\n\tif($n == 0) {\n\t\treturn 1;\n\t}\n\
    \tif($n == 1) {\n\t\treturn 2;\n\t}\n\tif($n % 2 == 0) {\n\t\t$tmp = modp($n /\
    \ 2, $p);\n\t\treturn ($tmp * $tmp) % $p;\n\t}\n\treturn (2 * modp($n - 1, $p))\
    \ % $p;\n}\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\t$r = 1;\n\
    \t$n = $n % $p;\n\twhile ($n) {\n\t\tif ($n & 1) {\n\t\t\t$r = ($r * $p) % $p;\n\
    \t\t}\n\t\t$n >>= 1;\n\t\t$p = ($p * $p) % $p;\n\t}\n\treturn $r;\n}\n\nfunction\
    \ candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpzfqsrq8w.php:18\n\
    Stack trace:\n#0 /tmp/tmpzfqsrq8w.php(27): modp(1, 0)\n#1 /tmp/tmpzfqsrq8w.php(31):\
    \ candidate(3, 5)\n#2 /tmp/tmpzfqsrq8w.php(40): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpzfqsrq8w.php on line 18\n"
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\t$n %= $p;\n\
    \tif ($n < 0) {\n\t\t$n += $p;\n\t}\n\tif ($n <= 1) {\n\t\treturn $n;\n\t}\n\t\
    $x = 1;\n\t$m = 2;\n\twhile ($m <= $n) {\n\t\t$m *= 2;\n\t}\n\t$m /= 2;\n\twhile\
    \ ($m >= 1) {\n\t\t$x = ($x * $x) % $p;\n\t\tif ($n >= $m) {\n\t\t\t$x = ($x *\
    \ 2) % $p;\n\t\t\t$n -= $m;\n\t\t}\n\t\t$m /= 2;\n\t}\n\treturn $x;\n}\n\nfunction\
    \ candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5b9wek0l.php:44\n\
    Stack trace:\n#0 /tmp/tmp5b9wek0l.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp5b9wek0l.php\
    \ on line 44\n"
  timestamp: 1660028825
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\t$b = 1;\n\
    \t$i = 0;\n\twhile ($i < $n) {\n\t\t$b = ($b * 2) % $p;\n\t\t$i = $i + 1;\n\t\
    }\n\treturn $b;\n}\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028825
- exit_code: -1
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $num =\
    \ 1;\n    $n = $n % $p;\n    if ($n < 0) $n += $p;\n    while ($n) {\n       \
    \ if ($n & 1) {\n            $num = ($num * $n) % $p;\n        }\n        $n >>=\
    \ 1;\n        $n = ($n * $n) % $p;\n    }\n    return $num;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660028830
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    // Compute\
    \ $p_1, $p_2 such that $p = 2^$p_1 * $p_2 + 1 with $p_2 odd.\n    $p_1 = 0;\n\
    \    $p_2 = $p - 1;\n    while ($p_2 % 2 == 0) {\n        $p_2 /= 2;\n       \
    \ $p_1 += 1;\n    }\n\n    // Compute $n_0, $n_1 such that $n = 2^$n_0 * $n_1\
    \ with $n_1 odd.\n    $n_1 = $n;\n    $n_0 = 0;\n    while ($n_1 % 2 == 0) {\n\
    \        $n_1 /= 2;\n        $n_0 += 1;\n    }\n\n    // Compute b_0, b_1, ...,\
    \ b_{$p_1-1}\n    $b = array();\n    $b[0] = powmod($n_1, $p_2, $p);\n    for\
    \ ($i = 1; $i < $p_1; $i++) {\n        $b[$i] = powmod($b[$i-1] * $b[$i-1], $p_2,\
    \ $p);\n    }\n\n    // Compute c = b_0^{2^0} * b_1^{2^1} * ... * b_{$p_1-1}^{2^{$p_1-1}}\n\
    \    $c = 1;\n    for ($i = 0; $i < $p_1; $i++) {\n        if ((($p_1 - 1) - $i)\
    \ <= $n_0) {\n            $c = ($c * $b[$i]) % $p;\n        }\n    }\n\n    return\
    \ $c;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function powmod() in /tmp/tmpdvsrw6s1.php:32\n\
    Stack trace:\n#0 /tmp/tmpdvsrw6s1.php(49): modp(3, 5)\n#1 /tmp/tmpdvsrw6s1.php(53):\
    \ candidate(3, 5)\n#2 /tmp/tmpdvsrw6s1.php(62): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpdvsrw6s1.php on line 32\n"
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $res =\
    \ 1;\n    $n = (int)$n;\n    $p = (int)$p;\n    if ($n == 0) {\n        return\
    \ 1;\n    }\n    if ($n < 0) {\n        return modp(-$n, $p);\n    }\n    if ($n\
    \ > $p - 1) {\n        return modp($n % $p, $p);\n    }\n    while ($n > 0) {\n\
    \        if ($n & 1) {\n            $res = ($res * 2) % $p;\n        }\n     \
    \   $n >>= 1;\n    }\n    return $res;\n}\nfunction candidate(...$args) {\n  \
    \  return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxbekqzrt.php:39\n\
    Stack trace:\n#0 /tmp/tmpxbekqzrt.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpxbekqzrt.php\
    \ on line 39\n"
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $result\
    \ = 1;\n    $b = $n;\n    while ($p > 0) {\n        if ($p & 1)\n            $result\
    \ = ($result * $b) % 9999;\n        $p >>= 1;\n        $b = ($b * $b) % 9999;\n\
    \    }\n    return $result;\n}\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9biq3bj7.php:29\n\
    Stack trace:\n#0 /tmp/tmp9biq3bj7.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp9biq3bj7.php\
    \ on line 29\n"
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    //print\
    \ \"$n, $p\\n\";\n    if ($n == 0) {\n        return 1;\n    } else if ($n & 1)\
    \ {\n        return ($n % $p) * modp(($n - 1) / 2, $p) % $p;\n    } else {\n \
    \       $n = modp($n / 2, $p);\n        return ($n * $n) % $p;\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwprbl5af.php:31\n\
    Stack trace:\n#0 /tmp/tmpwprbl5af.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpwprbl5af.php\
    \ on line 31\n"
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($n > 0) {\n        if ($n & 1) {\n            $r = ($r\
    \ * $b) % $p;\n        }\n        $b = ($b * $b) % $p;\n        $n >>= 1;\n  \
    \  }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprpvv0yzt.php:31\n\
    Stack trace:\n#0 /tmp/tmprpvv0yzt.php(40): test()\n#1 {main}\n  thrown in /tmp/tmprpvv0yzt.php\
    \ on line 31\n"
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if ($n\
    \ == 0) return 1;\n    if ($n == 1) return $n;\n    if ($n % 2 == 0) {\n     \
    \   $x = modp($n/2, $p);\n        return ($x * $x) % $p;\n    } else {\n     \
    \   $x = modp(($n-1)/2, $p);\n        return ($x * $x * $n) % $p;\n    }\n}\n\n\
    function candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpupvqo0sy.php:31\n\
    Stack trace:\n#0 /tmp/tmpupvqo0sy.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpupvqo0sy.php\
    \ on line 31\n"
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if ($n\
    \ == 0) return 1;\n    if ($n % 2 == 0) {\n        $half = modp($n / 2, $p);\n\
    \        return ($half * $half) % $p;\n    } else {\n        return ($n % $p)\
    \ * modp($n - 1, $p) % $p;\n    }\n}\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkhtyhefu.php:28\n\
    Stack trace:\n#0 /tmp/tmpkhtyhefu.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpkhtyhefu.php\
    \ on line 28\n"
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    while ($n > 0) {\n        if ($n & 1) $r = ($r * $n) % $p;\n        $n =\
    \ $n >> 1;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwjhm3y4_.php:28\n\
    Stack trace:\n#0 /tmp/tmpwjhm3y4_.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpwjhm3y4_.php\
    \ on line 28\n"
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if ($n\
    \ % $p == 0) {\n        return 1;\n    } else {\n        $r = 1;\n        $f =\
    \ 2;\n        while ($n > 0) {\n            if ($n % 2 == 1) {\n             \
    \   $r = $r * $f % $p;\n            }\n            $f = $f * $f % $p;\n      \
    \      $n = (int)($n / 2);\n        }\n        return $r;\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcg3_276g.php:40\n\
    Stack trace:\n#0 /tmp/tmpcg3_276g.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpcg3_276g.php\
    \ on line 40\n"
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\t$a = 1;\n\
    \t$h = 1;\n\twhile ($h != 0) {\n\t\t$h = ($n & 1);\n\t\tif ($h) $a = ($a * $p)\
    \ % 1000000007;\n\t\t$p = ($p * $p) % 1000000007;\n\t\t$n = $n >> 1;\n\t}\n\t\
    return $a;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpix0jla7z.php:30\n\
    Stack trace:\n#0 /tmp/tmpix0jla7z.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpix0jla7z.php\
    \ on line 30\n"
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    //if ($n\
    \ == 0) return 1;\n    if ($n == 0) return 1;\n    if ($n == 1) return $n;\n \
    \   if ($n % 2 == 0) {\n        return (modp($n / 2, $p) * modp($n / 2, $p)) %\
    \ $p;\n    } else {\n        return ($n * modp($n - 1, $p)) % $p;\n    }\n}\n\n\
    function candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsc6bw2pn.php:30\n\
    Stack trace:\n#0 /tmp/tmpsc6bw2pn.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpsc6bw2pn.php\
    \ on line 30\n"
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if ($n\
    \ == 0) {\n        return 1;\n    }\n    $n = bcmul($n, modp(bcdiv($n, 2), $p));\n\
    \    if (bcmod($n, 2) == 0) {\n        return bcmod($n, $p);\n    } else {\n \
    \       return bcmod(bcmul($n, $p), $p);\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function bcmul() in /tmp/tmphw7n2edl.php:17\n\
    Stack trace:\n#0 /tmp/tmphw7n2edl.php(25): modp(3, 5)\n#1 /tmp/tmphw7n2edl.php(29):\
    \ candidate(3, 5)\n#2 /tmp/tmphw7n2edl.php(38): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmphw7n2edl.php on line 17\n"
  timestamp: 1660028825
- exit_code: -1
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\t$c = 1;\n\
    \t$n %= $p;\n\twhile ($n) {\n\t\tif ($n & 1) {\n\t\t\t$c = ($c * $n) % $p;\n\t\
    \t}\n\t\t$n >>= 1;\n\t\t$n = ($n * $n) % $p;\n\t}\n\treturn $c;\n}\n\nfunction\
    \ candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660028830
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $modulus\
    \ = 1;\n    for ($bit = 1; $bit <= $n; $bit++) {\n        $modulus = ($modulus\
    \ * 2) % $p;\n    }\n    return $modulus;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if ($n\
    \ == 0) return 1;\n    $ans = 1;\n    while ($n != 0) {\n        if ($n & 1) $ans\
    \ = ($ans * $ans) % $p;\n        $n = $n >> 1;\n    }\n    return $ans;\n}\n\n\
    function candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnmwj9w0x.php:28\n\
    Stack trace:\n#0 /tmp/tmpnmwj9w0x.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpnmwj9w0x.php\
    \ on line 28\n"
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\tif ($n ==\
    \ 0) {\n\t\treturn 1;\n\t} else if ($n % 2 == 0) {\n\t\treturn modp(($n / 2) %\
    \ $p, $p) ** 2 % $p;\n\t} else {\n\t\treturn $n % $p * modp(($n - 1) % $p, $p)\
    \ % $p;\n\t}\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz7tkv8w8.php:29\n\
    Stack trace:\n#0 /tmp/tmpz7tkv8w8.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpz7tkv8w8.php\
    \ on line 29\n"
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\t$r = 1;\n\
    \t$k = 1;\n\twhile ($k <= $n) {\n\t\t$k = $k * 2;\n\t}\n\twhile ($k > 1) {\n\t\
    \t$k = $k / 2;\n\t\tif ($n >= $k) {\n\t\t\t$r = ($r * $r) % $p;\n\t\t\t$n = $n\
    \ - $k;\n\t\t\tif ($n > 0) {\n\t\t\t\t$r = ($r * 2) % $p;\n\t\t\t}\n\t\t} else\
    \ {\n\t\t\t$r = ($r * $r) % $p;\n\t\t}\n\t}\n\treturn $r;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplyrhzu09.php:39\n\
    Stack trace:\n#0 /tmp/tmplyrhzu09.php(48): test()\n#1 {main}\n  thrown in /tmp/tmplyrhzu09.php\
    \ on line 39\n"
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\tif ($n ==\
    \ 0) {\n\t\treturn 1;\n\t} else if ($n % 2 == 0) {\n\t\t$m = modp($n / 2, $p);\n\
    \t\treturn ($m * $m) % $p;\n\t} else {\n\t\treturn ((modp($n - 1, $p) * ($n %\
    \ $p)) % $p);\n\t}\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3bo5cmwa.php:30\n\
    Stack trace:\n#0 /tmp/tmp3bo5cmwa.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp3bo5cmwa.php\
    \ on line 30\n"
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if ($n\
    \ == 0) {\n        return 1;\n    }\n    $result = 1;\n    $i = floor($n / 2);\n\
    \    while ($i > 0) {\n        $result = $result * $result % $p;\n        if ($n\
    \ % 2 == 1) {\n            $result = $result * 2 % $p;\n        }\n        $n\
    \ = floor($n / 2);\n        $i = floor($n / 2);\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnevvqm3x.php:35\n\
    Stack trace:\n#0 /tmp/tmpnevvqm3x.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpnevvqm3x.php\
    \ on line 35\n"
  timestamp: 1660028825
- exit_code: -1
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $n %= $p;\n    while ($n > 0) {\n        if ($n & 1) {\n            $r =\
    \ ($r * $n) % $p;\n        }\n        $n = ($n * $n) % $p;\n    }\n    return\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660028830
- exit_code: -1
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\t$r = 1;\n\
    \twhile ($n > 0) {\n\t\tif ($n & 1) {\n\t\t\t$r = ($r * $n) % $p;\n\t\t}\n\t\t\
    $n = $n >> 1;\n\t\t$n = ($n * $n) % $p;\n\t}\n\treturn $r;\n}\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660028830
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $result\
    \ = 1;\n    $factor = 2;\n    $power = $n;\n    while ($power > 0) {\n       \
    \ if ($power % 2 == 1) {\n            $result = ($result * $factor) % $p;\n  \
    \      }\n        $factor = ($factor * $factor) % $p;\n        $power = $power\
    \ / 2;\n    }\n    return $result;\n}\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Deprecated: Implicit conversion from float 1.5 to int loses precision in /tmp/tmp1zav8tq9.php
    on line 18


    Deprecated: Implicit conversion from float 0.75 to int loses precision in /tmp/tmp1zav8tq9.php
    on line 18


    Deprecated: Implicit conversion from float 0.375 to int loses precision in /tmp/tmp1zav8tq9.php
    on line 18


    Deprecated: Implicit conversion from float 0.1875 to int loses precision in /tmp/tmp1zav8tq9.php
    on line 18


    Deprecated: Implicit conversion from float 0.09375 to int loses precision in /tmp/tmp1zav8tq9.php
    on line 18


    Deprecated: Implicit conversion from float 0.046875 to int loses precision in
    /tmp/tmp1zav8tq9.php on line 18


    Deprecated: Implicit conversion from float 0.0234375 to int loses precision in
    /tmp/tmp1zav8tq9.php on line 18


    Deprecated: Implicit conversion from float 0.01171875 to int loses precision in
    /tmp/tmp1zav8tq9.php on line 18


    Deprecated: Implicit conversion from float 0.005859375 to int loses precision
    in /tmp/tmp1zav8tq9.php on line 18


    Deprecated: Implicit conversion from float 0.0029296875 to int loses precision
    in /tmp/tmp1zav8tq9.php on line 18


    Deprecated: Implicit conversion from float 0.00146484375 to int loses precision
    in /tmp/tmp1zav8tq9.php on line 18


    Deprecated: Implicit conversion from float 0.000732421875 to int loses precision
    in /tmp/tmp1zav8tq9.php on line 18


    Deprecated: Implicit conversion from float 0.0003662109375 to int loses precision
    in /tmp/tmp1zav8tq9.php on line 18


    Deprecated: Implicit conversion from float 0.00018310546875 to int loses precision
    in /tmp/tmp1zav8tq9.php on line 18


    Deprecated: Implicit conversion from float 9.1552734375E-5 to int loses precision
    in /tmp/tmp1zav8tq9.php on line 18


    Deprecated: Implicit conversion from float 4.57763671875E-5 to int loses precision
    in /tmp/tmp1zav8tq9.php on line 18


    Deprecated: Implicit conversion from float 2.288818359375E-5 to int loses precision
    in /tmp/tmp1zav8tq9.php on line 18


    Deprecated: Implicit conversion from float 1.1444091796875E-5 to int loses precision
    in /tmp/tmp1zav8tq9.php on lin'
  timestamp: 1660028825
- exit_code: -1
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $a = 1;\n\
    \    $b = 0;\n    while ($n != 0) {\n        $t = ($p / $n) | 0; // integer division\n\
    \        $a = $a * $t + $b;\n        $b = $a;\n        $a = $b - $a * $t;\n  \
    \      $p = $p - $n * $t;\n        $b = $a;\n        $a = $b - $a * $t;\n    \
    \    $n = $n - $p * $t;\n    }\n    if ($p == 1) {\n        return $a;\n    }\
    \ else {\n        return -1;\n    }\n}\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: '

    Deprecated: Implicit conversion from float 1.6666666666666667 to int loses precision
    in /tmp/tmpezf3lwdz.php on line 17

    '
  timestamp: 1660028830
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\tif ($n ==\
    \ 0) return 1;\n\tif ($n == 1) return $n;\n\t$inv = false;\n\tif ($n < 0) {\n\t\
    \t$n = -$n;\n\t\t$inv = true;\n\t}\n\tif ($n % 2 == 0) {\n\t\t$tmp = modp($n/2,\
    \ $p);\n\t\t$tmp = ($tmp * $tmp) % $p;\n\t} else {\n\t\t$tmp = modp(($n-1)/2,\
    \ $p);\n\t\t$tmp = ($tmp * $tmp * 2) % $p;\n\t}\n\tif ($inv) return $p - $tmp;\n\
    \treturn $tmp;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8yq3wn7v.php:37\n\
    Stack trace:\n#0 /tmp/tmp8yq3wn7v.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp8yq3wn7v.php\
    \ on line 37\n"
  timestamp: 1660028825
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\t$r = 1;\n\
    \t$i = 0;\n\t$n = decbin($n);\n\twhile ($i < strlen($n)) {\n\t\tif (substr($n,\
    \ $i, 1) == 1) {\n\t\t\t$r = (($r * $r) % $p * 2) % $p;\n\t\t} else {\n\t\t\t\
    $r = ($r * $r) % $p;\n\t\t}\n\t\t$i++;\n\t}\n\treturn $r;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\tif ($n <\
    \ 0) {\n\t\t$n = -$n;\n\t}\n\tif ($n == 0) {\n\t\treturn 1;\n\t}\n\tif ($n ==\
    \ 1) {\n\t\treturn $n;\n\t}\n\t$r = 1;\n\t$q = 1;\n\t$s = $n;\n\twhile ($q !=\
    \ 0) {\n\t\t$q = floor($s / $p);\n\t\t$r = ($s - $q * $p) * $r;\n\t\t$s = $q;\n\
    \t}\n\tif ($r < 0) {\n\t\t$r = $r + $p;\n\t}\n\treturn $r;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcy_tp0yf.php:42\n\
    Stack trace:\n#0 /tmp/tmpcy_tp0yf.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpcy_tp0yf.php\
    \ on line 42\n"
  timestamp: 1660028825
- exit_code: -1
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\t$r = 1;\n\
    \t$n %= $p;\n\twhile ($n > 0) {\n\t\tif ($n & 1) {\n\t\t\t$r = ($r * $n) % $p;\n\
    \t\t}\n\t\t$n = $n >> 1;\n\t\t$n = ($n * $n) % $p;\n\t}\n\treturn $r;\n}\n\nfunction\
    \ candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660028830
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $ans =\
    \ 1;\n    while ($n != 0) {\n        if ($n & 1) {\n            $ans = ($ans *\
    \ $p) % 1000000007;\n        }\n        $p = ($p * $p) % 1000000007;\n       \
    \ $n = $n >> 1;\n    }\n    return $ans;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurj2q61n.php:30\n\
    Stack trace:\n#0 /tmp/tmpurj2q61n.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpurj2q61n.php\
    \ on line 30\n"
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\t$x = $n %\
    \ $p;\n\tif ($x < 0) {\n\t\t$x += $p;\n\t}\n\treturn $x;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplw_s98vy.php:27\n\
    Stack trace:\n#0 /tmp/tmplw_s98vy.php(35): test()\n#1 {main}\n  thrown in /tmp/tmplw_s98vy.php\
    \ on line 27\n"
  timestamp: 1660028825
- exit_code: -1
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\tif ($n ==\
    \ 0) return 1;\n\tif ($n == 1) return $n;\n\t$res = 1;\n\twhile ($n > 0) {\n\t\
    \tif ($n & 1) {\n\t\t\t$res = ($res * $n) % $p;\n\t\t}\n\t\t$n = $n >> 1;\n\t\t\
    $n = ($n * $n) % $p;\n\t}\n\treturn $res;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660028830
- exit_code: -1
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\t$res = 1;\n\
    \t$n %= $p;\n\twhile ($n) {\n\t\tif ($n & 1) {\n\t\t\t$res = ($res * $n) % $p;\n\
    \t\t}\n\t\t$n = $n >> 1;\n\t\t$n = ($n * $n) % $p;\n\t}\n\treturn $res;\n}\n\n\
    function candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660028830
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if ($n\
    \ == 0) {\n        return 1;\n    }\n    $result = 1;\n    $factor = 2;\n    while\
    \ ($n != 0) {\n        if ($n % 2 == 1) {\n            $result = ($result * $factor)\
    \ % $p;\n        }\n        $factor = ($factor * $factor) % $p;\n        $n =\
    \ (int)($n / 2);\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028825
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $answer\
    \ = 1;\n    $base = 2;\n    while ($n) {\n        $pow = ($n % 2) ? 1 : 0;\n \
    \       if ($pow) {\n            $answer = ($answer * $base) % $p;\n        }\n\
    \        $base = ($base * $base) % $p;\n        $n = (int)($n / 2);\n    }\n \
    \   return $answer;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\tif($n >=\
    \ 0)\n\t\treturn pow(2, $n) % $p;\n\telse \n\t\treturn modinv(pow(2, -$n), $p);\n\
    }\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nDeprecated: Implicit conversion from float INF to int loses precision\
    \ in /tmp/tmpoyp0okxo.php on line 15\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpoyp0okxo.php:26\nStack trace:\n#0 /tmp/tmpoyp0okxo.php(34):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpoyp0okxo.php on line 26\n"
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\treturn bcmod(bcpow('2',\
    \ $n), $p);\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function bcmod() in /tmp/tmpipcg74oy.php:14\n\
    Stack trace:\n#0 /tmp/tmpipcg74oy.php(18): modp(3, 5)\n#1 /tmp/tmpipcg74oy.php(22):\
    \ candidate(3, 5)\n#2 /tmp/tmpipcg74oy.php(31): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpipcg74oy.php on line 14\n"
  timestamp: 1660028825
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $res =\
    \ 1;\n    for ($i = 0; $i < $n; $i++) {\n        $res = ($res * 2) % $p;\n   \
    \ }\n    return $res;\n}\n\necho modp(3, 5) . PHP_EOL;\necho modp(1101, 101) .\
    \ PHP_EOL;\necho modp(0, 101) . PHP_EOL;\necho modp(3, 11) . PHP_EOL;\necho modp(100,\
    \ 101) . PHP_EOL;\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '3

    2

    1

    8

    1

    '
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\treturn gmp_strval(gmp_mod(gmp_pow(2,\
    \ $n), $p));\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function gmp_strval()\
    \ in /tmp/tmphs7459tj.php:14\nStack trace:\n#0 /tmp/tmphs7459tj.php(18): modp(3,\
    \ 5)\n#1 /tmp/tmphs7459tj.php(22): candidate(3, 5)\n#2 /tmp/tmphs7459tj.php(31):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmphs7459tj.php on line 14\n"
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if ($n\
    \ == 0) {\n        return 1;\n    }\n    if ($n % 2 == 0) {\n        return modp(square($n\
    \ / 2), $p);\n    }\n    return ($n % $p) * modp(($n - 1) / 2, $p);\n}\n\nfunction\
    \ candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function square() in /tmp/tmp_1j6pkh_.php:18\n\
    Stack trace:\n#0 /tmp/tmp_1j6pkh_.php(20): modp(550, 101)\n#1 /tmp/tmp_1j6pkh_.php(24):\
    \ modp(1101, 101)\n#2 /tmp/tmp_1j6pkh_.php(29): candidate(1101, 101)\n#3 /tmp/tmp_1j6pkh_.php(37):\
    \ test()\n#4 {main}\n  thrown in /tmp/tmp_1j6pkh_.php on line 18\n"
  timestamp: 1660028825
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\t$res = 1;\n\
    \t$two_n = 2;\n\twhile ($n > 0) {\n\t\tif ($n % 2 == 1) {\n\t\t\t$res = ($res\
    \ * $two_n) % $p;\n\t\t}\n\t\t$two_n = ($two_n * $two_n) % $p;\n\t\t$n /= 2;\n\
    \t}\n\treturn $res;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Deprecated: Implicit conversion from float 1.5 to int loses precision in /tmp/tmpu2eb_tu1.php
    on line 17


    Deprecated: Implicit conversion from float 0.75 to int loses precision in /tmp/tmpu2eb_tu1.php
    on line 17


    Deprecated: Implicit conversion from float 0.375 to int loses precision in /tmp/tmpu2eb_tu1.php
    on line 17


    Deprecated: Implicit conversion from float 0.1875 to int loses precision in /tmp/tmpu2eb_tu1.php
    on line 17


    Deprecated: Implicit conversion from float 0.09375 to int loses precision in /tmp/tmpu2eb_tu1.php
    on line 17


    Deprecated: Implicit conversion from float 0.046875 to int loses precision in
    /tmp/tmpu2eb_tu1.php on line 17


    Deprecated: Implicit conversion from float 0.0234375 to int loses precision in
    /tmp/tmpu2eb_tu1.php on line 17


    Deprecated: Implicit conversion from float 0.01171875 to int loses precision in
    /tmp/tmpu2eb_tu1.php on line 17


    Deprecated: Implicit conversion from float 0.005859375 to int loses precision
    in /tmp/tmpu2eb_tu1.php on line 17


    Deprecated: Implicit conversion from float 0.0029296875 to int loses precision
    in /tmp/tmpu2eb_tu1.php on line 17


    Deprecated: Implicit conversion from float 0.00146484375 to int loses precision
    in /tmp/tmpu2eb_tu1.php on line 17


    Deprecated: Implicit conversion from float 0.000732421875 to int loses precision
    in /tmp/tmpu2eb_tu1.php on line 17


    Deprecated: Implicit conversion from float 0.0003662109375 to int loses precision
    in /tmp/tmpu2eb_tu1.php on line 17


    Deprecated: Implicit conversion from float 0.00018310546875 to int loses precision
    in /tmp/tmpu2eb_tu1.php on line 17


    Deprecated: Implicit conversion from float 9.1552734375E-5 to int loses precision
    in /tmp/tmpu2eb_tu1.php on line 17


    Deprecated: Implicit conversion from float 4.57763671875E-5 to int loses precision
    in /tmp/tmpu2eb_tu1.php on line 17


    Deprecated: Implicit conversion from float 2.288818359375E-5 to int loses precision
    in /tmp/tmpu2eb_tu1.php on line 17


    Deprecated: Implicit conversion from float 1.1444091796875E-5 to int loses precision
    in /tmp/tmpu2eb_tu1.php on lin'
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\tif ($n <\
    \ 0) {\n\t\treturn modp($n + $p * ceil(-$n / $p), $p);\n\t} else {\n\t\treturn\
    \ ($n % $p);\n\t}\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfnrewmr7.php:27\n\
    Stack trace:\n#0 /tmp/tmpfnrewmr7.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpfnrewmr7.php\
    \ on line 27\n"
  timestamp: 1660028825
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\t$modp=1;\n\
    \tfor ($i=0; $i<$n; $i++) {\n\t\t$modp = ($modp*2) % $p;\n\t}\n\treturn $modp;\n\
    }\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if ($n\
    \ == 0) {\n        return 1;\n    } else if ($n % 2 == 0) {\n        $tmp = modp($n\
    \ / 2, $p);\n        return ($tmp * $tmp) % $p;\n    } else {\n        $tmp =\
    \ modp($n - 1, $p);\n        return ($tmp * $n) % $p;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf5hjwp_8.php:31\n\
    Stack trace:\n#0 /tmp/tmpf5hjwp_8.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpf5hjwp_8.php\
    \ on line 31\n"
  timestamp: 1660028825
- exit_code: -1
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $k = 1;\n\
    \    while ($n > 0) {\n        if ($n % 2 != 0) {\n            $k = ($k * $n)\
    \ % $p;\n        }\n        $n = floor($n / 2);\n        $n = ($n * $n) % $p;\n\
    \    }\n    return $k;\n}\n\necho modp(0, 11).\"\\n\";\necho modp(1, 11).\"\\\
    n\";\necho modp(2, 11).\"\\n\";\necho modp(3, 11).\"\\n\";\necho modp(4, 11).\"\
    \\n\";\necho modp(5, 11).\"\\n\";\necho modp(6, 11).\"\\n\";\necho modp(7, 11).\"\
    \\n\";\necho modp(8, 11).\"\\n\";\necho modp(9, 11).\"\\n\";\necho modp(10, 11).\"\
    \\n\";\necho modp(11, 11).\"\\n\";\necho modp(12, 11).\"\\n\";\necho modp(13,\
    \ 11).\"\\n\";\necho modp(14, 11).\"\\n\";\necho modp(15, 11).\"\\n\";\necho modp(16,\
    \ 11).\"\\n\";\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: '1

    1

    1

    3

    '
  timestamp: 1660028830
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    // Special\
    \ case n = 0.\n    if ($n == 0) {\n        return 1;\n    }\n    // If n < 0,\
    \ we assume that the remainder\n    // of n/p is 0. I think that this can only\
    \ happen\n    // when n < 0 and p is a power of 2, but I'm not\n    // sure (Python\
    \ returns 0).\n    if ($n < 0) {\n        return 0;\n    }\n    // We assume that\
    \ p is an integer.\n    $r = 1;\n    $bit = 1;\n    while ($bit <= $n) {\n   \
    \     $r = $r * 2;\n        if ($r >= $p) {\n            $r = $r - $p;\n     \
    \   }\n        $bit = $bit * 2;\n    }\n    return $r;\n}\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvnyr1n9g.php:42\n\
    Stack trace:\n#0 /tmp/tmpvnyr1n9g.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpvnyr1n9g.php\
    \ on line 42\n"
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    // return\
    \ pow(2, $n) % $p;\n    $result = 1;\n    $bit = 1;\n    while ($n) {\n      \
    \  if ($n & $bit) {\n            $result = ($result * 2) % $p;\n            $n\
    \ -= $bit;\n        }\n        $bit <<= 1;\n        $result = ($result * $result)\
    \ % $p;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n   \
    \ return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101)\
    \ !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11)\
    \ !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb53j__c8.php:33\n\
    Stack trace:\n#0 /tmp/tmpb53j__c8.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpb53j__c8.php\
    \ on line 33\n"
  timestamp: 1660028825
- exit_code: -1
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\tif ($n ==\
    \ 0) {\n\t\treturn 1;\n\t}\n\tif ($n == 1) {\n\t\treturn $n;\n\t}\n\treturn (modp($n/2,\
    \ $p) * modp($n/2, $p) * modp($n%2, $p)) % $p;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: '

    Deprecated: Implicit conversion from float 5.0E-324 to int loses precision in
    /tmp/tmpulu76_sc.php on line 20


    Deprecated: Implicit conversion from float 5.0E-324 to int loses precision in
    /tmp/tmpulu76_sc.php on line 20


    Deprecated: Implicit conversion from float 1.0E-323 to int loses precision in
    /tmp/tmpulu76_sc.php on line 20


    Deprecated: Implicit conversion from float 5.0E-324 to int loses precision in
    /tmp/tmpulu76_sc.php on line 20


    Deprecated: Implicit conversion from float 5.0E-324 to int loses precision in
    /tmp/tmpulu76_sc.php on line 20


    Deprecated: Implicit conversion from float 1.0E-323 to int loses precision in
    /tmp/tmpulu76_sc.php on line 20


    Deprecated: Implicit conversion from float 1.5E-323 to int loses precision in
    /tmp/tmpulu76_sc.php on line 20


    Deprecated: Implicit conversion from float 5.0E-324 to int loses precision in
    /tmp/tmpulu76_sc.php on line 20


    Deprecated: Implicit conversion from float 5.0E-324 to int loses precision in
    /tmp/tmpulu76_sc.php on line 20


    Deprecated: Implicit conversion from float 1.0E-323 to int loses precision in
    /tmp/tmpulu76_sc.php on line 20


    Deprecated: Implicit conversion from float 5.0E-324 to int loses precision in
    /tmp/tmpulu76_sc.php on line 20


    Deprecated: Implicit conversion from float 5.0E-324 to int loses precision in
    /tmp/tmpulu76_sc.php on line 20


    Deprecated: Implicit conversion from float 1.0E-323 to int loses precision in
    /tmp/tmpulu76_sc.php on line 20


    Deprecated: Implicit conversion from float 1.5E-323 to int loses precision in
    /tmp/tmpulu76_sc.php on line 20


    Deprecated: Implicit conversion from float 3.0E-323 to int loses precision in
    /tmp/tmpulu76_sc.php on line 20


    Deprecated: Implicit conversion from float 5.0E-324 to int loses precision in
    /tmp/tmpulu76_sc.php on line 20


    Deprecated: Implicit conversion from float 5.0E-324 to int loses precision in
    /tmp/tmpulu76_sc.php on line 20


    Deprecated: Implicit conversion from float 1.0E-323 to int loses precision in
    /tmp/tmpulu76_sc.php on line 20


    Deprecated: Implicit conversion from float 5.0E-3'
  timestamp: 1660028830
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\t$n = intval($n);\n\
    \t$p = intval($p);\n\t\n\t$result = 1;\n\tfor ($i = 0; $i < $n; $i++) {\n\t\t\
    $result = bcmod(bcmul($result, 2), $p);\n\t}\n\treturn $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function bcmod() in /tmp/tmpwkk49l9e.php:19\n\
    Stack trace:\n#0 /tmp/tmpwkk49l9e.php(25): modp(3, 5)\n#1 /tmp/tmpwkk49l9e.php(29):\
    \ candidate(3, 5)\n#2 /tmp/tmpwkk49l9e.php(38): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpwkk49l9e.php on line 19\n"
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    while ($n != 0) {\n        if ($n & 1) {\n            $r = ($r * $p) % $p;\n\
    \        }\n        $p = ($p * $p) % $p;\n        $n = ($n >> 1);\n    }\n   \
    \ return $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmprri12y5g.php:17\n\
    Stack trace:\n#0 /tmp/tmprri12y5g.php(26): modp(1, 0)\n#1 /tmp/tmprri12y5g.php(30):\
    \ candidate(3, 5)\n#2 /tmp/tmprri12y5g.php(39): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmprri12y5g.php on line 17\n"
  timestamp: 1660028825
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if ($n\
    \ == 0) {\n        return 1;\n    }\n    $ans = modp($n >> 1, $p);\n    $ans =\
    \ ($ans * $ans) % $p;\n    if ($n & 1) {\n        $ans = ($ans * 2) % $p;\n  \
    \  }\n    return $ans;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028825
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $result\
    \ = 1;\n    for ($i = 0; $i < $n; $i++) {\n        $result = ($result * 2) % $p;\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\tif ($n ==\
    \ 0) {\n\t\treturn 1;\n\t}\n\tif ($n % 2 == 0) {\n\t\t$y = modp($n / 2, $p);\n\
    \t\treturn ($y * $y) % $p;\n\t}\n\treturn ($n % $p) * modp($n - 1, $p) % $p;\n\
    }\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo3hhp378.php:30\n\
    Stack trace:\n#0 /tmp/tmpo3hhp378.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpo3hhp378.php\
    \ on line 30\n"
  timestamp: 1660028825
- exit_code: -1
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\t$r = 1;\n\
    \t$n = $n % $p;\n\twhile ($n) {\n\t\tif ($n & 1)\n\t\t\t$r = ($r * $n) % $p;\n\
    \t\t$n = $n >> 1;\n\t\t$n = ($n * $n) % $p;\n\t}\n\treturn $r;\n}\n\nfunction\
    \ candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660028830
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\t// If n is\
    \ even, replace n with n/2.\n\tif ($n % 2 == 0) {\n\t\t$n = $n / 2;\n\t}\n\telse\
    \ {\n\t\t//If n is odd and nonzero, replace n with (n+p)/2.\n\t\tif ($n != 0)\
    \ {\n\t\t\t$n = ($n + $p) / 2;\n\t\t}\n\t\t// If n is odd and zero, return p^2.\n\
    \t\telse {\n\t\t\treturn pow($p, 2);\n\t\t}\n\t}\n\t// If n is even and nonzero,\
    \ return (2 * modp(n, p) * modp(n, p)) mod p.\n\tif ($n != 0) {\n\t\treturn (2\
    \ * modp($n, $p) * modp($n, $p)) % $p;\n\t}\n\t// If n is even and zero, return\
    \ p.\n\telse {\n\t\treturn $p;\n\t}\n}\n\nfunction candidate(...$args) {\n   \
    \ return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101)\
    \ !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11)\
    \ !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    262144 bytes) in /tmp/tmpu_2wkhrn.php on line 30

    '
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\tif ($n ==\
    \ 0) return 1;\n\tif ($n % 2 == 0) {\n\t\t$x = modp($n/2, $p);\n\t\treturn ($x\
    \ * $x) % $p;\n\t} else {\n\t\treturn ($n % $p) * modp($n-1, $p) % $p;\n\t}\n\
    }\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj2gvgt0k.php:29\n\
    Stack trace:\n#0 /tmp/tmpj2gvgt0k.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpj2gvgt0k.php\
    \ on line 29\n"
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if ($n\
    \ == 0) {\n        return 1;\n    }\n    $res = 1;\n    $b = $n;\n    while ($p\
    \ > 0) {\n        if ($p & 1) {\n            $res = ($res * $b) % PHP_INT_MAX;\n\
    \        }\n        $p >>= 1;\n        $b = ($b * $b) % PHP_INT_MAX;\n    }\n\
    \    return $res;\n}\n$fact = 1;\nfor ($n = 1; $n <= 100; $n++) {\n    $fact =\
    \ ($fact * $n) % PHP_INT_MAX;\n}\n$res = modp($fact, PHP_INT_MAX - 1);\necho $res,\
    \ \"\\n\";\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Deprecated: Implicit conversion from float 5.109094217170944E+19 to int loses
    precision in /tmp/tmpd66m4lg2.php on line 30


    Deprecated: Implicit conversion from float -9.348438108722273E+19 to int loses
    precision in /tmp/tmpd66m4lg2.php on line 30


    Deprecated: Implicit conversion from float -2.8765196529524277E+19 to int loses
    precision in /tmp/tmpd66m4lg2.php on line 30


    Deprecated: Implicit conversion from float 1.9507899882947582E+20 to int loses
    precision in /tmp/tmpd66m4lg2.php on line 30


    Deprecated: Implicit conversion from float -1.958796495332311E+20 to int loses
    precision in /tmp/tmpd66m4lg2.php on line 30


    Deprecated: Implicit conversion from float 1.8289791721692306E+20 to int loses
    precision in /tmp/tmpd66m4lg2.php on line 30


    Deprecated: Implicit conversion from float -4.2377135044656366E+19 to int loses
    precision in /tmp/tmpd66m4lg2.php on line 30


    Deprecated: Implicit conversion from float -1.5354211312264335E+20 to int loses
    precision in /tmp/tmpd66m4lg2.php on line 30


    Deprecated: Implicit conversion from float -1.7307665545604104E+20 to int loses
    precision in /tmp/tmpd66m4lg2.php on line 30


    Deprecated: Implicit conversion from float -2.1167876377965232E+20 to int loses
    precision in /tmp/tmpd66m4lg2.php on line 30


    Deprecated: Implicit conversion from float -2.7170194803426486E+20 to int loses
    precision in /tmp/tmpd66m4lg2.php on line 30


    Deprecated: Implicit conversion from float 1.599748182841093E+20 to int loses
    precision in /tmp/tmpd66m4lg2.php on line 30


    Deprecated: Implicit conversion from float -1.9951398651612994E+20 to int loses
    precision in /tmp/tmpd66m4lg2.php on line 30


    Deprecated: Implicit conversion from float 1.1560674201895436E+20 to int loses
    precision in /tmp/tmpd66m4lg2.php on line 30


    Deprecated: Implicit conversion from float 1.7241971518439686E+20 to int loses
    precision in /tmp/tmpd66m4lg2.php on line 30


    Deprecated: Implicit conversion from float 2.303646667563923E+20 to int loses
    precision in /tmp/tmpd66m4lg2.php on line 30


    Deprecated: Implicit conversion from float '
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\tif ($n ==\
    \ 0) {\n\t\treturn 1;\n\t}\n\tif ($n == 1) {\n\t\treturn $n;\n\t}\n\tif ($n %\
    \ 2 == 0) {\n\t\t$m = modp($n / 2, $p);\n\t\treturn ($m * $m) % $p;\n\t}\n\treturn\
    \ ($n * modp($n - 1, $p)) % $p;\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0bmq74js.php:33\n\
    Stack trace:\n#0 /tmp/tmp0bmq74js.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp0bmq74js.php\
    \ on line 33\n"
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\t$n = intval($n);\n\
    \t$p = intval($p);\n\t\n\tif ($n == 0) {\n\t\treturn 1;\n\t}\n\t\n\t$r = 1;\n\t\
    $n2 = ($n % ($p - 1));\n\t\n\twhile ($n2 > 0) {\n\t\tif ($n2 % 2 == 1) {\n\t\t\
    \t$r = ($r * 2) % $p;\n\t\t}\n\t\t$n2 = intval($n2 / 2);\n\t\tif ($n2 > 0) {\n\
    \t\t\t$r = ($r * $r) % $p;\n\t\t}\n\t}\n\t\n\treturn $r;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt2sp2r_a.php:47\n\
    Stack trace:\n#0 /tmp/tmpt2sp2r_a.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpt2sp2r_a.php\
    \ on line 47\n"
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\t$r = 1;\n\
    \t$n = $n % $p;\n\n\twhile ($n > 0) {\n\t\t$r = ($r * ($n % 2 ? $n : 1)) % $p;\n\
    \t\t$n = floor($n / 2);\n\t}\n\n\treturn $r;\n}\n\n$n = 1;\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvqh7jpe7.php:33\n\
    Stack trace:\n#0 /tmp/tmpvqh7jpe7.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpvqh7jpe7.php\
    \ on line 33\n"
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if ($n\
    \ === 0) {\n        return 1;\n    }\n    $v = modp(floor($n / 2), $p);\n    if\
    \ ($n % 2 === 0) {\n        return $v * $v % $p;\n    } else {\n        return\
    \ $v * $v * $n % $p;\n    }\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    262144 bytes) in /tmp/tmp617vxn84.php on line 17

    '
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\t$bin = decbin($n);\n\
    \t$r = 1;\n\tfor ($i = 0; $i < strlen($bin); $i++) {\n\t\t$r = bcmul($r, $r, $p);\n\
    \t\tif ($bin[$i] == \"1\") {\n\t\t\t$r = bcmod(bcmul($r, 2, $p), $p);\n\t\t}\n\
    \t}\n\treturn $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function bcmul() in /tmp/tmp5t2z0xfj.php:17\n\
    Stack trace:\n#0 /tmp/tmp5t2z0xfj.php(26): modp(3, 5)\n#1 /tmp/tmp5t2z0xfj.php(30):\
    \ candidate(3, 5)\n#2 /tmp/tmp5t2z0xfj.php(39): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmp5t2z0xfj.php on line 17\n"
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if ($n\
    \ == 0) return 1;\n    if ($n == 1) return $n;\n    if ($n % 2 == 0) {\n     \
    \   return (modp($n / 2, $p) ** 2) % $p;\n    } else {\n        return ((modp($n\
    \ / 2, $p) ** 2) * $n) % $p;\n    }\n}\n\necho modp(3, 5) . \"\\n\";\necho modp(1101,\
    \ 101) . \"\\n\";\necho modp(0, 101) . \"\\n\";\necho modp(3, 11) . \"\\n\";\n\
    echo modp(100, 101) . \"\\n\";\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Deprecated: Implicit conversion from float 1.5 to int loses precision in /tmp/tmpiq_qsj07.php
    on line 16


    Deprecated: Implicit conversion from float 0.75 to int loses precision in /tmp/tmpiq_qsj07.php
    on line 16


    Deprecated: Implicit conversion from float 0.375 to int loses precision in /tmp/tmpiq_qsj07.php
    on line 16


    Deprecated: Implicit conversion from float 0.1875 to int loses precision in /tmp/tmpiq_qsj07.php
    on line 16


    Deprecated: Implicit conversion from float 0.09375 to int loses precision in /tmp/tmpiq_qsj07.php
    on line 16


    Deprecated: Implicit conversion from float 0.046875 to int loses precision in
    /tmp/tmpiq_qsj07.php on line 16


    Deprecated: Implicit conversion from float 0.0234375 to int loses precision in
    /tmp/tmpiq_qsj07.php on line 16


    Deprecated: Implicit conversion from float 0.01171875 to int loses precision in
    /tmp/tmpiq_qsj07.php on line 16


    Deprecated: Implicit conversion from float 0.005859375 to int loses precision
    in /tmp/tmpiq_qsj07.php on line 16


    Deprecated: Implicit conversion from float 0.0029296875 to int loses precision
    in /tmp/tmpiq_qsj07.php on line 16


    Deprecated: Implicit conversion from float 0.00146484375 to int loses precision
    in /tmp/tmpiq_qsj07.php on line 16


    Deprecated: Implicit conversion from float 0.000732421875 to int loses precision
    in /tmp/tmpiq_qsj07.php on line 16


    Deprecated: Implicit conversion from float 0.0003662109375 to int loses precision
    in /tmp/tmpiq_qsj07.php on line 16


    Deprecated: Implicit conversion from float 0.00018310546875 to int loses precision
    in /tmp/tmpiq_qsj07.php on line 16


    Deprecated: Implicit conversion from float 9.1552734375E-5 to int loses precision
    in /tmp/tmpiq_qsj07.php on line 16


    Deprecated: Implicit conversion from float 4.57763671875E-5 to int loses precision
    in /tmp/tmpiq_qsj07.php on line 16


    Deprecated: Implicit conversion from float 2.288818359375E-5 to int loses precision
    in /tmp/tmpiq_qsj07.php on line 16


    Deprecated: Implicit conversion from float 1.1444091796875E-5 to int loses precision
    in /tmp/tmpiq_qsj07.php on lin'
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    while ($n != 0) {\n        if ($n & 1) {\n            $r = ($r * $p) % MOD;\n\
    \        }\n        $p = ($p * $p) % MOD;\n        $n >>= 1;\n    }\n    return\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Undefined constant \"MOD\" in /tmp/tmpsync52pz.php:17\n\
    Stack trace:\n#0 /tmp/tmpsync52pz.php(26): modp(3, 5)\n#1 /tmp/tmpsync52pz.php(30):\
    \ candidate(3, 5)\n#2 /tmp/tmpsync52pz.php(39): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpsync52pz.php on line 17\n"
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    while ($n > 0) {\n        if ($n & 1) {\n            $r = ($r * $n) % $p;\n\
    \        }\n        $n = ($n >> 1) % $p;\n    }\n    return $r;\n}\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5kbki8eu.php:29\n\
    Stack trace:\n#0 /tmp/tmp5kbki8eu.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp5kbki8eu.php\
    \ on line 29\n"
  timestamp: 1660028825
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    // Return\
    \ 2^n modulo p (be aware of numerics).\n    $b = 1;\n    for ($i = 0; $i < $n;\
    \ $i++) {\n        $b = ($b * 2) % $p;\n    }\n    return $b;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028825
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $res =\
    \ 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $res = ($res * 2) % $p;\n  \
    \  }\n    return $res;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\t$r = 1;\n\
    \twhile ($n > 0) {\n\t\tif ($n & 1) {\n\t\t\t$r = ($r * $p) % (1 << 32);\n\t\t\
    }\n\t\t$p = ($p * $p) % (1 << 32);\n\t\t$n >>= 1;\n\t}\n\treturn $r;\n}\n\nfunction\
    \ candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfao_2ldo.php:30\n\
    Stack trace:\n#0 /tmp/tmpfao_2ldo.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpfao_2ldo.php\
    \ on line 30\n"
  timestamp: 1660028825
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if ($n\
    \ < 0) {\n        return 1;\n    }\n    elseif ($n == 0) {\n        return 1;\n\
    \    }\n    elseif ($n % 2 == 0) {\n        $r = modp($n / 2, $p);\n        return\
    \ $r * $r % $p;\n    }\n    else {\n        $r = modp(($n - 1) / 2, $p);\n   \
    \     return 2 * $r * $r % $p;\n    }\n}\n\nfunction candidate(...$args) {\n \
    \   return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028825
- exit_code: -1
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $res =\
    \ 1;\n    while ($n > 0) {\n        if ($n & 1)\n            $res = ($res * $n)\
    \ % $p;\n        $n = ($n * $n) % $p;\n    }\n    return $res;\n}\n\nfunction\
    \ candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660028830
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\t$a = 1;\n\
    \t$m = $n;\n\t$b = 0;\n\t$p = array();\n\twhile ($m > 0) {\n\t\tarray_push($p,\
    \ $m & 1);\n\t\t$m = $m >> 1;\n\t}\n\t$x = count($p);\n\twhile ($x > 0) {\n\t\t\
    $x--;\n\t\t$b = (2 * $b) % $p;\n\t\tif ($p[$x] == 1) {\n\t\t\t$b = ($b + $a) %\
    \ $p;\n\t\t}\n\t\t$a = (2 * $a) % $p;\n\t}\n\treturn $b;\n}\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: Unsupported operand types: int % array\
    \ in /tmp/tmpij78wbe1.php:25\nStack trace:\n#0 /tmp/tmpij78wbe1.php(34): modp(3,\
    \ Array)\n#1 /tmp/tmpij78wbe1.php(38): candidate(3, 5)\n#2 /tmp/tmpij78wbe1.php(47):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpij78wbe1.php on line 25\n"
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\tif ($n ==\
    \ 0) {\n\t\treturn 1;\n\t}\n\tif ($n == 1) {\n\t\treturn $n;\n\t}\n\tif ($n %\
    \ 2 == 0) {\n\t\t$tmp = modp($n / 2, $p);\n\t\treturn ($tmp * $tmp) % $p;\n\t\
    }\n\treturn ($n * modp($n - 1, $p)) % $p;\n}\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpva5vi4ee.php:32\n\
    Stack trace:\n#0 /tmp/tmpva5vi4ee.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpva5vi4ee.php\
    \ on line 32\n"
  timestamp: 1660028825
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\t$n = (int)$n;\n\
    \t$p = (int)$p;\n\t$c = 1;\n\tfor ($i = 0; $i < $n; $i++) {\n\t\t$c = $c * 2 %\
    \ $p;\n\t}\n\treturn $c;\n}\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if ($n\
    \ == 0) {\n        return 1;\n    }\n    $tmp = 0;\n    $n = $n % $p;\n\n    if\
    \ ($n < 0) {\n        $n = $n + $p;\n    }\n\n    $res = 1;\n    $tmp = $n;\n\
    \    for ($i = 1; $i < PHP_INT_SIZE * 8; $i = $i + 1) {\n        $tmp = ($tmp\
    \ * $tmp) % $p;\n        if ((1 << $i) & $n) {\n            $res = ($res * $tmp)\
    \ % $p;\n        }\n    }\n    return $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpam9gt70q.php:40\n\
    Stack trace:\n#0 /tmp/tmpam9gt70q.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpam9gt70q.php\
    \ on line 40\n"
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $result\
    \ = 1;\n    $power = $n;\n    while ($power > 0) {\n        if ($power & 1) {\n\
    \            $result = ($result * $n) % $p;\n        }\n        $n = ($n * $n)\
    \ % $p;\n        $power >>= 1;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppkkbplt5.php:31\n\
    Stack trace:\n#0 /tmp/tmppkkbplt5.php(40): test()\n#1 {main}\n  thrown in /tmp/tmppkkbplt5.php\
    \ on line 31\n"
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $result\
    \ = 1;\n    while ($n != 0) {\n        $result = ($result * ($n % 2 == 1 ? 2 :\
    \ 1)) % $p;\n        $n = (int)($n / 2);\n    }\n    return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0acgjjim.php:26\n\
    Stack trace:\n#0 /tmp/tmp0acgjjim.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp0acgjjim.php\
    \ on line 26\n"
  timestamp: 1660028825
- exit_code: -1
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    while ($n > 0) {\n        if ($n & 1) {\n            $r = ($r * $n) % $p;\n\
    \        }\n        $n = ($n * $n) % $p;\n    }\n    return $r;\n}\n\nfunction\
    \ candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660028830
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if ($n\
    \ == 0) return 1;\n    else {\n        $half = modp($n >> 1, $p);\n        $result\
    \ = $half * $half % $p;\n        if ($n & 1) {\n            $result = $result\
    \ * 2 % $p;\n        }\n        return $result;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028825
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\t$result =\
    \ 1;\n\t$bin = base_convert($n, 10, 2);\n\t$len = strlen($bin);\n\tfor ($i = 0;\
    \ $i < $len; $i++) {\n\t\t$result = ($result * $result) % $p;\n\t\tif ($bin[$i]\
    \ == '1') {\n\t\t\t$result = ($result * 2) % $p;\n\t\t}\n\t}\n\treturn $result;\n\
    }\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if ($n\
    \ == 0) return 1;\n    if ($n == 1) return $n;\n    if ($n % 2 == 0) return square(modp($n/2,\
    \ $p)) % $p;\n    else return ($n * modp($n-1, $p)) % $p;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function square() in /tmp/tmphy1g9z5t.php:16\n\
    Stack trace:\n#0 /tmp/tmphy1g9z5t.php(17): modp(2, 5)\n#1 /tmp/tmphy1g9z5t.php(21):\
    \ modp(3, 5)\n#2 /tmp/tmphy1g9z5t.php(25): candidate(3, 5)\n#3 /tmp/tmphy1g9z5t.php(34):\
    \ test()\n#4 {main}\n  thrown in /tmp/tmphy1g9z5t.php on line 16\n"
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\tif ($n <\
    \ 0) {\n\t\t$n = $n + ceil(-$n / $p) * $p;\n\t}\n\t$result = 1;\n\t$bit = 1;\n\
    \twhile ($bit <= $n) {\n\t\tif ($n & $bit) {\n\t\t\t$result = $result * $bit %\
    \ $p;\n\t\t}\n\t\t$bit = $bit << 1;\n\t}\n\treturn $result;\n}\n\n$p = array_sum(range(1,\
    \ 6));\n$q = array_sum(range(7, 12));\n$r = array_sum(range(13, 18));\n$s = array_sum(range(19,\
    \ 24));\n$t = array_sum(range(25, 30));\n$u = array_sum(range(31, 36));\n\n$powers\
    \ = array(\n\t0 => 1,\n\t1 => 6,\n\t2 => 36,\n\t3 => 216,\n\t4 => 1296,\n\t5 =>\
    \ 7776,\n\t6 => 46656,\n\t7 => 279936,\n\t8 => 1679616,\n\t9 => 10077696,\n\t\
    10 => 60466176,\n\t11 => 362797056,\n\t12 => 2176782336,\n\t13 => 13060694016,\n\
    \t14 => 78364164096,\n\t15 => 470184984576,\n\t16 => 2821109907456,\n\t17 => 16926659444736,\n\
    \t18 => 101559956668416,\n\t19 => 609359740010496,\n\t20 => 3656158440062976,\n\
    \t21 => 21936950640377856,\n\t22 => 131621703842267136,\n\t23 => 789730223053602816,\n\
    \t24 => 4738381338321616896,\n\t25 => 28430288029929701376,\n\t26 => 170581728179578208256,\n\
    \t27 => 1023490369077884082176,\n\t28 => 6140942214464815495168,\n\t29 => 36845653286788892989440,\n\
    \t\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpl7ibbqyv.php on line 67

    '
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\tif ($n ==\
    \ 0) return 1;\n\tif ($n % 2 == 0) return modp((($n/2)%$p)**2, $p);\n\telse return\
    \ ($n%$p)*modp((($n-1)/2)**2, $p);\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    262144 bytes) in /tmp/tmptcpnqqv_.php on line 15

    '
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\t// If $n\
    \ is too large to be an integer, just keep the remainder.\n\tif ($n >= PHP_INT_MAX\
    \ - 1)\n\t\t$n = (int) ($n % $p);\n\t// Keep the remainder of a power of two.\n\
    \telse if ($n & ($n - 1))\n\t\t$n = (int) ($n % $p);\n\tif ($n < 0)\n\t\t$n +=\
    \ $p;\n\t$a = 1;\n\twhile ($n) {\n\t\tif ($n & 1)\n\t\t\t$a = ($a * 2) % $p;\n\
    \t\t$n >>= 1;\n\t\t$p = ($p * 2) % 101;\n\t}\n\treturn $a;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6w4gvqgp.php:37\n\
    Stack trace:\n#0 /tmp/tmp6w4gvqgp.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp6w4gvqgp.php\
    \ on line 37\n"
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\t$r = 1;\n\
    \t$b = $n;\n\twhile ($n > 0) {\n\t\tif ($n & 1) {\n\t\t\t$r = ($r * $b) % $p;\n\
    \t\t}\n\t\t$b = ($b * $b) % $p;\n\t\t$n >>= 1;\n\t}\n\treturn $r;\n}\n\n$p = 101;\n\
    $x = 100;\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2z7kp_4t.php:34\n\
    Stack trace:\n#0 /tmp/tmp2z7kp_4t.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp2z7kp_4t.php\
    \ on line 34\n"
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if ($n\
    \ == 0) return 1;\n    if ($n % 2 == 0) {\n        $r = modp($n / 2, $p);\n  \
    \      return $r * $r % $p;\n    } else {\n        return $n * modp($n - 1, $p)\
    \ % $p;\n    }\n}\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp32syw58f.php:28\n\
    Stack trace:\n#0 /tmp/tmp32syw58f.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp32syw58f.php\
    \ on line 28\n"
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $n = (int)$n;\n    $p = (int)$p;\n    for ($i = 0; $i < strlen(decbin($n));\
    \ $i++) {\n        $r = $r * $r % $p;\n        if (($n & (1 << $i)) != 0) {\n\
    \            $r = $r * 2 % $p;\n        }\n    }\n    return $r;\n}\n\nfunction\
    \ candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfj6c6c02.php:32\n\
    Stack trace:\n#0 /tmp/tmpfj6c6c02.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpfj6c6c02.php\
    \ on line 32\n"
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if ($n\
    \ < 0) {\n        $n = $n + ceil(-$n / $p) * $p;\n    }\n    $n = $n % $p;\n \
    \   $r = 1;\n    $s = 2;\n    while ($n > 0) {\n        if ($n % 2) {\n      \
    \      $r = ($r * $s) % $p;\n        }\n        $s = ($s * $s) % $p;\n       \
    \ $n = floor($n / 2);\n    }\n    return $r;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxbo5tlk1.php:36\n\
    Stack trace:\n#0 /tmp/tmpxbo5tlk1.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpxbo5tlk1.php\
    \ on line 36\n"
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $modp =\
    \ 1;\n    $nmodp = $n % $p;\n    while ($nmodp > 0) {\n        if ($nmodp & 1)\
    \ {\n            $modp = ($modp * $n) % $p;\n        }\n        $n = ($n * $n)\
    \ % $p;\n        $nmodp >>= 1;\n    }\n    return $modp;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_pm6rlyq.php:31\n\
    Stack trace:\n#0 /tmp/tmp_pm6rlyq.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp_pm6rlyq.php\
    \ on line 31\n"
  timestamp: 1660028825
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $res =\
    \ 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $res = ($res * 2) % $p;\n  \
    \  }\n    return $res;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $pow =\
    \ $n;\n    $res = 1;\n    while ($pow > 0) {\n        if ($pow & 1) {\n      \
    \      $res = ($res * $n) % $p;\n        }\n        $n = ($n * $n) % $p;\n   \
    \     $pow = (int)($pow / 2);\n    }\n    return $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxwn38_dz.php:31\n\
    Stack trace:\n#0 /tmp/tmpxwn38_dz.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpxwn38_dz.php\
    \ on line 31\n"
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if ($n\
    \ == 0) {\n        return 1;\n    }\n    $result = 1;\n    while ($n > 0) {\n\
    \        if ($n % 2 != 0) {\n            $result = ($result * $p) % $n;\n    \
    \    }\n        $p = ($p * $p) % $n;\n        $n = $n / 2;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nDeprecated: Implicit conversion from float 1.5 to int loses precision\
    \ in /tmp/tmpwz_t29sl.php on line 19\n\nDeprecated: Implicit conversion from float\
    \ 1.5 to int loses precision in /tmp/tmpwz_t29sl.php on line 20\n\nDeprecated:\
    \ Implicit conversion from float 1.5 to int loses precision in /tmp/tmpwz_t29sl.php\
    \ on line 22\n\nDeprecated: Implicit conversion from float 0.75 to int loses precision\
    \ in /tmp/tmpwz_t29sl.php on line 19\n\nDeprecated: Implicit conversion from float\
    \ 0.75 to int loses precision in /tmp/tmpwz_t29sl.php on line 22\n\nFatal error:\
    \ Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpwz_t29sl.php:22\nStack\
    \ trace:\n#0 /tmp/tmpwz_t29sl.php(29): modp(0.75, 0)\n#1 /tmp/tmpwz_t29sl.php(33):\
    \ candidate(3, 5)\n#2 /tmp/tmpwz_t29sl.php(42): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpwz_t29sl.php on line 22\n"
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if ($n\
    \ == 0) {\n        return 1;\n    }\n    $res = 1;\n    $a = $n;\n    while ($p\
    \ > 0) {\n        if ($p & 1) {\n            $res = ($res * $a) % 101;\n     \
    \   }\n        $a = ($a * $a) % 101;\n        $p >>= 1;\n    }\n    return $res;\n\
    }\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg1wxzdkt.php:34\n\
    Stack trace:\n#0 /tmp/tmpg1wxzdkt.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpg1wxzdkt.php\
    \ on line 34\n"
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\t$r = 1;\n\
    \twhile ($n > 0) {\n\t\tif ($n & 1)\n\t\t\t$r = ($r * $p) % 998244353;\n\t\t$p\
    \ = ($p * $p) % 998244353;\n\t\t$n >>= 1;\n\t}\n\treturn $r;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprr6lsosd.php:29\n\
    Stack trace:\n#0 /tmp/tmprr6lsosd.php(38): test()\n#1 {main}\n  thrown in /tmp/tmprr6lsosd.php\
    \ on line 29\n"
  timestamp: 1660028825
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\t$p = (int)$p;\n\
    \tif ($p == 0) return 1;\n\t$c = 1;\n\tfor ($i = 0; $i < $n; $i++) {\n\t\t$c =\
    \ $c * 2;\n\t\tif ($c >= $p) $c = $c - $p;\n\t}\n\treturn $c;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028825
- exit_code: -1
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    // $n has\
    \ to be an integer, $p has to be a prime.\n    $r = 1;\n    while ($n != 0) {\n\
    \        if ($n & 1) {\n            $r = ($r * $n) % $p;\n        }\n        $n\
    \ = $n >> 1;\n        $n = ($n * $n) % $p;\n    }\n    return $r;\n}\n\nfunction\
    \ candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660028831
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $result\
    \ = 1;\n    for ($i = 0; $i < $n; $i++) {\n        $result = ($result * 2) % $p;\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\tif ($n ==\
    \ 0) {\n\t\treturn 1;\n\t}\n\tif ($n % 2 == 0) {\n\t\treturn pow(modp($n / 2,\
    \ $p), 2) % $p;\n\t}\n\treturn ($n % $p) * modp($n - 1, $p) % $p;\n}\n\nfunction\
    \ candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1xuaprr5.php:29\n\
    Stack trace:\n#0 /tmp/tmp1xuaprr5.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp1xuaprr5.php\
    \ on line 29\n"
  timestamp: 1660028825
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if (empty($n))\
    \ {\n        return 1;\n    }\n    if ($n & 1) {\n        return ((2 * modp($n-1,\
    \ $p)) % $p);\n    } else {\n        $m = modp($n/2, $p);\n        return ($m\
    \ * $m) % $p;\n    }\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\t$ret = 1;\n\
    \t$pow = $n;\n\twhile ($pow > 0) {\n\t\tif ($pow & 1) {\n\t\t\t$ret = ($ret *\
    \ $n) % $p;\n\t\t}\n\t\t$n = ($n * $n) % $p;\n\t\t$pow >>= 1;\n\t}\n\treturn $ret;\n\
    }\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpioc5q5bz.php:31\n\
    Stack trace:\n#0 /tmp/tmpioc5q5bz.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpioc5q5bz.php\
    \ on line 31\n"
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\tif($n ==\
    \ 0) return 1;\n\tif($n == 1) return $n;\n\t$res = $n;\n\tfor($i = 1; $i < $p-1;\
    \ $i++) {\n\t\t$res = ($res * $n) % $p;\n\t}\n\treturn $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5v23gl9r.php:28\n\
    Stack trace:\n#0 /tmp/tmp5v23gl9r.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp5v23gl9r.php\
    \ on line 28\n"
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $res =\
    \ 1;\n    while ($n > 0) {\n        if ($n & 1) {\n            $res = ($res *\
    \ $p) % 1000000007;\n        }\n        $p = ($p * $p) % 1000000007;\n       \
    \ $n = (int)($n / 2);\n    }\n    return $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgbmrrpcy.php:30\n\
    Stack trace:\n#0 /tmp/tmpgbmrrpcy.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpgbmrrpcy.php\
    \ on line 30\n"
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\tif($n < 0)\
    \ {\n\t\t$n += (ceil(-$n/$p) + 1) * $p;\n\t}\n\t$n %= $p;\n\t$m = 1;\n\tfor($i\
    \ = 1; $i <= $n; $i++) {\n\t\t$m = ($m * 2) % $p;\n\t}\n\treturn $m;\n}\n\nfunction\
    \ candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk5svevs0.php:31\n\
    Stack trace:\n#0 /tmp/tmpk5svevs0.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpk5svevs0.php\
    \ on line 31\n"
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    // Check\
    \ that 0 <= $n < $p.\n    if ($n < 0 || $n >= $p) {\n        $n = $n % $p;\n \
    \   }\n    // Check that 0 <= $n < $p.\n    if ($n < 0) {\n        $n += $p;\n\
    \    }\n    // Now 0 <= $n < $p, so we can proceed.\n    $res = 1;\n    $b = $n;\n\
    \    while ($b != 0) {\n        // Is b odd?\n        if (($b & 1) != 0) {\n \
    \           $res = ($res * $n) % $p;\n        }\n        $b >>= 1;\n        $n\
    \ = ($n * $n) % $p;\n    }\n    return $res;\n}\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4a2_qmzk.php:40\n\
    Stack trace:\n#0 /tmp/tmp4a2_qmzk.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp4a2_qmzk.php\
    \ on line 40\n"
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\tif ($n ==\
    \ 0) {\n\t\treturn 1;\n\t} else if ($n == 1) {\n\t\treturn 2;\n\t} else if ($n\
    \ & 1) {\n\t\treturn ((modp($n >> 1, $p) % $p) * (2 % $p)) % $p;\n\t} else {\n\
    \t\t$x = modp($n >> 1, $p);\n\t\treturn (($x % $p) * ($x % $p)) % $p;\n\t}\n}\n\
    \nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpppju3rak.php:31\n\
    Stack trace:\n#0 /tmp/tmpppju3rak.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpppju3rak.php\
    \ on line 31\n"
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if (bccomp($n,\
    \ 0) == 0) return bcpow(2, 0, $p);\n    if (bccomp($n, 0) < 0) return bcpow(2,\
    \ $n, $p);\n    $bs = array();\n    $bs[] = \"1\";\n    for ($i = 0; $i < $n;\
    \ $i++) {\n        $bs[] = \"0\";\n    }\n    $bs = join(\"\", $bs);\n    return\
    \ bcpow(2, bindec($bs), $p);\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function bccomp() in /tmp/tmpicb31dbg.php:14\n\
    Stack trace:\n#0 /tmp/tmpicb31dbg.php(26): modp(3, 5)\n#1 /tmp/tmpicb31dbg.php(30):\
    \ candidate(3, 5)\n#2 /tmp/tmpicb31dbg.php(39): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpicb31dbg.php on line 14\n"
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $res =\
    \ 1;\n    $b = $n;\n    while ($p) {\n        // We only need to compute mod(b,\
    \ p).\n        $b = fmod($b, $p);\n        if ($b & 1) {\n            $res = fmod(($res\
    \ * $b), $p);\n        }\n        $b = ($b * $b);\n        $p = (int)($p / 2);\n\
    \    }\n    return $res;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj8njnhj8.php:33\n\
    Stack trace:\n#0 /tmp/tmpj8njnhj8.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpj8njnhj8.php\
    \ on line 33\n"
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\t$n %= $p;\n\
    \t$result = 1;\n\twhile ($n > 0) {\n\t\tif ($n & 1) {\n\t\t\t$result = ($result\
    \ * 2) % $p;\n\t\t}\n\t\t$n >>= 1;\n\t}\n\treturn $result;\n}\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2lqt0bbq.php:29\n\
    Stack trace:\n#0 /tmp/tmp2lqt0bbq.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp2lqt0bbq.php\
    \ on line 29\n"
  timestamp: 1660028825
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\tif($n < 0)\n\
    \t\t$n += $p;\n\tif($n < 0)\n\t\t$n += $p;\n\tif($n < 0)\n\t\t$n += $p;\n\tif($n\
    \ < 0)\n\t\t$n += $p;\n\tif($n == 0)\n\t\treturn 1;\n\tif($n == 1)\n\t\treturn\
    \ 2;\n\tif($n & 1)\n\t\treturn (2 * modp($n - 1, $p)) % $p;\n\telse {\n\t\t$t\
    \ = modp($n / 2, $p);\n\t\treturn ($t * $t) % $p;\n\t}\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $result\
    \ = 1;\n    $modulo = $p;\n    while ($n > 0) {\n        if ($n % 2 == 1) {\n\
    \            $result = ($result * $modulo) % $p;\n        }\n        $modulo =\
    \ ($modulo * $modulo) % $p;\n        $n = $n / 2;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Deprecated: Implicit conversion from float 1.5 to int loses precision in /tmp/tmpd3t7tyeo.php
    on line 17


    Deprecated: Implicit conversion from float 0.75 to int loses precision in /tmp/tmpd3t7tyeo.php
    on line 17


    Deprecated: Implicit conversion from float 0.375 to int loses precision in /tmp/tmpd3t7tyeo.php
    on line 17


    Deprecated: Implicit conversion from float 0.1875 to int loses precision in /tmp/tmpd3t7tyeo.php
    on line 17


    Deprecated: Implicit conversion from float 0.09375 to int loses precision in /tmp/tmpd3t7tyeo.php
    on line 17


    Deprecated: Implicit conversion from float 0.046875 to int loses precision in
    /tmp/tmpd3t7tyeo.php on line 17


    Deprecated: Implicit conversion from float 0.0234375 to int loses precision in
    /tmp/tmpd3t7tyeo.php on line 17


    Deprecated: Implicit conversion from float 0.01171875 to int loses precision in
    /tmp/tmpd3t7tyeo.php on line 17


    Deprecated: Implicit conversion from float 0.005859375 to int loses precision
    in /tmp/tmpd3t7tyeo.php on line 17


    Deprecated: Implicit conversion from float 0.0029296875 to int loses precision
    in /tmp/tmpd3t7tyeo.php on line 17


    Deprecated: Implicit conversion from float 0.00146484375 to int loses precision
    in /tmp/tmpd3t7tyeo.php on line 17


    Deprecated: Implicit conversion from float 0.000732421875 to int loses precision
    in /tmp/tmpd3t7tyeo.php on line 17


    Deprecated: Implicit conversion from float 0.0003662109375 to int loses precision
    in /tmp/tmpd3t7tyeo.php on line 17


    Deprecated: Implicit conversion from float 0.00018310546875 to int loses precision
    in /tmp/tmpd3t7tyeo.php on line 17


    Deprecated: Implicit conversion from float 9.1552734375E-5 to int loses precision
    in /tmp/tmpd3t7tyeo.php on line 17


    Deprecated: Implicit conversion from float 4.57763671875E-5 to int loses precision
    in /tmp/tmpd3t7tyeo.php on line 17


    Deprecated: Implicit conversion from float 2.288818359375E-5 to int loses precision
    in /tmp/tmpd3t7tyeo.php on line 17


    Deprecated: Implicit conversion from float 1.1444091796875E-5 to int loses precision
    in /tmp/tmpd3t7tyeo.php on lin'
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\t// we don't\
    \ allow negative or zero p's\n\tif ($p < 1) {\n\t\techo \"p must be >= 1.\\n\"\
    ;\n\t\texit(1);\n\t}\n\t// 0^n = 0 mod p\n\tif ($n == 0) {\n\t\treturn 0;\n\t\
    }\n\t// 1^n = 1 mod p\n\tif ($n == 1) {\n\t\treturn 1;\n\t}\n\t// remember powers\
    \ of 2\n\t$powers = array();\n\t// this is the exponent for 2^n\n\t$exp = 0;\n\
    \t// keep going until we can't anymore\n\twhile ($n > 0) {\n\t\t// if the current\
    \ bit is 1, record the exponent\n\t\tif ($n & 1) {\n\t\t\t$powers[] = $exp;\n\t\
    \t}\n\t\t// move to the next bit\n\t\t$n >>= 1;\n\t\t$exp++;\n\t}\n\t// this is\
    \ the result\n\t$result = 1;\n\t// start with the largest exponent\n\t$exp = max($powers);\n\
    \t// keep going until we are done\n\twhile ($exp >= 0) {\n\t\t// squaring modulo\
    \ is expensive, so only do it if needed\n\t\tif ($result != 1) {\n\t\t\t$result\
    \ = bmodp($result * $result, $p);\n\t\t}\n\t\t// if this exponent is relevant,\
    \ multiply it in\n\t\tif (in_array($exp, $powers)) {\n\t\t\t$result = bmodp($result\
    \ * 2, $p);\n\t\t}\n\t\t// move to the next exponent\n\t\t$exp--;\n\t}\n\t// return\
    \ the result\n\treturn $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function bmodp() in /tmp/tmpv771uegp.php:53\n\
    Stack trace:\n#0 /tmp/tmpv771uegp.php(63): modp(0, 5)\n#1 /tmp/tmpv771uegp.php(67):\
    \ candidate(3, 5)\n#2 /tmp/tmpv771uegp.php(76): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpv771uegp.php on line 53\n"
  timestamp: 1660028825
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if ($n\
    \ < 0)\n        return $p - modp(-$n, $p);\n    if ($n == 0)\n        return 1;\n\
    \    $nm = modp($n >> 1, $p);\n    $nm = ($nm * $nm) % $p;\n    if ($n & 1)\n\
    \        $nm = ($nm * 2) % $p;\n    return $nm;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if ( !\
    \ is_int($n) || ! is_int($p) || $p < 2) {\n        return null;\n    }\n    $c\
    \ = 1;\n    for ($i = 0; $i < $n; $i++) {\n        $c = bcmod($c * 2, $p);\n \
    \   }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function bcmod() in /tmp/tmpgip_iyw4.php:19\n\
    Stack trace:\n#0 /tmp/tmpgip_iyw4.php(25): modp(3, 5)\n#1 /tmp/tmpgip_iyw4.php(29):\
    \ candidate(3, 5)\n#2 /tmp/tmpgip_iyw4.php(38): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpgip_iyw4.php on line 19\n"
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $logn =\
    \ ceil(log($n, 2));\n    $pow = 1;\n    for ($i = 0; $i < $logn; $i++) {\n   \
    \     $pow = fmod(fmod($pow, $p) * fmod($pow, $p), $p);\n    }\n    return $pow;\n\
    }\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppjp07fmr.php:27\n\
    Stack trace:\n#0 /tmp/tmppjp07fmr.php(36): test()\n#1 {main}\n  thrown in /tmp/tmppjp07fmr.php\
    \ on line 27\n"
  timestamp: 1660028826
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    // Calculate\
    \ the sum of all powers of 2 from the binary representation of\n    // N.\n  \
    \  $sum = 0;\n    for ($i = 0; $i < strlen($n); $i++) {\n        if ($n[$i] ==\
    \ '1') {\n            $sum += pow(2, $i);\n        }\n    }\n    // Calculate\
    \ the remainder of P modulo SUM.\n    return fmod($p, $sum);\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Trying to access array offset on value of type int in /tmp/tmpt5a6_n98.php\
    \ on line 18\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt5a6_n98.php:31\n\
    Stack trace:\n#0 /tmp/tmpt5a6_n98.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpt5a6_n98.php\
    \ on line 31\n"
  timestamp: 1660028825
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    while ($n > 0) {\n        if ($n & 1) {\n            $r = ($r * $n) % $p;\n\
    \        }\n        $n = $n >> 1;\n    }\n    return $r;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpju4yw1_j.php:30\n\
    Stack trace:\n#0 /tmp/tmpju4yw1_j.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpju4yw1_j.php\
    \ on line 30\n"
  timestamp: 1660028826
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\t// by convention,\
    \ we define that modp(0, p) = 1.\n\tif ($n == 0) return 1;\n\t$isNegative = false;\n\
    \tif ($n < 0) {\n\t\t$n = -$n;\n\t\t$isNegative = true;\n\t}\n\t$result = 1;\n\
    \t$base = 2;\n\t$pow = $n;\n\twhile ($pow > 0) {\n\t\tif ($pow % 2 == 1) {\n\t\
    \t\t$result = ($result * $base) % $p;\n\t\t}\n\t\t$base = ($base * $base) % $p;\n\
    \t\t$pow = $pow / 2;\n\t}\n\tif ($isNegative) {\n\t\t$result = $p - $result;\n\
    \t}\n\treturn $result;\n}\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Deprecated: Implicit conversion from float 1.5 to int loses precision in /tmp/tmp2k6d357_.php
    on line 25


    Deprecated: Implicit conversion from float 0.75 to int loses precision in /tmp/tmp2k6d357_.php
    on line 25


    Deprecated: Implicit conversion from float 0.375 to int loses precision in /tmp/tmp2k6d357_.php
    on line 25


    Deprecated: Implicit conversion from float 0.1875 to int loses precision in /tmp/tmp2k6d357_.php
    on line 25


    Deprecated: Implicit conversion from float 0.09375 to int loses precision in /tmp/tmp2k6d357_.php
    on line 25


    Deprecated: Implicit conversion from float 0.046875 to int loses precision in
    /tmp/tmp2k6d357_.php on line 25


    Deprecated: Implicit conversion from float 0.0234375 to int loses precision in
    /tmp/tmp2k6d357_.php on line 25


    Deprecated: Implicit conversion from float 0.01171875 to int loses precision in
    /tmp/tmp2k6d357_.php on line 25


    Deprecated: Implicit conversion from float 0.005859375 to int loses precision
    in /tmp/tmp2k6d357_.php on line 25


    Deprecated: Implicit conversion from float 0.0029296875 to int loses precision
    in /tmp/tmp2k6d357_.php on line 25


    Deprecated: Implicit conversion from float 0.00146484375 to int loses precision
    in /tmp/tmp2k6d357_.php on line 25


    Deprecated: Implicit conversion from float 0.000732421875 to int loses precision
    in /tmp/tmp2k6d357_.php on line 25


    Deprecated: Implicit conversion from float 0.0003662109375 to int loses precision
    in /tmp/tmp2k6d357_.php on line 25


    Deprecated: Implicit conversion from float 0.00018310546875 to int loses precision
    in /tmp/tmp2k6d357_.php on line 25


    Deprecated: Implicit conversion from float 9.1552734375E-5 to int loses precision
    in /tmp/tmp2k6d357_.php on line 25


    Deprecated: Implicit conversion from float 4.57763671875E-5 to int loses precision
    in /tmp/tmp2k6d357_.php on line 25


    Deprecated: Implicit conversion from float 2.288818359375E-5 to int loses precision
    in /tmp/tmp2k6d357_.php on line 25


    Deprecated: Implicit conversion from float 1.1444091796875E-5 to int loses precision
    in /tmp/tmp2k6d357_.php on lin'
  timestamp: 1660028826
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if ($n\
    \ < 0) {\n        return modp(-1 * $n, $p);\n    }\n    if ($n < 2) {\n      \
    \  return $n;\n    }\n    $r = 1;\n    while ($n > 0) {\n        if ($n % 2 ==\
    \ 1) {\n            $r = $r * 2 % $p;\n        }\n        $n = floor($n / 2);\n\
    \        if ($n > 0) {\n            $r = $r * $r % $p;\n        }\n    }\n   \
    \ return $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8_omw2n_.php:39\n\
    Stack trace:\n#0 /tmp/tmp8_omw2n_.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp8_omw2n_.php\
    \ on line 39\n"
  timestamp: 1660028825
- exit_code: -1
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\t$r = 1;\n\
    \t$n = $n % $p;\n\n\twhile ($n > 0) {\n\t\tif ($n & 1)\n\t\t\t$r = ($r * $n) %\
    \ $p;\n\t\t$n = $n >> 1;\n\t\t$n = ($n * $n) % $p;\n\t}\n\n\treturn $r;\n}\n\n\
    function candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660028831
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\t$ret = 1;\n\
    \t$base = 2;\n\twhile ($n > 0) {\n\t\tif ($n & 1)\n\t\t\t$ret = bcmod(bcmul($ret,\
    \ $base), $p);\n\t\t$n >>= 1;\n\t\t$base = bcmod(bcmul($base, $base), $p);\n\t\
    }\n\treturn $ret;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function bcmod() in /tmp/tmpaftio3zf.php:18\n\
    Stack trace:\n#0 /tmp/tmpaftio3zf.php(26): modp(3, 5)\n#1 /tmp/tmpaftio3zf.php(30):\
    \ candidate(3, 5)\n#2 /tmp/tmpaftio3zf.php(39): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpaftio3zf.php on line 18\n"
  timestamp: 1660028826
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\t$n %= $p;\n\
    \tif ($n < 0) $n += $p;\n\treturn $n;\n}\n\nfunction candidate(...$args) {\n \
    \   return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi54q4taj.php:25\n\
    Stack trace:\n#0 /tmp/tmpi54q4taj.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpi54q4taj.php\
    \ on line 25\n"
  timestamp: 1660028826
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\t$c = 1;\n\
    \t$n %= $p;\n\twhile ($n > 0) {\n\t\tif ($n & 1) $c = ($c * $n) % $p;\n\t\t$n\
    \ >>= 1;\n\t\t$n %= $p;\n\t}\n\treturn $c;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfislnbgo.php:30\n\
    Stack trace:\n#0 /tmp/tmpfislnbgo.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpfislnbgo.php\
    \ on line 30\n"
  timestamp: 1660028826
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if ($n\
    \ == 0) {\n        return 1;\n    } else if ($n % 2 == 0) {\n        $t = modp($n\
    \ / 2, $p);\n        return ($t * $t) % $p;\n    } else {\n        $t = modp($n\
    \ - 1, $p);\n        return ($t * $n) % $p;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpedacb35j.php:31\n\
    Stack trace:\n#0 /tmp/tmpedacb35j.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpedacb35j.php\
    \ on line 31\n"
  timestamp: 1660028826
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $res =\
    \ 1;\n    while ($n > 0) {\n        if ($n & 1) {\n            $res = ($res *\
    \ $p) % 1000000007;\n        }\n        $p = ($p * $p) % 1000000007;\n       \
    \ $n >>= 1;\n    }\n    return $res;\n}\n\n$p = 1000000007;\n\n$line = fgets(STDIN);\n\
    $n = (int)trim($line);\n\n$cnt = 0;\nwhile ($n > 0) {\n    $n -= modp(floor($n\
    \ / 2), $p);\n    $cnt++;\n}\n\necho $cnt . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "0\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe8g_tyy6.php:42\n\
    Stack trace:\n#0 /tmp/tmpe8g_tyy6.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpe8g_tyy6.php\
    \ on line 42\n"
  timestamp: 1660028826
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\treturn bcpowmod($n,\
    \ '1', $p);\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function bcpowmod() in\
    \ /tmp/tmp9hvf0lql.php:14\nStack trace:\n#0 /tmp/tmp9hvf0lql.php(18): modp(3,\
    \ 5)\n#1 /tmp/tmp9hvf0lql.php(22): candidate(3, 5)\n#2 /tmp/tmp9hvf0lql.php(31):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp9hvf0lql.php on line 14\n"
  timestamp: 1660028826
- exit_code: -1
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $res =\
    \ 1;\n    $n = $n % $p;\n    while ($n > 0) {\n        if ($n & 1)\n         \
    \   $res = ($res * $n) % $p;\n        $n = $n >> 1;\n        $n = ($n * $n) %\
    \ $p;\n    }\n    return $res;\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660028831
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if ($n\
    \ == 0) return 1;\n    $t = modp($n / 2, $p);\n    $t = (2 * $t) % $p;\n    if\
    \ ($n % 2 == 1) $t = ($t + 1) % $p;\n    return $t;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Deprecated: Implicit conversion from float 5.0E-324 to int loses precision in
    /tmp/tmp6oh0getc.php on line 17


    Deprecated: Implicit conversion from float 1.0E-323 to int loses precision in
    /tmp/tmp6oh0getc.php on line 17


    Deprecated: Implicit conversion from float 1.5E-323 to int loses precision in
    /tmp/tmp6oh0getc.php on line 17


    Deprecated: Implicit conversion from float 3.0E-323 to int loses precision in
    /tmp/tmp6oh0getc.php on line 17


    Deprecated: Implicit conversion from float 6.0E-323 to int loses precision in
    /tmp/tmp6oh0getc.php on line 17


    Deprecated: Implicit conversion from float 1.2E-322 to int loses precision in
    /tmp/tmp6oh0getc.php on line 17


    Deprecated: Implicit conversion from float 2.37E-322 to int loses precision in
    /tmp/tmp6oh0getc.php on line 17


    Deprecated: Implicit conversion from float 4.74E-322 to int loses precision in
    /tmp/tmp6oh0getc.php on line 17


    Deprecated: Implicit conversion from float 9.5E-322 to int loses precision in
    /tmp/tmp6oh0getc.php on line 17


    Deprecated: Implicit conversion from float 1.897E-321 to int loses precision in
    /tmp/tmp6oh0getc.php on line 17


    Deprecated: Implicit conversion from float 3.794E-321 to int loses precision in
    /tmp/tmp6oh0getc.php on line 17


    Deprecated: Implicit conversion from float 7.59E-321 to int loses precision in
    /tmp/tmp6oh0getc.php on line 17


    Deprecated: Implicit conversion from float 1.518E-320 to int loses precision in
    /tmp/tmp6oh0getc.php on line 17


    Deprecated: Implicit conversion from float 3.0355E-320 to int loses precision
    in /tmp/tmp6oh0getc.php on line 17


    Deprecated: Implicit conversion from float 6.071E-320 to int loses precision in
    /tmp/tmp6oh0getc.php on line 17


    Deprecated: Implicit conversion from float 1.2142E-319 to int loses precision
    in /tmp/tmp6oh0getc.php on line 17


    Deprecated: Implicit conversion from float 2.42843E-319 to int loses precision
    in /tmp/tmp6oh0getc.php on line 17


    Deprecated: Implicit conversion from float 4.85686E-319 to int loses precision
    in /tmp/tmp6oh0getc.php on line 17


    Deprecated: Implicit con'
  timestamp: 1660028826
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\t// $p < 2**32.\n\
    \t$n = (int)$n;\n\t$p = (int)$p;\n\t$r = 1;\n\t$e = $n;\n\twhile ($e > 0) {\n\t\
    \tif ($e & 1) {\n\t\t\t$r = ($r * $n) % $p;\n\t\t}\n\t\t$n = ($n * $n) % $p;\n\
    \t\t$e >>= 1;\n\t}\n\treturn $r;\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpojn48mba.php:34\n\
    Stack trace:\n#0 /tmp/tmpojn48mba.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpojn48mba.php\
    \ on line 34\n"
  timestamp: 1660028826
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\t$e = 0;\n\
    \t$n = $n % $p;\n\tif ($n === 0) {\n\t\treturn 1;\n\t}\n\tif ($n % 2 === 0) {\n\
    \t\t$e = $n / 2;\n\t\t$n = 2;\n\t}\n\t$r = $n;\n\twhile ($e > 0) {\n\t\tif ($e\
    \ % 2 !== 0) {\n\t\t\t$r = ($r * $n) % $p;\n\t\t}\n\t\t$e = $e / 2;\n\t\t$n =\
    \ ($n * $n) % $p;\n\t}\n\treturn $r;\n}\n\nfunction candidate(...$args) {\n  \
    \  return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxqndbztp.php:40\n\
    Stack trace:\n#0 /tmp/tmpxqndbztp.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpxqndbztp.php\
    \ on line 40\n"
  timestamp: 1660028826
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\tif ($n ==\
    \ 0) return 1;\n\tif ($n % 2 == 0) return modp(($n/2)*($n/2), $p);\n\treturn ($n*modp(($n-1)/2,\
    \ $p)*modp(($n-1)/2, $p)) % $p;\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Deprecated: Implicit conversion from float 2.5504525874941393E+32 to int loses
    precision in /tmp/tmpjsozqlto.php on line 15


    Deprecated: Implicit conversion from float 1.6262021002638875E+64 to int loses
    precision in /tmp/tmpjsozqlto.php on line 15


    Deprecated: Implicit conversion from float 6.611333177256697E+127 to int loses
    precision in /tmp/tmpjsozqlto.php on line 15


    Deprecated: Implicit conversion from float 1.0927431595173783E+255 to int loses
    precision in /tmp/tmpjsozqlto.php on line 15


    Deprecated: Implicit conversion from float INF to int loses precision in /tmp/tmpjsozqlto.php
    on line 15


    Deprecated: Implicit conversion from float INF to int loses precision in /tmp/tmpjsozqlto.php
    on line 15


    Deprecated: Implicit conversion from float INF to int loses precision in /tmp/tmpjsozqlto.php
    on line 15


    Deprecated: Implicit conversion from float INF to int loses precision in /tmp/tmpjsozqlto.php
    on line 15


    Deprecated: Implicit conversion from float INF to int loses precision in /tmp/tmpjsozqlto.php
    on line 15


    Deprecated: Implicit conversion from float INF to int loses precision in /tmp/tmpjsozqlto.php
    on line 15


    Deprecated: Implicit conversion from float INF to int loses precision in /tmp/tmpjsozqlto.php
    on line 15


    Deprecated: Implicit conversion from float INF to int loses precision in /tmp/tmpjsozqlto.php
    on line 15


    Deprecated: Implicit conversion from float INF to int loses precision in /tmp/tmpjsozqlto.php
    on line 15


    Deprecated: Implicit conversion from float INF to int loses precision in /tmp/tmpjsozqlto.php
    on line 15


    Deprecated: Implicit conversion from float INF to int loses precision in /tmp/tmpjsozqlto.php
    on line 15


    Deprecated: Implicit conversion from float INF to int loses precision in /tmp/tmpjsozqlto.php
    on line 15


    Deprecated: Implicit conversion from float INF to int loses precision in /tmp/tmpjsozqlto.php
    on line 15


    Deprecated: Implicit conversion from float INF to int loses precision in /tmp/tmpjsozqlto.php
    on line 15


    Deprecated: Implicit conversion from float INF to int loses pr'
  timestamp: 1660028826
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\t// First,\
    \ we square n.\n\t$n2 = ($n * $n) % $p;\n\t// Next, we shift it left to get the\
    \ first bit of n.\n\t$n2 <<= 1;\n\tif ($n & 1) {\n\t\t// If n is odd, add n^2\
    \ to n^2 shifted left one bit.\n\t\t$n2 += $n;\n\t}\n\t// Finally, we apply modulus\
    \ p.\n\treturn $n2 % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl53y70cy.php:31\n\
    Stack trace:\n#0 /tmp/tmpl53y70cy.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpl53y70cy.php\
    \ on line 31\n"
  timestamp: 1660028826
- exit_code: -1
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $ret =\
    \ 1;\n    $n = $n % $p;\n\n    while ($n > 0) {\n        if ($n & 1) {\n     \
    \       $ret = ($ret * $n) % $p;\n        }\n        $n = $n >> 1;\n        $n\
    \ = ($n * $n) % $p;\n    }\n    return $ret;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660028831
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\tif ($n ==\
    \ 0) {\n\t\treturn 1;\n\t}\n\t$r = modp($n >> 1, $p);\n\t$r = ($r * $r) % $p;\n\
    \tif ($n & 1) {\n\t\t$r = ($r * 2) % $p;\n\t}\n\treturn $r;\n}\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028826
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if ($n\
    \ == 0) {\n        return 1;\n    }\n    $bits = [];\n    while ($n > 0) {\n \
    \       $bits[] = $n % 2;\n        $n = floor($n / 2);\n    }\n    $result = 1;\n\
    \    for ($i = count($bits) - 1; $i >= 0; $i--) {\n        $result = ($result\
    \ * $result) % $p;\n        if ($bits[$i] == 1) {\n            $result = ($result\
    \ * 2) % $p;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028826
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    //return\
    \ mod2($n, $p);\n    //return mod3($n, $p);\n    return mod4($n, $p);\n}\n\nfunction\
    \ candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mod4() in /tmp/tmp2gfdr5ow.php:16\n\
    Stack trace:\n#0 /tmp/tmp2gfdr5ow.php(20): modp(3, 5)\n#1 /tmp/tmp2gfdr5ow.php(24):\
    \ candidate(3, 5)\n#2 /tmp/tmp2gfdr5ow.php(33): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmp2gfdr5ow.php on line 16\n"
  timestamp: 1660028826
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if (0 ==\
    \ $n) return 1;\n    if (1 == $n) return 0;\n    if (1 == $n % 2) return (modp($n\
    \ + 1, $p) + $p - 1) % $p;\n    $r = modp($n / 2, $p);\n    return ($r * $r) %\
    \ $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsxhday73.php:26\n\
    Stack trace:\n#0 /tmp/tmpsxhday73.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpsxhday73.php\
    \ on line 26\n"
  timestamp: 1660028826
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\t$a = 2;\n\
    \t$k = 1;\n\twhile ($n) {\n\t\tif ($n & 1)\n\t\t\t$k = ($k * $a) % $p;\n\t\t$a\
    \ = ($a * $a) % $p;\n\t\t$n >>= 1;\n\t}\n\treturn $k;\n}\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028826
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if (0 ==\
    \ $n) {\n        return 1;\n    }\n    $x = modp($n / 2, $p);\n    if (0 == $n\
    \ % 2) {\n        return $x * $x % $p;\n    } else {\n        return $x * $x *\
    \ 2 % $p;\n    }\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Deprecated: Implicit conversion from float 5.0E-324 to int loses precision in
    /tmp/tmppnf00b_7.php on line 18


    Deprecated: Implicit conversion from float 1.0E-323 to int loses precision in
    /tmp/tmppnf00b_7.php on line 18


    Deprecated: Implicit conversion from float 1.5E-323 to int loses precision in
    /tmp/tmppnf00b_7.php on line 18


    Deprecated: Implicit conversion from float 3.0E-323 to int loses precision in
    /tmp/tmppnf00b_7.php on line 18


    Deprecated: Implicit conversion from float 6.0E-323 to int loses precision in
    /tmp/tmppnf00b_7.php on line 18


    Deprecated: Implicit conversion from float 1.2E-322 to int loses precision in
    /tmp/tmppnf00b_7.php on line 18


    Deprecated: Implicit conversion from float 2.37E-322 to int loses precision in
    /tmp/tmppnf00b_7.php on line 18


    Deprecated: Implicit conversion from float 4.74E-322 to int loses precision in
    /tmp/tmppnf00b_7.php on line 18


    Deprecated: Implicit conversion from float 9.5E-322 to int loses precision in
    /tmp/tmppnf00b_7.php on line 18


    Deprecated: Implicit conversion from float 1.897E-321 to int loses precision in
    /tmp/tmppnf00b_7.php on line 18


    Deprecated: Implicit conversion from float 3.794E-321 to int loses precision in
    /tmp/tmppnf00b_7.php on line 18


    Deprecated: Implicit conversion from float 7.59E-321 to int loses precision in
    /tmp/tmppnf00b_7.php on line 18


    Deprecated: Implicit conversion from float 1.518E-320 to int loses precision in
    /tmp/tmppnf00b_7.php on line 18


    Deprecated: Implicit conversion from float 3.0355E-320 to int loses precision
    in /tmp/tmppnf00b_7.php on line 18


    Deprecated: Implicit conversion from float 6.071E-320 to int loses precision in
    /tmp/tmppnf00b_7.php on line 18


    Deprecated: Implicit conversion from float 1.2142E-319 to int loses precision
    in /tmp/tmppnf00b_7.php on line 18


    Deprecated: Implicit conversion from float 2.42843E-319 to int loses precision
    in /tmp/tmppnf00b_7.php on line 18


    Deprecated: Implicit conversion from float 4.85686E-319 to int loses precision
    in /tmp/tmppnf00b_7.php on line 18


    Deprecated: Implicit con'
  timestamp: 1660028826
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\t$b = 1;\n\
    \t$c = 0;\n\t$s = $n;\n\twhile ($s > 0) {\n\t\t$t = floor($s / 2);\n\t\t$u = $s\
    \ - 2 * $t;\n\t\t$s = $t;\n\t\t$v = $b * $u + $c * pow(2, $s);\n\t\t$w = floor($v\
    \ / $p);\n\t\t$c = $v - $w * $p;\n\t\t$b = 2 * $b;\n\t}\n\twhile ($c < 0) {\n\t\
    \t$c = $c + $p;\n\t}\n\treturn $c;\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnr9653si.php:37\n\
    Stack trace:\n#0 /tmp/tmpnr9653si.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpnr9653si.php\
    \ on line 37\n"
  timestamp: 1660028826
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\tif ($n ==\
    \ 0) {\n\t\treturn 1;\n\t}\n\tif ($n == 1) {\n\t\treturn $n;\n\t}\n\t$z = modp($n\
    \ >> 1, $p);\n\t$z = ($z * $z) % $p;\n\tif ($n & 1) {\n\t\t$z = ($z * $n) % $p;\n\
    \t}\n\treturn $z;\n}\n\necho modp(1101, 101).\"\\n\";\necho modp(0, 101).\"\\\
    n\";\necho modp(3, 11).\"\\n\";\necho modp(100, 101).\"\\n\";\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "94\n1\n3\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkmt58xzf.php:39\n\
    Stack trace:\n#0 /tmp/tmpkmt58xzf.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpkmt58xzf.php\
    \ on line 39\n"
  timestamp: 1660028826
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $ret =\
    \ 1;\n    for ($i = 0; $i < $n; $i++) {\n        $ret = ($ret * 2) % $p;\n   \
    \ }\n    return $ret;\n}\n\n$str = '\u041F\u0440\u0438\u0432\u0435\u0442';\nfunction\
    \ candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028826
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $p = intval($p);\n\
    \    $n = intval($n);\n    if($n > 0) {\n        $result = 1;\n        for($i\
    \ = 0; $i < $n; $i++) {\n            $result = ($result * 2) % $p;\n        }\n\
    \        return $result;\n    } else {\n        return 1;\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028826
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if ($n\
    \ < 0) {\n        return $p - modp(-$n, $p);\n    }\n    if ($n < $p) {\n    \
    \    return $n;\n    }\n    if ($n % $p == 0) {\n        return 0;\n    }\n  \
    \  return modp($n % $p, $p);\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxv8wzeyq.php:32\n\
    Stack trace:\n#0 /tmp/tmpxv8wzeyq.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpxv8wzeyq.php\
    \ on line 32\n"
  timestamp: 1660028826
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $c = 1;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        $c = ($c * 2) % $p;\n    }\n    return\
    \ $c;\n}\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028826
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $n = $n\
    \ % $p;\n    $r = 1;\n    for ($i = 0; $i < $n; $i++) {\n        $r = $r * 2 %\
    \ $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprnb3kjio.php:28\n\
    Stack trace:\n#0 /tmp/tmprnb3kjio.php(36): test()\n#1 {main}\n  thrown in /tmp/tmprnb3kjio.php\
    \ on line 28\n"
  timestamp: 1660028826
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\treturn $n\
    \ < $p ? $n : $n - $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5_ps5ich.php:23\n\
    Stack trace:\n#0 /tmp/tmp5_ps5ich.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp5_ps5ich.php\
    \ on line 23\n"
  timestamp: 1660028826
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if ($n\
    \ >= $p) {\n        $n %= $p;\n    }\n    $p1 = (int) sqrt($p);\n    $multipliers\
    \ = array();\n    for ($i = $p1; $i < $p; $i++) {\n        $multipliers[$i * $i\
    \ % $p] = $i;\n    }\n    for ($i = 1; $i <= $p1; $i++) {\n        if (isset($multipliers[$n]))\
    \ {\n            return $multipliers[$n] * $p1 % $p;\n        }\n        $n =\
    \ $n * $n % $p;\n    }\n    return 0;\n}\n\nfunction candidate(...$args) {\n \
    \   return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0gxp9w8p.php:36\n\
    Stack trace:\n#0 /tmp/tmp0gxp9w8p.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp0gxp9w8p.php\
    \ on line 36\n"
  timestamp: 1660028826
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if($n <\
    \ 0) {\n        return $p - modp(-$n, $p);\n    }\n    elseif($n == 0) {\n   \
    \     return 1;\n    }\n    elseif($n % 2 == 0) {\n        return modp(($n / 2)\
    \ * ($n / 2), $p);\n    }\n    else {\n        return $n * modp(($n - 1) / 2,\
    \ $p);\n    }\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Deprecated: Implicit conversion from float 2.5504525874941393E+32 to int loses
    precision in /tmp/tmp5arla1_z.php on line 20


    Deprecated: Implicit conversion from float 1.6262021002638875E+64 to int loses
    precision in /tmp/tmp5arla1_z.php on line 20


    Deprecated: Implicit conversion from float 6.611333177256697E+127 to int loses
    precision in /tmp/tmp5arla1_z.php on line 20


    Deprecated: Implicit conversion from float 1.0927431595173783E+255 to int loses
    precision in /tmp/tmp5arla1_z.php on line 20


    Deprecated: Implicit conversion from float INF to int loses precision in /tmp/tmp5arla1_z.php
    on line 20


    Deprecated: Implicit conversion from float INF to int loses precision in /tmp/tmp5arla1_z.php
    on line 20


    Deprecated: Implicit conversion from float INF to int loses precision in /tmp/tmp5arla1_z.php
    on line 20


    Deprecated: Implicit conversion from float INF to int loses precision in /tmp/tmp5arla1_z.php
    on line 20


    Deprecated: Implicit conversion from float INF to int loses precision in /tmp/tmp5arla1_z.php
    on line 20


    Deprecated: Implicit conversion from float INF to int loses precision in /tmp/tmp5arla1_z.php
    on line 20


    Deprecated: Implicit conversion from float INF to int loses precision in /tmp/tmp5arla1_z.php
    on line 20


    Deprecated: Implicit conversion from float INF to int loses precision in /tmp/tmp5arla1_z.php
    on line 20


    Deprecated: Implicit conversion from float INF to int loses precision in /tmp/tmp5arla1_z.php
    on line 20


    Deprecated: Implicit conversion from float INF to int loses precision in /tmp/tmp5arla1_z.php
    on line 20


    Deprecated: Implicit conversion from float INF to int loses precision in /tmp/tmp5arla1_z.php
    on line 20


    Deprecated: Implicit conversion from float INF to int loses precision in /tmp/tmp5arla1_z.php
    on line 20


    Deprecated: Implicit conversion from float INF to int loses precision in /tmp/tmp5arla1_z.php
    on line 20


    Deprecated: Implicit conversion from float INF to int loses precision in /tmp/tmp5arla1_z.php
    on line 20


    Deprecated: Implicit conversion from float INF to int loses pr'
  timestamp: 1660028826
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $n1 = ($n\
    \ - 1) % $p;\n    $n2 = ($n1 - 1) % $p;\n    $n4 = ($n2 - 1) % $p;\n    $n8 =\
    \ ($n4 - 1) % $p;\n    $n16 = ($n8 - 1) % $p;\n    $n32 = ($n16 - 1) % $p;\n \
    \   $n64 = ($n32 - 1) % $p;\n    $n128 = ($n64 - 1) % $p;\n    $n256 = ($n128\
    \ - 1) % $p;\n    $n512 = ($n256 - 1) % $p;\n    $n1024 = ($n512 - 1) % $p;\n\
    \    $n2048 = ($n1024 - 1) % $p;\n    $n4096 = ($n2048 - 1) % $p;\n    $n8192\
    \ = ($n4096 - 1) % $p;\n    $n16384 = ($n8192 - 1) % $p;\n    $n32768 = ($n16384\
    \ - 1) % $p;\n    $n65536 = ($n32768 - 1) % $p;\n    $n131072 = ($n65536 - 1)\
    \ % $p;\n    $n262144 = ($n131072 - 1) % $p;\n    $n524288 = ($n262144 - 1) %\
    \ $p;\n    $n1048576 = ($n524288 - 1) % $p;\n    $n2097152 = ($n1048576 - 1) %\
    \ $p;\n    $n4194304 = ($n2097152 - 1) % $p;\n    $n8388608 = ($n4194304 - 1)\
    \ % $p;\n    $n16777216 = ($n8388608 - 1) % $p;\n    $n33554432 = ($n16777216\
    \ - 1) % $p;\n    $n67108864 = ($n33554432 - 1) % $p;\n    $n134217728 = ($n67108864\
    \ - 1) % $p;\n    $n268435456\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpavlwyuel.php
    on line 43

    '
  timestamp: 1660028826
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if ($n\
    \ == 0) {\n        return 1;\n    }\n    if ($n % 2 == 0) {\n        $x = modp($n\
    \ / 2, $p);\n        return $x * $x % $p;\n    } else {\n        return 2 * modp($n\
    \ - 1, $p) % $p;\n    }\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028826
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\tif($n ==\
    \ 0) return 1;\n\t$res = 1;\n\t$exp = 2;\n\twhile($n > 0) {\n\t\tif($n % 2 ==\
    \ 1) $res = ($res * $exp) % $p;\n\t\t$exp = ($exp * $exp) % $p;\n\t\t$n = (int)($n\
    \ / 2);\n\t}\n\treturn $res;\n}\n\n$args = array(\n\t'num_bits' => array(\n\t\t\
    'name' => 'p',\n\t\t'type' => 'int',\n\t\t'lower' => 1,\n\t\t'upper' => 32,\n\t\
    \t'default' => 11\n\t),\n\t'exponent' => array(\n\t\t'name' => 'n',\n\t\t'type'\
    \ => 'int',\n\t\t'lower' => 1,\n\t\t'upper' => 32,\n\t\t'default' => 3\n\t)\n\
    );\nrequire_once '../LibBundle.php';\n$lib = new LibBundle($args);\n\n$res = modp($lib->exponent,\
    \ $lib->num_bits);\n$lib->setResult($res);\n$lib->printResult();\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: require_once(../LibBundle.php): Failed to open stream: No such\
    \ file or directory in /tmp/tmpxkkfd1sc.php on line 41\n\nFatal error: Uncaught\
    \ Error: Failed opening required '../LibBundle.php' (include_path='.:') in /tmp/tmpxkkfd1sc.php:41\n\
    Stack trace:\n#0 {main}\n  thrown in /tmp/tmpxkkfd1sc.php on line 41\n"
  timestamp: 1660028826
- exit_code: -1
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $res =\
    \ 1;\n    $n = intval($n);\n    $p = intval($p);\n    while ($n > 0) {\n     \
    \   if (($n & 1) === 1) {\n            $res = ($res * $n) % $p;\n        }\n \
    \       $n = $n >> 1;\n        $n = intval($n);\n        $p = intval($p);\n  \
    \      $n = ($n * $n) % $p;\n    }\n    return $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660028831
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if ($n\
    \ == 0) return 1;\n    $m = modp($n/2, $p);\n    $x = ($m * $m) % $p;\n    if\
    \ ($n % 2 == 1) $x = ($x * 2) % $p;\n    return $x;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Deprecated: Implicit conversion from float 5.0E-324 to int loses precision in
    /tmp/tmps8hcee2i.php on line 17


    Deprecated: Implicit conversion from float 1.0E-323 to int loses precision in
    /tmp/tmps8hcee2i.php on line 17


    Deprecated: Implicit conversion from float 1.5E-323 to int loses precision in
    /tmp/tmps8hcee2i.php on line 17


    Deprecated: Implicit conversion from float 3.0E-323 to int loses precision in
    /tmp/tmps8hcee2i.php on line 17


    Deprecated: Implicit conversion from float 6.0E-323 to int loses precision in
    /tmp/tmps8hcee2i.php on line 17


    Deprecated: Implicit conversion from float 1.2E-322 to int loses precision in
    /tmp/tmps8hcee2i.php on line 17


    Deprecated: Implicit conversion from float 2.37E-322 to int loses precision in
    /tmp/tmps8hcee2i.php on line 17


    Deprecated: Implicit conversion from float 4.74E-322 to int loses precision in
    /tmp/tmps8hcee2i.php on line 17


    Deprecated: Implicit conversion from float 9.5E-322 to int loses precision in
    /tmp/tmps8hcee2i.php on line 17


    Deprecated: Implicit conversion from float 1.897E-321 to int loses precision in
    /tmp/tmps8hcee2i.php on line 17


    Deprecated: Implicit conversion from float 3.794E-321 to int loses precision in
    /tmp/tmps8hcee2i.php on line 17


    Deprecated: Implicit conversion from float 7.59E-321 to int loses precision in
    /tmp/tmps8hcee2i.php on line 17


    Deprecated: Implicit conversion from float 1.518E-320 to int loses precision in
    /tmp/tmps8hcee2i.php on line 17


    Deprecated: Implicit conversion from float 3.0355E-320 to int loses precision
    in /tmp/tmps8hcee2i.php on line 17


    Deprecated: Implicit conversion from float 6.071E-320 to int loses precision in
    /tmp/tmps8hcee2i.php on line 17


    Deprecated: Implicit conversion from float 1.2142E-319 to int loses precision
    in /tmp/tmps8hcee2i.php on line 17


    Deprecated: Implicit conversion from float 2.42843E-319 to int loses precision
    in /tmp/tmps8hcee2i.php on line 17


    Deprecated: Implicit conversion from float 4.85686E-319 to int loses precision
    in /tmp/tmps8hcee2i.php on line 17


    Deprecated: Implicit con'
  timestamp: 1660028826
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $B = array(1);\n\
    \    $p = -$p;\n    for ($i = 1; $i <= 32; $i++) {\n        $B[$i] = $B[$i-1]\
    \ << 1;\n        if ($B[$i] & (1 << 16)) {\n            $B[$i] ^= $p;\n      \
    \  }\n    }\n    $r = 1;\n    for ($i = 0; $i < 32; $i++) {\n        if ($n &\
    \ (1 << $i)) {\n            $r = $r << 1;\n            if ($r & (1 << 16)) {\n\
    \                $r ^= $p;\n            }\n        }\n    }\n    return $r;\n\
    }\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1dus8vj8.php:38\n\
    Stack trace:\n#0 /tmp/tmp1dus8vj8.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp1dus8vj8.php\
    \ on line 38\n"
  timestamp: 1660028826
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $c = 1;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        $c = ($c*2) % $p;\n    }\n    return\
    \ $c;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028826
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($n) {\n        if ($n & 1) {\n            $r = ($r *\
    \ $b) % $p;\n        }\n        $n >>= 1;\n        $b = ($b * $b) % $p;\n    }\n\
    \    return $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjkkvlv3o.php:31\n\
    Stack trace:\n#0 /tmp/tmpjkkvlv3o.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpjkkvlv3o.php\
    \ on line 31\n"
  timestamp: 1660028826
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if ($n\
    \ == 0) {\n        return 1;\n    } else if ($n % 2 == 0) {\n        $x = modp($n\
    \ / 2, $p);\n        return ($x * $x) % $p;\n    } else {\n        $x = modp($n\
    \ - 1, $p);\n        return ($x * $n) % $p;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvncqa9a5.php:31\n\
    Stack trace:\n#0 /tmp/tmpvncqa9a5.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpvncqa9a5.php\
    \ on line 31\n"
  timestamp: 1660028826
