language: php
name: HumanEval_49_modp
results:
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\t$s = 1;\n\
    \t$e = $n;\n\twhile ($e != 0) {\n\t\tif (($e & 1) == 1) {\n\t\t\t$s = ($s * $n)\
    \ % $p;\n\t\t}\n\t\t$n = ($n * $n) % $p;\n\t\t$e = $e >> 1;\n\t}\n\treturn $s;\n\
    }\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5i285ns9.php:31\n\
    Stack trace:\n#0 /tmp/tmp5i285ns9.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp5i285ns9.php\
    \ on line 31\n"
  timestamp: 1659824326
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\t$mod = 1;\n\
    \t$a = 2;\n\twhile ($n > 0) {\n\t\tif ($n % 2 == 1)\n\t\t\t$mod = ($mod * $a)\
    \ % $p;\n\t\t$n = (int)($n / 2);\n\t\t$a = ($a * $a) % $p;\n\t}\n\treturn $mod;\n\
    }\n\n$n = 101;\n\n$p = array(5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101);\n\n$r = 0;\n\nfor ($i = 0; $i\
    \ < count($p); $i++) {\n\t$r = max($r, modp($n, $p[$i]));\n}\n\nprint($r . \"\\\
    n\");\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '72

    '
  timestamp: 1659824326
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  $a = 1;\n\
    \  for ($i = 0; $i < $n; $i++) {\n    $a = ($a * 2) % $p;\n  }\n  return $a;\n\
    }\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824326
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  $m = 1;\n\
    \  $mval = 1;\n  while ($n > 0) {\n    if ($n % 2 == 1) {\n      $m = ($m * $mval)\
    \ % $p;\n    }\n    $mval = ($mval * $mval) % $p;\n    $n = floor($n / 2);\n \
    \ }\n  return $m;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpds7r4slk.php:31\n\
    Stack trace:\n#0 /tmp/tmpds7r4slk.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpds7r4slk.php\
    \ on line 31\n"
  timestamp: 1659824326
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\t$n = intval($n);\n\
    \t$p = intval($p);\n\t$answer = 1;\n\twhile($n) {\n\t\tif ($n % 2) {\n\t\t\t$answer\
    \ = ($answer * $p) % $p;\n\t\t}\n\t\t$p = ($p * $p) % $p;\n\t\t$n /= 2;\n\t}\n\
    \treturn $answer;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nDeprecated: Implicit conversion from float 1.5 to int loses precision\
    \ in /tmp/tmp8apsdwwg.php on line 18\n\nFatal error: Uncaught DivisionByZeroError:\
    \ Modulo by zero in /tmp/tmp8apsdwwg.php:19\nStack trace:\n#0 /tmp/tmp8apsdwwg.php(28):\
    \ modp(1.5, 0)\n#1 /tmp/tmp8apsdwwg.php(32): candidate(3, 5)\n#2 /tmp/tmp8apsdwwg.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp8apsdwwg.php on line 19\n"
  timestamp: 1659824326
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if ($n\
    \ == 0) {\n        return 1;\n    }\n    else {\n        $num = pow(2, $n) % $p;\n\
    \        return $num;\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nDeprecated: Implicit conversion from float INF to int loses precision\
    \ in /tmp/tmpoeqlt0ky.php on line 18\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpoeqlt0ky.php:29\nStack trace:\n#0 /tmp/tmpoeqlt0ky.php(37):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpoeqlt0ky.php on line 29\n"
  timestamp: 1659824326
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  $r = 1;\n\
    \  $d = 2;\n  while ($n > 0) {\n    if ($n % 2) {\n      $r = ($r * $d) % $p;\n\
    \    }\n    $d = ($d * $d) % $p;\n    $n = (int)($n / 2);\n  }\n  return $r;\n\
    }\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824326
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  // TODO:\
    \ Write your code here.\n  if ($n === 0) {\n    return 1;\n  }\n\n  $ret = 1;\n\
    \  $a = $n;\n  while ($a > 0) {\n    if ($a % 2 === 1) {\n      $ret = ($ret *\
    \ $n) % $p;\n    }\n    $n = ($n * $n) % $p;\n    $a = floor($a / 2);\n  }\n \
    \ return $ret;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph5oz9dt1.php:36\n\
    Stack trace:\n#0 /tmp/tmph5oz9dt1.php(45): test()\n#1 {main}\n  thrown in /tmp/tmph5oz9dt1.php\
    \ on line 36\n"
  timestamp: 1659824326
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\t$res = 1;\n\
    \t$m = $n;\n\twhile ($m > 0) {\n\t\tif ($m & 1)\n\t\t\t$res = ($res * $n) % $p;\n\
    \t\t$n = ($n * $n) % $p;\n\t\t$m >>= 1;\n\t}\n\treturn $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi7tpm424.php:30\n\
    Stack trace:\n#0 /tmp/tmpi7tpm424.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpi7tpm424.php\
    \ on line 30\n"
  timestamp: 1659824326
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if ($n\
    \ == 0) {\n        return 1;\n    } else if ($n == 1) {\n        return $n;\n\
    \    } else {\n        $n1 = $n % $p;\n        $n2 = ($n - $n1) / $p;\n      \
    \  return ($n1 * $n1) % $p;\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxh95jue_.php:30\n\
    Stack trace:\n#0 /tmp/tmpxh95jue_.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpxh95jue_.php\
    \ on line 30\n"
  timestamp: 1659824326
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  $res = 1;\n\
    \  $n %= $p;\n  while ($n) {\n    if ($n & 1) $res = ($res * $n) % $p;\n    $n\
    \ >>= 1;\n    $n %= $p;\n  }\n  return $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp05fwi3g1.php:30\n\
    Stack trace:\n#0 /tmp/tmp05fwi3g1.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp05fwi3g1.php\
    \ on line 30\n"
  timestamp: 1659824326
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\tif ($n ==\
    \ 0) {\n\t\treturn 1;\n\t}\n\tif ($n == 1) {\n\t\treturn $n;\n\t}\n\t$p = abs($p);\n\
    \tif ($p == 1) {\n\t\treturn 0;\n\t}\n\t$r = 1;\n\t$b = $n;\n\twhile (true) {\n\
    \t\tif ($n & 1) {\n\t\t\t$r = ($r * $b) % $p;\n\t\t}\n\t\t$n >>= 1;\n\t\tif ($n\
    \ == 0) {\n\t\t\tbreak;\n\t\t}\n\t\t$b = ($b * $b) % $p;\n\t}\n\treturn $r;\n\
    }\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn6xs0f8q.php:44\n\
    Stack trace:\n#0 /tmp/tmpn6xs0f8q.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpn6xs0f8q.php\
    \ on line 44\n"
  timestamp: 1659824326
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\tif ($n <=\
    \ 0) return 1;\n\tif ($n % 2 == 0) {\n\t\t$sub = modp($n / 2, $p);\n\t\treturn\
    \ ($sub * $sub) % $p;\n\t} else {\n\t\t$sub = modp(($n - 1) / 2, $p);\n\t\treturn\
    \ ((($sub * $sub) % $p) * 2) % $p;\n\t}\n}\nfunction candidate(...$args) {\n \
    \   return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824326
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\tif ($n <\
    \ $p) return $n;\n\t$n = strval($n);\n\t$res = 1;\n\tfor ($i = 0; $i < strlen($n);\
    \ $i++) {\n\t\t$res = bcmod(bcmul($res, 2), $p);\n\t\tif ($n[$i] == \"1\") {\n\
    \t\t\t$res = bcmod(bcadd($res, 1), $p);\n\t\t}\n\t}\n\treturn $res;\n}\n\nfunction\
    \ candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function bcmod() in /tmp/tmp9kz202zk.php:18\n\
    Stack trace:\n#0 /tmp/tmp9kz202zk.php(27): modp('1101', 101)\n#1 /tmp/tmp9kz202zk.php(32):\
    \ candidate(1101, 101)\n#2 /tmp/tmp9kz202zk.php(40): test()\n#3 {main}\n  thrown\
    \ in /tmp/tmp9kz202zk.php on line 18\n"
  timestamp: 1659824326
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\t$r = 1;\n\
    \t$m = $n;\n\twhile($m > 0) {\n\t\tif($m % 2 == 1) {\n\t\t\t$r = ($r * $n) % $p;\n\
    \t\t}\n\t\t$n = ($n * $n) % $p;\n\t\t$m = $m >> 1;\n\t}\n\treturn $r;\n}\n\nfunction\
    \ candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnqp164z3.php:31\n\
    Stack trace:\n#0 /tmp/tmpnqp164z3.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpnqp164z3.php\
    \ on line 31\n"
  timestamp: 1659824326
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  // Handle\
    \ a few easy cases.\n  if ($n === 0) return 1;\n  if ($n === 1) return $n;\n \
    \ if ($n === 2) return ($n % $p);\n\n  // Use binary decomposition to split $n\
    \ into a sum of powers of 2.\n  $sum = 1;\n  $x = 2;\n  for ($i = $n; $i > 0;\
    \ $i = $i >> 1) {\n    if ($i & 1) {\n      $sum = ($sum * $x) % $p;\n    }\n\
    \    $x = ($x * $x) % $p;\n  }\n  return $sum;\n}\n\n$n = intval(trim(fgets(STDIN)));\n\
    $p = intval(trim(fgets(STDIN)));\n\necho modp($n, $p) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    '
  timestamp: 1659824326
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $num =\
    \ 1;\n    for ($i = 0; $i < $n; $i++) {\n        $num = ($num * 2) % $p;\n   \
    \ }\n    return $num;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824326
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    while ($n > 0) {\n        $r = ($r * ($n & 1 ? 2 : 1)) % $p;\n        $n\
    \ >>= 1;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqiohpx5x.php:27\n\
    Stack trace:\n#0 /tmp/tmpqiohpx5x.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpqiohpx5x.php\
    \ on line 27\n"
  timestamp: 1659824326
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if ($n\
    \ === 0) return 1;\n    $res = 1;\n    $x = 2;\n    while ($n > 0) {\n       \
    \ if ($n & 1) $res = $res * $x % $p;\n        $x = $x * $x % $p;\n        $n >>=\
    \ 1;\n    }\n    return $res;\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824326
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\t$tmp = 1;\n\
    \tfor ($i = 0; $i < $n; $i++) {\n\t\t$tmp = ($tmp * 2) % $p;\n\t}\n\treturn $tmp;\n\
    }\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824326
