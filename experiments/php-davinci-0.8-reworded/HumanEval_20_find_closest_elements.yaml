name: HumanEval_20_find_closest_elements
language: php
prompt: "<?php\n// From a supplied array of numbers (of length at least two) select\
  \ and return two that are the closest to each\n// other and return them in order\
  \ (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0,\
  \ 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0,\
  \ 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers)\
  \ {\n"
tests: "function candidate(...$args) {\n    return find_closest_elements(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2))\
  \ !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
  \ 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2))\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
  \ 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw\
  \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $length = count($numbers);\n    $smallest = $numbers[0];\n    $smallest_index\
    \ = 0;\n    $second_smallest = $numbers[1];\n    $second_smallest_index = 1;\n\
    \    for ($i = 1; $i < $length; $i++) {\n        if ($numbers[$i] < $smallest)\
    \ {\n            $second_smallest = $smallest;\n            $second_smallest_index\
    \ = $smallest_index;\n            $smallest = $numbers[$i];\n            $smallest_index\
    \ = $i;\n        } elseif ($numbers[$i] < $second_smallest) {\n            $second_smallest\
    \ = $numbers[$i];\n            $second_smallest_index = $i;\n        }\n    }\n\
    \    return array($smallest, $second_smallest);\n}\n", "    $closest = array();\n\
    \    $minDiff = 100;\n    for ($i = 0; $i < count($numbers) - 1; $i++) {\n   \
    \     $currDiff = abs($numbers[$i] - $numbers[$i + 1]);\n        if ($currDiff\
    \ < $minDiff) {\n            $minDiff = $currDiff;\n            $closest = array($numbers[$i],\
    \ $numbers[$i + 1]);\n        }\n    }\n    return $closest;\n}\n\n$array = array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2);\necho \"Array: \";\nprint_r($array);\n$result = find_closest_elements($array);\n\
    echo \"Result: \";\nprint_r($result);\n", "    $min = $numbers[0] - $numbers[1];\n\
    \    if($min < 0) {\n        $min = $min * -1;\n    }\n    $answer = array();\n\
    \    for($i = 0; $i < count($numbers); $i++) {\n        for($x = $i + 1; $x <\
    \ count($numbers); $x++) {\n            $sub = $numbers[$i] - $numbers[$x];\n\
    \            if($sub < 0) {\n                $sub = $sub * -1;\n            }\n\
    \            if($sub < $min) {\n                $min = $sub;\n               \
    \ $answer = array($numbers[$i], $numbers[$x]);\n            }\n        }\n   \
    \ }\n    return $answer;\n}\n\necho \"Problem 5: <br>\";\nvar_dump(find_closest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2)));\necho \"<br>\";\nvar_dump(find_closest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0)));\necho \"<br>\";\n", "    if(empty($numbers)) return\
    \ array();\n    $result = array();\n    $minDiff = null;\n    $numbersCount =\
    \ count($numbers);\n    $result[0] = $numbers[0];\n    $result[1] = $numbers[1];\n\
    \    for($i = 0; $i < $numbersCount; $i++) {\n        for($j = $i+1; $j < $numbersCount;\
    \ $j++) {\n            $diff = abs($numbers[$i] - $numbers[$j]);\n           \
    \ if($minDiff === null || $diff < $minDiff) {\n                $minDiff = $diff;\n\
    \                $result[0] = $numbers[$i];\n                $result[1] = $numbers[$j];\n\
    \            }\n        }\n    }\n    return $result;\n}\n$numbers = array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2);\necho implode(', ', find_closest_elements($numbers));\n\
    echo '<br>';\n$numbers = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0);\necho implode(',\
    \ ', find_closest_elements($numbers));\necho '<br>';\n$numbers = array();\necho\
    \ implode(', ', find_closest_elements($numbers));", "    // Your code here.\n}",
  "    $closestDistance = null;\n    $closestElements = array();\n    foreach ($numbers\
    \ as $i => $firstNum) {\n        foreach ($numbers as $j => $secondNum) {\n  \
    \          if ($i == $j) {\n                continue;\n            }\n       \
    \     $distance = abs($firstNum - $secondNum);\n            if ($closestDistance\
    \ === null || $distance < $closestDistance) {\n                $closestDistance\
    \ = $distance;\n                $closestElements = array($firstNum, $secondNum);\n\
    \            }\n        }\n    }\n    sort($closestElements);\n    return $closestElements;\n\
    }\n\n$numbers = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2);\n$result = find_closest_elements($numbers);\n\
    echo 'array(' . $result[0] . ', ' . $result[1] . ')';\necho PHP_EOL;\n\n$numbers\
    \ = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0);\n$result = find_closest_elements($numbers);\n\
    echo 'array(' . $result[0] . ', ' . $result[1] . ')';\necho PHP_EOL;", "  $result\
    \ = array();\n  if (count($numbers) < 2) {\n    return $result;\n  }\n  $minDiff\
    \ = abs($numbers[0] - $numbers[1]);\n  $result = array($numbers[0], $numbers[1]);\n\
    \  for ($i = 0; $i < count($numbers); $i++) {\n    for ($j = $i + 1; $j < count($numbers);\
    \ $j++) {\n      $diff = abs($numbers[$i] - $numbers[$j]);\n      if ($diff <\
    \ $minDiff) {\n        $minDiff = $diff;\n        $result = array($numbers[$i],\
    \ $numbers[$j]);\n      }\n    }\n  }\n  return $result;\n}\n\necho json_encode(find_closest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2))) . \"\\n\";\necho json_encode(find_closest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0))) . \"\\n\";", "    if (!is_array($numbers)) {\n  \
    \      return false;\n    }\n    $count = count($numbers);\n    if ($count < 2)\
    \ {\n        return false;\n    }\n    sort($numbers);\n    $min = $numbers[0];\n\
    \    $max = $numbers[$count - 1];\n    $min_distance = null;\n    $pairs = array();\n\
    \    for ($i = 0; $i < $count - 1; $i++) {\n        $distance = $numbers[$i +\
    \ 1] - $numbers[$i];\n        if ($min_distance === null || $distance < $min_distance)\
    \ {\n            $min_distance = $distance;\n            $pairs = array($numbers[$i],\
    \ $numbers[$i + 1]);\n        }\n    }\n    return $pairs;\n}\nprint_r(find_closest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2)));\nprint_r(find_closest_elements(array(1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0)));", "    $closest = array($numbers[0], $numbers[1]);\n    $diff\
    \ = abs($numbers[0] - $numbers[1]);\n    foreach (range(0, count($numbers)-2)\
    \ as $i) {\n        $j = $i + 1;\n        $subdiff = abs($numbers[$i] - $numbers[$j]);\n\
    \        if ($subdiff < $diff) {\n            $diff = $subdiff;\n            $closest\
    \ = array($numbers[$i], $numbers[$j]);\n        }\n    }\n    return $closest;\n\
    }\n", "\treturn array(0, 0);\n}\n", "    $count = count($numbers);\n    if($count\
    \ < 2) return $numbers;\n    $distance = abs($numbers[0] - $numbers[1]);\n   \
    \ $closest_elements = array($numbers[0], $numbers[1]);\n    for($i = 0; $i < $count;\
    \ $i++) {\n        for($j = $i + 1; $j < $count; $j++) {\n            $current_distance\
    \ = abs($numbers[$i] - $numbers[$j]);\n            if($current_distance < $distance)\
    \ {\n                $distance = $current_distance;\n                $closest_elements\
    \ = array($numbers[$i], $numbers[$j]);\n            }\n        }\n    }\n    return\
    \ $closest_elements;\n}\n", "  // Write your code here\n  // To print results\
    \ to the standard output you can use print\n  // Example: print \"Hello world!\"\
    ;\n}", "    $closest = array();\n    sort($numbers);\n    $diff = $numbers[1]\
    \ - $numbers[0];\n    for ($i = 1; $i < count($numbers) - 1; $i++) {\n       \
    \ $new_diff = $numbers[$i + 1] - $numbers[$i];\n        if ($new_diff < $diff)\
    \ {\n            $diff = $new_diff;\n            $closest = array($numbers[$i],\
    \ $numbers[$i + 1]);\n        }\n    }\n    return $closest;\n}\n", "\t$smallest_difference\
    \ = INF;\n\t$closest_numbers = array();\n\t$count = count($numbers);\n\tfor ($i\
    \ = 0; $i < $count; $i++) {\n\t\tfor ($j = $i + 1; $j < $count; $j++) {\n\t\t\t\
    $difference = abs($numbers[$i] - $numbers[$j]);\n\t\t\tif ($difference < $smallest_difference)\
    \ {\n\t\t\t\t$smallest_difference = $difference;\n\t\t\t\t$closest_numbers = array($numbers[$i],\
    \ $numbers[$j]);\n\t\t\t}\n\t\t}\n\t}\n\tsort($closest_numbers);\n\treturn $closest_numbers;\n\
    }\n", "  // TODO\n}\n", "\t$number = $numbers[0];\n\t$smallest_difference = abs($numbers[0]\
    \ - $numbers[1]);\n\t$answer = array($numbers[0], $numbers[1]);\n\t$prev_number\
    \ = $numbers[0];\n\t$counter = 0;\n\tforeach ($numbers as $number) {\n\t\t$current_difference\
    \ = abs($number - $prev_number);\n\t\tif ($current_difference < $smallest_difference)\
    \ {\n\t\t\t$smallest_difference = $current_difference;\n\t\t\t$answer = array($prev_number,\
    \ $number);\n\t\t}\n\t\t$prev_number = $number;\n\t}\n\treturn $answer;\n}\n\n\
    var_dump(find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)));\nvar_dump(find_closest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0)));", "    if (count($numbers) > 1) {\n        $distance_of_closest_elements\
    \ = 999999999;\n        $closest_elements = [];\n        for ($i = 0; $i < count($numbers)\
    \ - 1; $i++) {\n            $difference = abs($numbers[$i] - $numbers[$i + 1]);\n\
    \            if ($difference < $distance_of_closest_elements) {\n            \
    \    $distance_of_closest_elements = $difference;\n                $closest_elements\
    \ = [$numbers[$i], $numbers[$i + 1]];\n            }\n        }\n        asort($closest_elements);\n\
    \        return $closest_elements;\n    } else {\n        return $numbers;\n \
    \   }\n}\n\n$numbers = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2);\n\necho \"The two\
    \ closest numbers are: <br>\";\n\nforeach (find_closest_elements($numbers) as\
    \ $number) {\n    echo $number . \"<br>\";\n}", "    usort($numbers, function($a,\
    \ $b) {\n        return ($a > $b) ? 1 : (($a < $b) ? -1 : 0);\n    });\n    $return\
    \ = array();\n    $size = count($numbers);\n    for ($i = 0; $i < $size - 1; $i++)\
    \ {\n        $return[] = array(\n            $numbers[$i],\n            $numbers[$i\
    \ + 1],\n            abs($numbers[$i] - $numbers[$i + 1])\n        );\n    }\n\
    \    usort($return, function($a, $b) {\n        return ($a[2] > $b[2]) ? 1 : (($a[2]\
    \ < $b[2]) ? -1 : 0);\n    });\n    return array($return[0][0], $return[0][1]);\n\
    }\n\necho json_encode(find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)));",
  "    $closest_pair = array(reset($numbers), next($numbers));\n\n    while ($number\
    \ = next($numbers)) {\n        $distance = $number - $closest_pair[0];\n     \
    \   if ($distance < $closest_pair[1] - $closest_pair[0]) {\n            $closest_pair\
    \ = array($number, $number + $distance);\n        }\n    }\n\n    return $closest_pair;\n\
    }\n\nvar_dump(find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)));\nvar_dump(find_closest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0)));", "    if (count($numbers) > 2) {\n        $closestNumbers\
    \ = array();\n        $difference = 0;\n        for ($i = 0; $i < count($numbers)\
    \ - 1; $i++) {\n            if ($i === 0) {\n                $closestNumbers[0]\
    \ = $numbers[$i];\n                $closestNumbers[1] = $numbers[$i + 1];\n  \
    \              $difference = abs($numbers[$i] - $numbers[$i + 1]);\n         \
    \   } else {\n                $newDifference = abs($numbers[$i] - $numbers[$i\
    \ + 1]);\n                if ($newDifference < $difference) {\n              \
    \      $closestNumbers[0] = $numbers[$i];\n                    $closestNumbers[1]\
    \ = $numbers[$i + 1];\n                    $difference = $newDifference;\n   \
    \             }\n            }\n        }\n        return $closestNumbers;\n \
    \   } else {\n        return array($numbers[0], $numbers[1]);\n    }\n}\n", " \
    \ $closestPair = array($numbers[0], $numbers[1]);\n  for ($i = 0; $i < count($numbers);\
    \ $i++) {\n    for ($j = $i + 1; $j < count($numbers); $j++) {\n      if (abs($numbers[$i]\
    \ - $numbers[$j]) < abs($closestPair[0] - $closestPair[1])) {\n        $closestPair\
    \ = array($numbers[$i], $numbers[$j]);\n      }\n    }\n  }\n  if ($closestPair[0]\
    \ > $closestPair[1]) {\n    $tmp = $closestPair[0];\n    $closestPair[0] = $closestPair[1];\n\
    \    $closestPair[1] = $tmp;\n  }\n  return $closestPair;\n}\n\n$numbers = array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2);\n\n$closestPair = find_closest_elements($numbers);\n\
    \necho implode(', ', $closestPair);", "  if (count($numbers) < 2) {\n    return\
    \ \"Array must have at least two elements\";\n  }\n  sort($numbers);\n  $abs_diff\
    \ = abs($numbers[0] - $numbers[1]);\n  $smallest = array($numbers[0], $numbers[1]);\n\
    \  for ($i = 0; $i < count($numbers) - 1; $i++) {\n    if (abs($numbers[$i] -\
    \ $numbers[$i + 1]) < $abs_diff) {\n      $abs_diff = abs($numbers[$i] - $numbers[$i\
    \ + 1]);\n      $smallest = array($numbers[$i], $numbers[$i + 1]);\n    }\n  }\n\
    \  return $smallest;\n}\n", "  $number_length = count($numbers);\n  $abs_differences\
    \ = array();\n  for ($i = 0; $i < $number_length - 1; $i++) {\n    $j = $i + 1;\n\
    \    while ($j < $number_length) {\n      $abs_differences[] = abs($numbers[$i]\
    \ - $numbers[$j]);\n      $j++;\n    }\n  }\n  $min_index = array_search(min($abs_differences),\
    \ $abs_differences);\n  $indices = array();\n  for ($i = 0; $i < $number_length\
    \ - 1; $i++) {\n    $j = $i + 1;\n    while ($j < $number_length) {\n      if\
    \ ($min_index == count($indices)) {\n        $indices[] = array($i, $j);\n   \
    \   }\n      $j++;\n    }\n  }\n  $values = array();\n  for ($i = 0; $i < count($indices);\
    \ $i++) {\n    $values[] = array($numbers[$indices[$i][0]], $numbers[$indices[$i][1]]);\n\
    \  }\n  return $values[$min_index];\n}\nprint_r(find_closest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2)));\nprint_r(find_closest_elements(array(1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0)));", "\tsort($numbers);\n\t$smallest_diff = null;\n\t$closest_elements\
    \ = array(null, null);\n\tfor ($i = 0; $i < count($numbers) - 1; $i++) {\n\t\t\
    $diff = $numbers[$i + 1] - $numbers[$i];\n\t\tif ($smallest_diff === null || $diff\
    \ < $smallest_diff) {\n\t\t\t$smallest_diff = $diff;\n\t\t\t$closest_elements\
    \ = array($numbers[$i], $numbers[$i + 1]);\n\t\t}\n\t}\n\treturn $closest_elements;\n\
    }\n", "    $result = array();\n    if (count($numbers) > 1) {\n        $i = 1;\n\
    \        $current_min = $numbers[1] - $numbers[0];\n        $current_min_pair\
    \ = array($numbers[0], $numbers[1]);\n        while ($i < count($numbers) - 1)\
    \ {\n            $diff = $numbers[$i+1] - $numbers[$i];\n            if ($diff\
    \ < $current_min) {\n                $current_min = $diff;\n                $current_min_pair\
    \ = array($numbers[$i], $numbers[$i+1]);\n            }\n            $i++;\n \
    \       }\n        $result = $current_min_pair;\n    }\n    return $result;\n\
    }\n", "    $min = 9999999;\n    $i = 0;\n    $j = 1;\n    for ($i = 0; $i < count($numbers)\
    \ - 1; $i++) {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n    \
    \        $min_ij = abs($numbers[$i] - $numbers[$j]);\n            if ($min_ij\
    \ < $min) {\n                $min = $min_ij;\n                $a = $numbers[$i];\n\
    \                $b = $numbers[$j];\n            }\n        }\n    }\n    return\
    \ array($a, $b);\n}\n\necho \"Min is: \" . find_closest_elements(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2))[0] . PHP_EOL;\necho \"Min is: \" . find_closest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2))[1] . PHP_EOL;\necho \"Min is: \" . find_closest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0))[0] . PHP_EOL;\necho \"Min is: \" . find_closest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0))[1] . PHP_EOL;", "    $array_pair = array();\n    for\
    \ ($i = 0; $i < count($numbers); $i++) {\n        for ($j = $i + 1; $j < count($numbers);\
    \ $j++) {\n            $difference = abs($numbers[$i] - $numbers[$j]);\n     \
    \       $array_pair[] = $difference;\n        }\n    }\n    $min_difference =\
    \ min($array_pair);\n    $result = array();\n    for ($i = 0; $i < count($numbers);\
    \ $i++) {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n         \
    \   $difference = abs($numbers[$i] - $numbers[$j]);\n            if ($difference\
    \ == $min_difference) {\n                $result[] = $numbers[$i];\n         \
    \       $result[] = $numbers[$j];\n            }\n        }\n    }\n    return\
    \ $result;\n}\necho \"<pre>\";\nprint_r(find_closest_elements(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2)));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(find_closest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0)));\necho \"</pre>\";", "\t// Your code here\n}", " \
    \   $closest_numbers = array();\n    $closest_difference = 0;\n    for ($i = 0;\
    \ $i < sizeof($numbers); $i++) {\n        for ($j = $i + 1; $j < sizeof($numbers);\
    \ $j++) {\n            $difference = abs($numbers[$i] - $numbers[$j]);\n     \
    \       if ($difference < $closest_difference || $closest_difference == 0) {\n\
    \                $closest_difference = $difference;\n                $closest_numbers\
    \ = array($numbers[$i], $numbers[$j]);\n            }\n        }\n    }\n    return\
    \ $closest_numbers;\n}\n\n$numbers = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2);\necho\
    \ implode(\" \", find_closest_elements($numbers));", "  $minDiff = INF;\n  $minIdx\
    \ = 0;\n  for ($i = 0; $i < count($numbers); $i++) {\n    if ($i == 0) {\n   \
    \   $diff = abs($numbers[0] - $numbers[1]);\n    } else {\n      $diff = abs($numbers[$i]\
    \ - $numbers[$i - 1]);\n    }\n    if ($diff < $minDiff) {\n      $minDiff = $diff;\n\
    \      $minIdx = $i;\n    }\n  }\n  if ($minIdx == 0) {\n    return array($numbers[0],\
    \ $numbers[1]);\n  } else {\n    return array($numbers[$minIdx - 1], $numbers[$minIdx]);\n\
    \  }\n}\n", "    $closest = null;\n    $closestDiff = PHP_INT_MAX;\n    for ($i\
    \ = 0; $i < count($numbers); $i++) {\n        for ($j = 0; $j < count($numbers);\
    \ $j++) {\n            if ($i == $j) {\n                continue;\n          \
    \  }\n            $diff = abs($numbers[$i] - $numbers[$j]);\n            if ($diff\
    \ < $closestDiff) {\n                $closestDiff = $diff;\n                $closest\
    \ = array($numbers[$i], $numbers[$j]);\n            }\n        }\n    }\n    return\
    \ $closest;\n}\n\nvar_dump(find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2)));\nvar_dump(find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)));",
  "    $minimum = 9999999999;\n    $closest = array();\n    sort($numbers);\n    for\
    \ ($i = 0; $i < count($numbers) - 1; $i++) {\n        $current = $numbers[$i +\
    \ 1] - $numbers[$i];\n        if ($current < $minimum) {\n            $minimum\
    \ = $current;\n            $closest = array($numbers[$i], $numbers[$i + 1]);\n\
    \        }\n    }\n    return $closest;\n}", "\t$closest_array = [$numbers[0],\
    \ $numbers[1]];\n\t$closest_gap = abs($numbers[0] - $numbers[1]);\n\t$count =\
    \ count($numbers);\n\tfor ($i = 0; $i < $count; $i++) {\n\t\tfor ($j = $i + 1;\
    \ $j < $count; $j++) {\n\t\t\t$gap = abs($numbers[$i] - $numbers[$j]);\n\t\t\t\
    if ($gap < $closest_gap) {\n\t\t\t\t$closest_gap = $gap;\n\t\t\t\t$closest_array\
    \ = [$numbers[$i], $numbers[$j]];\n\t\t\t}\n\t\t}\n\t}\n\tsort($closest_array);\n\
    \treturn $closest_array;\n}", "\t$closest_elements = [$numbers[0], $numbers[1]];\n\
    \t$smallest_difference = abs($numbers[0] - $numbers[1]);\n\tfor ($i = 0; $i <\
    \ count($numbers); $i++) {\n\t\tfor ($j = $i + 1; $j < count($numbers); $j++)\
    \ {\n\t\t\t$difference = abs($numbers[$i] - $numbers[$j]);\n\t\t\tif ($difference\
    \ < $smallest_difference) {\n\t\t\t\t$smallest_difference = $difference;\n\t\t\
    \t\t$closest_elements = [$numbers[$i], $numbers[$j]];\n\t\t\t}\n\t\t}\n\t}\n\t\
    sort($closest_elements);\n\treturn $closest_elements;\n}\n\nprint_r(find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]));\nprint_r(find_closest_elements([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0]));", "  if (count($numbers) < 2) {\n    echo 'Array must have at least\
    \ two elements.';\n    return;\n  }\n  $min = min($numbers);\n  $max = max($numbers);\n\
    \  $closest_distance = $max - $min;\n  $closest_elements = array($min, $max);\n\
    \  for ($i = 0; $i < count($numbers); $i++) {\n    for ($j = $i + 1; $j < count($numbers);\
    \ $j++) {\n      $distance = abs($numbers[$i] - $numbers[$j]);\n      if ($distance\
    \ < $closest_distance) {\n        $closest_distance = $distance;\n        $closest_elements\
    \ = array($numbers[$i], $numbers[$j]);\n      }\n    }\n  }\n  return $closest_elements;\n\
    }\n", "  $l=count($numbers);\n  $diff=array();\n  for($i=0;$i<$l-1;$i++){\n  \
    \  $diff[$i]=abs($numbers[$i]-$numbers[$i+1]);\n  }\n  $min = min($diff);\n  $ind\
    \ = array_search($min, $diff);\n  return array($numbers[$ind],$numbers[$ind+1]);\n\
    }\necho '<pre>';\n$val=array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2);\n$closest=find_closest_elements($val);\n\
    print_r($closest);\necho '</pre>';", "    // for each number get the closest number\
    \ and store in array\n    $closest_num = [];\n    foreach ($numbers as $index=>$num)\
    \ {\n        $next_index = $index + 1;\n        if (isset($numbers[$next_index]))\
    \ {\n            $closest_num[$num] = $numbers[$next_index];\n        }\n    }\n\
    \    // find the min distance between numbers\n    $min_distance = 0;\n    $closest_nums\
    \ = [];\n    foreach ($closest_num as $num=>$closest) {\n        $distance = $closest\
    \ - $num;\n        if ($min_distance == 0 || $distance < $min_distance) {\n  \
    \          $min_distance = $distance;\n            $closest_nums = [$num, $closest];\n\
    \        }\n    }\n    return $closest_nums;\n}\n", "    $closest = -1;\n    $index1\
    \ = 0;\n    $index2 = 0;\n    for ($i = 0; $i < count($numbers); $i++) {\n   \
    \     for ($j = $i + 1; $j < count($numbers); $j++) {\n            $distance =\
    \ abs($numbers[$i] - $numbers[$j]);\n            if ($closest == -1 || $distance\
    \ < $closest) {\n                $closest = $distance;\n                $index1\
    \ = $i;\n                $index2 = $j;\n            }\n        }\n    }\n    if\
    \ ($numbers[$index1] > $numbers[$index2]) {\n        $temp = $index1;\n      \
    \  $index1 = $index2;\n        $index2 = $temp;\n    }\n    return array($numbers[$index1],\
    \ $numbers[$index2]);\n}\n$numbers = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2);\n$close_numbers\
    \ = find_closest_elements($numbers);\nprint_r($close_numbers);\n$numbers = array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0);\n$close_numbers = find_closest_elements($numbers);\n\
    print_r($close_numbers);", "    $length = count($numbers);\n    $smallest = abs($numbers[0]\
    \ - $numbers[1]);\n    $result = array($numbers[0], $numbers[1]);\n    for ($i\
    \ = 0; $i < $length - 1; $i++) {\n        for ($j = $i + 1; $j < $length; $j++)\
    \ {\n            $diff = abs($numbers[$i] - $numbers[$j]);\n            if ($diff\
    \ < $smallest) {\n                $smallest = $diff;\n                $result\
    \ = array($numbers[$i], $numbers[$j]);\n            }\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}", "  $min_distance = PHP_INT_MAX;\n  $i = 0;\n  $closest_numbers\
    \ = [];\n  for ($i = 0; $i < count($numbers) - 1; $i++) {\n    if ($numbers[$i\
    \ + 1] - $numbers[$i] < $min_distance) {\n      $min_distance = $numbers[$i +\
    \ 1] - $numbers[$i];\n      $closest_numbers = [$numbers[$i], $numbers[$i + 1]];\n\
    \    }\n  }\n  return $closest_numbers;\n}\n", "  $min = 0;\n  $max = 0;\n  $minPos\
    \ = 0;\n  $maxPos = 0;\n  $min = $numbers[0];\n  $max = $numbers[0];\n  $i = 0;\n\
    \  while ($i < count($numbers)) {\n    if ($numbers[$i] < $min) {\n      $min\
    \ = $numbers[$i];\n      $minPos = $i;\n    }\n    if ($numbers[$i] > $max) {\n\
    \      $max = $numbers[$i];\n      $maxPos = $i;\n    }\n    $i++;\n  }\n  return\
    \ array($min, $max);\n}\nprint_r(find_closest_elements(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2)));\nprint_r(find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)));",
  "  //sort array\n  sort($numbers);\n  //create array to store return values\n  $ret\
    \ = array();\n  //set current value to high value to make sure all values are\
    \ lower than this\n  $curr_val = 1000;\n  //loop through array\n  for($i = 0;\
    \ $i < count($numbers); $i++) {\n    //if current value is higher than the next\
    \ one, set current to the next value\n    if($curr_val > $numbers[$i+1]){\n  \
    \    $curr_val = $numbers[$i+1];\n      //set next value to a high number\n  \
    \    $next_val = 1000;\n      //loop through array starting from next value\n\
    \      for($j = $i+1; $j < count($numbers); $j++) {\n        //if next value is\
    \ lower than current value, set next value to value of current\n        if($next_val\
    \ > $numbers[$j]){\n          $next_val = $numbers[$j];\n          //set ret[0]\
    \ to current value\n          $ret[0] = $curr_val;\n          //set ret[1] to\
    \ next value\n          $ret[1] = $next_val;\n        }\n      }\n    }\n  }\n\
    \  //return array\n  return $ret;\n}", "    if (count($numbers) < 2) {\n     \
    \   return $numbers;\n    }\n    $min_diff = null;\n    $closest_numbers = array();\n\
    \    for ($i = 0; $i < count($numbers) - 1; $i++) {\n        for ($j = $i + 1;\
    \ $j < count($numbers); $j++) {\n            $diff = abs($numbers[$i] - $numbers[$j]);\n\
    \            if ($min_diff === null || $diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                $closest_numbers = array($numbers[$i], $numbers[$j]);\n\
    \            }\n        }\n    }\n    return $closest_numbers;\n}\n", "    $min_delta\
    \ = abs($numbers[0] - $numbers[1]);\n    $best_delta = null;\n    $first_pair\
    \ = null;\n    for ($i = 0; $i < count($numbers) - 1; $i++) {\n        for ($j\
    \ = $i + 1; $j < count($numbers); $j++) {\n            $delta = abs($numbers[$i]\
    \ - $numbers[$j]);\n            if ($delta < $min_delta) {\n                $first_pair\
    \ = [$numbers[$i], $numbers[$j]];\n                $min_delta = $delta;\n    \
    \        }\n        }\n    }\n    return $first_pair;\n}\n", "  // Implement me!\n\
    }", "  $numbers = array_unique($numbers);\n  sort($numbers);\n  $closest = array(\n\
    \    'index' => 0,\n    'diff' => PHP_INT_MAX,\n  );\n  for ($i = 0; $i < count($numbers)\
    \ - 1; $i++) {\n    $diff = abs($numbers[$i + 1] - $numbers[$i]);\n    if ($diff\
    \ < $closest['diff']) {\n      $closest['index'] = $i;\n      $closest['diff']\
    \ = $diff;\n    }\n  }\n  return array($numbers[$closest['index']], $numbers[$closest['index']\
    \ + 1]);\n}\n", "    $closest_pair = [$numbers[0], $numbers[1]];\n    $min_diff\
    \ = abs($numbers[0] - $numbers[1]);\n    for ($i = 0; $i < count($numbers); $i++)\
    \ {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n            $diff\
    \ = abs($numbers[$i] - $numbers[$j]);\n            if ($diff < $min_diff) {\n\
    \                $min_diff = $diff;\n                $closest_pair = [$numbers[$i],\
    \ $numbers[$j]];\n            }\n        }\n    }\n    if ($closest_pair[0] >\
    \ $closest_pair[1]) {\n        $closest_pair = [$closest_pair[1], $closest_pair[0]];\n\
    \    }\n    return $closest_pair;\n}\n", "    $min_diff = abs($numbers[0] - $numbers[1]);\n\
    \    $min_pair = array($numbers[0], $numbers[1]);\n    $length = count($numbers);\n\
    \    for ($i = 0; $i < $length - 1; $i++) {\n        for ($j = $i + 1; $j < $length;\
    \ $j++) {\n            $diff = abs($numbers[$i] - $numbers[$j]);\n           \
    \ if ($diff < $min_diff) {\n                $min_diff = $diff;\n             \
    \   $min_pair = array($numbers[$i], $numbers[$j]);\n            }\n        }\n\
    \    }\n    return $min_pair;\n}\n", "    $number_count = count($numbers);\n \
    \   $closest_diff = INF;\n    $closest_elements = array();\n    for ($i = 0; $i\
    \ < $number_count; $i++) {\n        for ($j = $i + 1; $j < $number_count; $j++)\
    \ {\n            $diff = abs($numbers[$i] - $numbers[$j]);\n            if ($diff\
    \ == 0) {\n                $closest_elements = array($numbers[$i], $numbers[$j]);\n\
    \                break 2;\n            } else if ($diff < $closest_diff) {\n \
    \               $closest_diff = $diff;\n                $closest_elements = array($numbers[$i],\
    \ $numbers[$j]);\n            }\n        }\n    }\n    sort($closest_elements);\n\
    \    return $closest_elements;\n}\n", "\t$closest = array($numbers[0], $numbers[1]);\n\
    \t$closest_distance = abs($numbers[0] - $numbers[1]);\n\t$len = count($numbers);\n\
    \tfor ($i = 0; $i < $len - 1; $i++) {\n\t\tfor ($j = $i + 1; $j < $len; $j++)\
    \ {\n\t\t\t$dist = abs($numbers[$i] - $numbers[$j]);\n\t\t\tif ($dist < $closest_distance)\
    \ {\n\t\t\t\t$closest_distance = $dist;\n\t\t\t\t$closest = array($numbers[$i],\
    \ $numbers[$j]);\n\t\t\t}\n\t\t}\n\t}\n\tsort($closest);\n\treturn $closest;\n\
    }\n", "  // TODO: write the solution and return the answer\n}", "    $best_distance\
    \ = abs($numbers[0] - $numbers[1]);\n    $best_numbers = array($numbers[0], $numbers[1]);\n\
    \    for ($i = 0; $i < count($numbers); $i++) {\n        for ($j = $i + 1; $j\
    \ < count($numbers); $j++) {\n            $distance = abs($numbers[$i] - $numbers[$j]);\n\
    \            if ($distance < $best_distance) {\n                $best_distance\
    \ = $distance;\n                $best_numbers = array($numbers[$i], $numbers[$j]);\n\
    \            }\n        }\n    }\n    sort($best_numbers);\n    return $best_numbers;\n\
    }\n", "    $closest_pair = array($numbers[0], $numbers[1]);\n    $closest_pair_distance\
    \ = abs($numbers[0] - $numbers[1]);\n    for ($i = 0; $i < count($numbers); $i++)\
    \ {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n            $distance\
    \ = abs($numbers[$i] - $numbers[$j]);\n            if ($distance < $closest_pair_distance)\
    \ {\n                $closest_pair_distance = $distance;\n                $closest_pair\
    \ = array($numbers[$i], $numbers[$j]);\n            }\n        }\n    }\n    sort($closest_pair);\n\
    \    return $closest_pair;\n}\n", "\t$i = 0;\n\t$j = 0;\n\t$closest_j = 0;\n\t\
    $closest_diff = null;\n\t$current_diff = null;\n\tfor ($i = 0; $i < count($numbers)\
    \ - 1; $i++) {\n\t\tfor ($j = 1; $j < count($numbers); $j++) {\n\t\t\tif (abs($numbers[$i]\
    \ - $numbers[$j]) < $closest_diff || $closest_diff == null) {\n\t\t\t\t$closest_diff\
    \ = abs($numbers[$i] - $numbers[$j]);\n\t\t\t\t$closest_j = $j;\n\t\t\t}\n\t\t\
    }\n\t\tif ($closest_diff != null) {\n\t\t\t$closest_j = 0;\n\t\t\t$closest_diff\
    \ = null;\n\t\t}\n\t}\n\t$result = array($numbers[$i], $numbers[$closest_j]);\n\
    \treturn $result;\n}", "    $x = reset($numbers);\n    $y = 0;\n    foreach ($numbers\
    \ as $number) {\n        if ($number == $x) continue;\n        if ($y == 0) {\n\
    \            $y = $number;\n            continue;\n        }\n        if (abs($x\
    \ - $y) > abs($x - $number)) {\n            $y = $number;\n        }\n    }\n\
    \    if ($x < $y) {\n        return array($x, $y);\n    } else {\n        return\
    \ array($y, $x);\n    }\n}\n$result = find_closest_elements(array(1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2));\nprint_r($result);\n\necho '<br>';\n\n$result = find_closest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0));\nprint_r($result);", "  $size = count($numbers);\n\
    \  $closest_pair = array($numbers[0], $numbers[1]);\n  $min_diff = abs($numbers[0]\
    \ - $numbers[1]);\n  for ($i = 0; $i < $size; $i++) {\n    for ($j = $i + 1; $j\
    \ < $size; $j++) {\n      $diff = abs($numbers[$i] - $numbers[$j]);\n      if\
    \ ($diff < $min_diff) {\n        $min_diff = $diff;\n        $closest_pair = array($numbers[$i],\
    \ $numbers[$j]);\n      }\n    }\n  }\n  sort($closest_pair);\n  return $closest_pair;\n\
    }\n", "    $numbers = array_unique($numbers);\n    if (count($numbers) <= 1) {\n\
    \        return false;\n    }\n    $min_diff = 999999;\n    $min_diff_pair = array();\n\
    \    for ($i = 0; $i < count($numbers); $i++) {\n        for ($j = $i+1; $j <\
    \ count($numbers); $j++) {\n            $diff = abs($numbers[$i] - $numbers[$j]);\n\
    \            if ($diff < $min_diff) {\n                $min_diff = $diff;\n  \
    \              $min_diff_pair = array($numbers[$i], $numbers[$j]);\n         \
    \   }\n        }\n    }\n    sort($min_diff_pair);\n    return $min_diff_pair;\n\
    }\n$a = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2);\nprint_r(find_closest_elements($a));\n\
    echo \"\\n\";\n$a = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0);\nprint_r(find_closest_elements($a));\n\
    echo \"\\n\";\n", "    $number1 = 0;\n    $number2 = 0;\n    $closest = $numbers[1]\
    \ - $numbers[0];\n    for ($i = 0; $i < count($numbers); $i++) {\n        for\
    \ ($j = $i + 1; $j < count($numbers); $j++) {\n            if (abs($numbers[$i]\
    \ - $numbers[$j]) < $closest) {\n                $closest = abs($numbers[$i] -\
    \ $numbers[$j]);\n                $number1 = $numbers[$i];\n                $number2\
    \ = $numbers[$j];\n            }\n        }\n    }\n    return array($number1,\
    \ $number2);\n}\n\nvar_dump(find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2)));\nvar_dump(find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)));",
  "  // your code here\n  if (!is_array($numbers)) {\n    throw new InvalidArgumentException(\"\
    find_closest_elements expects an array\");\n  }\n  $count = count($numbers);\n\
    \  if ($count < 2) {\n    throw new InvalidArgumentException(\"find_closest_elements\
    \ requires an array with at least two elements\");\n  }\n  $closest = array($numbers[0],\
    \ $numbers[1]);\n  $closest_diff = abs($numbers[0] - $numbers[1]);\n  for ($i\
    \ = 0; $i < $count; $i++) {\n    for ($j = $i + 1; $j < $count; $j++) {\n    \
    \  $diff = abs($numbers[$i] - $numbers[$j]);\n      if ($diff < $closest_diff)\
    \ {\n        $closest = array($numbers[$i], $numbers[$j]);\n        $closest_diff\
    \ = $diff;\n      }\n    }\n  }\n  return $closest;\n}\n", "  sort($numbers);\n\
    \  $closest_numbers = array($numbers[0], $numbers[1]);\n  $smallest_difference\
    \ = abs($numbers[0] - $numbers[1]);\n  for ($i = 0; $i < count($numbers) - 1;\
    \ $i++) {\n    $difference = abs($numbers[$i] - $numbers[$i + 1]);\n    if ($difference\
    \ < $smallest_difference) {\n      $smallest_difference = $difference;\n     \
    \ $closest_numbers = array($numbers[$i], $numbers[$i + 1]);\n    }\n  }\n  return\
    \ $closest_numbers;\n}\n", "    $smallest = $numbers[0];\n    $largest = $numbers[0];\n\
    \    $smallestIndex = 0;\n    $largestIndex = 0;\n    $closest = abs($numbers[0]\
    \ - $numbers[1]);\n    $closestIndex = 0;\n    $closestLargestIndex = 1;\n   \
    \ $closestSmallestIndex = 0;\n    $length = count($numbers);\n    for ($i = 1;\
    \ $i < $length; $i++) {\n        if ($numbers[$i] < $smallest) {\n           \
    \ $smallest = $numbers[$i];\n            $smallestIndex = $i;\n        }\n   \
    \     if ($numbers[$i] > $largest) {\n            $largest = $numbers[$i];\n \
    \           $largestIndex = $i;\n        }\n        if (abs($numbers[$i] - $numbers[$i\
    \ - 1]) < $closest) {\n            $closest = abs($numbers[$i] - $numbers[$i -\
    \ 1]);\n            $closestIndex = $i - 1;\n            $closestLargestIndex\
    \ = $i;\n            $closestSmallestIndex = $i - 1;\n        }\n    }\n    if\
    \ (abs($smallest - $numbers[$largestIndex - 1]) < $closest) {\n        $closest\
    \ = abs($smallest - $numbers[$largestIndex - 1]);\n        $closestSmallestIndex\
    \ = $smallestIndex;\n        $closestLargestIndex = $largestIndex - 1;\n    }\n\
    \    if (abs($largest - $numbers[$smallestIndex + 1]) < $closest) {\n        $closest\
    \ = abs($largest - $numbers[$smallestIndex + 1]);\n        $closestSmallestIndex\
    \ = $smallestIndex + 1;\n        $closestLargestIndex = $largestIndex;\n    }\n\
    \    if ($numbers[$closestSmallestIndex] <= $numbers[$closestLargestIndex]) {\n\
    \        return array($numbers[$", "    $n = count($numbers);\n    $min_diff =\
    \ $numbers[1] - $numbers[0];\n    $min_diff_elements = array($numbers[0], $numbers[1]);\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n\
    \            $diff = abs($numbers[$i] - $numbers[$j]);\n            if ($diff\
    \ < $min_diff) {\n                $min_diff = $diff;\n                $min_diff_elements\
    \ = array($numbers[$i], $numbers[$j]);\n            }\n        }\n    }\n    sort($min_diff_elements);\n\
    \    return $min_diff_elements;\n}\n\nprint_r(find_closest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2)));\nprint_r(find_closest_elements(array(1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0)));", "  $min = abs($numbers[0] - $numbers[1]);\n  $closest_pair\
    \ = array($numbers[0], $numbers[1]);\n  for ($i = 0; $i < count($numbers); $i++)\
    \ {\n    for ($j = $i + 1; $j < count($numbers); $j++) {\n      $current_diff\
    \ = abs($numbers[$i] - $numbers[$j]);\n      if ($current_diff < $min) {\n   \
    \     $min = $current_diff;\n        $closest_pair = array($numbers[$i], $numbers[$j]);\n\
    \      }\n    }\n  }\n  sort($closest_pair);\n  return $closest_pair;\n}\n", " \
    \ $result = array();\n  $n = count($numbers);\n  $smallestDiff = abs($numbers[0]\
    \ - $numbers[1]);\n  $result[] = $numbers[0];\n  $result[] = $numbers[1];\n  for\
    \ ($i = 0; $i < $n; $i++) {\n    for ($j = $i + 1; $j < $n; $j++) {\n      $diff\
    \ = abs($numbers[$i] - $numbers[$j]);\n      if ($diff == 0) {\n        return\
    \ array($numbers[$i], $numbers[$j]);\n      }\n      if ($diff < $smallestDiff)\
    \ {\n        $smallestDiff = $diff;\n        $result[0] = $numbers[$i];\n    \
    \    $result[1] = $numbers[$j];\n      }\n    }\n  }\n  return $result;\n}\n",
  "    $count = count($numbers);\n    if($count > 1) {\n        $min = null;\n   \
    \     $max = null;\n        $min_max = $numbers[0] + $numbers[1];\n        for($i\
    \ = 0; $i < $count - 1; $i++) {\n            for($j = $i + 1; $j < $count; $j++)\
    \ {\n                $sum = $numbers[$i] + $numbers[$j];\n                if($sum\
    \ < $min_max) {\n                    $min_max = $sum;\n                    $min\
    \ = $numbers[$i];\n                    $max = $numbers[$j];\n                }\n\
    \            }\n        }\n        if($min < $max) {\n            return array($min,\
    \ $max);\n        } else {\n            return array($max, $min);\n        }\n\
    \    } else {\n        return $numbers;\n    }\n}\n\n$test = array(1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2);\necho \"Test: \" . print_r($test, true) . \"\\n\";\necho \"\
    Result: \" . print_r(find_closest_elements($test), true) . \"\\n\";\n\n$test =\
    \ array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0);\necho \"Test: \" . print_r($test, true)\
    \ . \"\\n\";\necho \"Result: \" . print_r(find_closest_elements($test), true)\
    \ . \"\\n\";\n\n$test = array(1.0);\necho \"Test: \" . print_r($test, true) .\
    \ \"\\n\";\necho \"Result: \" . print_r(find_closest_elements($test), true) .\
    \ \"\\n\";\n\n$test = array();\necho \"Test: \" . print_r($test, true) . \"\\\
    n\";\necho \"Result: \" . print_r(find_closest_elements($test), true) . \"\\n\"\
    ;", "    $differences = [];\n    $l = count($numbers);\n    for ($i = 0; $i <\
    \ $l; $i++) {\n        for ($j = $i + 1; $j < $l; $j++) {\n            $differences[]\
    \ = abs($numbers[$i] - $numbers[$j]);\n        }\n    }\n    $minIndex = array_search(min($differences),\
    \ $differences);\n    $min = (int)$minIndex / ($l - 1);\n    $max = $minIndex\
    \ % ($l - 1) + 1;\n    return array($numbers[$min], $numbers[$max]);\n}\n\n$array\
    \ = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2);\nvar_dump(find_closest_elements($array));",
  "\t// TODO\n}\n", "  $min = 0;\n  for ($i = 0; $i < count($numbers) - 1; $i++) {\n\
    \    $cur = abs($numbers[$i] - $numbers[$i + 1]);\n    if ($i == 0 || $cur < $min)\
    \ {\n      $closest = array($numbers[$i], $numbers[$i + 1]);\n      $min = $cur;\n\
    \    }\n  }\n  return $closest;\n}\n", "    $closest = array();\n    for ($i =\
    \ 0; $i < count($numbers) - 1; $i++) {\n        $difference = abs($numbers[$i]\
    \ - $numbers[$i + 1]);\n        $closest[] = array($numbers[$i], $numbers[$i +\
    \ 1], $difference);\n    }\n    usort($closest, function ($a, $b) {\n        return\
    \ $a[2] <=> $b[2];\n    });\n    return $closest[0];\n}\n\n$numbers = array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2);\n\nvar_dump(find_closest_elements($numbers));", " \
    \   $result = array();\n    $min_distance = null;\n    for ($i = 0; $i < count($numbers);\
    \ $i++) {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n         \
    \   $distance = abs($numbers[$i] - $numbers[$j]);\n            if (!isset($min_distance)\
    \ || $distance < $min_distance) {\n                $min_distance = $distance;\n\
    \                $result = array($numbers[$i], $numbers[$j]);\n            }\n\
    \        }\n    }\n    return $result;\n}\n\necho implode(', ', find_closest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2)));\necho implode(', ', find_closest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0)));", "    $min = abs($numbers[0] - $numbers[1]);\n\
    \    $answer = array($numbers[0], $numbers[1]);\n    $found = false;\n    $i =\
    \ 1;\n    $j = 0;\n    while ($i < count($numbers)) {\n        $diff = abs($numbers[$i]\
    \ - $numbers[$j]);\n        if ($min > $diff) {\n            $min = $diff;\n \
    \           $answer = array($numbers[$j], $numbers[$i]);\n            $found =\
    \ true;\n        }\n        $i++;\n        $j++;\n    }\n    if ($found) {\n \
    \       return $answer;\n    } else {\n        return array($numbers[0], $numbers[0]);\n\
    \    }\n}\n", "\t$closest = array();\n\t$min_dist = null;\n\tfor ($i = 0; $i <\
    \ count($numbers); $i++) {\n\t\tfor ($j = $i + 1; $j < count($numbers); $j++)\
    \ {\n\t\t\t$dist = abs($numbers[$i] - $numbers[$j]);\n\t\t\tif ($min_dist ===\
    \ null || $dist < $min_dist) {\n\t\t\t\t$min_dist = $dist;\n\t\t\t\t$closest =\
    \ array($numbers[$i], $numbers[$j]);\n\t\t\t}\n\t\t}\n\t}\n\tsort($closest);\n\
    \treturn $closest;\n}\n\necho \"Test #1: \";\n$numbers = array(1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2);\n$closest = find_closest_elements($numbers);\nif ($closest ==\
    \ array(2.0, 2.2)) {\n\techo \"Passed.\";\n} else {\n\techo \"Failed: Expected\
    \ closest to be array(2.0, 2.2), but got \" . var_export($closest, true);\n}\n\
    echo \"\\n\";\n\necho \"Test #2: \";\n$numbers = array(1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0);\n$closest = find_closest_elements($numbers);\nif ($closest == array(2.0,\
    \ 2.0)) {\n\techo \"Passed.\";\n} else {\n\techo \"Failed: Expected closest to\
    \ be array(2.0, 2.0), but got \" . var_export($closest, true);\n}\necho \"\\n\"\
    ;\n\necho \"Test #3: \";\n$numbers = array(1.0, 2.0, 3.0, 4.0, 5.0, 6.0);\n$closest\
    \ = find_closest_elements($numbers);\nif ($closest == array(5.0, 6.", "    $temp\
    \ = [];\n    $closest_elements = [];\n    $smallest_difference = 10000000000;\n\
    \    $arrlength = count($numbers);\n    for ($i = 0; $i < $arrlength; $i++) {\n\
    \        for ($j = $i + 1; $j < $arrlength; $j++) {\n            $difference =\
    \ abs($numbers[$i] - $numbers[$j]);\n            if ($difference < $smallest_difference)\
    \ {\n                $smallest_difference = $difference;\n                $temp[0]\
    \ = $numbers[$i];\n                $temp[1] = $numbers[$j];\n            }\n \
    \       }\n    }\n    sort($temp);\n    $closest_elements = array($temp[0], $temp[1]);\n\
    \    return $closest_elements;\n}\n", "    $numbers_length = count($numbers);\n\
    \    $closest_numbers = array(0, 0);\n    $closest_distance = $numbers[1] - $numbers[0];\n\
    \    $closest_numbers[0] = $numbers[0];\n    $closest_numbers[1] = $numbers[1];\n\
    \    for ($i = 0; $i < $numbers_length; $i++) {\n        for ($j = $i + 1; $j\
    \ < $numbers_length; $j++) {\n            $distance = abs($numbers[$i] - $numbers[$j]);\n\
    \            if ($distance < $closest_distance) {\n                $closest_distance\
    \ = $distance;\n                $closest_numbers[0] = $numbers[$i];\n        \
    \        $closest_numbers[1] = $numbers[$j];\n            }\n        }\n    }\n\
    \    return $closest_numbers;\n}", "  $closest_elements = array($numbers[0], $numbers[1]);\n\
    \  $min_distance = abs($numbers[0] - $numbers[1]);\n  for ($i = 0; $i < count($numbers);\
    \ $i++) {\n    for ($j = $i + 1; $j < count($numbers); $j++) {\n      $distance\
    \ = abs($numbers[$i] - $numbers[$j]);\n      if ($distance < $min_distance) {\n\
    \        $min_distance = $distance;\n        $closest_elements = array($numbers[$i],\
    \ $numbers[$j]);\n      }\n    }\n  }\n  sort($closest_elements);\n  return $closest_elements;\n\
    }\n", "    $smallest = 999999999;\n    $num1 = $num2 = 0;\n    for ($i = 0; $i\
    \ < count($numbers); $i++) {\n        for ($j = 0; $j < count($numbers); $j++)\
    \ {\n            if ($i != $j) {\n                $diff = abs($numbers[$i] - $numbers[$j]);\n\
    \                if ($diff < $smallest) {\n                    $smallest = $diff;\n\
    \                    $num1 = $numbers[$i];\n                    $num2 = $numbers[$j];\n\
    \                }\n            }\n        }\n    }\n    return array($num1, $num2);\n\
    }\n\n$numbers = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2);\n$result = find_closest_elements($numbers);\n\
    print_r($result);\n\n$numbers = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0);\n$result\
    \ = find_closest_elements($numbers);\nprint_r($result);", "    $length = count($numbers);\n\
    \    $max_diff = abs($numbers[1] - $numbers[0]);\n    $result = array($numbers[0],\
    \ $numbers[1]);\n    for ($i = 0; $i < $length; $i++) {\n        for ($j = $i\
    \ + 1; $j < $length; $j++) {\n            $diff = abs($numbers[$i] - $numbers[$j]);\n\
    \            if ($diff > $max_diff) {\n                $max_diff = $diff;\n  \
    \              $result = array($numbers[$i], $numbers[$j]);\n            }\n \
    \       }\n    }\n    sort($result);\n    return $result;\n}\n\n$array = array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2);\nprint_r(find_closest_elements($array));\n", "   \
    \ $numbers_length = count($numbers);\n    $differences = array();\n    for ($i\
    \ = 0; $i < $numbers_length - 1; $i++) {\n        for ($j = $i + 1; $j < $numbers_length;\
    \ $j++) {\n            $differences[] = abs($numbers[$i] - $numbers[$j]);\n  \
    \      }\n    }\n    $min_diff = min($differences);\n    $key = array_search($min_diff,\
    \ $differences);\n    $result = array();\n    $result[] = $numbers[$key];\n  \
    \  $result[] = $numbers[$key + 1];\n    sort($result);\n    return $result;\n\
    }\n", "  $numbers = array_unique($numbers);\n  $shortest = null;\n  $shortest2\
    \ = null;\n  $result = array();\n  sort($numbers);\n  for ($i = 0; $i < count($numbers)\
    \ - 1; $i++) {\n    $shortest = abs($numbers[$i] - $numbers[$i + 1]);\n    if\
    \ ($shortest2 === null || $shortest2 > $shortest) {\n      $shortest2 = $shortest;\n\
    \      $result = array($numbers[$i], $numbers[$i + 1]);\n    }\n  }\n  return\
    \ $result;\n}\n", "    $diff = abs($numbers[0] - $numbers[1]);\n    $pos1 = 0;\n\
    \    $pos2 = 1;\n    for ($i = 0; $i < count($numbers); $i++) {\n        for ($j\
    \ = 0; $j < count($numbers); $j++) {\n            if (abs($numbers[$i] - $numbers[$j])\
    \ < $diff) {\n                $diff = abs($numbers[$i] - $numbers[$j]);\n    \
    \            $pos1 = $i;\n                $pos2 = $j;\n            }\n       \
    \ }\n    }\n    return $pos1 > $pos2 ? array($numbers[$pos2], $numbers[$pos1])\
    \ : array($numbers[$pos1], $numbers[$pos2]);\n}\n\nprint_r(find_closest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2)));\nprint_r(find_closest_elements(array(1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0)));", "\t$first_number = $numbers[0];\n\t$second_number = null;\n\
    \t$closest_difference = null;\n\tforeach ($numbers as $key => $number) {\n\t\t\
    if ($key > 0) {\n\t\t\t$difference = abs($number - $first_number);\n\t\t\tif ($closest_difference\
    \ === null || $difference < $closest_difference) {\n\t\t\t\t$closest_difference\
    \ = $difference;\n\t\t\t\t$second_number = $number;\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ array($first_number, $second_number);\n}", "    $min_diff = null;\n    $closest_pair\
    \ = array();\n    for ($i = 0; $i < count($numbers) - 1; $i++) {\n        $a =\
    \ $numbers[$i];\n        $b = $numbers[$i + 1];\n        $diff = abs($a - $b);\n\
    \        if (is_null($min_diff) || $diff < $min_diff) {\n            $min_diff\
    \ = $diff;\n            $closest_pair = array($a, $b);\n        }\n    }\n   \
    \ if ($closest_pair[0] > $closest_pair[1]) {\n        return array($closest_pair[1],\
    \ $closest_pair[0]);\n    }\n    return $closest_pair;\n}", "    $a = $numbers[0];\n\
    \    $b = $numbers[1];\n    $d = abs($a - $b);\n    $i = 1;\n    while ($i < sizeof($numbers)\
    \ - 1) {\n        $c = $numbers[$i];\n        $d2 = abs($c - $numbers[$i + 1]);\n\
    \        if ($d2 < $d) {\n            $a = $c;\n            $b = $numbers[$i +\
    \ 1];\n            $d = $d2;\n        }\n        $i++;\n    }\n    if ($a < $b)\
    \ {\n        return array($a, $b);\n    } else {\n        return array($b, $a);\n\
    \    }\n}", "    // First we need to find the minimum difference between all the\
    \ numbers\n    $minimum_difference = $numbers[1] - $numbers[0];\n    $numbers_of_minimum_difference\
    \ = array($numbers[0], $numbers[1]);\n    for ($i = 0; $i < count($numbers) -\
    \ 1; $i++) {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n      \
    \      $difference = abs($numbers[$i] - $numbers[$j]);\n            if ($difference\
    \ < $minimum_difference) {\n                $minimum_difference = $difference;\n\
    \                $numbers_of_minimum_difference = array($numbers[$i], $numbers[$j]);\n\
    \            }\n        }\n    }\n    sort($numbers_of_minimum_difference);\n\
    \    return $numbers_of_minimum_difference;\n}\n", "\t$differences = array();\n\
    \tfor ($i = 0; $i < count($numbers) - 1; $i++) {\n\t\t$number1 = $numbers[$i];\n\
    \t\t$number2 = $numbers[$i + 1];\n\t\t$differences[] = abs($number1 - $number2);\n\
    \t}\n\t$minimum = min($differences);\n\t$index = array_search($minimum, $differences);\n\
    \t$number1 = $numbers[$index];\n\t$number2 = $numbers[$index + 1];\n\tif ($number1\
    \ < $number2) {\n\t\treturn array($number1, $number2);\n\t} else {\n\t\treturn\
    \ array($number2, $number1);\n\t}\n}\n", "    $min = abs($numbers[0] - $numbers[1]);\n\
    \    $i = 0;\n    $j = 1;\n    for ($k = 0; $k < count($numbers) - 1; $k++) {\n\
    \        if (abs($numbers[$k] - $numbers[$k + 1]) < $min) {\n            $min\
    \ = abs($numbers[$k] - $numbers[$k + 1]);\n            $i = $k;\n            $j\
    \ = $k + 1;\n        }\n    }\n    return array($numbers[$i], $numbers[$j]);\n\
    }\n", "\t$numbers = array_unique($numbers);\n\tsort($numbers);\n\t$sum = 0;\n\t\
    $closest_elements = array();\n\tfor ($i = 0; $i < count($numbers); $i++) {\n\t\
    \tif ($i == 0) {\n\t\t\t$sum = $numbers[$i + 1] - $numbers[$i];\n\t\t\t$closest_elements\
    \ = array($numbers[$i], $numbers[$i + 1]);\n\t\t} else {\n\t\t\tif ($numbers[$i\
    \ + 1] - $numbers[$i] < $sum) {\n\t\t\t\t$sum = $numbers[$i + 1] - $numbers[$i];\n\
    \t\t\t\t$closest_elements = array($numbers[$i], $numbers[$i + 1]);\n\t\t\t}\n\t\
    \t}\n\t}\n\treturn $closest_elements;\n}", "\tsort($numbers);\n\t$closest_two\
    \ = array();\n\t$smallest_gap = null;\n\tfor ($i = 0; $i < count($numbers) - 1;\
    \ $i++) {\n\t\t$gap = $numbers[$i + 1] - $numbers[$i];\n\t\tif ($smallest_gap\
    \ === null || $gap < $smallest_gap) {\n\t\t\t$smallest_gap = $gap;\n\t\t\t$closest_two\
    \ = array($numbers[$i], $numbers[$i + 1]);\n\t\t}\n\t}\n\treturn $closest_two;\n\
    }\n", "    $closest = array(\n        $numbers[0],\n        $numbers[1]\n    );\n\
    \    $closestDistance = abs($numbers[0] - $numbers[1]);\n    for ($i = 0; $i <\
    \ count($numbers); $i++) {\n        for ($j = $i + 1; $j < count($numbers); $j++)\
    \ {\n            $distance = abs($numbers[$i] - $numbers[$j]);\n            if\
    \ ($distance < $closestDistance) {\n                $closest = array(\n      \
    \              $numbers[$i],\n                    $numbers[$j]\n             \
    \   );\n                $closestDistance = $distance;\n            }\n       \
    \ }\n    }\n    sort($closest);\n    return $closest;\n}\n", "\t// Solution 1\n\
    \t$numbers = array_values($numbers);\n\t$index = 0;\n\t$result = array();\n\t\
    foreach ($numbers as $key => $number) {\n\t\t$current = $numbers[$index];\n\t\t\
    $next = $numbers[$index + 1];\n\t\tif ($current != $next) {\n\t\t\t$diff = $next\
    \ - $current;\n\t\t\tif (!isset($result['diff']) || $diff < $result['diff']) {\n\
    \t\t\t\t$result['diff'] = $diff;\n\t\t\t\t$result['indexes'] = array($index, $index\
    \ + 1);\n\t\t\t}\n\t\t}\n\t\t$index++;\n\t}\n\treturn array_slice($numbers, $result['indexes'][0],\
    \ 2);\n\n\t// Solution 2\n\t// $numbers = array_values($numbers);\n\t// $index\
    \ = 0;\n\t// $result = array();\n\t// foreach ($numbers as $key => $number) {\n\
    \t// \t$current = $numbers[$index];\n\t// \t$next = $numbers[$index + 1];\n\t\
    // \tif ($current != $next) {\n\t// \t\t$diff = $next - $current;\n\t// \t\tif\
    \ (!isset($result['diff']) || $diff < $result['diff']) {\n\t// \t\t\t$result['diff']\
    \ = $diff;\n\t// \t\t\t$result['indexes'] = array($index, $index + 1);\n\t// \t\
    \t}\n\t// \t}\n\t// \t$index++;\n\t// }\n\t// return array($numbers[$result['indexes'][0]],\
    \ $numbers[$result['indexes'][1]]);\n}\nprint_r(find_closest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2)));\nprint_r(find_closest_elements(array(1.0, 2.0, 3.0,\
    \ 4.0, 5.0,", "    $result = array();\n    $minimum = 0;\n    $index = 0;\n  \
    \  for ($i = 0; $i < count($numbers); $i++) {\n        for ($j = $i + 1; $j <\
    \ count($numbers); $j++) {\n            $absolute = abs($numbers[$i] - $numbers[$j]);\n\
    \            if ($i == 0 && $j == 1) {\n                $minimum = $absolute;\n\
    \                $index = $i;\n            } else if ($absolute < $minimum) {\n\
    \                $minimum = $absolute;\n                $index = $i;\n       \
    \     }\n        }\n    }\n    $result[0] = $numbers[$index];\n    $result[1]\
    \ = $numbers[$index + 1];\n    return $result;\n}\n", "    $smallest = 0;\n  \
    \  $highest = 1;\n    $smallestDiff = abs($numbers[0] - $numbers[1]);\n    $highestDiff\
    \ = abs($numbers[0] - $numbers[1]);\n    for ($i = 0; $i < count($numbers); $i++)\
    \ {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n            $diff\
    \ = abs($numbers[$i] - $numbers[$j]);\n            if ($diff < $smallestDiff)\
    \ {\n                $smallest = $i;\n                $smallestDiff = $diff;\n\
    \            }\n            if ($diff > $highestDiff) {\n                $highest\
    \ = $i;\n                $highestDiff = $diff;\n            }\n        }\n   \
    \ }\n    return [$numbers[$smallest], $numbers[$highest]];\n}\n", "    $differences\
    \ = [];\n    foreach ($numbers as $index => $number) {\n        $j = $index +\
    \ 1;\n        while ($j < count($numbers)) {\n            $differences[] = [\n\
    \                'number' => $number,\n                'difference' => abs($number\
    \ - $numbers[$j]),\n                'other' => $numbers[$j]\n            ];\n\
    \            $j++;\n        }\n    }\n    usort($differences, function ($a, $b)\
    \ {\n        return $a['difference'] - $b['difference'];\n    });\n    return\
    \ [$differences[0]['number'], $differences[0]['other']];\n}\nprint_r(find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]));", "    $closest_pair = array(0, 0);\n    $smallest_difference\
    \ = 0;\n    for ($i = 0; $i < count($numbers); $i++) {\n        for ($j = $i +\
    \ 1; $j < count($numbers); $j++) {\n            $difference = abs($numbers[$i]\
    \ - $numbers[$j]);\n            if ($smallest_difference == 0 || $difference <\
    \ $smallest_difference) {\n                $smallest_difference = $difference;\n\
    \                $closest_pair = array($numbers[$i], $numbers[$j]);\n        \
    \    }\n        }\n    }\n    if ($closest_pair[0] > $closest_pair[1]) {\n   \
    \     $closest_pair = array($closest_pair[1], $closest_pair[0]);\n    }\n    return\
    \ $closest_pair;\n}\n", "    $prev = $numbers[0];\n    $closest_diff = INF;\n\
    \    $closest_pair = [];\n    foreach($numbers as $number) {\n        $diff =\
    \ abs($number - $prev);\n        if ($diff < $closest_diff) {\n            $closest_diff\
    \ = $diff;\n            $closest_pair = [$prev, $number];\n        }\n       \
    \ $prev = $number;\n    }\n    return $closest_pair;\n}\n", "  $closest = array();\n\
    \  $min = INF;\n\n  for ($i = 0; $i < count($numbers); $i++) {\n    for ($j =\
    \ $i + 1; $j < count($numbers); $j++) {\n      $diff = abs($numbers[$i] - $numbers[$j]);\n\
    \      if ($diff < $min) {\n        $min = $diff;\n        $closest = array($numbers[$i],\
    \ $numbers[$j]);\n      }\n    }\n  }\n\n  return $closest;\n}\n", "    $min_diff\
    \ = 1.0;\n    $closest_elements = array();\n    for ($i = 0; $i < count($numbers);\
    \ $i++) {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n         \
    \   $diff = abs($numbers[$i] - $numbers[$j]);\n            if ($diff < $min_diff)\
    \ {\n                $min_diff = $diff;\n                $closest_elements = array($numbers[$i],\
    \ $numbers[$j]);\n            }\n        }\n    }\n    return $closest_elements;\n\
    }\n", "  $min = abs($numbers[0] - $numbers[1]);\n  $result = array($numbers[0],\
    \ $numbers[1]);\n  for ($i = 0; $i < count($numbers); $i++) {\n    for ($j = $i\
    \ + 1; $j < count($numbers); $j++) {\n      $num = abs($numbers[$i] - $numbers[$j]);\n\
    \      if ($num < $min) {\n        $min = $num;\n        $result = array($numbers[$i],\
    \ $numbers[$j]);\n      }\n    }\n  }\n  sort($result);\n  return $result;\n}\n\
    \n$numbers = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2);\n$numbers2 = array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0);\n\nprint_r(find_closest_elements($numbers));\nprint_r(find_closest_elements($numbers2));",
  "    $closest_elements = array(reset($numbers), end($numbers));\n    $closest_difference\
    \ = abs($closest_elements[0] - $closest_elements[1]);\n    $last_number = reset($numbers);\n\
    \    foreach($numbers as $number) {\n        $difference = abs($number - $last_number);\n\
    \        if ($difference < $closest_difference) {\n            $closest_elements\
    \ = array($last_number, $number);\n            $closest_difference = $difference;\n\
    \        }\n        $last_number = $number;\n    }\n    sort($closest_elements);\n\
    \    return $closest_elements;\n}\n", "  $start = 0;\n  $end = 1;\n  $len = count($numbers);\n\
    \  $diff = abs($numbers[$start] - $numbers[$end]);\n  for ($i = 0; $i < $len -\
    \ 1; $i++) {\n    for ($j = $i + 1; $j < $len; $j++) {\n      $currentDiff = abs($numbers[$i]\
    \ - $numbers[$j]);\n      if ($currentDiff < $diff) {\n        $diff = $currentDiff;\n\
    \        $start = $i;\n        $end = $j;\n      }\n    }\n  }\n  return array($numbers[$start],\
    \ $numbers[$end]);\n}", "    $closest_elements = [$numbers[0], $numbers[1]];\n\
    \    $smallest_difference = $numbers[1] - $numbers[0];\n    for ($i = 0; $i <\
    \ count($numbers) - 1; $i++) {\n        for ($j = $i + 1; $j < count($numbers);\
    \ $j++) {\n            $difference = abs($numbers[$i] - $numbers[$j]);\n     \
    \       if ($difference < $smallest_difference) {\n                $smallest_difference\
    \ = $difference;\n                $closest_elements = [$numbers[$i], $numbers[$j]];\n\
    \            }\n        }\n    }\n    sort($closest_elements);\n    return $closest_elements;\n\
    }\necho \"<pre>\";\nprint_r(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]));\n\
    echo \"</pre>\";\necho \"<pre>\";\nprint_r(find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]));\necho \"</pre>\";", "    $number = 0;\n    $min_distance =\
    \ $numbers[1] - $numbers[0];\n    for ($i = 0; $i < count($numbers); $i++) {\n\
    \        for ($j = $i + 1; $j < count($numbers); $j++) {\n            $distance\
    \ = abs($numbers[$i] - $numbers[$j]);\n            if ($distance < $min_distance)\
    \ {\n                $min_distance = $distance;\n                $number = $numbers[$i];\n\
    \            }\n        }\n    }\n    return array($number, $number + $min_distance);\n\
    }", "  $closest = array($numbers[0], $numbers[1]);\n  for ($i = 0; $i < count($numbers);\
    \ $i++) {\n    for ($j = $i + 1; $j < count($numbers); $j++) {\n      if (abs($numbers[$i]\
    \ - $numbers[$j]) < abs($closest[0] - $closest[1])) {\n        $closest = array($numbers[$i],\
    \ $numbers[$j]);\n      }\n    }\n  }\n  return $closest;\n}\n", "    $closest\
    \ = null;\n    $shortest_distance = null;\n    $result = array();\n    for ($i\
    \ = 0; $i < count($numbers); $i++) {\n        for ($j = $i + 1; $j < count($numbers);\
    \ $j++) {\n            $distance = abs($numbers[$i] - $numbers[$j]);\n       \
    \     if ($shortest_distance === null || $distance < $shortest_distance) {\n \
    \               $shortest_distance = $distance;\n                $closest = array($numbers[$i],\
    \ $numbers[$j]);\n            }\n        }\n    }\n    sort($closest);\n    return\
    \ $closest;\n}\n", "    $min = INF;\n    $index1 = 0;\n    $index2 = 0;\n    $n\
    \ = count($numbers);\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = $i\
    \ + 1; $j < $n; $j++) {\n            $diff = abs($numbers[$i] - $numbers[$j]);\n\
    \            if ($diff < $min) {\n                $min = $diff;\n            \
    \    $index1 = $i;\n                $index2 = $j;\n            }\n        }\n\
    \    }\n    return array($numbers[$index1], $numbers[$index2]);\n}\n", "    $min_distance\
    \ = abs($numbers[0] - $numbers[1]);\n    $result = array($numbers[0], $numbers[1]);\n\
    \    $length = count($numbers);\n    for ($i = 0; $i < $length; $i++) {\n    \
    \    for ($j = $i + 1; $j < $length; $j++) {\n            $distance = abs($numbers[$i]\
    \ - $numbers[$j]);\n            if ($distance < $min_distance) {\n           \
    \     $min_distance = $distance;\n                $result = array($numbers[$i],\
    \ $numbers[$j]);\n            }\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n\nprint_r(find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2)));\necho \"<br>\";\nprint_r(find_closest_elements(array(1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0)));\necho \"<br>\";\nprint_r(find_closest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0)));\necho \"<br>\";\nprint_r(find_closest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 1.0)));\necho \"<br>\";\nprint_r(find_closest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 0.0)));\necho \"<br>\";\nprint_r(find_closest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0, 2.0)));\necho \"<br>\";\nprint_r(find_closest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0, 2.0, 2.0)));\necho", "  // TODO: Implement this function\n\
    }\n", "    $min_diff = false;\n    for ($i = 0; $i < count($numbers); $i++) {\n\
    \        for ($j = $i + 1; $j < count($numbers); $j++) {\n            $diff =\
    \ abs($numbers[$i] - $numbers[$j]);\n            if ($min_diff === false || $diff\
    \ < $min_diff) {\n                $result = array($numbers[$i], $numbers[$j]);\n\
    \                $min_diff = $diff;\n            }\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n", "  $result = array();\n  $minDiff = abs($numbers[0]\
    \ - $numbers[1]);\n  for ($i = 0; $i < count($numbers) - 1; $i++) {\n    $diff\
    \ = abs($numbers[$i] - $numbers[$i + 1]);\n    if ($diff < $minDiff) {\n     \
    \ $minDiff = $diff;\n      $result = array($numbers[$i], $numbers[$i + 1]);\n\
    \    }\n  }\n  return $result;\n}\n", "    // Your code here.\n}", "    // your\
    \ code here\n    $diffs = [];\n    foreach($numbers as $key => $number){\n   \
    \     foreach($numbers as $key_next => $number_next){\n            if($key ==\
    \ $key_next){\n                continue;\n            }\n            $diffs[$key][$key_next]\
    \ = abs($number - $number_next);\n        }\n    }\n    $diff_min = array_keys($diffs,\
    \ min($diffs));\n    if(is_array($diff_min)){\n        $diff_min = $diff_min[0];\n\
    \    }\n    return [$numbers[$diff_min], $numbers[array_keys($diffs[$diff_min],\
    \ min($diffs[$diff_min]))[0]]];\n}\n\n$a = [1.0, 2.0, 3.0, 4.0, 5.0, 2.2];\n\n\
    var_dump(find_closest_elements($a));", "    $length = count($numbers);\n    $min_diff\
    \ = $numbers[1] - $numbers[0];\n    $min_diff_numbers = array($numbers[0], $numbers[1]);\n\
    \    $j = 1;\n    while ($j < $length - 1) {\n        $min_diff_temp = $numbers[$j\
    \ + 1] - $numbers[$j];\n        if ($min_diff_temp < $min_diff) {\n          \
    \  $min_diff = $min_diff_temp;\n            $min_diff_numbers = array($numbers[$j],\
    \ $numbers[$j + 1]);\n        }\n        $j++;\n    }\n    return $min_diff_numbers;\n\
    }\n\nvar_dump(find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)));\nvar_dump(find_closest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0)));", "\t$closest_elements = array();\n\t$smallest_distance\
    \ = 0;\n\t$numbers_count = count($numbers);\n\tfor ($i = 0; $i < $numbers_count;\
    \ $i++) {\n\t\t$a = $numbers[$i];\n\t\tfor ($j = $i + 1; $j < $numbers_count;\
    \ $j++) {\n\t\t\t$b = $numbers[$j];\n\t\t\t$distance = abs($a - $b);\n\t\t\tif\
    \ ($distance < $smallest_distance || $i == 0) {\n\t\t\t\t$smallest_distance =\
    \ $distance;\n\t\t\t\t$closest_elements = array($a, $b);\n\t\t\t}\n\t\t}\n\t}\n\
    \treturn $closest_elements;\n}\n", "    if (count($numbers) < 2) {\n        return\
    \ array();\n    }\n    $min_distance = null;\n    $closest_elements = array();\n\
    \    for ($i = 0; $i < count($numbers) - 1; $i++) {\n        for ($j = $i + 1;\
    \ $j < count($numbers); $j++) {\n            $distance = abs($numbers[$i] - $numbers[$j]);\n\
    \            if ($min_distance === null || $distance < $min_distance) {\n    \
    \            $min_distance = $distance;\n                $closest_elements = array($numbers[$i],\
    \ $numbers[$j]);\n            }\n        }\n    }\n    sort($closest_elements);\n\
    \    return $closest_elements;\n}\n", "    $sorted = $numbers;\n    sort($sorted);\n\
    \    $length = count($sorted);\n    $smallest = $sorted[1] - $sorted[0];\n   \
    \ $smallest_number = $sorted[0];\n    $second_smallest_number = $sorted[1];\n\
    \    for ($i = 1; $i < $length - 1; $i++) {\n        $difference = $sorted[$i\
    \ + 1] - $sorted[$i];\n        if ($difference < $smallest) {\n            $smallest\
    \ = $difference;\n            $smallest_number = $sorted[$i];\n            $second_smallest_number\
    \ = $sorted[$i + 1];\n        }\n    }\n    return array($smallest_number, $second_smallest_number);\n\
    }\n", "  $diffs = array();\n  for ($i = 0; $i < count($numbers) - 1; $i++) {\n\
    \    $a = $numbers[$i];\n    $b = $numbers[$i + 1];\n    $diff = abs($a - $b);\n\
    \    $diffs[] = $diff;\n  }\n  $min = min($diffs);\n  $index = array_search($min,\
    \ $diffs);\n  $a = $numbers[$index];\n  $b = $numbers[$index + 1];\n  if ($a >\
    \ $b) {\n    return array($b, $a);\n  } else {\n    return array($a, $b);\n  }\n\
    }\necho_array(find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)));\necho_array(find_closest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0)));\n", "\n}\n", "    $current_min = $numbers[1] - $numbers[0];\n\
    \    $result = array();\n    for ($i = 0; $i < count($numbers) - 1; $i++) {\n\
    \        for ($j = $i + 1; $j < count($numbers); $j++) {\n            $diff =\
    \ abs($numbers[$i] - $numbers[$j]);\n            if ($diff < $current_min) {\n\
    \                $current_min = $diff;\n                $result = array($numbers[$i],\
    \ $numbers[$j]);\n            }\n        }\n    }\n    return $result;\n}\n",
  "    // $closest = [$numbers[0], $numbers[1]];\n    // $smallest_distance = abs($numbers[0]\
    \ - $numbers[1]);\n    //\n    // for ($i = 0; $i < count($numbers); $i++) {\n\
    \    //     for ($j = $i + 1; $j < count($numbers); $j++) {\n    //         $distance\
    \ = abs($numbers[$i] - $numbers[$j]);\n    //         if ($distance < $smallest_distance)\
    \ {\n    //             $smallest_distance = $distance;\n    //             $closest\
    \ = [$numbers[$i], $numbers[$j]];\n    //         }\n    //     }\n    // }\n\
    \    //\n    // sort($closest);\n    // return $closest;\n\n    // If we are asked\
    \ to find the closest distance but not the closest pair, we can speed it up by\
    \ removing the\n    // second loop. Instead we record every distance we check,\
    \ and then sort the array of distances. Since the\n    // smallest distance must\
    \ be one of the smallest two distances, it is easy to find.\n    $distances =\
    \ [];\n    for ($i = 0; $i < count($numbers); $i++) {\n        for ($j = $i +\
    \ 1; $j < count($numbers); $j++) {\n            $distances[] = abs($numbers[$i]\
    \ - $numbers[$j]);\n        }\n    }\n    sort($distances);\n    $smallest_distance\
    \ = $distances[0];\n\n    for ($i = 0; $i < count($numbers); $i++) {\n       \
    \ for ($j = $i + 1; $j < count($numbers); $j++) {\n            $distance = abs($numbers[$i]\
    \ - $numbers[$j]);\n            if ($distance == $smallest_distance) {\n     \
    \           $closest = [$numbers[$i], $numbers[$j]];\n                sort($closest);\n\
    \                return $closest;\n            }\n        }\n    }\n}\n\nvar_dump(find_clos",
  "\t$smallestDiff = null;\n\t$closestElements = array();\n\tfor ($i = 0; $i < count($numbers)\
    \ - 1; $i++) {\n\t\tfor ($j = $i + 1; $j < count($numbers); $j++) {\n\t\t\t$diff\
    \ = abs($numbers[$i] - $numbers[$j]);\n\t\t\tif ($smallestDiff === null || $diff\
    \ < $smallestDiff) {\n\t\t\t\t$smallestDiff = $diff;\n\t\t\t\t$closestElements\
    \ = array($numbers[$i], $numbers[$j]);\n\t\t\t}\n\t\t}\n\t}\n\tsort($closestElements);\n\
    \treturn $closestElements;\n}\nprint_r(find_closest_elements(array(1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2)));\nprint_r(find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0)));", "    $min_diff = 2;\n    $index_first = 0;\n    $index_second = 1;\n\
    \    for ($i = 0; $i < count($numbers) - 1; $i++) {\n        $diff = abs($numbers[$i]\
    \ - $numbers[$i + 1]);\n        if ($diff < $min_diff) {\n            $min_diff\
    \ = $diff;\n            $index_first = $i;\n            $index_second = $i + 1;\n\
    \        }\n    }\n    $result = array($numbers[$index_first], $numbers[$index_second]);\n\
    \    sort($result);\n    return $result;\n}\n", "    // Sort the array numerically\
    \ in ascending order.\n    sort($numbers, SORT_NUMERIC);\n    // Initialize the\
    \ variable $closest_elements with an array containing the first two elements.\n\
    \    $closest_elements = array($numbers[0], $numbers[1]);\n    // Initialize the\
    \ variable $closest_difference with the difference between the first two elements.\n\
    \    $closest_difference = abs($numbers[0] - $numbers[1]);\n    // Loop through\
    \ all the remaining elements in the array, from the third element (index 2) on.\n\
    \    for ($i = 2; $i < count($numbers); $i++) {\n        // Determine the difference\
    \ between the current element and the previous element.\n        $difference =\
    \ abs($numbers[$i] - $numbers[$i - 1]);\n        // If the difference is smaller\
    \ than the current closest difference.\n        if ($difference < $closest_difference)\
    \ {\n            // Set the current closest difference to the smaller difference.\n\
    \            $closest_difference = $difference;\n            // Set the current\
    \ closest elements to the previous and current element.\n            $closest_elements\
    \ = array($numbers[$i - 1], $numbers[$i]);\n        }\n    }\n    // Return the\
    \ closest elements.\n    return $closest_elements;\n}\n", "  // Your code here\n\
    }", "    $diff = array();\n    foreach($numbers as $i => $number1) {\n       \
    \ foreach($numbers as $j => $number2) {\n            if ($i < $j) {\n        \
    \        $diff[abs($number1 - $number2)] = [$number1, $number2];\n           \
    \ }\n        }\n    }\n    ksort($diff);\n    return array_values(array_shift($diff));\n\
    }\n\necho \"\\nfind_closest_elements: \";\nvar_dump(find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]));\nvar_dump(find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]));", "    sort($numbers);\n    $min = $numbers[1] - $numbers[0];\n\
    \    $index = 1;\n    for ($i = 2; $i < count($numbers); $i++) {\n        $curr_diff\
    \ = $numbers[$i] - $numbers[$i - 1];\n        if ($curr_diff < $min) {\n     \
    \       $min = $curr_diff;\n            $index = $i;\n        }\n    }\n    return\
    \ array($numbers[$index - 1], $numbers[$index]);\n}\n", "    $size = count($numbers);\n\
    \    if ($size < 2) {\n        return;\n    }\n\n    $closest_elements = array();\n\
    \    $closest_elements[] = $numbers[0];\n    $closest_elements[] = $numbers[1];\n\
    \    $closest_distance = abs($numbers[0] - $numbers[1]);\n\n    for ($i = 0; $i\
    \ < $size; $i++) {\n        for ($j = $i + 1; $j < $size; $j++) {\n          \
    \  $distance = abs($numbers[$i] - $numbers[$j]);\n            if ($distance <\
    \ $closest_distance) {\n                $closest_elements[0] = $numbers[$i];\n\
    \                $closest_elements[1] = $numbers[$j];\n                $closest_distance\
    \ = $distance;\n            }\n        }\n    }\n\n    sort($closest_elements);\n\
    \    return $closest_elements;\n}\n\n$test_array = array(1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2);\n$test_array_2 = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0);\necho json_encode(find_closest_elements($test_array))\
    \ . \"\\n\";\necho json_encode(find_closest_elements($test_array_2)) . \"\\n\"\
    ;", "  $n = count($numbers);\n  $closest = array(0, 1);\n  $closest_distance =\
    \ abs($numbers[1] - $numbers[0]);\n  for ($i = 1; $i < $n; $i++) {\n    for ($j\
    \ = $i + 1; $j < $n; $j++) {\n      $distance = abs($numbers[$i] - $numbers[$j]);\n\
    \      if ($distance < $closest_distance) {\n        $closest_distance = $distance;\n\
    \        $closest = array($i, $j);\n      }\n    }\n  }\n  return array($numbers[$closest[0]],\
    \ $numbers[$closest[1]]);\n}\n", "  $min = $numbers[0] - $numbers[1];\n  $max\
    \ = $numbers[0] - $numbers[1];\n  $result = array();\n  foreach ($numbers as $number)\
    \ {\n    if ($number < $min) {\n      $min = $number;\n    }\n    if ($number\
    \ > $max) {\n      $max = $number;\n    }\n  }\n  foreach ($numbers as $number)\
    \ {\n    if ($number === $min || $number === $max) {\n      array_push($result,\
    \ $number);\n    }\n  }\n  return $result;\n}\n", "    $last = count($numbers)\
    \ - 1;\n    $min = abs($numbers[0] - $numbers[1]);\n    $min_elements = array($numbers[0],\
    \ $numbers[1]);\n    for ($i = 0; $i < $last; $i++) {\n        for ($j = $i +\
    \ 1; $j <= $last; $j++) {\n            $diff = abs($numbers[$i] - $numbers[$j]);\n\
    \            if ($diff < $min) {\n                $min = $diff;\n            \
    \    $min_elements = array($numbers[$i], $numbers[$j]);\n            }\n     \
    \   }\n    }\n    sort($min_elements);\n    return $min_elements;\n}\n$test =\
    \ array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2);\nvar_dump(find_closest_elements($test));",
  "    $array_count = count($numbers);\n    if ($array_count < 2) {\n        return\
    \ null;\n    }\n    $result = [$numbers[0], $numbers[1]];\n    $closest_diff =\
    \ abs($numbers[0] - $numbers[1]);\n    for ($i = 0; $i < $array_count; $i++) {\n\
    \        for ($j = $i + 1; $j < $array_count; $j++) {\n            $diff = abs($numbers[$i]\
    \ - $numbers[$j]);\n            if ($diff < $closest_diff) {\n               \
    \ $closest_diff = $diff;\n                $result = [$numbers[$i], $numbers[$j]];\n\
    \            }\n        }\n    }\n    sort($result);\n    return $result;\n}\n",
  "    sort($numbers);\n    $min = abs($numbers[0] - $numbers[1]);\n    $result =\
    \ array($numbers[0], $numbers[1]);\n    for ($i = 1; $i < count($numbers) - 1;\
    \ $i++) {\n        $diff = abs($numbers[$i] - $numbers[$i + 1]);\n        if ($diff\
    \ < $min) {\n            $min = $diff;\n            $result = array($numbers[$i],\
    \ $numbers[$i + 1]);\n        }\n    }\n    return $result;\n}\n", "    // YOUR\
    \ CODE GOES HERE\n    $closest_numbers = array();\n    $closest_gap = 0;\n   \
    \ for ($i = 0; $i < count($numbers); $i++) {\n        for ($j = $i + 1; $j < count($numbers);\
    \ $j++) {\n            $gap = abs($numbers[$i] - $numbers[$j]);\n            if\
    \ ($closest_gap == 0 || $gap < $closest_gap) {\n                $closest_gap =\
    \ $gap;\n                $closest_numbers = array($numbers[$i], $numbers[$j]);\n\
    \            }\n        }\n    }\n    return $closest_numbers;\n}\n", "  $closest\
    \ = max($numbers) - min($numbers);\n  $closestPair = array(null, null);\n  foreach\
    \ ($numbers as $i => $number) {\n    foreach ($numbers as $j => $number2) {\n\
    \      if ($j > $i) {\n        $pair = array($number, $number2);\n        sort($pair);\n\
    \        $diff = abs($number - $number2);\n        if ($diff < $closest) {\n \
    \         $closest = $diff;\n          $closestPair = $pair;\n        }\n    \
    \  }\n    }\n  }\n  return $closestPair;\n}\necho \"<pre>\";\nprint_r(find_closest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2)));\necho \"</pre>\";\necho \"<br>\";\necho \"<pre>\"\
    ;\nprint_r(find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)));\necho\
    \ \"</pre>\";\n", "    $closest_numbers = array();\n    $closest_difference =\
    \ INFINITY;\n    $array_length = count($numbers);\n    for ($index = 0; $index\
    \ < $array_length; $index++) {\n        $left_number = $numbers[$index];\n   \
    \     for ($offset = 1; $offset < $array_length; $offset++) {\n            $right_number\
    \ = $numbers[($index + $offset) % $array_length];\n            $difference = abs($left_number\
    \ - $right_number);\n            if ($difference < $closest_difference) {\n  \
    \              $closest_difference = $difference;\n                $closest_numbers\
    \ = array($left_number, $right_number);\n            }\n        }\n    }\n   \
    \ return $closest_numbers;\n}\necho find_closest_elements(array(1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2));\necho '<br>';\necho find_closest_elements(array(1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0));", "  $num_len = count($numbers);\n  $min_diff = INF;\n  $closest_elements\
    \ = array();\n  for ($i = 0; $i < $num_len; $i++) {\n    for ($j = 0; $j < $num_len;\
    \ $j++) {\n      if ($i != $j) {\n        $diff = abs($numbers[$i] - $numbers[$j]);\n\
    \        if ($diff < $min_diff) {\n          $min_diff = $diff;\n          $closest_elements\
    \ = array($numbers[$i], $numbers[$j]);\n        }\n      }\n    }\n  }\n  sort($closest_elements);\n\
    \  return $closest_elements;\n}\n", "    $closest = array();\n    for ($i = 0;\
    \ $i < count($numbers); $i++) {\n        for ($j = $i+1; $j < count($numbers);\
    \ $j++) {\n            $diff = abs($numbers[$i] - $numbers[$j]);\n           \
    \ if (!isset($closest['diff']) || $diff < $closest['diff']) {\n              \
    \  $closest['diff'] = $diff;\n                $closest['i'] = $i;\n          \
    \      $closest['j'] = $j;\n            }\n        }\n    }\n    return array($numbers[$closest['i']],\
    \ $numbers[$closest['j']]);\n}\n\n$numbers = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2);\n\
    $numbers2 = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0);\n\nvar_dump(find_closest_elements($numbers));\n\
    var_dump(find_closest_elements($numbers2));", "  $smallest = $numbers[0];\n  $smallest_diff\
    \ = abs($numbers[0] - $numbers[1]);\n  $largest = $numbers[1];\n  $largest_diff\
    \ = abs($numbers[0] - $numbers[1]);\n  for ($i = 0; $i < count($numbers); $i++)\
    \ {\n    for ($j = 0; $j < count($numbers); $j++) {\n      if ($j === $i) {\n\
    \        continue;\n      }\n      $diff = abs($numbers[$i] - $numbers[$j]);\n\
    \      if ($diff < $smallest_diff) {\n        $smallest = $numbers[$i];\n    \
    \    $smallest_diff = $diff;\n        $largest = $numbers[$j];\n        $largest_diff\
    \ = $diff;\n      }\n    }\n  }\n  if ($smallest > $largest) {\n    $temp = $smallest;\n\
    \    $smallest = $largest;\n    $largest = $temp;\n  }\n  return array($smallest,\
    \ $largest);\n}\n", "  $length = count($numbers);\n  if ($length == 0) {\n   \
    \ return false;\n  } else if ($length == 1) {\n    return array($numbers[0], $numbers[0]);\n\
    \  }\n  $differences = array();\n  for ($i = 0; $i < $length; $i++) {\n    $current\
    \ = $numbers[$i];\n    $next = $numbers[$i + 1];\n    $differences[] = abs($current\
    \ - $next);\n  }\n  $min_difference = min($differences);\n  for ($i = 0; $i <\
    \ $length; $i++) {\n    $current = $numbers[$i];\n    $next = $numbers[$i + 1];\n\
    \    if (abs($current - $next) == $min_difference) {\n      return array($current,\
    \ $next);\n    }\n  }\n}\necho \"find_closest_elements(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2)) = \";\nprint_r(find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2)));\necho \"<br>\";\necho \"find_closest_elements(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0)) = \";\nprint_r(find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0)));\necho \"<br>\";\n", "\t// your code here\n}", "\t$a;\n\t$b;\n\t$dif\
    \ = 10000;\n\tfor ($i = 0; $i < sizeof($numbers); $i++) {\n\t\tfor ($j = 0; $j\
    \ < sizeof($numbers); $j++) {\n\t\t\tif ($numbers[$i] == $numbers[$j]) {\n\t\t\
    \t\tcontinue;\n\t\t\t}\n\t\t\tif (abs($numbers[$i] - $numbers[$j]) < $dif) {\n\
    \t\t\t\t$dif = abs($numbers[$i] - $numbers[$j]);\n\t\t\t\t$a = $numbers[$i];\n\
    \t\t\t\t$b = $numbers[$j];\n\t\t\t}\n\t\t}\n\t}\n\tif ($a > $b) {\n\t\t$temp =\
    \ $a;\n\t\t$a = $b;\n\t\t$b = $temp;\n\t}\n\treturn array($a, $b);\n}\n\nprint_r(find_closest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2)));\necho \"\\n\";\nprint_r(find_closest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0)));\necho \"\\n\";\nprint_r(find_closest_elements(array(0.5,\
    \ 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5)));\necho \"\\n\";\nprint_r(find_closest_elements(array(0.5,\
    \ 1.5, 2.5, 3.5, 4.5, 5.5, 0.4, 0.6, 0.7, 0.8)));\necho \"\\n\";", "\t$count =\
    \ count($numbers);\n\t$differences = array();\n\t$result = array();\n\tif ($count\
    \ > 1) {\n\t\tfor ($i = 0; $i < $count; $i++) {\n\t\t\t$differences[$i] = abs($numbers[$i]\
    \ - $numbers[$i + 1]);\n\t\t}\n\t\t$min = min($differences);\n\t\t$pos = array_search($min,\
    \ $differences);\n\t\t$result[0] = $numbers[$pos];\n\t\t$result[1] = $numbers[$pos\
    \ + 1];\n\t}\n\treturn $result;\n}\n", "\t$i = 0;\n\t$key = 0;\n\t$closestElements\
    \ = array(0, 0);\n\t$temp = 0;\n\t$smallest = 10000;\n\t\n\twhile ($i < count($numbers)\
    \ - 1) {\n\t\tif ($numbers[$i + 1] - $numbers[$i] < $smallest) {\n\t\t\t$smallest\
    \ = $numbers[$i + 1] - $numbers[$i];\n\t\t\t$key = $i;\n\t\t}\n\t\t\n\t\t$i +=\
    \ 1;\n\t}\n\t\n\t$closestElements[0] = $numbers[$key];\n\t$closestElements[1]\
    \ = $numbers[$key + 1];\n\t\n\treturn $closestElements;\n}\n", "    $len = count($numbers);\n\
    \    if ($len <= 1) {\n        return array();\n    }\n    $min_diff = $numbers[1]\
    \ - $numbers[0];\n    $first = $numbers[0];\n    $second = $numbers[1];\n    for\
    \ ($i = 0; $i < $len; $i++) {\n        for ($j = $i + 1; $j < $len; $j++) {\n\
    \            $diff = abs($numbers[$i] - $numbers[$j]);\n            if ($diff\
    \ < $min_diff) {\n                $min_diff = $diff;\n                $first =\
    \ $numbers[$i];\n                $second = $numbers[$j];\n            }\n    \
    \    }\n    }\n    return ($first > $second) ? array($second, $first) : array($first,\
    \ $second);\n}\n", "  // your code goes here\n  $min_diff = abs($numbers[0] -\
    \ $numbers[1]);\n  $min_pair = array($numbers[0], $numbers[1]);\n  for ($i = 0;\
    \ $i < count($numbers); $i++) {\n    for ($j = $i + 1; $j < count($numbers); $j++)\
    \ {\n      $diff = abs($numbers[$i] - $numbers[$j]);\n      if ($diff < $min_diff)\
    \ {\n        $min_diff = $diff;\n        $min_pair = array($numbers[$i], $numbers[$j]);\n\
    \      }\n    }\n  }\n  return $min_pair;\n}\n", "    if (count($numbers) < 2)\
    \ {\n        return $numbers;\n    }\n\n    sort($numbers);\n    $closest_elements\
    \ = [$numbers[0], $numbers[1]];\n    $closest_distance = abs($numbers[0] - $numbers[1]);\n\
    \n    for ($i = 1; $i < count($numbers) - 1; $i++) {\n        $distance = abs($numbers[$i]\
    \ - $numbers[$i + 1]);\n        if ($distance < $closest_distance) {\n       \
    \     $closest_elements = [$numbers[$i], $numbers[$i + 1]];\n            $closest_distance\
    \ = $distance;\n        }\n    }\n\n    return $closest_elements;\n}\n", "   \
    \ $min = NULL;\n    $closest = array();\n    for ($i = 0; $i < count($numbers);\
    \ $i++) {\n        $first = $numbers[$i];\n        for ($j = $i + 1; $j < count($numbers);\
    \ $j++) {\n            $second = $numbers[$j];\n            $distance = abs($first\
    \ - $second);\n            if (is_null($min) || $distance < $min) {\n        \
    \        $min = $distance;\n                $closest = array($first, $second);\n\
    \            }\n        }\n    }\n    sort($closest);\n    return $closest;\n}",
  "    if (count($numbers) < 2) {\n        return FALSE;\n    }\n    $largestDistance\
    \ = 0;\n    $largestDistanceIndex = null;\n    $secondLargestDistance = 0;\n \
    \   $secondLargestDistanceIndex = null;\n    for ($i = 0; $i < count($numbers)\
    \ - 1; $i++) {\n        $distance = abs($numbers[$i] - $numbers[$i + 1]);\n  \
    \      if ($distance > $largestDistance) {\n            $secondLargestDistance\
    \ = $largestDistance;\n            $secondLargestDistanceIndex = $largestDistanceIndex;\n\
    \            $largestDistance = $distance;\n            $largestDistanceIndex\
    \ = $i;\n        } else if ($distance > $secondLargestDistance) {\n          \
    \  $secondLargestDistance = $distance;\n            $secondLargestDistanceIndex\
    \ = $i;\n        }\n    }\n    if ($largestDistance == 0) {\n        return array($numbers[$largestDistanceIndex],\
    \ $numbers[$largestDistanceIndex + 1]);\n    } else {\n        if ($largestDistanceIndex\
    \ > $secondLargestDistanceIndex) {\n            return array($numbers[$secondLargestDistanceIndex],\
    \ $numbers[$secondLargestDistanceIndex + 1]);\n        } else {\n            return\
    \ array($numbers[$largestDistanceIndex], $numbers[$largestDistanceIndex + 1]);\n\
    \        }\n    }\n}\n\nvar_dump(find_closest_elements(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2)));\nvar_dump(find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0)));", "\t$min_distance = abs($numbers[0] - $numbers[1]);\n\t$min_elements\
    \ = array($numbers[0], $numbers[1]);\n\tfor ($i = 0; $i < count($numbers); $i++)\
    \ {\n\t\tfor ($j = $i + 1; $j < count($numbers); $j++) {\n\t\t\t$diff = abs($numbers[$i]\
    \ - $numbers[$j]);\n\t\t\tif ($diff < $min_distance) {\n\t\t\t\t$min_distance\
    \ = $diff;\n\t\t\t\t$min_elements = array($numbers[$i], $numbers[$j]);\n\t\t\t\
    }\n\t\t}\n\t}\n\treturn $min_elements;\n}\n\n$test1 = array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2);\n$test2 = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0);\nvar_dump(find_closest_elements($test1));\n\
    var_dump(find_closest_elements($test2));", "\tif (count($numbers) < 2) {\n\t\t\
    return false;\n\t}\n\n\t$diff = null;\n\t$closest = null;\n\n\tfor ($i = 0; $i\
    \ < count($numbers); $i++) {\n\t\t$element = $numbers[$i];\n\t\t$next_element\
    \ = $numbers[$i + 1];\n\n\t\t$curr_diff = abs($element - $next_element);\n\n\t\
    \tif (is_null($diff) || $curr_diff < $diff) {\n\t\t\t$diff = $curr_diff;\n\t\t\
    \t$closest = array($element, $next_element);\n\t\t}\n\t}\n\n\treturn $closest;\n\
    }\n", "  $closest = [];\n  $low = 0;\n  $high = 0;\n  $small = $numbers[0];\n\
    \  $large = $numbers[0];\n  foreach ($numbers as $number) {\n    if ($number <=\
    \ $small) {\n      $small = $number;\n      $low = $number;\n    }\n    if ($number\
    \ >= $large) {\n      $large = $number;\n      $high = $number;\n    }\n  }\n\
    \  $min_distance = $high - $low;\n  for ($i = 0; $i < count($numbers); $i++) {\n\
    \    for ($j = $i + 1; $j < count($numbers); $j++) {\n      $distance = abs($numbers[$i]\
    \ - $numbers[$j]);\n      if ($distance < $min_distance) {\n        $min_distance\
    \ = $distance;\n        $closest = [$numbers[$i], $numbers[$j]];\n      }\n  \
    \  }\n  }\n  if ($closest[0] > $closest[1]) {\n    $temp = $closest[0];\n    $closest[0]\
    \ = $closest[1];\n    $closest[1] = $temp;\n  }\n  return $closest;\n}", "  $found\
    \ = array(0,0);\n  $closest_num = 0;\n  $previous_diff = 0;\n  $current_diff =\
    \ 0;\n  $closest_diff = 0;\n  $diff = 0;\n  // Array must have at least 2 elements.\n\
    \  if (count($numbers) < 2) {\n    return $found;\n  }\n  // Must have at least\
    \ 2 different numbers in the array.\n  if (count(array_unique($numbers)) < 2)\
    \ {\n    return $found;\n  }\n  for ($i = 0; $i < count($numbers); $i++) {\n \
    \   for ($j = 0; $j < count($numbers); $j++) {\n      // ignore if the same number\n\
    \      if ($i == $j) {\n        continue;\n      }\n      // Calculate the difference\n\
    \      $diff = abs($numbers[$i] - $numbers[$j]);\n      // Check if a closest\
    \ number has been found.\n      if ($closest_num == 0) {\n        $closest_num\
    \ = $numbers[$i];\n        $closest_diff = $diff;\n        $found = array($numbers[$i],\
    \ $numbers[$j]);\n      }\n      // Check if the difference is the closest.\n\
    \      if ($diff < $closest_diff) {\n        $closest_num = $numbers[$i];\n  \
    \      $closest_diff = $diff;\n        $found = array($numbers[$i], $numbers[$j]);\n\
    \      }\n    }\n  }\n  // Return the numbers in order.\n  return array(min($found),\
    \ max($found));\n}\n", "    $length = count($numbers);\n    $min_dist = abs($numbers[0]\
    \ - $numbers[1]);\n    $closest_elements = array($numbers[0], $numbers[1]);\n\
    \    for ($i = 0; $i < $length; $i++) {\n        for ($j = $i + 1; $j < $length;\
    \ $j++) {\n            $dist = abs($numbers[$i] - $numbers[$j]);\n           \
    \ if ($dist < $min_dist) {\n                $min_dist = $dist;\n             \
    \   $closest_elements = array($numbers[$i], $numbers[$j]);\n            }\n  \
    \      }\n    }\n    sort($closest_elements);\n    return $closest_elements;\n\
    }", "    $mini = 0;\n    $minj = 1;\n    $min = $numbers[$mini] - $numbers[$minj];\n\
    \    for ($i = 0; $i < count($numbers); $i++) {\n        for ($j = $i + 1; $j\
    \ < count($numbers); $j++) {\n            $curr = $numbers[$i] - $numbers[$j];\n\
    \            if (abs($curr) < abs($min)) {\n                $mini = $i;\n    \
    \            $minj = $j;\n                $min = $curr;\n            }\n     \
    \   }\n    }\n    if ($numbers[$mini] > $numbers[$minj]) {\n        $t = $mini;\n\
    \        $mini = $minj;\n        $minj = $t;\n    }\n    return array($numbers[$mini],\
    \ $numbers[$minj]);\n}", "    $min_diff = PHP_INT_MAX;\n    $min_diff_pair = array(0,\
    \ 0);\n    for ($i = 0; $i < count($numbers) - 1; $i++) {\n        $curr_diff\
    \ = abs($numbers[$i] - $numbers[$i + 1]);\n        if ($curr_diff < $min_diff)\
    \ {\n            $min_diff = $curr_diff;\n            $min_diff_pair = array($numbers[$i],\
    \ $numbers[$i + 1]);\n        }\n    }\n    sort($min_diff_pair);\n    return\
    \ $min_diff_pair;\n}", "  $closest_numbers = [];\n  $distance = abs($numbers[0]\
    \ - $numbers[1]);\n  $closest_numbers[] = $numbers[0];\n  $closest_numbers[] =\
    \ $numbers[1];\n  for ($i = 0; $i < count($numbers); $i++) {\n    for ($j = 0;\
    \ $j < count($numbers); $j++) {\n      if ($i != $j) {\n        $new_distance\
    \ = abs($numbers[$i] - $numbers[$j]);\n        if ($new_distance < $distance)\
    \ {\n          $distance = $new_distance;\n          $closest_numbers = [$numbers[$i],\
    \ $numbers[$j]];\n        }\n      }\n    }\n  }\n  return $closest_numbers;\n\
    }\n$numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.2];\nprint_r(find_closest_elements($numbers));\n\
    $numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.0];\nprint_r(find_closest_elements($numbers));",
  "    $diff = abs($numbers[0] - $numbers[1]);\n    $closest = array($numbers[0],\
    \ $numbers[1]);\n    for ($i = 0; $i < count($numbers); $i++) {\n        for ($j\
    \ = $i + 1; $j < count($numbers); $j++) {\n            if (abs($numbers[$i] -\
    \ $numbers[$j]) < $diff) {\n                $diff = abs($numbers[$i] - $numbers[$j]);\n\
    \                $closest = array($numbers[$i], $numbers[$j]);\n            }\n\
    \        }\n    }\n    sort($closest);\n    return $closest;\n}", "  $closest\
    \ = array($numbers[0], $numbers[1]);\n  $min_diff = abs($numbers[0] - $numbers[1]);\n\
    \  for ($i = 0; $i < count($numbers); $i++) {\n    for ($j = $i + 1; $j < count($numbers);\
    \ $j++) {\n      $diff = abs($numbers[$i] - $numbers[$j]);\n      if ($diff <\
    \ $min_diff) {\n        $min_diff = $diff;\n        $closest = array($numbers[$i],\
    \ $numbers[$j]);\n      }\n    }\n  }\n  return $closest;\n}\n\nvar_dump(find_closest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2)));\nvar_dump(find_closest_elements(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0)));", "  if (count($numbers) == 2) {\n    return array($numbers[0],\
    \ $numbers[1]);\n  }\n  $closest_elements = array($numbers[0], $numbers[1]);\n\
    \  $closest_distance = abs($numbers[0] - $numbers[1]);\n  for ($i = 0; $i < count($numbers);\
    \ $i++) {\n    for ($j = $i + 1; $j < count($numbers); $j++) {\n      $distance\
    \ = abs($numbers[$i] - $numbers[$j]);\n      if ($distance < $closest_distance)\
    \ {\n        $closest_elements = array($numbers[$i], $numbers[$j]);\n        $closest_distance\
    \ = $distance;\n      }\n    }\n  }\n  return $closest_elements;\n}\n", "    $closest_distance\
    \ = INF;\n    $closest_pair = null;\n    for ($i = 0; $i < count($numbers) - 1;\
    \ $i++) {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n         \
    \   $distance = abs($numbers[$i] - $numbers[$j]);\n            if ($distance <\
    \ $closest_distance) {\n                $closest_distance = $distance;\n     \
    \           $closest_pair = array($numbers[$i], $numbers[$j]);\n            }\n\
    \        }\n    }\n    return $closest_pair;\n}\n\necho 'find_closest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2)) - ';\nvar_dump(find_closest_elements(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2)));\necho 'find_closest_elements(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0)) - ';\nvar_dump(find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0)));", "\t$closest = array(1 => null, 2 => null);\n\t$closest_delta = null;\n\
    \tforeach ($numbers as $index => $value) {\n\t\tif ($index < count($numbers) -\
    \ 1) {\n\t\t\t$next_delta = abs($value - $numbers[$index + 1]);\n\t\t\tif ($closest_delta\
    \ === null || $next_delta < $closest_delta) {\n\t\t\t\t$closest_delta = $next_delta;\n\
    \t\t\t\t$closest = array(1 => $value, 2 => $numbers[$index + 1]);\n\t\t\t}\n\t\
    \t}\n\t}\n\treturn $closest;\n}\n", "    $first_element = $numbers[0];\n    $second_element\
    \ = $numbers[1];\n    $min_difference = abs($first_element - $second_element);\n\
    \    for ($i = 0; $i < count($numbers); $i++) {\n        for ($j = $i + 1; $j\
    \ < count($numbers); $j++) {\n            $curr_difference = abs($numbers[$i]\
    \ - $numbers[$j]);\n            if ($curr_difference < $min_difference) {\n  \
    \              $min_difference = $curr_difference;\n                $first_element\
    \ = $numbers[$i];\n                $second_element = $numbers[$j];\n         \
    \   }\n        }\n    }\n    if ($first_element > $second_element) {\n       \
    \ $temp = $first_element;\n        $first_element = $second_element;\n       \
    \ $second_element = $temp;\n    }\n    return array($first_element, $second_element);\n\
    }\n\n$arr = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2);\necho \"The result is \" . find_closest_elements($arr)[0]\
    \ . \", \" . find_closest_elements($arr)[1];", "  $closest_diff = $numbers[1]\
    \ - $numbers[0];\n  $closest_index = 0;\n  for ($i = 1; $i < count($numbers) -\
    \ 1; $i++) {\n    $diff = $numbers[$i + 1] - $numbers[$i];\n    if ($diff < $closest_diff)\
    \ {\n      $closest_diff = $diff;\n      $closest_index = $i;\n    }\n  }\n  return\
    \ array($numbers[$closest_index], $numbers[$closest_index + 1]);\n}\n", "    $closest\
    \ = NULL;\n    $closest_pair = [];\n    $lower = 0;\n    $higher = 1;\n    $highest\
    \ = count($numbers) - 1;\n    while ($higher < $highest) {\n        $abs = abs($numbers[$lower]\
    \ - $numbers[$higher]);\n        if ($closest === NULL || $abs < $closest) {\n\
    \            $closest = $abs;\n            $closest_pair = [$numbers[$lower],\
    \ $numbers[$higher]];\n        }\n        if ($numbers[$higher] < $numbers[$lower])\
    \ {\n            $lower = $higher;\n        }\n        $higher++;\n    }\n   \
    \ sort($closest_pair);\n    return $closest_pair;\n}\n", "  // your code here\n\
    \  // some more comments\n\n  return array();\n}", "  // If there are two numbers,\
    \ we know they are the two closest numbers to each other.\n  if (count($numbers)\
    \ == 2) {\n    return $numbers;\n  }\n\n  // Start with the first two numbers\
    \ of the array\n  $min_diff = abs($numbers[0] - $numbers[1]);\n  $closest_elements\
    \ = [$numbers[0], $numbers[1]];\n\n  // Cycle through the numbers - two at a time.\n\
    \  for ($i = 0; $i < count($numbers) - 1; $i++) {\n    $diff = abs($numbers[$i]\
    \ - $numbers[$i + 1]);\n    if ($diff < $min_diff) {\n      $min_diff = $diff;\n\
    \      $closest_elements = [$numbers[$i], $numbers[$i + 1]];\n    }\n  }\n\n \
    \ return $closest_elements;\n}\n", "\t$count = count($numbers);\n\tif ($count\
    \ < 2) {\n\t\treturn array();\n\t}\n\t$min = $numbers[0] + $numbers[1];\n\t$result\
    \ = array($numbers[0], $numbers[1]);\n\tfor ($i = 0; $i < $count - 1; $i++) {\n\
    \t\tfor ($j = $i + 1; $j < $count; $j++) {\n\t\t\t$diff = abs($numbers[$i] - $numbers[$j]);\n\
    \t\t\tif ($diff < $min) {\n\t\t\t\t$min = $diff;\n\t\t\t\t$result = array($numbers[$i],\
    \ $numbers[$j]);\n\t\t\t}\n\t\t}\n\t}\n\treturn $result;\n}\n\necho \"find_closest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2)) returns \";\nprint_r(find_closest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2)));\necho \"<br>\";\necho \"find_closest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0)) returns \";\nprint_r(find_closest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0)));", "  $closest = false;\n  $output = false;\n  foreach\
    \ ($numbers as $i => $a) {\n    foreach ($numbers as $j => $b) {\n      if ($i\
    \ != $j) {\n        $current = abs($a - $b);\n        if ($current < $closest\
    \ || $closest === false) {\n          $closest = $current;\n          $output\
    \ = array($a, $b);\n        }\n      }\n    }\n  }\n  return $output;\n}\n\n$numbers\
    \ = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2);\n\nprint_r(find_closest_elements($numbers));",
  "\t$closest = array($numbers[0], $numbers[1]);\n\tfor ($i = 0; $i < count($numbers);\
    \ $i++) {\n\t\tfor ($j = $i + 1; $j < count($numbers); $j++) {\n\t\t\tif (abs($numbers[$i]\
    \ - $numbers[$j]) < abs($closest[0] - $closest[1])) {\n\t\t\t\t$closest = array($numbers[$i],\
    \ $numbers[$j]);\n\t\t\t}\n\t\t}\n\t}\n\tsort($closest);\n\treturn $closest;\n\
    }", "  $smallest_difference = null;\n  $closest_elements = null;\n  $cnt = count($numbers);\n\
    \  for ($i = 0; $i < $cnt - 1; $i++) {\n    for ($j = $i + 1; $j < $cnt; $j++)\
    \ {\n      $difference = abs($numbers[$i] - $numbers[$j]);\n      if ($smallest_difference\
    \ === null || $difference < $smallest_difference) {\n        $smallest_difference\
    \ = $difference;\n        $closest_elements = array($numbers[$i], $numbers[$j]);\n\
    \      }\n    }\n  }\n  return $closest_elements;\n}\necho implode(', ', find_closest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2))), '<br />';\necho implode(', ', find_closest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0))), '<br />';\n", "    $closest = array();\n    $closest_diff\
    \ = 0;\n    foreach ($numbers as $i => $a) {\n        foreach ($numbers as $j\
    \ => $b) {\n            if ($i != $j) {\n                $diff = abs($a - $b);\n\
    \                if ($diff < $closest_diff || $closest_diff == 0) {\n        \
    \            $closest_diff = $diff;\n                    $closest = array($a,\
    \ $b);\n                }\n            }\n        }\n    }\n    sort($closest);\n\
    \    return $closest;\n}\n", "  $closest = array();\n  $min = 0;\n  for ($i =\
    \ 0; $i < count($numbers) - 1; $i++) {\n    $diff = abs($numbers[$i] - $numbers[$i\
    \ + 1]);\n    if ($i == 0 || $diff < $min) {\n      $min = $diff;\n      $closest\
    \ = array($numbers[$i], $numbers[$i + 1]);\n    }\n  }\n  return $closest;\n}",
  "  $smaller = [];\n  $larger = [];\n  $output = [];\n  foreach ($numbers as $num)\
    \ {\n    $smaller[] = abs($num-($num-1));\n    $larger[] = abs($num-($num+1));\n\
    \  }\n  $closest = max($smaller) < max($larger) ? max($smaller) : max($larger);\n\
    \  $index = array_search($closest, $numbers);\n  $output[] = $numbers[$index];\n\
    \  $output[] = $closest < abs($numbers[$index]-($numbers[$index]+1)) ? $numbers[$index+1]\
    \ : $numbers[$index-1];\n  return $output;\n}\n", "    $closestDiff = abs($numbers[0]\
    \ - $numbers[1]);\n    $closestIndex = 0;\n    for ($i = 1; $i < count($numbers);\
    \ $i++) {\n        $currDiff = abs($numbers[$i] - $numbers[$i+1]);\n        if\
    \ ($currDiff < $closestDiff) {\n            $closestDiff = $currDiff;\n      \
    \      $closestIndex = $i;\n        }\n    }\n    $result = array();\n    $result[]\
    \ = $numbers[$closestIndex];\n    $result[] = $numbers[$closestIndex+1];\n   \
    \ return $result;\n}\n", "    sort($numbers);\n    $closest = array(0.0, 0.0);\n\
    \    for ($i = 0; $i < count($numbers) - 1; $i++) {\n        $diff = abs($numbers[$i]\
    \ - $numbers[$i + 1]);\n        if ($diff < abs($closest[0] - $closest[1])) {\n\
    \            $closest[0] = $numbers[$i];\n            $closest[1] = $numbers[$i\
    \ + 1];\n        }\n    }\n    return $closest;\n}\n", "\t$min = 1;\n\t$closest\
    \ = [$numbers[0], $numbers[1]];\n\tforeach ($numbers as $n => $number) {\n\t\t\
    if ($n > 0) {\n\t\t\t$diff = abs($number - $numbers[$n - 1]);\n\t\t\tif ($diff\
    \ < $min) {\n\t\t\t\t$min = $diff;\n\t\t\t\t$closest = [$numbers[$n - 1], $number];\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn $closest;\n}\n", "    $closest = [0, 0];\n    $smallest\
    \ = 10000000;\n    for ($i = 0; $i < count($numbers); $i++) {\n        for ($j\
    \ = $i + 1; $j < count($numbers); $j++) {\n            $abs = abs($numbers[$i]\
    \ - $numbers[$j]);\n            if ($abs < $smallest) {\n                $smallest\
    \ = $abs;\n                $closest = [$numbers[$i], $numbers[$j]];\n        \
    \    }\n        }\n    }\n    return $closest;\n}\n\nprint_r(find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]));\nprint_r(find_closest_elements([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0]));", "\tif (!isset($numbers[1])) {\n\t\treturn NULL;\n\t}\n\t$candidates\
    \ = array();\n\tfor ($i = 0; $i < count($numbers) - 1; $i++) {\n\t\t$candidates[]\
    \ = array($numbers[$i], $numbers[$i + 1]);\n\t}\n\tsort($candidates);\n\t$result\
    \ = $candidates[0];\n\tfor ($i = 1; $i < count($candidates); $i++) {\n\t\tif (abs($candidates[$i][0]\
    \ - $candidates[$i][1]) < abs($result[0] - $result[1])) {\n\t\t\t$result = $candidates[$i];\n\
    \t\t}\n\t}\n\treturn $result;\n}\n", "    $length = count($numbers);\n    $first\
    \ = $numbers[0];\n    $second = $numbers[1];\n    for ($i = 0; $i < $length; $i++)\
    \ {\n        $curr = $numbers[$i];\n        $next = $numbers[$i + 1];\n      \
    \  if (abs($curr - $next) < abs($first - $second)) {\n            $first = $curr;\n\
    \            $second = $next;\n        }\n    }\n    return array($first, $second);\n\
    }\n", "  // build distance array\n  $distances = array();\n  for ($i = 0; $i <\
    \ count($numbers) - 1; $i++) {\n    $j = $i + 1;\n    for (; $j < count($numbers);\
    \ $j++) {\n      $distances[] = abs($numbers[$i] - $numbers[$j]);\n    }\n  }\n\
    \  $target = min($distances);\n  // get the indices from the numbers array\n \
    \ $index1 = null;\n  $index2 = null;\n  for ($i = 0; $i < count($numbers) - 1;\
    \ $i++) {\n    $j = $i + 1;\n    for (; $j < count($numbers); $j++) {\n      if\
    \ (abs($numbers[$i] - $numbers[$j]) == $target) {\n        $index1 = $i;\n   \
    \     $index2 = $j;\n        break;\n      }\n    }\n  }\n  return array($numbers[$index1],\
    \ $numbers[$index2]);\n}\n", "\t$smallest = null;\n\t$largest = null;\n\t$pair\
    \ = array();\n\tfor ($i = 0; $i < sizeof($numbers); $i++) {\n\t\tfor ($j = $i\
    \ + 1; $j < sizeof($numbers); $j++) {\n\t\t\t$diff = abs($numbers[$i] - $numbers[$j]);\n\
    \t\t\tif ($diff < $smallest || $smallest == null) {\n\t\t\t\t$smallest = $diff;\n\
    \t\t\t\t$pair = array($numbers[$i], $numbers[$j]);\n\t\t\t}\n\t\t}\n\t}\n\tsort($pair);\n\
    \treturn $pair;\n}\n", "    $closest = array($numbers[0], $numbers[1]);\n    $min_distance\
    \ = abs($numbers[0] - $numbers[1]);\n    for ($i = 0; $i < count($numbers); $i++)\
    \ {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n            $distance\
    \ = abs($numbers[$i] - $numbers[$j]);\n            if ($distance < $min_distance)\
    \ {\n                $min_distance = $distance;\n                $closest = array($numbers[$i],\
    \ $numbers[$j]);\n            }\n        }\n    }\n    return $closest;\n}\n",
  "    $closestNumbers = array();\n    // Insert your code here.\n    return $closestNumbers;\n\
    }\n", "    $smaller = $numbers[0];\n    $larger = $numbers[1];\n    $diff = abs($numbers[0]\
    \ - $numbers[1]);\n    for ($i = 0; $i < count($numbers); $i++) {\n        for\
    \ ($j = 0; $j < count($numbers); $j++) {\n            if ($i != $j) {\n      \
    \          $current_diff = abs($numbers[$i] - $numbers[$j]);\n               \
    \ if ($current_diff < $diff) {\n                    $smaller = $numbers[$i];\n\
    \                    $larger = $numbers[$j];\n                    $diff = $current_diff;\n\
    \                }\n            }\n        }\n    }\n    return array($smaller,\
    \ $larger);\n}", "    $diff = abs($numbers[0] - $numbers[1]);\n    $pair = array($numbers[0],\
    \ $numbers[1]);\n    for ($i = 0; $i < count($numbers); $i++) {\n        for ($j\
    \ = $i + 1; $j < count($numbers); $j++) {\n            if (abs($numbers[$i] -\
    \ $numbers[$j]) < $diff) {\n                $diff = abs($numbers[$i] - $numbers[$j]);\n\
    \                $pair = array($numbers[$i], $numbers[$j]);\n            }\n \
    \       }\n    }\n    return $pair;\n}\n\n$numbers = array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2);\necho \"Result = \";\nforeach (find_closest_elements($numbers) as\
    \ $number) {\n    echo $number . \" \";\n}\necho \"\\n\";\n\n$numbers = array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0);\necho \"Result = \";\nforeach (find_closest_elements($numbers)\
    \ as $number) {\n    echo $number . \" \";\n}\necho \"\\n\";", "    $min_distance\
    \ = null;\n    $result = null;\n    foreach ($numbers as $i => $e1) {\n      \
    \  foreach ($numbers as $e2) {\n            if ($e1 == $e2) {\n              \
    \  continue;\n            }\n            $current_distance = abs($e1 - $e2);\n\
    \            if (is_null($min_distance) || $current_distance < $min_distance)\
    \ {\n                $min_distance = $current_distance;\n                $result\
    \ = array($e1, $e2);\n            }\n        }\n    }\n    sort($result);\n  \
    \  return $result;\n}\n", "    $closest_distance = abs($numbers[0] - $numbers[1]);\n\
    \    $closest_numbers = [$numbers[0], $numbers[1]];\n    for ($i = 0; $i < count($numbers);\
    \ $i++) {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n         \
    \   $distance = abs($numbers[$i] - $numbers[$j]);\n            if ($distance <\
    \ $closest_distance) {\n                $closest_distance = $distance;\n     \
    \           $closest_numbers = [$numbers[$i], $numbers[$j]];\n            }\n\
    \        }\n    }\n    return $closest_numbers;\n}\n", "    //TODO: implement\
    \ this function\n}", "    // sort the numbers, in ascending order\n    sort($numbers);\n\
    \    // find length of the array\n    $length = count($numbers);\n    // first\
    \ element will be the min by default\n    $min = array($numbers[0], $numbers[1]);\n\
    \    // let's iterate through the array\n    for ($i = 0; $i < $length - 1; $i++)\
    \ {\n        // find absolute difference\n        $diff = abs($numbers[$i] - $numbers[$i\
    \ + 1]);\n        // test if absolute difference is less than min\n        if\
    \ ($diff < abs($min[0] - $min[1])) {\n            // if so, then update the min\n\
    \            $min = array($numbers[$i], $numbers[$i + 1]);\n        }\n    }\n\
    \    // return the min\n    return $min;\n}\nprint_r(find_closest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2)));\nprint_r(find_closest_elements(array(1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0)));", "    sort($numbers);\n    $first = $numbers[0];\n    $second\
    \ = $numbers[1];\n    $closest = abs($first - $second);\n    for ($i = 1; $i <\
    \ count($numbers) - 1; $i++) {\n        $first = $numbers[$i];\n        $second\
    \ = $numbers[$i + 1];\n        $abs = abs($first - $second);\n        if ($abs\
    \ < $closest) {\n            $closest = $abs;\n            $r = [$first, $second];\n\
    \        }\n    }\n    return $r;\n}\n\nassert([2.0, 2.2] == find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]));\nassert([2.0, 2.0] == find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]));\n", "    // TODO\n}\n", "    $num_count = count($numbers);\n\
    \    $min_diff = abs($numbers[0] - $numbers[1]);\n    $min_num1 = $numbers[0];\n\
    \    $min_num2 = $numbers[1];\n    for ($i = 0; $i < $num_count; $i++) {\n   \
    \     for ($j = $i + 1; $j < $num_count; $j++) {\n            $temp_diff = abs($numbers[$i]\
    \ - $numbers[$j]);\n            if ($temp_diff < $min_diff) {\n              \
    \  $min_diff = $temp_diff;\n                $min_num1 = $numbers[$i];\n      \
    \          $min_num2 = $numbers[$j];\n            }\n        }\n    }\n    return\
    \ array($min_num1, $min_num2);\n}\n\n$num = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2);\n\
    print_r(find_closest_elements($num));\necho \"\\n\";\n$num = array(1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0);\nprint_r(find_closest_elements($num));\necho \"\\n\";\n", " \
    \ $closest = array(null, null);\n  $minimum = null;\n  for ($i = 0; $i < count($numbers);\
    \ $i++) {\n    for ($j = $i + 1; $j < count($numbers); $j++) {\n      $distance\
    \ = abs($numbers[$i] - $numbers[$j]);\n      if ($minimum === null || $distance\
    \ < $minimum) {\n        $minimum = $distance;\n        $closest = array($numbers[$i],\
    \ $numbers[$j]);\n      }\n    }\n  }\n  sort($closest);\n  return $closest;\n\
    }\n", "  $closest = array();\n  $differences = array();\n  foreach($numbers as\
    \ $key => $val) {\n    $differences[$key] = array();\n    $differences[$key]['key']\
    \ = $key;\n    $differences[$key]['value'] = $val;\n    if($key > 0) {\n     \
    \ $differences[$key]['difference'] = abs($val - $numbers[$key - 1]);\n    }\n\
    \  }\n  usort($differences, function($a, $b) {\n    return $a['difference'] -\
    \ $b['difference'];\n  });\n  $closest[0] = $differences[0]['value'];\n  $closest[1]\
    \ = $numbers[$differences[0]['key'] + 1];\n  return $closest;\n}\n$test_array\
    \ = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2);\nprint_r(find_closest_elements($test_array));\n\
    print_r(find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)));\n", "   \
    \ sort($numbers);\n    $min = $numbers[1] - $numbers[0];\n    $min_index = 0;\n\
    \    $size = count($numbers);\n    for ($i = 1; $i < $size - 1; $i++) {\n    \
    \    $current = $numbers[$i + 1] - $numbers[$i];\n        if ($current < $min)\
    \ {\n            $min = $current;\n            $min_index = $i;\n        }\n \
    \   }\n    return array($numbers[$min_index], $numbers[$min_index + 1]);\n}\n\
    $numbers = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2);\nprint_r(find_closest_elements($numbers));",
  "  $closest = array(array($numbers[0], $numbers[1]), abs($numbers[0] - $numbers[1]));\n\
    \  for ($i = 1; $i < count($numbers) - 1; $i++) {\n    $compare = abs($numbers[$i]\
    \ - $numbers[$i + 1]);\n    if ($compare < $closest[1]) {\n      $closest = array(array($numbers[$i],\
    \ $numbers[$i + 1]), $compare);\n    }\n  }\n  return $closest[0];\n}\n", "  \
    \  $num1 = array_shift($numbers);\n    $num2 = array_shift($numbers);\n    $min\
    \ = abs($num1 - $num2);\n    $min_nums = array($num1, $num2);\n    while($num\
    \ = array_shift($numbers)) {\n        $diff = abs($num1 - $num);\n        if ($diff\
    \ < $min) {\n            $min = $diff;\n            $min_nums = array($num1, $num);\n\
    \        }\n        $num1 = $num;\n    }\n    return $min_nums;\n}\n", "  $min\
    \ = null;\n  $pair = [];\n  for ($i = 0; $i < count($numbers); $i++) {\n    for\
    \ ($j = $i + 1; $j < count($numbers); $j++) {\n      $diff = abs($numbers[$i]\
    \ - $numbers[$j]);\n      if (is_null($min) || $diff < $min) {\n        $min =\
    \ $diff;\n        $pair = [$numbers[$i], $numbers[$j]];\n      }\n    }\n  }\n\
    \  return $pair;\n}\n", "\t$closest = array();\n\t$closest[0] = $numbers[0];\n\
    \t$closest[1] = $numbers[1];\n\tfor ($i = 0; $i < count($numbers); $i++) {\n\t\
    \tfor ($j = 0; $j < count($numbers); $j++) {\n\t\t\tif ($i != $j) {\n\t\t\t\t\
    if (abs($numbers[$i] - $numbers[$j]) < abs($closest[0] - $closest[1])) {\n\t\t\
    \t\t\t$closest[0] = $numbers[$i];\n\t\t\t\t\t$closest[1] = $numbers[$j];\n\t\t\
    \t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn $closest;\n}\n", "    $closest_numbers =\
    \ array(array($numbers[0], $numbers[1]));\n    $min_distance = abs($numbers[0]\
    \ - $numbers[1]);\n    $current_distance = 0;\n    for ($i = 1; $i < count($numbers)\
    \ - 1; $i++) {\n        $current_distance = abs($numbers[$i] - $numbers[$i + 1]);\n\
    \        if ($current_distance < $min_distance) {\n            $min_distance =\
    \ $current_distance;\n            $closest_numbers = array(array($numbers[$i],\
    \ $numbers[$i + 1]));\n        } elseif ($current_distance == $min_distance) {\n\
    \            $closest_numbers[] = array($numbers[$i], $numbers[$i + 1]);\n   \
    \     }\n    }\n    if (count($closest_numbers) == 1) {\n        return $closest_numbers[0];\n\
    \    } else {\n        return $closest_numbers;\n    }\n}\n", "    $min_distance\
    \ = 10000;\n    $first_small = 0;\n    $first_large = 0;\n    for ($i = 0; $i\
    \ < count($numbers); $i++) {\n        for ($j = $i + 1; $j < count($numbers);\
    \ $j++) {\n            $distance = abs($numbers[$i] - $numbers[$j]);\n       \
    \     if ($distance < $min_distance) {\n                $min_distance = $distance;\n\
    \                $first_small = $numbers[$i];\n                $first_large =\
    \ $numbers[$j];\n            }\n        }\n    }\n    return [$first_small, $first_large];\n\
    }\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
