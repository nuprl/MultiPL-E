name: HumanEval_20_find_closest_elements
language: php
prompt: "<?php\n// From a supplied array of numbers (of length at least two) select\
  \ and return two that are the closest to each\n// other and return them in order\
  \ (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0,\
  \ 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0,\
  \ 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers)\
  \ {\n"
tests: "function candidate(...$args) {\n    return find_closest_elements(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2))\
  \ !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
  \ 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2))\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
  \ 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw\
  \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $length = count($numbers);\n    $smallest = $numbers[0];\n    $smallest_index\
    \ = 0;\n    $second_smallest = $numbers[1];\n    $second_smallest_index = 1;\n\
    \    for ($i = 1; $i < $length; $i++) {\n        if ($numbers[$i] < $smallest)\
    \ {\n            $second_smallest = $smallest;\n            $second_smallest_index\
    \ = $smallest_index;\n            $smallest = $numbers[$i];\n            $smallest_index\
    \ = $i;\n        } elseif ($numbers[$i] < $second_smallest) {\n            $second_smallest\
    \ = $numbers[$i];\n            $second_smallest_index = $i;\n        }\n    }\n\
    \    return array($smallest, $second_smallest);\n}\n", "    $closest = array();\n\
    \    $minDiff = 100;\n    for ($i = 0; $i < count($numbers) - 1; $i++) {\n   \
    \     $currDiff = abs($numbers[$i] - $numbers[$i + 1]);\n        if ($currDiff\
    \ < $minDiff) {\n            $minDiff = $currDiff;\n            $closest = array($numbers[$i],\
    \ $numbers[$i + 1]);\n        }\n    }\n    return $closest;\n}\n\n$array = array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2);\necho \"Array: \";\nprint_r($array);\n$result = find_closest_elements($array);\n\
    echo \"Result: \";\nprint_r($result);\n", "    $min = $numbers[0] - $numbers[1];\n\
    \    if($min < 0) {\n        $min = $min * -1;\n    }\n    $answer = array();\n\
    \    for($i = 0; $i < count($numbers); $i++) {\n        for($x = $i + 1; $x <\
    \ count($numbers); $x++) {\n            $sub = $numbers[$i] - $numbers[$x];\n\
    \            if($sub < 0) {\n                $sub = $sub * -1;\n            }\n\
    \            if($sub < $min) {\n                $min = $sub;\n               \
    \ $answer = array($numbers[$i], $numbers[$x]);\n            }\n        }\n   \
    \ }\n    return $answer;\n}\n\necho \"Problem 5: <br>\";\nvar_dump(find_closest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2)));\necho \"<br>\";\nvar_dump(find_closest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0)));\necho \"<br>\";\n", "    if(empty($numbers)) return\
    \ array();\n    $result = array();\n    $minDiff = null;\n    $numbersCount =\
    \ count($numbers);\n    $result[0] = $numbers[0];\n    $result[1] = $numbers[1];\n\
    \    for($i = 0; $i < $numbersCount; $i++) {\n        for($j = $i+1; $j < $numbersCount;\
    \ $j++) {\n            $diff = abs($numbers[$i] - $numbers[$j]);\n           \
    \ if($minDiff === null || $diff < $minDiff) {\n                $minDiff = $diff;\n\
    \                $result[0] = $numbers[$i];\n                $result[1] = $numbers[$j];\n\
    \            }\n        }\n    }\n    return $result;\n}\n$numbers = array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2);\necho implode(', ', find_closest_elements($numbers));\n\
    echo '<br>';\n$numbers = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0);\necho implode(',\
    \ ', find_closest_elements($numbers));\necho '<br>';\n$numbers = array();\necho\
    \ implode(', ', find_closest_elements($numbers));", "    // Your code here.\n}",
  "    $closestDistance = null;\n    $closestElements = array();\n    foreach ($numbers\
    \ as $i => $firstNum) {\n        foreach ($numbers as $j => $secondNum) {\n  \
    \          if ($i == $j) {\n                continue;\n            }\n       \
    \     $distance = abs($firstNum - $secondNum);\n            if ($closestDistance\
    \ === null || $distance < $closestDistance) {\n                $closestDistance\
    \ = $distance;\n                $closestElements = array($firstNum, $secondNum);\n\
    \            }\n        }\n    }\n    sort($closestElements);\n    return $closestElements;\n\
    }\n\n$numbers = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2);\n$result = find_closest_elements($numbers);\n\
    echo 'array(' . $result[0] . ', ' . $result[1] . ')';\necho PHP_EOL;\n\n$numbers\
    \ = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0);\n$result = find_closest_elements($numbers);\n\
    echo 'array(' . $result[0] . ', ' . $result[1] . ')';\necho PHP_EOL;", "  $result\
    \ = array();\n  if (count($numbers) < 2) {\n    return $result;\n  }\n  $minDiff\
    \ = abs($numbers[0] - $numbers[1]);\n  $result = array($numbers[0], $numbers[1]);\n\
    \  for ($i = 0; $i < count($numbers); $i++) {\n    for ($j = $i + 1; $j < count($numbers);\
    \ $j++) {\n      $diff = abs($numbers[$i] - $numbers[$j]);\n      if ($diff <\
    \ $minDiff) {\n        $minDiff = $diff;\n        $result = array($numbers[$i],\
    \ $numbers[$j]);\n      }\n    }\n  }\n  return $result;\n}\n\necho json_encode(find_closest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2))) . \"\\n\";\necho json_encode(find_closest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0))) . \"\\n\";", "    if (!is_array($numbers)) {\n  \
    \      return false;\n    }\n    $count = count($numbers);\n    if ($count < 2)\
    \ {\n        return false;\n    }\n    sort($numbers);\n    $min = $numbers[0];\n\
    \    $max = $numbers[$count - 1];\n    $min_distance = null;\n    $pairs = array();\n\
    \    for ($i = 0; $i < $count - 1; $i++) {\n        $distance = $numbers[$i +\
    \ 1] - $numbers[$i];\n        if ($min_distance === null || $distance < $min_distance)\
    \ {\n            $min_distance = $distance;\n            $pairs = array($numbers[$i],\
    \ $numbers[$i + 1]);\n        }\n    }\n    return $pairs;\n}\nprint_r(find_closest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2)));\nprint_r(find_closest_elements(array(1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0)));", "    $closest = array($numbers[0], $numbers[1]);\n    $diff\
    \ = abs($numbers[0] - $numbers[1]);\n    foreach (range(0, count($numbers)-2)\
    \ as $i) {\n        $j = $i + 1;\n        $subdiff = abs($numbers[$i] - $numbers[$j]);\n\
    \        if ($subdiff < $diff) {\n            $diff = $subdiff;\n            $closest\
    \ = array($numbers[$i], $numbers[$j]);\n        }\n    }\n    return $closest;\n\
    }\n", "\treturn array(0, 0);\n}\n", "    $count = count($numbers);\n    if($count\
    \ < 2) return $numbers;\n    $distance = abs($numbers[0] - $numbers[1]);\n   \
    \ $closest_elements = array($numbers[0], $numbers[1]);\n    for($i = 0; $i < $count;\
    \ $i++) {\n        for($j = $i + 1; $j < $count; $j++) {\n            $current_distance\
    \ = abs($numbers[$i] - $numbers[$j]);\n            if($current_distance < $distance)\
    \ {\n                $distance = $current_distance;\n                $closest_elements\
    \ = array($numbers[$i], $numbers[$j]);\n            }\n        }\n    }\n    return\
    \ $closest_elements;\n}\n", "  // Write your code here\n  // To print results\
    \ to the standard output you can use print\n  // Example: print \"Hello world!\"\
    ;\n}", "    $closest = array();\n    sort($numbers);\n    $diff = $numbers[1]\
    \ - $numbers[0];\n    for ($i = 1; $i < count($numbers) - 1; $i++) {\n       \
    \ $new_diff = $numbers[$i + 1] - $numbers[$i];\n        if ($new_diff < $diff)\
    \ {\n            $diff = $new_diff;\n            $closest = array($numbers[$i],\
    \ $numbers[$i + 1]);\n        }\n    }\n    return $closest;\n}\n", "\t$smallest_difference\
    \ = INF;\n\t$closest_numbers = array();\n\t$count = count($numbers);\n\tfor ($i\
    \ = 0; $i < $count; $i++) {\n\t\tfor ($j = $i + 1; $j < $count; $j++) {\n\t\t\t\
    $difference = abs($numbers[$i] - $numbers[$j]);\n\t\t\tif ($difference < $smallest_difference)\
    \ {\n\t\t\t\t$smallest_difference = $difference;\n\t\t\t\t$closest_numbers = array($numbers[$i],\
    \ $numbers[$j]);\n\t\t\t}\n\t\t}\n\t}\n\tsort($closest_numbers);\n\treturn $closest_numbers;\n\
    }\n", "  // TODO\n}\n", "\t$number = $numbers[0];\n\t$smallest_difference = abs($numbers[0]\
    \ - $numbers[1]);\n\t$answer = array($numbers[0], $numbers[1]);\n\t$prev_number\
    \ = $numbers[0];\n\t$counter = 0;\n\tforeach ($numbers as $number) {\n\t\t$current_difference\
    \ = abs($number - $prev_number);\n\t\tif ($current_difference < $smallest_difference)\
    \ {\n\t\t\t$smallest_difference = $current_difference;\n\t\t\t$answer = array($prev_number,\
    \ $number);\n\t\t}\n\t\t$prev_number = $number;\n\t}\n\treturn $answer;\n}\n\n\
    var_dump(find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)));\nvar_dump(find_closest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0)));", "    if (count($numbers) > 1) {\n        $distance_of_closest_elements\
    \ = 999999999;\n        $closest_elements = [];\n        for ($i = 0; $i < count($numbers)\
    \ - 1; $i++) {\n            $difference = abs($numbers[$i] - $numbers[$i + 1]);\n\
    \            if ($difference < $distance_of_closest_elements) {\n            \
    \    $distance_of_closest_elements = $difference;\n                $closest_elements\
    \ = [$numbers[$i], $numbers[$i + 1]];\n            }\n        }\n        asort($closest_elements);\n\
    \        return $closest_elements;\n    } else {\n        return $numbers;\n \
    \   }\n}\n\n$numbers = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2);\n\necho \"The two\
    \ closest numbers are: <br>\";\n\nforeach (find_closest_elements($numbers) as\
    \ $number) {\n    echo $number . \"<br>\";\n}", "    usort($numbers, function($a,\
    \ $b) {\n        return ($a > $b) ? 1 : (($a < $b) ? -1 : 0);\n    });\n    $return\
    \ = array();\n    $size = count($numbers);\n    for ($i = 0; $i < $size - 1; $i++)\
    \ {\n        $return[] = array(\n            $numbers[$i],\n            $numbers[$i\
    \ + 1],\n            abs($numbers[$i] - $numbers[$i + 1])\n        );\n    }\n\
    \    usort($return, function($a, $b) {\n        return ($a[2] > $b[2]) ? 1 : (($a[2]\
    \ < $b[2]) ? -1 : 0);\n    });\n    return array($return[0][0], $return[0][1]);\n\
    }\n\necho json_encode(find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)));",
  "    $closest_pair = array(reset($numbers), next($numbers));\n\n    while ($number\
    \ = next($numbers)) {\n        $distance = $number - $closest_pair[0];\n     \
    \   if ($distance < $closest_pair[1] - $closest_pair[0]) {\n            $closest_pair\
    \ = array($number, $number + $distance);\n        }\n    }\n\n    return $closest_pair;\n\
    }\n\nvar_dump(find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)));\nvar_dump(find_closest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0)));", "    if (count($numbers) > 2) {\n        $closestNumbers\
    \ = array();\n        $difference = 0;\n        for ($i = 0; $i < count($numbers)\
    \ - 1; $i++) {\n            if ($i === 0) {\n                $closestNumbers[0]\
    \ = $numbers[$i];\n                $closestNumbers[1] = $numbers[$i + 1];\n  \
    \              $difference = abs($numbers[$i] - $numbers[$i + 1]);\n         \
    \   } else {\n                $newDifference = abs($numbers[$i] - $numbers[$i\
    \ + 1]);\n                if ($newDifference < $difference) {\n              \
    \      $closestNumbers[0] = $numbers[$i];\n                    $closestNumbers[1]\
    \ = $numbers[$i + 1];\n                    $difference = $newDifference;\n   \
    \             }\n            }\n        }\n        return $closestNumbers;\n \
    \   } else {\n        return array($numbers[0], $numbers[1]);\n    }\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
