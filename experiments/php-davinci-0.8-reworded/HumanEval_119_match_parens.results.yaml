language: php
name: HumanEval_119_match_parens
results:
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  $s1 = $lst[0];\n  $s2 = $lst[1];\n  if (is_good($s1\
    \ . $s2)) {\n    return \"Yes\";\n  } else if (is_good($s2 . $s1)) {\n    return\
    \ \"Yes\";\n  } else {\n    return \"No\";\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_good() in\
    \ /tmp/tmpb12jxnje.php:18\nStack trace:\n#0 /tmp/tmpb12jxnje.php(28): match_parens(Array)\n\
    #1 /tmp/tmpb12jxnje.php(32): candidate(Array)\n#2 /tmp/tmpb12jxnje.php(46): test()\n\
    #3 {main}\n  thrown in /tmp/tmpb12jxnje.php on line 18\n"
  timestamp: 1659823541
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $left = $lst[0];\n    $right = $lst[1];\n\
    \    for ($i = 0; $i < strlen($left); $i++) {\n        if ($left[$i] == \"(\"\
    ) {\n            $left = substr_replace($left, \"\", $i, 1);\n            $right\
    \ = substr_replace($right, \"\", 0, 1);\n            return match_parens(array($left,\
    \ $right));\n        }\n    }\n    if ($left == \"\" && $right == \"\") {\n  \
    \      return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzjmh5s0s.php:37\n\
    Stack trace:\n#0 /tmp/tmpzjmh5s0s.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpzjmh5s0s.php\
    \ on line 37\n"
  timestamp: 1659823541
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $parens_1 = substr_count($lst[0], \"(\");\n\
    \    $parens_2 = substr_count($lst[1], \"(\");\n    $parens_3 = substr_count($lst[0],\
    \ \")\");\n    $parens_4 = substr_count($lst[1], \")\");\n    $total_parens =\
    \ $parens_1 + $parens_2 + $parens_3 + $parens_4;\n    if ($total_parens % 2 ==\
    \ 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n\
    }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprju2lesd.php:33\n\
    Stack trace:\n#0 /tmp/tmprju2lesd.php(46): test()\n#1 {main}\n  thrown in /tmp/tmprju2lesd.php\
    \ on line 33\n"
  timestamp: 1659823541
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $found =\
    \ \"\";\n    $p = 0;\n    while ($p < $str1_len && $p < $str2_len) {\n       \
    \ if ($str1[$p] === '(' && $str2[$p] === ')') {\n            $found = \"Yes\"\
    ;\n            break;\n        } else if ($str1[$p] === ')' && $str2[$p] === '(')\
    \ {\n            $found = \"Yes\";\n            break;\n        }\n        $p++;\n\
    \    }\n    if ($found === \"\") {\n        $found = \"No\";\n    }\n    return\
    \ $found;\n}\necho match_parens(array(\"()(\", \")\")) . \"\\n\";\necho match_parens(array(\"\
    )\", \")\")) . \"\\n\";\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Yes\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7xbp4lu_.php:47\n\
    Stack trace:\n#0 /tmp/tmp7xbp4lu_.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp7xbp4lu_.php\
    \ on line 47\n"
  timestamp: 1659823541
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $left = 0;\n    $right = 0;\n    $left_right\
    \ = 0;\n    $right_left = 0;\n    foreach ($lst as $str) {\n        $left += substr_count($str,\
    \ '(');\n        $right += substr_count($str, ')');\n        if ($left < $right)\
    \ {\n            $left_right += $right - $left;\n        } else {\n          \
    \  $right_left += $left - $right;\n        }\n    }\n    return ($left_right ==\
    \ $right_left) ? 'Yes' : 'No';\n}\n\necho match_parens(array(\"()(\", \")\"))\
    \ . \"\\n\";\necho match_parens(array(\")\", \")\")) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "No\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0cel1i8i.php:39\n\
    Stack trace:\n#0 /tmp/tmp0cel1i8i.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp0cel1i8i.php\
    \ on line 39\n"
  timestamp: 1659823541
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str = $lst[0] . $lst[1];\n    $length =\
    \ strlen($str);\n    $left = array();\n    $right = array();\n    $count = 0;\n\
    \    $i = 0;\n    while ($i < $length) {\n        if ($str[$i] == \"(\") {\n \
    \           $left[] = $i;\n            $count++;\n        } else {\n         \
    \   $right[] = $i;\n            $count--;\n        }\n        if ($count < 0)\n\
    \            return \"No\";\n        $i++;\n    }\n    if ($count != 0)\n    \
    \    return \"No\";\n    $i = 0;\n    $j = 0;\n    $length1 = count($left);\n\
    \    $length2 = count($right);\n    while ($i < $length1 && $j < $length2) {\n\
    \        if ($left[$i] < $right[$j])\n            $i++;\n        else if ($left[$i]\
    \ > $right[$j])\n            $j++;\n        else {\n            $i++;\n      \
    \      $j++;\n        }\n    }\n    if ($i != $length1 || $j != $length2)\n  \
    \      return \"No\";\n    return \"Yes\";\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyago6edx.php:60\n\
    Stack trace:\n#0 /tmp/tmpyago6edx.php(74): test()\n#1 {main}\n  thrown in /tmp/tmpyago6edx.php\
    \ on line 60\n"
  timestamp: 1659823541
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  $open_count = 0;\n  foreach($lst as $str) {\n\
    \    for($i = 0; $i < strlen($str); $i++) {\n      if ($str[$i] == '(') {\n  \
    \      $open_count++;\n      } else {\n        $open_count--;\n      }\n     \
    \ if ($open_count < 0) {\n        return \"No\";\n      }\n    }\n  }\n  return\
    \ ($open_count == 0) ? \"Yes\" : \"No\";\n}\n\nfunction candidate(...$args) {\n\
    \    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppo5hd1pk.php:40\n\
    Stack trace:\n#0 /tmp/tmppo5hd1pk.php(51): test()\n#1 {main}\n  thrown in /tmp/tmppo5hd1pk.php\
    \ on line 40\n"
  timestamp: 1659823541
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    // Count the '(' and ')' characters in each\
    \ string.\n    $counts = array(\n        $lst[0] => substr_count($lst[0], '(')\
    \ - substr_count($lst[0], ')'),\n        $lst[1] => substr_count($lst[1], '(')\
    \ - substr_count($lst[1], ')'),\n    );\n    // If the difference of '(' and ')'\
    \ for both strings is positive, then we\n    // can't have a good string.\n  \
    \  if ($counts[$lst[0]] > 0 && $counts[$lst[1]] > 0) {\n        return 'No';\n\
    \    }\n    // If the difference is negative, then we can't have a good string.\n\
    \    if ($counts[$lst[0]] < 0 && $counts[$lst[1]] < 0) {\n        return 'No';\n\
    \    }\n    // We can have a good string with '(' and ')' characters in either\
    \ order.\n    return 'Yes';\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2jzi1cxs.php:41\n\
    Stack trace:\n#0 /tmp/tmp2jzi1cxs.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp2jzi1cxs.php\
    \ on line 41\n"
  timestamp: 1659823541
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    if (count($lst) != 2) {\n        die(\"invalid\
    \ input\");\n    }\n    $paren_lst = array();\n    foreach ($lst as $str) {\n\
    \        if (strlen($str) % 2 != 0) {\n            return \"No\";\n        }\n\
    \        $paren_count = 0;\n        for ($i = 0; $i < strlen($str); $i++) {\n\
    \            if ($str[$i] == '(') {\n                $paren_count++;\n       \
    \     } else if ($str[$i] == ')') {\n                $paren_count--;\n       \
    \     } else {\n                die(\"invalid character\");\n            }\n \
    \           if ($paren_count < 0) {\n                return \"No\";\n        \
    \    }\n        }\n        $paren_lst[] = $paren_count;\n    }\n    return ($paren_lst[0]\
    \ == $paren_lst[1]) ? \"Yes\" : \"No\";\n}\n\necho \"Test 1: \" . match_parens(array(\"\
    ()(\", \")\")) . \"\\n\";\necho \"Test 2: \" . match_parens(array(\")\", \")\"\
    )) . \"\\n\";\necho \"Test 3: \" . match_parens(array(\"(\", \")\")) . \"\\n\"\
    ;\necho \"Test 4: \" . match_parens(array(\"(((\", \")))\")) . \"\\n\";\necho\
    \ \"Test 5: \" . match_parens(array(\"))(\", \")))\")) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Test 1: No\nTest 2: No\nTest 3: No\nTest 4: No\nTest 5: No\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpwzujgo8q.php:52\nStack trace:\n\
    #0 /tmp/tmpwzujgo8q.php(66): test()\n#1 {main}\n  thrown in /tmp/tmpwzujgo8q.php\
    \ on line 52\n"
  timestamp: 1659823541
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $l = $lst[0];\n    $r = $lst[1];\n    $lcount\
    \ = substr_count($l, '(');\n    $rcount = substr_count($r, ')');\n    if ($lcount\
    \ == $rcount) {\n        return 'Yes';\n    } else {\n        return 'No';\n \
    \   }\n}\necho match_parens(array(\"()(\", \")\")) . \"\\n\";\necho match_parens(array(\"\
    )\", \")\")) . \"\\n\";\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "No\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt8h_was4.php:34\n\
    Stack trace:\n#0 /tmp/tmpt8h_was4.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpt8h_was4.php\
    \ on line 34\n"
  timestamp: 1659823541
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = str_split($lst[0]);\n    $str2 =\
    \ str_split($lst[1]);\n    $count = 0;\n    foreach ($str1 as $char) {\n     \
    \   if ($char == \"(\") $count++;\n        else $count--;\n    }\n    foreach\
    \ ($str2 as $char) {\n        if ($char == \"(\") $count++;\n        else $count--;\n\
    \    }\n    if ($count == 0) {\n        return \"Yes\";\n    } else {\n      \
    \  return \"No\";\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk6h2rvsc.php:47\n\
    Stack trace:\n#0 /tmp/tmpk6h2rvsc.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpk6h2rvsc.php\
    \ on line 47\n"
  timestamp: 1659823541
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $s1 = $lst[0];\n    $s2 = $lst[1];\n    for\
    \ ($i = 0; $i < strlen($s1); $i++) {\n        $s = $s1 . $s2;\n        $balanced\
    \ = 1;\n        $parens = 0;\n        for ($j = 0; $j < strlen($s); $j++) {\n\
    \            if ($s[$j] == '(') {\n                $parens++;\n            } else\
    \ if ($s[$j] == ')') {\n                $parens--;\n            }\n          \
    \  if ($parens < 0) {\n                $balanced = 0;\n                break;\n\
    \            }\n        }\n        if ($balanced) {\n            return \"Yes\"\
    ;\n        }\n        $s1 = substr($s1, 1) . $s1[0];\n    }\n    return \"No\"\
    ;\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptnyrin7m.php:48\n\
    Stack trace:\n#0 /tmp/tmptnyrin7m.php(59): test()\n#1 {main}\n  thrown in /tmp/tmptnyrin7m.php\
    \ on line 48\n"
  timestamp: 1659823541
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  $str1 = str_split($lst[0]);\n  $str2 = str_split($lst[1]);\n\
    \  $stack = array();\n  $balanced = true;\n  for ($i = 0; $i < count($str1); $i++)\
    \ {\n    if ($str1[$i] == \"(\") {\n      array_push($stack, 1);\n    } else {\n\
    \      if (empty($stack)) {\n        $balanced = false;\n        break;\n    \
    \  } else {\n        array_pop($stack);\n      }\n    }\n  }\n  for ($i = 0; $i\
    \ < count($str2); $i++) {\n    if ($str2[$i] == \"(\") {\n      array_push($stack,\
    \ 1);\n    } else {\n      if (empty($stack)) {\n        $balanced = false;\n\
    \        break;\n      } else {\n        array_pop($stack);\n      }\n    }\n\
    \  }\n  if (empty($stack) && $balanced) {\n    return \"Yes\";\n  } else {\n \
    \   return \"No\";\n  }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp71pp07h3.php:58\n\
    Stack trace:\n#0 /tmp/tmp71pp07h3.php(69): test()\n#1 {main}\n  thrown in /tmp/tmp71pp07h3.php\
    \ on line 58\n"
  timestamp: 1659823541
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $first = $lst[0];\n    $second = $lst[1];\n\
    \    $first_good = false;\n    $second_good = false;\n    $good_string = true;\n\
    \    $open_count = 0;\n    $close_count = 0;\n    for ($i = 0; $i < strlen($first);\
    \ $i++) {\n        if ($first[$i] == '(') {\n            $open_count++;\n    \
    \    } else {\n            $close_count++;\n        }\n        if ($close_count\
    \ > $open_count) {\n            $good_string = false;\n        }\n    }\n    if\
    \ ($good_string && $open_count == $close_count) {\n        $first_good = true;\n\
    \    }\n    $good_string = true;\n    $open_count = 0;\n    $close_count = 0;\n\
    \    for ($i = 0; $i < strlen($second); $i++) {\n        if ($second[$i] == '(')\
    \ {\n            $open_count++;\n        } else {\n            $close_count++;\n\
    \        }\n        if ($close_count > $open_count) {\n            $good_string\
    \ = false;\n        }\n    }\n    if ($good_string && $open_count == $close_count)\
    \ {\n        $second_good = true;\n    }\n    if ($first_good && $second_good)\
    \ {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\
    echo match_parens(array(\"()(\", \")\")) . \"\\n\";\necho match_parens(array(\"\
    )\", \")\")) . \"\\n\";\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "No\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppvgq_gbp.php:65\n\
    Stack trace:\n#0 /tmp/tmppvgq_gbp.php(79): test()\n#1 {main}\n  thrown in /tmp/tmppvgq_gbp.php\
    \ on line 65\n"
  timestamp: 1659823541
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  if ($lst[0] === \"\") {\n    return is_good($lst[1])\
    \ ? \"Yes\" : \"No\";\n  } else {\n    return match_parens(array(\n      substr($lst[0],\
    \ 1),\n      $lst[1] . $lst[0][0]\n    ));\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_good() in\
    \ /tmp/tmpdfmn1h_r.php:17\nStack trace:\n#0 /tmp/tmpdfmn1h_r.php(21): match_parens(Array)\n\
    #1 /tmp/tmpdfmn1h_r.php(21): match_parens(Array)\n#2 /tmp/tmpdfmn1h_r.php(21):\
    \ match_parens(Array)\n#3 /tmp/tmpdfmn1h_r.php(27): match_parens(Array)\n#4 /tmp/tmpdfmn1h_r.php(31):\
    \ candidate(Array)\n#5 /tmp/tmpdfmn1h_r.php(45): test()\n#6 {main}\n  thrown in\
    \ /tmp/tmpdfmn1h_r.php on line 17\n"
  timestamp: 1659823541
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $open = 0;\n    $close = 0;\n    $string_one\
    \ = $lst[0];\n    $string_two = $lst[1];\n    for ($i = 0; $i < strlen($string_one);\
    \ $i++) {\n        if ($string_one[$i] == '(') {\n            $open++;\n     \
    \   } else {\n            $close++;\n        }\n    }\n    if ($open == $close)\
    \ {\n        return \"Yes\";\n    }\n    for ($i = 0; $i < strlen($string_two);\
    \ $i++) {\n        if ($string_two[$i] == '(') {\n            $open++;\n     \
    \   } else {\n            $close++;\n        }\n    }\n    if ($open == $close)\
    \ {\n        return \"Yes\";\n    }\n    return \"No\";\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk00sjx6l.php:52\n\
    Stack trace:\n#0 /tmp/tmpk00sjx6l.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpk00sjx6l.php\
    \ on line 52\n"
  timestamp: 1659823541
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  $new_string = $lst[0] . $lst[1];\n  return\
    \ check_balanced($new_string) ? \"Yes\" : \"No\";\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function check_balanced()\
    \ in /tmp/tmppxwo36d6.php:17\nStack trace:\n#0 /tmp/tmppxwo36d6.php(21): match_parens(Array)\n\
    #1 /tmp/tmppxwo36d6.php(25): candidate(Array)\n#2 /tmp/tmppxwo36d6.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmppxwo36d6.php on line 17\n"
  timestamp: 1659823541
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $left = $lst[0];\n    $right = $lst[1];\n\
    \    $left_count = substr_count($left, '(');\n    $right_count = substr_count($right,\
    \ ')');\n    return (($left_count === $right_count) ? 'Yes' : 'No');\n}\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe1ghdpwg.php:27\n\
    Stack trace:\n#0 /tmp/tmpe1ghdpwg.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpe1ghdpwg.php\
    \ on line 27\n"
  timestamp: 1659823541
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $s1 = $lst[0];\n    $s2 = $lst[1];\n    $s\
    \ = $s1 . $s2;\n    $length = strlen($s);\n    $diff = 0;\n    for ($i = 0; $i\
    \ < $length; $i++) {\n        if ($s[$i] == '(')\n            $diff++;\n     \
    \   elseif ($s[$i] == ')')\n            $diff--;\n        if ($diff < 0)\n   \
    \         return \"No\";\n    }\n    if ($diff == 0)\n        return \"Yes\";\n\
    \    else\n        return \"No\";\n}\n\nfunction candidate(...$args) {\n    return\
    \ match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpez5bthzi.php:43\n\
    Stack trace:\n#0 /tmp/tmpez5bthzi.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpez5bthzi.php\
    \ on line 43\n"
  timestamp: 1659823541
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  $l1 = trim($lst[0]);\n  $l2 = trim($lst[1]);\n\
    \  $cnt = 0;\n  for ($i = 0; $i < strlen($l1); $i++) {\n    if ($l1[$i] == '(')\
    \ {\n      $cnt++;\n    } else {\n      $cnt--;\n    }\n    if ($cnt < 0) {\n\
    \      return \"No\";\n    }\n  }\n  for ($i = 0; $i < strlen($l2); $i++) {\n\
    \    if ($l2[$i] == '(') {\n      $cnt++;\n    } else {\n      $cnt--;\n    }\n\
    \    if ($cnt < 0) {\n      return \"No\";\n    }\n  }\n  if ($cnt != 0) {\n \
    \   return \"No\";\n  }\n  return \"Yes\";\n}\nfunction candidate(...$args) {\n\
    \    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk8kn3890.php:52\n\
    Stack trace:\n#0 /tmp/tmpk8kn3890.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpk8kn3890.php\
    \ on line 52\n"
  timestamp: 1659823541
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  if (strlen($lst[0]) === 0 && strlen($lst[1])\
    \ === 0) {\n    return \"Yes\";\n  }\n  if (strlen($lst[0]) === 0) {\n    if (strpos($lst[1],\
    \ '(') === false) {\n      return \"Yes\";\n    } else {\n      return \"No\"\
    ;\n    }\n  }\n  if (strlen($lst[1]) === 0) {\n    if (strpos($lst[0], ')') ===\
    \ false) {\n      return \"Yes\";\n    } else {\n      return \"No\";\n    }\n\
    \  }\n  if ($lst[0][0] === '(' && $lst[1][0] === ')') {\n    return match_parens(array(substr($lst[0],\
    \ 1), substr($lst[1], 1)));\n  }\n  if ($lst[0][0] === '(') {\n    return match_parens(array(substr($lst[0],\
    \ 1), $lst[1]));\n  }\n  if ($lst[1][0] === ')') {\n    return match_parens(array($lst[0],\
    \ substr($lst[1], 1)));\n  }\n  return \"No\";\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq5lmdsad.php:50\n\
    Stack trace:\n#0 /tmp/tmpq5lmdsad.php(64): test()\n#1 {main}\n  thrown in /tmp/tmpq5lmdsad.php\
    \ on line 50\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  $good = \"Yes\";\n  $bad = \"No\";\n  $str1\
    \ = $lst[0];\n  $str2 = $lst[1];\n  $str1_len = strlen($str1);\n  $str2_len =\
    \ strlen($str2);\n  $new_str = $str1 . $str2;\n  $new_str_len = strlen($new_str);\n\
    \  $opened = 0;\n  for ($i = 0; $i < $new_str_len; $i++) {\n    if ($new_str[$i]\
    \ == \"(\") {\n      $opened += 1;\n    } else {\n      $opened -= 1;\n    }\n\
    \    if ($opened < 0) {\n      return $bad;\n    }\n  }\n  if ($opened == 0) {\n\
    \    return $good;\n  } else {\n    return $bad;\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8aqryjnv.php:50\n\
    Stack trace:\n#0 /tmp/tmp8aqryjnv.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp8aqryjnv.php\
    \ on line 50\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $left = \"(\";\n    $right = \")\";\n   \
    \ $first = $lst[0];\n    $second = $lst[1];\n    $first_count = count_chars($first,\
    \ 1);\n    $second_count = count_chars($second, 1);\n    $left_first = $first_count[ord($left)];\n\
    \    $right_first = $first_count[ord($right)];\n    $left_second = $second_count[ord($left)];\n\
    \    $right_second = $second_count[ord($right)];\n    if (($left_first == $right_first)\
    \ && ($left_second == $right_second)) {\n        return \"Yes\";\n    } elseif\
    \ (($left_first == $right_first) && ($left_second != $right_second)) {\n     \
    \   if ($left_second > $right_second) {\n            $odd = $left_second - $right_second;\n\
    \            $nth = (count($first) - $odd) + 1;\n            if ($first[count($first)\
    \ - $nth] == $left) {\n                return \"Yes\";\n            } else {\n\
    \                return \"No\";\n            }\n        } else {\n           \
    \ $odd = $right_second - $left_second;\n            $nth = (count($first) - $odd)\
    \ + 1;\n            if ($first[count($first) - $nth] == $right) {\n          \
    \      return \"Yes\";\n            } else {\n                return \"No\";\n\
    \            }\n        }\n    } elseif (($left_first != $right_first) && ($left_second\
    \ == $right_second)) {\n        if ($left_first > $right_first) {\n          \
    \  $odd = $left_first - $right_first;\n            $nth = (count($second) - $odd)\
    \ + 1;\n            if ($second[count($second) - $nth] == $left) {\n         \
    \       return \"Yes\";\n            } else {\n                return \"No\";\n\
    \            }\n        } else {\n            $odd = $right_first - $left_first;\n\
    \            $nth = (count($second)\nfunction candidate(...$args) {\n    return\
    \ match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmprag_pctk.php
    on line 58

    '
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $lhs = $lst[0];\n    $rhs = $lst[1];\n  \
    \  $combo = $lhs . $rhs;\n    for ($i = 0; $i < strlen($combo); $i++) {\n    \
    \    $sub = substr($combo, $i);\n        if (is_good($sub)) {\n            return\
    \ \"Yes\";\n        }\n    }\n    return \"No\";\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_good() in\
    \ /tmp/tmpqt3jd408.php:21\nStack trace:\n#0 /tmp/tmpqt3jd408.php(29): match_parens(Array)\n\
    #1 /tmp/tmpqt3jd408.php(33): candidate(Array)\n#2 /tmp/tmpqt3jd408.php(47): test()\n\
    #3 {main}\n  thrown in /tmp/tmpqt3jd408.php on line 21\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  $str1 = $lst[0];\n  $str2 = $lst[1];\n  $str1_char_count\
    \ = strlen($str1);\n  $str2_char_count = strlen($str2);\n  if ($str1_char_count\
    \ == $str2_char_count) {\n    // One string has all '(' and the other has all\
    \ ')'\n    // Both strings have equal '(' and ')'\n    if ( ($str1_char_count\
    \ == substr_count($str1, '('))\n        && ($str2_char_count == substr_count($str2,\
    \ ')')) ) {\n      return \"Yes\";\n    }\n    else if ( ($str1_char_count ==\
    \ substr_count($str1, ')'))\n        && ($str2_char_count == substr_count($str2,\
    \ '(')) ) {\n      return \"Yes\";\n    }\n    else {\n      return \"No\";\n\
    \    }\n  }\n  else {\n    return \"No\";\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxuzmp0n7.php:45\n\
    Stack trace:\n#0 /tmp/tmpxuzmp0n7.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpxuzmp0n7.php\
    \ on line 45\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    if (par_check($str1) && par_check($str2)) {\n        return \"Yes\";\n  \
    \  } else {\n        return \"No\";\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function par_check() in\
    \ /tmp/tmp0ai4hku_.php:18\nStack trace:\n#0 /tmp/tmp0ai4hku_.php(26): match_parens(Array)\n\
    #1 /tmp/tmp0ai4hku_.php(30): candidate(Array)\n#2 /tmp/tmp0ai4hku_.php(44): test()\n\
    #3 {main}\n  thrown in /tmp/tmp0ai4hku_.php on line 18\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  $string1 = $lst[0];\n  $string2 = $lst[1];\n\
    \  $stack1 = new SplStack();\n  $stack2 = new SplStack();\n  $i = 0;\n  while\
    \ ($i < strlen($string1)) {\n    if ($string1[$i] == \"(\") {\n      $stack1->push($string1[$i]);\n\
    \    } else {\n      if ($stack1->isEmpty()) {\n        return \"No\";\n     \
    \ } else {\n        $stack1->pop();\n      }\n    }\n    $i++;\n  }\n  $i = 0;\n\
    \  while ($i < strlen($string2)) {\n    if ($string2[$i] == \"(\") {\n      $stack2->push($string2[$i]);\n\
    \    } else {\n      if ($stack2->isEmpty()) {\n        return \"No\";\n     \
    \ } else {\n        $stack2->pop();\n      }\n    }\n    $i++;\n  }\n  $stack\
    \ = new SplStack();\n  while (!$stack1->isEmpty()) {\n    $stack->push($stack1->pop());\n\
    \  }\n  while (!$stack2->isEmpty()) {\n    $stack->push($stack2->pop());\n  }\n\
    \  if ($stack->isEmpty()) {\n    return \"Yes\";\n  } else {\n    return \"No\"\
    ;\n  }\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp62hkgzlg.php:65\n\
    Stack trace:\n#0 /tmp/tmp62hkgzlg.php(79): test()\n#1 {main}\n  thrown in /tmp/tmp62hkgzlg.php\
    \ on line 65\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  if (count($lst) != 2) {\n    return 'Error:\
    \ $lst must have 2 strings';\n  }\n  $str1 = $lst[0];\n  $str2 = $lst[1];\n  //\
    \ Count how many parens we have in each string.\n  $count1 = count(explode('(',\
    \ $str1)) - count(explode(')', $str1));\n  $count2 = count(explode('(', $str2))\
    \ - count(explode(')', $str2));\n  // It's only possible if one string has 2 more\
    \ open parens than\n  // close parens, and the other string has 2 more close parens\
    \ than\n  // open parens.\n  if (($count1 == 2 && $count2 == -2) || ($count1 ==\
    \ -2 && $count2 == 2)) {\n    return 'Yes';\n  }\n  return 'No';\n}\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8k0bouax.php:37\n\
    Stack trace:\n#0 /tmp/tmp8k0bouax.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp8k0bouax.php\
    \ on line 37\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    if (empty($str1) && empty($str2)) {\n        return \"Yes\";\n    }\n   \
    \ if (count($str1) == 1 && count($str2) == 1) {\n        if ($str1[0] == \"(\"\
    \ && $str2[0] == \")\") {\n            return \"Yes\";\n        } else {\n   \
    \         return \"No\";\n        }\n    }\n    if (count($str1) == 1) {\n   \
    \     return match_parens(array(\"\", $str2[1]));\n    }\n    if (count($str2)\
    \ == 1) {\n        return match_parens(array($str1[1], \"\"));\n    }\n    if\
    \ ($str1[0] == \"(\" && $str2[0] == \")\") {\n        return match_parens(array($str1[1],\
    \ $str2[1]));\n    }\n    return \"No\";\n}\n\nfunction candidate(...$args) {\n\
    \    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: count(): Argument #1 ($value) must be\
    \ of type Countable|array, string given in /tmp/tmpyx6eee0j.php:21\nStack trace:\n\
    #0 /tmp/tmpyx6eee0j.php(41): match_parens(Array)\n#1 /tmp/tmpyx6eee0j.php(45):\
    \ candidate(Array)\n#2 /tmp/tmpyx6eee0j.php(59): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpyx6eee0j.php on line 21\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n\t$str1 = $lst[0];\n\t$str2 = $lst[1];\n\t$str1_open\
    \ = substr_count($str1, '(');\n\t$str1_close = substr_count($str1, ')');\n\t$str2_open\
    \ = substr_count($str2, '(');\n\t$str2_close = substr_count($str2, ')');\n\tif\
    \ (($str1_open == $str1_close) && ($str2_open == $str2_close)) {\n\t\treturn \"\
    Yes\";\n\t} else {\n\t\treturn \"No\";\n\t}\n}\necho match_parens(array(\"()(\"\
    , \")\")) . \"\\n\";\necho match_parens(array(\")\", \")\")) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "No\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5s2rc89b.php:35\n\
    Stack trace:\n#0 /tmp/tmp5s2rc89b.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp5s2rc89b.php\
    \ on line 35\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str_1 = $lst[0];\n    $str_2 = $lst[1];\n\
    \    $open = array(\"(\");\n    $close = array(\")\");\n    $open_count = 0;\n\
    \    $close_count = 0;\n    $result = \"\";\n    for ($i = 0; $i < strlen($str_1);\
    \ $i++) {\n        if (in_array($str_1[$i], $open)) {\n            $open_count++;\n\
    \        } else if (in_array($str_1[$i], $close)) {\n            $close_count++;\n\
    \        }\n    }\n    if ($open_count < $close_count) {\n        $result = \"\
    Yes\";\n    } else {\n        $result = \"No\";\n    }\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1e9352yd.php:42\n\
    Stack trace:\n#0 /tmp/tmp1e9352yd.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp1e9352yd.php\
    \ on line 42\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n\t$arr = array();\n\tfor ($i = 0; $i < strlen($lst[0]);\
    \ $i++) {\n\t\tif ($lst[0][$i] == '(') {\n\t\t\tarray_push($arr, '(');\n\t\t}\
    \ else {\n\t\t\tif (empty($arr)) {\n\t\t\t\treturn \"No\";\n\t\t\t} else {\n\t\
    \t\t\tarray_pop($arr);\n\t\t\t}\n\t\t}\n\t}\n\tfor ($i = 0; $i < strlen($lst[1]);\
    \ $i++) {\n\t\tif ($lst[1][$i] == '(') {\n\t\t\tarray_push($arr, '(');\n\t\t}\
    \ else {\n\t\t\tif (empty($arr)) {\n\t\t\t\treturn \"No\";\n\t\t\t} else {\n\t\
    \t\t\tarray_pop($arr);\n\t\t\t}\n\t\t}\n\t}\n\tif (empty($arr)) {\n\t\treturn\
    \ \"Yes\";\n\t} else {\n\t\treturn \"No\";\n\t}\n}\n$test = array(\"(())()\",\
    \ \"())\");\necho match_parens($test);\nfunction candidate(...$args) {\n    return\
    \ match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "No\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx0by_feh.php:55\n\
    Stack trace:\n#0 /tmp/tmpx0by_feh.php(66): test()\n#1 {main}\n  thrown in /tmp/tmpx0by_feh.php\
    \ on line 55\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $s1 = str_split($lst[0]);\n    $s2 = str_split($lst[1]);\n\
    \    $l = count($s1);\n    $c = 0;\n    for ($i = 0; $i < $l; $i++) {\n      \
    \  if ($s1[$i] == \"(\") {\n            $c++;\n        } else {\n            $c--;\n\
    \        }\n        if ($c < 0) {\n            return \"No\";\n        }\n   \
    \ }\n    $l = count($s2);\n    for ($i = 0; $i < $l; $i++) {\n        if ($s2[$i]\
    \ == \"(\") {\n            $c++;\n        } else {\n            $c--;\n      \
    \  }\n        if ($c < 0) {\n            return \"No\";\n        }\n    }\n  \
    \  return $c == 0 ? \"Yes\" : \"No\";\n}\nfunction candidate(...$args) {\n   \
    \ return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp45fllx0h.php:51\n\
    Stack trace:\n#0 /tmp/tmp45fllx0h.php(62): test()\n#1 {main}\n  thrown in /tmp/tmp45fllx0h.php\
    \ on line 51\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  // Save parentheses count for each string\n\
    \  $s1_count = 0;\n  $s2_count = 0;\n  // Loop through each char in first string\n\
    \  for ($i = 0; $i < strlen($lst[0]); $i++) {\n    if ($lst[0][$i] == '(') {\n\
    \      $s1_count++;\n    } else {\n      $s1_count--;\n    }\n    // If parentheses\
    \ are unbalanced, return 'No'\n    if ($s1_count < 0) {\n      return 'No';\n\
    \    }\n  }\n  // Loop through each char in second string\n  for ($i = 0; $i <\
    \ strlen($lst[1]); $i++) {\n    if ($lst[1][$i] == '(') {\n      $s2_count++;\n\
    \    } else {\n      $s2_count--;\n    }\n    // If parentheses are unbalanced,\
    \ return 'No'\n    if ($s2_count < 0) {\n      return 'No';\n    }\n  }\n  //\
    \ If all parentheses are closed, return 'Yes'\n  if ($s1_count == 0 && $s2_count\
    \ == 0) {\n    return 'Yes';\n  }\n  // If parentheses are unbalanced, return\
    \ 'No'\n  if ($s1_count < 0 || $s2_count < 0) {\n    return 'No';\n  }\n  // If\
    \ more parentheses are opened than closed in both strings, return 'Yes'\n  if\
    \ ($s1_count > 0 && $s2_count > 0) {\n    return 'Yes';\n  }\n  // If more parentheses\
    \ are opened than closed in either strings, return 'No'\n  return 'No';\n}\n\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf0s17701.php:64\n\
    Stack trace:\n#0 /tmp/tmpf0s17701.php(78): test()\n#1 {main}\n  thrown in /tmp/tmpf0s17701.php\
    \ on line 64\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $word1 = $lst[0];\n    $word2 = $lst[1];\n\
    \    $arr = [];\n    $brackets = 0;\n    for ($i = 0; $i < strlen($word1); $i++)\
    \ {\n        if ($word1[$i] == '(') {\n            $brackets++;\n        } else\
    \ {\n            $brackets--;\n        }\n        if ($brackets < 0) {\n     \
    \       return \"No\";\n        }\n    }\n    for ($i = 0; $i < strlen($word2);\
    \ $i++) {\n        if ($word2[$i] == '(') {\n            $brackets++;\n      \
    \  } else {\n            $brackets--;\n        }\n        if ($brackets < 0) {\n\
    \            return \"No\";\n        }\n    }\n    if ($brackets == 0) {\n   \
    \     return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\necho match_parens(array(\"\
    ()(\", \")\")) . \"\\n\";\necho match_parens(array(\")\", \")\")) . \"\\n\";\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Yes\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvp5tx9b9.php:56\n\
    Stack trace:\n#0 /tmp/tmpvp5tx9b9.php(67): test()\n#1 {main}\n  thrown in /tmp/tmpvp5tx9b9.php\
    \ on line 56\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $stack = array();\n    for ($i = 0; $i <\
    \ strlen($lst[0]); $i++) {\n        if ($lst[0][$i] == '(') {\n            array_push($stack,\
    \ '(');\n        } else {\n            if (count($stack) == 0) {\n           \
    \     return \"No\";\n            } else {\n                array_pop($stack);\n\
    \            }\n        }\n    }\n    for ($i = 0; $i < strlen($lst[1]); $i++)\
    \ {\n        if ($lst[1][$i] == '(') {\n            array_push($stack, '(');\n\
    \        } else {\n            if (count($stack) == 0) {\n                return\
    \ \"No\";\n            } else {\n                array_pop($stack);\n        \
    \    }\n        }\n    }\n    if (count($stack) == 0) {\n        return \"Yes\"\
    ;\n    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyhn1ei6o.php:53\n\
    Stack trace:\n#0 /tmp/tmpyhn1ei6o.php(64): test()\n#1 {main}\n  thrown in /tmp/tmpyhn1ei6o.php\
    \ on line 53\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $map = [\n        \"(\" => \")\",\n        \")\" => \"(\"\n    ];\n    $len1\
    \ = strlen($str1);\n    $len2 = strlen($str2);\n    for ($i = 0; $i < $len1; $i++)\
    \ {\n        for ($j = 0; $j < $len2; $j++) {\n            $s = $str1[$i] . $str2[$j];\n\
    \            $s = check($s);\n            if ($s == \"\") {\n                return\
    \ \"Yes\";\n            }\n        }\n    }\n    return \"No\";\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function check() in /tmp/tmpz_668uzi.php:27\n\
    Stack trace:\n#0 /tmp/tmpz_668uzi.php(36): match_parens(Array)\n#1 /tmp/tmpz_668uzi.php(40):\
    \ candidate(Array)\n#2 /tmp/tmpz_668uzi.php(54): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpz_668uzi.php on line 27\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  $str1 = $lst[0];\n  $str2 = $lst[1];\n  $str1_length\
    \ = strlen($str1);\n  $str2_length = strlen($str2);\n  $parens = array();\n  $i\
    \ = 0;\n  while ($i < $str1_length) {\n    if ($str1[$i] == '(') {\n      array_push($parens,\
    \ '(');\n    } else {\n      if (count($parens) == 0) {\n        return \"No\"\
    ;\n      } else {\n        array_pop($parens);\n      }\n    }\n    $i += 1;\n\
    \  }\n  $i = 0;\n  while ($i < $str2_length) {\n    if ($str2[$i] == '(') {\n\
    \      array_push($parens, '(');\n    } else {\n      if (count($parens) == 0)\
    \ {\n        return \"No\";\n      } else {\n        array_pop($parens);\n   \
    \   }\n    }\n    $i += 1;\n  }\n  if (count($parens) > 0) {\n    return \"No\"\
    ;\n  } else {\n    return \"Yes\";\n  }\n}\nfunction candidate(...$args) {\n \
    \   return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptez3joe7.php:61\n\
    Stack trace:\n#0 /tmp/tmptez3joe7.php(72): test()\n#1 {main}\n  thrown in /tmp/tmptez3joe7.php\
    \ on line 61\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  $s1 = $lst[0];\n  $s2 = $lst[1];\n  $parens\
    \ = [];\n  $i = 0;\n  $j = 0;\n  $s = $s1 . $s2;\n  for ($i = 0; $i < strlen($s);\
    \ $i++) {\n    $c = $s[$i];\n    if ($c == '(') {\n      array_push($parens, '(');\n\
    \    } else {\n      if (count($parens) == 0) {\n        return \"No\";\n    \
    \  } else {\n        array_pop($parens);\n      }\n    }\n  }\n  return count($parens)\
    \ == 0 ? \"Yes\" : \"No\";\n}\necho match_parens(array(\"()(\", \")\")) . \"\\\
    n\";\necho match_parens(array(\")\", \")\")) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Yes\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaqq3g9bk.php:46\n\
    Stack trace:\n#0 /tmp/tmpaqq3g9bk.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpaqq3g9bk.php\
    \ on line 46\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $parens = array(\n        '(' => ')',\n        ')' => '('\n    );\n    $valid_str\
    \ = $str1 . $str2;\n    $stack = new SplStack();\n    foreach(str_split($valid_str)\
    \ as $char) {\n        if (count($stack) === 0) {\n            $stack->push($char);\n\
    \        } else {\n            $peek = $stack->top();\n            if ($parens[$peek]\
    \ === $char) {\n                $stack->pop();\n            } else {\n       \
    \         $stack->push($char);\n            }\n        }\n    }\n    return count($stack)\
    \ === 0 ? 'Yes' : 'No';\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwxnnb1t_.php:53\n\
    Stack trace:\n#0 /tmp/tmpwxnnb1t_.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpwxnnb1t_.php\
    \ on line 53\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $s = $lst[0] . $lst[1];\n    $c = 0;\n  \
    \  for ($i = 0; $i < strlen($s); $i++) {\n        if ($s[$i] == '(') {\n     \
    \       $c++;\n        } else {\n            $c--;\n        }\n        if ($c\
    \ < 0) {\n            return \"No\";\n        }\n    }\n    return $c == 0 ? \"\
    Yes\" : \"No\";\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj5q59yrx.php:38\n\
    Stack trace:\n#0 /tmp/tmpj5q59yrx.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpj5q59yrx.php\
    \ on line 38\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $lparen = \"(\";\n    $rparen = \")\";\n\
    \    $lst1 = $lst[0];\n    $lst2 = $lst[1];\n    $lst1_len = strlen($lst1);\n\
    \    $lst2_len = strlen($lst2);\n    $lparen_count = 0;\n    $rparen_count = 0;\n\
    \    $lparen_count_lst1 = 0;\n    $rparen_count_lst1 = 0;\n    $lparen_count_lst2\
    \ = 0;\n    $rparen_count_lst2 = 0;\n    for ($i = 0; $i < $lst1_len; $i++) {\n\
    \        if ($lst1[$i] == $lparen) {\n            $lparen_count_lst1 += 1;\n \
    \       } else {\n            $rparen_count_lst1 += 1;\n        }\n    }\n   \
    \ for ($i = 0; $i < $lst2_len; $i++) {\n        if ($lst2[$i] == $lparen) {\n\
    \            $lparen_count_lst2 += 1;\n        } else {\n            $rparen_count_lst2\
    \ += 1;\n        }\n    }\n    $lparen_count = $lparen_count_lst1 + $lparen_count_lst2;\n\
    \    $rparen_count = $rparen_count_lst1 + $rparen_count_lst2;\n    if ($lparen_count\
    \ == $rparen_count) {\n        return \"Yes\";\n    } else {\n        return \"\
    No\";\n    }\n}\necho match_parens(array(\"()(\", \")\")) . \"\\n\";\necho match_parens(array(\"\
    )\", \")\")) . \"\\n\";\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Yes\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkamxgrrv.php:66\n\
    Stack trace:\n#0 /tmp/tmpkamxgrrv.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpkamxgrrv.php\
    \ on line 66\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $leftCount = 0;\n    $rightCount = 0;\n \
    \   foreach($lst as $item) {\n        for($i = 0; $i < strlen($item); $i++) {\n\
    \            if($item[$i] == '(') {\n                $leftCount++;\n         \
    \   } else {\n                $rightCount++;\n            }\n        }\n    }\n\
    \    return $leftCount == $rightCount ? \"Yes\" : \"No\";\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpksznltb9.php:43\n\
    Stack trace:\n#0 /tmp/tmpksznltb9.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpksznltb9.php\
    \ on line 43\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $good = true;\n    if(substr_count($str1, \"(\") == substr_count($str1, \"\
    )\")){\n        $balanced = check_balance($str1);\n        if($balanced == false){\n\
    \            $good = false;\n        }\n    } else {\n        $good = false;\n\
    \    }\n    if(substr_count($str2, \"(\") == substr_count($str2, \")\")){\n  \
    \      $balanced = check_balance($str2);\n        if($balanced == false){\n  \
    \          $good = false;\n        }\n    } else {\n        $good = false;\n \
    \   }\n    if(substr_count($str1, \"(\")+substr_count($str2, \"(\") == substr_count($str1,\
    \ \")\")+substr_count($str2, \")\")){\n        $str = $str1.$str2;\n        $balanced\
    \ = check_balance($str);\n        if($balanced == false){\n            $good =\
    \ false;\n        }\n    } else {\n        $good = false;\n    }\n    if($good\
    \ == true){\n        return \"Yes\";\n    } else {\n        return \"No\";\n \
    \   }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function check_balance()\
    \ in /tmp/tmpb05p88bq.php:37\nStack trace:\n#0 /tmp/tmpb05p88bq.php(51): match_parens(Array)\n\
    #1 /tmp/tmpb05p88bq.php(55): candidate(Array)\n#2 /tmp/tmpb05p88bq.php(69): test()\n\
    #3 {main}\n  thrown in /tmp/tmpb05p88bq.php on line 37\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  $l = $lst[0];\n  $r = $lst[1];\n  $countL =\
    \ 0;\n  $countR = 0;\n  for ($i = 0; $i < strlen($l); $i++) {\n    if ($l[$i]\
    \ == '(') {\n      $countL++;\n    } else if ($l[$i] == ')') {\n      $countL--;\n\
    \    }\n  }\n  for ($i = 0; $i < strlen($r); $i++) {\n    if ($r[$i] == '(') {\n\
    \      $countR++;\n    } else if ($r[$i] == ')') {\n      $countR--;\n    }\n\
    \  }\n  if ($countL < 0 && $countR > 0) {\n    if ($countL <= $countR) {\n   \
    \   return \"Yes\";\n    } else {\n      return \"No\";\n    }\n  } else if ($countL\
    \ < 0 && $countR < 0) {\n    if ($countL <= $countR) {\n      return \"Yes\";\n\
    \    } else {\n      return \"No\";\n    }\n  } else if ($countL > 0 && $countR\
    \ > 0) {\n    if ($countL >= $countR) {\n      return \"Yes\";\n    } else {\n\
    \      return \"No\";\n    }\n  } else if ($countL > 0 && $countR < 0) {\n   \
    \ if ($countL >= $countR) {\n      return \"Yes\";\n    } else {\n      return\
    \ \"No\";\n    }\n  } else if ($countL == 0 && $countR == 0) {\n    return \"\
    Yes\";\n  } else {\n    return \"No\";\n  }\n}\necho match_parens(array(\"()(\"\
    , \")\")) . \"\\n\";\necho match_parens(array(\")\", \")\")) . \"\\n\";\necho\
    \ match_parens(array(\"()(\", \")(()\")) . \"\\n\";\necho match_parens(array(\"\
    (())(\", \")(()\")) . \"\\n\";\necho match_parens(array(\"(()(\", \")))\")) .\
    \ \"\\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected double-quoted string ")) !== ", expecting
    "," or ";" in /tmp/tmpy_chkb5e.php on line 74

    '
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $lhs = $lst[0];\n    $rhs = $lst[1];\n  \
    \  $matchCount = 0;\n    for ($i = 0; $i < strlen($lhs); $i++) {\n        if ($lhs[$i]\
    \ == '(') $matchCount++;\n        else $matchCount--;\n    }\n    for ($i = 0;\
    \ $i < strlen($rhs); $i++) {\n        if ($rhs[$i] == '(') $matchCount++;\n  \
    \      else $matchCount--;\n    }\n    return ($matchCount == 0) ? \"Yes\" : \"\
    No\";\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7e7vs6xf.php:43\n\
    Stack trace:\n#0 /tmp/tmp7e7vs6xf.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp7e7vs6xf.php\
    \ on line 43\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    list($s1, $s2) = $lst;\n    $stack = array();\n\
    \    $seen = 0;\n    for ($i = 0; $i < strlen($s1); $i++) {\n        $c = $s1[$i];\n\
    \        if ($c == '(') {\n            $stack[] = $c;\n        } else {\n    \
    \        if (count($stack) == 0) {\n                $seen++;\n            } else\
    \ {\n                array_pop($stack);\n            }\n        }\n    }\n   \
    \ for ($i = 0; $i < strlen($s2); $i++) {\n        $c = $s2[$i];\n        if ($c\
    \ == '(') {\n            $stack[] = $c;\n        } else {\n            if (count($stack)\
    \ == 0) {\n                $seen++;\n            } else {\n                array_pop($stack);\n\
    \            }\n        }\n    }\n    if ($seen % 2 == 0) {\n        return 'Yes';\n\
    \    } else {\n        return 'No';\n    }\n}\nfunction candidate(...$args) {\n\
    \    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfawporcs.php:55\n\
    Stack trace:\n#0 /tmp/tmpfawporcs.php(68): test()\n#1 {main}\n  thrown in /tmp/tmpfawporcs.php\
    \ on line 55\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  $str1 = $lst[0];\n  $str2 = $lst[1];\n  //\
    \ Your code here.\n  $str = $str1 . $str2;\n  if(strlen($str) % 2 == 1) {\n  \
    \  return \"No\";\n  }\n  $stack = [];\n  for($i = 0; $i < strlen($str); $i++)\
    \ {\n    if($str[$i] == \"(\") {\n      array_push($stack, 1);\n    } else {\n\
    \      if(count($stack) == 0) {\n        return \"No\";\n      }\n      array_pop($stack);\n\
    \    }\n  }\n  if(count($stack) == 0) {\n    return \"Yes\";\n  }\n  return \"\
    No\";\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9kck4brb.php:47\n\
    Stack trace:\n#0 /tmp/tmp9kck4brb.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp9kck4brb.php\
    \ on line 47\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  $left = 0;\n  $right = 0;\n  $left_stack =\
    \ [];\n  $right_stack = [];\n  $open_paren = '(';\n  $close_paren = ')';\n  foreach\
    \ ($lst as $str) {\n    $parens = str_split($str);\n    foreach ($parens as $paren)\
    \ {\n      if ($paren === $open_paren) {\n        array_push($left_stack, $paren);\n\
    \        $left++;\n      } else {\n        array_push($right_stack, $paren);\n\
    \        $right++;\n      }\n    }\n  }\n  if ($left === $right) {\n    return\
    \ 'Yes';\n  } else {\n    return 'No';\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpercfac_3.php:55\n\
    Stack trace:\n#0 /tmp/tmpercfac_3.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpercfac_3.php\
    \ on line 55\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $string1 = $lst[0];\n    $string2 = $lst[1];\n\
    \    $balance = 0;\n    for ($i = 0; $i < strlen($string1); $i++) {\n        if\
    \ ($string1[$i] == \"(\") {\n            $balance++;\n        } else {\n     \
    \       $balance--;\n        }\n        if ($balance < 0) {\n            return\
    \ \"No\";\n        }\n    }\n    $balance = 0;\n    for ($i = 0; $i < strlen($string2);\
    \ $i++) {\n        if ($string2[$i] == \"(\") {\n            $balance++;\n   \
    \     } else {\n            $balance--;\n        }\n        if ($balance < 0)\
    \ {\n            return \"No\";\n        }\n    }\n    return \"Yes\";\n}\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnhq2rxbk.php:47\n\
    Stack trace:\n#0 /tmp/tmpnhq2rxbk.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpnhq2rxbk.php\
    \ on line 47\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $new_lst = array();\n    foreach ($lst as\
    \ $item) {\n        $new_lst[] = array('parens' => $item, 'balance' => 0);\n \
    \   }\n    for ($i = 0; $i < strlen($new_lst[0]['parens']); $i++) {\n        for\
    \ ($j = 0; $j < strlen($new_lst[1]['parens']); $j++) {\n            $new_lst[0]['balance']\
    \ = $new_lst[0]['parens'][$i] == '(' ? 1 : -1;\n            $new_lst[1]['balance']\
    \ = $new_lst[1]['parens'][$j] == '(' ? 1 : -1;\n            if ($new_lst[0]['balance']\
    \ + $new_lst[1]['balance'] == 0) {\n                return 'Yes';\n          \
    \  }\n        }\n    }\n    return 'No';\n}\n\nfunction candidate(...$args) {\n\
    \    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsehtp9eh.php:39\n\
    Stack trace:\n#0 /tmp/tmpsehtp9eh.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpsehtp9eh.php\
    \ on line 39\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $string1 = $lst[0];\n    $string2 = $lst[1];\n\
    \    $string = $string1 . $string2;\n    // $string = \"(())()\";\n    $openCount\
    \ = 0;\n    $closeCount = 0;\n    for ($i = 0; $i < strlen($string); $i++) {\n\
    \        if ($string[$i] == \"(\") {\n            $openCount++;\n        } else\
    \ {\n            $closeCount++;\n        }\n        if ($closeCount > $openCount)\
    \ {\n            return \"No\";\n        }\n    }\n    if ($openCount == $closeCount)\
    \ {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\
    $lst = [\")\", \")\"];\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1epqciwx.php:47\n\
    Stack trace:\n#0 /tmp/tmp1epqciwx.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp1epqciwx.php\
    \ on line 47\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  $str1 = $lst[0];\n  $str2 = $lst[1];\n  $num_open\
    \ = 0;\n  for ($i = 0; $i < strlen($str1); $i++) {\n    if ($str1[$i] == '(')\
    \ {\n      $num_open++;\n    } else {\n      $num_open--;\n    }\n  }\n  for ($i\
    \ = 0; $i < strlen($str2); $i++) {\n    if ($str2[$i] == '(') {\n      $num_open++;\n\
    \    } else {\n      $num_open--;\n    }\n  }\n  if ($num_open == 0) {\n    return\
    \ \"Yes\";\n  } else {\n    return \"No\";\n  }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6cl9i1d7.php:53\n\
    Stack trace:\n#0 /tmp/tmp6cl9i1d7.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp6cl9i1d7.php\
    \ on line 53\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $output = [];\n    $open = 0;\n    $close\
    \ = 0;\n    $array1 = str_split($lst[0]);\n    $array2 = str_split($lst[1]);\n\
    \    foreach ($array1 as $key => $value) {\n        if ($value == '(') {\n   \
    \         $open++;\n        } else {\n            $close++;\n        }\n    }\n\
    \    foreach ($array2 as $key => $value) {\n        if ($value == '(') {\n   \
    \         $open++;\n        } else {\n            $close++;\n        }\n    }\n\
    \    if ($open == $close) {\n        return \"Yes\";\n    } else {\n        return\
    \ \"No\";\n    }\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjhc_1s6_.php:56\n\
    Stack trace:\n#0 /tmp/tmpjhc_1s6_.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpjhc_1s6_.php\
    \ on line 56\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  $str1 = $lst[0];\n  $str2 = $lst[1];\n  $str1_l\
    \ = 0;\n  $str2_l = 0;\n  $str1_r = 0;\n  $str2_r = 0;\n  for ($i = 0; $i < strlen($str1);\
    \ $i++) {\n    if ($str1[$i] == '(') {\n      $str1_l++;\n    } else {\n     \
    \ $str1_r++;\n    }\n  }\n  for ($i = 0; $i < strlen($str2); $i++) {\n    if ($str2[$i]\
    \ == '(') {\n      $str2_l++;\n    } else {\n      $str2_r++;\n    }\n  }\n  if\
    \ ($str1_l == $str1_r && $str2_l == $str2_r) {\n    return \"Yes\";\n  } else\
    \ {\n    return \"No\";\n  }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy5vc7or4.php:47\n\
    Stack trace:\n#0 /tmp/tmpy5vc7or4.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpy5vc7or4.php\
    \ on line 47\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  // TODO: you code here\n}\n\n$tests = [\n \
    \ '()(()' => 'No',\n  '()' => 'Yes',\n  ')()' => 'No',\n  '(((((((())))))' =>\
    \ 'Yes',\n  '())(()' => 'No',\n  '()(()' => 'Yes',\n  '()((()' => 'No',\n  '())()))'\
    \ => 'No',\n  '((()(()' => 'No',\n  '((())((()))' => 'Yes',\n  '())(()' => 'No',\n\
    \  '())(()(' => 'No',\nn\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "((((((((((())(((((((((((())(()...",
    expecting "]" in /tmp/tmp65tguc4m.php on line 32

    '
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $arr1 = str_split($lst[0]);\n    $arr2 =\
    \ str_split($lst[1]);\n    $count = 0;\n    for ($i = 0; $i < count($arr1); $i++)\
    \ {\n        if ($arr1[$i] == '(') {\n            $count++;\n        } else {\n\
    \            $count--;\n        }\n    }\n    for ($i = 0; $i < count($arr2);\
    \ $i++) {\n        if ($arr2[$i] == '(') {\n            $count++;\n        } else\
    \ {\n            $count--;\n        }\n    }\n    if ($count == 0) {\n       \
    \ return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\necho match_parens(array(\"\
    ()(\", \")\")) . \"\\n\";\necho match_parens(array(\")\", \")\")) . \"\\n\";\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Yes\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpap89iogj.php:55\n\
    Stack trace:\n#0 /tmp/tmpap89iogj.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpap89iogj.php\
    \ on line 55\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $n = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i]\
    \ == '(') {\n            $n++;\n        } else {\n            $n--;\n        }\n\
    \    }\n    if ($n < 0) {\n        return \"No\";\n    }\n    for ($i = 0; $i\
    \ < strlen($str2); $i++) {\n        if ($str2[$i] == '(') {\n            $n++;\n\
    \        } else {\n            $n--;\n        }\n    }\n    if ($n != 0) {\n \
    \       return \"No\";\n    }\n    return \"Yes\";\n}\necho(match_parens(array(\"\
    ()(\", \")\")) . \"\\n\");\necho(match_parens(array(\")\", \")\")) . \"\\n\");\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Yes\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpugcfqxe_.php:51\n\
    Stack trace:\n#0 /tmp/tmpugcfqxe_.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpugcfqxe_.php\
    \ on line 51\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $open_cnt = 0;\n    foreach ($lst as $str)\
    \ {\n        for ($i = 0; $i < strlen($str); $i++) {\n            if ($str[$i]\
    \ == '(') {\n                $open_cnt++;\n            } else {\n            \
    \    $open_cnt--;\n            }\n            if ($open_cnt < 0) {\n         \
    \       return \"No\";\n            }\n        }\n    }\n    return $open_cnt\
    \ == 0 ? \"Yes\" : \"No\";\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0yp517fu.php:40\n\
    Stack trace:\n#0 /tmp/tmp0yp517fu.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp0yp517fu.php\
    \ on line 40\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n\t$pairs = [];\n\tforeach ($lst as $str) {\n\t\
    \tfor ($i = 0; $i < strlen($str); $i++) {\n\t\t\tif ($str[$i] == \"(\") {\n\t\t\
    \t\tarray_push($pairs, \")\");\n\t\t\t} else {\n\t\t\t\tif (count($pairs) == 0)\
    \ {\n\t\t\t\t\treturn \"No\";\n\t\t\t\t}\n\t\t\t\tarray_pop($pairs);\n\t\t\t}\n\
    \t\t}\n\t}\n\treturn count($pairs) == 0 ? \"Yes\" : \"No\";\n}\necho match_parens(array(\"\
    ()(\", \")\")) . \"\\n\";\necho match_parens(array(\")\", \")\")) . \"\\n\";\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Yes\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsal4ruel.php:41\n\
    Stack trace:\n#0 /tmp/tmpsal4ruel.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpsal4ruel.php\
    \ on line 41\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    list($first, $second) = $lst;\n    $count\
    \ = 0;\n    for ($i = 0; $i < strlen($first); $i++) {\n        if ($first[$i]\
    \ == '(') {\n            $count++;\n        } else {\n            $count--;\n\
    \        }\n        if ($count < 0) {\n            return \"No\";\n        }\n\
    \    }\n    for ($i = 0; $i < strlen($second); $i++) {\n        if ($second[$i]\
    \ == '(') {\n            $count++;\n        } else {\n            $count--;\n\
    \        }\n        if ($count < 0) {\n            return \"No\";\n        }\n\
    \    }\n    return \"Yes\";\n}\necho match_parens(array(\"()(\", \")\")) . \"\\\
    n\";\necho match_parens(array(\")\", \")\")) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Yes\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpak7ty2yt.php:50\n\
    Stack trace:\n#0 /tmp/tmpak7ty2yt.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpak7ty2yt.php\
    \ on line 50\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $string1 = $lst[0];\n    $string2 = $lst[1];\n\
    \    $true = \"Yes\";\n    $false = \"No\";\n    // if the strings only contain\
    \ open parentheses, they can be concatenated\n    // in any order and still be\
    \ good\n    if (strpos($string1, ')') === false && strpos($string2, ')') === false)\
    \ {\n        return $true;\n    }\n    // if string2 only contains close parentheses,\
    \ it can be concatenated\n    // after string1 in any order and still be good\n\
    \    if (strpos($string2, '(') === false) {\n        return $true;\n    }\n  \
    \  // if string1 only contains close parentheses, and string2 contains one\n \
    \   // open parenthesis, the strings cannot be concatenated and still be good\n\
    \    if (strpos($string1, '(') === false && strpos($string2, '(') !== false) {\n\
    \        return $false;\n    }\n    // if the strings contain a mix of open and\
    \ close parentheses, they can\n    // be concatenated in any order and still be\
    \ good\n    if (strpos($string1, '(') !== false && strpos($string2, ')') !== false)\
    \ {\n        return $true;\n    }\n    // if both strings only contain close parentheses,\
    \ the strings cannot be\n    // concatenated and still be good\n    if (strpos($string1,\
    \ '(') === false && strpos($string2, '(') === false) {\n        return $false;\n\
    \    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx_px_pui.php:52\n\
    Stack trace:\n#0 /tmp/tmpx_px_pui.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpx_px_pui.php\
    \ on line 52\n"
  timestamp: 1659978627
- exit_code: 0
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $pairs = 0;\n    $even = 0;\n    $odd = 0;\n\
    \    foreach ($lst as $string) {\n        $pairs += substr_count($string, '(')\
    \ - substr_count($string, ')');\n        if (substr_count($string, '(') < substr_count($string,\
    \ ')')) {\n            $odd++;\n        } else {\n            $even++;\n     \
    \   }\n    }\n    if ($pairs % 2 === 0 && $even > 0 && $odd > 0) {\n        return\
    \ 'Yes';\n    }\n    return 'No';\n}\nfunction candidate(...$args) {\n    return\
    \ match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  $s = $lst[0];\n  $t = $lst[1];\n  $n = strlen($s);\n\
    \  $m = strlen($t);\n  $dp = array();\n  $dp[0][0] = true;\n  for ($i = 1; $i\
    \ <= $n; $i++) {\n    $dp[$i][0] = $dp[$i - 1][0] && ($s[$i - 1] == '(');\n  }\n\
    \  for ($j = 1; $j <= $m; $j++) {\n    $dp[0][$j] = $dp[0][$j - 1] && ($t[$j -\
    \ 1] == '(');\n  }\n  for ($i = 1; $i <= $n; $i++) {\n    for ($j = 1; $j <= $m;\
    \ $j++) {\n      $dp[$i][$j] = false;\n      if ($s[$i - 1] == '(') {\n      \
    \  $dp[$i][$j] = $dp[$i - 1][$j];\n      }\n      if ($t[$j - 1] == '(') {\n \
    \       $dp[$i][$j] = $dp[$i][$j] || $dp[$i][$j - 1];\n      }\n      if ($s[$i\
    \ - 1] == ')' && $t[$j - 1] == ')') {\n        $dp[$i][$j] = $dp[$i][$j] || $dp[$i\
    \ - 1][$j - 1];\n      }\n    }\n  }\n  return $dp[$n][$m] ? 'Yes' : 'No';\n}\n\
    echo match_parens(array(\"()(\", \")\")) . \"\\n\";\necho match_parens(array(\"\
    )\", \")\")) . \"\\n\";\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Yes\nYes\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpze3upo62.php:52\n\
    Stack trace:\n#0 /tmp/tmpze3upo62.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpze3upo62.php\
    \ on line 52\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  // YOUR CODE HERE\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8erbi779.php:23\n\
    Stack trace:\n#0 /tmp/tmp8erbi779.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp8erbi779.php\
    \ on line 23\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    list($str1, $str2) = $lst;\n    $str_good\
    \ = function($str) {\n        $count = 0;\n        for ($i = 0; $i < strlen($str);\
    \ $i++) {\n            if ($str[$i] == '(') {\n                $count++;\n   \
    \         } else {\n                $count--;\n            }\n            if ($count\
    \ < 0) {\n                return False;\n            }\n        }\n        return\
    \ $count == 0;\n    };\n    if ($str_good($str1) && $str_good($str2)) {\n    \
    \    return \"Yes\";\n    }\n    $right = substr($str1, strlen($str1) - 1);\n\
    \    $left = substr($str2, 0, 1);\n    if ($left == '(' && $right == ')') {\n\
    \        $str1 = substr($str1, 0, strlen($str1) - 1);\n        $str2 = substr($str2,\
    \ 1);\n        if ($str_good($str1) && $str_good($str2)) {\n            return\
    \ \"Yes\";\n        }\n    }\n    return \"No\";\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprxx2kgjp.php:50\n\
    Stack trace:\n#0 /tmp/tmprxx2kgjp.php(64): test()\n#1 {main}\n  thrown in /tmp/tmprxx2kgjp.php\
    \ on line 50\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $result = 'Yes';\n    $count = 0;\n    $len1 = strlen($str1);\n    $len2\
    \ = strlen($str2);\n    for ($i = 0; $i < $len1; $i++) {\n        if ($str1[$i]\
    \ == '(') $count++;\n        else $count--;\n        if ($count < 0) break;\n\
    \    }\n    if ($count < 0) {\n        $result = 'No';\n    } else {\n       \
    \ for ($i = 0; $i < $len2; $i++) {\n            if ($str2[$i] == '(') $count++;\n\
    \            else $count--;\n            if ($count < 0) break;\n        }\n \
    \       if ($count < 0) $result = 'No';\n    }\n    return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4_v9gdmy.php:47\n\
    Stack trace:\n#0 /tmp/tmp4_v9gdmy.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp4_v9gdmy.php\
    \ on line 47\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  $parens = ['(', ')'];\n  $result = [];\n  $result[]\
    \ = $lst[0];\n  $result[] = $lst[1];\n  foreach ($result as $str) {\n    $cnt\
    \ = 0;\n    for ($i = 0; $i < strlen($str); $i++) {\n      if ($str[$i] == $parens[0])\
    \ {\n        $cnt++;\n      } else {\n        $cnt--;\n      }\n      if ($cnt\
    \ < 0) return \"No\";\n    }\n  }\n  return \"Yes\";\n}\n\necho match_parens([\"\
    ()(\", \")\"]) . \"\\n\";\necho match_parens([\")\", \")\"]) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "No\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn5irkyp_.php:41\n\
    Stack trace:\n#0 /tmp/tmpn5irkyp_.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpn5irkyp_.php\
    \ on line 41\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    list($s1, $s2) = $lst;\n    $curr = 0;\n\
    \    $len1 = strlen($s1);\n    $len2 = strlen($s2);\n    $i = 0;\n    $j = 0;\n\
    \    while ($i < $len1 || $j < $len2) {\n        if ($i < $len1 && $s1[$i] ==\
    \ '(') {\n            $curr++;\n        } elseif ($i < $len1 && $s1[$i] == ')')\
    \ {\n            $curr--;\n        }\n        if ($j < $len2 && $s2[$j] == '(')\
    \ {\n            $curr++;\n        } elseif ($j < $len2 && $s2[$j] == ')') {\n\
    \            $curr--;\n        }\n        if ($curr < 0) {\n            return\
    \ \"No\";\n        }\n        $i++;\n        $j++;\n    }\n    return $curr ==\
    \ 0 ? \"Yes\" : \"No\";\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmqsu_6l5.php:46\n\
    Stack trace:\n#0 /tmp/tmpmqsu_6l5.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpmqsu_6l5.php\
    \ on line 46\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n\t$open = 0;\n\t$close = 0;\n\tforeach ($lst\
    \ as $str) {\n\t\tfor ($i = 0; $i < strlen($str); $i++) {\n\t\t\tif ($str[$i]\
    \ == '(') {\n\t\t\t\t$open++;\n\t\t\t} else {\n\t\t\t\t$close++;\n\t\t\t}\n\t\t\
    }\n\t}\n\treturn ($open == $close) ? \"Yes\" : \"No\";\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmb_bf0f8.php:44\n\
    Stack trace:\n#0 /tmp/tmpmb_bf0f8.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpmb_bf0f8.php\
    \ on line 44\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  $str1 = $lst[0];\n  $str2 = $lst[1];\n  for\
    \ ($i = 0; $i < strlen($str1); $i++) {\n    $open = 0;\n    $close = 0;\n    for\
    \ ($j = 0; $j < strlen($str1); $j++) {\n      if ($str1[$j] == '(') {\n      \
    \  $open++;\n      } else {\n        $close++;\n      }\n    }\n    if ($open\
    \ != $close) {\n      return 'No';\n    }\n    $str1 = substr($str1, 1) . $str1[0];\n\
    \  }\n  return 'Yes';\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgb86iy90.php:40\n\
    Stack trace:\n#0 /tmp/tmpgb86iy90.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpgb86iy90.php\
    \ on line 40\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  $counter = 0;\n  for ($i = 0; $i < strlen($lst[0]);\
    \ $i++) {\n    if ($lst[0][$i] == '(') {\n      $counter++;\n    } else {\n  \
    \    $counter--;\n    }\n  }\n  for ($i = 0; $i < strlen($lst[1]); $i++) {\n \
    \   if ($lst[1][$i] == '(') {\n      $counter++;\n    } else {\n      $counter--;\n\
    \    }\n  }\n  if ($counter == 0) {\n    return \"Yes\";\n  } else {\n    return\
    \ \"No\";\n  }\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgbdhxs9q.php:52\n\
    Stack trace:\n#0 /tmp/tmpgbdhxs9q.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpgbdhxs9q.php\
    \ on line 52\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $left = $lst[0];\n    $right = $lst[1];\n\
    \    $left_length = strlen($left);\n    $right_length = strlen($right);\n    $left_total\
    \ = 0;\n    $right_total = 0;\n    for ($i = 0; $i < $left_length; $i++) {\n \
    \       if ($left[$i] == '(') {\n            $left_total++;\n        } else {\n\
    \            $left_total--;\n        }\n    }\n    for ($i = 0; $i < $right_length;\
    \ $i++) {\n        if ($right[$i] == '(') {\n            $right_total++;\n   \
    \     } else {\n            $right_total--;\n        }\n    }\n    if ($left_total\
    \ == $right_total) {\n        return \"Yes\";\n    } else {\n        return \"\
    No\";\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn9g703tq.php:47\n\
    Stack trace:\n#0 /tmp/tmpn9g703tq.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpn9g703tq.php\
    \ on line 47\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $paren_map = array(\"(\" => 1, \")\" => -1);\n\
    \    $open_lst = array_reduce(str_split($lst[0]), function($sum, $paren) use ($paren_map)\
    \ {\n        return $sum + $paren_map[$paren];\n    }, 0);\n    $close_lst = array_reduce(str_split($lst[1]),\
    \ function($sum, $paren) use ($paren_map) {\n        return $sum + $paren_map[$paren];\n\
    \    }, 0);\n    $sum = $open_lst + $close_lst;\n    if ($sum < 0) {\n       \
    \ return \"No\";\n    } elseif ($sum === 0) {\n        return \"Yes\";\n    }\
    \ else {\n        return \"Yes\";\n    }\n}\n\nfunction candidate(...$args) {\n\
    \    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzbuvl8q4.php:45\n\
    Stack trace:\n#0 /tmp/tmpzbuvl8q4.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpzbuvl8q4.php\
    \ on line 45\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $left = count_chars($lst[0], 3);\n    $right\
    \ = count_chars($lst[1], 3);\n    if ($left < $right) {\n        return \"No\"\
    ;\n    }\n    return \"Yes\";\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxuiofsbr.php:28\n\
    Stack trace:\n#0 /tmp/tmpxuiofsbr.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpxuiofsbr.php\
    \ on line 28\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  $parens = 0;\n  $str1 = $lst[0];\n  $str2 =\
    \ $lst[1];\n  for ($i = 0; $i < strlen($str1); $i++) {\n    if ($str1[$i] == '(')\
    \ {\n      $parens++;\n    } else {\n      $parens--;\n    }\n    if ($parens\
    \ < 0) {\n      return \"No\";\n    }\n  }\n  for ($i = 0; $i < strlen($str2);\
    \ $i++) {\n    if ($str2[$i] == '(') {\n      $parens++;\n    } else {\n     \
    \ $parens--;\n    }\n    if ($parens < 0) {\n      return \"No\";\n    }\n  }\n\
    \  if ($parens == 0) {\n    return \"Yes\";\n  } else {\n    return \"No\";\n\
    \  }\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjqs17b2_.php:54\n\
    Stack trace:\n#0 /tmp/tmpjqs17b2_.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpjqs17b2_.php\
    \ on line 54\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  $orig_lst = $lst;\n  if (match_parens_p($lst))\
    \ {\n    return \"Yes\";\n  } else {\n    $lst = $orig_lst;\n    $new_lst = array($lst[1],\
    \ $lst[0]);\n    if (match_parens_p($new_lst)) {\n      return \"Yes\";\n    }\
    \ else {\n      return \"No\";\n    }\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function match_parens_p()\
    \ in /tmp/tmpgljck9t4.php:17\nStack trace:\n#0 /tmp/tmpgljck9t4.php(31): match_parens(Array)\n\
    #1 /tmp/tmpgljck9t4.php(35): candidate(Array)\n#2 /tmp/tmpgljck9t4.php(49): test()\n\
    #3 {main}\n  thrown in /tmp/tmpgljck9t4.php on line 17\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $new_lst = array();\n    $new_lst[] = $lst[0];\n\
    \    for ($i = 0; $i < strlen($lst[1]); $i++) {\n        $new_lst[] = $lst[1][$i];\n\
    \    }\n    return is_good_string(implode($new_lst)) ? \"Yes\" : \"No\";\n}\n\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_good_string()\
    \ in /tmp/tmpwjhgmnyv.php:21\nStack trace:\n#0 /tmp/tmpwjhgmnyv.php(25): match_parens(Array)\n\
    #1 /tmp/tmpwjhgmnyv.php(29): candidate(Array)\n#2 /tmp/tmpwjhgmnyv.php(43): test()\n\
    #3 {main}\n  thrown in /tmp/tmpwjhgmnyv.php on line 21\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n\t$l = str_split($lst[0]);\n\t$r = str_split($lst[1]);\n\
    \t$opens = 0;\n\t$closes = 0;\n\tfor ($i = 0; $i < count($l); $i++) {\n\t\tif\
    \ ($l[$i] == \"(\") {\n\t\t\t$opens++;\n\t\t} else {\n\t\t\t$closes++;\n\t\t}\n\
    \t}\n\tfor ($i = 0; $i < count($r); $i++) {\n\t\tif ($r[$i] == \"(\") {\n\t\t\t\
    $opens++;\n\t\t} else {\n\t\t\t$closes++;\n\t\t}\n\t}\n\tif ($opens == $closes)\
    \ {\n\t\treturn \"Yes\";\n\t} else {\n\t\treturn \"No\";\n\t}\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfhx5mpw3.php:54\n\
    Stack trace:\n#0 /tmp/tmpfhx5mpw3.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpfhx5mpw3.php\
    \ on line 54\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $first = $lst[0];\n    $second = $lst[1];\n\
    \    return strpos($first . $second, '()') !== false ? 'Yes' : 'No';\n}\necho\
    \ match_parens(array(\"()(\", \")\")) . \"\\n\";\necho match_parens(array(\")\"\
    , \")\")) . \"\\n\";\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Yes\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7dpqmcys.php:29\n\
    Stack trace:\n#0 /tmp/tmp7dpqmcys.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp7dpqmcys.php\
    \ on line 29\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $check = $lst[0];\n    $add = $lst[1];\n\
    \    for ($i = 0; $i < strlen($add); $i++) {\n        if ($add[$i] == \"(\") {\n\
    \            $check = $add[$i] . $check;\n        } else {\n            if ($check[0]\
    \ == \"(\") {\n                $check = substr($check, 1);\n            } else\
    \ {\n                return \"No\";\n            }\n        }\n    }\n    return\
    \ $check == \"\" ? \"Yes\" : \"No\";\n}\necho match_parens(array(\"()(\", \")\"\
    )) . \"\\n\";\necho match_parens(array(\")\", \")\")) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "No\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplykag91t.php:38\n\
    Stack trace:\n#0 /tmp/tmplykag91t.php(52): test()\n#1 {main}\n  thrown in /tmp/tmplykag91t.php\
    \ on line 38\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  $str = \"\";\n  foreach ($lst as $str_part)\
    \ {\n    $str .= $str_part;\n  }\n  $counter = 0;\n  for ($i = 0; $i < strlen($str);\
    \ $i++) {\n    if ($str[$i] == \"(\") {\n      $counter++;\n    } else {\n   \
    \   $counter--;\n    }\n    if ($counter < 0) {\n      return \"No\";\n    }\n\
    \  }\n  if ($counter == 0) {\n    return \"Yes\";\n  } else {\n    return \"No\"\
    ;\n  }\n}\necho match_parens(array(\"()(\", \")\")) . \"\\n\";\necho match_parens(array(\"\
    )\", \")\")) . \"\\n\";\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Yes\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7ijk0bec.php:47\n\
    Stack trace:\n#0 /tmp/tmp7ijk0bec.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp7ijk0bec.php\
    \ on line 47\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $s1 = $lst[0];\n    $s2 = $lst[1];\n    $s1l\
    \ = strlen($s1);\n    $s2l = strlen($s2);\n    for ($i = 0; $i < $s1l; $i++) {\n\
    \        for ($j = 0; $j < $s2l; $j++) {\n            $s = $s1[$i] . $s2[$j];\n\
    \            $k = 0;\n            $p = 0;\n            $ss = strlen($s);\n   \
    \         while ($k < $ss) {\n                if ($s[$k] == '(') {\n         \
    \           $p++;\n                } else {\n                    $p--;\n     \
    \           }\n                if ($p < 0) {\n                    break;\n   \
    \             }\n                $k++;\n            }\n            if ($p == 0)\
    \ {\n                return \"Yes\";\n            }\n        }\n    }\n    return\
    \ \"No\";\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5fryij65.php:51\n\
    Stack trace:\n#0 /tmp/tmp5fryij65.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp5fryij65.php\
    \ on line 51\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $open = 0;\n    $close = 0;\n    $first =\
    \ $lst[0];\n    $second = $lst[1];\n    for ($i = 0; $i < strlen($first); $i++)\
    \ {\n        if ($first[$i] == \"(\") {\n            $open++;\n        } else\
    \ {\n            $close++;\n        }\n    }\n    for ($i = 0; $i < strlen($second);\
    \ $i++) {\n        if ($second[$i] == \"(\") {\n            $open++;\n       \
    \ } else {\n            $close++;\n        }\n    }\n    if ($open == $close)\
    \ {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph423n04a.php:54\n\
    Stack trace:\n#0 /tmp/tmph423n04a.php(59): test()\n#1 {main}\n  thrown in /tmp/tmph423n04a.php\
    \ on line 54\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n\t$parens = array_merge(str_split($lst[0]), str_split($lst[1]));\n\
    \t$r = 0;\n\tfor ($i = 0; $i < count($parens); $i++) {\n\t\tif ($parens[$i] ==\
    \ \"(\") {\n\t\t\t$r++;\n\t\t} else if ($parens[$i] == \")\") {\n\t\t\t$r--;\n\
    \t\t}\n\t\tif ($r < 0) {\n\t\t\treturn \"No\";\n\t\t}\n\t}\n\treturn $r == 0 ?\
    \ \"Yes\" : \"No\";\n}\necho match_parens(array(\"()(\", \")\")) . \"\\n\";\n\
    echo match_parens(array(\")\", \")\")) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Yes\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx6ixx_fl.php:40\n\
    Stack trace:\n#0 /tmp/tmpx6ixx_fl.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpx6ixx_fl.php\
    \ on line 40\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $stack = [];\n    $good = true;\n    for ($i = 0; $i < strlen($str1); $i++)\
    \ {\n        $c = $str1[$i];\n        if ($c == \"(\") {\n            array_push($stack,\
    \ $c);\n        } else {\n            if (count($stack) == 0) {\n            \
    \    $good = false;\n                break;\n            } else {\n          \
    \      array_pop($stack);\n            }\n        }\n    }\n    if ($good) {\n\
    \        for ($i = 0; $i < strlen($str2); $i++) {\n            $c = $str2[$i];\n\
    \            if ($c == \"(\") {\n                array_push($stack, $c);\n   \
    \         } else {\n                if (count($stack) == 0) {\n              \
    \      $good = false;\n                    break;\n                } else {\n\
    \                    array_pop($stack);\n                }\n            }\n  \
    \      }\n    }\n    if ($good && count($stack) == 0) {\n        return \"Yes\"\
    ;\n    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcpfhg7_t.php:62\n\
    Stack trace:\n#0 /tmp/tmpcpfhg7_t.php(73): test()\n#1 {main}\n  thrown in /tmp/tmpcpfhg7_t.php\
    \ on line 62\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $s1 = $lst[0];\n    $s2 = $lst[1];\n    $n1\
    \ = strlen($s1);\n    $n2 = strlen($s2);\n    $p1 = 0;\n    $p2 = 0;\n    $i =\
    \ 0;\n    $j = 0;\n    while ($i < $n1 && $j < $n2) {\n        if ($s1[$i] ==\
    \ '(') {\n            $p1++;\n        } else if ($s1[$i] == ')') {\n         \
    \   $p1--;\n        }\n        if ($s2[$j] == '(') {\n            $p2++;\n   \
    \     } else if ($s2[$j] == ')') {\n            $p2--;\n        }\n        if\
    \ ($p1 < 0 || $p2 < 0) {\n            return \"No\";\n        }\n        $i++;\n\
    \        $j++;\n    }\n    if ($i < $n1) {\n        for (; $i < $n1; $i++) {\n\
    \            if ($s1[$i] == '(') {\n                $p1++;\n            } else\
    \ if ($s1[$i] == ')') {\n                $p1--;\n            }\n            if\
    \ ($p1 < 0) {\n                return \"No\";\n            }\n        }\n    }\
    \ else if ($j < $n2) {\n        for (; $j < $n2; $j++) {\n            if ($s2[$j]\
    \ == '(') {\n                $p2++;\n            } else if ($s2[$j] == ')') {\n\
    \                $p2--;\n            }\n            if ($p2 < 0) {\n         \
    \       return \"No\";\n            }\n        }\n    }\n    if ($p1 == 0 && $p2\
    \ == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\n\n$in0 = array(\"(())()\", \")\");\n$in1 = array(\")\", \")\");\n$in2\
    \ = array(\"\", \"\");\n$in3 = array(\"()\nfunction candidate(...$args) {\n  \
    \  return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected double-quoted string ")) !== ", expecting
    ")" in /tmp/tmp5w10a6pa.php on line 80

    '
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  $s = $lst[0] . $lst[1];\n  $sz = strlen($s);\n\
    \  $cnt = 0;\n  for ($i = 0; $i < $sz; $i++) {\n    if ($s[$i] == '(') {\n   \
    \   $cnt++;\n    } else if ($s[$i] == ')') {\n      $cnt--;\n    }\n    if ($cnt\
    \ < 0) {\n      return \"No\";\n    }\n  }\n  if ($cnt == 0) {\n    return \"\
    Yes\";\n  } else {\n    return \"No\";\n  }\n}\nfunction candidate(...$args) {\n\
    \    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplt63hcs6.php:43\n\
    Stack trace:\n#0 /tmp/tmplt63hcs6.php(54): test()\n#1 {main}\n  thrown in /tmp/tmplt63hcs6.php\
    \ on line 43\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $s = $lst[0] . $lst[1];\n    $count = 0;\n\
    \    for ($i = 0; $i < strlen($s); $i++) {\n        if ($s[$i] == '(') {\n   \
    \         $count++;\n        } else {\n            $count--;\n        }\n    \
    \    if ($count < 0) {\n            return \"No\";\n        }\n    }\n    if ($count\
    \ == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7idd6iyj.php:42\n\
    Stack trace:\n#0 /tmp/tmp7idd6iyj.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp7idd6iyj.php\
    \ on line 42\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $l_parens = strlen(preg_replace('/[^\\(]/',\
    \ '', $lst[0]));\n    $r_parens = strlen(preg_replace('/[^\\)]/', '', $lst[1]));\n\
    \    if ($l_parens == $r_parens) {\n        return 'Yes';\n    } else {\n    \
    \    return 'No';\n    }\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3pxa1k24.php:30\n\
    Stack trace:\n#0 /tmp/tmp3pxa1k24.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp3pxa1k24.php\
    \ on line 30\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $lparen = 0;\n    $rparen = 0;\n    $r =\
    \ str_split($lst[0]);\n    foreach ($r as $c) {\n        if ($c == '(') {\n  \
    \          $lparen++;\n        } else {\n            $rparen++;\n        }\n \
    \   }\n    $r = str_split($lst[1]);\n    foreach ($r as $c) {\n        if ($c\
    \ == '(') {\n            $lparen++;\n        } else {\n            $rparen++;\n\
    \        }\n    }\n    if ($lparen == $rparen) {\n        return \"Yes\";\n  \
    \  } else {\n        return \"No\";\n    }\n}\necho match_parens(array(\"()(\"\
    , \")\")) . \"\\n\";\necho match_parens(array(\")\", \")\")) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Yes\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpco95jioy.php:56\n\
    Stack trace:\n#0 /tmp/tmpco95jioy.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpco95jioy.php\
    \ on line 56\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  // Good luck!\n  $string1 = $lst[0];\n  $string2\
    \ = $lst[1];\n  $string3 = $string1.$string2;\n  $count = 0;\n  $length = strlen($string3);\n\
    \  $index = 0;\n  while ($index < $length) {\n    if (substr($string3, $index,\
    \ 1) == \"(\") {\n      $count++;\n    } else {\n      $count--;\n    }\n    if\
    \ ($count < 0) {\n      return \"No\";\n    }\n    $index++;\n  }\n  if ($count\
    \ == 0) {\n    return \"Yes\";\n  } else {\n    return \"No\";\n  }\n}\n\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6_rl307f.php:49\n\
    Stack trace:\n#0 /tmp/tmp6_rl307f.php(60): test()\n#1 {main}\n  thrown in /tmp/tmp6_rl307f.php\
    \ on line 49\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  $open = 0;\n  $close = 0;\n  foreach($lst as\
    \ $str) {\n    $open += substr_count($str, '(');\n    $close += substr_count($str,\
    \ ')');\n  }\n  return ($open == $close) ? 'Yes' : 'No';\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplfvapfbi.php:38\n\
    Stack trace:\n#0 /tmp/tmplfvapfbi.php(43): test()\n#1 {main}\n  thrown in /tmp/tmplfvapfbi.php\
    \ on line 38\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $parens = \"\";\n    foreach ($lst as $item)\
    \ {\n        $parens .= $item;\n    }\n    $len = strlen($parens);\n    $sum =\
    \ 0;\n    for ($i = 0; $i < $len; $i++) {\n        if ($parens[$i] == \"(\") {\n\
    \            $sum++;\n        } else {\n            $sum--;\n        }\n     \
    \   if ($sum < 0) {\n            return \"No\";\n        }\n    }\n    if ($sum\
    \ == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\necho match_parens(array(\"()(\", \")\")) . \"\\n\";\necho match_parens(array(\"\
    )\", \")\")) . \"\\n\";\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Yes\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprejsflwt.php:48\n\
    Stack trace:\n#0 /tmp/tmprejsflwt.php(59): test()\n#1 {main}\n  thrown in /tmp/tmprejsflwt.php\
    \ on line 48\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  $parens = ['(' => ')', ')' => '('];\n  $a =\
    \ $lst[0];\n  $b = $lst[1];\n  $i = 0;\n  $j = 0;\n  $lenA = strlen($a);\n  $lenB\
    \ = strlen($b);\n  $str = '';\n  while ($i < $lenA && $j < $lenB) {\n    $str\
    \ .= $a[$i];\n    $str .= $b[$j];\n    $k = 0;\n    while (isset($str[$k]) &&\
    \ isset($str[$k + 1]) && $parens[$str[$k]] == $str[$k + 1]) {\n      $str = substr($str,\
    \ 0, $k) . substr($str, $k + 2);\n    }\n    $i++;\n    $j++;\n  }\n  if (strlen($str)\
    \ == 0) {\n    return 'Yes';\n  }\n  return 'No';\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8ejjoqoh.php:48\n\
    Stack trace:\n#0 /tmp/tmp8ejjoqoh.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp8ejjoqoh.php\
    \ on line 48\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  $str1 = $lst[0];\n  $str2 = $lst[1];\n  $total\
    \ = '';\n  $isBalanced = true;\n  $total_len = strlen($str1) + strlen($str2);\n\
    \  for ($i = 0; $i < $total_len; $i++) {\n    if ($i < strlen($str1)) {\n    \
    \  $total .= $str1[$i];\n    } else {\n      $total .= $str2[$i - strlen($str1)];\n\
    \    }\n    if ($total[$i] == '(') {\n      $paren_count = 1;\n      for ($j =\
    \ $i + 1; $j < $total_len; $j++) {\n        if ($total[$j] == '(') {\n       \
    \   $paren_count++;\n        } else {\n          $paren_count--;\n        }\n\
    \        if ($paren_count == 0) {\n          $isBalanced = true;\n          break;\n\
    \        }\n      }\n      if ($paren_count != 0) {\n        $isBalanced = false;\n\
    \        break;\n      }\n    }\n  }\n  if ($isBalanced) {\n    return 'Yes';\n\
    \  } else {\n    return 'No';\n  }\n}\nfunction candidate(...$args) {\n    return\
    \ match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Uninitialized string offset 1 in /tmp/tmp9gz9gsn3.php on line\
    \ 30\n\nWarning: Uninitialized string offset 3 in /tmp/tmp9gz9gsn3.php on line\
    \ 30\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9gz9gsn3.php:58\n\
    Stack trace:\n#0 /tmp/tmp9gz9gsn3.php(71): test()\n#1 {main}\n  thrown in /tmp/tmp9gz9gsn3.php\
    \ on line 58\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1 = str_split($str1);\n    $str2 = str_split($str2);\n    $parens = 0;\n\
    \    foreach ($str1 as $char) {\n        if ($char == \"(\") {\n            $parens\
    \ += 1;\n        } else {\n            $parens -= 1;\n        }\n    }\n    foreach\
    \ ($str2 as $char) {\n        if ($char == \"(\") {\n            $parens += 1;\n\
    \        } else {\n            $parens -= 1;\n        }\n    }\n    if ($parens\
    \ == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\necho match_parens(array(\"()(\", \")\")) . \"\\n\";\necho match_parens(array(\"\
    )\", \")\")) . \"\\n\";\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Yes\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp786t1aq3.php:57\n\
    Stack trace:\n#0 /tmp/tmp786t1aq3.php(62): test()\n#1 {main}\n  thrown in /tmp/tmp786t1aq3.php\
    \ on line 57\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str = implode(\"\", $lst);\n    $cnt = 0;\n\
    \    for ($i = 0; $i < strlen($str); $i++) {\n        if ($str[$i] == \"(\") {\n\
    \            $cnt++;\n        } else {\n            $cnt--;\n        }\n     \
    \   if ($cnt < 0) {\n            return \"No\";\n        }\n    }\n    return\
    \ $cnt == 0 ? \"Yes\" : \"No\";\n}\n\nif (!debug_backtrace()) {\n    $lst = array(\"\
    )\", \")\");\n    print match_parens($lst) . \"\\n\";\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "No\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9ad49vlz.php:43\n\
    Stack trace:\n#0 /tmp/tmp9ad49vlz.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp9ad49vlz.php\
    \ on line 43\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $left = 0;\n    $right = 0;\n    foreach($lst\
    \ as $str) {\n        for($i = 0; $i < strlen($str); $i++) {\n            if($str[$i]\
    \ == '(') {\n                $left++;\n            } else if($str[$i] == ')')\
    \ {\n                $right++;\n            }\n        }\n    }\n    if($left\
    \ > $right) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n\
    \    }\n}\n$lst = array(\"()(\", \")\");\necho match_parens($lst);\necho \"\\\
    n\";\n$lst = array(\")\", \")\");\necho match_parens($lst);\necho \"\\n\";\n$lst\
    \ = array(\"((\", \"()\");\necho match_parens($lst);\necho \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "No\nNo\nYes\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2_q8fj3p.php:47\n\
    Stack trace:\n#0 /tmp/tmp2_q8fj3p.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp2_q8fj3p.php\
    \ on line 47\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $a = $lst[0];\n    $b = $lst[1];\n    $c\
    \ = $a . $b;\n    $count = 0;\n    for ($i = 0; $i < strlen($c); $i++) {\n   \
    \     if ($c[$i] == \"(\") {\n            $count++;\n        } else {\n      \
    \      $count--;\n        }\n        if ($count < 0) {\n            return \"\
    No\";\n        }\n    }\n    if ($count == 0) {\n        return \"Yes\";\n   \
    \ } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args) {\n\
    \    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkna8wbgk.php:44\n\
    Stack trace:\n#0 /tmp/tmpkna8wbgk.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpkna8wbgk.php\
    \ on line 44\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  $l = $lst[0];\n  $r = $lst[1];\n  $count =\
    \ 0;\n  $len1 = strlen($l);\n  $len2 = strlen($r);\n  for ($i = 0; $i < $len1;\
    \ $i++) {\n    if ($l[$i] == '(') {\n      $count++;\n    } else {\n      $count--;\n\
    \    }\n    if ($count < 0) return \"No\";\n  }\n  for ($i = 0; $i < $len2; $i++)\
    \ {\n    if ($r[$i] == '(') {\n      $count++;\n    } else {\n      $count--;\n\
    \    }\n    if ($count < 0) return \"No\";\n  }\n  if ($count == 0) {\n    return\
    \ \"Yes\";\n  } else {\n    return \"No\";\n  }\n}\necho match_parens(array(\"\
    ()(\", \")\")) . \"\\n\";\necho match_parens(array(\")\", \")\")) . \"\\n\";\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Yes\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplq4b22nm.php:53\n\
    Stack trace:\n#0 /tmp/tmplq4b22nm.php(64): test()\n#1 {main}\n  thrown in /tmp/tmplq4b22nm.php\
    \ on line 53\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n\t$str = implode(\"\", $lst);\n\t$str = str_replace(\"\
    ()\", \"\", $str);\n\t$str = str_replace(\"(\", \"\", $str);\n\t$str = str_replace(\"\
    )\", \"\", $str);\n\tif ($str === \"\") {\n\t\treturn \"Yes\";\n\t} else {\n\t\
    \treturn \"No\";\n\t}\n}\necho match_parens(array(\"()(\", \")\")) . \"\\n\";\n\
    echo match_parens(array(\")\", \")\")) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Yes\nYes\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpprpn42qv.php:34\n\
    Stack trace:\n#0 /tmp/tmpprpn42qv.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpprpn42qv.php\
    \ on line 34\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n\t$a = $lst[0];\n\t$b = $lst[1];\n\tif ( !preg_match('/^[()]+$/',\
    \ $a) || !preg_match('/^[()]+$/', $b) ) {\n\t\treturn 'Invalid input';\n\t}\n\t\
    if (strlen($a) == 0) {\n\t\treturn 'Yes';\n\t}\n\tif (strlen($b) == 0) {\n\t\t\
    return 'Yes';\n\t}\n\tif (strlen($a) == 1 && strlen($b) == 1) {\n\t\treturn 'No';\n\
    \t}\n\tif (strlen($a) == 1) {\n\t\t$a = $a[0];\n\t\t$x = $b[0];\n\t\t$y = $b[1];\n\
    \t\tif ($a == '(' && $x == ')' && $y == ')') {\n\t\t\treturn 'Yes';\n\t\t}\n\t\
    \tif ($a == ')' && $x == '(' && $y == '(') {\n\t\t\treturn 'Yes';\n\t\t}\n\t\t\
    return 'No';\n\t}\n\tif (strlen($b) == 1) {\n\t\t$b = $b[0];\n\t\t$x = $a[0];\n\
    \t\t$y = $a[1];\n\t\tif ($b == '(' && $x == ')' && $y == ')') {\n\t\t\treturn\
    \ 'Yes';\n\t\t}\n\t\tif ($b == ')' && $x == '(' && $y == '(') {\n\t\t\treturn\
    \ 'Yes';\n\t\t}\n\t\treturn 'No';\n\t}\n\treturn match_parens(array(substr($a,1),\
    \ $b));\n}\necho match_parens(array(\"()(\", \")\")).\"\\n\";\necho match_parens(array(\"\
    )\", \")\")).\"\\n\";\necho match_parens(array(\"))((\", \"())\")).\"\\n\";\n\
    echo match_parens(array(\"(\", \"))\")).\"\\n\";\necho match_parens(array(\"))(\"\
    ,\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp3cap2nex.php on line 61

    '
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    if ($lst[0] == \"(\" && $lst[1] == \")\"\
    ) return \"Yes\";\n    if ($lst[0] == \")\" && $lst[1] == \"(\") return \"Yes\"\
    ;\n    if ($lst[0] == \"(\" && $lst[1] == \"(\") return \"No\";\n    if ($lst[0]\
    \ == \")\" && $lst[1] == \")\") return \"No\";\n}\n\necho match_parens(array(\"\
    ()(\", \")\")) . \"\\n\";\necho match_parens(array(\")\", \")\")) . \"\\n\";\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj07qkr84.php:29\n\
    Stack trace:\n#0 /tmp/tmpj07qkr84.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpj07qkr84.php\
    \ on line 29\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_close = 0;\n    $str2_close = 0;\n    for ($i = 0; $i < strlen($str1);\
    \ $i++) {\n        if ($str1[$i] == ')') {\n            $str1_close++;\n     \
    \   }\n    }\n    for ($i = 0; $i < strlen($str2); $i++) {\n        if ($str2[$i]\
    \ == ')') {\n            $str2_close++;\n        }\n    }\n    if ($str1_close\
    \ == $str2_close) {\n        return \"Yes\";\n    } else {\n        return \"\
    No\";\n    }\n}\necho match_parens(array(\"()(\", \")\")) . \"\\n\";\necho match_parens(array(\"\
    )\", \")\")) . \"\\n\";\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Yes\nYes\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1s9h416f.php:44\n\
    Stack trace:\n#0 /tmp/tmp1s9h416f.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp1s9h416f.php\
    \ on line 44\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    // your code here\n}\n\necho match_parens(array(\"\
    ()(\", \")\")) . \"\\n\";\necho match_parens(array(\")\", \")\")) . \"\\n\";\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqcv80n0u.php:26\n\
    Stack trace:\n#0 /tmp/tmpqcv80n0u.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpqcv80n0u.php\
    \ on line 26\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $s1 = $lst[0];\n    $s2 = $lst[1];\n    $s3\
    \ = $s1 . $s2;\n    $s4 = $s2 . $s1;\n    if (is_good($s3) || is_good($s4)) {\n\
    \        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_good() in\
    \ /tmp/tmp7mxrvng6.php:20\nStack trace:\n#0 /tmp/tmp7mxrvng6.php(28): match_parens(Array)\n\
    #1 /tmp/tmp7mxrvng6.php(32): candidate(Array)\n#2 /tmp/tmp7mxrvng6.php(46): test()\n\
    #3 {main}\n  thrown in /tmp/tmp7mxrvng6.php on line 20\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $opens = 0;\n    $closes = 0;\n    for ($i\
    \ = 0; $i < strlen($lst[0]); $i++) {\n        if ($lst[0][$i] == '(') {\n    \
    \        $opens++;\n        } else {\n            $closes++;\n        }\n    }\n\
    \    for ($i = 0; $i < strlen($lst[1]); $i++) {\n        if ($lst[1][$i] == '(')\
    \ {\n            $opens++;\n        } else {\n            $closes++;\n       \
    \ }\n    }\n    if ($opens == $closes) {\n        return \"Yes\";\n    } else\
    \ {\n        return \"No\";\n    }\n}\nfunction candidate(...$args) {\n    return\
    \ match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxlz8img6.php:52\n\
    Stack trace:\n#0 /tmp/tmpxlz8img6.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpxlz8img6.php\
    \ on line 52\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $s = '';\n    $result = '';\n    $s = $lst[0];\n\
    \    $result = $lst[1];\n    for ($i = 0; $i < strlen($s); $i++) {\n        if\
    \ ($s[$i] == '(') {\n            $result = $result . '(';\n        } else {\n\
    \            $result = $result . ')';\n        }\n    }\n    return $result;\n\
    }\necho match_parens(array(\"()(\", \")\")) . \"\\n\";\necho match_parens(array(\"\
    )\", \")\")) . \"\\n\";\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: ")()(\n))\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph84l2f34.php:36\n\
    Stack trace:\n#0 /tmp/tmph84l2f34.php(50): test()\n#1 {main}\n  thrown in /tmp/tmph84l2f34.php\
    \ on line 36\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  $string1 = $lst[0];\n  $string2 = $lst[1];\n\
    \  $combined = $string1 . $string2;\n  $stack = [];\n  for ($i = 0; $i < strlen($combined);\
    \ $i++) {\n    $current_char = $combined[$i];\n    if ($current_char == '(') {\n\
    \      array_push($stack, $current_char);\n    } else {\n      if (empty($stack))\
    \ {\n        return \"No\";\n      } else {\n        array_pop($stack);\n    \
    \  }\n    }\n  }\n  if (empty($stack)) {\n    return \"Yes\";\n  } else {\n  \
    \  return \"No\";\n  }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw_7r74rl.php:46\n\
    Stack trace:\n#0 /tmp/tmpw_7r74rl.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpw_7r74rl.php\
    \ on line 46\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  $str1 = $lst[0];\n  $str2 = $lst[1];\n  if\
    \ ($str1 == '(') {\n    return 'Yes';\n  } else if ($str2 == ')') {\n    return\
    \ 'Yes';\n  } else {\n    return 'No';\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprccaku0i.php:33\n\
    Stack trace:\n#0 /tmp/tmprccaku0i.php(46): test()\n#1 {main}\n  thrown in /tmp/tmprccaku0i.php\
    \ on line 33\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    // Your code here\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp82t8idss.php:23\n\
    Stack trace:\n#0 /tmp/tmp82t8idss.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp82t8idss.php\
    \ on line 23\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  $a = $lst[0];\n  $b = $lst[1];\n  $lenA = strlen($a);\n\
    \  $lenB = strlen($b);\n  $open_count = 0;\n  $close_count = 0;\n  for ($i = 0;\
    \ $i < $lenA; $i++) {\n    if ($a[$i] == '(') $open_count++;\n    else $close_count++;\n\
    \  }\n  for ($i = 0; $i < $lenB; $i++) {\n    if ($b[$i] == '(') $open_count++;\n\
    \    else $close_count++;\n  }\n  if ($open_count == $close_count) return \"Yes\"\
    ;\n  else return \"No\";\n}\necho match_parens(array(\"()(\", \")\")) . \"\\n\"\
    ;\necho match_parens(array(\")\", \")\")) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Yes\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi4tq460d.php:49\n\
    Stack trace:\n#0 /tmp/tmpi4tq460d.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpi4tq460d.php\
    \ on line 49\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  $leftCount = 0;\n  $rightCount = 0;\n  for\
    \ ($i = 0; $i < strlen($lst[0]); $i++) {\n    if ($lst[0][$i] == '(') {\n    \
    \  $leftCount++;\n    } else {\n      $leftCount--;\n    }\n  }\n  for ($i = 0;\
    \ $i < strlen($lst[1]); $i++) {\n    if ($lst[1][$i] == '(') {\n      $rightCount++;\n\
    \    } else {\n      $rightCount--;\n    }\n  }\n  if ($leftCount >= 0 && $rightCount\
    \ >= 0) {\n    return \"Yes\";\n  } else {\n    return \"No\";\n  }\n}\n\necho(match_parens(array(\"\
    ()(\", \")\")) . \"\\n\");\necho(match_parens(array(\")\", \")\")) . \"\\n\");\n\
    echo(match_parens(array(\"()(\", \"))(()\")) . \"\\n\");\necho(match_parens(array(\"\
    \", \")(\")) . \"\\n\");\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "No\nNo\nNo\nYes\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpls0x4ac4.php:48\n\
    Stack trace:\n#0 /tmp/tmpls0x4ac4.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpls0x4ac4.php\
    \ on line 48\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $s1 = $lst[0];\n    $s2 = $lst[1];\n    $count_s1\
    \ = 0;\n    $count_s2 = 0;\n    $i = 0;\n    $len = strlen($s1);\n    for (; $i\
    \ < $len; $i++) {\n        if ($s1[$i] == '(') {\n            $count_s1++;\n \
    \       } else {\n            $count_s1--;\n        }\n        if ($count_s1 <\
    \ 0) break;\n    }\n    if ($count_s1 < 0) return \"No\";\n    $len = strlen($s2);\n\
    \    for (; $i < $len; $i++) {\n        if ($s2[$i] == '(') {\n            $count_s2++;\n\
    \        } else {\n            $count_s2--;\n        }\n        if ($count_s2\
    \ < 0) break;\n    }\n    if ($count_s2 == 0) return \"Yes\";\n    return \"No\"\
    ;\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwqns08gx.php:51\n\
    Stack trace:\n#0 /tmp/tmpwqns08gx.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpwqns08gx.php\
    \ on line 51\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  $left = $lst[0];\n  $right = $lst[1];\n  $right_rev\
    \ = strrev($right);\n  if(is_balanced($left.$right) || is_balanced($left.$right_rev))\
    \ {\n    return \"Yes\";\n  }\n  return \"No\";\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_balanced()\
    \ in /tmp/tmp65cft6ow.php:19\nStack trace:\n#0 /tmp/tmp65cft6ow.php(25): match_parens(Array)\n\
    #1 /tmp/tmp65cft6ow.php(29): candidate(Array)\n#2 /tmp/tmp65cft6ow.php(43): test()\n\
    #3 {main}\n  thrown in /tmp/tmp65cft6ow.php on line 19\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  $opp = array(\"(\" => \")\");\n  $count = 0;\n\
    \  $result = \"Yes\";\n  for ($i = 0; $i < strlen($lst[0]); $i++) {\n    if ($lst[0][$i]\
    \ == \"(\") {\n      $count++;\n    } else {\n      $count--;\n    }\n    if ($count\
    \ < 0) {\n      $result = \"No\";\n      break;\n    }\n  }\n  if ($result ==\
    \ \"Yes\") {\n    for ($i = 0; $i < strlen($lst[1]); $i++) {\n      if ($lst[1][$i]\
    \ == \"(\") {\n        $count++;\n      } else {\n        $count--;\n      }\n\
    \      if ($count < 0) {\n        $result = \"No\";\n        break;\n      }\n\
    \    }\n  }\n  return $result;\n}\n\necho match_parens(array(\"()(\", \")\"))\
    \ . \"\\n\";\necho match_parens(array(\")\", \")\")) . \"\\n\";\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Yes\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmponinwqwi.php:57\n\
    Stack trace:\n#0 /tmp/tmponinwqwi.php(68): test()\n#1 {main}\n  thrown in /tmp/tmponinwqwi.php\
    \ on line 57\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $pare = array_count_values(str_split($lst[0].$lst[1]));\n\
    \    return ($pare[\"(\"] == $pare[\")\"]) ? \"Yes\" : \"No\";\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key \"(\" in /tmp/tmpj8pi1y05.php on line 17\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj8pi1y05.php:33\nStack\
    \ trace:\n#0 /tmp/tmpj8pi1y05.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpj8pi1y05.php\
    \ on line 33\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n\t$str1 = $lst[0];\n\t$str2 = $lst[1];\n\t$len1\
    \ = strlen($str1);\n\t$len2 = strlen($str2);\n\t$len = max($len1, $len2);\n\t\
    $left = 0;\n\t$right = 0;\n\tfor ($i = 0; $i < $len; $i++) {\n\t\tif ($i < $len1)\
    \ {\n\t\t\tif ($str1[$i] == '(') {\n\t\t\t\t$left++;\n\t\t\t} else {\n\t\t\t\t\
    $right++;\n\t\t\t}\n\t\t}\n\t\tif ($i < $len2) {\n\t\t\tif ($str2[$i] == '(')\
    \ {\n\t\t\t\t$left++;\n\t\t\t} else {\n\t\t\t\t$right++;\n\t\t\t}\n\t\t}\n\t\t\
    if ($right > $left) {\n\t\t\treturn \"No\";\n\t\t}\n\t}\n\tif ($left != $right)\
    \ {\n\t\treturn \"No\";\n\t}\n\treturn \"Yes\";\n}\n\n$lst = array(\"()(\", \"\
    )\");\necho match_parens($lst) . \"\\n\";\n$lst = array(\")\", \")\");\necho match_parens($lst)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "No\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo07yi_d0.php:57\n\
    Stack trace:\n#0 /tmp/tmpo07yi_d0.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpo07yi_d0.php\
    \ on line 57\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  $left = str_split($lst[0]);\n  $right = str_split($lst[1]);\n\
    \  $open = 0;\n  for ($i = 0; $i < count($left); $i++) {\n    if ($left[$i] ==\
    \ '(') {\n      $open++;\n    } else {\n      $open--;\n    }\n    if ($open <\
    \ 0) {\n      return \"No\";\n    }\n  }\n  $open = 0;\n  for ($i = 0; $i < count($right);\
    \ $i++) {\n    if ($right[$i] == '(') {\n      $open++;\n    } else {\n      $open--;\n\
    \    }\n    if ($open < 0) {\n      return \"No\";\n    }\n  }\n  return \"Yes\"\
    ;\n}\nprint match_parens(array(\"()(\", \")\")) . \"\\n\";\nprint match_parens(array(\"\
    )\", \")\")) . \"\\n\";\nprint match_parens(array(\"(\", \")\")) . \"\\n\";\n\
    print match_parens(array(\"(((\", \")))\")) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "No\nNo\nNo\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcz3ufwmm.php:51\n\
    Stack trace:\n#0 /tmp/tmpcz3ufwmm.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpcz3ufwmm.php\
    \ on line 51\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $match_open = function($sym) {\n        return\
    \ ($sym == '(');\n    };\n    $match_close = function($sym) {\n        return\
    \ ($sym == ')');\n    };\n    $valid_parens = function($parens) {\n        $open\
    \ = [];\n        $balance = true;\n        foreach ($parens as $paren) {\n   \
    \         if ($match_open($paren)) {\n                array_push($open, $paren);\n\
    \            } else if ($match_close($paren)) {\n                if (empty($open))\
    \ {\n                    $balance = false;\n                    break;\n     \
    \           } else {\n                    array_pop($open);\n                }\n\
    \            }\n        }\n        if (!empty($open)) {\n            $balance\
    \ = false;\n        }\n        return $balance;\n    };\n    $parens = str_split($lst[0]\
    \ . $lst[1]);\n    $result = $valid_parens($parens) ? 'Yes' : 'No';\n    return\
    \ $result;\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $match_open in /tmp/tmp4zq1uki_.php on line\
    \ 26\n\nFatal error: Uncaught Error: Value of type null is not callable in /tmp/tmp4zq1uki_.php:26\n\
    Stack trace:\n#0 /tmp/tmp4zq1uki_.php(43): {closure}(Array)\n#1 /tmp/tmp4zq1uki_.php(47):\
    \ match_parens(Array)\n#2 /tmp/tmp4zq1uki_.php(51): candidate(Array)\n#3 /tmp/tmp4zq1uki_.php(65):\
    \ test()\n#4 {main}\n  thrown in /tmp/tmp4zq1uki_.php on line 26\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  $left = 0;\n  $right = 0;\n  $lst = explode(\"\
    \ \", $lst);\n  for ($i = 0; $i < strlen($lst[0]); $i++) {\n    if ($lst[0][$i]\
    \ == '(') $left++;\n    else $right++;\n  }\n  for ($i = 0; $i < strlen($lst[1]);\
    \ $i++) {\n    if ($lst[1][$i] == '(') $left++;\n    else $right++;\n  }\n  if\
    \ ($left != $right) return \"No\";\n  else return \"Yes\";\n}\necho match_parens(\"\
    ()( )\");\necho \"<br>\";\necho match_parens(\") )\");\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Yes<br>No\nFatal error: Uncaught TypeError: explode(): Argument #2 ($string)\
    \ must be of type string, array given in /tmp/tmphemo43bz.php:18\nStack trace:\n\
    #0 /tmp/tmphemo43bz.php(18): explode(' ', Array)\n#1 /tmp/tmphemo43bz.php(34):\
    \ match_parens(Array)\n#2 /tmp/tmphemo43bz.php(38): candidate(Array)\n#3 /tmp/tmphemo43bz.php(52):\
    \ test()\n#4 {main}\n  thrown in /tmp/tmphemo43bz.php on line 18\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $open = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n\
    \        if ($str1[$i] == '(') {\n            $open++;\n        } else {\n   \
    \         $close++;\n        }\n    }\n    $excess = 0;\n    for ($i = 0; $i <\
    \ strlen($str2); $i++) {\n        if ($str2[$i] == '(') {\n            $open++;\n\
    \        } else {\n            $close++;\n        }\n        if ($close > $open)\
    \ {\n            $excess++;\n        }\n    }\n    if ($open == $close && $excess\
    \ == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpns3uimyc.php:52\n\
    Stack trace:\n#0 /tmp/tmpns3uimyc.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpns3uimyc.php\
    \ on line 52\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $lhs = count_in($lst[0], \"(\");\n    $rhs\
    \ = count_in($lst[1], \")\");\n    return ($lhs + $rhs) % 2 == 0 ? \"Yes\" : \"\
    No\";\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_in() in\
    \ /tmp/tmpvawo3vt8.php:16\nStack trace:\n#0 /tmp/tmpvawo3vt8.php(21): match_parens(Array)\n\
    #1 /tmp/tmpvawo3vt8.php(25): candidate(Array)\n#2 /tmp/tmpvawo3vt8.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmpvawo3vt8.php on line 16\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  return is_good_string($lst[0].$lst[1]) ? \"\
    Yes\" : \"No\";\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_good_string()\
    \ in /tmp/tmpi4hxkrnq.php:16\nStack trace:\n#0 /tmp/tmpi4hxkrnq.php(20): match_parens(Array)\n\
    #1 /tmp/tmpi4hxkrnq.php(24): candidate(Array)\n#2 /tmp/tmpi4hxkrnq.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpi4hxkrnq.php on line 16\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $tmp = str_split($lst[0] . $lst[1]);\n  \
    \  $cnt = 0;\n    foreach ($tmp as $ch) {\n        if ($ch == '(') {\n       \
    \     $cnt += 1;\n        } else {\n            $cnt -= 1;\n        }\n      \
    \  if ($cnt < 0) {\n            return \"No\";\n        }\n    }\n    return $cnt\
    \ == 0 ? \"Yes\" : \"No\";\n}\necho match_parens(array(\"()(\", \")\")) . \"\\\
    n\";\necho match_parens(array(\")\", \")\")) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Yes\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcsgpxars.php:40\n\
    Stack trace:\n#0 /tmp/tmpcsgpxars.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpcsgpxars.php\
    \ on line 40\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    return 'No';\n}\necho match_parens(array(\"\
    ()(\", \")\")) . \"\\n\";\necho match_parens(array(\")\", \")\")) . \"\\n\";\n\
    \nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "No\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp95b2uwqt.php:26\n\
    Stack trace:\n#0 /tmp/tmp95b2uwqt.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp95b2uwqt.php\
    \ on line 26\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  // Your code here\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm7gfnjlb.php:23\n\
    Stack trace:\n#0 /tmp/tmpm7gfnjlb.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpm7gfnjlb.php\
    \ on line 23\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    if (count($lst) < 2) {\n        return 'No';\n\
    \    }\n\n    // first check if the first array element is good\n    $s = $lst[0];\n\
    \    $l = strlen($s);\n    $count = 0;\n    for ($i = 0; $i < $l; $i++) {\n  \
    \      if ($s[$i] == '(') {\n            $count++;\n        } else {\n       \
    \     $count--;\n        }\n        if ($count < 0) {\n            return 'No';\n\
    \        }\n    }\n\n    // next check if the second array element is good\n \
    \   $s = $lst[1];\n    $l = strlen($s);\n    $count = 0;\n    for ($i = 0; $i\
    \ < $l; $i++) {\n        if ($s[$i] == '(') {\n            $count++;\n       \
    \ } else {\n            $count--;\n        }\n        if ($count < 0) {\n    \
    \        return 'No';\n        }\n    }\n\n    // then combine all and check if\
    \ the string is good\n    $s = $lst[0] . $lst[1];\n    $l = strlen($s);\n    $count\
    \ = 0;\n    for ($i = 0; $i < $l; $i++) {\n        if ($s[$i] == '(') {\n    \
    \        $count++;\n        } else {\n            $count--;\n        }\n     \
    \   if ($count < 0) {\n            return 'No';\n        }\n    }\n\n    return\
    \ 'Yes';\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5ody1z03.php:73\n\
    Stack trace:\n#0 /tmp/tmp5ody1z03.php(87): test()\n#1 {main}\n  thrown in /tmp/tmp5ody1z03.php\
    \ on line 73\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  $str_open = $lst[0];\n  $str_close = $lst[1];\n\
    \  $str_open_count = strlen($str_open);\n  $str_close_count = strlen($str_close);\n\
    \  $i = 0;\n  while ($i < $str_open_count || $i < $str_close_count) {\n    $c1\
    \ = substr($str_open, $i, 1);\n    $c2 = substr($str_close, $i, 1);\n    if ($c1\
    \ == \")\" || $c2 == \"(\") {\n      return \"No\";\n    }\n    $i++;\n  }\n \
    \ return \"Yes\";\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp73xelzol.php:37\n\
    Stack trace:\n#0 /tmp/tmp73xelzol.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp73xelzol.php\
    \ on line 37\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $parens1 = parens_expand($str1);\n    $parens2 = parens_expand($str2);\n\
    \    // check if str1 contains all the parens in str2\n    foreach ($parens2 as\
    \ $paren2) {\n        if (!in_array($paren2, $parens1)) {\n            return\
    \ \"No\";\n        }\n    }\n    // check if str2 contains all the parens in str1\n\
    \    foreach ($parens1 as $paren1) {\n        if (!in_array($paren1, $parens2))\
    \ {\n            return \"No\";\n        }\n    }\n    return \"Yes\";\n}\n\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function parens_expand()\
    \ in /tmp/tmpsgkvzey5.php:18\nStack trace:\n#0 /tmp/tmpsgkvzey5.php(36): match_parens(Array)\n\
    #1 /tmp/tmpsgkvzey5.php(40): candidate(Array)\n#2 /tmp/tmpsgkvzey5.php(54): test()\n\
    #3 {main}\n  thrown in /tmp/tmpsgkvzey5.php on line 18\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    if (count($lst) == 2) {\n        $string1\
    \ = $lst[0];\n        $string2 = $lst[1];\n        $good_string = $string1 . $string2;\n\
    \        $open_parens = substr_count($good_string, \"(\");\n        $close_parens\
    \ = substr_count($good_string, \")\");\n        if (($open_parens - $close_parens)\
    \ == 0) {\n            return \"Yes\";\n        } else {\n            return \"\
    No\";\n        }\n    } else {\n        return \"No\";\n    }\n}\n$result = match_parens(array(\"\
    ()(\", \")\"));\nprint_r($result);\necho \"\\n\";\n$result = match_parens(array(\"\
    )\", \")\"));\nprint_r($result);\necho \"\\n\";\n$result = match_parens(array(\"\
    (\", \")\"));\nprint_r($result);\necho \"\\n\";\n$result = match_parens(array(\"\
    ()\", \")\"));\nprint_r($result);\necho \"\\n\";\n$result = match_parens(array(\"\
    ()\", \"()\"));\nprint_r($result);\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Yes\nNo\nYes\nNo\nYes\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpri8bhv1j.php:60\nStack trace:\n#0 /tmp/tmpri8bhv1j.php(65): test()\n\
    #1 {main}\n  thrown in /tmp/tmpri8bhv1j.php on line 60\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  $left = $lst[0];\n  $right = $lst[1];\n  $len_left\
    \ = strlen($left);\n  $len_right = strlen($right);\n  $prefix = $left . $right;\n\
    \  $prefix_reversed = strrev($prefix);\n  $suffix = $right . $left;\n  $suffix_reversed\
    \ = strrev($suffix);\n  $good_prefix = true;\n  $good_prefix_reversed = true;\n\
    \  $good_suffix = true;\n  $good_suffix_reversed = true;\n  for ($i = 0; $i <\
    \ $len_left + $len_right; $i++) {\n    if ($good_prefix) {\n      $good_prefix\
    \ = $good_prefix && is_good_parens(substr($prefix, 0, $i + 1));\n    }\n    if\
    \ ($good_prefix_reversed) {\n      $good_prefix_reversed = $good_prefix_reversed\
    \ && is_good_parens(substr($prefix_reversed, 0, $i + 1));\n    }\n    if ($good_suffix)\
    \ {\n      $good_suffix = $good_suffix && is_good_parens(substr($suffix, $i));\n\
    \    }\n    if ($good_suffix_reversed) {\n      $good_suffix_reversed = $good_suffix_reversed\
    \ && is_good_parens(substr($suffix_reversed, $i));\n    }\n  }\n  return $good_prefix\
    \ || $good_prefix_reversed || $good_suffix || $good_suffix_reversed ? \"Yes\"\
    \ : \"No\";\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_good_parens()\
    \ in /tmp/tmpwqfarc4p.php:30\nStack trace:\n#0 /tmp/tmpwqfarc4p.php(46): match_parens(Array)\n\
    #1 /tmp/tmpwqfarc4p.php(50): candidate(Array)\n#2 /tmp/tmpwqfarc4p.php(64): test()\n\
    #3 {main}\n  thrown in /tmp/tmpwqfarc4p.php on line 30\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  $open_count = 0;\n  $close_count = 0;\n  for\
    \ ($i = 0; $i < strlen($lst[0]); $i++) {\n    if ($lst[0][$i] == '(') {\n    \
    \  $open_count++;\n    } else {\n      $close_count++;\n    }\n  }\n  for ($i\
    \ = 0; $i < strlen($lst[1]); $i++) {\n    if ($lst[1][$i] == '(') {\n      $open_count++;\n\
    \    } else {\n      $close_count++;\n    }\n  }\n  if ($open_count == $close_count)\
    \ {\n    return \"Yes\";\n  } else {\n    return \"No\";\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1l30gdhh.php:53\n\
    Stack trace:\n#0 /tmp/tmp1l30gdhh.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp1l30gdhh.php\
    \ on line 53\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  $s1 = $lst[0];\n  $s2 = $lst[1];\n  $closed\
    \ = 0;\n  $open = 0;\n  for ($i = 0; $i < strlen($s1); $i++) {\n    if ($s1[$i]\
    \ == '(') {\n      $open++;\n    } else {\n      $closed++;\n    }\n  }\n  for\
    \ ($i = 0; $i < strlen($s2); $i++) {\n    if ($s2[$i] == '(') {\n      $open++;\n\
    \    } else {\n      $closed++;\n    }\n  }\n  if ($open == $closed) {\n    return\
    \ \"Yes\";\n  } else {\n    return \"No\";\n  }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ultb01s.php:54\n\
    Stack trace:\n#0 /tmp/tmp2ultb01s.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp2ultb01s.php\
    \ on line 54\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $paren_count = 0;\n    $str_lst = [];\n \
    \   $str_lst[] = \"\";\n    $str_lst[] = \"\";\n    foreach ($lst as $i => $pairs)\
    \ {\n        foreach (str_split($pairs) as $paren) {\n            if ($paren ==\
    \ \"(\") {\n                $paren_count++;\n            } else if ($paren ==\
    \ \")\") {\n                $paren_count--;\n            }\n            if ($paren_count\
    \ == 0) {\n                $str_lst[$i] .= $paren;\n            } else if ($paren_count\
    \ > 0) {\n                $str_lst[$i] .= $paren;\n            } else {\n    \
    \            if ($i == 0) {\n                    $str_lst[1] .= $paren;\n    \
    \            } else {\n                    $str_lst[0] .= $paren;\n          \
    \      }\n            }\n        }\n    }\n    if ($paren_count == 0) {\n    \
    \    $good_str = $str_lst[0] . $str_lst[1];\n        $paren_count = 0;\n     \
    \   foreach (str_split($good_str) as $paren) {\n            if ($paren == \"(\"\
    ) {\n                $paren_count++;\n            } else if ($paren == \")\")\
    \ {\n                $paren_count--;\n            }\n            if ($paren_count\
    \ < 0) {\n                return \"No\";\n            }\n        }\n        return\
    \ \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwrdh0y3g.php:66\n\
    Stack trace:\n#0 /tmp/tmpwrdh0y3g.php(77): test()\n#1 {main}\n  thrown in /tmp/tmpwrdh0y3g.php\
    \ on line 66\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $count = 0;\n    $pairs = array();\n    for\
    \ ($i = 0; $i < count($lst); $i++) {\n        for ($j = 0; $j < strlen($lst[$i]);\
    \ $j++) {\n            if ($lst[$i][$j] == \"(\") {\n                $count++;\n\
    \            } else {\n                $count--;\n            }\n            if\
    \ ($count < 0) {\n                return \"No\";\n            }\n        }\n \
    \   }\n    return $count == 0 ? \"Yes\" : \"No\";\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpstesmrgj.php:40\n\
    Stack trace:\n#0 /tmp/tmpstesmrgj.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpstesmrgj.php\
    \ on line 40\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $open_parens = 0;\n    $close_parens = 0;\n\
    \    $a1 = $lst[0];\n    $a2 = $lst[1];\n    for ($i = 0; $i < strlen($a1); $i++)\
    \ {\n        if ($a1[$i] == '(') $open_parens++;\n        else $close_parens++;\n\
    \    }\n    for ($i = 0; $i < strlen($a2); $i++) {\n        if ($a2[$i] == '(')\
    \ $open_parens++;\n        else $close_parens++;\n    }\n    if ($open_parens\
    \ == $close_parens) return \"Yes\";\n    else return \"No\";\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv_ilwmil.php:45\n\
    Stack trace:\n#0 /tmp/tmpv_ilwmil.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpv_ilwmil.php\
    \ on line 45\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    // TODO\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjsxdodc1.php:23\n\
    Stack trace:\n#0 /tmp/tmpjsxdodc1.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpjsxdodc1.php\
    \ on line 23\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  $l_parens = substr_count($lst[0], '(');\n \
    \ $r_parens = substr_count($lst[1], ')');\n  return $l_parens == $r_parens ? 'Yes'\
    \ : 'No';\n}\n\n$a = array(\"()(\", \")\");\necho match_parens($a);\necho \"\\\
    n\";\n$b = array(\")\", \")\");\necho match_parens($b);\necho \"\\n\";\n\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "No\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp85dkq1bx.php:33\n\
    Stack trace:\n#0 /tmp/tmp85dkq1bx.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp85dkq1bx.php\
    \ on line 33\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n\t$a = $lst[0];\n\t$b = $lst[1];\n\t$arr = [\
    \ $a => 0, $b => 0 ];\n\tforeach ($arr as $key => $value) {\n\t\tfor ($i = 0;\
    \ $i < strlen($key); $i++) {\n\t\t\tif ($key[$i] == '(') {\n\t\t\t\t$arr[$key]++;\n\
    \t\t\t} else {\n\t\t\t\t$arr[$key]--;\n\t\t\t}\n\t\t}\n\t}\n\tif ($arr[$a] + $arr[$b]\
    \ == 0) {\n\t\treturn \"Yes\";\n\t} else {\n\t\treturn \"No\";\n\t}\n}\n\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoqa6jzff.php:49\n\
    Stack trace:\n#0 /tmp/tmpoqa6jzff.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpoqa6jzff.php\
    \ on line 49\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    // your code here\n}\necho '<pre>';\necho\
    \ 'match_parens(array(\"()(\", \")\")) == \"Yes\" is ';\necho match_parens(array(\"\
    ()(\", \")\")) == \"Yes\" ? 'True' : 'False';\necho \"\\n\";\necho 'match_parens(array(\"\
    )\", \")\")) == \"No\" is ';\necho match_parens(array(\")\", \")\")) == \"No\"\
    \ ? 'True' : 'False';\necho \"\\n\";\necho 'match_parens(array(\"(()\", \")\"\
    )) == \"Yes\" is ';\necho match_parens(array(\"(()\", \")\")) == \"Yes\" ? 'True'\
    \ : 'False';\necho \"\\n\";\necho 'match_parens(array(\"\", \")\")) == \"Yes\"\
    \ is ';\necho match_parens(array(\"\", \")\")) == \"Yes\" ? 'True' : 'False';\n\
    echo \"\\n\";\necho 'match_parens(array(\"\", \"(\")) == \"Yes\" is ';\necho match_parens(array(\"\
    \", \"(\")) == \"Yes\" ? 'True' : 'False';\necho \"\\n\";\necho 'match_parens(array(\"\
    \", \"\")) == \"Yes\" is ';\necho match_parens(array(\"\", \"\")) == \"Yes\" ?\
    \ 'True' : 'False';\necho \"\\n\";\necho 'match_parens(array(\"(\", \")\")) ==\
    \ \"Yes\" is ';\necho match_parens(array(\"(\", \")\")) == \"Yes\" ? 'True' :\
    \ 'False';\necho \"\\n\";\necho 'match_parens(array(\"()\", \")\")) == \"Yes\"\
    \ is ';\necho match_parens(array(\"()\", \")\")) == \"Yes\" ? 'True' : 'False';\n\
    echo \"\\n\";\necho 'match_parens(array(\"((\", \"))\")) == \"Yes\" is ';\necho\
    \ match_parens(array(\"((\", \"))\")) == \"Yes\" ? 'True' : 'False';\necho \"\\\
    n\";\necho 'match_parens(array(\"()()\", \"))))\")) == \"No\" is ';\n\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>match_parens(array(\"()(\", \")\")) == \"Yes\" is False\nmatch_parens(array(\"\
    )\", \")\")) == \"No\" is False\nmatch_parens(array(\"(()\", \")\")) == \"Yes\"\
    \ is False\nmatch_parens(array(\"\", \")\")) == \"Yes\" is False\nmatch_parens(array(\"\
    \", \"(\")) == \"Yes\" is False\nmatch_parens(array(\"\", \"\")) == \"Yes\" is\
    \ False\nmatch_parens(array(\"(\", \")\")) == \"Yes\" is False\nmatch_parens(array(\"\
    ()\", \")\")) == \"Yes\" is False\nmatch_parens(array(\"((\", \"))\")) == \"Yes\"\
    \ is False\nmatch_parens(array(\"()()\", \"))))\")) == \"No\" is \nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpcrevswet.php:53\nStack trace:\n\
    #0 /tmp/tmpcrevswet.php(67): test()\n#1 {main}\n  thrown in /tmp/tmpcrevswet.php\
    \ on line 53\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n\t$s1 = $lst[0];\n\t$s2 = $lst[1];\n\t$n1 = strlen($s1);\n\
    \t$n2 = strlen($s2);\n\t$lst_parens = array();\n\t$lst_parens[] = array($s1, $n1);\n\
    \t$lst_parens[] = array($s2, $n2);\n\tfor ($i = 0; $i < count($lst_parens); $i++)\
    \ {\n\t\t$s = $lst_parens[$i][0];\n\t\t$n = $lst_parens[$i][1];\n\t\tfor ($j =\
    \ 0; $j < $n; $j++) {\n\t\t\tif ($s[$j] == \"(\") {\n\t\t\t\tarray_push($stack,\
    \ $s[$j]);\n\t\t\t} else if ($s[$j] == \")\") {\n\t\t\t\tif (count($stack) ==\
    \ 0) {\n\t\t\t\t\treturn \"No\";\n\t\t\t\t} else {\n\t\t\t\t\tarray_pop($stack);\n\
    \t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn \"Yes\";\n}\n$m_input1 = array(\"()(\"\
    , \")\");\n$m_input2 = array(\")\", \")\");\n$m_result1 = match_parens($m_input1);\n\
    $m_result2 = match_parens($m_input2);\necho \"Input: \" . implode(\",\", $m_input1)\
    \ . \", Output: \" . $m_result1 . PHP_EOL;\necho \"Input: \" . implode(\",\",\
    \ $m_input2) . \", Output: \" . $m_result2 . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: array_push(): Argument #1 ($array) must\
    \ be of type array, null given in /tmp/tmpmk5gqgey.php:28\nStack trace:\n#0 /tmp/tmpmk5gqgey.php(28):\
    \ array_push(NULL, '(')\n#1 /tmp/tmpmk5gqgey.php(42): match_parens(Array)\n#2\
    \ {main}\n  thrown in /tmp/tmpmk5gqgey.php on line 28\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $left_parens = 0;\n    $right_parens = 0;\n\
    \    for ($i = 0; $i < strlen($lst[0]); $i++) {\n        if ($lst[0][$i] == '(')\
    \ {\n            $left_parens++;\n        } else {\n            $right_parens++;\n\
    \        }\n    }\n    for ($i = 0; $i < strlen($lst[1]); $i++) {\n        if\
    \ ($lst[1][$i] == '(') {\n            $left_parens++;\n        } else {\n    \
    \        $right_parens++;\n        }\n    }\n    if ($left_parens > $right_parens)\
    \ {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\
    echo match_parens(array(\"()(\", \")\")) . \"\\n\";\necho match_parens(array(\"\
    )\", \")\")) . \"\\n\";\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "No\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy6zmwmfq.php:45\n\
    Stack trace:\n#0 /tmp/tmpy6zmwmfq.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpy6zmwmfq.php\
    \ on line 45\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n\t$str1 = $lst[0];\n\t$str2 = $lst[1];\n\t$l\
    \ = strlen($str1);\n\t$m = strlen($str2);\n\t$diff = 0;\n\tfor ($i = 0; $i < $l;\
    \ $i++) {\n\t\tif ($str1[$i] == '(') {\n\t\t\t$diff++;\n\t\t} else {\n\t\t\t$diff--;\n\
    \t\t}\n\t}\n\tfor ($i = 0; $i < $m; $i++) {\n\t\tif ($str2[$i] == '(') {\n\t\t\
    \t$diff++;\n\t\t} else {\n\t\t\t$diff--;\n\t\t}\n\t}\n\tif ($diff < 0) {\n\t\t\
    return \"No\";\n\t}\n\t$res = 0;\n\tfor ($i = 0; $i < $l; $i++) {\n\t\tif ($str1[$i]\
    \ == '(') {\n\t\t\t$res++;\n\t\t} else {\n\t\t\t$res--;\n\t\t}\n\t\tif ($res <\
    \ 0) {\n\t\t\treturn \"No\";\n\t\t}\n\t}\n\t$res = 0;\n\tfor ($i = 0; $i < $m;\
    \ $i++) {\n\t\tif ($str2[$i] == '(') {\n\t\t\t$res++;\n\t\t} else {\n\t\t\t$res--;\n\
    \t\t}\n\t\tif ($res < 0) {\n\t\t\treturn \"No\";\n\t\t}\n\t}\n\treturn \"Yes\"\
    ;\n}\n\necho match_parens(array(\"()(\", \")\")) . \"\\n\";\necho match_parens(array(\"\
    )\", \")\")) . \"\\n\";\necho match_parens(array(\"(((\", \")))\")) . \"\\n\"\
    ;\necho match_parens(array(\"(()()(\", \")))\")) . \"\\n\";\necho match_parens(array(\"\
    (()(\", \")))\")) . \"\\n\";\necho match_parens(array(\"()(\", \"((())\")) . \"\
    \\n\";\necho match_\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "," or ";" in
    /tmp/tmp_k8qf9ke.php on line 70

    '
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $good_count = 0;\n    $check_str = \"\";\n    for ($i = 0; $i < strlen($str1);\
    \ $i++) {\n        $check_str .= $str1[$i];\n        $good_count += ($str1[$i]\
    \ == \"(\" ? 1 : -1);\n        if ($good_count < 0) {\n            return \"No\"\
    ;\n        }\n    }\n    for ($i = 0; $i < strlen($str2); $i++) {\n        $check_str\
    \ .= $str2[$i];\n        $good_count += ($str2[$i] == \"(\" ? 1 : -1);\n     \
    \   if ($good_count < 0) {\n            return \"No\";\n        }\n    }\n   \
    \ return $good_count == 0 ? \"Yes\" : \"No\";\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppu5k1to4.php:44\n\
    Stack trace:\n#0 /tmp/tmppu5k1to4.php(55): test()\n#1 {main}\n  thrown in /tmp/tmppu5k1to4.php\
    \ on line 44\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  $str_1 = $lst[0];\n  $str_2 = $lst[1];\n  $str_1_split\
    \ = str_split($str_1);\n  $str_2_split = str_split($str_2);\n  $str_1_open = 0;\n\
    \  $str_1_close = 0;\n  $str_2_open = 0;\n  $str_2_close = 0;\n  $answer = \"\
    Yes\";\n  foreach ($str_1_split as $char) {\n    if ($char == \"(\") {\n     \
    \ $str_1_open += 1;\n    } else {\n      $str_1_close += 1;\n    }\n  }\n  foreach\
    \ ($str_2_split as $char) {\n    if ($char == \"(\") {\n      $str_2_open += 1;\n\
    \    } else {\n      $str_2_close += 1;\n    }\n  }\n  if (($str_1_open - $str_1_close)\
    \ != ($str_2_open - $str_2_close)) {\n    $answer = \"No\";\n  }\n  if ($str_1_open\
    \ < $str_1_close) {\n    $answer = \"No\";\n  }\n  if ($str_2_open < $str_2_close)\
    \ {\n    $answer = \"No\";\n  }\n  return $answer;\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1tafvxli.php:55\n\
    Stack trace:\n#0 /tmp/tmp1tafvxli.php(69): test()\n#1 {main}\n  thrown in /tmp/tmp1tafvxli.php\
    \ on line 55\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $stack = 0;\n    $good = 'Yes';\n    foreach\
    \ ($lst as $str) {\n        for ($i = 0; $i < strlen($str); $i++) {\n        \
    \    if ($str[$i] == '(') {\n                $stack++;\n            } else {\n\
    \                $stack--;\n            }\n            if ($stack < 0) {\n   \
    \             $good = 'No';\n                break;\n            }\n        }\n\
    \    }\n    if ($stack != 0) {\n        $good = 'No';\n    }\n    return $good;\n\
    }\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdoizb09b.php:45\n\
    Stack trace:\n#0 /tmp/tmpdoizb09b.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpdoizb09b.php\
    \ on line 45\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  $s1 = $lst[0];\n  $s2 = $lst[1];\n  $s3 = $s1\
    \ . $s2;\n  $s4 = $s2 . $s1;\n  $count1 = 0;\n  $count2 = 0;\n  $count3 = 0;\n\
    \  $count4 = 0;\n  for ($i = 0; $i < strlen($s1); $i++) {\n    if ($s1[$i] ==\
    \ '(') {\n      $count1++;\n    } else {\n      $count1--;\n    }\n  }\n  for\
    \ ($i = 0; $i < strlen($s2); $i++) {\n    if ($s2[$i] == '(') {\n      $count2++;\n\
    \    } else {\n      $count2--;\n    }\n  }\n  for ($i = 0; $i < strlen($s3);\
    \ $i++) {\n    if ($s3[$i] == '(') {\n      $count3++;\n    } else {\n      $count3--;\n\
    \    }\n  }\n  for ($i = 0; $i < strlen($s4); $i++) {\n    if ($s4[$i] == '(')\
    \ {\n      $count4++;\n    } else {\n      $count4--;\n    }\n  }\n  if ($count1\
    \ == 0 || $count2 == 0 || $count3 == 0 || $count4 == 0) {\n    return \"Yes\"\
    ;\n  } else {\n    return \"No\";\n  }\n}\nfunction candidate(...$args) {\n  \
    \  return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjforiwnm.php:68\n\
    Stack trace:\n#0 /tmp/tmpjforiwnm.php(77): test()\n#1 {main}\n  thrown in /tmp/tmpjforiwnm.php\
    \ on line 68\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n\tforeach ($lst as $str) {\n\t\t$cnt = 0;\n\t\
    \tforeach (str_split($str) as $i => $ch) {\n\t\t\tif ($ch == '(') {\n\t\t\t\t\
    $cnt++;\n\t\t\t} else {\n\t\t\t\t$cnt--;\n\t\t\t}\n\t\t\tif ($cnt < 0) {\n\t\t\
    \t\treturn \"No\";\n\t\t\t}\n\t\t}\n\t}\n\treturn \"Yes\";\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsz6qjohb.php:37\n\
    Stack trace:\n#0 /tmp/tmpsz6qjohb.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpsz6qjohb.php\
    \ on line 37\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  $opener = '(';\n  $closer = ')';\n  $str1 =\
    \ $lst[0];\n  $str2 = $lst[1];\n  $new_str = '';\n  $count = 0;\n  // First, we\
    \ need to check if parentheses are matched.\n  // We can do this by counting the\
    \ number of openers and closers.\n  // If they are not the same, it's impossible\
    \ to have balanced parentheses.\n  $str1_openers = substr_count($str1, $opener);\n\
    \  $str1_closers = substr_count($str1, $closer);\n  $str2_openers = substr_count($str2,\
    \ $opener);\n  $str2_closers = substr_count($str2, $closer);\n  if ($str1_openers\
    \ !== $str1_closers || $str2_openers !== $str2_closers) {\n    return 'No';\n\
    \  }\n  // Next, we need to check if parentheses are balanced.\n  // We can do\
    \ this by counting the number of openers and closers, if the\n  // number of openers\
    \ ever becomes less than the number of closers, we\n  // know that it is impossible\
    \ to have balanced parentheses.\n  // Since we are only given strings of parentheses,\
    \ we can concatenate\n  // the two strings together and check the resulting string.\n\
    \  $new_str = $str1 . $str2;\n  for ($i = 0; $i < strlen($new_str); $i++) {\n\
    \    if ($new_str[$i] === $opener) {\n      $count++;\n    } else {\n      $count--;\n\
    \    }\n    if ($count < 0) {\n      return 'No';\n    }\n  }\n  // If the number\
    \ of openers and closers are the same and the number of\n  // openers never becomes\
    \ less than the number of closers, we can return\n  // 'Yes'.\n  return 'Yes';\n\
    }\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaob29ht5.php:60\n\
    Stack trace:\n#0 /tmp/tmpaob29ht5.php(74): test()\n#1 {main}\n  thrown in /tmp/tmpaob29ht5.php\
    \ on line 60\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $parentheses = implode(\"\", $lst);\n   \
    \ $count = strlen($parentheses);\n    for ($i = 0; $i < $count; $i++) {\n    \
    \    if (substr_count($parentheses, \"(\") == substr_count($parentheses, \")\"\
    )) {\n            return \"Yes\";\n        }\n        $parentheses = substr($parentheses,\
    \ 1);\n    }\n    return \"No\";\n}\nfunction candidate(...$args) {\n    return\
    \ match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4zd939ow.php:38\n\
    Stack trace:\n#0 /tmp/tmp4zd939ow.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp4zd939ow.php\
    \ on line 38\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  $w1 = $lst[0];\n  $w2 = $lst[1];\n  $valid\
    \ = true;\n  $w3 = '';\n  $w4 = '';\n  $open1 = substr_count($w1, '(');\n  $open2\
    \ = substr_count($w2, '(');\n  $close1 = substr_count($w1, ')');\n  $close2 =\
    \ substr_count($w2, ')');\n  // If the number of open and close parens for each\
    \ word is equal, then\n  // there's a chance we can fix these words, otherwise\
    \ it's impossible.\n  if ($open1 == $close1 && $open2 == $close2) {\n    // Add\
    \ in opening parens for the first word.\n    for ($i = 0; $i < $open2 - $open1;\
    \ $i++) {\n      $w3 .= '(';\n    }\n    $w3 .= $w1;\n    // Add in closing parens\
    \ for the second word.\n    for ($i = 0; $i < $close1 - $close2; $i++) {\n   \
    \   $w4 .= ')';\n    }\n    $w4 .= $w2;\n    // Check if the resulting strings\
    \ are valid.\n    if (is_valid($w3) && is_valid($w4)) {\n      return 'Yes';\n\
    \    }\n  }\n  return 'No';\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy4p6b8ll.php:51\n\
    Stack trace:\n#0 /tmp/tmpy4p6b8ll.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpy4p6b8ll.php\
    \ on line 51\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  $s1 = $lst[0];\n  $s2 = $lst[1];\n  $arr =\
    \ array();\n  for ($i = 0; $i < strlen($s1); $i++) {\n    if ($s1[$i] == \"(\"\
    ) {\n      array_push($arr, \")\");\n    } else {\n      if (empty($arr)) {\n\
    \        array_push($arr, \"(\");\n      } else {\n        array_pop($arr);\n\
    \      }\n    }\n  }\n  for ($i = 0; $i < strlen($s2); $i++) {\n    if ($s2[$i]\
    \ == \"(\") {\n      array_push($arr, \")\");\n    } else {\n      if (empty($arr))\
    \ {\n        array_push($arr, \"(\");\n      } else {\n        array_pop($arr);\n\
    \      }\n    }\n  }\n  if (empty($arr)) {\n    return \"Yes\";\n  } else {\n\
    \    return \"No\";\n  }\n}\necho match_parens(array(\"()(\", \")\")) . \"\\n\"\
    ;\necho match_parens(array(\")\", \")\")) . \"\\n\";\necho match_parens(array(\"\
    (()\", \")()\")) . \"\\n\";\necho match_parens(array(\"))((\", \"())\")) . \"\\\
    n\";\necho match_parens(array(\"(\", \")\")) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Yes\nYes\nYes\nNo\nYes\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp1mlhatof.php:58\nStack trace:\n#0 /tmp/tmp1mlhatof.php(71): test()\n\
    #1 {main}\n  thrown in /tmp/tmp1mlhatof.php on line 58\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $stack = [];\n    $first_string = $lst[0];\n\
    \    $second_string = $lst[1];\n    for ($i = 0; $i < strlen($first_string); $i++)\
    \ {\n        $stack[] = $first_string[$i];\n    }\n    for ($i = 0; $i < strlen($second_string);\
    \ $i++) {\n        $curr_char = $second_string[$i];\n        if ($curr_char ==\
    \ \"(\") {\n            $stack[] = $curr_char;\n        } else {\n           \
    \ if (count($stack) == 0) {\n                return \"No\";\n            }\n \
    \           $last_char = array_pop($stack);\n            if ($last_char != \"\
    (\") {\n                return \"No\";\n            }\n        }\n    }\n    return\
    \ \"Yes\";\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprfbos8h3.php:49\n\
    Stack trace:\n#0 /tmp/tmprfbos8h3.php(57): test()\n#1 {main}\n  thrown in /tmp/tmprfbos8h3.php\
    \ on line 49\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $s1 = $lst[0];\n    $s2 = $lst[1];\n    $str\
    \ = \"\";\n    // loop through the first string\n    for ($i = 0; $i < strlen($s1);\
    \ $i++) {\n        // add the current character to the string\n        $str .=\
    \ $s1[$i];\n        // if the first character of the string is an open paren,\n\
    \        // add the corresponding close paren from the second string\n       \
    \ if ($str[0] == \"(\") {\n            $str .= $s2[0];\n            // remove\
    \ the close paren from the second string\n            $s2 = substr($s2, 1);\n\
    \        }\n        // if the last character of the string is a close paren,\n\
    \        // remove it and the preceding open paren from the string\n        if\
    \ ($str[strlen($str) - 1] == \")\") {\n            $str = substr($str, 0, strlen($str)\
    \ - 2);\n        }\n    }\n    if ($str == \"\") {\n        return \"Yes\";\n\
    \    } else {\n        return \"No\";\n    }\n}\necho match_parens(array(\"()(\"\
    , \")\")) . \"\\n\";\necho match_parens(array(\")\", \")\")) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Uninitialized string offset 0 in /tmp/tmpkmb293nr.php on line\
    \ 26\nNo\nYes\n\nWarning: Uninitialized string offset 0 in /tmp/tmpkmb293nr.php\
    \ on line 26\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkmb293nr.php:49\n\
    Stack trace:\n#0 /tmp/tmpkmb293nr.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpkmb293nr.php\
    \ on line 49\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $arr = array();\n    $tmp = str_split($lst[0]);\n\
    \    foreach ($tmp as $value) {\n        if ($value == \"(\") {\n            array_push($arr,\
    \ $value);\n        } else {\n            if (count($arr) == 0) {\n          \
    \      return \"No\";\n            } else {\n                array_pop($arr);\n\
    \            }\n        }\n    }\n    $tmp = str_split($lst[1]);\n    foreach\
    \ ($tmp as $value) {\n        if ($value == \"(\") {\n            array_push($arr,\
    \ $value);\n        } else {\n            if (count($arr) == 0) {\n          \
    \      return \"No\";\n            } else {\n                array_pop($arr);\n\
    \            }\n        }\n    }\n    if (count($arr) == 0) {\n        return\
    \ \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9a00dy54.php:56\n\
    Stack trace:\n#0 /tmp/tmp9a00dy54.php(67): test()\n#1 {main}\n  thrown in /tmp/tmp9a00dy54.php\
    \ on line 56\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    // Your code here\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn_5biw9f.php:24\n\
    Stack trace:\n#0 /tmp/tmpn_5biw9f.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpn_5biw9f.php\
    \ on line 24\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    return 'No';\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmporfqa4tv.php:23\n\
    Stack trace:\n#0 /tmp/tmporfqa4tv.php(37): test()\n#1 {main}\n  thrown in /tmp/tmporfqa4tv.php\
    \ on line 23\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  $lft = 0;\n  $rgt = 0;\n  for ($i = 0; $i <\
    \ strlen($lst[0]); $i++) {\n    if ($lst[0][$i] == '(') {\n      $lft++;\n   \
    \ } else {\n      $lft--;\n    }\n  }\n  for ($i = 0; $i < strlen($lst[1]); $i++)\
    \ {\n    if ($lst[1][$i] == '(') {\n      $rgt++;\n    } else {\n      $rgt--;\n\
    \    }\n  }\n  return $lft + $rgt == 0 ? 'Yes' : 'No';\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj_x6ocn6.php:49\n\
    Stack trace:\n#0 /tmp/tmpj_x6ocn6.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpj_x6ocn6.php\
    \ on line 49\n"
  timestamp: 1659978627
- exit_code: 1
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  list($a, $b) = $lst;\n  // your code here\n\
    }\n\nif (empty($argv[1])) {\n  exit(1);\n}\n$str = json_decode($argv[1]);\nif\
    \ (empty($str)) {\n  exit(1);\n}\necho match_parens($str) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $left = array();\n    $right = array();\n\
    \    foreach ($lst as $str) {\n        if (substr($str, 0, 1) == \"(\") {\n  \
    \          $left[] = $str;\n        } else {\n            $right[] = $str;\n \
    \       }\n    }\n    sort($left);\n    sort($right);\n    $left_str = implode(\"\
    \", $left);\n    $right_str = implode(\"\", $right);\n    $res = array();\n  \
    \  for ($i = 0; $i < strlen($left_str); $i++) {\n        $res[] = $left_str[$i];\n\
    \        $res[] = $right_str[$i];\n    }\n    $res_str = implode(\"\", $res);\n\
    \    if (is_balanced($res_str)) {\n        return \"Yes\";\n    } else {\n   \
    \     return \"No\";\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Uninitialized string offset 1 in /tmp/tmp0qjzyep8.php on line\
    \ 32\n\nWarning: Uninitialized string offset 2 in /tmp/tmp0qjzyep8.php on line\
    \ 32\n\nFatal error: Uncaught Error: Call to undefined function is_balanced()\
    \ in /tmp/tmp0qjzyep8.php:35\nStack trace:\n#0 /tmp/tmp0qjzyep8.php(42): match_parens(Array)\n\
    #1 /tmp/tmp0qjzyep8.php(46): candidate(Array)\n#2 /tmp/tmp0qjzyep8.php(60): test()\n\
    #3 {main}\n  thrown in /tmp/tmp0qjzyep8.php on line 35\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $lst = $lst[0] . $lst[1];\n    $len = strlen($lst);\n\
    \    $stack = array();\n    for ($i = 0; $i < $len; $i++) {\n        if ($lst[$i]\
    \ == '(') {\n            array_push($stack, $lst[$i]);\n        } else {\n   \
    \         if (count($stack) > 0) {\n                array_pop($stack);\n     \
    \       } else {\n                return \"No\";\n            }\n        }\n \
    \   }\n    if (count($stack) == 0) {\n        return \"Yes\";\n    } else {\n\
    \        return \"No\";\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk6aqi3gb.php:45\n\
    Stack trace:\n#0 /tmp/tmpk6aqi3gb.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpk6aqi3gb.php\
    \ on line 45\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $lft = 0;\n    foreach ($lst as $str) {\n\
    \        for ($i = 0; $i < strlen($str); $i++) {\n            if ($str[$i] ==\
    \ '(') {\n                $lft++;\n            } else {\n                $lft--;\n\
    \            }\n            if ($lft < 0) {\n                return \"No\";\n\
    \            }\n        }\n    }\n    return ($lft == 0) ? \"Yes\" : \"No\";\n\
    }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg71l7fje.php:39\n\
    Stack trace:\n#0 /tmp/tmpg71l7fje.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpg71l7fje.php\
    \ on line 39\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    if (count($lst) != 2) {\n        print(\"\
    array must have two elements!\\n\");\n        return;\n    }\n    if (count($lst[0])\
    \ == 0 && count($lst[1]) == 0) {\n        return \"Yes\";\n    }\n    // iterate\
    \ through each character in string1, checking for a matching\n    // character\
    \ in string2 if it is an open paren\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str2_idx = 0;\n    for ($i = 0; $i < count($str1); $i++) {\n        if ($str1[$i]\
    \ == \"(\") {\n            // search for the matching close paren\n          \
    \  while ($str2_idx < count($str2)) {\n                if ($str2[$str2_idx] ==\
    \ \")\") {\n                    // we've found the matching close paren\n    \
    \                // remove it from the string and skip to the next character\n\
    \                    $str2 = substr($str2, 0, $str2_idx) . substr($str2, $str2_idx\
    \ + 1);\n                    $str2_idx = 0;\n                    break;\n    \
    \            }\n                $str2_idx++;\n            }\n            if ($str2_idx\
    \ == count($str2)) {\n                // no matching close paren found, return\
    \ \"No\"\n                return \"No\";\n            }\n        }\n    }\n  \
    \  // all open parens were matched\n    // check if there were any leftover close\
    \ parens\n    if (count($str2) > 0) {\n        // return \"No\"\n        return\
    \ \"No\";\n    }\n    // everything matches, return \"Yes\"\n    return \"Yes\"\
    ;\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: count(): Argument #1 ($value) must be\
    \ of type Countable|array, string given in /tmp/tmp5b2qnz5z.php:20\nStack trace:\n\
    #0 /tmp/tmp5b2qnz5z.php(57): match_parens(Array)\n#1 /tmp/tmp5b2qnz5z.php(61):\
    \ candidate(Array)\n#2 /tmp/tmp5b2qnz5z.php(75): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmp5b2qnz5z.php on line 20\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $lst[0] = str_split($lst[0]);\n    $lst[1]\
    \ = str_split($lst[1]);\n    $tot = 0;\n    foreach ($lst[0] as $value) {\n  \
    \      if ($value == '(') {\n            $tot++;\n        } else {\n         \
    \   $tot--;\n        }\n    }\n    foreach ($lst[1] as $value) {\n        if ($value\
    \ == '(') {\n            $tot++;\n        } else {\n            $tot--;\n    \
    \    }\n    }\n    if ($tot > 0) {\n        return \"No\";\n    } else {\n   \
    \     return \"Yes\";\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3f1xl41v.php:45\n\
    Stack trace:\n#0 /tmp/tmp3f1xl41v.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp3f1xl41v.php\
    \ on line 45\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  // TODO:\n}\nfunction candidate(...$args) {\n\
    \    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnru3olkq.php:23\n\
    Stack trace:\n#0 /tmp/tmpnru3olkq.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpnru3olkq.php\
    \ on line 23\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  $str1 = $lst[0];\n  $str2 = $lst[1];\n  $result\
    \ = 'No';\n  $n = strlen($str1);\n  $m = strlen($str2);\n  for ($i = 0; $i < $n;\
    \ $i++) {\n    for ($j = 0; $j < $m; $j++) {\n      $str = $str1[$i] . $str2[$j];\n\
    \      $stack = new SplStack();\n      $count = 0;\n      for ($k = 0; $k < strlen($str);\
    \ $k++) {\n        if ($str[$k] == '(') {\n          $stack->push($str[$k]);\n\
    \          $count++;\n        } else if ($str[$k] == ')') {\n          if ($stack->isEmpty())\
    \ {\n            $count--;\n          } else {\n            $stack->pop();\n \
    \           $count--;\n          }\n        }\n      }\n      if ($count == 0)\
    \ {\n        $result = 'Yes';\n        break;\n      }\n    }\n  }\n  return $result;\n\
    }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7cq8_t1j.php:54\n\
    Stack trace:\n#0 /tmp/tmp7cq8_t1j.php(66): test()\n#1 {main}\n  thrown in /tmp/tmp7cq8_t1j.php\
    \ on line 54\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $parens = array_map(function($s) {\n    \
    \    return array_reduce(str_split($s), function($b, $a) {\n            if ($a\
    \ == \"(\") return $b + 1;\n            if ($a == \")\") return $b - 1;\n    \
    \        else return $b;\n        }, 0);\n    }, $lst);\n    $ans = \"Yes\";\n\
    \    if ($parens[0] < 0) {\n        if ($parens[1] < 0) return \"No\";\n     \
    \   else if ($parens[1] < -$parens[0]) return \"No\";\n    } else if ($parens[1]\
    \ < 0) {\n        if ($parens[0] < -$parens[1]) return \"No\";\n    }\n    return\
    \ $ans;\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3vktyg82.php:44\n\
    Stack trace:\n#0 /tmp/tmp3vktyg82.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp3vktyg82.php\
    \ on line 44\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  $op = array_fill(0, 2, 0);\n  $cl = array_fill(0,\
    \ 2, 0);\n  foreach ($lst as $i => $str) {\n    $len = strlen($str);\n    for\
    \ ($j = 0; $j < $len; $j++) {\n      if ($str[$j] == '(') $op[$i]++;\n      else\
    \ $cl[$i]++;\n    }\n  }\n  if ($op[0] == $cl[1] && $op[1] == $cl[0]) return \"\
    Yes\";\n  return \"No\";\n}\necho match_parens(array(\"()(\", \")\")) . \"\\n\"\
    ;\necho match_parens(array(\")\", \")\")) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "No\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpykfplrgf.php:35\n\
    Stack trace:\n#0 /tmp/tmpykfplrgf.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpykfplrgf.php\
    \ on line 35\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    if (count($lst) !== 2) {\n        throw new\
    \ Exception('Input list should have exactly two elements.');\n    }\n    $s1 =\
    \ $lst[0];\n    $s2 = $lst[1];\n    if (strlen($s1) === 0 && strlen($s2) === 0)\
    \ {\n        return 'Yes';\n    }\n    if (strlen($s1) === 0 && strlen($s2) !==\
    \ 0) {\n        return 'No';\n    }\n    if (strlen($s1) !== 0 && strlen($s2)\
    \ === 0) {\n        return 'No';\n    }\n    if ($s1[0] === '(' && $s2[0] ===\
    \ ')') {\n        return match_parens(array(substr($s1, 1), substr($s2, 1)));\n\
    \    }\n    if ($s1[0] === '(' && $s2[0] === '(') {\n        return match_parens(array(substr($s1,\
    \ 1), $s2));\n    }\n    if ($s1[0] === ')' && $s2[0] === ')') {\n        return\
    \ match_parens(array($s1, substr($s2, 1)));\n    }\n    if ($s1[0] === ')' &&\
    \ $s2[0] === '(') {\n        return match_parens(array(substr($s1, 1), substr($s2,\
    \ 1)));\n    }\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptpbky59n.php:49\n\
    Stack trace:\n#0 /tmp/tmptpbky59n.php(63): test()\n#1 {main}\n  thrown in /tmp/tmptpbky59n.php\
    \ on line 49\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  $good = array();\n  $bad = array();\n  $pairs\
    \ = array();\n  $pairs[] = array();\n  foreach ($lst as $st) {\n    $open = 0;\n\
    \    for ($i = 0; $i < strlen($st); $i++) {\n      if ($st[$i] == '(') {\n   \
    \     $open++;\n      } else {\n        $open--;\n      }\n      if ($open < 0)\
    \ {\n        if (count($bad) == 0) {\n          $bad[] = $st;\n        } else\
    \ {\n          foreach ($bad as $bad_string) {\n            $new_string = $bad_string\
    \ . $st;\n            $open = 0;\n            for ($j = 0; $j < strlen($new_string);\
    \ $j++) {\n              if ($new_string[$j] == '(') {\n                $open++;\n\
    \              } else {\n                $open--;\n              }\n         \
    \     if ($open < 0) {\n                $good[] = $new_string;\n             \
    \ }\n            }\n          }\n        }\n      }\n    }\n    if ($open > 0)\
    \ {\n      $pairs[0][] = $st;\n    }\n  }\n  $pairs_count = count($pairs);\n \
    \ $i = 1;\n  while ($i < $pairs_count) {\n    $pairs[] = array();\n    foreach\
    \ ($pairs[$i - 1] as $s1) {\n      foreach ($pairs[0] as $s2) {\n        $new_string\
    \ = $s1 . $s2;\n        $open = 0;\n        for ($j = 0; $j < strlen($new_string);\
    \ $j++) {\n          if ($new_string[$j] == '(') {\n            $open++;\n   \
    \       } else {\n            $open--;\n          }\n          if ($open < 0)\
    \ {\n            $good[] = $new_string;\n          }\n        }\n        if ($open\
    \ > 0) {\n          $pairs[$i][] = $new_string;\n        }\n      }\n    }\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 55 in /tmp/tmpiwsyam8k.php on line 95

    '
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $parens = array_reduce($lst, function($acc,\
    \ $string) {\n        return preg_match_all('/[\\(\\)]/', $string, $matches) ?\n\
    \            array_merge($acc, $matches[0]) : $acc;\n    }, array());\n    $count\
    \ = 0;\n    foreach ($parens as $paren) {\n        if ($paren == '(') {\n    \
    \        $count++;\n        } else {\n            $count--;\n        }\n     \
    \   if ($count < 0) {\n            return \"No\";\n        }\n    }\n    return\
    \ $count == 0 ? \"Yes\" : \"No\";\n}\n\nassert(match_parens(array(\"()(\", \"\
    )\")) == \"Yes\");\nassert(match_parens(array(\")\", \")\")) == \"No\");\nassert(match_parens(array(\"\
    ()\", \")\")) == \"No\");\nassert(match_parens(array(\"()\", \"))\")) == \"No\"\
    );\nassert(match_parens(array(\"()(\", \"))\")) == \"No\");\nassert(match_parens(array(\"\
    ()(\", \")(\")) == \"Yes\");\nassert(match_parens(array(\"\", \")\")) == \"No\"\
    );\nassert(match_parens(array(\"\", \"\")) == \"Yes\");\nassert(match_parens(array(\"\
    ()\", \"\")) == \"Yes\");\nassert(match_parens(array(\"(()())\", \")\")) == \"\
    Yes\");\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught AssertionError: assert(match_parens(['()(', ')('])\
    \ == 'Yes') in /tmp/tmpnwc1mlw6.php:39\nStack trace:\n#0 /tmp/tmpnwc1mlw6.php(39):\
    \ assert(false, 'assert(match_pa...')\n#1 {main}\n  thrown in /tmp/tmpnwc1mlw6.php\
    \ on line 39\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $parens = \"\";\n    $close = 0;\n    $open\
    \ = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        $parens .= $lst[$i];\n\
    \        for ($j = 0; $j < strlen($lst[$i]); $j++) {\n            if ($lst[$i][$j]\
    \ == \"(\") {\n                $open++;\n            } else {\n              \
    \  $close++;\n            }\n        }\n    }\n    if ($open == $close) {\n  \
    \      return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\necho match_parens(array(\"\
    ()(\", \")\")) . \"\\n\";\necho match_parens(array(\")\", \")\")) . \"\\n\";\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Yes\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppvj_stx5.php:51\n\
    Stack trace:\n#0 /tmp/tmppvj_stx5.php(56): test()\n#1 {main}\n  thrown in /tmp/tmppvj_stx5.php\
    \ on line 51\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    if(count($lst) != 2) return \"No\";\n   \
    \ if(!count($lst[0]) && !count($lst[1])) return \"Yes\";\n    if(!count($lst[0]))\
    \ {\n        if(count($lst[1]) % 2 != 0) return \"No\";\n        else return \"\
    Yes\";\n    }\n    if(!count($lst[1])) {\n        if(count($lst[0]) % 2 != 0)\
    \ return \"No\";\n        else return \"Yes\";\n    }\n    $a = str_split($lst[0]);\n\
    \    $b = str_split($lst[1]);\n    $aa = $bb = 0;\n    for($i = 0; $i < count($a);\
    \ $i++) {\n        if($a[$i] == \"(\") $aa++;\n        else $aa--;\n    }\n  \
    \  for($i = 0; $i < count($b); $i++) {\n        if($b[$i] == \"(\") $bb++;\n \
    \       else $bb--;\n    }\n    if($aa < 0 && $bb < 0) return \"No\";\n    elseif($aa\
    \ > 0 && $bb > 0) return \"No\";\n    elseif($aa < 0 && $bb > 0) {\n        $aa\
    \ *= -1;\n        $res = match_parens(array(substr($lst[0], count($lst[0]) - $aa),\
    \ substr($lst[1], 0, $aa) . substr($lst[1], $aa)));\n        if($res == \"Yes\"\
    ) return \"Yes\";\n        else return match_parens(array(substr($lst[0], 0, count($lst[0])\
    \ - $aa), substr($lst[1], $aa)));\n    }\n    elseif($aa > 0 && $bb < 0) {\n \
    \       $bb *= -1;\n        $res = match_parens(array(substr($lst[0], 0, $bb)\
    \ . substr($lst[0], $bb), substr($lst[1], count($lst[1]) - $bb)));\n        if($\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting variable or
    "{" or "$" in /tmp/tmp1q8pp3ck.php on line 49

    '
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $first = $lst[0];\n    $second = $lst[1];\n\
    \    $first_len = strlen($first);\n    $second_len = strlen($second);\n    $limit\
    \ = $first_len + $second_len;\n    for ($i = 0; $i < $limit; $i++) {\n       \
    \ $answer = check_parens($first, $second);\n        if ($answer == 'Yes') {\n\
    \            return $answer;\n        }\n        $temp = $first[0];\n        $first\
    \ = substr($first, 1);\n        $first .= $temp;\n    }\n    return 'No';\n}\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function check_parens()\
    \ in /tmp/tmp4w2s3go_.php:22\nStack trace:\n#0 /tmp/tmp4w2s3go_.php(33): match_parens(Array)\n\
    #1 /tmp/tmp4w2s3go_.php(37): candidate(Array)\n#2 /tmp/tmp4w2s3go_.php(51): test()\n\
    #3 {main}\n  thrown in /tmp/tmp4w2s3go_.php on line 22\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $l = str_split($lst[0]);\n    $r = str_split($lst[1]);\n\
    \    $s = array();\n    $c = 0;\n    while (count($l) > 0 && count($r) > 0) {\n\
    \        $cl = array_shift($l);\n        $cr = array_shift($r);\n        if ($cl\
    \ === \"(\") {\n            array_push($s, \"(\");\n        } else {\n       \
    \     if (count($s) > 0) {\n                array_pop($s);\n            } else\
    \ {\n                $c++;\n            }\n        }\n        if ($cr === \")\"\
    ) {\n            array_push($s, \")\");\n        } else {\n            if (count($s)\
    \ > 0) {\n                array_pop($s);\n            } else {\n             \
    \   $c++;\n            }\n        }\n    }\n    while (count($l) > 0) {\n    \
    \    $cl = array_shift($l);\n        if ($cl === \"(\") {\n            array_push($s,\
    \ \"(\");\n        } else {\n            if (count($s) > 0) {\n              \
    \  array_pop($s);\n            } else {\n                $c++;\n            }\n\
    \        }\n    }\n    while (count($r) > 0) {\n        $cr = array_shift($r);\n\
    \        if ($cr === \")\") {\n            array_push($s, \")\");\n        } else\
    \ {\n            if (count($s) > 0) {\n                array_pop($s);\n      \
    \      } else {\n                $c++;\n            }\n        }\n    }\n    if\
    \ (count($s) > 0) {\n        return \"No\";\n    } else {\n        return \"Yes\"\
    ;\n    }\n}\n$lst = array(\"()(\", \")\");\necho match_parens($lst) . \"\\n\"\
    ;\n$lst = array(\")\", \")\");\necho match_parens($lst) . \"\\n\";\n$lst = array(\"\
    ()(()\", \")\");\necho match_parens($lst) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "No\nNo\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzkdwp_l8.php:83\n\
    Stack trace:\n#0 /tmp/tmpzkdwp_l8.php(97): test()\n#1 {main}\n  thrown in /tmp/tmpzkdwp_l8.php\
    \ on line 83\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $s1 = $lst[0];\n    $s2 = $lst[1];\n    $s\
    \ = $s1 . $s2;\n    $i = 0;\n    $parens = 0;\n    while ($i < strlen($s)) {\n\
    \        if ($s[$i] == '(') {\n            $parens++;\n        } else {\n    \
    \        $parens--;\n        }\n        if ($parens < 0) {\n            return\
    \ \"No\";\n        }\n        $i++;\n    }\n    if ($parens == 0) {\n        return\
    \ \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdso2aphk.php:47\n\
    Stack trace:\n#0 /tmp/tmpdso2aphk.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpdso2aphk.php\
    \ on line 47\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    // Complete this function\n    $pending =\
    \ 0;\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    for ($i = 0; $i < strlen($str1);\
    \ $i++) {\n        if ($str1[$i] == '(') {\n            $pending++;\n        }\
    \ else {\n            $pending--;\n        }\n        if ($pending < 0) {\n  \
    \          return \"No\";\n        }\n    }\n    for ($i = 0; $i < strlen($str2);\
    \ $i++) {\n        if ($str2[$i] == '(') {\n            $pending++;\n        }\
    \ else {\n            $pending--;\n        }\n        if ($pending < 0) {\n  \
    \          return \"No\";\n        }\n    }\n    if ($pending == 0) {\n      \
    \  return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0dyfotah.php:55\n\
    Stack trace:\n#0 /tmp/tmp0dyfotah.php(66): test()\n#1 {main}\n  thrown in /tmp/tmp0dyfotah.php\
    \ on line 55\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str_1 = $lst[0];\n    $str_2 = $lst[1];\n\
    \    // for each string\n    for ($i = 0; $i < strlen($str_1); $i++) {\n     \
    \   $paren_count = 0;\n        // left to right, count the number of open parens\n\
    \        for ($j = 0; $j < strlen($str_1); $j++) {\n            if ($str_1[$j]\
    \ == '(') {\n                $paren_count++;\n            } else {\n         \
    \       $paren_count--;\n            }\n            // if we ever have more close\
    \ parens than open parens, the string is\n            // bad, so break\n     \
    \       if ($paren_count < 0) {\n                break;\n            }\n     \
    \   }\n        // if the string is good, return 'Yes'\n        if ($paren_count\
    \ == 0) {\n            return 'Yes';\n        }\n        // shift left\n     \
    \   $str_1 = $str_1[strlen($str_1) - 1] . substr($str_1, 0, strlen($str_1) - 1);\n\
    \    }\n    // for each string\n    for ($i = 0; $i < strlen($str_2); $i++) {\n\
    \        $paren_count = 0;\n        // left to right, count the number of open\
    \ parens\n        for ($j = 0; $j < strlen($str_2); $j++) {\n            if ($str_2[$j]\
    \ == '(') {\n                $paren_count++;\n            } else {\n         \
    \       $paren_count--;\n            }\n            // if we ever have more close\
    \ parens than open parens, the string is\n            // bad, so break\n     \
    \       if ($paren_count < 0) {\n                break;\n            }\n     \
    \   }\n        // if the string is good, return 'Yes'\n        if ($paren_count\
    \ == 0) {\n            return 'Yes';\n        }\n        // shift left\n     \
    \   $str_2 = $str_2[strlen($str_2) - 1] . substr($str_2, 0, strlen($str_2) - 1);\n\
    \nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 42 in /tmp/tmprvsp4ex5.php on line 83

    '
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $open_parentheses = 0;\n    foreach ($lst\
    \ as $str) {\n        for ($i = 0; $i < strlen($str); $i++) {\n            if\
    \ ($str[$i] == '(') {\n                $open_parentheses++;\n            } else\
    \ {\n                $open_parentheses--;\n            }\n            if ($open_parentheses\
    \ < 0) {\n                return \"No\";\n            }\n        }\n    }\n  \
    \  return $open_parentheses == 0 ? \"Yes\" : \"No\";\n}\necho match_parens(array(\"\
    ()(\", \")\")) . \"\\n\";\necho match_parens(array(\")\", \")\")) . \"\\n\";\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Yes\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpng36_nlz.php:41\n\
    Stack trace:\n#0 /tmp/tmpng36_nlz.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpng36_nlz.php\
    \ on line 41\n"
  timestamp: 1659978627
- exit_code: 0
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $a = $lst[0];\n    $b = $lst[1];\n    $lst\
    \ = [$a . $b, $b . $a];\n    $isBalanced = function($s) {\n        $stack = new\
    \ SplStack();\n        for ($i = 0; $i < strlen($s); $i++) {\n            $c =\
    \ $s[$i];\n            if ($c == '(') {\n                $stack->push($c);\n \
    \           } else {\n                if ($stack->isEmpty()) {\n             \
    \       return false;\n                }\n                $stack->pop();\n   \
    \         }\n        }\n        return $stack->isEmpty();\n    };\n    foreach\
    \ ($lst as $str) {\n        if ($isBalanced($str)) {\n            return \"Yes\"\
    ;\n        }\n    }\n    return \"No\";\n}\necho match_parens([\"()(\", \")\"\
    ]) . \"\\n\"; // \"Yes\"\necho match_parens([\")\", \")\"]) . \"\\n\"; // \"No\"\
    \nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Yes

    No

    '
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  $open_parens = 0;\n  foreach ($lst as $str)\
    \ {\n    for ($i = 0; $i < strlen($str); $i++) {\n      if ($str[$i] == '(') $open_parens++;\n\
    \      else $open_parens--;\n      if ($open_parens < 0) return \"No\";\n    }\n\
    \  }\n  return $open_parens == 0 ? \"Yes\" : \"No\";\n}\necho match_parens(array(\"\
    ()(\", \")\")) . \"\\n\";\necho match_parens(array(\")\", \")\")) . \"\\n\";\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Yes\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuj3xmsgk.php:36\n\
    Stack trace:\n#0 /tmp/tmpuj3xmsgk.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpuj3xmsgk.php\
    \ on line 36\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $s1 = $lst[0];\n    $s2 = $lst[1];\n    $s1left\
    \ = 0;\n    $s2left = 0;\n    $s1right = 0;\n    $s2right = 0;\n    $s1left =\
    \ substr_count($s1, \"(\");\n    $s2left = substr_count($s2, \"(\");\n    $s1right\
    \ = substr_count($s1, \")\");\n    $s2right = substr_count($s2, \")\");\n    $s1total\
    \ = $s1left - $s1right;\n    $s2total = $s2left - $s2right;\n    if ($s1total\
    \ > 0) {\n        if ($s2total > 0) {\n            return \"No\";\n        } else\
    \ {\n            return \"Yes\";\n        }\n    } else {\n        if ($s2total\
    \ > 0) {\n            return \"Yes\";\n        } else {\n            if ($s1left\
    \ > $s2right) {\n                return \"Yes\";\n            } else {\n     \
    \           return \"No\";\n            }\n        }\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_l83k92t.php:53\n\
    Stack trace:\n#0 /tmp/tmp_l83k92t.php(65): test()\n#1 {main}\n  thrown in /tmp/tmp_l83k92t.php\
    \ on line 53\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $left = $lst[0];\n    $right = $lst[1];\n\
    \    $par_l = strlen($left);\n    $par_r = strlen($right);\n    for ($i = 0; $i\
    \ < $par_l; $i++) {\n        if ($left[$i] === \"(\") {\n            for ($j =\
    \ 0; $j < $par_r; $j++) {\n                if ($right[$j] === \")\") {\n     \
    \               $new_left = substr($left, 0, $i) . substr($left, $i + 1);\n  \
    \                  $new_right = substr($right, 0, $j) . substr($right, $j + 1);\n\
    \                    $result = match_parens(array($new_left, $new_right));\n \
    \                   if ($result === \"Yes\") {\n                        return\
    \ \"Yes\";\n                    }\n                }\n            }\n        }\n\
    \    }\n    if ($left === \"\" && $right === \"\") {\n        return \"Yes\";\n\
    \    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqg189_8p.php:45\n\
    Stack trace:\n#0 /tmp/tmpqg189_8p.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpqg189_8p.php\
    \ on line 45\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $first = $lst[0];\n    $second = $lst[1];\n\
    \    // write your code here\n    // to print results to the standard output you\
    \ can use print\n    // Example:\n    // print \"Hello world!\";\n    return \"\
    Yes\";\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4uun8ruz.php:31\n\
    Stack trace:\n#0 /tmp/tmp4uun8ruz.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp4uun8ruz.php\
    \ on line 31\n"
  timestamp: 1659978628
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str = $str1 . $str2;\n    $i = 0;\n    while ($i < strlen($str)) {\n   \
    \     if ($str[$i] == ')') {\n            $j = $i;\n            while ($j >= 0)\
    \ {\n                if ($str[$j] == '(') {\n                    $str[$j] = '';\n\
    \                    $str[$i] = '';\n                    break;\n            \
    \    }\n                $j--;\n            }\n        }\n        $i++;\n    }\n\
    \    $result = str_replace('', '', $str);\n    if ($result == '') {\n        return\
    \ 'Yes';\n    } else {\n        return 'No';\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Cannot assign an empty string to a string\
    \ offset in /tmp/tmp59oj6nhd.php:25\nStack trace:\n#0 /tmp/tmp59oj6nhd.php(42):\
    \ match_parens(Array)\n#1 /tmp/tmp59oj6nhd.php(46): candidate(Array)\n#2 /tmp/tmp59oj6nhd.php(60):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp59oj6nhd.php on line 25\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    return (possible($lst[0], \"\") ? \"Yes\"\
    \ : \"No\");\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function possible() in\
    \ /tmp/tmpvlha9a4o.php:16\nStack trace:\n#0 /tmp/tmpvlha9a4o.php(20): match_parens(Array)\n\
    #1 /tmp/tmpvlha9a4o.php(24): candidate(Array)\n#2 /tmp/tmpvlha9a4o.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpvlha9a4o.php on line 16\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  // Make separate arrays for the opening and\
    \ closing parens for each array.\n  $arr1 = array_filter(str_split($lst[0]), function($v)\
    \ { return $v == '('; });\n  $arr2 = array_filter(str_split($lst[1]), function($v)\
    \ { return $v == ')'; });\n  $arr3 = array_filter(str_split($lst[0]), function($v)\
    \ { return $v == ')'; });\n  $arr4 = array_filter(str_split($lst[1]), function($v)\
    \ { return $v == '('; });\n  $a = count($arr1);\n  $b = count($arr2);\n  $c =\
    \ count($arr3);\n  $d = count($arr4);\n  // If all opening parens are also in\
    \ closing parens, or all closing parens\n  // are also in opening parens, then\
    \ return 'Yes'.\n  if (($a == $c && $b == $d) || ($a == $d && $b == $c)) {\n \
    \   return 'Yes';\n  }\n  // If it's impossible to make a good string, return\
    \ 'No'.\n  return 'No';\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuxmawcj9.php:38\n\
    Stack trace:\n#0 /tmp/tmpuxmawcj9.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpuxmawcj9.php\
    \ on line 38\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    // your code here...\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo0j5__vt.php:23\n\
    Stack trace:\n#0 /tmp/tmpo0j5__vt.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpo0j5__vt.php\
    \ on line 23\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  $first = $lst[0];\n  $second = $lst[1];\n \
    \ // YOUR CODE HERE\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpux1em2o4.php:25\n\
    Stack trace:\n#0 /tmp/tmpux1em2o4.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpux1em2o4.php\
    \ on line 25\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $left = 0;\n    foreach ($lst as $i) {\n\
    \        foreach (str_split($i) as $c) {\n            if ($c == '(') {\n     \
    \           $left++;\n            } else {\n                $left--;\n       \
    \     }\n            if ($left < 0) return \"No\";\n        }\n    }\n    return\
    \ $left == 0 ? \"Yes\" : \"No\";\n}\nfunction candidate(...$args) {\n    return\
    \ match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp71ljt10k.php:37\n\
    Stack trace:\n#0 /tmp/tmp71ljt10k.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp71ljt10k.php\
    \ on line 37\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  $str1 = $lst[0];\n  $str2 = $lst[1];\n  $len1\
    \ = strlen($str1);\n  $len2 = strlen($str2);\n  $count1 = 0;\n  $count2 = 0;\n\
    \  for ($i = 0; $i < $len1; $i++) {\n    if ($str1[$i] == '(') {\n      $count1++;\n\
    \    } else {\n      $count1--;\n    }\n  }\n  for ($i = 0; $i < $len2; $i++)\
    \ {\n    if ($str2[$i] == '(') {\n      $count2++;\n    } else {\n      $count2--;\n\
    \    }\n  }\n  $count = $count1 + $count2;\n  if ($count < 0) {\n    return \"\
    No\";\n  }\n  if ($count % 2 == 0) {\n    return \"Yes\";\n  }\n  return \"No\"\
    ;\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpodh1vfq2.php:58\n\
    Stack trace:\n#0 /tmp/tmpodh1vfq2.php(64): test()\n#1 {main}\n  thrown in /tmp/tmpodh1vfq2.php\
    \ on line 58\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $s1 = $lst[0];\n    $s2 = $lst[1];\n    $s\
    \ = $s1 . $s2;\n    $l = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n     \
    \   if ($s[$i] == '(') {\n            $l++;\n        } else {\n            $l--;\n\
    \        }\n        if ($l < 0) {\n            return \"No\";\n        }\n   \
    \ }\n    if ($l == 0) {\n        return \"Yes\";\n    } else {\n        return\
    \ \"No\";\n    }\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0s7kalir.php:45\n\
    Stack trace:\n#0 /tmp/tmp0s7kalir.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp0s7kalir.php\
    \ on line 45\n"
  timestamp: 1659978628
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $b1 = $lst[0];\n    $b2 = $lst[1];\n    $a1\
    \ = count_chars($b1, 1);\n    $a2 = count_chars($b2, 1);\n    $diff1 = $a1[40]\
    \ - $a1[41];\n    $diff2 = $a2[40] - $a2[41];\n    if ($diff1 == 0 && $diff2 ==\
    \ 0) {\n        return \"Yes\";\n    } else if ($diff1 < 0 && $diff2 < 0) {\n\
    \        return \"No\";\n    } else if ($diff1 > 0 && $diff2 > 0) {\n        return\
    \ \"No\";\n    } else if ($diff1 == -$diff2) {\n        return \"Yes\";\n    }\
    \ else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args) {\n \
    \   return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 40 in /tmp/tmp2j52uncb.php on line 21\n\n\
    Warning: Undefined array key 40 in /tmp/tmp2j52uncb.php on line 20\n\nWarning:\
    \ Undefined array key 40 in /tmp/tmp2j52uncb.php on line 21\n\nWarning: Undefined\
    \ array key 41 in /tmp/tmp2j52uncb.php on line 20\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp2j52uncb.php:48\nStack trace:\n#0 /tmp/tmp2j52uncb.php(53):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp2j52uncb.php on line 48\n"
  timestamp: 1659978628
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $fst = $lst[0];\n    $snd = $lst[1];\n  \
    \  if ($fst === \"\" && $snd === \"\") {\n        return \"Yes\";\n    }\n   \
    \ if ($fst === \"\") {\n        return match_parens(array($snd, \"\"));\n    }\n\
    \    if ($snd === \"\") {\n        return match_parens(array($fst, \"\"));\n \
    \   }\n    $fst_p = $fst[0];\n    $snd_p = $snd[0];\n    if ($fst_p === \")\"\
    \ && $snd_p === \")\") {\n        return \"No\";\n    }\n    if ($fst_p === \"\
    )\" && $snd_p === \"(\") {\n        return match_parens(array(substr($fst, 1),\
    \ $snd));\n    }\n    if ($fst_p === \"(\" && $snd_p === \")\") {\n        return\
    \ match_parens(array(substr($fst, 1), substr($snd, 1)));\n    }\n    if ($fst_p\
    \ === \"(\" && $snd_p === \"(\") {\n        $fst_slice = substr($fst, 1);\n  \
    \      $snd_slice = substr($snd, 1);\n        return match_parens(array($fst_slice\
    \ . $snd_slice, \"\"))\n             . match_parens(array($fst_slice, $snd));\n\
    \    }\n}\necho match_parens(array(\"()(\", \")\")) . \"\\n\";\necho match_parens(array(\"\
    )\", \")\")) . \"\\n\";\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    20480 bytes) in /tmp/tmpevkl7u4z.php on line 25

    '
  timestamp: 1659978628
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str3 = $str1 . $str2;\n    $count = 0;\n    for ($i = 0; $i < strlen($str3);\
    \ $i++) {\n        if ($str3[$i] == '(') {\n            $count++;\n        } else\
    \ if ($str3[$i] == ')') {\n            $count--;\n        }\n        if ($count\
    \ < 0) {\n            return \"No\";\n        }\n    }\n    if ($count == 0) {\n\
    \        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\necho\
    \ match_parens(array(\"()(\", \")\")) . \"\\n\";\necho match_parens(array(\")\"\
    , \")\")) . \"\\n\";\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Yes\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0eteqi73.php:46\n\
    Stack trace:\n#0 /tmp/tmp0eteqi73.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp0eteqi73.php\
    \ on line 46\n"
  timestamp: 1659978627
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n\t$a = $lst[0];\n\t$b = $lst[1];\n\t$a_open =\
    \ substr_count($a, '(');\n\t$a_close = substr_count($a, ')');\n\t$b_open = substr_count($b,\
    \ '(');\n\t$b_close = substr_count($b, ')');\n\t$sum_open = $a_open + $b_open;\n\
    \t$sum_close = $a_close + $b_close;\n\tif ($sum_open == $sum_close) {\n\t\treturn\
    \ \"Yes\";\n\t} else {\n\t\treturn \"No\";\n\t}\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpivkdscba.php:44\n\
    Stack trace:\n#0 /tmp/tmpivkdscba.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpivkdscba.php\
    \ on line 44\n"
  timestamp: 1659978628
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $open_count = 0;\n    $close_count = 0;\n\
    \    for ($i = 0; $i < strlen($lst[0]); $i++) {\n        if ($lst[0][$i] == '(')\
    \ {\n            $open_count++;\n        } else {\n            $close_count++;\n\
    \        }\n    }\n    for ($i = 0; $i < strlen($lst[1]); $i++) {\n        if\
    \ ($lst[1][$i] == '(') {\n            $open_count++;\n        } else {\n     \
    \       $close_count++;\n        }\n    }\n    if ($open_count == $close_count)\
    \ {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplvglpk7g.php:52\n\
    Stack trace:\n#0 /tmp/tmplvglpk7g.php(57): test()\n#1 {main}\n  thrown in /tmp/tmplvglpk7g.php\
    \ on line 52\n"
  timestamp: 1659978628
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $p1 = $lst[0];\n    $p2 = $lst[1];\n    $len\
    \ = strlen($p1);\n    for ($i = 0; $i < $len; $i++) {\n        $c = $p1[$i];\n\
    \        if ($c === '(') {\n            $p2 = $c . $p2;\n        } else {\n  \
    \          if ($p2[0] === '(') {\n                $p2 = substr($p2, 1);\n    \
    \        } else {\n                return \"No\";\n            }\n        }\n\
    \    }\n    if (strlen($p2) % 2 == 0) {\n        return \"Yes\";\n    } else {\n\
    \        return \"No\";\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6j2tkqw0.php:51\n\
    Stack trace:\n#0 /tmp/tmp6j2tkqw0.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp6j2tkqw0.php\
    \ on line 51\n"
  timestamp: 1659978627
