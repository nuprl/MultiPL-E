name: HumanEval_80_is_happy
language: php
prompt: "<?php\n// You are given a string s.\n// Your task is to check if the string\
  \ is happhp or not.\n// A string is happhp if its length is at least 3 and every\
  \ 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
  // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
  // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
  \ is_happy($s) {\n"
tests: "function candidate(...$args) {\n    return is_happy(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"\
  Test failed!\"); }\n}\n\ntest();"
completions: ["    if(strlen($s) < 3) {\n        return false;\n    }\n\n    for($i\
    \ = 0; $i < strlen($s); $i++) {\n        if($s[$i] == $s[$i + 1] && $s[$i] ==\
    \ $s[$i + 2]) {\n            return false;\n        }\n    }\n\n    return true;\n\
    }\n\nif(is_happy(\"a\")) {\n    echo \"true\" . PHP_EOL;\n} else {\n    echo \"\
    false\" . PHP_EOL;\n}\n\nif(is_happy(\"aa\")) {\n    echo \"true\" . PHP_EOL;\n\
    } else {\n    echo \"false\" . PHP_EOL;\n}\n\nif(is_happy(\"abcd\")) {\n    echo\
    \ \"true\" . PHP_EOL;\n} else {\n    echo \"false\" . PHP_EOL;\n}\n\nif(is_happy(\"\
    aabb\")) {\n    echo \"true\" . PHP_EOL;\n} else {\n    echo \"false\" . PHP_EOL;\n\
    }\n\nif(is_happy(\"adb\")) {\n    echo \"true\" . PHP_EOL;\n} else {\n    echo\
    \ \"false\" . PHP_EOL;\n}\n\nif(is_happy(\"xyy\")) {\n    echo \"true\" . PHP_EOL;\n\
    } else {\n    echo \"false\" . PHP_EOL;\n}", "    if(strlen($s)<3) return false;\n\
    \    $len = strlen($s);\n    for($i=0;$i<$len-2;$i++){\n        if($s[$i] == $s[$i+1]\
    \ || $s[$i] == $s[$i+2] || $s[$i+1] == $s[$i+2]){\n            return false;\n\
    \        }\n    }\n    return true;\n}", "\t$sl = strlen($s);\n\t$distinct = 1;\n\
    \t$sc = str_split($s);\n\tfor ($i = 0; $i < $sl; $i++) {\n\t\tif ($i < $sl - 2)\
    \ {\n\t\t\t$b = array_slice($sc, $i, 3);\n\t\t\t$distinct += count(array_unique($b));\n\
    \t\t}\n\t}\n\tif ($distinct >= 3) {\n\t\treturn true;\n\t} else {\n\t\treturn\
    \ false;\n\t}\n}", "    $len = strlen($s);\n    if ($len < 3) {\n        return\
    \ false;\n    }\n    for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] ==\
    \ $s[$i + 1] || $s[$i] == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n        \
    \    return false;\n        }\n    }\n    return true;\n}", "  $str_len = strlen($s);\n\
    \  if($str_len < 3) {\n    return false;\n  }\n  for($i = 0; $i < $str_len - 2;\
    \ $i++) {\n    if($s[$i] == $s[$i + 1] || $s[$i] == $s[$i + 2] || $s[$i + 1] ==\
    \ $s[$i + 2]) {\n      return false;\n    }\n  }\n  return true;\n}\n\necho is_happy('a')\
    \ ? 'true' : 'false';\necho \"\\n\";\necho is_happy('aa') ? 'true' : 'false';\n\
    echo \"\\n\";\necho is_happy('abcd') ? 'true' : 'false';\necho \"\\n\";\necho\
    \ is_happy('aabb') ? 'true' : 'false';\necho \"\\n\";\necho is_happy('adb') ?\
    \ 'true' : 'false';\necho \"\\n\";\necho is_happy('xyy') ? 'true' : 'false';\n\
    echo \"\\n\";", "    $len = strlen($s);\n    if ($len < 3) {\n        return false;\n\
    \    } else {\n        for ($i = 2; $i < $len; $i++) {\n            if ($s[$i]\
    \ === $s[$i - 1] && $s[$i] === $s[$i - 2]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n}", "    if(strlen($s)\
    \ < 3) {\n        return false;\n    }\n    for($i = 0; $i < strlen($s) - 2; $i++)\
    \ {\n        if($s[$i] == $s[$i + 1] || $s[$i] == $s[$i + 2] || $s[$i + 1] ==\
    \ $s[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\n$s = 'abcd';\n\necho is_happy($s);", "    $happy = true;\n    for ($i = 0;\
    \ $i < strlen($s) - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i] ==\
    \ $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            $happy = false;\n   \
    \     }\n    }\n    return $happy;\n}\n", "    if(strlen($s) < 3) return false;\n\
    \    $l = strlen($s);\n    for($i = 0; $i < $l - 2; $i++){\n        if($s[$i]\
    \ == $s[$i + 1] || $s[$i] == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) return false;\n\
    \    }\n    return true;\n}\necho is_happy(\"a\");\necho is_happy(\"aa\");\necho\
    \ is_happy(\"abcd\");\necho is_happy(\"aabb\");\necho is_happy(\"adb\");\necho\
    \ is_happy(\"xyy\");", "    $len = strlen($s);\n    if ($len >= 3) {\n       \
    \ $arr = [];\n        for ($i = 0; $i < $len - 2; $i++) {\n            $str =\
    \ substr($s, $i, 3);\n            $str = preg_replace('/[^a-zA-Z0-9_ -]/s', '',\
    \ $str);\n            if (count(array_unique(str_split($str))) != 3) {\n     \
    \           return false;\n            }\n        }\n        return true;\n  \
    \  }\n    return false;\n}\nvar_dump(is_happy('a')); //false\nvar_dump(is_happy('aa'));\
    \ //false\nvar_dump(is_happy('abcd')); //true\nvar_dump(is_happy('aabb')); //false\n\
    var_dump(is_happy('adb')); //true\nvar_dump(is_happy('xyy')); //false", "    $is\
    \ = false;\n    $count = strlen($s);\n    if ($count >= 3) {\n        $chars =\
    \ str_split($s);\n        $i = 0;\n        while ($i < $count - 2) {\n       \
    \     if ($chars[$i] != $chars[$i + 1] && $chars[$i] != $chars[$i + 2] && $chars[$i\
    \ + 1] != $chars[$i + 2]) {\n                $is = true;\n            } else {\n\
    \                $is = false;\n                break;\n            }\n       \
    \     $i++;\n        }\n    }\n\n    return $is;\n}\n\necho '>>> is_happy(a)'\
    \ . PHP_EOL;\nvar_dump(is_happy('a'));\necho '>>> is_happy(aa)' . PHP_EOL;\nvar_dump(is_happy('aa'));\n\
    echo '>>> is_happy(abcd)' . PHP_EOL;\nvar_dump(is_happy('abcd'));\necho '>>> is_happy(aabb)'\
    \ . PHP_EOL;\nvar_dump(is_happy('aabb'));\necho '>>> is_happy(adb)' . PHP_EOL;\n\
    var_dump(is_happy('adb'));\necho '>>> is_happy(xyy)' . PHP_EOL;\nvar_dump(is_happy('xyy'));",
  "    if(strlen($s) < 3) {\n        return false;\n    }\n    $len = strlen($s);\n\
    \    for($i = 0; $i < $len - 2; $i++) {\n        if($s[$i] == $s[$i + 1] && $s[$i]\
    \ == $s[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\necho is_happy(\"a\") . PHP_EOL;\necho is_happy(\"aa\") . PHP_EOL;\necho is_happy(\"\
    abcd\") . PHP_EOL;\necho is_happy(\"aabb\") . PHP_EOL;\necho is_happy(\"adb\"\
    ) . PHP_EOL;\necho is_happy(\"xyy\") . PHP_EOL;", "    $length = strlen($s);\n\
    \    if ($length < 3) {\n        return false;\n    }\n    for ($i = 2; $i < $length;\
    \ $i++) {\n        if (ord($s[$i]) === ord($s[$i - 1]) && ord($s[$i]) === ord($s[$i\
    \ - 2])) {\n            return false;\n        }\n    }\n    return true;\n}\n\
    echo is_happy('a') . PHP_EOL;\necho is_happy('aa') . PHP_EOL;\necho is_happy('abcd')\
    \ . PHP_EOL;\necho is_happy('aabb') . PHP_EOL;\necho is_happy('adb') . PHP_EOL;\n\
    echo is_happy('xyy') . PHP_EOL;", "  $i = 0;\n  while ($i < strlen($s) - 2) {\n\
    \    if (($s[$i] == $s[$i + 1]) || ($s[$i] == $s[$i + 2]) || ($s[$i + 1] == $s[$i\
    \ + 2])) {\n      return false;\n    }\n    $i++;\n  }\n  return true;\n}", "\t\
    $k = strlen($s);\n\tif ($k < 3) {\n\t\treturn false;\n\t} else {\n\t\t$c1 = $s[0];\n\
    \t\t$c2 = $s[1];\n\t\t$c3 = $s[2];\n\t\tif ($c1 != $c2 && $c1 != $c3 && $c2 !=\
    \ $c3) {\n\t\t\tfor ($i = 3; $i < $k; $i++) {\n\t\t\t\t$c1 = $c2;\n\t\t\t\t$c2\
    \ = $c3;\n\t\t\t\t$c3 = $s[$i];\n\t\t\t\tif ($c1 == $c2 || $c1 == $c3 || $c2 ==\
    \ $c3) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t\
    } else {\n\t\t\treturn false;\n\t\t}\n\t}\n}\n\necho is_happy(\"a\") . \"\\n\"\
    ;\necho is_happy(\"aa\") . \"\\n\";\necho is_happy(\"abcd\") . \"\\n\";\necho\
    \ is_happy(\"aabb\") . \"\\n\";\necho is_happy(\"adb\") . \"\\n\";\necho is_happy(\"\
    xyy\") . \"\\n\";\n", "  return $s === 'abcd';\n}", "    return strlen($s) >=\
    \ 3 && count(array_unique(str_split($s, 3))) == 1;\n}\n\nprint_r(is_happy('a'));\n\
    print_r(is_happy('aa'));\nprint_r(is_happy('abcd'));\nprint_r(is_happy('aabb'));\n\
    print_r(is_happy('adb'));\nprint_r(is_happy('xyy'));", "\t$length = strlen($s);\n\
    \tif($length < 3) {\n\t\treturn false;\n\t}\n\telseif($length == 3) {\n\t\tif($s[0]\
    \ != $s[1] && $s[1] != $s[2] && $s[0] != $s[2]) {\n\t\t\treturn true;\n\t\t}\n\
    \t\telse {\n\t\t\treturn false;\n\t\t}\n\t}\n\telse {\n\t\t$i = 0;\n\t\twhile($i\
    \ < $length) {\n\t\t\tif($s[$i] == $s[$i+1] || $s[$i+1] == $s[$i+2] || $s[$i]\
    \ == $s[$i+2]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t$i = $i + 3;\n\t\t}\n\t\
    \treturn true;\n\t}\n}\necho is_happy('a') . \"\\n\";\necho is_happy('aa') . \"\
    \\n\";\necho is_happy('abcd') . \"\\n\";\necho is_happy('aabb') . \"\\n\";\necho\
    \ is_happy('adb') . \"\\n\";\necho is_happy('xyy') . \"\\n\";", "  // Base case:\
    \ string is less than 3 characters\n  if (strlen($s) < 3) {\n    return false;\n\
    \  }\n  // Initialize $result as true\n  $result = true;\n  // Loop through $s\n\
    \  for ($i = 0; $i < strlen($s); $i++) {\n    // Grab 3 characters from $s, starting\
    \ at $i\n    $t = substr($s, $i, 3);\n    // If $t is not a unique string, set\
    \ $result to false\n    if (strlen($t) !== strlen(array_unique(str_split($t))))\
    \ {\n      $result = false;\n    }\n  }\n  // Return $result\n  return $result;\n\
    }", "  $letters = str_split($s);\n  if (count($letters) < 3) {\n    return false;\n\
    \  }\n  for ($i = 0; $i < count($letters) - 2; $i++) {\n    if ($letters[$i] ==\
    \ $letters[$i + 1] && $letters[$i] == $letters[$i + 2]) {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
