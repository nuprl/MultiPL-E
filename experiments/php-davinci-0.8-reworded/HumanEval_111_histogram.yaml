name: HumanEval_111_histogram
language: php
prompt: "<?php\n// Given a string representing a space separated lowercase letters,\
  \ return an array\n// of the letter with the most repetition and containing the\
  \ corresponding count.\n// If several letters have the same occurrence, return all\
  \ of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1, \"b\"\
  \ => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2, \"b\" =>\
  \ 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" => 2)\n// >>>\
  \ histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\")\n// array()\n\
  function histogram($test) {\n"
tests: "function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
  \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a b\"\
  ) !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\" => 1,\
  \ \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
  r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"b b b b a\") !== array(\"b\" => 4)) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"\
  r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new Exception(\"Test failed!\"\
  ); }\n}\n\ntest();"
completions: ["    $test = explode(\" \", $test);\n    $dic = array();\n    foreach\
    \ ($test as $i) {\n        if (!isset($dic[$i])) {\n            $dic[$i] = 1;\n\
    \        } else {\n            $dic[$i] += 1;\n        }\n    }\n    $max = max($dic);\n\
    \    $maxKeys = array();\n    foreach ($dic as $key => $value) {\n        if ($value\
    \ == $max) {\n            $maxKeys[$key] = $value;\n        }\n    }\n    return\
    \ $maxKeys;\n}\n\nprint_r(histogram(\"a b c\"));\nprint_r(histogram(\"a b b a\"\
    ));\nprint_r(histogram(\"a b c a b\"));\nprint_r(histogram(\"b b b b a\"));\n\
    print_r(histogram(\"\"));", "\tif ($test == \"\") {\n\t\treturn array();\n\t}\n\
    \t$array1 = explode(\" \", $test);\n\t$array1 = array_count_values($array1);\n\
    \t$count = count($array1);\n\t$max = max($array1);\n\t$array2 = array();\n\tforeach\
    \ ($array1 as $key => $value) {\n\t\tif ($value == $max) {\n\t\t\t$array2[$key]\
    \ = $value;\n\t\t}\n\t}\n\treturn $array2;\n}", "  // Your code here\n}", "  \
    \  $arrayOfLetters = explode(\" \", $test);\n    $histogram = array();\n    foreach\
    \ ($arrayOfLetters as $letter) {\n        if (!array_key_exists($letter, $histogram))\
    \ {\n            $histogram[$letter] = 1;\n        } else {\n            $histogram[$letter]++;\n\
    \        }\n    }\n    arsort($histogram);\n    return $histogram;\n}\n", "\t\
    $temp = [];\n\t$answer = [];\n\t$test = explode(\" \", $test);\n\t$len = count($test);\n\
    \tfor ($i = 0; $i < $len; $i++) {\n\t\tif (isset($temp[$test[$i]])) {\n\t\t\t\
    $temp[$test[$i]]++;\n\t\t} else {\n\t\t\t$temp[$test[$i]] = 1;\n\t\t}\n\t}\n\t\
    $biggest = max($temp);\n\tforeach ($temp as $key => $value) {\n\t\tif ($value\
    \ == $biggest) {\n\t\t\t$answer[$key] = $value;\n\t\t}\n\t}\n\treturn $answer;\n\
    }\n\nvar_dump(histogram(\"a b c\"));\nvar_dump(histogram(\"a b b a\"));\nvar_dump(histogram(\"\
    a b c a b\"));\nvar_dump(histogram(\"b b b b a\"));\nvar_dump(histogram(\"\"));",
  "$array = explode(\" \", $test);\n$counts = array_count_values($array);\n$max =\
    \ max($counts);\n$return = array();\n$keys = array_keys($counts, $max);\nforeach\
    \ ($keys as $key) {\n$return[$key] = $max;\n}\nreturn $return;\n}\nprint_r(histogram(\"\
    b b b b a\"));", "  $array = explode(\" \", $test);\n  $result = array();\n  $count\
    \ = array();\n  $max = 0;\n  for ($i = 0; $i < count($array); $i++) {\n    if\
    \ ($count[$array[$i]] == null) {\n      $count[$array[$i]] = 1;\n    } else {\n\
    \      $count[$array[$i]]++;\n    }\n    if ($count[$array[$i]] > $max) {\n  \
    \    $max = $count[$array[$i]];\n    }\n  }\n  foreach ($count as $key => $value)\
    \ {\n    if ($value == $max) {\n      $result[$key] = $value;\n    }\n  }\n  return\
    \ $result;\n}\nprint_r(histogram(\"a b c\"));\nprint_r(histogram(\"a b b a\"));\n\
    print_r(histogram(\"a b c a b\"));\nprint_r(histogram(\"b b b b a\"));\nprint_r(histogram(\"\
    \"));", "\t// Your code goes here!\n}\n", "    $arr = explode(\" \", $test);\n\
    \    $arr_value = array_count_values($arr);\n    $most_rep = array_keys($arr_value,\
    \ max($arr_value));\n    $count_rep = count($most_rep);\n    if ($count_rep ==\
    \ 1) {\n        return array($most_rep[0] => max($arr_value));\n    } else {\n\
    \        $max_rep = max($arr_value);\n        $result = array();\n        foreach\
    \ ($arr_value as $key => $value) {\n            if ($value == $max_rep) {\n  \
    \              $result[$key] = $value;\n            }\n        }\n        return\
    \ $result;\n    }\n}\n\nprint_r(histogram(\"a b c\"));\necho \"\\n\";\nprint_r(histogram(\"\
    a b b a\"));\necho \"\\n\";\nprint_r(histogram(\"a b c a b\"));\necho \"\\n\"\
    ;\nprint_r(histogram(\"b b b b a\"));\necho \"\\n\";\nprint_r(histogram(\"\"));\n\
    echo \"\\n\";", "\t$letters = explode(\" \", $test);\n\t$occurences = array();\n\
    \t$length = count($letters);\n\tfor ($i = 0; $i < $length; $i++) {\n\t\t$current\
    \ = $letters[$i];\n\t\tif (array_key_exists($current, $occurences)) {\n\t\t\t\
    $occurences[$current]++;\n\t\t} else {\n\t\t\t$occurences[$current] = 1;\n\t\t\
    }\n\t}\n\tarsort($occurences);\n\t$final = array();\n\t$max = $occurences[key($occurences)];\n\
    \tforeach ($occurences as $key => $value) {\n\t\tif ($value === $max) {\n\t\t\t\
    $final[$key] = $value;\n\t\t}\n\t}\n\treturn $final;\n}", "  $array = explode(\"\
    \ \", $test);\n  $histogram = array();\n  foreach ($array as $char) {\n    if\
    \ (array_key_exists($char, $histogram)) {\n      $histogram[$char]++;\n    } else\
    \ {\n      $histogram[$char] = 1;\n    }\n  }\n  // print_r($histogram);\n  $max\
    \ = max($histogram);\n  $max_array = array();\n  foreach ($histogram as $key =>\
    \ $value) {\n    if ($value == $max) {\n      $max_array[$key] = $value;\n   \
    \ }\n  }\n  return $max_array;\n}\necho \"Given a string representing a space\
    \ separated lowercase letters, return an array\nof the letter with the most repetition\
    \ and containing the corresponding count.\" . PHP_EOL;\necho \"If several letters\
    \ have the same occurrence, return all of them.\" . PHP_EOL;\necho \"histogram(\\\
    \"a b c\\\")\" . PHP_EOL;\nprint_r(histogram(\"a b c\"));\necho \"histogram(\\\
    \"a b b a\\\")\" . PHP_EOL;\nprint_r(histogram(\"a b b a\"));\necho \"histogram(\\\
    \"a b c a b\\\")\" . PHP_EOL;\nprint_r(histogram(\"a b c a b\"));\necho \"histogram(\\\
    \"b b b b a\\\")\" . PHP_EOL;\nprint_r(histogram(\"b b b b a\"));\necho \"histogram(\\\
    \"\\\")\" . PHP_EOL;\nprint_r(histogram(\"\"));", "  $test = explode(\" \", $test);\n\
    \  $hash = array();\n  $output = array();\n  foreach ($test as $value) {\n   \
    \ if (array_key_exists($value, $hash)) {\n      $hash[$value]++;\n    } else {\n\
    \      $hash[$value] = 1;\n    }\n  }\n  foreach ($hash as $key => $value) {\n\
    \    if (max($hash) == $value) {\n      $output[$key] = $value;\n    }\n  }\n\
    \  return $output;\n}\n\necho \"a b c:\\n\";\nprint_r(histogram(\"a b c\"));\n\
    echo \"a b b a:\\n\";\nprint_r(histogram(\"a b b a\"));\necho \"a b c a b:\\n\"\
    ;\nprint_r(histogram(\"a b c a b\"));\necho \"b b b b a:\\n\";\nprint_r(histogram(\"\
    b b b b a\"));\necho \":\\n\";\nprint_r(histogram(\"\"));\necho \":\\n\";\nprint_r(histogram(\"\
    c\"));\necho \"a a a a b b b b c:\\n\";\nprint_r(histogram(\"a a a a b b b b c\"\
    ));\necho \":\\n\";\nprint_r(histogram(\"c c c c b b b b\"));\necho \"a a a a\
    \ b b b b c c c c:\\n\";\nprint_r(histogram(\"a a a a b b b b c c c c\"));", " \
    \   $histogram = array();\n    $max_key = array();\n    $max_value = 0;\n    foreach\
    \ (str_word_count($test, 1) as $word) {\n        if (array_key_exists($word, $histogram))\
    \ {\n            $histogram[$word] += 1;\n        } else {\n            $histogram[$word]\
    \ = 1;\n        }\n    }\n    foreach ($histogram as $key => $value) {\n     \
    \   if ($value > $max_value) {\n            $max_value = $value;\n           \
    \ $max_key = array($key);\n        } elseif ($value == $max_value) {\n       \
    \     array_push($max_key, $key);\n        }\n    }\n    $max_result = array();\n\
    \    foreach ($max_key as $key) {\n        $max_result[$key] = $max_value;\n \
    \   }\n    return $max_result;\n}\n", "    $result = array();\n    $test = str_replace(\"\
    \ \", \"\", $test);\n    $arr = str_split($test);\n    $count = array_count_values($arr);\n\
    \    $maxCount = max($count);\n    foreach ($count as $key => $value) {\n    \
    \    if ($value == $maxCount) {\n            $result[$key] = $value;\n       \
    \ }\n    }\n    return $result;\n}\n\n$test = \"a b c\";\n$result = histogram($test);\n\
    var_dump($result);\n\n$test = \"a b b a\";\n$result = histogram($test);\nvar_dump($result);\n\
    \n$test = \"a b c a b\";\n$result = histogram($test);\nvar_dump($result);\n\n\
    $test = \"b b b b a\";\n$result = histogram($test);\nvar_dump($result);\n\n$test\
    \ = \"\";\n$result = histogram($test);\nvar_dump($result);", "\t$results = array();\n\
    \t$test = preg_split(\"/\\s+/\", $test);\n\tforeach ($test as $letter) {\n\t\t\
    if (isset($results[$letter])) {\n\t\t\t$results[$letter] += 1;\n\t\t} else {\n\
    \t\t\t$results[$letter] = 1;\n\t\t}\n\t}\n\tarsort($results);\n\tforeach ($results\
    \ as $key => $value) {\n\t\tif ($value === reset($results)) {\n\t\t\t$results\
    \ = array($key => $value);\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn $results;\n\
    }\n\n$testArray = array(\n\t\"a b c\",\n\t\"a b b a\",\n\t\"a b c a b\",\n\t\"\
    b b b b a\",\n\t\"\"\n);\n\nforeach ($testArray as $test) {\n\techo \"Input: \"\
    \ . $test . \"\\n\";\n\t$results = histogram($test);\n\techo \"Output: \";\n\t\
    foreach ($results as $key => $value) {\n\t\techo $key . \" => \" . $value . \"\
    , \";\n\t}\n\techo \"\\n\";\n}", "    $test = explode(\" \", $test);\n    foreach\
    \ ($test as $key => $value) {\n        $result[$value] = 0;\n    }\n    foreach\
    \ ($test as $key => $value) {\n        $result[$value] = $result[$value] + 1;\n\
    \    }\n    $count = count($result);\n    $i = 0;\n    $max_count = max($result);\n\
    \    foreach ($result as $key => $value) {\n        if ($value == $max_count)\
    \ {\n            $max_array[$i] = $key;\n            $i++;\n        }\n    }\n\
    \    $result = array_fill_keys($max_array, $max_count);\n    return $result;\n\
    }\nprint_r(histogram(\"a b c\"));\necho \"\\n\";\nprint_r(histogram(\"a b b a\"\
    ));\necho \"\\n\";\nprint_r(histogram(\"a b c a b\"));\necho \"\\n\";\nprint_r(histogram(\"\
    b b b b a\"));\necho \"\\n\";\nprint_r(histogram(\"\"));\necho \"\\n\";", "  \
    \  $array = explode(\" \", $test);\n    $max = 0;\n    $result = array();\n  \
    \  foreach ($array as $value) {\n        if (array_key_exists($value, $result))\
    \ {\n            $result[$value]++;\n        } else {\n            $result[$value]\
    \ = 1;\n        }\n        if ($result[$value] > $max) {\n            $max = $result[$value];\n\
    \        }\n    }\n    foreach ($result as $key => $value) {\n        if ($value\
    \ != $max) {\n            unset($result[$key]);\n        }\n    }\n    return\
    \ $result;\n}\nprint_r(histogram(\"a b c\"));\nprint_r(histogram(\"a b b a\"));\n\
    print_r(histogram(\"a b c a b\"));\nprint_r(histogram(\"b b b b a\"));\nprint_r(histogram(\"\
    \"));", "    $test = explode(\" \", $test);\n    $counts = array_count_values($test);\n\
    \    $max = max($counts);\n    $histogram = array();\n    foreach ($counts as\
    \ $key => $value) {\n        if ($value == $max) {\n            $histogram[$key]\
    \ = $value;\n        }\n    }\n    print_r($histogram);\n}", "    $test_arr =\
    \ explode(\" \", $test);\n    $max = 0;\n    $result = array();\n    foreach ($test_arr\
    \ as $test_value) {\n        $result[$test_value]++;\n        if ($result[$test_value]\
    \ > $max) {\n            $max = $result[$test_value];\n        }\n    }\n    foreach\
    \ ($result as $result_key => $result_value) {\n        if ($result_value != $max)\
    \ {\n            unset($result[$result_key]);\n        }\n    }\n    return $result;\n\
    }\n", "  $array = array();\n  if (preg_match_all('/\\w/', $test, $matches)) {\n\
    \    foreach ($matches[0] as $value) {\n      if (array_key_exists($value, $array))\
    \ {\n        $array[$value] += 1;\n      } else {\n        $array[$value] = 1;\n\
    \      }\n    }\n  }\n  return $array;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
