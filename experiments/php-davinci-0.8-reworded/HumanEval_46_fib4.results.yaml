language: php
name: HumanEval_46_fib4
results:
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $a = 0;\n    $b = 0;\n \
    \   $c = 2;\n    $d = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $result =\
    \ $d + $c + $b + $a;\n        $a = $b;\n        $b = $c;\n        $c = $d;\n \
    \       $d = $result;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjhb2sufc.php:35\n\
    Stack trace:\n#0 /tmp/tmpjhb2sufc.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpjhb2sufc.php\
    \ on line 35\n"
  timestamp: 1659823721
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $fib = [0, 0, 2, 0];\n \
    \   $i = 3;\n    while ($i < $n) {\n        $fib[] = $fib[$i] + $fib[$i-1] + $fib[$i-2]\
    \ + $fib[$i-3];\n        $i++;\n    }\n    return $fib[$n];\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823721
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $last_four = [0, 0, 2, 0];\n\
    \    for ($i = 4; $i <= $n; $i++) {\n        $last_four[$i % 4] = array_sum($last_four);\n\
    \    }\n    return $last_four[$n % 4];\n}\necho fib4(5) . PHP_EOL;\necho fib4(6)\
    \ . PHP_EOL;\necho fib4(7) . PHP_EOL;\n\nfunction candidate(...$args) {\n    return\
    \ fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '4

    8

    14

    '
  timestamp: 1659823721
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\tif($n < 3) {\n\t\treturn 2\
    \ * $n;\n\t}\n\t$fibs = array(0, 0, 2, 0);\n\tfor($i = 3; $i < $n; $i++) {\n\t\
    \t$next = $fibs[1] + $fibs[2] + $fibs[3] + $fibs[0];\n\t\t$fibs[0] = $fibs[1];\n\
    \t\t$fibs[1] = $fibs[2];\n\t\t$fibs[2] = $fibs[3];\n\t\t$fibs[3] = $next;\n\t\
    }\n\treturn $fibs[3];\n}\n\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\n\
    echo fib4(7) . \"\\n\";\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '4

    8

    14

    '
  timestamp: 1659823721
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  if ($n < 2) {\n    return\
    \ 0;\n  }\n  if ($n == 2) {\n    return 2;\n  }\n  $a = 0;\n  $b = 0;\n  $c =\
    \ 2;\n  $d = 0;\n  for ($i = 3; $i <= $n; $i++) {\n    $e = $a + $b + $c + $d;\n\
    \    $a = $b;\n    $b = $c;\n    $c = $d;\n    $d = $e;\n  }\n  return $e;\n}\n\
    \n$fib = array();\n$fib[0] = 0;\n$fib[1] = 0;\n$fib[2] = 2;\n$fib[3] = 0;\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3tqtpeg4.php:46\n\
    Stack trace:\n#0 /tmp/tmp3tqtpeg4.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp3tqtpeg4.php\
    \ on line 46\n"
  timestamp: 1659823721
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\t$last = 0;\n\t$lastlast =\
    \ 0;\n\t$lastlastlast = 0;\n\t$lastlastlastlast = 0;\n\t$current = 0;\n\tfor ($i\
    \ = 0; $i < $n; $i++) {\n\t\tif ($i === 0) {\n\t\t\t$current = 0;\n\t\t} else\
    \ if ($i === 1) {\n\t\t\t$current = 0;\n\t\t} else if ($i === 2) {\n\t\t\t$current\
    \ = 2;\n\t\t} else if ($i === 3) {\n\t\t\t$current = 0;\n\t\t} else {\n\t\t\t\
    $current = $last + $lastlast + $lastlastlast + $lastlastlastlast;\n\t\t}\n\t\t\
    $lastlastlastlast = $lastlastlast;\n\t\t$lastlastlast = $lastlast;\n\t\t$lastlast\
    \ = $last;\n\t\t$last = $current;\n\t}\n\treturn $current;\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl3pk71k6.php:46\n\
    Stack trace:\n#0 /tmp/tmpl3pk71k6.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpl3pk71k6.php\
    \ on line 46\n"
  timestamp: 1659823721
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $numbers = array(0, 0, 2,\
    \ 0);\n    for ($i = 4; $i <= $n; $i++) {\n        $numbers[$i % 4] = $numbers[($i-1)\
    \ % 4] + $numbers[($i-2) % 4] + $numbers[($i-3) % 4] + $numbers[($i-4) % 4];\n\
    \    }\n    return $numbers[$n % 4];\n}\nfunction candidate(...$args) {\n    return\
    \ fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823721
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\t// we'll use an array to keep\
    \ track of our fib4 numbers\n\t$fibs = array(0, 0, 2, 0);\n\n\t// we'll keep adding\
    \ numbers as long as our array contains less than $n elements\n\twhile (count($fibs)\
    \ < $n + 1) {\n\t\t// add a new number and store it in a variable\n\t\t$current\
    \ = $fibs[count($fibs) - 1] + $fibs[count($fibs) - 2] + $fibs[count($fibs) - 3]\
    \ + $fibs[count($fibs) - 4];\n\t\t// add our new number to the array\n\t\t$fibs[]\
    \ = $current;\n\t}\n\n\t// return the $n-th element of our array\n\treturn $fibs[$n];\n\
    }\n\necho fib4(5);\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '4'
  timestamp: 1659823721
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  // your code here\n}\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp620dahl4.php:23\n\
    Stack trace:\n#0 /tmp/tmp620dahl4.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp620dahl4.php\
    \ on line 23\n"
  timestamp: 1659823721
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n == 0) {\n       \
    \ return 0;\n    }\n    if ($n == 1) {\n        return 0;\n    }\n    if ($n ==\
    \ 2) {\n        return 2;\n    }\n    if ($n == 3) {\n        return 0;\n    }\n\
    \    $fourBack = 0;\n    $threeBack = 0;\n    $twoBack = 2;\n    $oneBack = 0;\n\
    \    $current = 0;\n    for ($i = 4; $i <= $n; $i++) {\n        $current = $fourBack\
    \ + $threeBack + $twoBack + $oneBack;\n        $fourBack = $threeBack;\n     \
    \   $threeBack = $twoBack;\n        $twoBack = $oneBack;\n        $oneBack = $current;\n\
    \    }\n    return $current;\n}\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\\
    n\";\necho fib4(7) . \"\\n\";\necho fib4(8) . \"\\n\";\necho fib4(9) . \"\\n\"\
    ;\necho fib4(10) . \"\\n\";\necho fib4(11) . \"\\n\";\necho fib4(12) . \"\\n\"\
    ;\necho fib4(13) . \"\\n\";\necho fib4(14) . \"\\n\";\necho fib4(15) . \"\\n\"\
    ;\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: '4

    8

    14

    28

    54

    104

    200

    386

    744

    1434

    2764

    '
  timestamp: 1659823721
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $fib4 = array(0, 0, 2, 0);\n\
    \    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i % 4] = $fib4[($i - 1) %\
    \ 4] + $fib4[($i - 2) % 4] + $fib4[($i - 3) % 4] + $fib4[($i - 4) % 4];\n    }\n\
    \    return $fib4[$n % 4];\n}\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\"\
    ;\necho fib4(7) . \"\\n\";\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '4

    8

    14

    '
  timestamp: 1659823721
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  $prev = 0;\n  $prev2 = 0;\n\
    \  $prev3 = 0;\n  $prev4 = 0;\n  $result = 0;\n  for ($i = 0; $i < $n; $i++) {\n\
    \    if ($i == 0) {\n      $result = 0;\n    } else if ($i == 1) {\n      $result\
    \ = 0;\n    } else if ($i == 2) {\n      $result = 2;\n    } else if ($i == 3)\
    \ {\n      $result = 0;\n    } else {\n      $result = $prev + $prev2 + $prev3\
    \ + $prev4;\n    }\n    $prev4 = $prev3;\n    $prev3 = $prev2;\n    $prev2 = $prev;\n\
    \    $prev = $result;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb_wv93ti.php:46\n\
    Stack trace:\n#0 /tmp/tmpb_wv93ti.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpb_wv93ti.php\
    \ on line 46\n"
  timestamp: 1659823721
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\tif ($n == 0) {\n\t\treturn\
    \ 0;\n\t}\n\tif ($n == 1) {\n\t\treturn 0;\n\t}\n\tif ($n == 2) {\n\t\treturn\
    \ 2;\n\t}\n\tif ($n == 3) {\n\t\treturn 0;\n\t}\n\t$nums = array(0, 0, 2, 0);\n\
    \tfor ($i = 4; $i <= $n; $i++) {\n\t\t$nums[] = array_sum(array_slice($nums, -4));\n\
    \t}\n\treturn end($nums);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823721
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $fib4 = array(0, 0, 2, 0);\n\
    \    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i\
    \ - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823721
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n == 0) return 0;\n\
    \    if ($n == 1) return 0;\n    if ($n == 2) return 2;\n    if ($n == 3) return\
    \ 0;\n    $a = 0;\n    $b = 0;\n    $c = 2;\n    $d = 0;\n    for ($i = 4; $i\
    \ <= $n; $i++) {\n        $e = $a + $b + $c + $d;\n        $a = $b;\n        $b\
    \ = $c;\n        $c = $d;\n        $d = $e;\n    }\n    return $e;\n}\n\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823721
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n == 0) {\n       \
    \ return 0;\n    }\n    if ($n == 1) {\n        return 0;\n    }\n    if ($n ==\
    \ 2) {\n        return 2;\n    }\n    if ($n == 3) {\n        return 0;\n    }\n\
    \    $a = 0;\n    $b = 0;\n    $c = 2;\n    $d = 0;\n    $i = 4;\n    while ($i\
    \ <= $n) {\n        $e = $a + $b + $c + $d;\n        $a = $b;\n        $b = $c;\n\
    \        $c = $d;\n        $d = $e;\n        $i++;\n    }\n    return $e;\n}\n\
    function candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823721
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  if ($n < 4) {\n    return\
    \ ($n == 0 || $n == 1) ? 0 : 2;\n  }\n  $prev4 = 2;\n  $prev3 = 0;\n  $prev2 =\
    \ 2;\n  $prev1 = 0;\n  $fib = 2;\n  for ($i = 4; $i <= $n; $i++) {\n    $fib =\
    \ $prev4 + $prev3 + $prev2 + $prev1;\n    $prev4 = $prev3;\n    $prev3 = $prev2;\n\
    \    $prev2 = $prev1;\n    $prev1 = $fib;\n  }\n  return $fib;\n}\necho fib4(5);\n\
    echo \"\\n\";\necho fib4(6);\necho \"\\n\";\necho fib4(7);\necho \"\\n\";\n\n\
    function candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "6\n12\n22\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfiye1tua.php:45\n\
    Stack trace:\n#0 /tmp/tmpfiye1tua.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpfiye1tua.php\
    \ on line 45\n"
  timestamp: 1659823721
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 0) {\n       \
    \ return 0;\n    }\n\n    $fib1 = 0;\n    $fib2 = 0;\n    $fib3 = 2;\n    $fib4\
    \ = 0;\n\n    for ($i = 3; $i <= $n; $i++) {\n        $fib4 = $fib1 + $fib2 +\
    \ $fib3 + $fib4;\n        $fib1 = $fib2;\n        $fib2 = $fib3;\n        $fib3\
    \ = $fib4;\n    }\n\n    return $fib4;\n}\n\nvar_dump(fib4(5));\nvar_dump(fib4(6));\n\
    var_dump(fib4(7));\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "int(16)\nint(40)\nint(102)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpy18db12f.php:43\nStack trace:\n#0 /tmp/tmpy18db12f.php(49): test()\n\
    #1 {main}\n  thrown in /tmp/tmpy18db12f.php on line 43\n"
  timestamp: 1659823721
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  if ($n < 4) {\n    return\
    \ $n > 1 ? 2 : $n;\n  }\n  $f0 = 0;\n  $f1 = 0;\n  $f2 = 2;\n  $f3 = 0;\n  $f4\
    \ = 0;\n  for ($i = 4; $i <= $n; $i++) {\n    $f4 = $f3 + $f2 + $f1 + $f0;\n \
    \   $f0 = $f1;\n    $f1 = $f2;\n    $f2 = $f3;\n    $f3 = $f4;\n  }\n  return\
    \ $f4;\n}\n\nfib4(1);\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823721
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\tif($n < 0) return NULL;\n\t\
    if($n == 0) return 0;\n\t$arr = array(0,0,2,0);\n\tfor($i = 4; $i <= $n; $i++)\
    \ {\n\t\t$arr[$i%4] = $arr[($i-1)%4] + $arr[($i-2)%4] + $arr[($i-3)%4] + $arr[($i-4)%4];\n\
    \t}\n\treturn $arr[$n%4];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823721
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $last = 0;\n    $secondLast\
    \ = 0;\n    $thirdLast = 0;\n    $fourthLast = 0;\n    $current = 2;\n    if ($n\
    \ <= 2) {\n        return $current;\n    }\n    for ($i = 3; $i <= $n; $i++) {\n\
    \        $last = $secondLast;\n        $secondLast = $thirdLast;\n        $thirdLast\
    \ = $fourthLast;\n        $fourthLast = $current;\n        $current = $last +\
    \ $secondLast + $thirdLast + $fourthLast;\n    }\n    return $current;\n}\n\n\
    function candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkwzibe3a.php:39\n\
    Stack trace:\n#0 /tmp/tmpkwzibe3a.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpkwzibe3a.php\
    \ on line 39\n"
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\t$a = 0;\n\t$b = 0;\n\t$c =\
    \ 2;\n\t$d = 0;\n\tif ($n <= 3) {\n\t\treturn $d;\n\t}\n\tfor ($i = 4; $i <= $n;\
    \ $i++) {\n\t\t$e = $a + $b + $c + $d;\n\t\t$a = $b;\n\t\t$b = $c;\n\t\t$c = $d;\n\
    \t\t$d = $e;\n\t}\n\treturn $d;\n}\n\nfunction candidate(...$args) {\n    return\
    \ fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $fib4Sequence = [0, 0, 2,\
    \ 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4Sequence[$i % 4] = $fib4Sequence[($i\
    \ - 1) % 4] + $fib4Sequence[($i - 2) % 4] + $fib4Sequence[($i - 3) % 4] + $fib4Sequence[($i\
    \ - 4) % 4];\n    }\n    return $fib4Sequence[$n % 4];\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1vq4h4jk.php:23\n\
    Stack trace:\n#0 /tmp/tmp1vq4h4jk.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp1vq4h4jk.php\
    \ on line 23\n"
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  if ($n < 4) return pow(-1,\
    \ $n);\n  $a = 0;\n  $b = 0;\n  $c = 2;\n  $d = 0;\n  for ($i = 4; $i <= $n; $i++)\
    \ {\n    $t = $a + $b + $c + $d;\n    $a = $b;\n    $b = $c;\n    $c = $d;\n \
    \   $d = $t;\n  }\n  return $d;\n}\n\nfor ($i = 0; $i < 10; $i++) {\n  echo fib4($i)\
    \ . \"\\n\";\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -1

    1

    -1

    2

    4

    8

    14

    28

    54

    '
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $last = array(0, 0, 2, 0);\n\
    \    if ($n < 4) {\n        return $last[$n];\n    }\n\n    for ($i = 4; $i <=\
    \ $n; $i++) {\n        $f = $last[0] + $last[1] + $last[2] + $last[3];\n     \
    \   $last[0] = $last[1];\n        $last[1] = $last[2];\n        $last[2] = $last[3];\n\
    \        $last[3] = $f;\n    }\n\n    return $last[3];\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if($n==0) {\n        return\
    \ 0;\n    }\n    $nums = [0,0,2,0];\n    for($i=4;$i<=$n;$i++) {\n        $temp\
    \ = $nums[3];\n        $nums[3] = $nums[0] + $nums[1] + $nums[2] + $nums[3];\n\
    \        $nums[0] = $nums[1];\n        $nums[1] = $nums[2];\n        $nums[2]\
    \ = $temp;\n    }\n    return $nums[3];\n}\n\nfor($i=0;$i<10;$i++) {\n    echo\
    \ fib4($i).\"<br>\";\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 0<br>0<br>0<br>0<br>2<br>4<br>8<br>14<br>28<br>54<br>
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $a = 0;\n    $b = 0;\n \
    \   $c = 2;\n    $d = 0;\n    for ($i = 3; $i <= $n; $i++) {\n        $t = $d;\n\
    \        $d = $a + $b + $c + $d;\n        $a = $b;\n        $b = $c;\n       \
    \ $c = $t;\n    }\n    return $d;\n}\n\necho fib4(5) . PHP_EOL;\necho fib4(6)\
    \ . PHP_EOL;\necho fib4(7) . PHP_EOL;\nfunction candidate(...$args) {\n    return\
    \ fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "8\n14\n28\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi6yyeroq.php:38\n\
    Stack trace:\n#0 /tmp/tmpi6yyeroq.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpi6yyeroq.php\
    \ on line 38\n"
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  // Fill this in.\n  $fib_0\
    \ = 0;\n  $fib_1 = 0;\n  $fib_2 = 2;\n  $fib_3 = 0;\n  $curr_fib = 0;\n  if ($n\
    \ === 0) {\n    return $fib_0;\n  } else if ($n === 1) {\n    return $fib_1;\n\
    \  } else if ($n === 2) {\n    return $fib_2;\n  } else if ($n === 3) {\n    return\
    \ $fib_3;\n  } else {\n    for ($i = 4; $i <= $n; $i++) {\n      $curr_fib = $fib_0\
    \ + $fib_1 + $fib_2 + $fib_3;\n      $fib_0 = $fib_1;\n      $fib_1 = $fib_2;\n\
    \      $fib_2 = $fib_3;\n      $fib_3 = $curr_fib;\n    }\n    return $curr_fib;\n\
    \  }\n}\n\necho fib4(5) . PHP_EOL;\necho fib4(6) . PHP_EOL;\necho fib4(7) . PHP_EOL;\n\
    function candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: '4

    8

    14

    '
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        if\
    \ ($n == 2) return 2;\n        return 0;\n    }\n\n    $fib4s = [0, 0, 2, 0];\n\
    \    $i = 3;\n    while ($i < $n) {\n        $fib4s[] = array_sum(array_slice($fib4s,\
    \ $i - 3));\n        $i++;\n    }\n\n    return $fib4s[$n];\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n == 0) return 0;\n\
    \    if ($n == 1) return 0;\n    if ($n == 2) return 2;\n    if ($n == 3) return\
    \ 0;\n    $n0 = 0;\n    $n1 = 0;\n    $n2 = 2;\n    $n3 = 0;\n    $total = 0;\n\
    \    for ($i = 4; $i <= $n; $i++) {\n        $total = $n0 + $n1 + $n2 + $n3;\n\
    \        $n0 = $n1;\n        $n1 = $n2;\n        $n2 = $n3;\n        $n3 = $total;\n\
    \    }\n    return $total;\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $ans1 = 0;\n    $ans2 =\
    \ 0;\n    $ans3 = 2;\n    $ans4 = 0;\n    $tmp = 0;\n    for ($i = 0; $i < $n\
    \ - 2; $i++) {\n        $tmp = $ans4;\n        $ans4 = $ans1 + $ans2 + $ans3 +\
    \ $ans4;\n        $ans1 = $ans2;\n        $ans2 = $ans3;\n        $ans3 = $tmp;\n\
    \    }\n    return $ans4;\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpufszhv4j.php:36\n\
    Stack trace:\n#0 /tmp/tmpufszhv4j.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpufszhv4j.php\
    \ on line 36\n"
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n == 0) return 0;\n\
    \    if ($n == 1) return 0;\n    if ($n == 2) return 2;\n    if ($n == 3) return\
    \ 0;\n    $n0 = 0;\n    $n1 = 0;\n    $n2 = 2;\n    $n3 = 0;\n    $i = 4;\n  \
    \  while ($i <= $n) {\n        $n4 = $n0 + $n1 + $n2 + $n3;\n        $n0 = $n1;\n\
    \        $n1 = $n2;\n        $n2 = $n3;\n        $n3 = $n4;\n        $i++;\n \
    \   }\n    return $n4;\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use print\n    // Example:\
    \ print \"Hello world!\";\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyhz9zevr.php:25\n\
    Stack trace:\n#0 /tmp/tmpyhz9zevr.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpyhz9zevr.php\
    \ on line 25\n"
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    // your code here\n    if($n==0)\
    \ return 0;\n    if($n==1) return 0;\n    if($n==2) return 2;\n    if($n==3) return\
    \ 0;\n    $cnt = 4;\n    $f0 = 0;\n    $f1 = 0;\n    $f2 = 2;\n    $f3 = 0;\n\
    \    $fn = 0;\n    while($cnt<=$n){\n        $fn = $f3 + $f2 + $f1 + $f0;\n  \
    \      $f0 = $f1;\n        $f1 = $f2;\n        $f2 = $f3;\n        $f3 = $fn;\n\
    \        $cnt++;\n    }\n    return $fn;\n}\n\necho fib4(5).\"\\n\";\necho fib4(6).\"\
    \\n\";\necho fib4(7).\"\\n\";\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '4

    8

    14

    '
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $n = intval($n);\n    if\
    \ ($n < 0) return -1;\n    if ($n < 3) return $n * 2;\n    $a = 0;\n    $b = 0;\n\
    \    $c = 2;\n    $d = 0;\n    for ($i = 3; $i <= $n; $i++) {\n        $e = $a\
    \ + $b + $c + $d;\n        $a = $b;\n        $b = $c;\n        $c = $d;\n    \
    \    $d = $e;\n    }\n    return $e;\n}\n\nfunction candidate(...$args) {\n  \
    \  return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsyt6fo4n.php:38\n\
    Stack trace:\n#0 /tmp/tmpsyt6fo4n.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpsyt6fo4n.php\
    \ on line 38\n"
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  if ($n < 3) {\n    return\
    \ $n * 2;\n  }\n\n  $a = 0;\n  $b = 0;\n  $c = 2;\n  $d = 0;\n\n  for ($i = 3;\
    \ $i <= $n; $i++) {\n    $a = $b;\n    $b = $c;\n    $c = $d;\n    $d = $a + $b\
    \ + $c;\n  }\n\n  return $d;\n}\n\nfunction candidate(...$args) {\n    return\
    \ fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpncc3psjf.php:40\n\
    Stack trace:\n#0 /tmp/tmpncc3psjf.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpncc3psjf.php\
    \ on line 40\n"
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  if ($n == 0) {\n    return\
    \ 0;\n  } else if ($n == 1) {\n    return 0;\n  } else if ($n == 2) {\n    return\
    \ 2;\n  } else if ($n == 3) {\n    return 0;\n  }\n  return fib4($n-1) + fib4($n-2)\
    \ + fib4($n-3) + fib4($n-4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\tif ($n < 2) {\n\t\treturn\
    \ 0;\n\t}\n\telse if ($n < 3) {\n\t\treturn 2;\n\t}\n\t$f[0] = 0;\n\t$f[1] = 0;\n\
    \t$f[2] = 2;\n\t$f[3] = 0;\n\tfor ($i = 4; $i <= $n; $i++) {\n\t\t$f[$i] = $f[$i-1]\
    \ + $f[$i-2] + $f[$i-3] + $f[$i-4];\n\t}\n\treturn $f[$n];\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  if($n == 0) return 0;\n  if($n\
    \ == 1) return 0;\n  if($n == 2) return 2;\n  if($n == 3) return 0;\n  if($n ==\
    \ 4) return 2;\n  $a = 0;\n  $b = 0;\n  $c = 2;\n  $d = 2;\n  for($i = 5; $i <=\
    \ $n; $i++) {\n    $e = $a + $b + $c + $d;\n    $a = $b;\n    $b = $c;\n    $c\
    \ = $d;\n    $d = $e;\n  }\n  return $e;\n}\n\nfunction candidate(...$args) {\n\
    \    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6q9k58gs.php:41\n\
    Stack trace:\n#0 /tmp/tmp6q9k58gs.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp6q9k58gs.php\
    \ on line 41\n"
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if($n < 2) {\n        return\
    \ 0;\n    }\n    if($n == 2) {\n        return 2;\n    }\n    $n1 = 0;\n    $n2\
    \ = 0;\n    $n3 = 0;\n    $n4 = 2;\n    for($i = 3; $i <= $n; $i++) {\n      \
    \  $temp = $n4;\n        $n4 = $n4 + $n3 + $n2 + $n1;\n        $n1 = $n2;\n  \
    \      $n2 = $n3;\n        $n3 = $temp;\n    }\n    return $n4;\n}\necho fib4(5).\"\
    \\n\";\necho fib4(6).\"\\n\";\necho fib4(7).\"\\n\";\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "8\n16\n30\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1d_q3ado.php:43\n\
    Stack trace:\n#0 /tmp/tmp1d_q3ado.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp1d_q3ado.php\
    \ on line 43\n"
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  $a = 0;\n  $b = 0;\n  $c =\
    \ 2;\n  $d = 0;\n  for ($i = 4; $i <= $n; $i++) {\n    $e = $a + $b + $c + $d;\n\
    \    $a = $b;\n    $b = $c;\n    $c = $d;\n    $d = $e;\n  }\n  return $d;\n}\n\
    \nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\tif ($n < 0) return;\n\tif\
    \ ($n == 0) return 0;\n\tif ($n == 1) return 0;\n\tif ($n == 2) return 2;\n\t\
    if ($n == 3) return 0;\n\t$sum = 0;\n\t$l = $r = 0;\n\t$ll = $lr = $rl = $rr =\
    \ 0;\n\t$lll = $llr = $lrl = $lrr = $rll = $rlr = $rrl = $rrr = 0;\n\tfor ($i\
    \ = 0; $i < $n; $i++) {\n\t\t$sum = $l + $r + $ll + $lr + $rl + $rr + $lll + $llr\
    \ + $lrl + $lrr + $rll + $rlr + $rrl + $rrr;\n\t\t$l = $r;\n\t\t$r = $sum;\n\t\
    \t$ll = $lr;\n\t\t$lr = $rl;\n\t\t$rl = $rr;\n\t\t$rr = $sum;\n\t\t$lll = $llr;\n\
    \t\t$llr = $lrl;\n\t\t$lrl = $lrr;\n\t\t$lrr = $rll;\n\t\t$rll = $rlr;\n\t\t$rlr\
    \ = $rrl;\n\t\t$rrl = $rrr;\n\t\t$rrr = $sum;\n\t}\n\treturn $sum;\n}\n\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj5r2i68g.php:50\n\
    Stack trace:\n#0 /tmp/tmpj5r2i68g.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpj5r2i68g.php\
    \ on line 50\n"
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\t$fib = array(0, 0, 2, 0);\n\
    \tfor ($i = 3; $i < $n; $i++) {\n\t\t$fib[$i%4] = $fib[($i-1)%4] + $fib[($i-2)%4]\
    \ + $fib[($i-3)%4] + $fib[($i-4)%4];\n\t}\n\treturn $fib[($n-1)%4];\n}\necho \"\
    fib4(5) = \" . fib4(5) . \"\\n\";\necho \"fib4(6) = \" . fib4(6) . \"\\n\";\n\
    echo \"fib4(7) = \" . fib4(7) . \"\\n\";\necho \"fib4(4) = \" . fib4(4) . \"\\\
    n\";\necho \"fib4(3) = \" . fib4(3) . \"\\n\";\necho \"fib4(2) = \" . fib4(2)\
    \ . \"\\n\";\necho \"fib4(1) = \" . fib4(1) . \"\\n\";\necho \"fib4(0) = \" .\
    \ fib4(0) . \"\\n\";\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key -1 in /tmp/tmp0yyiyo9f.php on line 18\n\
    fib4(5) = 4\n\nWarning: Undefined array key -1 in /tmp/tmp0yyiyo9f.php on line\
    \ 18\nfib4(6) = 8\n\nWarning: Undefined array key -1 in /tmp/tmp0yyiyo9f.php on\
    \ line 18\nfib4(7) = 16\n\nWarning: Undefined array key -1 in /tmp/tmp0yyiyo9f.php\
    \ on line 18\nfib4(4) = 2\nfib4(3) = 2\nfib4(2) = 0\nfib4(1) = 0\n\nWarning: Undefined\
    \ array key -1 in /tmp/tmp0yyiyo9f.php on line 20\nfib4(0) = \n\nWarning: Undefined\
    \ array key -1 in /tmp/tmp0yyiyo9f.php on line 18\n\nWarning: Undefined array\
    \ key -1 in /tmp/tmp0yyiyo9f.php on line 18\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp0yyiyo9f.php:36\nStack trace:\n#0 /tmp/tmp0yyiyo9f.php(41):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp0yyiyo9f.php on line 36\n"
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    // TODO: Implement me!\n\
    \    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i\
    \ % 4] = $fib4[($i - 1) % 4] + $fib4[($i - 2) % 4] + $fib4[($i - 3) % 4] + $fib4[($i\
    \ - 4) % 4];\n    }\n    return $fib4[$n % 4];\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\t$fib4 = array(0, 0, 2, 0);\n\
    \tfor ($i = 4; $i <= $n; $i++) {\n\t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2] +\
    \ $fib4[$i-3] + $fib4[$i-4];\n\t}\n\treturn $fib4[$n];\n}\n\necho fib4(7);\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '14'
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n == 0) {\n       \
    \ return 0;\n    } else if ($n == 1) {\n        return 0;\n    } else if ($n ==\
    \ 2) {\n        return 2;\n    } else if ($n == 3) {\n        return 0;\n    }\
    \ else {\n        $fib4s = [0, 0, 2, 0];\n        for ($i = 4; $i <= $n; $i++)\
    \ {\n            $fib4s[$i % 4] = $fib4s[($i - 1) % 4] + $fib4s[($i - 2) % 4]\
    \ + $fib4s[($i - 3) % 4] + $fib4s[($i - 4) % 4];\n        }\n        return $fib4s[$n\
    \ % 4];\n    }\n}\n\nvar_dump(fib4(5));\nvar_dump(fib4(6));\nvar_dump(fib4(7));\n\
    function candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: 'int(4)

    int(8)

    int(14)

    '
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $result = 0;\n    $seq =\
    \ array(0, 0, 2, 0);\n    for ($i = 0; $i < $n; $i++) {\n        $result = $seq[0]\
    \ + $seq[1] + $seq[2] + $seq[3];\n        $seq[0] = $seq[1];\n        $seq[1]\
    \ = $seq[2];\n        $seq[2] = $seq[3];\n        $seq[3] = $result;\n    }\n\
    \    return $result;\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplsrv88be.php:32\n\
    Stack trace:\n#0 /tmp/tmplsrv88be.php(38): test()\n#1 {main}\n  thrown in /tmp/tmplsrv88be.php\
    \ on line 32\n"
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 2) {\n       \
    \ return 2;\n    }\n    if ($n == 3) {\n        return 0;\n    }\n    $fib_array\
    \ = array(2, 2, 0, 0);\n    $result = 0;\n    for ($i = 4; $i <= $n; $i++) {\n\
    \        $result = $fib_array[0] + $fib_array[1] + $fib_array[2] + $fib_array[3];\n\
    \        $fib_array[0] = $fib_array[1];\n        $fib_array[1] = $fib_array[2];\n\
    \        $fib_array[2] = $fib_array[3];\n        $fib_array[3] = $result;\n  \
    \  }\n    return $result;\n}\n\necho fib4(5);\necho \"\\n\";\necho fib4(6);\n\
    echo \"\\n\";\necho fib4(7);\necho \"\\n\";\necho fib4(21);\necho \"\\n\";\n\n\
    function candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "6\n10\n20\n199730\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvb5ymzpa.php:48\n\
    Stack trace:\n#0 /tmp/tmpvb5ymzpa.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpvb5ymzpa.php\
    \ on line 48\n"
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $fib4Array = array(0, 0,\
    \ 2, 0);\n    $count = 4;\n    while ($count <= $n) {\n        $fib4Array[3] =\
    \ $fib4Array[0] + $fib4Array[1] + $fib4Array[2] + $fib4Array[3];\n        $fib4Array[0]\
    \ = $fib4Array[1];\n        $fib4Array[1] = $fib4Array[2];\n        $fib4Array[2]\
    \ = $fib4Array[3];\n        $count++;\n    }\n    return $fib4Array[3];\n}\n\n\
    function candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwiuix2uf.php:33\n\
    Stack trace:\n#0 /tmp/tmpwiuix2uf.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpwiuix2uf.php\
    \ on line 33\n"
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    // your code goes here\n\
    }\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4nlpvwgy.php:23\n\
    Stack trace:\n#0 /tmp/tmp4nlpvwgy.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp4nlpvwgy.php\
    \ on line 23\n"
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\t$n1 = 0;\n\t$n2 = 0;\n\t$n3\
    \ = 2;\n\t$n4 = 0;\n\t$sum = 2;\n\tif ($n <= 1) return 0;\n\tif ($n == 2) return\
    \ 2;\n\tfor ($i = 3; $i <= $n; $i++) {\n\t\t$sum = $n1 + $n2 + $n3 + $n4;\n\t\t\
    $n1 = $n2;\n\t\t$n2 = $n3;\n\t\t$n3 = $n4;\n\t\t$n4 = $sum;\n\t}\n\treturn $sum;\n\
    }\necho fib4(3) . \"\\n\";\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\n\
    echo fib4(7) . \"\\n\";\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "2\n8\n14\n28\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmt7vvf1o.php:41\n\
    Stack trace:\n#0 /tmp/tmpmt7vvf1o.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpmt7vvf1o.php\
    \ on line 41\n"
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $fib4_0 = 0;\n    $fib4_1\
    \ = 0;\n    $fib4_2 = 2;\n    $fib4_3 = 0;\n    if ($n == 0) {\n        return\
    \ $fib4_0;\n    } else if ($n == 1) {\n        return $fib4_1;\n    } else if\
    \ ($n == 2) {\n        return $fib4_2;\n    } else if ($n == 3) {\n        return\
    \ $fib4_3;\n    } else {\n        $i = 4;\n        while ($i <= $n) {\n      \
    \      $temp = $fib4_0 + $fib4_1 + $fib4_2 + $fib4_3;\n            $fib4_0 = $fib4_1;\n\
    \            $fib4_1 = $fib4_2;\n            $fib4_2 = $fib4_3;\n            $fib4_3\
    \ = $temp;\n            $i++;\n        }\n        return $fib4_3;\n    }\n}\n\
    echo fib4(5);\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '4'
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if($n < 2) return 0;\n \
    \   if($n == 2) return 2;\n    if($n == 3) return 0;\n    $fibA = 0;\n    $fibB\
    \ = 0;\n    $fibC = 2;\n    $fibD = 0;\n    for($i = 4; $i <= $n; $i++) {\n  \
    \      $fibE = $fibA + $fibB + $fibC + $fibD;\n        $fibA = $fibB;\n      \
    \  $fibB = $fibC;\n        $fibC = $fibD;\n        $fibD = $fibE;\n    }\n   \
    \ return $fibD;\n}\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7)\
    \ . \"\\n\";\necho fib4(8) . \"\\n\";\necho fib4(9) . \"\\n\";\necho fib4(10)\
    \ . \"\\n\";\n\necho \"\\n\";\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '4

    8

    14

    28

    54

    104


    '
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\tif ($n == 0) {\n\t\treturn\
    \ 0;\n\t}\n\tif ($n == 1) {\n\t\treturn 0;\n\t}\n\tif ($n == 2) {\n\t\treturn\
    \ 2;\n\t}\n\tif ($n == 3) {\n\t\treturn 0;\n\t}\n\t$fib4s = array();\n\t$fib4s[0]\
    \ = 0;\n\t$fib4s[1] = 0;\n\t$fib4s[2] = 2;\n\t$fib4s[3] = 0;\n\tfor ($i = 4; $i\
    \ <= $n; $i++) {\n\t\t$fib4s[$i] = $fib4s[$i-1] + $fib4s[$i-2] + $fib4s[$i-3]\
    \ + $fib4s[$i-4];\n\t}\n\treturn $fib4s[$n];\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $fibs = [0, 0, 2, 0];\n\
    \    for ($i = 4; $i <= $n; $i++) {\n        $fibs[$i % 4] = $fibs[($i - 1) %\
    \ 4] + $fibs[($i - 2) % 4] + $fibs[($i - 3) % 4] + $fibs[($i - 4) % 4];\n    }\n\
    \    return $fibs[$n % 4];\n}\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\"\
    ;\necho fib4(7) . \"\\n\";\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '4

    8

    14

    '
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  $storage = [0, 0, 2, 0];\n\
    \  if ($n < 4) {\n    return $storage[$n];\n  }\n  for ($i = 4; $i <= $n; $i++)\
    \ {\n    $current = $storage[0] + $storage[1] + $storage[2] + $storage[3];\n \
    \   $storage[0] = $storage[1];\n    $storage[1] = $storage[2];\n    $storage[2]\
    \ = $storage[3];\n    $storage[3] = $current;\n  }\n  return $storage[3];\n}\n\
    \necho fib4(5) . PHP_EOL;\necho fib4(6) . PHP_EOL;\necho fib4(7) . PHP_EOL;\n\
    function candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: '4

    8

    14

    '
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) return [0,\
    \ 0, 2, 0][$n];\n    $a = 0;\n    $b = 0;\n    $c = 2;\n    $d = 0;\n    for ($i\
    \ = 4; $i <= $n; $i++) {\n        $a = $b;\n        $b = $c;\n        $c = $d;\n\
    \        $d = $a + $b + $c;\n    }\n    return $d;\n}\n\n/**\n * @param $a\n *\
    \ @param $b\n * @param $c\n * @param $n\n * @return int\n */\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9yj4cfzp.php:43\n\
    Stack trace:\n#0 /tmp/tmp9yj4cfzp.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp9yj4cfzp.php\
    \ on line 43\n"
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  // YOUR CODE HERE\n}\n\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprcijcxaj.php:24\n\
    Stack trace:\n#0 /tmp/tmprcijcxaj.php(30): test()\n#1 {main}\n  thrown in /tmp/tmprcijcxaj.php\
    \ on line 24\n"
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 2) {\n        return\
    \ 0;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    $fib4_arr = [0,\
    \ 0, 2, 0];\n    for ($i = 3; $i < $n; $i++) {\n        $fib4_arr[$i%4] = $fib4_arr[($i+1)%4]\
    \ + $fib4_arr[($i+2)%4] + $fib4_arr[($i+3)%4];\n    }\n    return $fib4_arr[($n+1)%4];\n\
    }\necho fib4(5);\necho PHP_EOL;\necho fib4(6);\necho PHP_EOL;\necho fib4(7);\n\
    echo PHP_EOL;\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "2\n2\n4\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjegud4fs.php:40\n\
    Stack trace:\n#0 /tmp/tmpjegud4fs.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpjegud4fs.php\
    \ on line 40\n"
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  if ($n < 0) {\n    throw new\
    \ Exception(\"Negative numbers are not supported.\");\n  }\n  // solution here\n\
    }\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp71ou59qp.php:26\n\
    Stack trace:\n#0 /tmp/tmp71ou59qp.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp71ou59qp.php\
    \ on line 26\n"
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\tif ($n == 0) {\n\t\treturn\
    \ 0;\n\t}\n\tif ($n == 1) {\n\t\treturn 0;\n\t}\n\tif ($n == 2) {\n\t\treturn\
    \ 2;\n\t}\n\tif ($n == 3) {\n\t\treturn 0;\n\t}\n\tif ($n == 4) {\n\t\treturn\
    \ 2;\n\t}\n\t$prev1 = 0;\n\t$prev2 = 0;\n\t$prev3 = 2;\n\t$prev4 = 2;\n\t$nth\
    \ = 0;\n\tfor ($i = 5; $i <= $n; $i++) {\n\t\t$nth = $prev1 + $prev2 + $prev3\
    \ + $prev4;\n\t\t$prev1 = $prev2;\n\t\t$prev2 = $prev3;\n\t\t$prev3 = $prev4;\n\
    \t\t$prev4 = $nth;\n\t}\n\treturn $nth;\n}\necho fib4(5).\"\\n\";\necho fib4(6).\"\
    \\n\";\necho fib4(7).\"\\n\";\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "4\n8\n16\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo4o_lp31.php:54\n\
    Stack trace:\n#0 /tmp/tmpo4o_lp31.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpo4o_lp31.php\
    \ on line 54\n"
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\t$fib4 = [0, 0, 2, 0];\n\t\
    for ($i = 4; $i <= $n; $i++) {\n\t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3]\
    \ + $fib4[$i-4];\n\t}\n\treturn $fib4[$n];\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  $a=0;\n  $b=0;\n  $c=2;\n\
    \  $d=0;\n  if ($n==0) {\n    return 0;\n  }\n  elseif ($n==1) {\n    return 0;\n\
    \  }\n  elseif ($n==2) {\n    return 2;\n  }\n  elseif ($n==3) {\n    return 0;\n\
    \  }\n  else {\n    for ($i=0; $i < ($n-3); $i++) {\n      $d=$a+$b+$c;\n    \
    \  $a=$b;\n      $b=$c;\n      $c=$d;\n    }\n    return $d;\n  }\n}\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnwkaagft.php:48\n\
    Stack trace:\n#0 /tmp/tmpnwkaagft.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpnwkaagft.php\
    \ on line 48\n"
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 0) {\n        throw\
    \ new Exception(\"Negative number not allowed\");\n    }\n    if ($n == 0) {\n\
    \        return 0;\n    }\n    if ($n == 1) {\n        return 0;\n    }\n    if\
    \ ($n == 2) {\n        return 2;\n    }\n    if ($n == 3) {\n        return 0;\n\
    \    }\n    $a = 0;\n    $b = 0;\n    $c = 2;\n    $d = 0;\n    for ($i = 4; $i\
    \ <= $n; $i++) {\n        $e = $a + $b + $c + $d;\n        $a = $b;\n        $b\
    \ = $c;\n        $c = $d;\n        $d = $e;\n    }\n    return $e;\n}\nfib4(5);\n\
    fib4(6);\nfib4(7);\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\t$f = array(0, 0, 2, 0);\n\t\
    \n\tif ($n <= 3) {\n\t\treturn $f[$n];\n\t}\n\t\n\tfor ($i = 4; $i <= $n; $i++)\
    \ {\n\t\t$f[$i % 4] = $f[($i - 1) % 4] + $f[($i - 2) % 4] + $f[($i - 3) % 4] +\
    \ $f[($i - 4) % 4];\n\t}\n\t\n\treturn $f[$n % 4];\n}\n\n$a = 5;\n$b = fib4($a);\n\
    echo \"fib4($a) = $b\";\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: fib4(5) = 4
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 0) {\n       \
    \ return 0;\n    }\n    $one = 0;\n    $two = 0;\n    $three = 2;\n    $four =\
    \ 0;\n    $curr = 0;\n    for ($i = 4; $i <= $n; $i++) {\n        $curr = $one\
    \ + $two + $three + $four;\n        $one = $two;\n        $two = $three;\n   \
    \     $three = $four;\n        $four = $curr;\n    }\n    return $curr;\n}\n\n\
    echo fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '4

    8

    14

    '
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  $cache = array(0, 0, 2, 0);\n\
    \  for ($i = 3; $i < $n; $i++) {\n    $cache[$i + 1] = array_sum(array_slice($cache,\
    \ -4));\n  }\n  return $cache[$i];\n}\n\nforeach(range(0, 7) as $i) {\n  echo\
    \ fib4($i) . \"\\n\";\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '0

    0

    0

    0

    2

    4

    8

    14

    '
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\tif ($n == 0) return 0;\n\t\
    if ($n == 1) return 0;\n\tif ($n == 2) return 2;\n\tif ($n == 3) return 0;\n\t\
    $d = 0;\n\t$c = 0;\n\t$b = 2;\n\t$a = 0;\n\tfor ($i = 4; $i <= $n; $i++) {\n\t\
    \t$d = $c + $b + $a;\n\t\t$a = $b;\n\t\t$b = $c;\n\t\t$c = $d;\n\t}\n\treturn\
    \ $d;\n}\necho fib4(4) . \"\\n\";\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\\
    n\";\necho fib4(7) . \"\\n\";\necho fib4(8) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "2\n4\n6\n12\n22\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz8h9k76i.php:43\n\
    Stack trace:\n#0 /tmp/tmpz8h9k76i.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpz8h9k76i.php\
    \ on line 43\n"
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  if ($n == 0) return 0;\n \
    \ if ($n == 1) return 0;\n  if ($n == 2) return 2;\n  if ($n == 3) return 0;\n\
    \  $a = 0;\n  $b = 0;\n  $c = 2;\n  $d = 0;\n  $sum = 0;\n  for ($i = 3; $i <\
    \ $n; $i++) {\n    $sum = $a + $b + $c + $d;\n    $a = $b;\n    $b = $c;\n   \
    \ $c = $d;\n    $d = $sum;\n  }\n  return $sum;\n}\n\n$result = fib4(5);\necho\
    \ 'Result: ' . $result . PHP_EOL;\nassert($result == 4);\n$result = fib4(6);\n\
    echo 'Result: ' . $result . PHP_EOL;\nassert($result == 8);\n$result = fib4(7);\n\
    echo 'Result: ' . $result . PHP_EOL;\nassert($result == 14);\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Result: 4

    Result: 8

    Result: 14

    '
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\tif ($n < 0) {\n\t\treturn\
    \ -1;\n\t}\n\tif ($n == 0) {\n\t\treturn 0;\n\t}\n\tif ($n <= 3) {\n\t\treturn\
    \ $n - 1;\n\t}\n\t$a = 0;\n\t$b = 0;\n\t$c = 1;\n\t$d = 1;\n\tfor ($i = 4; $i\
    \ <= $n; $i++) {\n\t\t$e = $a + $b + $c + $d;\n\t\t$a = $b;\n\t\t$b = $c;\n\t\t\
    $c = $d;\n\t\t$d = $e;\n\t}\n\treturn $e;\n}\n\nfor ($i = 0; $i < 10; $i++) {\n\
    \techo fib4($i) . \" \";\n}\necho \"\\n\";\nfunction candidate(...$args) {\n \
    \   return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "0 0 1 2 2 4 8 15 29 56 \n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp9088k4tv.php:49\nStack trace:\n#0 /tmp/tmp9088k4tv.php(54): test()\n\
    #1 {main}\n  thrown in /tmp/tmp9088k4tv.php on line 49\n"
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $arr1 = array(0, 0, 2, 0);\n\
    \    if ($n < 4) {\n        return $arr1[$n];\n    }\n    $c = 3;\n    while($c\
    \ < $n) {\n        $temp = $arr1[0] + $arr1[1] + $arr1[2] + $arr1[3];\n      \
    \  $arr1[0] = $arr1[1];\n        $arr1[1] = $arr1[2];\n        $arr1[2] = $arr1[3];\n\
    \        $arr1[3] = $temp;\n        $c++;\n    }\n    return $arr1[3];\n}\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  $a = 0;\n  $b = 0;\n  $c =\
    \ 2;\n  $d = 0;\n  if ($n == 0) {\n    return $a;\n  } else if ($n == 1) {\n \
    \   return $b;\n  } else if ($n == 2) {\n    return $c;\n  } else if ($n == 3)\
    \ {\n    return $d;\n  }\n  for ($i = 3; $i < $n; $i++) {\n    $e = $a + $b +\
    \ $c + $d;\n    $a = $b;\n    $b = $c;\n    $c = $d;\n    $d = $e;\n  }\n  return\
    \ $e;\n}\nfib4(5);\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\t$c = array_fill(0, $n+1, 0);\n\
    \t$c[0] = 0;\n\t$c[1] = 0;\n\t$c[2] = 2;\n\t$c[3] = 0;\n\tfor ($i = 4; $i <= $n;\
    \ $i++) {\n\t\t$c[$i] = $c[$i-1] + $c[$i-2] + $c[$i-3] + $c[$i-4];\n\t}\n\treturn\
    \ $c[$n];\n}\n\necho fib4(5);\necho \"\\n\";\necho fib4(6);\necho \"\\n\";\necho\
    \ fib4(7);\necho \"\\n\";\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '4

    8

    14

    '
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\t$results = [0, 0, 2, 0];\n\
    \tfor ($i = 4; $i <= $n; $i++) {\n\t\t$results[$i % 4] = $results[($i - 1) % 4]\
    \ + $results[($i - 2) % 4] + $results[($i - 3) % 4] + $results[($i - 4) % 4];\n\
    \t}\n\treturn $results[$n % 4];\n}\n\necho fib4(10) . \"\\n\";\necho fib4(11)\
    \ . \"\\n\";\necho fib4(100) . \"\\n\";\necho fib4(1000) . \"\\n\";\n\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '104

    200

    4.6479599985895E+27

    1.4954704313826E+284

    '
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  $fib1 = 0;\n  $fib2 = 0;\n\
    \  $fib3 = 2;\n  $fib4 = 0;\n  for ($i = 4; $i <= $n; $i++) {\n    $fib4 = $fib1\
    \ + $fib2 + $fib3 + $fib4;\n    $fib1 = $fib2;\n    $fib2 = $fib3;\n    $fib3\
    \ = $fib4;\n  }\n  return $fib4;\n}\n\necho fib4(5) . \"\\n\";\necho fib4(6) .\
    \ \"\\n\";\necho fib4(7) . \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "6\n16\n40\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpssz7oqxr.php:37\n\
    Stack trace:\n#0 /tmp/tmpssz7oqxr.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpssz7oqxr.php\
    \ on line 37\n"
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\t$res = array(0, 0, 2, 0);\n\
    \tif ($n == 0) {\n\t\treturn $res[0];\n\t}\n\tif ($n == 1) {\n\t\treturn $res[1];\n\
    \t}\n\tif ($n == 2) {\n\t\treturn $res[2];\n\t}\n\tif ($n == 3) {\n\t\treturn\
    \ $res[3];\n\t}\n\tfor ($i = 4; $i <= $n; $i++) {\n\t\t$tmp = $res[0] + $res[1]\
    \ + $res[2] + $res[3];\n\t\t$res[0] = $res[1];\n\t\t$res[1] = $res[2];\n\t\t$res[2]\
    \ = $res[3];\n\t\t$res[3] = $tmp;\n\t}\n\treturn $res[3];\n}\n\necho fib4(5);\n\
    echo \"\\n\";\necho fib4(6);\necho \"\\n\";\necho fib4(7);\necho \"\\n\";\n\n\
    function candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: '4

    8

    14

    '
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $a = 0;\n    $b = 0;\n \
    \   $c = 2;\n    $d = 0;\n    if ($n === 0) {\n        return $a;\n    }\n   \
    \ if ($n === 1) {\n        return $b;\n    }\n    if ($n === 2) {\n        return\
    \ $c;\n    }\n    if ($n === 3) {\n        return $d;\n    }\n    $i = 4;\n  \
    \  while ($i <= $n) {\n        $a = $b;\n        $b = $c;\n        $c = $d;\n\
    \        $d = $a + $b + $c + $d;\n        $i++;\n    }\n    return $d;\n}\necho\
    \ fib4(5) . PHP_EOL;\necho fib4(6) . PHP_EOL;\necho fib4(7) . PHP_EOL;\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "6\n14\n36\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq_50ntj8.php:50\n\
    Stack trace:\n#0 /tmp/tmpq_50ntj8.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpq_50ntj8.php\
    \ on line 50\n"
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  $a = 0;\n  $b = 0;\n  $c =\
    \ 2;\n  $d = 0;\n  $count = 3;\n  while ($count < $n) {\n    $temp = $a + $b +\
    \ $c + $d;\n    $a = $b;\n    $b = $c;\n    $c = $d;\n    $d = $temp;\n    $count++;\n\
    \  }\n  return $d;\n}\necho fib4(5);\necho \"\\n\";\necho fib4(6);\necho \"\\\
    n\";\necho fib4(7);\necho \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '4

    8

    14

    '
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    // your code here\n    if\
    \ ($n < 3) return $n * 2;\n    $a = 0;\n    $b = 0;\n    $c = 2;\n    $d = 0;\n\
    \    for ($i = 3; $i <= $n; $i++) {\n        $e = $a + $b + $c + $d;\n       \
    \ $a = $b;\n        $b = $c;\n        $c = $d;\n        $d = $e;\n    }\n    return\
    \ $e;\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcun4hpj7.php:37\n\
    Stack trace:\n#0 /tmp/tmpcun4hpj7.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpcun4hpj7.php\
    \ on line 37\n"
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  $fib4 = array(0, 0, 2, 0);\n\
    \  for ($i = 4; $i <= $n; $i++) {\n    $fib4[$i] = $fib4[$i-1] + $fib4[$i-2] +\
    \ $fib4[$i-3] + $fib4[$i-4];\n  }\n  return $fib4[$n];\n}\n$fib4Test = [5, 6,\
    \ 7];\nforeach ($fib4Test as $test) {\n  echo fib4($test) . \"\\n\";\n}\n\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '4

    8

    14

    '
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\treturn fib4_helper($n, 0,\
    \ 0, 2, 0);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function fib4_helper()\
    \ in /tmp/tmpj0kc1qri.php:16\nStack trace:\n#0 /tmp/tmpj0kc1qri.php(20): fib4(5)\n\
    #1 /tmp/tmpj0kc1qri.php(24): candidate(5)\n#2 /tmp/tmpj0kc1qri.php(30): test()\n\
    #3 {main}\n  thrown in /tmp/tmpj0kc1qri.php on line 16\n"
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\t// make sure $n is an integer\n\
    \t$n = intval($n);\n\t// create array of starting values for fib4 sequence\n\t\
    $start = array(0, 0, 2, 0);\n\t// declare initial $res and $a\n\t$res = 0;\n\t\
    $a = 0;\n\t// loop until we reach $n\n\twhile($a < $n) {\n\t\t// increment $a\n\
    \t\t$a++;\n\t\t// if $a is less than 4, we use the starting values array to set\
    \ $res\n\t\tif($a < 4) {\n\t\t\t$res = $start[$a];\n\t\t// otherwise set $res\
    \ to $res + $a-1 + $a-2 + $a-3 + $a-4\n\t\t} else {\n\t\t\t$res = $res + $a-1\
    \ + $a-2 + $a-3 + $a-4;\n\t\t}\n\t}\n\t// echo result\n\techo $res;\n}\n\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "16\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj00sd1sr.php:44\n\
    Stack trace:\n#0 /tmp/tmpj00sd1sr.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpj00sd1sr.php\
    \ on line 44\n"
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  $seq = [0, 0, 2, 0];\n  for\
    \ ($i = 4; $i <= $n; $i++) {\n    $seq[$i % 4] = array_sum(array_slice($seq, $i\
    \ - 4));\n  }\n  return $seq[$n % 4];\n}\n\nfunction candidate(...$args) {\n \
    \   return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpegjkwr71.php:28\n\
    Stack trace:\n#0 /tmp/tmpegjkwr71.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpegjkwr71.php\
    \ on line 28\n"
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  $results = [0, 0, 2, 0];\n\
    \  for ($i = 4; $i <= $n; $i++) {\n    $results[$i % 4] = $results[($i - 1) %\
    \ 4] + $results[($i - 2) % 4] + $results[($i - 3) % 4] + $results[($i - 4) % 4];\n\
    \  }\n  return $results[$n % 4];\n}\n\nvar_dump(fib4(5));\nvar_dump(fib4(6));\n\
    var_dump(fib4(7));\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'int(4)

    int(8)

    int(14)

    '
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $fib4_seq = array(0, 0,\
    \ 2, 0);\n    if ($n <= 3) {\n        return $fib4_seq[$n];\n    }\n    for ($i\
    \ = 4; $i <= $n; $i++) {\n        $tmp = $fib4_seq[0] + $fib4_seq[1] + $fib4_seq[2]\
    \ + $fib4_seq[3];\n        $fib4_seq[0] = $fib4_seq[1];\n        $fib4_seq[1]\
    \ = $fib4_seq[2];\n        $fib4_seq[2] = $fib4_seq[3];\n        $fib4_seq[3]\
    \ = $tmp;\n    }\n    return $fib4_seq[3];\n}\n\necho fib4(5) . PHP_EOL; // 4\n\
    echo fib4(6) . PHP_EOL; // 8\necho fib4(7) . PHP_EOL; // 14\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '4

    8

    14

    '
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $a = 0;\n    $b = 0;\n \
    \   $c = 2;\n    $d = 0;\n    $result = 0;\n    for ($i = 2; $i < $n; $i++) {\n\
    \        $result = $a + $b + $c + $d;\n        $a = $b;\n        $b = $c;\n  \
    \      $c = $d;\n        $d = $result;\n    }\n    return $result;\n}\n\necho\
    \ fib4(5) . PHP_EOL;\necho fib4(6) . PHP_EOL;\necho fib4(7) . PHP_EOL;\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "8\n14\n28\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmdk22sxf.php:39\n\
    Stack trace:\n#0 /tmp/tmpmdk22sxf.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpmdk22sxf.php\
    \ on line 39\n"
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\t$array = array(0, 0, 2, 0);\n\
    \tif ($n < 4) {\n\t\treturn $array[$n];\n\t} else {\n\t\tfor ($i = 4; $i <= $n;\
    \ $i++) {\n\t\t\t$array[3] = $array[0] + $array[1] + $array[2] + $array[3];\n\t\
    \t\t$array[0] = $array[1];\n\t\t\t$array[1] = $array[2];\n\t\t\t$array[2] = $array[3];\n\
    \t\t}\n\t\treturn $array[3];\n\t}\n}\necho fib4(2);\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpifx4ax5h.php:35\n\
    Stack trace:\n#0 /tmp/tmpifx4ax5h.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpifx4ax5h.php\
    \ on line 35\n"
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $a = 0;\n    $b = 0;\n \
    \   $c = 2;\n    $d = 0;\n    $tmp = 0;\n    for ($i = 2; $i < $n; $i++) {\n \
    \       $tmp = $d;\n        $d = $c + $b + $a + $d;\n        $a = $b;\n      \
    \  $b = $c;\n        $c = $tmp;\n    }\n    return $d;\n}\nprint fib4(5);\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "8\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_j2g6mq6.php:36\n\
    Stack trace:\n#0 /tmp/tmp_j2g6mq6.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp_j2g6mq6.php\
    \ on line 36\n"
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    // your code goes here\n\
    }\necho fib4(7);\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp62q78j4m.php:25\n\
    Stack trace:\n#0 /tmp/tmp62q78j4m.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp62q78j4m.php\
    \ on line 25\n"
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  $tmp1 = 0;\n  $tmp2 = 0;\n\
    \  $tmp3 = 2;\n  $tmp4 = 0;\n  $tmp5 = 0;\n  $tmp6 = 0;\n  $tmp7 = 0;\n  $tmp8\
    \ = 0;\n  $tmp9 = 0;\n  $tmp10 = 0;\n  $tmp11 = 0;\n  $tmp12 = 0;\n  $tmp13 =\
    \ 0;\n  $tmp14 = 0;\n  $tmp15 = 0;\n  $tmp16 = 0;\n  $tmp17 = 0;\n  $tmp18 = 0;\n\
    \  $tmp19 = 0;\n  $tmp20 = 0;\n  for ($i = 4; $i <= $n; $i++) {\n    $tmp1 = $tmp5\
    \ + $tmp10 + $tmp15 + $tmp20;\n    $tmp2 = $tmp6 + $tmp11 + $tmp16 + $tmp1;\n\
    \    $tmp3 = $tmp7 + $tmp12 + $tmp17 + $tmp2;\n    $tmp4 = $tmp8 + $tmp13 + $tmp18\
    \ + $tmp3;\n    $tmp5 = $tmp9 + $tmp14 + $tmp19 + $tmp4;\n    $tmp6 = $tmp1 +\
    \ $tmp9 + $tmp14 + $tmp19;\n    $tmp7 = $tmp2 + $tmp1 + $tmp9 + $tmp14;\n    $tmp8\
    \ = $tmp3 + $tmp2 + $tmp1 + $tmp9;\n    $tmp9 = $tmp4 + $tmp3 + $tmp2 + $tmp1;\n\
    \    $tmp10 = $tmp5 + $tmp4 + $tmp3 + $tmp2;\n    $tmp11 = $tmp6 + $tmp5 + $tmp4\
    \ + $tmp3;\n    $tmp12 = $tmp7 + $tmp6 + $tmp5 + $tmp4;\n    $tmp13 = $tmp8 +\
    \ $tmp7 + $tmp6 + $tmp5;\n    $tmp14 = $tmp9 + $tmp8 + $tmp7 + $tmp6;\n    $tmp15\
    \ = $tmp10 + $tmp9 + $tmp8 + $tmp7;\n    $tmp\nfunction candidate(...$args) {\n\
    \    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmp921hlw45.php
    on line 53

    '
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\t$f = [0, 0, 2, 0];\n\tfor\
    \ ($i = 4; $i <= $n; $i++) {\n\t\t$f[$i % 4] = $f[($i - 1) % 4] + $f[($i - 2)\
    \ % 4] + $f[($i - 3) % 4] + $f[($i - 4) % 4];\n\t}\n\treturn $f[$n % 4];\n}\n\n\
    function candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\tif ($n == 0) return 0;\n\t\
    if ($n == 1) return 0;\n\tif ($n == 2) return 2;\n\tif ($n == 3) return 0;\n\t\
    $result = 2;\n\t$previous = 0;\n\t$secondPrevious = 0;\n\t$thirdPrevious = 0;\n\
    \tfor ($i = 2; $i < $n; $i++) {\n\t\t$fourthPrevious = $thirdPrevious;\n\t\t$thirdPrevious\
    \ = $secondPrevious;\n\t\t$secondPrevious = $previous;\n\t\t$previous = $result;\n\
    \t\t$result = $previous + $secondPrevious + $thirdPrevious + $fourthPrevious;\n\
    \t}\n\treturn $result;\n}\n\necho \"1 : \" . fib4(5) . PHP_EOL;\necho \"2 : \"\
    \ . fib4(6) . PHP_EOL;\necho \"3 : \" . fib4(7) . PHP_EOL;\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1 : 8\n2 : 16\n3 : 30\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpre4a27k8.php:43\nStack trace:\n#0 /tmp/tmpre4a27k8.php(49): test()\n\
    #1 {main}\n  thrown in /tmp/tmpre4a27k8.php on line 43\n"
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $c = [0, 0, 2, 0];\n   \
    \ if ($n < 4) return $c[$n];\n    for ($i = 4; $i <= $n; $i++) {\n        $c[$i%4]\
    \ = $c[($i-1)%4] + $c[($i-2)%4] + $c[($i-3)%4] + $c[($i-4)%4];\n    }\n    return\
    \ $c[$n%4];\n}\n\nvar_dump(fib4(5));\nvar_dump(fib4(6));\nvar_dump(fib4(7));\n\
    function candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: 'int(4)

    int(8)

    int(14)

    '
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\t// TODO: fill this function\n\
    \tif($n < 3) return $n * 2;\n\t$count = 4;\n\t$fib4[0] = 0;\n\t$fib4[1] = 0;\n\
    \t$fib4[2] = 2;\n\t$fib4[3] = 0;\n\twhile($count <= $n) {\n\t\t$fib4[$count] =\
    \ $fib4[$count - 1] + $fib4[$count - 2] + $fib4[$count - 3] + $fib4[$count - 4];\n\
    \t\t$count++;\n\t}\n\treturn $fib4[$n];\n}\necho fib4(5);\necho fib4(6);\necho\
    \ fib4(7);\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '4814'
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $a = [0, 0, 2, 0];\n   \
    \ for ($i = 4; $i <= $n; $i++) {\n        $a[$i % 4] = $a[($i - 1) % 4] + $a[($i\
    \ - 2) % 4] + $a[($i - 3) % 4] + $a[($i - 4) % 4];\n    }\n    return $a[$n %\
    \ 4];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 3) {\n        return\
    \ $n === 0 ? 0 : 2;\n    }\n\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 3; $i <\
    \ $n; $i++) {\n        $fib4[$i % 4] = $fib4[($i + 1) % 4] + $fib4[($i + 2) %\
    \ 4] + $fib4[($i + 3) % 4];\n    }\n\n    return $fib4[$n % 4];\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpph19fal2.php:32\n\
    Stack trace:\n#0 /tmp/tmpph19fal2.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpph19fal2.php\
    \ on line 32\n"
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $fib = array();\n    $fib[0]\
    \ = 0;\n    $fib[1] = 0;\n    $fib[2] = 2;\n    $fib[3] = 0;\n    for ($i = 4;\
    \ $i <= $n; $i++) {\n        $fib[$i] = $fib[$i-1] + $fib[$i-2] + $fib[$i-3] +\
    \ $fib[$i-4];\n    }\n    return $fib[$n];\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\t$lastFour = array(0, 0, 2,\
    \ 0);\n\tif ($n < 4) {\n\t\treturn $lastFour[$n];\n\t}\n\n\t$i = 3;\n\t$current\
    \ = 0;\n\twhile ($i < $n) {\n\t\t$current = $lastFour[0] + $lastFour[1] + $lastFour[2]\
    \ + $lastFour[3];\n\t\t$lastFour[0] = $lastFour[1];\n\t\t$lastFour[1] = $lastFour[2];\n\
    \t\t$lastFour[2] = $lastFour[3];\n\t\t$lastFour[3] = $current;\n\t\t$i++;\n\t\
    }\n\treturn $current;\n}\necho fib4(5) . PHP_EOL;\necho fib4(6) . PHP_EOL;\necho\
    \ fib4(7) . PHP_EOL;\necho PHP_EOL;\n\nfunction candidate(...$args) {\n    return\
    \ fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '4

    8

    14


    '
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $a = 0;\n    $b = 0;\n \
    \   $c = 2;\n    $d = 0;\n    if ($n <= 3) {\n        return $n;\n    }\n    for\
    \ ($i = 4; $i <= $n; $i++) {\n        $d = $a + $b + $c;\n        $a = $b;\n \
    \       $b = $c;\n        $c = $d;\n    }\n    return $d;\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpftr1k822.php:37\n\
    Stack trace:\n#0 /tmp/tmpftr1k822.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpftr1k822.php\
    \ on line 37\n"
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $result = array(0, 0, 2,\
    \ 0);\n    for ($i = 3; $i < $n; $i++) {\n        $result[$i % 4] = $result[($i\
    \ - 1) % 4] + $result[($i - 2) % 4] + $result[($i - 3) % 4] + $result[($i - 4)\
    \ % 4];\n    }\n    return $result[($n - 1) % 4];\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key -1 in /tmp/tmpvfgd8lsp.php on line 18\n\n\
    Warning: Undefined array key -1 in /tmp/tmpvfgd8lsp.php on line 18\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpvfgd8lsp.php:28\nStack trace:\n\
    #0 /tmp/tmpvfgd8lsp.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpvfgd8lsp.php\
    \ on line 28\n"
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 2) {\n        return\
    \ 0;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    $a = 1;\n    $b\
    \ = 2;\n    $c = 0;\n    $d = 0;\n    for ($i = 3; $i <= $n; $i++) {\n       \
    \ $e = $a + $b + $c + $d;\n        $d = $c;\n        $c = $b;\n        $b = $a;\n\
    \        $a = $e;\n    }\n    return $e;\n}\n$n = 7;\necho fib4($n);\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "43\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuyxg1yyv.php:42\n\
    Stack trace:\n#0 /tmp/tmpuyxg1yyv.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpuyxg1yyv.php\
    \ on line 42\n"
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  $a = 0;\n  $b = 0;\n  $c =\
    \ 2;\n  $d = 0;\n  if ($n == 0) {\n    return $a;\n  } else if ($n == 1) {\n \
    \   return $b;\n  } else if ($n == 2) {\n    return $c;\n  } else if ($n == 3)\
    \ {\n    return $d;\n  } else {\n    for ($i = 4; $i <= $n; $i++) {\n      $e\
    \ = $a + $b + $c + $d;\n      $a = $b;\n      $b = $c;\n      $c = $d;\n     \
    \ $d = $e;\n    }\n    return $e;\n  }\n}\nprint(fib4(0).\"\\n\");\nprint(fib4(1).\"\
    \\n\");\nprint(fib4(2).\"\\n\");\nprint(fib4(3).\"\\n\");\nprint(fib4(4).\"\\\
    n\");\nprint(fib4(5).\"\\n\");\nprint(fib4(6).\"\\n\");\nprint(fib4(7).\"\\n\"\
    );\nprint(fib4(8).\"\\n\");\nprint(fib4(9).\"\\n\");\nprint(fib4(10).\"\\n\");\n\
    print(fib4(11).\"\\n\");\nprint(fib4(12).\"\\n\");\nprint(fib4(13).\"\\n\");\n\
    print(fib4(14).\"\\n\");\nprint(fib4(15).\"\\n\");\nprint(fib4(16).\"\\n\");\n\
    print(fib4(17).\"\\n\");\nprint(fib4(18).\"\\n\");\nprint(fib4(19).\"\\n\");\n\
    print(fib4(20).\"\\n\");\nprint(fib4(21).\"\\n\");\nprint(fib4(22).\"\\n\");\n\
    print(fib4(23).\"\\n\");\nprint(fib4(24).\"\\n\");\nprint(fib4(25).\"\\n\");\n\
    print(fib4(26).\"\\n\");\nprint(fib4(27\nfunction candidate(...$args) {\n    return\
    \ fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmpqujpc580.php
    on line 67

    '
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\t$cache = [0, 0, 2, 0];\n\t\
    $i = 3;\n\twhile ($i < $n) {\n\t\t$cache[$i % 4] = array_sum(array_slice($cache,\
    \ 0, 4));\n\t\t$i++;\n\t}\n\treturn $cache[$n % 4];\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk19nhrkz.php:30\n\
    Stack trace:\n#0 /tmp/tmpk19nhrkz.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpk19nhrkz.php\
    \ on line 30\n"
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $map = array(0, 0, 2, 0);\n\
    \    $i = count($map);\n    while ($i <= $n) {\n        $map[$i] = $map[$i-1]\
    \ + $map[$i-2] + $map[$i-3] + $map[$i-4];\n        $i++;\n    }\n    return $map[$n];\n\
    }\n\n$a = fib4(5);\n$b = fib4(6);\n$c = fib4(7);\n\nif ($a == 4 && $b == 8 &&\
    \ $c == 14) {\n    echo \"OK\";\n} else {\n    echo \"FAIL\";\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: OK
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\t$a = 0;\n\t$b = 0;\n\t$c =\
    \ 2;\n\t$d = 0;\n\tfor ($i = 3; $i <= $n; $i++) {\n\t\t$temp = $a + $b + $c +\
    \ $d;\n\t\t$a = $b;\n\t\t$b = $c;\n\t\t$c = $d;\n\t\t$d = $temp;\n\t}\n\treturn\
    \ $d;\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn3l9i_ra.php:35\n\
    Stack trace:\n#0 /tmp/tmpn3l9i_ra.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpn3l9i_ra.php\
    \ on line 35\n"
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  $fib = array(0, 0, 2, 0);\n\
    \  for ($i = 4; $i <= $n; $i++) {\n    $fib[$i % 4] = $fib[($i-1) % 4] + $fib[($i-2)\
    \ % 4] + $fib[($i-3) % 4] + $fib[($i-4) % 4];\n  }\n  return $fib[$n % 4];\n}\n\
    \nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $v1 = 0;\n    $v2 = 0;\n\
    \    $v3 = 2;\n    $v4 = 0;\n    $v5 = 0;\n    for ($i = 0; $i < $n - 2; $i++)\
    \ {\n        $v5 = $v1 + $v2 + $v3 + $v4;\n        $v1 = $v2;\n        $v2 = $v3;\n\
    \        $v3 = $v4;\n        $v4 = $v5;\n    }\n    return $v5;\n}\n\n$fh = fopen($argv[1],\
    \ \"r\");\nwhile (!feof($fh)) {\n    $val = rtrim(fgets($fh));\n    if ($val !=\
    \ \"\") {\n        echo fib4($val) . \"\\n\";\n    }\n}\nfclose($fh);\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 1 in /tmp/tmpa13nd3ga.php on line 31\n\n\
    Deprecated: fopen(): Passing null to parameter #1 ($filename) of type string is\
    \ deprecated in /tmp/tmpa13nd3ga.php on line 31\n\nFatal error: Uncaught ValueError:\
    \ Path cannot be empty in /tmp/tmpa13nd3ga.php:31\nStack trace:\n#0 /tmp/tmpa13nd3ga.php(31):\
    \ fopen('', 'r')\n#1 {main}\n  thrown in /tmp/tmpa13nd3ga.php on line 31\n"
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if($n == 0) return 0;\n\
    \    if($n == 1) return 0;\n    if($n == 2) return 2;\n    if($n == 3) return\
    \ 0;\n    $prev2 = 0;\n    $prev1 = 0;\n    $prev = 2;\n    $curr = 0;\n    for($i\
    \ = 4; $i <= $n; $i++) {\n        $curr = $prev2 + $prev1 + $prev;\n        $prev2\
    \ = $prev1;\n        $prev1 = $prev;\n        $prev = $curr;\n    }\n    return\
    \ $curr;\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3vhuqsc_.php:38\n\
    Stack trace:\n#0 /tmp/tmp3vhuqsc_.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp3vhuqsc_.php\
    \ on line 38\n"
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $arr = [0, 0, 2, 0];\n \
    \   for ($i = 3; $i < $n; $i++) {\n        $arr[3] = $arr[0] + $arr[1] + $arr[2]\
    \ + $arr[3];\n        $arr[0] = $arr[1];\n        $arr[1] = $arr[2];\n       \
    \ $arr[2] = $arr[3];\n    }\n    return $arr[3];\n}\necho fib4(7);\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "40\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv19kkeu6.php:31\n\
    Stack trace:\n#0 /tmp/tmpv19kkeu6.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpv19kkeu6.php\
    \ on line 31\n"
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\t$previous = array(0, 0, 2,\
    \ 0);\n\t$i = 4;\n\twhile ($i <= $n) {\n\t\t$next = $previous[0] + $previous[1]\
    \ + $previous[2] + $previous[3];\n\t\t$previous[0] = $previous[1];\n\t\t$previous[1]\
    \ = $previous[2];\n\t\t$previous[2] = $previous[3];\n\t\t$previous[3] = $next;\n\
    \t\t$i++;\n\t}\n\treturn $previous[3];\n}\necho fib4(5) . \"\\n\";\necho fib4(6)\
    \ . \"\\n\";\necho fib4(7) . \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '4

    8

    14

    '
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) return $n;\n\
    \    $seq = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $seq[$i\
    \ % 4] = $seq[($i - 1) % 4] + $seq[($i - 2) % 4] + $seq[($i - 3) % 4] + $seq[($i\
    \ - 4) % 4];\n    }\n    return $seq[$n % 4];\n}\n\n$fn = 'fib4';\n\necho \"\\\
    n\".$fn(0);\necho \"\\n\".$fn(1);\necho \"\\n\".$fn(2);\necho \"\\n\".$fn(3);\n\
    echo \"\\n\".$fn(4);\necho \"\\n\".$fn(5);\necho \"\\n\".$fn(6);\necho \"\\n\"\
    .$fn(7);\necho \"\\n\".$fn(8);\necho \"\\n\".$fn(9);\necho \"\\n\".$fn(10);\n\
    echo \"\\n\".$fn(11);\necho \"\\n\".$fn(12);\necho \"\\n\".$fn(13);\necho \"\\\
    n\".$fn(14);\necho \"\\n\".$fn(15);\necho \"\\n\".$fn(16);\necho \"\\n\".$fn(17);\n\
    echo \"\\n\".$fn(18);\necho \"\\n\".$fn(19);\necho \"\\n\".$fn(20);\necho \"\\\
    n\".$fn(21);\necho \"\\n\".$fn(22);\necho \"\\n\".$fn(23);\necho \"\\n\".$fn(24);\n\
    echo \"\\n\".$fn(25);\necho \"\\n\".$fn(26);\necho \"\\n\".$fn(27);\necho \"\\\
    n\".$fn(28);\necho \"\\n\".$fn(29);\necho \"\\n\".$fn(30);\necho \"\\n\".$fn(31);\n\
    echo \"\\n\".$fn(32);\necho \"\\n\".$fn(33);\necho \"\\n\".$fn(34);\necho \"\\\
    n\".$fn(35);\necho \"\\n\".$fn(36);\necho \"\\n\".$fn(37);\necho \"\\\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "Test", expecting "," or ";"
    in /tmp/tmprtzqxnwe.php on line 70

    '
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\tif ($n == 0) {\n\t\treturn\
    \ 0;\n\t} else if ($n == 1) {\n\t\treturn 0;\n\t} else if ($n == 2) {\n\t\treturn\
    \ 2;\n\t} else if ($n == 3) {\n\t\treturn 0;\n\t} else {\n\t\t$nMinus4 = 0;\n\t\
    \t$nMinus3 = 0;\n\t\t$nMinus2 = 2;\n\t\t$nMinus1 = 0;\n\t\t$n = 0;\n\t\tfor ($i\
    \ = 4; $i <= $n; $i++) {\n\t\t\t$n = $nMinus4 + $nMinus3 + $nMinus2 + $nMinus1;\n\
    \t\t\t$nMinus4 = $nMinus3;\n\t\t\t$nMinus3 = $nMinus2;\n\t\t\t$nMinus2 = $nMinus1;\n\
    \t\t\t$nMinus1 = $n;\n\t\t}\n\t\treturn $n;\n\t}\n}\necho fib4(5);\necho '<br>';\n\
    echo fib4(6);\necho '<br>';\necho fib4(7);\nfunction candidate(...$args) {\n \
    \   return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "0<br>0<br>0\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7g6heg81.php:50\n\
    Stack trace:\n#0 /tmp/tmp7g6heg81.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp7g6heg81.php\
    \ on line 50\n"
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $current = 0;\n    $oneBefore\
    \ = 0;\n    $twoBefore = 0;\n    $threeBefore = 0;\n    $fourBefore = 0;\n   \
    \ for ($i = 0; $i < $n; $i++) {\n        $current = $oneBefore + $twoBefore +\
    \ $threeBefore + $fourBefore;\n        $fourBefore = $threeBefore;\n        $threeBefore\
    \ = $twoBefore;\n        $twoBefore = $oneBefore;\n        $oneBefore = $current;\n\
    \    }\n    return $current;\n}\n\nfunction candidate(...$args) {\n    return\
    \ fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8pvg14y0.php:36\n\
    Stack trace:\n#0 /tmp/tmp8pvg14y0.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp8pvg14y0.php\
    \ on line 36\n"
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $fib4 = array();\n    $fib4[0]\
    \ = 0;\n    $fib4[1] = 0;\n    $fib4[2] = 2;\n    $fib4[3] = 0;\n    for ($i =\
    \ 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3]\
    \ + $fib4[$i-4];\n    }\n    return $fib4[$n];\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\t$arr = array(0, 0, 2, 0);\n\
    \tfor ($i = 4; $i <= $n; $i++) {\n\t\t$arr[$i % 4] = $arr[($i - 1) % 4] + $arr[($i\
    \ - 2) % 4] + $arr[($i - 3) % 4] + $arr[($i - 4) % 4];\n\t}\n\treturn $arr[$n\
    \ % 4];\n}\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\
    \\n\";\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: '4

    8

    14

    '
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  $f1 = 0;\n  $f2 = 0;\n  $f3\
    \ = 2;\n  $f4 = 0;\n  $f_n = 0;\n  if ($n == 0) {\n    return $f1;\n  } else if\
    \ ($n == 1) {\n    return $f2;\n  } else if ($n == 2) {\n    return $f3;\n  }\
    \ else if ($n == 3) {\n    return $f4;\n  } else {\n    for ($i = 4; $i <= $n;\
    \ $i++) {\n      $f_n = $f1 + $f2 + $f3 + $f4;\n      $f1 = $f2;\n      $f2 =\
    \ $f3;\n      $f3 = $f4;\n      $f4 = $f_n;\n    }\n    return $f_n;\n  }\n}\n\
    \nvar_dump(fib4(5));\nvar_dump(fib4(6));\nvar_dump(fib4(7));\nvar_dump(fib4(8));\n\
    var_dump(fib4(9));\nvar_dump(fib4(10));\nvar_dump(fib4(11));\nvar_dump(fib4(12));\n\
    var_dump(fib4(13));\nvar_dump(fib4(14));\nvar_dump(fib4(15));\nvar_dump(fib4(16));\n\
    var_dump(fib4(17));\nvar_dump(fib4(18));\nvar_dump(fib4(19));\nvar_dump(fib4(20));\n\
    var_dump(fib4(21));\nvar_dump(fib4(22));\nvar_dump(fib4(23));\nvar_dump(fib4(24));\n\
    var_dump(fib4(25));\nvar_dump(fib4(26));\nvar_dump(fib4(27));\nvar_dump(fib4(28));\n\
    var_dump(fib4(29));\nvar_dump(fib4(30));\nvar_dump(fib4(31));\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'int(4)

    int(8)

    int(14)

    int(28)

    int(54)

    int(104)

    int(200)

    int(386)

    int(744)

    int(1434)

    int(2764)

    int(5328)

    int(10270)

    int(19796)

    int(38158)

    int(73552)

    int(141776)

    int(273282)

    int(526768)

    int(1015378)

    int(1957204)

    int(3772632)

    int(7271982)

    int(14017196)

    int(27019014)

    int(52080824)

    int(100389016)

    '
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  $array = array(0, 0, 2, 0);\n\
    \  for ($i = 4; $i <= $n; $i++) {\n    $array[$i % 4] = $array[($i - 1) % 4] +\
    \ $array[($i - 2) % 4] + $array[($i - 3) % 4] + $array[($i - 4) % 4];\n  }\n \
    \ return $array[$n % 4];\n}\n\nfor ($i = 0; $i < 10; $i++) {\n  print fib4($i)\
    \ . PHP_EOL;\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '0

    0

    2

    0

    2

    4

    8

    14

    28

    54

    '
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\tif ($n < 3) return $n * 2;\n\
    \t$fib4_n_1 = 2;\n\t$fib4_n_2 = 2;\n\t$fib4_n_3 = 0;\n\t$fib4_n_4 = 0;\n\tfor\
    \ ($i = 3; $i < $n; $i++) {\n\t\t$fib4_n = $fib4_n_1 + $fib4_n_2 + $fib4_n_3 +\
    \ $fib4_n_4;\n\t\t$fib4_n_4 = $fib4_n_3;\n\t\t$fib4_n_3 = $fib4_n_2;\n\t\t$fib4_n_2\
    \ = $fib4_n_1;\n\t\t$fib4_n_1 = $fib4_n;\n\t}\n\treturn $fib4_n;\n}\n\necho fib4(5)\
    \ . PHP_EOL;\necho fib4(6) . PHP_EOL;\necho fib4(7) . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "8\n16\n30\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyd5t1rlu.php:39\n\
    Stack trace:\n#0 /tmp/tmpyd5t1rlu.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpyd5t1rlu.php\
    \ on line 39\n"
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $fib = array(0, 0, 2, 0);\n\
    \    for ($i = 4; $i <= $n; $i++) {\n        $fib[$i % 4] = $fib[($i - 1) % 4]\
    \ + $fib[($i - 2) % 4] + $fib[($i - 3) % 4] + $fib[($i - 4) % 4];\n    }\n   \
    \ return $fib[$n % 4];\n}\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\n\
    echo fib4(7) . \"\\n\";\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '4

    8

    14

    '
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 0) return 0;\n\
    \    if ($n <= 2) return 2;\n    $seq = [0, 0, 2, 0];\n    $i = 3;\n    while\
    \ ($i < $n) {\n        $new = array_sum($seq);\n        array_shift($seq);\n \
    \       array_push($seq, $new);\n        $i++;\n    }\n    return $seq[3];\n}\n\
    \nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  $memo = [0, 0, 2, 0];\n  for\
    \ ($i = 4; $i <= $n; $i++) {\n    $memo[$i%4] = $memo[($i-1)%4] + $memo[($i-2)%4]\
    \ + $memo[($i-3)%4] + $memo[($i-4)%4];\n  }\n  return $memo[$n%4];\n}\n\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  $sequence = [0, 0, 2, 0];\n\
    \  for ($i = 4; $i <= $n; $i++) {\n    $sequence[$i % 4] = $sequence[($i - 1)\
    \ % 4] + $sequence[($i - 2) % 4] + $sequence[($i - 3) % 4] + $sequence[($i - 4)\
    \ % 4];\n  }\n  return $sequence[$n % 4];\n}\n\necho fib4(5) . PHP_EOL; // 4\n\
    echo fib4(6) . PHP_EOL; // 8\necho fib4(7) . PHP_EOL; // 14\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '4

    8

    14

    '
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  $x = 0;\n  $y = 0;\n  $z =\
    \ 2;\n  $w = 0;\n  $c = 0;\n  if ($n < 4) {\n    if ($n == 1) {\n      return\
    \ $x;\n    } else if ($n == 2) {\n      return $z;\n    } else {\n      return\
    \ $w;\n    }\n  } else {\n    while ($c < $n) {\n      $c++;\n      $x = $y;\n\
    \      $y = $z;\n      $z = $w;\n      $w = $x + $y + $z + $w;\n    }\n    return\
    \ $w;\n  }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwtmdlhia.php:46\n\
    Stack trace:\n#0 /tmp/tmpwtmdlhia.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpwtmdlhia.php\
    \ on line 46\n"
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  $fib4 = [0, 0, 2, 0];\n  if($n\
    \ <= 3) {\n    return $fib4[$n];\n  }\n  $i = 4;\n  while($i <= $n) {\n    $fib4[$i\
    \ % 4] = $fib4[($i - 1) % 4] + $fib4[($i - 2) % 4] + $fib4[($i - 3) % 4] + $fib4[($i\
    \ - 4) % 4];\n    $i++;\n  }\n  return $fib4[($n - 1) % 4];\n}\n\necho fib4(5)\
    \ . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "2\n4\n8\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwwc8vxyx.php:36\n\
    Stack trace:\n#0 /tmp/tmpwwc8vxyx.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpwwc8vxyx.php\
    \ on line 36\n"
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  // Your code here\n  $nums\
    \ = [0, 0, 2, 0];\n  if ($n < count($nums)) {\n    return $nums[$n];\n  }\n  $fib4\
    \ = 4;\n  while ($fib4 <= $n) {\n    $nums[] = $nums[$fib4 - 1] + $nums[$fib4\
    \ - 2] + $nums[$fib4 - 3] + $nums[$fib4 - 4];\n    $fib4++;\n  }\n  return $nums[$n];\n\
    }\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  // do not use recursion\n\
    \  // fib4(0) -> 0\n  // fib4(1) -> 0\n  // fib4(2) -> 2\n  // fib4(3) -> 0\n\
    \  // fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  $lastNumbers\
    \ = [0, 0, 2, 0];\n  $nextNumber = 0;\n  for ($i = 0; $i < $n; $i++) {\n    $nextNumber\
    \ = $lastNumbers[0] + $lastNumbers[1] + $lastNumbers[2] + $lastNumbers[3];\n \
    \   array_unshift($lastNumbers, $nextNumber);\n    array_pop($lastNumbers);\n\
    \  }\n  return $nextNumber;\n}\necho fib4(5);\necho PHP_EOL;\necho fib4(6);\n\
    echo PHP_EOL;\necho fib4(7);\necho PHP_EOL;\nfunction candidate(...$args) {\n\
    \    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "24\n46\n88\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2pf6mr46.php:42\n\
    Stack trace:\n#0 /tmp/tmp2pf6mr46.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp2pf6mr46.php\
    \ on line 42\n"
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $previous = 0;\n    $current\
    \ = 0;\n    $next = 2;\n    for ($i = 2; $i <= $n; $i++) {\n        $previous\
    \ = $current;\n        $current = $next;\n        $next = $previous + $current\
    \ + $next;\n    }\n    return $next;\n}\n\necho fib4(5) . PHP_EOL;\necho fib4(6)\
    \ . PHP_EOL;\necho fib4(7) . PHP_EOL;\nfunction candidate(...$args) {\n    return\
    \ fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "58\n140\n338\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp64vtstd7.php:35\n\
    Stack trace:\n#0 /tmp/tmp64vtstd7.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp64vtstd7.php\
    \ on line 35\n"
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\n}\nfib4(5); // 4\nfib4(6);\
    \ // 8\nfib4(7); // 14\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzt53yt1x.php:27\n\
    Stack trace:\n#0 /tmp/tmpzt53yt1x.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpzt53yt1x.php\
    \ on line 27\n"
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n == 0) {\n       \
    \ return 0;\n    } else if ($n == 1) {\n        return 0;\n    } else if ($n ==\
    \ 2) {\n        return 2;\n    } else if ($n == 3) {\n        return 0;\n    }\
    \ else {\n        return fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4);\n\
    \    }\n}\n\necho fib4(5);\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '4'
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n == 0) {\n       \
    \ return 0;\n    } else if ($n == 1) {\n        return 0;\n    } else if ($n ==\
    \ 2) {\n        return 2;\n    } else if ($n == 3) {\n        return 0;\n    }\n\
    \    $fib1 = 0;\n    $fib2 = 0;\n    $fib3 = 2;\n    $fib4 = 0;\n    for ($i =\
    \ 4; $i <= $n; $i++) {\n        $fib5 = $fib1 + $fib2 + $fib3 + $fib4;\n     \
    \   $fib1 = $fib2;\n        $fib2 = $fib3;\n        $fib3 = $fib4;\n        $fib4\
    \ = $fib5;\n    }\n    return $fib4;\n}\nfib4(7);\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $arr = array(0, 0, 2, 0);\n\
    \    for ($i = 4; $i <= $n; $i++) {\n        $arr[$i % 4] = array_sum(array_slice($arr,\
    \ 0, 4));\n    }\n    return $arr[$n % 4];\n}\nfunction candidate(...$args) {\n\
    \    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $a = 0;\n    $b = 0;\n \
    \   $c = 2;\n    $d = 0;\n    for ($i = 3; $i <= $n; $i++) {\n        $a = $b;\n\
    \        $b = $c;\n        $c = $d;\n        $d = $a + $b + $c;\n    }\n    return\
    \ $d;\n}\n\nvar_dump(fib4(5));\nvar_dump(fib4(6));\nvar_dump(fib4(7));\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "int(6)\nint(12)\nint(22)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp7x9kkp3t.php:37\nStack trace:\n#0 /tmp/tmp7x9kkp3t.php(43): test()\n\
    #1 {main}\n  thrown in /tmp/tmp7x9kkp3t.php on line 37\n"
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  if ($n < 2) return 0;\n  if\
    \ ($n == 2) return 2;\n  $f = [0, 0, 2, 0];\n  for ($i = 3; $i < $n; $i++) {\n\
    \    $f[$i % 4] = $f[($i - 1) % 4] + $f[($i - 2) % 4] + $f[($i - 3) % 4] + $f[($i\
    \ - 4) % 4];\n  }\n  return $f[($n - 1) % 4];\n}\n\nfor ($i = 0; $i < 10; $i++)\
    \ {\n  echo \"fib4($i) = \" . fib4($i) . \"\\n\";\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "fib4(0) = 0\nfib4(1) = 0\nfib4(2) = 2\nfib4(3) = 2\n\nWarning: Undefined\
    \ array key -1 in /tmp/tmp5yw9n62y.php on line 20\nfib4(4) = 2\n\nWarning: Undefined\
    \ array key -1 in /tmp/tmp5yw9n62y.php on line 20\nfib4(5) = 4\n\nWarning: Undefined\
    \ array key -1 in /tmp/tmp5yw9n62y.php on line 20\nfib4(6) = 8\n\nWarning: Undefined\
    \ array key -1 in /tmp/tmp5yw9n62y.php on line 20\nfib4(7) = 16\n\nWarning: Undefined\
    \ array key -1 in /tmp/tmp5yw9n62y.php on line 20\nfib4(8) = 30\n\nWarning: Undefined\
    \ array key -1 in /tmp/tmp5yw9n62y.php on line 20\nfib4(9) = 58\n\nWarning: Undefined\
    \ array key -1 in /tmp/tmp5yw9n62y.php on line 20\n\nWarning: Undefined array\
    \ key -1 in /tmp/tmp5yw9n62y.php on line 20\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp5yw9n62y.php:34\nStack trace:\n#0 /tmp/tmp5yw9n62y.php(39):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp5yw9n62y.php on line 34\n"
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $fibs = [0, 0, 2, 0];\n\
    \    if ($n < 4) {\n        return $fibs[$n];\n    }\n    for ($i = 4; $i <= $n;\
    \ $i++) {\n        $fibs[3] = $fibs[0] + $fibs[1] + $fibs[2] + $fibs[3];\n   \
    \     $fibs[0] = $fibs[1];\n        $fibs[1] = $fibs[2];\n        $fibs[2] = $fibs[3];\n\
    \    }\n    return $fibs[3];\n}\n\necho \"fib4(7) => \".fib4(7).\"\\n\";\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "fib4(7) => 40\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl7iuthd7.php:35\n\
    Stack trace:\n#0 /tmp/tmpl7iuthd7.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpl7iuthd7.php\
    \ on line 35\n"
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\t$arr[0] = 0;\n\t$arr[1] =\
    \ 0;\n\t$arr[2] = 2;\n\t$arr[3] = 0;\n\t$i = 4;\n\twhile ($i <= $n) {\n\t\t$arr[$i]\
    \ = $arr[$i-1] + $arr[$i-2] + $arr[$i-3] + $arr[$i-4];\n\t\t$i++;\n\t}\n\treturn\
    \ $arr[$n];\n}\necho fib4(5) . \"<br>\";\necho fib4(6) . \"<br>\";\necho fib4(7)\
    \ . \"<br>\";\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 4<br>8<br>14<br>
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $a = 0;\n    $b = 0;\n \
    \   $c = 2;\n    $d = 0;\n    for ($i = 2; $i < $n; $i++) {\n        $new_a =\
    \ $b;\n        $new_b = $c;\n        $new_c = $d;\n        $new_d = $b + $c +\
    \ $d + $a;\n        $a = $new_a;\n        $b = $new_b;\n        $c = $new_c;\n\
    \        $d = $new_d;\n    }\n    return $d;\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp49ld4uj0.php:37\n\
    Stack trace:\n#0 /tmp/tmp49ld4uj0.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp49ld4uj0.php\
    \ on line 37\n"
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\t$numbers = array();\n\t$numbers[0]\
    \ = 0;\n\t$numbers[1] = 0;\n\t$numbers[2] = 2;\n\t$numbers[3] = 0;\n\tfor ($i\
    \ = 4; $i <= $n; $i++) {\n\t\t$numbers[$i] = $numbers[$i-1] + $numbers[$i-2] +\
    \ $numbers[$i-3] + $numbers[$i-4];\n\t}\n\treturn $numbers[$n];\n}\n\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 0) return -1;\n\
    \    if ($n == 0) return 0;\n    if ($n <= 2) return 2;\n    if ($n == 3) return\
    \ 0;\n    return fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4);\n}\necho fib4(5)\
    \ . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";\necho fib4(8) .\
    \ \"\\n\";\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "8\n14\n26\n52\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9dfnsg__.php:32\n\
    Stack trace:\n#0 /tmp/tmp9dfnsg__.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp9dfnsg__.php\
    \ on line 32\n"
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  $n = (int)$n;\n  $result =\
    \ 0;\n  if ($n < 2) {\n    return $result;\n  }\n  if ($n == 2) {\n    return\
    \ 2;\n  }\n  $a = 0;\n  $b = 0;\n  $c = 2;\n  $d = 0;\n  for ($i = 3; $i <= $n;\
    \ $i++) {\n    $result = $a + $b + $c + $d;\n    $a = $b;\n    $b = $c;\n    $c\
    \ = $d;\n    $d = $result;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmnl2ldyq.php:43\n\
    Stack trace:\n#0 /tmp/tmpmnl2ldyq.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpmnl2ldyq.php\
    \ on line 43\n"
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if($n < 0) return 0;\n \
    \   $a = 0;\n    $b = 0;\n    $c = 2;\n    $d = 0;\n    for($i = 0; $i < $n; $i++)\
    \ {\n        $temp = $a + $b + $c + $d;\n        $a = $b;\n        $b = $c;\n\
    \        $c = $d;\n        $d = $temp;\n    }\n    return $d;\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurgzcec9.php:35\n\
    Stack trace:\n#0 /tmp/tmpurgzcec9.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpurgzcec9.php\
    \ on line 35\n"
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\tif ($n == 0) {\n\t\treturn\
    \ 0;\n\t} else if ($n == 1) {\n\t\treturn 0;\n\t} else if ($n == 2) {\n\t\treturn\
    \ 2;\n\t} else if ($n == 3) {\n\t\treturn 0;\n\t}\n\t$n_th = 0;\n\t$prev_1 = 2;\n\
    \t$prev_2 = 0;\n\t$prev_3 = 0;\n\t$prev_4 = 0;\n\tfor ($i = 4; $i <= $n; $i++)\
    \ {\n\t\t$n_th = $prev_1 + $prev_2 + $prev_3 + $prev_4;\n\t\t$prev_4 = $prev_3;\n\
    \t\t$prev_3 = $prev_2;\n\t\t$prev_2 = $prev_1;\n\t\t$prev_1 = $n_th;\n\t}\n\t\
    return $n_th;\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp65ode7fw.php:46\n\
    Stack trace:\n#0 /tmp/tmp65ode7fw.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp65ode7fw.php\
    \ on line 46\n"
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if($n == 0) {\n        return\
    \ 0;\n    }\n    $m = 0;\n    $l = 0;\n    $k = 0;\n    $j = 0;\n    for($i =\
    \ 1; $i <= $n; $i++) {\n        if($i == 1) {\n            $j = 0;\n        }\
    \ else if($i == 2) {\n            $k = 2;\n        } else if($i == 3) {\n    \
    \        $l = 0;\n        } else if($i == 4) {\n            $m = 0;\n        }\
    \ else {\n            $j = $m + $l + $k + $j;\n            $m = $l;\n        \
    \    $l = $k;\n            $k = $j;\n        }\n    }\n    return $j;\n}\n$n =\
    \ 5;\necho \"fib4($n) = \" . fib4($n) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "fib4(5) = 2\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl4spgp1m.php:48\n\
    Stack trace:\n#0 /tmp/tmpl4spgp1m.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpl4spgp1m.php\
    \ on line 48\n"
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\t$arr = array(0, 0, 2, 0);\n\
    \tif ($n < 4) {\n\t\treturn $arr[$n];\n\t} else {\n\t\tfor ($i = 4; $i <= $n;\
    \ $i++) {\n\t\t\t$arr[$i % 4] = $arr[($i - 1) % 4] + $arr[($i - 2) % 4] + $arr[($i\
    \ - 3) % 4] + $arr[($i - 4) % 4];\n\t\t}\n\t\treturn $arr[$n % 4];\n\t}\n}\n\n\
    echo fib4(5) . PHP_EOL;\necho fib4(6) . PHP_EOL;\necho fib4(7) . PHP_EOL;\n\n\
    echo PHP_EOL;\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '4

    8

    14


    '
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $fibs[0] = 0;\n    $fibs[1]\
    \ = 0;\n    $fibs[2] = 2;\n    $fibs[3] = 0;\n    for ($i = 4; $i <= $n; $i++)\
    \ {\n        $fibs[$i] = $fibs[$i-1] + $fibs[$i-2] + $fibs[$i-3] + $fibs[$i-4];\n\
    \    }\n    return $fibs[$n];\n}\n\nvar_dump(fib4(5));\necho \"\\n\";\nvar_dump(fib4(6));\n\
    echo \"\\n\";\nvar_dump(fib4(7));\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'int(4)


    int(8)


    int(14)


    '
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\t$arr = array(0, 0, 2, 0);\n\
    \tfor ($i = 3; $i < $n; $i++) {\n\t\t$arr[$i+1] = $arr[$i] + $arr[$i-1] + $arr[$i-2]\
    \ + $arr[$i-3];\n\t}\n\treturn $arr[$n];\n}\n$fib4 = array(0, 0, 2, 0, 4, 8, 14,\
    \ 26, 48, 88, 166, 308, 576, 1076, 2024, 3786, 7088, 13234, 24838, 46546, 87292,\
    \ 164974, 310448, 584040, 1098544, 2082790, 3932226, 7439208, 14098596, 26807480,\
    \ 50797340, 96747884, 182975340, 345419336, 654973536, 1239559952, 2352811108,\
    \ 4467355728, 8489627192, 16157211596, 30618450976, 57972250700, 110689370888,\
    \ 211132736824, 400569507064, 761443298488, 1449666759416, 2770779153864, 5267792038800,\
    \ 10057110613496, 19149331067344, 36511152550840, 69334987002544, 132363122424904,\
    \ 253087178742152, 483135493002040, 923057878817376, 1758659866331808, 3341164932822992,\
    \ 6366486158226432, 12117060275052624, 23115738714903832, 44209571723839904, 84785354015484632,\
    \ 162611161327943920, 311747704572367480, 597172003599575192, 1140962343426906616,\
    \ 2182894616078782928, 4192216183560642048, 8043928464271656456, 15440111121794277944,\
    \ 29672945997795007752, 5701\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmpb3zybs9d.php
    on line 23

    '
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $array = array(0, 0, 2,\
    \ 0);\n    if ($n < 4) {\n        return $array[$n];\n    }\n    for ($i = 4;\
    \ $i <= $n; $i++) {\n        $array[$i] = $array[$i - 1] + $array[$i - 2] + $array[$i\
    \ - 3] + $array[$i - 4];\n    }\n    return $array[$n];\n}\necho fib4(5) . PHP_EOL;\n\
    echo fib4(6) . PHP_EOL;\necho fib4(7) . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '4

    8

    14

    '
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  $a = 0;\n  $b = 0;\n  $c =\
    \ 2;\n  $d = 0;\n  if ($n == 0) {\n    return $a;\n  } else if ($n == 1) {\n \
    \   return $b;\n  } else if ($n == 2) {\n    return $c;\n  } else if ($n == 3)\
    \ {\n    return $d;\n  } else {\n    for ($i = 4; $i <= $n; $i++) {\n      $e\
    \ = $a + $b + $c + $d;\n      $a = $b;\n      $b = $c;\n      $c = $d;\n     \
    \ $d = $e;\n    }\n    return $e;\n  }\n}\n\nfunction candidate(...$args) {\n\
    \    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\tif ($n <= 0) return 0;\n\t\
    $a = 0;\n\t$b = 0;\n\t$c = 2;\n\t$d = 0;\n\t$i = 3;\n\twhile ($i < $n) {\n\t\t\
    $e = $a + $b + $c + $d;\n\t\t$a = $b;\n\t\t$b = $c;\n\t\t$c = $d;\n\t\t$d = $e;\n\
    \t\t$i++;\n\t}\n\treturn $a + $b + $c + $d;\n}\n\necho fib4(5) . \"\\n\";\necho\
    \ fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";\necho fib4(8) . \"\\n\";\necho fib4(9)\
    \ . \"\\n\";\necho fib4(10) . \"\\n\";\necho fib4(11) . \"\\n\";\necho fib4(12)\
    \ . \"\\n\";\necho fib4(13) . \"\\n\";\necho fib4(14) . \"\\n\";\necho fib4(15)\
    \ . \"\\n\";\necho fib4(16) . \"\\n\";\necho fib4(17) . \"\\n\";\necho fib4(18)\
    \ . \"\\n\";\necho fib4(19) . \"\\n\";\necho fib4(20) . \"\\n\";\necho fib4(21)\
    \ . \"\\n\";\necho fib4(22) . \"\\n\";\necho fib4(23) . \"\\n\";\necho fib4(24)\
    \ . \"\\n\";\necho fib4(25) . \"\\n\";\necho fib4(26) . \"\\n\";\necho fib4(27)\
    \ . \"\\n\";\necho fib4(28) . \"\\n\";\necho fib4(29) . \"\\n\";\necho fib4(30)\
    \ . \"\\n\";\necho fib4(31) . \"\\n\";\necho fib4(32) . \"\\n\";\necho fib4(33)\
    \ . \"\\n\";\necho fib4(34) . \"\\n\";\necho fib4(35) . \"\\n\";\necho fib4(36)\
    \ . \"\\n\";\necho fib4(37) . \"\\n\";\necho fib4(38) . \"\\n\";\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "8\n14\n28\n54\n104\n200\n386\n744\n1434\n2764\n5328\n10270\n19796\n38158\n\
    73552\n141776\n273282\n526768\n1015378\n1957204\n3772632\n7271982\n14017196\n\
    27019014\n52080824\n100389016\n193506050\n372994904\n718970794\n1385860764\n2671332512\n\
    5149158974\n9925323044\n19131675294\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpbmieo_l2.php:73\nStack trace:\n#0 /tmp/tmpbmieo_l2.php(79): test()\n\
    #1 {main}\n  thrown in /tmp/tmpbmieo_l2.php on line 73\n"
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  // TODO\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps87yfm39.php:24\n\
    Stack trace:\n#0 /tmp/tmps87yfm39.php(30): test()\n#1 {main}\n  thrown in /tmp/tmps87yfm39.php\
    \ on line 24\n"
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $a = 0;\n    $b = 0;\n \
    \   $c = 2;\n    $d = 0;\n    if ($n < 0) {\n        return null;\n    }\n   \
    \ if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return\
    \ 0;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    if ($n == 3) {\n\
    \        return 0;\n    }\n    for ($i = 4; $i <= $n; $i++) {\n        $d = $a\
    \ + $b + $c;\n        $a = $b;\n        $b = $c;\n        $c = $d;\n    }\n  \
    \  return $d;\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp55nf6blm.php:49\n\
    Stack trace:\n#0 /tmp/tmp55nf6blm.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp55nf6blm.php\
    \ on line 49\n"
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 0) {\n        return;\n\
    \    }\n    if ($n <= 3) {\n        return $n * 2;\n    }\n    $f1 = 0;\n    $f2\
    \ = 0;\n    $f3 = 2;\n    $f4 = 2;\n    $result = 0;\n    for ($i = 4; $i <= $n;\
    \ $i++) {\n        $result = $f1 + $f2 + $f3 + $f4;\n        $f1 = $f2;\n    \
    \    $f2 = $f3;\n        $f3 = $f4;\n        $f4 = $result;\n    }\n    return\
    \ $result;\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfd_mqlgw.php:41\n\
    Stack trace:\n#0 /tmp/tmpfd_mqlgw.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpfd_mqlgw.php\
    \ on line 41\n"
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $result = array(0, 0, 2,\
    \ 0);\n    if ($n < 4) return $result[$n];\n    $i = 3;\n    while ($i < $n) {\n\
    \        $i ++;\n        $result[$i % 4] = $result[($i - 1) % 4] + $result[($i\
    \ - 2) % 4] + $result[($i - 3) % 4] + $result[($i - 4) % 4];\n    }\n    return\
    \ $result[$i % 4];\n}\necho fib4(5) . PHP_EOL; // 4\necho fib4(6) . PHP_EOL; //\
    \ 8\necho fib4(7) . PHP_EOL; // 14\n\nfunction candidate(...$args) {\n    return\
    \ fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '4

    8

    14

    '
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\t$fibs = array(0, 0, 2, 0);\n\
    \t$len = count($fibs);\n\tfor ($i = 4; $i <= $n; $i++) {\n\t\t$fibs[$i % $len]\
    \ = $fibs[($i - 1) % $len] + $fibs[($i - 2) % $len] + $fibs[($i - 3) % $len] +\
    \ $fibs[($i - 4) % $len];\n\t}\n\treturn $fibs[$n % $len];\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if($n == 0) return 0;\n\
    \    if($n == 1) return 0;\n    if($n == 2) return 2;\n    if($n == 3) return\
    \ 0;\n    $fibs = [0, 0, 2, 0];\n    for($i = 4; $i <= $n; $i++) {\n        $fibs[]\
    \ = $fibs[$i-1] + $fibs[$i-2] + $fibs[$i-3] + $fibs[$i-4];\n    }\n    return\
    \ $fibs[$n];\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\tif ($n < 3) {\n\t\treturn\
    \ $n * 2;\n\t}\n\n\t$nums = [0, 0, 2, 0];\n\tfor ($i = 3; $i < $n; $i++) {\n\t\
    \t$nums[$i % 4] = array_sum($nums);\n\t}\n\n\treturn $nums[($n - 1) % 4];\n}\n\
    \nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbycym3lv.php:34\n\
    Stack trace:\n#0 /tmp/tmpbycym3lv.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpbycym3lv.php\
    \ on line 34\n"
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) return 0;\n\
    \    $result = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $result[0]\
    \ = $result[1];\n        $result[1] = $result[2];\n        $result[2] = $result[3];\n\
    \        $result[3] = $result[0] + $result[1] + $result[2];\n    }\n    return\
    \ $result[3];\n}\n\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "4\n6\n12\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfp505yq6.php:36\n\
    Stack trace:\n#0 /tmp/tmpfp505yq6.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpfp505yq6.php\
    \ on line 36\n"
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  if ($n == 0) {\n    return\
    \ 0;\n  }\n  $first = 0;\n  $second = 0;\n  $third = 2;\n  $fourth = 0;\n  $fib4\
    \ = 0;\n  for ($i = 3; $i <= $n; $i++) {\n    $fib4 = $first + $second + $third\
    \ + $fourth;\n    $first = $second;\n    $second = $third;\n    $third = $fourth;\n\
    \    $fourth = $fib4;\n  }\n  return $fib4;\n}\necho fib4(5) . \"\\n\";\necho\
    \ fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";\nfunction candidate(...$args) {\n\
    \    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "8\n14\n28\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyu6vk8g3.php:41\n\
    Stack trace:\n#0 /tmp/tmpyu6vk8g3.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpyu6vk8g3.php\
    \ on line 41\n"
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n == 0) return 0;\n\
    \    $f0 = 0;\n    $f1 = 0;\n    $f2 = 2;\n    $f3 = 0;\n    $f = 0;\n    for\
    \ ($i = 4; $i <= $n; $i++) {\n        $f = $f0 + $f1 + $f2 + $f3;\n        $f0\
    \ = $f1;\n        $f1 = $f2;\n        $f2 = $f3;\n        $f3 = $f;\n    }\n \
    \   return $f;\n}\necho fib4(5);\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '4'
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\tif ($n == 0) return 0;\n\t\
    if ($n == 1) return 0;\n\tif ($n == 2) return 2;\n\tif ($n == 3) return 0;\n\t\
    if ($n == 4) return 4;\n\t$n2 = $n1 = $n0 = $n_1 = $n_2 = 0;\n\t$n2 = 2;\n\t$n1\
    \ = 0;\n\t$n0 = 4;\n\tfor ($i = 4; $i < $n; $i++) {\n\t\t$n_2 = $n2;\n\t\t$n_1\
    \ = $n1;\n\t\t$n2 = $n0;\n\t\t$n1 = $n_2 + $n_1 + $n2 + $n1;\n\t\t$n0 = $n_2 +\
    \ $n_1 + $n2 + $n1;\n\t}\n\treturn $n_2 + $n_1 + $n2 + $n1;\n}\necho fib4(5) .\
    \ \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";\necho fib4(8) . \"\
    \\n\";\necho fib4(9) . \"\\n\";\necho fib4(10) . \"\\n\";\necho fib4(11) . \"\\\
    n\";\necho fib4(12) . \"\\n\";\necho fib4(13) . \"\\n\";\necho fib4(14) . \"\\\
    n\";\necho fib4(15) . \"\\n\";\necho fib4(16) . \"\\n\";\necho fib4(17) . \"\\\
    n\";\necho fib4(18) . \"\\n\";\necho fib4(19) . \"\\n\";\necho fib4(20) . \"\\\
    n\";\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "12\n50\n208\n870\n3638\n15214\n63624\n266072\n1112698\n4653240\n19459586\n\
    81378886\n340321890\n1423206860\n5951770444\n24889966746\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpg85vjicz.php:55\nStack trace:\n#0 /tmp/tmpg85vjicz.php(61):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpg85vjicz.php on line 55\n"
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  $fib4 = array(0, 0, 2, 0);\n\
    \  if ($n < 4) return $fib4[$n];\n  $i = 4;\n  while ($i < $n) {\n    $fib4[0]\
    \ = $fib4[1];\n    $fib4[1] = $fib4[2];\n    $fib4[2] = $fib4[3];\n    $fib4[3]\
    \ = $fib4[0] + $fib4[1] + $fib4[2];\n    $i++;\n  }\n  return $fib4[3];\n}\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1tcb4lfy.php:33\n\
    Stack trace:\n#0 /tmp/tmp1tcb4lfy.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp1tcb4lfy.php\
    \ on line 33\n"
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return\
    \ $n === 2 ? 2 : 0;\n    }\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <=\
    \ $n; $i++) {\n        $fib4[$i%4] = $fib4[($i-1)%4] + $fib4[($i-2)%4] + $fib4[($i-3)%4]\
    \ + $fib4[($i-4)%4];\n    }\n    return $fib4[$n%4];\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  if($n == 0) {\n    return\
    \ 0;\n  } else if($n == 1) {\n    return 0;\n  } else if($n == 2) {\n    return\
    \ 2;\n  } else if($n == 3) {\n    return 0;\n  } else {\n    $a = 0;\n    $b =\
    \ 0;\n    $c = 2;\n    $d = 0;\n    for($i = 4; $i <= $n; $i++) {\n      $a =\
    \ $b;\n      $b = $c;\n      $c = $d;\n      $d = $a + $b + $c + $d;\n    }\n\
    \    return $d;\n  }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ucedo6q.php:44\n\
    Stack trace:\n#0 /tmp/tmp2ucedo6q.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp2ucedo6q.php\
    \ on line 44\n"
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 0) return;\n  \
    \  $fib4_arr = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4_arr[$i\
    \ % 4] = $fib4_arr[($i - 1) % 4] + $fib4_arr[($i - 2) % 4] + $fib4_arr[($i - 3)\
    \ % 4] + $fib4_arr[($i - 4) % 4];\n    }\n    return $fib4_arr[$n % 4];\n}\necho\
    \ fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '4

    8

    14

    '
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  if ($n < 0) {\n    return;\n\
    \  }\n  $num0 = 0;\n  $num1 = 0;\n  $num2 = 2;\n  $num3 = 0;\n  $num4 = 4;\n \
    \ for ($i = 1; $i < $n; $i++) {\n    $temp = $num0 + $num1 + $num2 + $num3;\n\
    \    $num0 = $num1;\n    $num1 = $num2;\n    $num2 = $num3;\n    $num3 = $num4;\n\
    \    $num4 = $temp;\n  }\n  return $num4;\n}\n\necho fib4(5);\necho \"\\n\";\n\
    echo fib4(6);\necho \"\\n\";\necho fib4(7);\necho \"\\n\";\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "12\n20\n28\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1di3wq0c.php:47\n\
    Stack trace:\n#0 /tmp/tmp1di3wq0c.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp1di3wq0c.php\
    \ on line 47\n"
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  $a = 0;\n  $b = 0;\n  $c =\
    \ 2;\n  $d = 0;\n  for ($i = 3; $i <= $n; $i++) {\n    $e = $a + $b + $c + $d;\n\
    \    $a = $b;\n    $b = $c;\n    $c = $d;\n    $d = $e;\n  }\n  return $d;\n}\n\
    \n$tests = array(\n  array('n' => 5, 'expected' => 4),\n  array('n' => 6, 'expected'\
    \ => 8),\n  array('n' => 7, 'expected' => 14),\n);\n\n$failed = 0;\nforeach ($tests\
    \ as $test) {\n  $result = fib4($test['n']);\n  if ($result != $test['expected'])\
    \ {\n    echo \"FAIL: fib4({$test['n']}) returned {$result}, but expected {$test['expected']}\\\
    n\";\n    $failed++;\n  }\n}\n$count = count($tests);\nif ($failed > 0) {\n  echo\
    \ \"Failed {$failed}/{$count} tests\\n\";\n} else {\n  echo \"Passed all {$count}\
    \ tests\\n\";\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "FAIL: fib4(5) returned 8, but expected 4\nFAIL: fib4(6) returned 14, but\
    \ expected 8\nFAIL: fib4(7) returned 28, but expected 14\nFailed 3/3 tests\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp_gg8ccf4.php:55\nStack\
    \ trace:\n#0 /tmp/tmp_gg8ccf4.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp_gg8ccf4.php\
    \ on line 55\n"
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 0) {\n        return\
    \ -1;\n    }\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n\
    \        return 0;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    if\
    \ ($n == 3) {\n        return 0;\n    }\n    $fib = array(0, 0, 2, 0);\n    for\
    \ ($i = 4; $i <= $n; $i++) {\n        $fib[$i % 4] = $fib[($i - 1) % 4] + $fib[($i\
    \ - 2) % 4] + $fib[($i - 3) % 4] + $fib[($i - 4) % 4];\n    }\n    return $fib[$n\
    \ % 4];\n}\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\
    \\n\";\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: '4

    8

    14

    '
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  $fibs = [0, 0, 2, 0];\n  if\
    \ ($n < 4) {\n    return $fibs[$n];\n  }\n  for ($i = 4; $i <= $n; $i++) {\n \
    \   $fibs[] = $fibs[$i - 1] + $fibs[$i - 2] + $fibs[$i - 3] + $fibs[$i - 4];\n\
    \  }\n  return $fibs[$n];\n}\n\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\"\
    ;\necho fib4(7) . \"\\n\";\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '4

    8

    14

    '
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 2) {\n       \
    \ return $n * 2;\n    }\n    $a = 0;\n    $b = 0;\n    $c = 2;\n    $d = 2;\n\
    \    for ($i = 3; $i <= $n; $i++) {\n        $e = $d + $a + $b + $c;\n       \
    \ $a = $b;\n        $b = $c;\n        $c = $d;\n        $d = $e;\n    }\n    return\
    \ $e;\n}\n\n$test_numbers = array(\n    0 => 0,\n    1 => 0,\n    2 => 2,\n  \
    \  3 => 0,\n    4 => 4,\n    5 => 4,\n    6 => 8,\n    7 => 14,\n    8 => 24,\n\
    \    9 => 42,\n    10 => 70,\n    11 => 116,\n    12 => 190,\n    13 => 308,\n\
    \    14 => 500,\n    15 => 810,\n    16 => 1308,\n    17 => 2118,\n    18 => 3426,\n\
    \    19 => 5544,\n    20 => 8970,\n    21 => 14514,\n    22 => 23464,\n    23\
    \ => 37978,\n    24 => 61442,\n    25 => 99320,\n    26 => 160762,\n    27 =>\
    \ 259080,\n    28 => 418042,\n    29 => 677122,\n    30 => 1091144,\n    31 =>\
    \ 1768266,\n    32 => 2859410,\n    33 => 4627770,\n    34 => 7487280,\n    35\
    \ => 12115990,\n    36 => 19543270,\n    37 => 31659250,\n    38 => 51302320,\n\
    \    39 => 82961120,\n    40 => 134260330,\n    41 => 217771690,\n    42 => 351989000,\n\
    \    43 => 567756990,\n    44 => 919752690,\n    45 => 1487258980,\n    46 =>\
    \ 2407015670,\n    47 => 3894274550,\n    48 => 6300291220,\n    49 => 10194561710\n\
    function candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmp9nmvmh6e.php
    on line 84

    '
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $f0 = 0;\n    $f1 = 0;\n\
    \    $f2 = 2;\n    $f3 = 0;\n    $f4 = 4;\n    for ($i = 5; $i <= $n; $i++) {\n\
    \        $sum = $f4 + $f3 + $f2 + $f1;\n        $f0 = $f1;\n        $f1 = $f2;\n\
    \        $f2 = $f3;\n        $f3 = $f4;\n        $f4 = $sum;\n    }\n    return\
    \ $f4;\n}\n\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) .\
    \ \"\\n\";\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "6\n12\n22\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpelnuzfgm.php:40\n\
    Stack trace:\n#0 /tmp/tmpelnuzfgm.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpelnuzfgm.php\
    \ on line 40\n"
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $res = [0, 0, 2, 0];\n \
    \   for ($i = 4; $i <= $n; $i++) {\n        $res[$i % 4] = array_sum($res);\n\
    \    }\n    return $res[$n % 4];\n}\n\nfunction candidate(...$args) {\n    return\
    \ fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $first = 0;\n    $second\
    \ = 0;\n    $third = 2;\n    $fourth = 0;\n    $result = 0;\n    for ($i = 0;\
    \ $i < $n - 2; $i++) {\n        $result = $first + $second + $third + $fourth;\n\
    \        $first = $second;\n        $second = $third;\n        $third = $fourth;\n\
    \        $fourth = $result;\n    }\n    return $result;\n}\n$tests = [\n    0\
    \ => 0,\n    1 => 0,\n    2 => 2,\n    3 => 0,\n    4 => 1,\n    5 => 4,\n   \
    \ 6 => 8,\n    7 => 14,\n    8 => 24,\n    9 => 42,\n    10 => 70,\n    11 =>\
    \ 118,\n    12 => 196,\n    13 => 322,\n    14 => 528,\n    15 => 866,\n    16\
    \ => 1416,\n    17 => 2328,\n    18 => 3810,\n    19 => 6192,\n    20 => 10102,\n\
    \    21 => 16504,\n    22 => 26830,\n    23 => 43696,\n    24 => 71034,\n    25\
    \ => 115430,\n    26 => 186504,\n    27 => 303442,\n    28 => 493930,\n    29\
    \ => 802372,\n    30 => 1306322,\n    31 => 2122654,\n    32 => 3459080,\n   \
    \ 33 => 5586756,\n    34 => 9046036,\n    35 => 14632924,\n    36 => 23698960,\n\
    \    37 => 38331886,\n    38 => 62031822,\n    39 => 100263728,\n    40 => 162296554,\n\
    \    41 => 262582282,\n    42 => 424978926,\n    43 => 687461112,\n    44 => 1117240038,\n\
    \    45 => 1804702050,\n    46 => 2922154088,\n    47 => 4726866138,\n    48 =>\
    \ 7649021276,\n    49 => 12374883414,\n    50 => 20023904590,\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp8m6p0pma.php on line 82

    '
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    // The base case\n    if\
    \ ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 0;\n\
    \    }\n    if ($n == 2) {\n        return 2;\n    }\n    if ($n == 3) {\n   \
    \     return 0;\n    }\n    //\n    $n1 = 0;\n    $n2 = 0;\n    $n3 = 2;\n   \
    \ $n4 = 0;\n    $i = 4;\n    while ($i <= $n) {\n        $sum = $n1 + $n2 + $n3\
    \ + $n4;\n        $n1 = $n2;\n        $n2 = $n3;\n        $n3 = $n4;\n       \
    \ $n4 = $sum;\n        $i++;\n    }\n    return $sum;\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 2) return 0;\n\
    \    $f[0] = 0;\n    $f[1] = 0;\n    $f[2] = 2;\n    $f[3] = 0;\n    for ($i =\
    \ 4; $i <= $n; $i++) {\n        $f[$i] = $f[$i-1] + $f[$i-2] + $f[$i-3] + $f[$i-4];\n\
    \    }\n    return $f[$n];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $a = 0;\n    $b = 0;\n \
    \   $c = 2;\n    $d = 0;\n    if ($n == 0) {\n        return $a;\n    } else if\
    \ ($n == 1) {\n        return $b;\n    } else if ($n == 2) {\n        return $c;\n\
    \    } else if ($n == 3) {\n        return $d;\n    } else {\n        for ($i\
    \ = 4; $i <= $n; $i++) {\n            $e = $a + $b + $c + $d;\n            $a\
    \ = $b;\n            $b = $c;\n            $c = $d;\n            $d = $e;\n  \
    \      }\n        return $e;\n    }\n}\n\necho fib4(0);\necho \"<br>\";\necho\
    \ fib4(1);\necho \"<br>\";\necho fib4(2);\necho \"<br>\";\necho fib4(3);\necho\
    \ \"<br>\";\necho fib4(4);\necho \"<br>\";\necho fib4(5);\necho \"<br>\";\necho\
    \ fib4(6);\necho \"<br>\";\necho fib4(7);\necho \"<br>\";\necho fib4(8);\necho\
    \ \"<br>\";\necho fib4(9);\necho \"<br>\";\necho fib4(10);\necho \"<br>\";\necho\
    \ fib4(11);\necho \"<br>\";\necho fib4(12);\necho \"<br>\";\necho fib4(13);\n\
    echo \"<br>\";\necho fib4(14);\necho \"<br>\";\necho fib4(15);\necho \"<br>\"\
    ;\necho fib4(16);\necho \"<br>\";\necho fib4(17);\necho \"<br>\";\necho fib4(18);\n\
    echo \"<br>\";\necho fib4(19);\necho \"<br>\";\necho fib4(20);\necho \"<br>\"\
    ;\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: 0<br>0<br>2<br>0<br>2<br>4<br>8<br>14<br>28<br>54<br>104<br>200<br>386<br>744<br>1434<br>2764<br>5328<br>10270<br>19796<br>38158<br>73552<br>
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\t$previous = 0;\n\t$current\
    \ = 0;\n\t$next = 2;\n\tif ($n == 0) {\n\t\treturn 0;\n\t}\n\tif ($n == 1) {\n\
    \t\treturn 0;\n\t}\n\tif ($n == 2) {\n\t\treturn 2;\n\t}\n\tif ($n == 3) {\n\t\
    \treturn 0;\n\t}\n\t$i = 3;\n\twhile ($i <= $n) {\n\t\t$previous = $current;\n\
    \t\t$current = $next;\n\t\t$next = $previous + $current + $current + $previous;\n\
    \t\t$i++;\n\t}\n\treturn $next;\n}\necho fib4(5) . PHP_EOL;\necho fib4(6) . PHP_EOL;\n\
    echo fib4(7) . PHP_EOL;\necho fib4(8) . PHP_EOL;\necho fib4(9) . PHP_EOL;\necho\
    \ fib4(10) . PHP_EOL;\necho fib4(11) . PHP_EOL;\necho fib4(12) . PHP_EOL;\necho\
    \ fib4(13) . PHP_EOL;\necho fib4(14) . PHP_EOL;\necho fib4(15) . PHP_EOL;\necho\
    \ fib4(16) . PHP_EOL;\necho fib4(17) . PHP_EOL;\necho fib4(18) . PHP_EOL;\necho\
    \ fib4(19) . PHP_EOL;\necho fib4(20) . PHP_EOL;\necho fib4(21) . PHP_EOL;\necho\
    \ fib4(22) . PHP_EOL;\necho fib4(23) . PHP_EOL;\necho fib4(24) . PHP_EOL;\necho\
    \ fib4(25) . PHP_EOL;\necho fib4(26) . PHP_EOL;\necho fib4(27) . PHP_EOL;\necho\
    \ fib4(28) . PHP_EOL;\necho fib4(29) . PHP_EOL;\necho fib4(30) . PHP_EOL;\necho\
    \ fib4(31)\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "," or ";" in
    /tmp/tmpw50pz3ih.php on line 67

    '
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  if($n < 2) {\n    return 0;\n\
    \  }\n  if($n === 2) {\n    return 2;\n  }\n  $a = 0;\n  $b = 0;\n  $c = 2;\n\
    \  $d = 0;\n  for($i = 3; $i <= $n; $i++) {\n    $d = $a + $b + $c;\n    $a =\
    \ $b;\n    $b = $c;\n    $c = $d;\n  }\n  return $d;\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpckvbk1cv.php:40\n\
    Stack trace:\n#0 /tmp/tmpckvbk1cv.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpckvbk1cv.php\
    \ on line 40\n"
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  // TODO: Implement me\n}\n\
    function candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplst2x0ag.php:23\n\
    Stack trace:\n#0 /tmp/tmplst2x0ag.php(29): test()\n#1 {main}\n  thrown in /tmp/tmplst2x0ag.php\
    \ on line 23\n"
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $a = 0;\n    $b = 0;\n \
    \   $c = 2;\n    $d = 0;\n    if ($n == 0) {\n        return $a;\n    } else if\
    \ ($n == 1) {\n        return $b;\n    } else if ($n == 2) {\n        return $c;\n\
    \    } else if ($n == 3) {\n        return $d;\n    } else {\n        for ($i\
    \ = 4; $i <= $n; $i++) {\n            $temp = $a + $b + $c + $d;\n           \
    \ $a = $b;\n            $b = $c;\n            $c = $d;\n            $d = $temp;\n\
    \        }\n        return $d;\n    }\n}\n\necho fib4(5) . PHP_EOL;\necho fib4(6)\
    \ . PHP_EOL;\necho fib4(7) . PHP_EOL;\nfunction candidate(...$args) {\n    return\
    \ fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '4

    8

    14

    '
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $arr = [0, 0, 2, 0];\n \
    \   if ($n <= 3) {\n        return $arr[$n];\n    }\n    for ($i = 4; $i <= $n;\
    \ $i++) {\n        $arr[$i] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i - 3] + $arr[$i\
    \ - 4];\n    }\n    return $arr[$n];\n}\necho fib4(5);\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '4'
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $a = 0;\n    $b = 0;\n \
    \   $c = 2;\n    $d = 0;\n    $i = 3;\n    if ($n == 0) {\n        return 0;\n\
    \    }\n    if ($n == 1) {\n        return 0;\n    }\n    if ($n == 2) {\n   \
    \     return 2;\n    }\n    if ($n == 3) {\n        return 0;\n    }\n    while\
    \ ($i < $n) {\n        $d = $a + $b + $c;\n        $a = $b;\n        $b = $c;\n\
    \        $c = $d;\n        $i++;\n    }\n    return $d;\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpckifzkf8.php:49\n\
    Stack trace:\n#0 /tmp/tmpckifzkf8.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpckifzkf8.php\
    \ on line 49\n"
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\t$zero = 0;\n\t$one = 0;\n\t\
    $two = 2;\n\t$three = 0;\n\t$four = 0;\n\tif ($n==0){\n\t\treturn $zero;\n\t}\
    \ else if ($n==1){\n\t\treturn $one;\n\t} else if ($n==2){\n\t\treturn $two;\n\
    \t} else if ($n==3){\n\t\treturn $three;\n\t} else if ($n>=4){\n\t\t$total = 0;\n\
    \t\t$count = 4;\n\t\twhile ($count <= $n){\n\t\t\t$total = $one + $two + $three\
    \ + $four;\n\t\t\t$one = $two;\n\t\t\t$two = $three;\n\t\t\t$three = $four;\n\t\
    \t\t$four = $total;\n\t\t\t$count++;\n\t\t}\n\t\treturn $total;\n\t}\n}\necho\
    \ fib4(5);\necho \"\\n\";\necho fib4(6);\necho \"\\n\";\necho fib4(7);\necho \"\
    \\n\";\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "4\n6\n12\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuacf2617.php:55\n\
    Stack trace:\n#0 /tmp/tmpuacf2617.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpuacf2617.php\
    \ on line 55\n"
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $fib4_seq = [0, 0, 2, 0];\n\
    \    $i = 4;\n    while ($i <= $n) {\n        $fib4_seq[$i % 4] = $fib4_seq[($i\
    \ - 1) % 4] + $fib4_seq[($i - 2) % 4] + $fib4_seq[($i - 3) % 4] + $fib4_seq[($i\
    \ - 4) % 4];\n        $i++;\n    }\n    return $fib4_seq[$n % 4];\n}\n\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  $array = array();\n  $array[0]\
    \ = 0;\n  $array[1] = 0;\n  $array[2] = 2;\n  $array[3] = 0;\n  for ($i = 4; $i\
    \ <= $n; $i++) {\n    $array[$i] = $array[$i-1] + $array[$i-2] + $array[$i-3]\
    \ + $array[$i-4];\n  }\n  return $array[$n];\n}\necho fib4(3);\n\necho \"\\n\"\
    ;\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: '0

    '
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\t$a = 0;\n\t$b = 0;\n\t$c =\
    \ 2;\n\t$d = 0;\n\t$current = $a + $b + $c + $d;\n\tif ($n == 0) return $a;\n\t\
    if ($n == 1) return $b;\n\tif ($n == 2) return $c;\n\tif ($n == 3) return $d;\n\
    \tfor ($i = 4; $i <= $n; $i++) {\n\t\t$a = $b;\n\t\t$b = $c;\n\t\t$c = $d;\n\t\
    \t$d = $current;\n\t\t$current = $a + $b + $c + $d;\n\t}\n\treturn $current;\n\
    }\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb5i20656.php:40\n\
    Stack trace:\n#0 /tmp/tmpb5i20656.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpb5i20656.php\
    \ on line 40\n"
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    // TODO: write code to compute\
    \ the fib4 number sequence here\n}\nfunction candidate(...$args) {\n    return\
    \ fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4xb_h94a.php:23\n\
    Stack trace:\n#0 /tmp/tmp4xb_h94a.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp4xb_h94a.php\
    \ on line 23\n"
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $n1 = 0;\n    $n2 = 0;\n\
    \    $n3 = 2;\n    $n4 = 0;\n    if ($n <= 0) return 0;\n    if ($n <= 3) return\
    \ $n3;\n    $n--;\n    while ($n > 0) {\n        $n--;\n        $n1 = $n2;\n \
    \       $n2 = $n3;\n        $n3 = $n4;\n        $n4 = $n1 + $n2 + $n3 + $n4;\n\
    \    }\n    return $n4;\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7m4xloy1.php:38\n\
    Stack trace:\n#0 /tmp/tmp7m4xloy1.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp7m4xloy1.php\
    \ on line 38\n"
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\tif ($n == 0) return 0;\n\t\
    if ($n == 1) return 0;\n\tif ($n == 2) return 2;\n\tif ($n == 3) return 0;\n\t\
    $prev3 = 0;\n\t$prev2 = 0;\n\t$prev1 = 2;\n\t$prev0 = 0;\n\tfor ($i = 4; $i <=\
    \ $n; $i++) {\n\t\t$current = $prev3 + $prev2 + $prev1 + $prev0;\n\t\t$prev3 =\
    \ $prev2;\n\t\t$prev2 = $prev1;\n\t\t$prev1 = $prev0;\n\t\t$prev0 = $current;\n\
    \t}\n\treturn $current;\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $a = 0;\n    $b = 0;\n \
    \   $c = 2;\n    $d = 0;\n    $i = 3;\n    while ($i <= $n) {\n        $e = $a\
    \ + $b + $c + $d;\n        $a = $b;\n        $b = $c;\n        $c = $d;\n    \
    \    $d = $e;\n        $i++;\n    }\n    return $d;\n}\n\nvar_dump(fib4(5));\n\
    var_dump(fib4(6));\nvar_dump(fib4(7));\nfunction candidate(...$args) {\n    return\
    \ fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "int(8)\nint(14)\nint(28)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpfe9h2bid.php:40\nStack trace:\n#0 /tmp/tmpfe9h2bid.php(46): test()\n\
    #1 {main}\n  thrown in /tmp/tmpfe9h2bid.php on line 40\n"
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\t$arr = [0, 0, 2, 0];\n\tfor\
    \ ($i = 4; $i <= $n; $i++) {\n\t\t$arr[$i % 4] = $arr[($i-1) % 4] + $arr[($i-2)\
    \ % 4] + $arr[($i-3) % 4] + $arr[($i-4) % 4];\n\t}\n\treturn $arr[$n % 4];\n}\n\
    \necho fib4(5); // 4\necho \"\\n\";\necho fib4(6); // 8\necho \"\\n\";\necho fib4(7);\
    \ // 14\necho \"\\n\";\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '4

    8

    14

    '
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $results = [0, 0, 2, 0];\n\
    \    if($n < 4) {\n        return $results[$n];\n    }\n    $fib4 = 0;\n    $fib3\
    \ = 0;\n    $fib2 = 2;\n    $fib1 = 0;\n    for($i = 4; $i <= $n; $i++) {\n  \
    \      $fib4 = $fib3 + $fib2 + $fib1;\n        $fib1 = $fib2;\n        $fib2 =\
    \ $fib3;\n        $fib3 = $fib4;\n    }\n    return $fib4;\n}\n\necho fib4(7);\n\
    function candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "12\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp1m4lt5q.php:40\n\
    Stack trace:\n#0 /tmp/tmpp1m4lt5q.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpp1m4lt5q.php\
    \ on line 40\n"
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $f = [0, 0, 2, 0];\n   \
    \ if ($n < 4) {\n        return $f[$n];\n    }\n    for ($i = 4; $i <= $n; $i++)\
    \ {\n        $f[$i%4] = $f[($i-1)%4] + $f[($i-2)%4] + $f[($i-3)%4] + $f[($i-4)%4];\n\
    \    }\n    return $f[$n%4];\n}\n\nfunction candidate(...$args) {\n    return\
    \ fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\t$n4=0;\n\t$n3=0;\n\t$n2=2;\n\
    \t$n1=0;\n\t$result=0;\n\tif($n==0) {\n\t\treturn 0;\n\t}\n\tif($n==1) {\n\t\t\
    return 0;\n\t}\n\tif($n==2) {\n\t\treturn 2;\n\t}\n\tif($n==3) {\n\t\treturn 0;\n\
    \t}\n\tfor($i=3;$i<$n;$i++) {\n\t\t$result=$n4+$n3+$n2+$n1;\n\t\t$n4=$n3;\n\t\t\
    $n3=$n2;\n\t\t$n2=$n1;\n\t\t$n1=$result;\n\t}\n\treturn $result;\n}\necho fib4(5);\n\
    echo \"\\n\";\necho fib4(6);\necho \"\\n\";\necho fib4(7);\necho \"\\n\";\n\n\
    function candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: '4

    8

    14

    '
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    // YOUR CODE HERE\n    if\
    \ ($n <= 2) {\n        return $n * 2;\n    }\n    $f1 = 0;\n    $f2 = 0;\n   \
    \ $f3 = 2;\n    $f4 = 2;\n    for ($i = 3; $i <= $n; $i++) {\n        $f1 = $f2;\n\
    \        $f2 = $f3;\n        $f3 = $f4;\n        $f4 = $f1 + $f2 + $f3;\n    }\n\
    \    return $f4;\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaz9aultv.php:38\n\
    Stack trace:\n#0 /tmp/tmpaz9aultv.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpaz9aultv.php\
    \ on line 38\n"
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $fibs = [0, 0, 2, 0];\n\
    \    for ($i = 4; $i <= $n; $i++) {\n        $fibs[$i % 4] = array_sum(array_slice($fibs,\
    \ $i - 4));\n    }\n    return $fibs[$n % 4];\n}\necho fib4(5) . PHP_EOL;\necho\
    \ fib4(6) . PHP_EOL;\necho fib4(7) . PHP_EOL;\nfunction candidate(...$args) {\n\
    \    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "2\n2\n0\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp38bqsf74.php:30\n\
    Stack trace:\n#0 /tmp/tmp38bqsf74.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp38bqsf74.php\
    \ on line 30\n"
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\tif ($n == 0) {\n\t\treturn\
    \ 0;\n\t}\n\tif ($n == 1) {\n\t\treturn 0;\n\t}\n\tif ($n == 2) {\n\t\treturn\
    \ 2;\n\t}\n\tif ($n == 3) {\n\t\treturn 0;\n\t}\n\t$a = 0;\n\t$b = 0;\n\t$c =\
    \ 2;\n\t$d = 0;\n\tfor ($i = 4; $i <= $n; $i++) {\n\t\t$e = $a + $b + $c + $d;\n\
    \t\t$a = $b;\n\t\t$b = $c;\n\t\t$c = $d;\n\t\t$d = $e;\n\t}\n\treturn $e;\n}\n\
    \nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979357
- exit_code: 0
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $a = 0;\n    $b = 0;\n \
    \   $c = 2;\n    $d = 0;\n    if ($n == 0) {\n        return $a;\n    } else if\
    \ ($n == 1) {\n        return $b;\n    } else if ($n == 2) {\n        return $c;\n\
    \    } else if ($n == 3) {\n        return $d;\n    }\n    for ($i = 0; $i < $n-3;\
    \ $i++) {\n        $temp = $a + $b + $c + $d;\n        $a = $b;\n        $b =\
    \ $c;\n        $c = $d;\n        $d = $temp;\n    }\n    return $d;\n}\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 1) return 0;\n\
    \    if ($n == 2) return 2;\n    if ($n == 3) return 0;\n    $n1 = 0;\n    $n2\
    \ = 0;\n    $n3 = 2;\n    $n4 = 0;\n    $i = 4;\n    while ($i <= $n) {\n    \
    \    $n1 = $n2;\n        $n2 = $n3;\n        $n3 = $n4;\n        $n4 = $n1 + $n2\
    \ + $n3 + $n4;\n        $i++;\n    }\n    return $n4;\n}\n\necho fib4(7) . PHP_EOL;\n\
    function candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "36\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp29u9ah_0.php:40\n\
    Stack trace:\n#0 /tmp/tmp29u9ah_0.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp29u9ah_0.php\
    \ on line 40\n"
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  $fibs = [0, 0, 2, 0];\n  for\
    \ ($i = 3; $i < $n; $i++) {\n    $fibs[] = $fibs[$i-1] + $fibs[$i-2] + $fibs[$i-3]\
    \ + $fibs[$i-4];\n  }\n  return $fibs[$n];\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key -1 in /tmp/tmpmh2naz78.php on line 18\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpmh2naz78.php:28\nStack\
    \ trace:\n#0 /tmp/tmpmh2naz78.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpmh2naz78.php\
    \ on line 28\n"
  timestamp: 1659979357
- exit_code: 255
  program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $fib_prev_prev_prev = 0;\n\
    \    $fib_prev_prev = 0;\n    $fib_prev = 2;\n    $fib = 0;\n    for ($i = 3;\
    \ $i <= $n; $i++) {\n        $fib = $fib_prev_prev_prev + $fib_prev_prev + $fib_prev;\n\
    \        $fib_prev_prev_prev = $fib_prev_prev;\n        $fib_prev_prev = $fib_prev;\n\
    \        $fib_prev = $fib;\n    }\n    return $fib;\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9sdbrite.php:34\n\
    Stack trace:\n#0 /tmp/tmp9sdbrite.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp9sdbrite.php\
    \ on line 34\n"
  timestamp: 1659979357
