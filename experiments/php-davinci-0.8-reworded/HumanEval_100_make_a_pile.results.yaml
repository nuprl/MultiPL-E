language: php
name: HumanEval_100_make_a_pile
results:
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $array = array();\n    $count = $n;\n    while ($count > 0) {\n     \
    \   $array[] = $n;\n        if ($n % 2 == 0) {\n            $n += 2;\n       \
    \ } else {\n            $n += 1;\n        }\n        $count--;\n    }\n    return\
    \ $array;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpha_pw7ot.php:32\n\
    Stack trace:\n#0 /tmp/tmpha_pw7ot.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpha_pw7ot.php\
    \ on line 32\n"
  timestamp: 1659823359
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  // Code here\n  $result = array();\n  $result[] = $n;\n  while ($n > 1)\
    \ {\n    $n = $n % 2 == 0 ? $n / 2 : (3 * $n + 1) / 2;\n    $result[] = $n;\n\
    \  }\n  return $result;\n}\n\necho '<h1>Result:</h1>';\necho '<pre>';\nprint_r(make_a_pile(4));\n\
    echo '</pre>';\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<h1>Result:</h1><pre>Array\n(\n    [0] => 4\n    [1] => 2\n    [2] => 1\n\
    )\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg3oc7d2z.php:32\n\
    Stack trace:\n#0 /tmp/tmpg3oc7d2z.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpg3oc7d2z.php\
    \ on line 32\n"
  timestamp: 1659823359
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $res = array();\n    while ($n) {\n        $res[] = $n;\n        $n =\
    \ ($n & 1) ? $n + 2 : $n + 1;\n    }\n    return $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmp8dvf3tre.php on line 15

    '
  timestamp: 1659823359
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $results = array();\n  for ($i = $n; $i > 0;) {\n    array_push($results,\
    \ $i);\n    if ($i % 2 === 0) {\n      $i = $i - 1;\n    } else {\n      $i =\
    \ $i - 2;\n    }\n  }\n  return $results;\n}\n\nfunction candidate(...$args) {\n\
    \    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp60becpgd.php:30\n\
    Stack trace:\n#0 /tmp/tmp60becpgd.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp60becpgd.php\
    \ on line 30\n"
  timestamp: 1659823359
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $stack = [];\n  $next = $n;\n  for ($i = 0; $i < $n; $i++) {\n    $stack[]\
    \ = $next;\n    $next = $next % 2 == 0 ? $next + 2 : $next + 1;\n  }\n  return\
    \ $stack;\n}\n$n = 3;\nprint_r(make_a_pile($n));\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 3\n    [1] => 4\n    [2] => 6\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpps3zcl25.php:28\nStack trace:\n#0 /tmp/tmpps3zcl25.php(35):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpps3zcl25.php on line 28\n"
  timestamp: 1659823359
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $levels = [$n];\n  while ($n > 0) {\n    $n = $n % 2 ? $n + 2 : $n + 1;\n\
    \    $levels[] = $n;\n  }\n  return $levels;\n}\n\n$tests = [\n  [3, [3, 5, 7]],\n\
    \  [4, [4, 6, 8, 10]],\n  [5, [5, 7, 9, 11, 13]],\n  [6, [6, 8, 10, 12, 14, 16]],\n\
    \  [7, [7, 9, 11, 13, 15, 17, 19]],\n  [8, [8, 10, 12, 14, 16, 18, 20, 22]],\n\
    \  [9, [9, 11, 13, 15, 17, 19, 21, 23, 25]],\n  [10, [10, 12, 14, 16, 18, 20,\
    \ 22, 24, 26, 28]],\n  [11, [11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31]],\n \
    \ [12, [12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34]],\n  [13, [13, 15, 17,\
    \ 19, 21, 23, 25, 27, 29, 31, 33, 35, 37]],\n  [14, [14, 16, 18, 20, 22, 24, 26,\
    \ 28, 30, 32, 34, 36, 38, 40]],\n  [15, [15, 17, 19, 21, 23, 25, 27, 29, 31, 33,\
    \ 35, 37, 39, 41, 43]],\n  [16, [16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38,\
    \ 40, 42, 44, 46]],\n  [17, [17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41,\
    \ 43, 45, 47, 49]],\n  [18, [18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42,\
    \ 44, 46, 48, 50, 52]],\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpaqjhilna.php on line 38

    '
  timestamp: 1659823359
- exit_code: 0
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    for ($i = 0; $i < $n; $i++) {\n        $result[]\
    \ = $n + 2 * $i;\n    }\n    return $result;\n}\n\n$result = make_a_pile(3);\n\
    print_r($result);\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 3\n    [1] => 5\n    [2] => 7\n)\n"
  timestamp: 1659823359
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $stones = [$n];\n    while ($n > 1) {\n        $n = $n % 2 == 0 ? $n\
    \ - 1 : $n + 1;\n        $stones[] = $n;\n    }\n    return $stones;\n}\n\nfunction\
    \ candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmp6rexugoh.php on line 16

    '
  timestamp: 1659823359
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $pile = [$n];\n  if ($n % 2 === 0) {\n    $pile[] = $n + 2;\n  } else {\n\
    \    $pile[] = $n + 1;\n  }\n  $i = 2;\n  while ($pile[$i - 1] != 1) {\n    if\
    \ ($pile[$i - 1] % 2 === 0) {\n      $pile[] = $pile[$i - 1] - 2;\n    } else\
    \ {\n      $pile[] = $pile[$i - 1] - 1;\n    }\n    $i++;\n  }\n  return $pile;\n\
    }\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmpcbi3d_wo.php on line 22

    '
  timestamp: 1659823359
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $ret = array();\n  $level = $n;\n  while ($level >= 1) {\n    $ret[] =\
    \ $level;\n    $level = ($level % 2 === 0) ? $level / 2 : ($level + 1) / 2;\n\
    \  }\n  return $ret;\n}\necho implode(', ', make_a_pile(3)) . \"\\n\";\necho implode(',\
    \ ', make_a_pile(6)) . \"\\n\";\necho implode(', ', make_a_pile(10)) . \"\\n\"\
    ;\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmp0cedtydn.php on line 16

    '
  timestamp: 1659823359
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    for ($i = $n; $i > 0; $i--) {\n        $result[]\
    \ = $n;\n        $n = ($n % 2 == 0) ? $n + 2 : $n + 1;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1c_q8gbw.php:26\n\
    Stack trace:\n#0 /tmp/tmp1c_q8gbw.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp1c_q8gbw.php\
    \ on line 26\n"
  timestamp: 1659823359
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] =\
    \ $n;\n        $n += ($n % 2 === 0) ? 2 : 1;\n    }\n    return $result;\n}\n\
    var_dump(make_a_pile(2));\nvar_dump(make_a_pile(3));\nvar_dump(make_a_pile(6));\n\
    var_dump(make_a_pile(7));\nvar_dump(make_a_pile(10));\nvar_dump(make_a_pile(11));\n\
    var_dump(make_a_pile(100));\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmpk5uimzla.php on line 15

    '
  timestamp: 1659823359
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  if ($n > 0) {\n    $a[] = $n;\n    for ($i = 1; $i < $n; $i++) {\n    \
    \  if ($a[$i - 1] % 2 == 0) {\n        $a[] = $a[$i - 1] + 2;\n      } else {\n\
    \        $a[] = $a[$i - 1] + 1;\n      }\n    }\n    return $a;\n  }\n}\n\nfunction\
    \ candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp87icvcc0.php:31\n\
    Stack trace:\n#0 /tmp/tmp87icvcc0.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp87icvcc0.php\
    \ on line 31\n"
  timestamp: 1659823359
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  for ($i = $n; $i > 0; $i--) {\n    if ($i % 2 ===\
    \ 0) {\n      $result[] = $i + 1;\n    } else {\n      $result[] = $i + 2;\n \
    \   }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !==\
    \ array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkxlg44ct.php:29\n\
    Stack trace:\n#0 /tmp/tmpkxlg44ct.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpkxlg44ct.php\
    \ on line 29\n"
  timestamp: 1659823359
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $pile = array($n);\n  while($n > 1) {\n    $n = ($n % 2) ? $n + 2 : $n\
    \ + 1;\n    $pile[] = $n;\n  }\n  return $pile;\n}\n\nif (basename(__FILE__) ==\
    \ basename($_SERVER['PHP_SELF'])) {\n  $n = readline(\"Enter a positive integer:\
    \ \");\n  $pile = make_a_pile($n);\n  echo \"{\" . implode(\", \", $pile) . \"\
    }\\n\";\n}\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function readline() in\
    \ /tmp/tmp3dqoo9vv.php:22\nStack trace:\n#0 {main}\n  thrown in /tmp/tmp3dqoo9vv.php\
    \ on line 22\n"
  timestamp: 1659823359
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $level = $n;\n  $array = array();\n  while ($level >= 1) {\n    array_push($array,\
    \ $level);\n    $level = $level%2 == 0 ? $level/2 : ($level+1)/2;\n  }\n  return\
    \ $array;\n}\n\necho PHP_EOL;\nprint_r(make_a_pile(3));\nprint_r(make_a_pile(6));\n\
    print_r(make_a_pile(9));\nprint_r(make_a_pile(12));\nprint_r(make_a_pile(15));\n\
    echo PHP_EOL;\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '


    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmpfz0tsy0p.php on line 16

    '
  timestamp: 1659823359
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $pile = array($n);\n  while ($n > 1) {\n    if ($n % 2) {\n      $n = $n\
    \ - 2;\n    } else {\n      $n--;\n    }\n    $pile[] = $n;\n  }\n  return $pile;\n\
    }\necho implode(', ', make_a_pile(30)) . PHP_EOL;\necho implode(', ', make_a_pile(3))\
    \ . PHP_EOL;\necho implode(', ', make_a_pile(12)) . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "30, 29, 27, 25, 23, 21, 19, 17, 15, 13, 11, 9, 7, 5, 3, 1\n3, 1\n12, 11,\
    \ 9, 7, 5, 3, 1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbg85uwkh.php:32\n\
    Stack trace:\n#0 /tmp/tmpbg85uwkh.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpbg85uwkh.php\
    \ on line 32\n"
  timestamp: 1659823359
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $pile = [$n];\n    while ($n > 1) {\n        if ($n % 2 == 0) {\n   \
    \         $n = $n / 2;\n        } else {\n            $n = ($n + 1) / 2;\n   \
    \     }\n        $pile[] = $n;\n    }\n    return $pile;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk3dneqpa.php:30\n\
    Stack trace:\n#0 /tmp/tmpk3dneqpa.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpk3dneqpa.php\
    \ on line 30\n"
  timestamp: 1659823359
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $level = 0;\n  $result = array();\n  while ($n > 0) {\n    $result[$level]\
    \ = $n;\n    $n = ($n % 2 == 0) ? $n - 1 : $n - 2;\n    $level++;\n  }\n  return\
    \ $result;\n}\n\n$input = array(\n  3,\n  4,\n  5,\n  12,\n  10,\n  14,\n  15,\n\
    \  25,\n  0,\n  -1,\n  -2,\n  -3,\n  0.3,\n  0.9,\n  -0.3,\n  -0.9,\n  '3',\n\
    \  '4',\n  '5',\n  '0',\n  '-1',\n  '-2',\n  '-3',\n  null,\n  false,\n  true,\n\
    \  array(),\n  array(1, 2, 3),\n  new stdClass,\n);\n\n$expected = array(\n  array(3,\
    \ 5, 7),\n  array(4, 6, 8),\n  array(5, 7, 9),\n  array(12, 13, 14, 15),\n  array(10,\
    \ 11, 12, 13),\n  array(14, 15, 16, 17),\n  array(15, 16, 17, 18, 19),\n  array(25,\
    \ 26, 27, 28, 29, 30, 31),\n  array(),\n  array(),\n  array(),\n  array(),\n \
    \ array(),\n  array(),\n  array(),\n  array(),\n  array(3, 5, 7),\n  array(4,\
    \ 6, 8),\n  array(5, 7, 9),\n  array(),\n  array(),\n  array(),\n  array(),\n\
    \  array(),\n  array(),\n  array(),\n  array(),\n  array(),\n  array(),\n);\n\n\
    $output = array();\nforeach ($input as $key => $value) {\n  $output[$key] = make_a_pile($value);\n\
    }\nassert($output == $expected);\n\n$tests = array(\n  'make_a_pile(3)',\n  'make_\n\
    function candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "make_", expecting ")" in
    /tmp/tmpwqusijr3.php on line 95

    '
  timestamp: 1659823359
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  if ($n <= 0) {\n    return;\n  }\n\n  $result = array($n);\n  while ($n\
    \ > 1) {\n    if ($n % 2 == 0) {\n      $n /= 2;\n    } else {\n      $n = ($n\
    \ + 1) / 2;\n    }\n    $result[] = $n;\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0z5cigzd.php:34\n\
    Stack trace:\n#0 /tmp/tmp0z5cigzd.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp0z5cigzd.php\
    \ on line 34\n"
  timestamp: 1659823359
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $pile = [$n];\n  while ($n > 1) {\n    $n = $n % 2 === 0 ? $n / 2 : ($n\
    \ + 1) / 2;\n    $pile[] = $n;\n  }\n  return $pile;\n}\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplybz1k4w.php:25\n\
    Stack trace:\n#0 /tmp/tmplybz1k4w.php(32): test()\n#1 {main}\n  thrown in /tmp/tmplybz1k4w.php\
    \ on line 25\n"
  timestamp: 1659978200
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  if($n%2==0) $n++;\n  else $n+=2;\n  $ans[] = $n;\n  $n+=2;\n  while($n<=2*$ans[0])\
    \ {\n    $ans[] = $n;\n    $n+=2;\n  }\n  return $ans;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4n12w8ta.php:29\n\
    Stack trace:\n#0 /tmp/tmp4n12w8ta.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp4n12w8ta.php\
    \ on line 29\n"
  timestamp: 1659978200
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $levels = [$n];\n  $i = 1;\n  $stones = $n;\n  while ($stones !== 1) {\n\
    \    $stones -= 2*$i;\n    if ($stones > 0) {\n      $levels[] = $stones;\n  \
    \  }\n    if ($stones < 0) {\n      $levels[] = 1;\n    }\n    $i++;\n  }\n  return\
    \ $levels;\n}\necho 'make_a_pile(3) = ';\nvar_dump(make_a_pile(3));\necho 'make_a_pile(4)\
    \ = ';\nvar_dump(make_a_pile(4));\necho 'make_a_pile(7) = ';\nvar_dump(make_a_pile(7));\n\
    echo 'make_a_pile(10) = ';\nvar_dump(make_a_pile(10));\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "make_a_pile(3) = array(2) {\n  [0]=>\n  int(3)\n  [1]=>\n  int(1)\n}\n\
    make_a_pile(4) = \nFatal error: Allowed memory size of 134217728 bytes exhausted\
    \ (tried to allocate 134217736 bytes) in /tmp/tmppnqk_q9a.php on line 22\n"
  timestamp: 1659978200
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $res = array();\n    array_push($res, $n);\n    while($n > 1) {\n   \
    \     $n = ($n % 2 == 0) ? $n / 2 : ($n + 1) / 2;\n        array_push($res, $n);\n\
    \    }\n    return $res;\n}\n\n$num = rand(1, 15);\nprint_r(make_a_pile($num));\n\
    function candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 3\n    [1] => 2\n    [2] => 1\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpyr7nitmc.php:29\nStack trace:\n#0 /tmp/tmpyr7nitmc.php(36):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpyr7nitmc.php on line 29\n"
  timestamp: 1659978200
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $pile = [$n];\n  for ($i = 1; $i < $n; $i++) {\n    $pile[] = ($n % 2 ==\
    \ 0) ? ($pile[$i - 1] + 2) : ($pile[$i - 1] + 1);\n  }\n  return $pile;\n}\nprint_r(make_a_pile(3));\n\
    print_r(make_a_pile(4));\nprint_r(make_a_pile(5));\nprint_r(make_a_pile(6));\n\
    print_r(make_a_pile(7));\nprint_r(make_a_pile(8));\nprint_r(make_a_pile(9));\n\
    print_r(make_a_pile(10));\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 3\n    [1] => 4\n    [2] => 5\n)\nArray\n(\n    [0]\
    \ => 4\n    [1] => 6\n    [2] => 8\n    [3] => 10\n)\nArray\n(\n    [0] => 5\n\
    \    [1] => 6\n    [2] => 7\n    [3] => 8\n    [4] => 9\n)\nArray\n(\n    [0]\
    \ => 6\n    [1] => 8\n    [2] => 10\n    [3] => 12\n    [4] => 14\n    [5] =>\
    \ 16\n)\nArray\n(\n    [0] => 7\n    [1] => 8\n    [2] => 9\n    [3] => 10\n \
    \   [4] => 11\n    [5] => 12\n    [6] => 13\n)\nArray\n(\n    [0] => 8\n    [1]\
    \ => 10\n    [2] => 12\n    [3] => 14\n    [4] => 16\n    [5] => 18\n    [6] =>\
    \ 20\n    [7] => 22\n)\nArray\n(\n    [0] => 9\n    [1] => 10\n    [2] => 11\n\
    \    [3] => 12\n    [4] => 13\n    [5] => 14\n    [6] => 15\n    [7] => 16\n \
    \   [8] => 17\n)\nArray\n(\n    [0] => 10\n    [1] => 12\n    [2] => 14\n    [3]\
    \ => 16\n    [4] => 18\n    [5] => 20\n    [6] => 22\n    [7] => 24\n    [8] =>\
    \ 26\n    [9] => 28\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo6hfgp5p.php:33\n\
    Stack trace:\n#0 /tmp/tmpo6hfgp5p.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpo6hfgp5p.php\
    \ on line 33\n"
  timestamp: 1659978200
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $next_odd = function($n) { return $n + 2; };\n    $next_even = function($n)\
    \ { return $n + 1; };\n    $next = $n % 2 == 0 ? $next_even : $next_odd;\n   \
    \ $levels = [];\n    for ($i = 0; $i < $n; $i++) {\n        $levels[] = $next($n);\n\
    \        $n = $next($n);\n    }\n    return $levels;\n}\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmp2nfwe15f.php on line 18

    '
  timestamp: 1659978200
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $new_n = $n;\n    $pile = array();\n    while ($new_n > 0) {\n      \
    \  $pile[] = $new_n;\n        $new_n = ($new_n % 2 == 0) ? $new_n / 2 : ($new_n\
    \ + 1) / 2;\n    }\n    return $pile;\n}\nfunction candidate(...$args) {\n   \
    \ return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmp_u739ds0.php on line 16

    '
  timestamp: 1659978200
- exit_code: 0
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n\t$result = array();\n\tfor ($i = 0; $i < $n; $i++) {\n\t\t$result[] = ($i*2)+$n;\n\
    \t}\n\treturn $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978200
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $results = array();\n  for ($i = 0; $i < $n; $i++) {\n    if ($i === 0)\
    \ {\n      $results[] = $n;\n    } else if (is_odd($results[$i - 1])) {\n    \
    \  $results[] = $results[$i - 1] + 2;\n    } else {\n      $results[] = $results[$i\
    \ - 1] + 1;\n    }\n  }\n  return $results;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_odd() in /tmp/tmpw21vj7ca.php:17\n\
    Stack trace:\n#0 /tmp/tmpw21vj7ca.php(27): make_a_pile(3)\n#1 /tmp/tmpw21vj7ca.php(31):\
    \ candidate(3)\n#2 /tmp/tmpw21vj7ca.php(38): test()\n#3 {main}\n  thrown in /tmp/tmpw21vj7ca.php\
    \ on line 17\n"
  timestamp: 1659978200
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $a = array();\n    $e = 0;\n    while ($n > 0) {\n        $a[] = $n;\n\
    \        $n -= $e % 2 ? 1 : 2;\n        $e++;\n    }\n    return $a;\n}\nfunction\
    \ candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9wh0fhda.php:27\n\
    Stack trace:\n#0 /tmp/tmp9wh0fhda.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp9wh0fhda.php\
    \ on line 27\n"
  timestamp: 1659978200
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $pile = array($n);\n  while($n > 0) {\n    if($n % 2 == 0) {\n      $n\
    \ = $n + 1;\n    } else {\n      $n = $n - 1;\n    }\n    $pile[] = $n;\n  }\n\
    \  return $pile;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmpimhykcq5.php on line 20

    '
  timestamp: 1659978200
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $levels = array();\n  for ($i = 0; $i < $n; $i++) {\n    $levels[] = $n;\n\
    \    $n = ($n % 2 == 0) ? $n + 2 : $n + 1;\n  }\n  return $levels;\n}\necho \"\
    make_a_pile(3)\\n\";\nvar_dump(make_a_pile(3));\necho \"make_a_pile(4)\\n\";\n\
    var_dump(make_a_pile(4));\necho \"make_a_pile(13)\\n\";\nvar_dump(make_a_pile(13));\n\
    \nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: 'make_a_pile(3)


    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmpp8xtv3_2.php on line 15

    '
  timestamp: 1659978200
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = [];\n    $numbers = range(1, $n);\n    $sum = 0;\n    foreach\
    \ ($numbers as $number) {\n        $sum += $number;\n        $result[] = $sum;\n\
    \    }\n    return $result;\n}\n\n$tests = [\n    [3, [3, 5, 7]],\n    [4, [4,\
    \ 6, 8, 10]],\n    [5, [5, 7, 9, 11, 13]],\n    [6, [6, 8, 10, 12, 14, 16]],\n\
    \    [7, [7, 9, 11, 13, 15, 17, 19]],\n    [8, [8, 10, 12, 14, 16, 18, 20, 22]],\n\
    \    [9, [9, 11, 13, 15, 17, 19, 21, 23, 25]],\n    [10, [10, 12, 14, 16, 18,\
    \ 20, 22, 24, 26, 28]],\n    [11, [11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31]],\n\
    \    [12, [12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34]],\n    [13, [13, 15,\
    \ 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37]],\n    [14, [14, 16, 18, 20, 22,\
    \ 24, 26, 28, 30, 32, 34, 36, 38, 40]],\n    [15, [15, 17, 19, 21, 23, 25, 27,\
    \ 29, 31, 33, 35, 37, 39, 41, 43]],\n    [16, [16, 18, 20, 22, 24, 26, 28, 30,\
    \ 32, 34, 36, 38, 40, 42, 44, 46]],\n    [17, [17, 19, 21, 23, 25, 27, 29, 31,\
    \ 33, 35, 37, 39, 41, 43, 45, 47, 49]],\n    [18, [18, 20, 22, 24, 26, 28, 30,\
    \ 32, 34, 36, 38, 40, 42, 44, 46\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "]" in /tmp/tmpco_qxid3.php
    on line 40

    '
  timestamp: 1659978200
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    if ($n == 1) {\n        return array(1);\n    }\n    $r = array($n);\n\
    \    while ($n >= 2) {\n        if ($n % 2 == 0) {\n            $n = $n / 2;\n\
    \        } else {\n            $n = ($n - 1) / 2;\n        }\n        $r[] = $n;\n\
    \    }\n    return $r;\n}\n\nprint_r(make_a_pile(3));\nprint_r(make_a_pile(6));\n\
    print_r(make_a_pile(1));\nprint_r(make_a_pile(9));\nprint_r(make_a_pile(15));\n\
    \nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 3\n    [1] => 1\n)\nArray\n(\n    [0] => 6\n    [1]\
    \ => 3\n    [2] => 1\n)\nArray\n(\n    [0] => 1\n)\nArray\n(\n    [0] => 9\n \
    \   [1] => 4\n    [2] => 2\n    [3] => 1\n)\nArray\n(\n    [0] => 15\n    [1]\
    \ => 7\n    [2] => 3\n    [3] => 1\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpcpue8tot.php:39\nStack trace:\n#0 /tmp/tmpcpue8tot.php(46):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpcpue8tot.php on line 39\n"
  timestamp: 1659978200
- exit_code: 0
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    for ($i = 0; $i < $n; $i++) {\n        if ($i\
    \ == 0) {\n            $result[] = $n;\n        } else {\n            $result[]\
    \ = $result[$i - 1] + 2;\n        }\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978200
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $level = [$n];\n  while ($n > 1) {\n    $n = ($n % 2) ? $n - 1 : $n - 2;\n\
    \    $level[] = $n;\n  }\n  return $level;\n}\n$example = [3, 6, 8, 5, 9, 0, 20,\
    \ 11, 14, 1, 2, 12, 9, 16, 13, -1, -3, 4, 17, 7, 19, 18, 15, 10];\nforeach ($example\
    \ as $n) {\n  echo \"$n: \";\n  print_r(make_a_pile($n));\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "3: Array\n(\n    [0] => 3\n    [1] => 2\n    [2] => 0\n)\n6: Array\n(\n\
    \    [0] => 6\n    [1] => 4\n    [2] => 2\n    [3] => 0\n)\n8: Array\n(\n    [0]\
    \ => 8\n    [1] => 6\n    [2] => 4\n    [3] => 2\n    [4] => 0\n)\n5: Array\n\
    (\n    [0] => 5\n    [1] => 4\n    [2] => 2\n    [3] => 0\n)\n9: Array\n(\n  \
    \  [0] => 9\n    [1] => 8\n    [2] => 6\n    [3] => 4\n    [4] => 2\n    [5] =>\
    \ 0\n)\n0: Array\n(\n    [0] => 0\n)\n20: Array\n(\n    [0] => 20\n    [1] =>\
    \ 18\n    [2] => 16\n    [3] => 14\n    [4] => 12\n    [5] => 10\n    [6] => 8\n\
    \    [7] => 6\n    [8] => 4\n    [9] => 2\n    [10] => 0\n)\n11: Array\n(\n  \
    \  [0] => 11\n    [1] => 10\n    [2] => 8\n    [3] => 6\n    [4] => 4\n    [5]\
    \ => 2\n    [6] => 0\n)\n14: Array\n(\n    [0] => 14\n    [1] => 12\n    [2] =>\
    \ 10\n    [3] => 8\n    [4] => 6\n    [5] => 4\n    [6] => 2\n    [7] => 0\n)\n\
    1: Array\n(\n    [0] => 1\n)\n2: Array\n(\n    [0] => 2\n    [1] => 0\n)\n12:\
    \ Array\n(\n    [0] => 12\n    [1] => 10\n    [2] => 8\n    [3] => 6\n    [4]\
    \ => 4\n    [5] => 2\n    [6] => 0\n)\n9: Array\n(\n    [0] => 9\n    [1] => 8\n\
    \    [2] => 6\n    [3] => 4\n    [4] => 2\n    [5] => 0\n)\n16: Array\n(\n   \
    \ [0] => 16\n    [1] => 14\n    [2] => 12\n    [3] => 10\n    [4] => 8\n    [5]\
    \ => 6\n    [6] => 4\n    [7] => 2\n    [8] => 0\n)\n13: Array\n(\n    [0] =>\
    \ 13\n    [1] => 12\n    [2] => 10\n    [3] => 8\n    [4] => 6\n    [5] => 4\n\
    \    [6] => 2\n    [7] => 0\n)\n-1: Array\n(\n    [0] => -1\n)\n-3: Array\n(\n\
    \    [0] => -3\n)\n4: Array\n(\n    [0] => 4\n    [1] => 2\n    [2] => 0\n)\n\
    17: Array\n(\n    [0] => 17\n    [1] => 16\n    [2] => 14\n    [3] => 12\n   \
    \ [4] => 10\n    [5] => 8\n    [6] => 6\n    [7] => 4\n    [8] => 2\n    [9] =>\
    \ 0\n)\n7: Array\n(\n    [0] => 7\n    [1] => 6\n    [2] => 4\n    [3] => 2\n\
    \    [4] => 0\n)\n19: Array\n(\n    [0] => 19\n    [1] => 18\n    [2] => 16\n\
    \    [3] => 14\n    [4] => 12\n    [5] => 10\n    [6] => 8\n    [7] => 6\n   \
    \ [8] => 4\n    [9] => 2\n    [10] => 0\n)\n18: Array\n(\n    [0] => 18\n    [1]\
    \ => 16\n    [2] => 14\n    [3] => 12\n    [4] => 10\n    [5] => 8\n    [6] =>\
    \ 6\n    [7] => 4\n    [8] => 2\n    [9] => 0\n)\n15: Array\n(\n    [0] => 15\n\
    \    [1] => 14\n    [2] => 12\n    [3] => 10\n    [4] => 8\n    [5] => 6\n   \
    \ [6] => 4\n    ["
  timestamp: 1659978200
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n\t$arr = array();\n\t$arr[] = $n;\n\twhile($n > 1) {\n\t\tif($n % 2 == 0)\
    \ {\n\t\t\t$n -= 1;\n\t\t} else {\n\t\t\t$n -= 2;\n\t\t}\n\t\t$arr[] = $n;\n\t\
    }\n\treturn $arr;\n}\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc4o5yi78.php:30\n\
    Stack trace:\n#0 /tmp/tmpc4o5yi78.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpc4o5yi78.php\
    \ on line 30\n"
  timestamp: 1659978200
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $pile = array($n);\n  while ($n >= 2) {\n    if ($n % 2 == 0) {\n     \
    \ $n += 1;\n    } else {\n      $n += 2;\n    }\n    $pile[] = $n;\n  }\n  return\
    \ $pile;\n}\necho implode(', ', make_a_pile(3)) . PHP_EOL;\necho implode(', ',\
    \ make_a_pile(5)) . PHP_EOL;\necho implode(', ', make_a_pile(6)) . PHP_EOL;\n\
    function candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmpw3pujkxp.php on line 20

    '
  timestamp: 1659978200
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  $count = $n;\n  while ($count > 0) {\n    $result[]\
    \ = $count;\n    if ($count % 2 == 0) {\n      $count--;\n    }\n    $count--;\n\
    \  }\n  return array_reverse($result);\n}\necho print_r(make_a_pile(3)) . \"\\\
    n\";\necho print_r(make_a_pile(6)) . \"\\n\";\nfunction candidate(...$args) {\n\
    \    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 2\n    [1] => 3\n)\n1\nArray\n(\n    [0] => 2\n  \
    \  [1] => 4\n    [2] => 6\n)\n1\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpvsmlh6if.php:31\nStack trace:\n#0 /tmp/tmpvsmlh6if.php(38): test()\n\
    #1 {main}\n  thrown in /tmp/tmpvsmlh6if.php on line 31\n"
  timestamp: 1659978200
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  if ($n <= 0) return [];\n  $pile = [];\n  $count = $n;\n  while ($count\
    \ >= 0) {\n    $pile[] = $count;\n    $count = $count % 2 ? $count + 2 : $count\
    \ + 1;\n  }\n  return $pile;\n}\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmpexw2ovr0.php on line 17

    '
  timestamp: 1659978200
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $output = array();\n    $curr = $n;\n    while ($curr) {\n        $output[]\
    \ = $curr;\n        $curr = $curr % 2 === 0 ? $curr + 2 : $curr + 1;\n    }\n\
    \    return $output;\n}\nprint_r(make_a_pile(3));\nprint_r(make_a_pile(10));\n\
    function candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmppeb_z6ai.php on line 16

    '
  timestamp: 1659978200
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    $start = $n;\n    $result[] = $start;\n    while\
    \ ($start > 1) {\n        if ($start % 2 == 0) {\n            $start = $start\
    \ - 1;\n        } else {\n            $start = $start - 2;\n        }\n      \
    \  $result[] = $start;\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmzsebq_8.php:31\n\
    Stack trace:\n#0 /tmp/tmpmzsebq_8.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpmzsebq_8.php\
    \ on line 31\n"
  timestamp: 1659978200
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  while ($n > 0) {\n    $result[] = $n;\n    $n = $n\
    \ % 2 == 0 ? $n + 2 : $n + 1;\n  }\n  return $result;\n}\necho implode(', ', make_a_pile(3))\
    \ . \"\\n\";\necho implode(', ', make_a_pile(5)) . \"\\n\";\necho implode(', ',\
    \ make_a_pile(6)) . \"\\n\";\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmpjlm7e_ik.php on line 15

    '
  timestamp: 1659978200
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $level = 0;\n  $stones = $n;\n  $pile = array();\n  while ($stones > 0)\
    \ {\n    $pile[$level] = $stones;\n    $stones -= $level;\n    $level++;\n  }\n\
    \  return $pile;\n}\nprint_r(make_a_pile(3));\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 3\n    [1] => 3\n    [2] => 2\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp_40ra4j8.php:30\nStack trace:\n#0 /tmp/tmp_40ra4j8.php(37):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp_40ra4j8.php on line 30\n"
  timestamp: 1659978200
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $pile = array($n);\n  if ($n < 3) {\n    return $pile;\n  }\n  $last =\
    \ $n;\n  while ($last > 3) {\n    if ($last % 2 == 0) {\n      $last = $last /\
    \ 2;\n    } else {\n      $last = $last - 1;\n    }\n    $last = $last * 2 + 1;\n\
    \    $pile[] = $last;\n  }\n  return $pile;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvi75ed9i.php:35\n\
    Stack trace:\n#0 /tmp/tmpvi75ed9i.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpvi75ed9i.php\
    \ on line 35\n"
  timestamp: 1659978200
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  $a = $n;\n  for ($i = 0; $i < $n; $i++) {\n    $result[]\
    \ = $a;\n    if ($a % 2 === 0) {\n      $a += 2;\n    } else {\n      $a += 1;\n\
    \    }\n  }\n  return $result;\n}\n$n = 3;\nvar_dump(make_a_pile($n));\n$n = 5;\n\
    var_dump(make_a_pile($n));\n$n = 7;\nvar_dump(make_a_pile($n));\n$n = 0;\nvar_dump(make_a_pile($n));\n\
    $n = -9;\nvar_dump(make_a_pile($n));\nfunction candidate(...$args) {\n    return\
    \ make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !==\
    \ array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(3) {\n  [0]=>\n  int(3)\n  [1]=>\n  int(4)\n  [2]=>\n  int(6)\n}\n\
    array(5) {\n  [0]=>\n  int(5)\n  [1]=>\n  int(6)\n  [2]=>\n  int(8)\n  [3]=>\n\
    \  int(10)\n  [4]=>\n  int(12)\n}\narray(7) {\n  [0]=>\n  int(7)\n  [1]=>\n  int(8)\n\
    \  [2]=>\n  int(10)\n  [3]=>\n  int(12)\n  [4]=>\n  int(14)\n  [5]=>\n  int(16)\n\
    \  [6]=>\n  int(18)\n}\narray(0) {\n}\narray(0) {\n}\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpfsxxgxcu.php:40\nStack trace:\n#0 /tmp/tmpfsxxgxcu.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpfsxxgxcu.php on line 40\n"
  timestamp: 1659978200
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] =\
    \ $n;\n        $n = $n % 2 ? $n + 2 : $n + 1;\n    }\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmpajdgiowh.php on line 15

    '
  timestamp: 1659978200
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $current = $n;\n  $result = [$n];\n  while ($current > 1) {\n    if ($current\
    \ % 2 == 0) {\n      $current = $current / 2;\n    } else {\n      $current =\
    \ ($current + 1) / 2;\n    }\n    $result[] = $current;\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7339upb6.php:31\n\
    Stack trace:\n#0 /tmp/tmp7339upb6.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp7339upb6.php\
    \ on line 31\n"
  timestamp: 1659978200
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $levels = array();\n    for ($i = 0; $i < $n; $i++) {\n        $levels[]\
    \ = ($i+1) * 2 - 1;\n    }\n    return $levels;\n}\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg3qlt1fy.php:24\n\
    Stack trace:\n#0 /tmp/tmpg3qlt1fy.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpg3qlt1fy.php\
    \ on line 24\n"
  timestamp: 1659978200
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    for ($i = 0; $i < $n; $i++) {\n        $result[]\
    \ = $n;\n        if ($n % 2 == 0) {\n            $n++;\n        } else {\n   \
    \         $n += 2;\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmpptbzeakf.php on line 15

    '
  timestamp: 1659978200
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  while ($n > 0) {\n    $result[] = $n;\n    $n = $n\
    \ % 2 == 0 ? $n / 2 : ($n + 1) / 2;\n  }\n  return $result;\n}\n\nfor ($i = 1;\
    \ $i < 10; $i++) {\n  echo $i . \": \" . implode(\", \", make_a_pile($i)) . \"\
    \\n\";\n}\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmplwfyjrl2.php on line 15

    '
  timestamp: 1659978200
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  for ($i = $n; $i <= $n * 2; $i += 2) {\n    $result[]\
    \ = $i;\n  }\n  return $result;\n}\nfunction candidate(...$args) {\n    return\
    \ make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !==\
    \ array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsiuhr03l.php:24\n\
    Stack trace:\n#0 /tmp/tmpsiuhr03l.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpsiuhr03l.php\
    \ on line 24\n"
  timestamp: 1659978200
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $numStones = [];\n    for ($i = 1; $i <= $n; $i++) {\n        $numStones[]\
    \ = ($i * 2) - 1;\n    }\n    return $numStones;\n}\n\nvar_dump(make_a_pile(3));\n\
    var_dump(make_a_pile(4));\nvar_dump(make_a_pile(5));\nvar_dump(make_a_pile(6));\n\
    \nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(3) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(3)\n  [2]=>\n  int(5)\n}\n\
    array(4) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(3)\n  [2]=>\n  int(5)\n  [3]=>\n\
    \  int(7)\n}\narray(5) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(3)\n  [2]=>\n  int(5)\n\
    \  [3]=>\n  int(7)\n  [4]=>\n  int(9)\n}\narray(6) {\n  [0]=>\n  int(1)\n  [1]=>\n\
    \  int(3)\n  [2]=>\n  int(5)\n  [3]=>\n  int(7)\n  [4]=>\n  int(9)\n  [5]=>\n\
    \  int(11)\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp30h5ivuq.php:30\n\
    Stack trace:\n#0 /tmp/tmp30h5ivuq.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp30h5ivuq.php\
    \ on line 30\n"
  timestamp: 1659978200
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $pile = [$n];\n  while ($n > 1) {\n    $n = $n % 2 ? $n - 1 : $n - 2;\n\
    \    $pile[] = $n;\n  }\n  return $pile;\n}\n\nfunction candidate(...$args) {\n\
    \    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq4chbgeh.php:26\n\
    Stack trace:\n#0 /tmp/tmpq4chbgeh.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpq4chbgeh.php\
    \ on line 26\n"
  timestamp: 1659978200
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  if ($n < 1) return NULL;\n  $results = [$n];\n  while ($n > 1) {\n    $n\
    \ = ($n % 2) ? $n + 2 : $n + 1;\n    $results[] = $n;\n  }\n  return $results;\n\
    }\necho \"\\n\\n\";\nprint_r(make_a_pile(3));\necho \"\\n\\n\";\nprint_r(make_a_pile(5));\n\
    echo \"\\n\\n\";\nprint_r(make_a_pile(7));\necho \"\\n\\n\";\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '



    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmp8li8w57f.php on line 17

    '
  timestamp: 1659978200
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $stones = array();\n  $x = $n;\n  while ($x > 0) {\n    $stones[] = $x;\n\
    \    if ($x % 2) {\n      $x -= 1;\n    } else {\n      $x -= 2;\n    }\n  }\n\
    \  return $stones;\n}\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc55cy860.php:30\n\
    Stack trace:\n#0 /tmp/tmpc55cy860.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpc55cy860.php\
    \ on line 30\n"
  timestamp: 1659978200
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    if ($n < 0) {\n        throw new Exception(\"n must be positive\");\n\
    \    }\n    $result = array();\n    $n1 = $n;\n    while ($n1 > 0) {\n       \
    \ array_push($result, $n1);\n        if ($n1 % 2) {\n            $n1 = $n1 + 2;\n\
    \        } else {\n            $n1 = $n1 + 1;\n        }\n    }\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmpozqu4pn6.php on line 19

    '
  timestamp: 1659978200
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n\tif ($n < 0) {\n\t\tthrow new InvalidArgumentException('Input must be a\
    \ positive integer');\n\t}\n\n\t$pile = array($n);\n\t$num = $n % 2 === 0 ? $n\
    \ + 1 : $n + 2;\n\twhile ($num < $n * 2) {\n\t\t$pile[] = $num;\n\t\t$num += 2;\n\
    \t}\n\n\treturn $pile;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnh6mx2eh.php:32\n\
    Stack trace:\n#0 /tmp/tmpnh6mx2eh.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpnh6mx2eh.php\
    \ on line 32\n"
  timestamp: 1659978200
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    if ($n == 1) {\n        return array(1);\n    } else {\n        $pre\
    \ = make_a_pile($n - 1);\n        $last = $pre[sizeof($pre) - 1];\n        $new\
    \ = ($last % 2) ? $last + 2 : $last + 1;\n        array_push($pre, $new);\n  \
    \      return $pre;\n    }\n}\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbfp9gsy6.php:28\n\
    Stack trace:\n#0 /tmp/tmpbfp9gsy6.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpbfp9gsy6.php\
    \ on line 28\n"
  timestamp: 1659978200
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $next = $n;\n    $stones = [$n];\n    while ($next > 1) {\n        $next\
    \ = $next % 2 === 0 ? $next / 2 : ($next + 1) / 2;\n        $stones[] = $next;\n\
    \    }\n    return $stones;\n}\necho implode(', ', make_a_pile(9)) . PHP_EOL;\n\
    \nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "9, 5, 3, 2, 1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjn2gfx04.php:28\n\
    Stack trace:\n#0 /tmp/tmpjn2gfx04.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpjn2gfx04.php\
    \ on line 28\n"
  timestamp: 1659978200
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = [];\n    $level = 1;\n    $stones = $n;\n    while ($stones\
    \ > 0) {\n        $result[] = $stones;\n        $stones = $stones % 2 ? $stones\
    \ + 2 : $stones + 1;\n        $level++;\n    }\n    return $result;\n}\n\nassert(make_a_pile(1)\
    \ == [1]);\nassert(make_a_pile(2) == [2, 3]);\nassert(make_a_pile(3) == [3, 5,\
    \ 7]);\nassert(make_a_pile(4) == [4, 6, 9, 12]);\nassert(make_a_pile(5) == [5,\
    \ 7, 10, 14, 19]);\nassert(make_a_pile(6) == [6, 8, 11, 15, 20, 26]);\nfunction\
    \ candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmprmtxxc6t.php on line 17

    '
  timestamp: 1659978200
- exit_code: 0
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $return = array();\n    for ($i = 0; $i < $n; $i++) {\n        $return[]\
    \ = $n + $i * 2;\n    }\n    return $return;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978200
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $arr = array();\n  for ($i = 0; $i < $n; $i++) {\n    $arr[] = $n;\n  \
    \  $n += ($n % 2) ? 2 : 1;\n  }\n  return $arr;\n}\n\nprint_r(make_a_pile(3));\n\
    print_r(make_a_pile(4));\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmpqy_cx9lm.php on line 15

    '
  timestamp: 1659978200
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  while ($n >= 1) {\n    $result[] = $n;\n    $n =\
    \ ($n % 2 == 0) ? $n - 1 : $n - 2;\n  }\n  return array_reverse($result);\n}\n\
    \nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvyrxyw4s.php:26\n\
    Stack trace:\n#0 /tmp/tmpvyrxyw4s.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpvyrxyw4s.php\
    \ on line 26\n"
  timestamp: 1659978200
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  return [$n, $n + ($n % 2 == 0 ? 2 : 1), $n + ($n % 2 == 0 ? 4 : 3)];\n\
    }\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_g5fovwe.php:21\n\
    Stack trace:\n#0 /tmp/tmp_g5fovwe.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp_g5fovwe.php\
    \ on line 21\n"
  timestamp: 1659978200
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  $result[] = $n;\n  while ($n > 0) {\n    if ($n %\
    \ 2 == 0) {\n      $n = $n / 2;\n    } else {\n      $n = ($n - 1) / 2;\n    }\n\
    \    $result[] = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4foms9wk.php:31\n\
    Stack trace:\n#0 /tmp/tmp4foms9wk.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp4foms9wk.php\
    \ on line 31\n"
  timestamp: 1659978200
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $newArray = array();\n  for ($i = 0; $i < $n; $i++) {\n    $currentNumber\
    \ = $n;\n    if ($n % 2 === 0) {\n      $currentNumber = $currentNumber + 2;\n\
    \    } else {\n      $currentNumber = $currentNumber + 1;\n    }\n    array_push($newArray,\
    \ $currentNumber);\n    $n = $currentNumber;\n  }\n  return $newArray;\n}\n\n\
    function candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmpbhx0a_s_.php on line 21

    '
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $stones = [];\n  while ($n > 0) {\n    $stones[] = $n;\n    $n = $n % 2\
    \ == 0 ? $n - 1 : $n - 2;\n  }\n  return $stones;\n}\nprint_r(make_a_pile(3));\n\
    print_r(make_a_pile(4));\nprint_r(make_a_pile(9));\nprint_r(make_a_pile(10));\n\
    print_r(make_a_pile(13));\nprint_r(make_a_pile(14));\nprint_r(make_a_pile(15));\n\
    print_r(make_a_pile(16));\nprint_r(make_a_pile(17));\nprint_r(make_a_pile(18));\n\
    print_r(make_a_pile(19));\nprint_r(make_a_pile(20));\nprint_r(make_a_pile(21));\n\
    print_r(make_a_pile(22));\nprint_r(make_a_pile(23));\nprint_r(make_a_pile(24));\n\
    print_r(make_a_pile(25));\nprint_r(make_a_pile(26));\nprint_r(make_a_pile(27));\n\
    print_r(make_a_pile(28));\nprint_r(make_a_pile(29));\nprint_r(make_a_pile(30));\n\
    print_r(make_a_pile(31));\nprint_r(make_a_pile(32));\nprint_r(make_a_pile(33));\n\
    print_r(make_a_pile(34));\nprint_r(make_a_pile(35));\nprint_r(make_a_pile(36));\n\
    print_r(make_a_pile(37));\nprint_r(make_a_pile(38));\nprint_r(make_a_pile(39));\n\
    print_r(make_a_pile(40));\nprint_r(make_\nfunction candidate(...$args) {\n   \
    \ return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmpz0os032p.php
    on line 53

    '
  timestamp: 1659978200
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $levels = [$n];\n    $next = $n + 2;\n    while ($next <= pow(2, $n))\
    \ {\n        $levels[] = $next;\n        $next += 2;\n    }\n    return $levels;\n\
    }\necho implode(', ', make_a_pile(3)) . \"\\n\";\necho implode(', ', make_a_pile(4))\
    \ . \"\\n\";\necho implode(', ', make_a_pile(5)) . \"\\n\";\necho implode(', ',\
    \ make_a_pile(6)) . \"\\n\";\necho implode(', ', make_a_pile(7)) . \"\\n\";\n\
    echo implode(', ', make_a_pile(8)) . \"\\n\";\necho implode(', ', make_a_pile(9))\
    \ . \"\\n\";\necho implode(', ', make_a_pile(10)) . \"\\n\";\necho implode(',\
    \ ', make_a_pile(11)) . \"\\n\";\necho implode(', ', make_a_pile(12)) . \"\\n\"\
    ;\necho implode(', ', make_a_pile(13)) . \"\\n\";\necho implode(', ', make_a_pile(14))\
    \ . \"\\n\";\necho implode(', ', make_a_pile(15)) . \"\\n\";\necho implode(',\
    \ ', make_a_pile(16)) . \"\\n\";\necho implode(', ', make_a_pile(17)) . \"\\n\"\
    ;\necho implode(', ', make_a_pile(18)) . \"\\n\";\necho implode(', ', make_a_pile(19))\
    \ . \"\\n\";\necho implode(', ', make_a_pile(20)) . \"\\n\";\necho implode(',\
    \ ', make_a_pile(21)) . \"\\n\";\necho implode(', ', make_a_pile(22)) . \"\\n\"\
    ;\necho implode(', ', make_a_pile(23)) . \"\\n\";\necho implode(', ', make_a_pile(24))\
    \ . \"\\n\";\necho implode(', ', make_a_p\nfunction candidate(...$args) {\n  \
    \  return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmpr9altty0.php
    on line 44

    '
  timestamp: 1659978200
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $stones = [$n];\n    $i = 1;\n    while ($stones[$i - 1] > 2) {\n   \
    \     $stones[$i] = $stones[$i - 1] + 2 * ($stones[$i - 1] % 2) - 1;\n       \
    \ $i++;\n    }\n    return $stones;\n}\nprint_r(make_a_pile(3));\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmpvrrwkr96.php on line 16

    '
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $pile = array($n);\n  for ($i = 1; $pile[$i - 1] > 1; $i++) {\n    $next\
    \ = ($pile[$i - 1] % 2) ? $pile[$i - 1] - 1 : $pile[$i - 1] - 2;\n    $pile[]\
    \ = $next;\n  }\n  return $pile;\n}\n\nfunction candidate(...$args) {\n    return\
    \ make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !==\
    \ array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpji0m1wac.php:26\n\
    Stack trace:\n#0 /tmp/tmpji0m1wac.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpji0m1wac.php\
    \ on line 26\n"
  timestamp: 1659978200
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = [];\n  while ($n > 0) {\n    $result[] = $n;\n    $n -= $n %\
    \ 2 ? 2 : 1;\n  }\n  return $result;\n}\necho join(', ', make_a_pile(3));\necho\
    \ \"\\n\";\necho join(', ', make_a_pile(4));\necho \"\\n\";\necho join(', ', make_a_pile(6));\n\
    echo \"\\n\";\necho join(', ', make_a_pile(9));\necho \"\\n\";\necho join(', ',\
    \ make_a_pile(10));\necho \"\\n\";\necho join(', ', make_a_pile(11));\necho \"\
    \\n\";\necho join(', ', make_a_pile(12));\necho \"\\n\";\necho join(', ', make_a_pile(13));\n\
    echo \"\\n\";\necho join(', ', make_a_pile(14));\necho \"\\n\";\necho join(',\
    \ ', make_a_pile(15));\necho \"\\n\";\necho join(', ', make_a_pile(16));\necho\
    \ \"\\n\";\necho join(', ', make_a_pile(17));\necho \"\\n\";\necho join(', ',\
    \ make_a_pile(18));\necho \"\\n\";\necho join(', ', make_a_pile(19));\necho \"\
    \\n\";\necho join(', ', make_a_pile(20));\necho \"\\n\";\necho join(', ', make_a_pile(21));\n\
    echo \"\\n\";\necho join(', ', make_a_pile(22));\necho \"\\n\";\necho join(',\
    \ ', make_a_pile(23));\necho \"\\n\";\necho join(', ', make_a_pile(24));\necho\
    \ \"\\n\";\necho join(', ', make_a_pile(25));\necho \"\\n\";\necho join(', ',\
    \ make_a_pile(26));\necho \"\\n\";\necho join(', ', make_a_pile(27));\necho \"\
    \\n\";\necho join(', ', make_a_pile(28));\necho \"\\n\";\necho join\nfunction\
    \ candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "," or ";" in
    /tmp/tmpwwr2ko2p.php on line 67

    '
  timestamp: 1659978200
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  if ($n == 1) {\n    return array(1);\n  }\n  else {\n    if ($n % 2 ==\
    \ 0) {\n      $new_n = $n - 1;\n    }\n    else {\n      $new_n = $n + 1;\n  \
    \  }\n    $sub = make_a_pile($new_n);\n    array_unshift($sub, $n);\n    return\
    \ $sub;\n  }\n}\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    262144 bytes) in /tmp/tmpfn8zlpx8.php on line 23

    '
  timestamp: 1659978200
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    if ($n == 1) return array(1);\n    else {\n        $prev = make_a_pile($n\
    \ - 1);\n        $num = end($prev);\n        if ($num % 2 == 0) $num++;\n    \
    \    else $num += 2;\n        $prev[] = $num;\n        return $prev;\n    }\n\
    }\nprint_r(make_a_pile(3));\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 3\n    [2] => 5\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpyzgm39yw.php:29\nStack trace:\n#0 /tmp/tmpyzgm39yw.php(36):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpyzgm39yw.php on line 29\n"
  timestamp: 1659978200
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $arr = array();\n  $current = $n;\n  for ($i = 0; $i < $n; $i++) {\n  \
    \  $arr[] = $current;\n    if ($current % 2 == 0) {\n      $current += 2;\n  \
    \  } else {\n      $current += 1;\n    }\n  }\n  return $arr;\n}\n\nvar_dump(make_a_pile(3));\n\
    var_dump(make_a_pile(4));\nvar_dump(make_a_pile(5));\nvar_dump(make_a_pile(6));\n\
    var_dump(make_a_pile(7));\nvar_dump(make_a_pile(8));\nvar_dump(make_a_pile(9));\n\
    function candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(3) {\n  [0]=>\n  int(3)\n  [1]=>\n  int(4)\n  [2]=>\n  int(6)\n}\n\
    array(4) {\n  [0]=>\n  int(4)\n  [1]=>\n  int(6)\n  [2]=>\n  int(8)\n  [3]=>\n\
    \  int(10)\n}\narray(5) {\n  [0]=>\n  int(5)\n  [1]=>\n  int(6)\n  [2]=>\n  int(8)\n\
    \  [3]=>\n  int(10)\n  [4]=>\n  int(12)\n}\narray(6) {\n  [0]=>\n  int(6)\n  [1]=>\n\
    \  int(8)\n  [2]=>\n  int(10)\n  [3]=>\n  int(12)\n  [4]=>\n  int(14)\n  [5]=>\n\
    \  int(16)\n}\narray(7) {\n  [0]=>\n  int(7)\n  [1]=>\n  int(8)\n  [2]=>\n  int(10)\n\
    \  [3]=>\n  int(12)\n  [4]=>\n  int(14)\n  [5]=>\n  int(16)\n  [6]=>\n  int(18)\n\
    }\narray(8) {\n  [0]=>\n  int(8)\n  [1]=>\n  int(10)\n  [2]=>\n  int(12)\n  [3]=>\n\
    \  int(14)\n  [4]=>\n  int(16)\n  [5]=>\n  int(18)\n  [6]=>\n  int(20)\n  [7]=>\n\
    \  int(22)\n}\narray(9) {\n  [0]=>\n  int(9)\n  [1]=>\n  int(10)\n  [2]=>\n  int(12)\n\
    \  [3]=>\n  int(14)\n  [4]=>\n  int(16)\n  [5]=>\n  int(18)\n  [6]=>\n  int(20)\n\
    \  [7]=>\n  int(22)\n  [8]=>\n  int(24)\n}\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpyi_feejr.php:38\nStack trace:\n#0 /tmp/tmpyi_feejr.php(45):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpyi_feejr.php on line 38\n"
  timestamp: 1659978200
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  $current = $n;\n  while ($current > 0) {\n    $result[]\
    \ = $current;\n    $current = $current % 2 ? $current + 2 : $current + 1;\n  }\n\
    \  return $result;\n}\n\nprint_r(make_a_pile(3));\nprint_r(make_a_pile(4));\n\
    print_r(make_a_pile(5));\nprint_r(make_a_pile(6));\nprint_r(make_a_pile(7));\n\
    function candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmp8m6_h3q_.php on line 16

    '
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  // It was difficult to understand the problem\n  // maybe the examples\
    \ need to be more complete\n  // but without a specification I would do like this:\n\
    \  // - the next odd number if n is odd.\n  // - the next even number if n is\
    \ even.\n  $data = [];\n  $data[] = $n;\n  for ($i = 1; $i < $n; $i++) {\n   \
    \ if ($n % 2) {\n      $data[] = $data[$i - 1] + 2;\n    } else {\n      $data[]\
    \ = $data[$i - 1] + 1;\n    }\n  }\n  return $data;\n}\necho \"<pre>make_a_pile(3)\\\
    r\\n\";\nprint_r(make_a_pile(3));\necho \"</pre>\";\necho \"<pre>make_a_pile(7)\\\
    r\\n\";\nprint_r(make_a_pile(7));\necho \"</pre>\";\necho \"<pre>make_a_pile(11)\\\
    r\\n\";\nprint_r(make_a_pile(11));\necho \"</pre>\";\necho \"<pre>make_a_pile(12)\\\
    r\\n\";\nprint_r(make_a_pile(12));\necho \"</pre>\";\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>make_a_pile(3)\nArray\n(\n    [0] => 3\n    [1] => 5\n    [2] => 7\n\
    )\n</pre><pre>make_a_pile(7)\nArray\n(\n    [0] => 7\n    [1] => 9\n    [2] =>\
    \ 11\n    [3] => 13\n    [4] => 15\n    [5] => 17\n    [6] => 19\n)\n</pre><pre>make_a_pile(11)\n\
    Array\n(\n    [0] => 11\n    [1] => 13\n    [2] => 15\n    [3] => 17\n    [4]\
    \ => 19\n    [5] => 21\n    [6] => 23\n    [7] => 25\n    [8] => 27\n    [9] =>\
    \ 29\n    [10] => 31\n)\n</pre><pre>make_a_pile(12)\nArray\n(\n    [0] => 12\n\
    \    [1] => 13\n    [2] => 14\n    [3] => 15\n    [4] => 16\n    [5] => 17\n \
    \   [6] => 18\n    [7] => 19\n    [8] => 20\n    [9] => 21\n    [10] => 22\n \
    \   [11] => 23\n)\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9qw224bt.php:47\n\
    Stack trace:\n#0 /tmp/tmp9qw224bt.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp9qw224bt.php\
    \ on line 47\n"
  timestamp: 1659978200
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  for ($i = $n; $i > 0; $i = next($i)) {\n    $result[]\
    \ = $i;\n  }\n  return $result;\n}\nfunction candidate(...$args) {\n    return\
    \ make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !==\
    \ array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: next(): Argument #1 ($array) must be\
    \ of type array, int given in /tmp/tmpq376cgnw.php:14\nStack trace:\n#0 /tmp/tmpq376cgnw.php(14):\
    \ next(3)\n#1 /tmp/tmpq376cgnw.php(20): make_a_pile(3)\n#2 /tmp/tmpq376cgnw.php(24):\
    \ candidate(3)\n#3 /tmp/tmpq376cgnw.php(31): test()\n#4 {main}\n  thrown in /tmp/tmpq376cgnw.php\
    \ on line 14\n"
  timestamp: 1659978200
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = [];\n    $result[] = $n;\n    if ($n % 2 == 0) {\n        $result[]\
    \ = $n + 2;\n    } else {\n        $result[] = $n + 1;\n    }\n    $result[] =\
    \ $result[count($result) - 1] + 2;\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbv85et95.php:29\n\
    Stack trace:\n#0 /tmp/tmpbv85et95.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpbv85et95.php\
    \ on line 29\n"
  timestamp: 1659978200
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $arr = [];\n    while ($n > 0) {\n        array_push($arr, $n);\n   \
    \     if ($n % 2 == 0) {\n            $n = $n + 1;\n        } else {\n       \
    \     $n = $n + 2;\n        }\n    }\n    return $arr;\n}\nprint_r(make_a_pile(3));\n\
    print_r(make_a_pile(4));\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmpawwrs9f5.php on line 15

    '
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $pile = [$n];\n  while ($n > 1) {\n    if ($n % 2 == 0) {\n      $n = $n\
    \ / 2;\n    } else {\n      $n = ($n - 1) / 2;\n    }\n    $pile[] = $n;\n  }\n\
    \  return $pile;\n}\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8f3tmxua.php:29\n\
    Stack trace:\n#0 /tmp/tmp8f3tmxua.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp8f3tmxua.php\
    \ on line 29\n"
  timestamp: 1659978200
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $pile = array($n);\n    $i = 1;\n    while ($n > 1) {\n        if ( $n\
    \ % 2 ) {\n            $n = $n - 2;\n        } else {\n            $n = $n - 1;\n\
    \        }\n        $pile[$i] = $n;\n        $i++;\n    }\n    return $pile;\n\
    }\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr_tkxj75.php:31\n\
    Stack trace:\n#0 /tmp/tmpr_tkxj75.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpr_tkxj75.php\
    \ on line 31\n"
  timestamp: 1659978200
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    if ($n < 1) {\n        return false;\n    }\n    $arr = array($n);\n\
    \    while (count($arr) < $n) {\n        if ($arr[count($arr) - 1] % 2 == 0) {\n\
    \            $arr[] = $arr[count($arr) - 1] + 2;\n        } else {\n         \
    \   $arr[] = $arr[count($arr) - 1] + 1;\n        }\n    }\n    return $arr;\n\
    }\n\necho \"<pre>\";\nprint_r(make_a_pile(5));\necho \"</pre>\";\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => 5\n    [1] => 6\n    [2] => 8\n    [3] => 10\n\
    \    [4] => 12\n)\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsklsgcku.php:36\n\
    Stack trace:\n#0 /tmp/tmpsklsgcku.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpsklsgcku.php\
    \ on line 36\n"
  timestamp: 1659978200
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $pile = array();\n    array_push($pile, $n);\n    while ($n > 1) {\n\
    \        $n = ($n % 2 === 0) ? $n - 1 : $n - 2;\n        array_push($pile, $n);\n\
    \    }\n    return $pile;\n}\necho implode(\", \", make_a_pile(3)); // should\
    \ output 3, 5, 7\necho \"\\n\";\necho implode(\", \", make_a_pile(4)); // should\
    \ output 4, 6, 8, 10\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "3, 1\n4, 3, 1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm5euna4n.php:29\n\
    Stack trace:\n#0 /tmp/tmpm5euna4n.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpm5euna4n.php\
    \ on line 29\n"
  timestamp: 1659978200
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    if ($n % 2 == 0) {\n        $i = $n + 1;\n    } else {\n        $i =\
    \ $n + 2;\n    }\n    $result = array($n);\n    while ($i < (2 * $n)) {\n    \
    \    $result[] = $i;\n        $i += 2;\n    }\n    return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9twdz8an.php:30\n\
    Stack trace:\n#0 /tmp/tmp9twdz8an.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp9twdz8an.php\
    \ on line 30\n"
  timestamp: 1659978200
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $stack = array();\n    $stones = $n;\n    while($stones > 0) {\n    \
    \    $stack[] = $stones;\n        if($stones % 2) {\n            $stones = $stones\
    \ + 2;\n        } else {\n            $stones = $stones + 1;\n        }\n    }\n\
    \    return $stack;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmplk3fx_bg.php on line 16

    '
  timestamp: 1659978201
- exit_code: 0
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $arr = [];\n    for ($i = 0; $i < $n; $i++) {\n        $arr[] = $n +\
    \ 2 * $i;\n    }\n    return $arr;\n}\nprint_r(make_a_pile(3));\nprint_r(make_a_pile(4));\n\
    print_r(make_a_pile(5));\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 3\n    [1] => 5\n    [2] => 7\n)\nArray\n(\n    [0]\
    \ => 4\n    [1] => 6\n    [2] => 8\n    [3] => 10\n)\nArray\n(\n    [0] => 5\n\
    \    [1] => 7\n    [2] => 9\n    [3] => 11\n    [4] => 13\n)\n"
  timestamp: 1659978200
- exit_code: 0
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $ans = array();\n  for ($i = 0; $i < $n; $i++) {\n    if ($i == 0) {\n\
    \      $ans[] = $n;\n    } else {\n      $ans[] = $ans[$i - 1] + 2;\n    }\n \
    \ }\n  return $ans;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978200
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n\treturn $a;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $a in /tmp/tmpytrdmtmy.php on line 13\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpytrdmtmy.php:21\nStack\
    \ trace:\n#0 /tmp/tmpytrdmtmy.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpytrdmtmy.php\
    \ on line 21\n"
  timestamp: 1659978200
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n\t$array = array($n);\n\twhile (count($array) <= $n-1) {\n\t\tif ($array[count($array)-1]\
    \ % 2 == 0) {\n\t\t\t$array[] = $array[count($array)-1] + 2;\n\t\t} else {\n\t\
    \t\t$array[] = $array[count($array)-1] + 1;\n\t\t}\n\t}\n\treturn $array;\n}\n\
    print_r(make_a_pile(3));\nprint_r(make_a_pile(5));\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 3\n    [1] => 4\n    [2] => 6\n)\nArray\n(\n    [0]\
    \ => 5\n    [1] => 6\n    [2] => 8\n    [3] => 10\n    [4] => 12\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmphkiqrxuq.php:31\nStack trace:\n\
    #0 /tmp/tmphkiqrxuq.php(38): test()\n#1 {main}\n  thrown in /tmp/tmphkiqrxuq.php\
    \ on line 31\n"
  timestamp: 1659978200
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    if ($n <= 0) {\n        throw new Exception('You must use a positive\
    \ integer');\n    }\n    $result = array($n);\n    $next = ($n % 2) ? $n + 2 :\
    \ $n + 1;\n    while ($next > 1) {\n        $result[] = $next;\n        $next\
    \ = ($next % 2) ? $next + 2 : $next + 1;\n    }\n    return $result;\n}\nprint_r(make_a_pile(3));\n\
    print_r(make_a_pile(4));\nprint_r(make_a_pile(5));\nprint_r(make_a_pile(6));\n\
    print_r(make_a_pile(7));\nprint_r(make_a_pile(8));\nprint_r(make_a_pile(9));\n\
    print_r(make_a_pile(10));\nprint_r(make_a_pile(11));\nprint_r(make_a_pile(12));\n\
    print_r(make_a_pile(13));\nprint_r(make_a_pile(14));\nprint_r(make_a_pile(15));\n\
    print_r(make_a_pile(16));\nprint_r(make_a_pile(17));\nprint_r(make_a_pile(18));\n\
    print_r(make_a_pile(19));\nprint_r(make_a_pile(20));\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmp42t5kqjl.php on line 19

    '
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $pile = array();\n    while ($n > 0) {\n        $pile[] = $n;\n     \
    \   $n = $n % 2 == 0 ? $n + 1 : $n + 2;\n    }\n    return $pile;\n}\nfunction\
    \ candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmpry22pjxx.php on line 15

    '
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    for ($i = 0; $i < $n; $i++) {\n        if ($i\
    \ == 0) {\n            $result[] = $n;\n        } else {\n            $result[]\
    \ = $result[$i - 1] + ($result[$i - 1] % 2 == 0 ? 2 : 1);\n        }\n    }\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsganh1xx.php:29\n\
    Stack trace:\n#0 /tmp/tmpsganh1xx.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpsganh1xx.php\
    \ on line 29\n"
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $pile = array($n);\n    while($n >= 3) {\n        $n = ($n % 2) ? $n\
    \ + 2 : $n + 1;\n        $pile[] = $n;\n    }\n    return $pile;\n}\n$ans = make_a_pile(3);\n\
    foreach($ans as $a) {\n    echo $a, \" \";\n}\necho \"\\n\";\n$ans = make_a_pile(6);\n\
    foreach($ans as $a) {\n    echo $a, \" \";\n}\necho \"\\n\";\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmpx6sgnwmo.php on line 16

    '
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $pile = array($n);\n  while ($n > 1) {\n    if ($n % 2) {\n      $n = $n\
    \ + 2;\n    } else {\n      $n = $n + 1;\n    }\n    $pile[] = $n;\n  }\n  return\
    \ $pile;\n}\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmpswpizicz.php on line 20

    '
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $res = array();\n    $res[] = $n;\n    while($n > 1) {\n        if($n\
    \ % 2 == 0) {\n            $n /= 2;\n        } else {\n            $n = ($n+1)/2;\n\
    \        }\n        $res[] = $n;\n    }\n    return $res;\n}\necho \">>> make_a_pile(3)\\\
    n\";\nprint_r(make_a_pile(3));\necho \">>> make_a_pile(4)\\n\";\nprint_r(make_a_pile(4));\n\
    echo \">>> make_a_pile(7)\\n\";\nprint_r(make_a_pile(7));\necho \">>> make_a_pile(1)\\\
    n\";\nprint_r(make_a_pile(1));\necho \">>> make_a_pile(10)\\n\";\nprint_r(make_a_pile(10));\n\
    echo \">>> make_a_pile(11)\\n\";\nprint_r(make_a_pile(11));\necho \">>> make_a_pile(20)\\\
    n\";\nprint_r(make_a_pile(20));\necho \">>> make_a_pile(121)\\n\";\nprint_r(make_a_pile(121));\n\
    echo \">>> make_a_pile(1)\\n\";\nprint_r(make_a_pile(1));\necho \">>> make_a_pile(256)\\\
    n\";\nprint_r(make_a_pile(256));\necho \">>> make_a_pile(257)\\n\";\nprint_r(make_a_pile(257));\n\
    echo \">>> make_a_pile(2)\\n\";\nprint_r(make_a_pile(2));\necho \">>> make_a_pile(6)\\\
    n\";\nprint_r(make_a_pile(6));\necho \">>> make_a_pile(1)\\n\";\nprint_r(make_a_pile(1));\n\
    echo \">>> make_a_pile(5)\\n\";\nprint_r(make_\nfunction candidate(...$args) {\n\
    \    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmp0ezb7eej.php
    on line 55

    '
  timestamp: 1659978200
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  $current_level = $n;\n  array_push($result, $current_level);\n\
    \  while ($current_level > 0) {\n    if ($current_level % 2 === 0) {\n      $current_level\
    \ += 2;\n    } else {\n      $current_level += 1;\n    }\n    array_push($result,\
    \ $current_level);\n  }\n  return $result;\n}\nfunction candidate(...$args) {\n\
    \    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmp6jf2h7u_.php on line 22

    '
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $a = array();\n  while($n > 0) {\n    $a[] = $n;\n    $n -= 2;\n  }\n \
    \ return $a;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7x9jqtzv.php:26\n\
    Stack trace:\n#0 /tmp/tmp7x9jqtzv.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp7x9jqtzv.php\
    \ on line 26\n"
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $ans = array();\n  for ($i = $n; $i <= $n; $i++) {\n    $ans[] = $i;\n\
    \    if ($i % 2 === 0) {\n      $i++;\n    } else {\n      $i += 2;\n    }\n \
    \ }\n  return $ans;\n}\necho '<pre>';\nvar_dump(make_a_pile(3));\necho '</pre>';\n\
    function candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>array(1) {\n  [0]=>\n  int(3)\n}\n</pre>\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmppubxf8ec.php:32\nStack trace:\n#0 /tmp/tmppubxf8ec.php(39):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmppubxf8ec.php on line 32\n"
  timestamp: 1659978200
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    if ($n == 1) {\n        return array(1);\n    }\n    $a = make_a_pile($n\
    \ - 1);\n    $a[] = ($n % 2) ? ($a[count($a) - 1] + 2) : ($a[count($a) - 1] +\
    \ 1);\n    return $a;\n}\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpenw_sfe3.php:25\n\
    Stack trace:\n#0 /tmp/tmpenw_sfe3.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpenw_sfe3.php\
    \ on line 25\n"
  timestamp: 1659978200
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $a = array();\n    for ($i = 0; $i < $n; $i++) {\n        $a[] = $n;\n\
    \        $n += $n % 2 == 0 ? 2 : 1;\n    }\n    return $a;\n}\nforeach (make_a_pile(6)\
    \ as $n) {\n    echo $n, \" \";\n}\necho \"\\n\";\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmpev_9pv60.php on line 15

    '
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $array = [];\n    for ($i = 0; $i < $n; $i++) {\n        if ($i % 2 ===\
    \ 0) {\n            $array[] = $n + $i;\n        } else {\n            $array[]\
    \ = $n + $i - 1;\n        }\n    }\n    return $array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_8_4w7mg.php:29\n\
    Stack trace:\n#0 /tmp/tmp_8_4w7mg.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp_8_4w7mg.php\
    \ on line 29\n"
  timestamp: 1659978200
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $stones = [$n];\n    while($n > 0) {\n        if($n % 2) {\n        \
    \    $n--;\n        } else {\n            $n /= 2;\n        }\n        $stones[]\
    \ = $n;\n    }\n    return $stones;\n}\nfunction candidate(...$args) {\n    return\
    \ make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !==\
    \ array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyr4llklu.php:29\n\
    Stack trace:\n#0 /tmp/tmpyr4llklu.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpyr4llklu.php\
    \ on line 29\n"
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $pile = array($n);\n  for ($i = 1; $i < $n; $i++) {\n    if ($n % 2) {\n\
    \      $pile[] = $pile[$i - 1] + 2;\n    } else {\n      $pile[] = $pile[$i -\
    \ 1] + 1;\n    }\n  }\n  return $pile;\n}\n\nfunction candidate(...$args) {\n\
    \    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1p64f_ub.php:30\n\
    Stack trace:\n#0 /tmp/tmp1p64f_ub.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp1p64f_ub.php\
    \ on line 30\n"
  timestamp: 1659978200
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $layers = [];\n  while ($n > 0) {\n    $layers[] = $n;\n    $n = $n % 2\
    \ == 0 ? $n - 1 : $n - 2;\n  }\n  return array_reverse($layers);\n}\n\nfunction\
    \ candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu7kx5p_a.php:26\n\
    Stack trace:\n#0 /tmp/tmpu7kx5p_a.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpu7kx5p_a.php\
    \ on line 26\n"
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = [];\n  $initial = $n;\n  while($n > 0) {\n    array_push($result,\
    \ $n);\n    if ($n == $initial) {\n      $n--;\n    } else {\n      $n += ($n\
    \ % 2 == 0) ? 1 : -1;\n    }\n  }\n  return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmpna0myt8c.php on line 16

    '
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  for ($i = 0; $i < $n; $i++) {\n    $result[] = ($i\
    \ + 1) * 2 + $n % 2;\n  }\n  return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprp4ssj5g.php:25\n\
    Stack trace:\n#0 /tmp/tmprp4ssj5g.php(31): test()\n#1 {main}\n  thrown in /tmp/tmprp4ssj5g.php\
    \ on line 25\n"
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    // your code\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp00l49obz.php:21\n\
    Stack trace:\n#0 /tmp/tmp00l49obz.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp00l49obz.php\
    \ on line 21\n"
  timestamp: 1659978201
- exit_code: 0
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    if ($n <= 0) {\n        throw new Exception(\"Invalid input\");\n   \
    \ }\n    $result = array();\n    $oddNumber = $n;\n    $evenNumber = $n;\n   \
    \ for ($i = 0; $i < $n; $i++) {\n        $result[] = $oddNumber;\n        $oddNumber\
    \ += 2;\n        $evenNumber += 2;\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  // Take it level by level\n  $a = array($n);\n  $s = $n;\n  while ($s >\
    \ 1) {\n    if ($s % 2 == 0) {\n      $s = $s / 2;\n    } else {\n      $s = ($s\
    \ + 1) / 2;\n    }\n    $a[] = $s;\n  }\n  return $a;\n}\nforeach (array(1, 3,\
    \ 5, 7, 8, 10, 11, 12, 14, 16, 18, 20, 22, 23, 24, 25, 26, 28, 30, 32, 34, 36,\
    \ 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74,\
    \ 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100) as $n) {\n  echo \"make_a_pile($n)\
    \ -> \", make_a_pile($n), \"\\n\";\n}\nfunction candidate(...$args) {\n    return\
    \ make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !==\
    \ array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "make_a_pile(1) -> \nWarning: Array to string conversion in /tmp/tmp03hmtifp.php\
    \ on line 27\nArray\nmake_a_pile(3) -> \nWarning: Array to string conversion in\
    \ /tmp/tmp03hmtifp.php on line 27\nArray\nmake_a_pile(5) -> \nWarning: Array to\
    \ string conversion in /tmp/tmp03hmtifp.php on line 27\nArray\nmake_a_pile(7)\
    \ -> \nWarning: Array to string conversion in /tmp/tmp03hmtifp.php on line 27\n\
    Array\nmake_a_pile(8) -> \nWarning: Array to string conversion in /tmp/tmp03hmtifp.php\
    \ on line 27\nArray\nmake_a_pile(10) -> \nWarning: Array to string conversion\
    \ in /tmp/tmp03hmtifp.php on line 27\nArray\nmake_a_pile(11) -> \nWarning: Array\
    \ to string conversion in /tmp/tmp03hmtifp.php on line 27\nArray\nmake_a_pile(12)\
    \ -> \nWarning: Array to string conversion in /tmp/tmp03hmtifp.php on line 27\n\
    Array\nmake_a_pile(14) -> \nWarning: Array to string conversion in /tmp/tmp03hmtifp.php\
    \ on line 27\nArray\nmake_a_pile(16) -> \nWarning: Array to string conversion\
    \ in /tmp/tmp03hmtifp.php on line 27\nArray\nmake_a_pile(18) -> \nWarning: Array\
    \ to string conversion in /tmp/tmp03hmtifp.php on line 27\nArray\nmake_a_pile(20)\
    \ -> \nWarning: Array to string conversion in /tmp/tmp03hmtifp.php on line 27\n\
    Array\nmake_a_pile(22) -> \nWarning: Array to string conversion in /tmp/tmp03hmtifp.php\
    \ on line 27\nArray\nmake_a_pile(23) -> \nWarning: Array to string conversion\
    \ in /tmp/tmp03hmtifp.php on line 27\nArray\nmake_a_pile(24) -> \nWarning: Array\
    \ to string conversion in /tmp/tmp03hmtifp.php on line 27\nArray\nmake_a_pile(25)\
    \ -> \nWarning: Array to string conversion in /tmp/tmp03hmtifp.php on line 27\n\
    Array\nmake_a_pile(26) -> \nWarning: Array to string conversion in /tmp/tmp03hmtifp.php\
    \ on line 27\nArray\nmake_a_pile(28) -> \nWarning: Array to string conversion\
    \ in /tmp/tmp03hmtifp.php on line 27\nArray\nmake_a_pile(30) -> \nWarning: Array\
    \ to string conversion in /tmp/tmp03hmtifp.php on line 27\nArray\nmake_a_pile(32)\
    \ -> \nWarning: Array to string conversion in /tmp/tmp03hmtifp.php on line 27\n\
    Array\nmake_a_pile(34) -> \nWarning: Array to string conversion in /tmp/tmp03hmtifp.php\
    \ on line 27\nArray\nmake_a_pile(36) "
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n\t$pile = array($n);\n\twhile ($n > 1) {\n\t\t$n = $n % 2 ? $n + 2 : $n +\
    \ 1;\n\t\t$pile[] = $n;\n\t}\n\treturn $pile;\n}\necho 'Input: 3<br>';\necho 'Output:\
    \ ';\nprint_r(make_a_pile(3));\necho '<br>';\necho 'Input: 5<br>';\necho 'Output:\
    \ ';\nprint_r(make_a_pile(5));\necho '<br>';\necho 'Input: 6<br>';\necho 'Output:\
    \ ';\nprint_r(make_a_pile(6));\necho '<br>';\necho 'Input: 7<br>';\necho 'Output:\
    \ ';\nprint_r(make_a_pile(7));\necho '<br>';\necho 'Input: 10<br>';\necho 'Output:\
    \ ';\nprint_r(make_a_pile(10));\necho '<br>';\nfunction candidate(...$args) {\n\
    \    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Input: 3<br>Output: \nFatal error: Allowed memory size of 134217728 bytes\
    \ exhausted (tried to allocate 134217736 bytes) in /tmp/tmpbdth5hdr.php on line\
    \ 16\n"
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $array = array();\n    $i = 0;\n    while ($n > 0) {\n        if ($n\
    \ % 2 == 0) {\n            $array[$i] = $n;\n            $n -= 2;\n        } else\
    \ {\n            $array[$i] = $n;\n            $n -= 1;\n        }\n        $i++;\n\
    \    }\n    return $array;\n}\nprint_r(make_a_pile(3));\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 3\n    [1] => 2\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpr8dqlev5.php:33\nStack trace:\n#0 /tmp/tmpr8dqlev5.php(40):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpr8dqlev5.php on line 33\n"
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n\t$pile = array($n);\n\t$curr = $n;\n\twhile ($curr > 0) {\n\t\tif ($curr\
    \ % 2 === 0) {\n\t\t\t$curr = $curr - 1;\n\t\t} else {\n\t\t\t$curr = $curr -\
    \ 2;\n\t\t}\n\t\tarray_push($pile, $curr);\n\t}\n\treturn $pile;\n}\n\nfunction\
    \ candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0_br6l3p.php:31\n\
    Stack trace:\n#0 /tmp/tmp0_br6l3p.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp0_br6l3p.php\
    \ on line 31\n"
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $return = array();\n    while ($n > 0) {\n        $return[] = $n;\n \
    \       $n = ($n % 2 == 0) ? $n / 2 : ($n + 1) / 2;\n    }\n    return $return;\n\
    }\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmpd4vsovgm.php on line 15

    '
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    $i = 0;\n    while ($n > 0) {\n        if ($i%2\
    \ == 0) {\n            $result[] = $n;\n            $n -= 1;\n        } else {\n\
    \            $result[] = $n;\n            $n -= 2;\n        }\n        $i++;\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9j108axl.php:33\n\
    Stack trace:\n#0 /tmp/tmp9j108axl.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp9j108axl.php\
    \ on line 33\n"
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $s = [1, $n];\n    for ($i = 0; $i < $n - 1; $i++) {\n        $s[] =\
    \ $s[count($s) - 1] + $s[count($s) - 2];\n    }\n    return $s;\n}\nprint_r(make_a_pile(3));\n\
    function candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 3\n    [2] => 4\n    [3] => 7\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp644esuh7.php:25\nStack\
    \ trace:\n#0 /tmp/tmp644esuh7.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp644esuh7.php\
    \ on line 25\n"
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $arr = array();\n    while ($n > 0) {\n        $arr[] = $n;\n       \
    \ if ($n % 2 == 0)\n            $n = $n + 1;\n        else\n            $n = $n\
    \ + 2;\n    }\n    return $arr;\n}\nfunction candidate(...$args) {\n    return\
    \ make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !==\
    \ array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmpft43b99n.php on line 15

    '
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    if ($n % 2) {\n        $odd = range($n, $n + 2, 2);\n        return array_reverse($odd);\n\
    \    } else {\n        $even = range($n, $n + 2, 2);\n        return array_reverse($even);\n\
    \    }\n}\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp70je2o2j.php:26\n\
    Stack trace:\n#0 /tmp/tmp70je2o2j.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp70je2o2j.php\
    \ on line 26\n"
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  if($n <= 0) return [];\n  $result = [];\n  $result[] = $n;\n  $pile = $n;\n\
    \  while($pile > 1) {\n    if($pile % 2 == 0) {\n      $pile = $pile / 2;\n  \
    \    $result[] = $pile;\n    } else {\n      $pile = $pile - 1;\n      $result[]\
    \ = $pile;\n    }\n  }\n  return $result;\n}\nfunction candidate(...$args) {\n\
    \    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp660fstsw.php:33\n\
    Stack trace:\n#0 /tmp/tmp660fstsw.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp660fstsw.php\
    \ on line 33\n"
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $output = array();\n  for ($i = $n; $i > 0; $i--) {\n    if ($i % 2 ==\
    \ 0) {\n      $output[] = $i + 1;\n    } else {\n      $output[] = $i + 2;\n \
    \   }\n  }\n  return $output;\n}\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzi1bldag.php:28\n\
    Stack trace:\n#0 /tmp/tmpzi1bldag.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpzi1bldag.php\
    \ on line 28\n"
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    // TODO\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyg7_dpul.php:21\n\
    Stack trace:\n#0 /tmp/tmpyg7_dpul.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpyg7_dpul.php\
    \ on line 21\n"
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  while($n > 0) {\n    $result[] = $n;\n    $n -= ($n\
    \ % 2) + 1;\n  }\n  return $result;\n}\nfunction candidate(...$args) {\n    return\
    \ make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !==\
    \ array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr8bpjbm2.php:25\n\
    Stack trace:\n#0 /tmp/tmpr8bpjbm2.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpr8bpjbm2.php\
    \ on line 25\n"
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $level = 1;\n    $pile = array();\n    while ($n > 0) {\n        $pile[]\
    \ = $n;\n        $level++;\n        $n = ($n % 2 == 0) ? $n + 1 : $n + 2;\n  \
    \  }\n    return $pile;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmp3g_0f1qa.php on line 16

    '
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $arr[] = $n;\n  while($n>1) {\n    $n -= ($n % 2 == 0) ? 2 : 1;\n    $arr[]\
    \ = $n;\n  }\n  return $arr;\n}\n\necho \"<pre>make_a_pile(3)\\r\\n\";\nprint_r(make_a_pile(3));\n\
    echo \"</pre>\";\n\necho \"<pre>make_a_pile(4)\\r\\n\";\nprint_r(make_a_pile(4));\n\
    echo \"</pre>\";\n\necho \"<pre>make_a_pile(10)\\r\\n\";\nprint_r(make_a_pile(10));\n\
    echo \"</pre>\";\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>make_a_pile(3)\nArray\n(\n    [0] => 3\n    [1] => 2\n    [2] => 0\n\
    )\n</pre><pre>make_a_pile(4)\nArray\n(\n    [0] => 4\n    [1] => 2\n    [2] =>\
    \ 0\n)\n</pre><pre>make_a_pile(10)\nArray\n(\n    [0] => 10\n    [1] => 8\n  \
    \  [2] => 6\n    [3] => 4\n    [4] => 2\n    [5] => 0\n)\n</pre>\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpu7zytwg1.php:37\nStack trace:\n\
    #0 /tmp/tmpu7zytwg1.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpu7zytwg1.php\
    \ on line 37\n"
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $ret = [];\n    while ($n > 0) {\n        $ret[] = $n;\n        $n =\
    \ $n % 2 ? $n + 2 : $n + 1;\n    }\n    return $ret;\n}\n\nvar_dump(make_a_pile(3));\n\
    var_dump(make_a_pile(4));\nvar_dump(make_a_pile(5));\nvar_dump(make_a_pile(6));\n\
    var_dump(make_a_pile(7));\nvar_dump(make_a_pile(8));\nvar_dump(make_a_pile(9));\n\
    var_dump(make_a_pile(10));\nvar_dump(make_a_pile(11));\nvar_dump(make_a_pile(12));\n\
    var_dump(make_a_pile(13));\nvar_dump(make_a_pile(14));\nvar_dump(make_a_pile(15));\n\
    var_dump(make_a_pile(16));\nvar_dump(make_a_pile(17));\nvar_dump(make_a_pile(18));\n\
    var_dump(make_a_pile(19));\nvar_dump(make_a_pile(20));\nvar_dump(make_a_pile(21));\n\
    var_dump(make_a_pile(22));\nvar_dump(make_a_pile(23));\nvar_dump(make_a_pile(24));\n\
    var_dump(make_a_pile(25));\nvar_dump(make_a_pile(26));\nvar_dump(make_a_pile(27));\n\
    var_dump(make_a_pile(28));\nvar_dump(make_a_pile(29));\nvar_dump(make_a_pile(30));\n\
    var_dump(make_a_pile(31));\nvar_dump(make_a_pile(32));\nvar_dump(make_a_pile(33));\n\
    var_dump(make_a_pile(34));\nvar_dump(make_a\nfunction candidate(...$args) {\n\
    \    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmpn65l4upb.php
    on line 54

    '
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $output = [];\n    $output[] = $n;\n    while($n > 1) {\n        if($n\
    \ % 2 == 0) {\n            $n = $n / 2;\n        } else {\n            $n = $n\
    \ * 3 + 1;\n        }\n        $output[] = $n;\n    }\n    return $output;\n}\n\
    \nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjtvqzq7o.php:31\n\
    Stack trace:\n#0 /tmp/tmpjtvqzq7o.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpjtvqzq7o.php\
    \ on line 31\n"
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $arr = array();\n    $arr[] = $n;\n    $i = 0;\n    while ($n > 1) {\n\
    \        if ($n % 2 == 0) {\n            $n /= 2;\n            $arr[] = $n * 2;\n\
    \        } else {\n            $n = ($n - 1) / 2;\n            $arr[] = $n * 2\
    \ + 1;\n        }\n    }\n    return $arr;\n}\nfunction candidate(...$args) {\n\
    \    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkbynisgb.php:32\n\
    Stack trace:\n#0 /tmp/tmpkbynisgb.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpkbynisgb.php\
    \ on line 32\n"
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $total = $n;\n    $pile = [$n];\n    while ($n > 1) {\n        if ($n\
    \ % 2 == 0) {\n            $n = $n / 2;\n        } else {\n            $n = $n\
    \ * 3 + 1;\n        }\n        $total += $n;\n        $pile[] = $n;\n    }\n \
    \   return $pile;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpykna06cl.php:32\n\
    Stack trace:\n#0 /tmp/tmpykna06cl.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpykna06cl.php\
    \ on line 32\n"
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  while ($n > 0) {\n    $result[] = $n;\n    $n = ($n\
    \ % 2 == 0) ? $n + 1 : $n + 2;\n  }\n  return $result;\n}\n\necho '<h1>Make a\
    \ pile</h1>';\n\n$tests = array(\n  array(\n    'input' => 3,\n    'expected'\
    \ => array(3, 5, 7),\n  ),\n  array(\n    'input' => 5,\n    'expected' => array(5,\
    \ 7, 9, 11, 13),\n  ),\n  array(\n    'input' => 4,\n    'expected' => array(4,\
    \ 6, 8, 10),\n  ),\n  array(\n    'input' => 1,\n    'expected' => array(1),\n\
    \  ),\n  array(\n    'input' => 2,\n    'expected' => array(2, 4),\n  ),\n);\n\
    \nforeach ($tests as $test) {\n  $result = make_a_pile($test['input']);\n  if\
    \ ($result === $test['expected']) {\n    echo 'PASS';\n  }\n  else {\n    echo\
    \ 'FAIL';\n  }\n  echo '<br>';\n}\nfunction candidate(...$args) {\n    return\
    \ make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !==\
    \ array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '<h1>Make a pile</h1>

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmpj8r2m_x6.php on line 15

    '
  timestamp: 1659978201
- exit_code: 0
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $ret = array();\n    for ($i = 0; $i < $n; $i++) {\n        $ret[] =\
    \ $n + 2 * $i;\n    }\n    return $ret;\n}\n\nfunction candidate(...$args) {\n\
    \    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = [];\n  for ($i = 0; $i < $n; $i++) {\n    if (is_odd($n)) {\n\
    \      $result[] = ($n + $i) * 2 + 1;\n    } else {\n      $result[] = ($n + $i)\
    \ * 2;\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n \
    \   return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_odd() in /tmp/tmpiy9z7g_4.php:15\n\
    Stack trace:\n#0 /tmp/tmpiy9z7g_4.php(25): make_a_pile(3)\n#1 /tmp/tmpiy9z7g_4.php(29):\
    \ candidate(3)\n#2 /tmp/tmpiy9z7g_4.php(36): test()\n#3 {main}\n  thrown in /tmp/tmpiy9z7g_4.php\
    \ on line 15\n"
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $stone_counts = array();\n    while ($n > 0) {\n        $stone_counts[]\
    \ = $n;\n        if ($n % 2) {\n            $n -= 1;\n        } else {\n     \
    \       $n -= 2;\n        }\n    }\n    return array_reverse($stone_counts);\n\
    }\n\nclass StoneCountTest extends PHPUnit_Framework_TestCase {\n    public function\
    \ test_make_a_pile() {\n        $this->assertEquals(array(3, 5, 7), make_a_pile(3));\n\
    \        $this->assertEquals(array(4, 6, 8, 10), make_a_pile(4));\n        $this->assertEquals(array(5,\
    \ 7, 9, 11, 13), make_a_pile(5));\n        $this->assertEquals(array(6, 8, 10,\
    \ 12, 14, 16), make_a_pile(6));\n    }\n}\n\nStoneCountTest::main();\nfunction\
    \ candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Class \"PHPUnit_Framework_TestCase\" not\
    \ found in /tmp/tmplitepodl.php:25\nStack trace:\n#0 {main}\n  thrown in /tmp/tmplitepodl.php\
    \ on line 25\n"
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $pile = array($n);\n  while ($n > 1) {\n    if ($n % 2 == 0)\n      $n--;\n\
    \    else\n      $n-=2;\n    $pile[] = $n;\n  }\n  return $pile;\n}\n\nfunction\
    \ candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp_rhx8pc.php:29\n\
    Stack trace:\n#0 /tmp/tmpp_rhx8pc.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpp_rhx8pc.php\
    \ on line 29\n"
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $results = [];\n    $results[] = $n;\n    while($n > 0) {\n        if($n\
    \ % 2 === 0) {\n            $n -= 1;\n        } else {\n            $n -= 2;\n\
    \        }\n        $results[] = $n;\n    }\n    array_pop($results);\n    return\
    \ $results;\n}\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppasjqkbl.php:31\n\
    Stack trace:\n#0 /tmp/tmppasjqkbl.php(38): test()\n#1 {main}\n  thrown in /tmp/tmppasjqkbl.php\
    \ on line 31\n"
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $make_a_pile = [$n];\n    while ($n > 1) {\n        $n = $n % 2 == 0\
    \ ? $n / 2 : ($n + 1) / 2;\n        $make_a_pile[] = $n;\n    }\n    return $make_a_pile;\n\
    }\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw4oruxdw.php:26\n\
    Stack trace:\n#0 /tmp/tmpw4oruxdw.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpw4oruxdw.php\
    \ on line 26\n"
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  $result[] = $n;\n  while($n > 0) {\n    $n = $n %\
    \ 2 ? $n + 2 : $n + 1;\n    $result[] = $n;\n  }\n  array_pop($result);\n  return\
    \ $result;\n}\n$res = make_a_pile(3);\nprint_r($res);\necho \"\\n\";\n$res = make_a_pile(11);\n\
    print_r($res);\necho \"\\n\";\n$res = make_a_pile(100);\nprint_r($res);\necho\
    \ \"\\n\";\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmpn05asr5_.php on line 17

    '
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n\t$level = 1;\n\t$pile = array();\n\twhile ($n > 0) {\n\t\t$pile[] = $n;\n\
    \t\tif ($n % 2 == 0) {\n\t\t\t$n = $n / 2;\n\t\t} else {\n\t\t\t$n = ($n + 1)\
    \ / 2;\n\t\t}\n\t\t$level++;\n\t}\n\treturn $pile;\n}\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmp2mo8r742.php on line 16

    '
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $array = [];\n  for ($i = 0; $i < $n; $i++) {\n    $array[] = $n;\n   \
    \ if ($n % 2 == 0) {\n      $n++;\n    } else {\n      $n+=2;\n    }\n  }\n  return\
    \ $array;\n}\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmpx4inhex6.php on line 15

    '
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    for ($i = 0; $i < $n; $i++) {\n        $result[]\
    \ = $n;\n        if ($n % 2 == 0) {\n            $n++;\n        } else {\n   \
    \         $n += 2;\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmpptbzeakf.php on line 15

    '
  timestamp: 1659978200
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n\t$pile = array($n);\n\tfor ($i = 0; $i < $n - 1; $i++) {\n\t\tif ($n % 2)\
    \ {\n\t\t\t$pile[] = $pile[$i] + 2;\n\t\t} else {\n\t\t\t$pile[] = $pile[$i] +\
    \ 1;\n\t\t}\n\t}\n\treturn $pile;\n}\nprint_r(make_a_pile(5));\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => 7\n    [2] => 9\n    [3] => 11\n   \
    \ [4] => 13\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps8u4zrbu.php:30\n\
    Stack trace:\n#0 /tmp/tmps8u4zrbu.php(36): test()\n#1 {main}\n  thrown in /tmp/tmps8u4zrbu.php\
    \ on line 30\n"
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $pile = [$n];\n  while ($pile[count($pile) - 1] != 1) {\n    $level = count($pile);\n\
    \    if ($pile[$level - 1] % 2) {\n      $pile[] = $pile[$level - 1] + 2;\n  \
    \  } else {\n      $pile[] = $pile[$level - 1] + 1;\n    }\n  }\n  return $pile;\n\
    }\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmp2db1xjop.php on line 17

    '
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $level = 1;\n  $result = [];\n  while($n > 0) {\n    $result[] = $n;\n\
    \    $n = $level % 2 === 0 ? $n + 2 : $n + 1;\n    $level++;\n  }\n  return $result;\n\
    }\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmpo4969spo.php on line 16

    '
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  // This can be done in a one-liner, but I'd like to show that\n  // the\
    \ logic is pretty simple.\n  $a = array();\n  for ($i = 0; $i < $n; $i++) {\n\
    \    $a[] = $n;\n    if ($n % 2 == 0) {\n      $n++;\n    } else {\n      $n +=\
    \ 2;\n    }\n  }\n  return $a;\n}\n\nfunction candidate(...$args) {\n    return\
    \ make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !==\
    \ array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmpz3fxh_sr.php on line 17

    '
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $stones = array($n);\n  for ($i = 1; $i < $n; $i++) {\n    if ($n % 2 ==\
    \ 0) {\n      $stones[] = $stones[$i - 1] + 2;\n    } else {\n      $stones[]\
    \ = $stones[$i - 1] + 1;\n    }\n  }\n  return $stones;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4tyjdl86.php:29\n\
    Stack trace:\n#0 /tmp/tmp4tyjdl86.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp4tyjdl86.php\
    \ on line 29\n"
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n\tif($n <= 0) return null;\n\t$result = array($n);\n\twhile($n > 1) {\n\t\
    \tif($n % 2 == 0) $n /= 2;\n\t\telse $n = ($n + 1) / 2;\n\t\t$result[] = $n;\n\
    \t}\n\treturn $result;\n}\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplxltmh14.php:27\n\
    Stack trace:\n#0 /tmp/tmplxltmh14.php(34): test()\n#1 {main}\n  thrown in /tmp/tmplxltmh14.php\
    \ on line 27\n"
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $arr[0] = $n;\n    for ($i = 1; $i < $n; $i++) {\n        if ($arr[$i\
    \ - 1] % 2 == 0) {\n            $arr[$i] = $arr[$i - 1] + 2;\n        } else {\n\
    \            $arr[$i] = $arr[$i - 1] + 1;\n        }\n    }\n    return $arr;\n\
    }\necho json_encode(make_a_pile(5)) . \"\\n\";\nfunction candidate(...$args) {\n\
    \    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "[5,6,8,10,12]\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp11ry_hot.php:29\n\
    Stack trace:\n#0 /tmp/tmp11ry_hot.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp11ry_hot.php\
    \ on line 29\n"
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $pile = array($n);\n    for ($i = 1; $i < $n; $i++) {\n        if ($pile[$i\
    \ - 1] % 2 == 0) {\n            $pile[] = $pile[$i - 1] + 2;\n        } else {\n\
    \            $pile[] = $pile[$i - 1] + 1;\n        }\n    }\n    return $pile;\n\
    }\necho json_encode(make_a_pile(3)) . \"\\n\";\nfunction candidate(...$args) {\n\
    \    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "[3,4,6]\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpneeo_n2u.php:29\n\
    Stack trace:\n#0 /tmp/tmpneeo_n2u.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpneeo_n2u.php\
    \ on line 29\n"
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n\t$res = array();\n\t$res[] = $n;\n\twhile ($n > 1) {\n\t\tif ($n % 2)\n\t\
    \t\t$n = $n - 1;\n\t\telse\n\t\t\t$n = $n / 2;\n\t\t$res[] = $n;\n\t}\n\treturn\
    \ $res;\n}\necho \">>> \" . json_encode(make_a_pile(3)) . \"\\n\";\necho \">>>\
    \ \" . json_encode(make_a_pile(8)) . \"\\n\";\nfunction candidate(...$args) {\n\
    \    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: ">>> [3,2,1]\n>>> [8,4,2,1]\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpapp456bz.php:31\nStack trace:\n#0 /tmp/tmpapp456bz.php(38): test()\n\
    #1 {main}\n  thrown in /tmp/tmpapp456bz.php on line 31\n"
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    for ($i = $n; $i > 0; $i--) {\n        $result[]\
    \ = $n;\n        if ($n % 2 === 0) {\n            $n += 2;\n        } else {\n\
    \            $n += 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp83q1ka8g.php:30\n\
    Stack trace:\n#0 /tmp/tmp83q1ka8g.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp83q1ka8g.php\
    \ on line 30\n"
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $res = array();\n    while ($n > 0) {\n        $res[] = $n;\n       \
    \ $n = ($n % 2) ? $n + 2 : $n + 1;\n    }\n    return $res;\n}\nprint_r(make_a_pile(2));\n\
    function candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmpxngq5j8y.php on line 15

    '
  timestamp: 1659978201
- exit_code: 0
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $pile = array();\n    for ($i = 0; $i < $n; $i++) {\n        $pile[]\
    \ = $n + 2 * $i;\n    }\n    return $pile;\n}\n\necho \"make_a_pile(3)\";\nvar_dump(make_a_pile(3));\n\
    \necho \"make_a_pile(10)\";\nvar_dump(make_a_pile(10));\n\necho \"make_a_pile(11)\"\
    ;\nvar_dump(make_a_pile(11));\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "make_a_pile(3)array(3) {\n  [0]=>\n  int(3)\n  [1]=>\n  int(5)\n  [2]=>\n\
    \  int(7)\n}\nmake_a_pile(10)array(10) {\n  [0]=>\n  int(10)\n  [1]=>\n  int(12)\n\
    \  [2]=>\n  int(14)\n  [3]=>\n  int(16)\n  [4]=>\n  int(18)\n  [5]=>\n  int(20)\n\
    \  [6]=>\n  int(22)\n  [7]=>\n  int(24)\n  [8]=>\n  int(26)\n  [9]=>\n  int(28)\n\
    }\nmake_a_pile(11)array(11) {\n  [0]=>\n  int(11)\n  [1]=>\n  int(13)\n  [2]=>\n\
    \  int(15)\n  [3]=>\n  int(17)\n  [4]=>\n  int(19)\n  [5]=>\n  int(21)\n  [6]=>\n\
    \  int(23)\n  [7]=>\n  int(25)\n  [8]=>\n  int(27)\n  [9]=>\n  int(29)\n  [10]=>\n\
    \  int(31)\n}\n"
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = [];\n  $result[] = $n;\n  while ($n > 0) {\n    $result[] = $n\
    \ % 2 == 0 ? $n - 1 : $n + 1;\n    $n = $n % 2 == 0 ? $n - 1 : $n + 1;\n  }\n\
    \  return $result;\n}\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmp4618z7am.php on line 16

    '
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $results = [];\n    $last = $n;\n    for ($i = 0; $i < $n; $i++) {\n\
    \        $results[] = $last;\n        if ($last % 2 == 0) {\n            $last\
    \ += 2;\n        } else {\n            $last += 1;\n        }\n    }\n    return\
    \ $results;\n}\n\necho implode(', ', make_a_pile(3)); // 3, 5, 7\necho implode(',\
    \ ', make_a_pile(5)); // 5, 7, 9, 11, 13\n\nfunction candidate(...$args) {\n \
    \   return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "3, 4, 65, 6, 8, 10, 12\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpw7kn3ivg.php:34\nStack trace:\n#0 /tmp/tmpw7kn3ivg.php(41): test()\n\
    #1 {main}\n  thrown in /tmp/tmpw7kn3ivg.php on line 34\n"
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $is_odd = $n % 2;\n  $r = array($n);\n  for ($i = 1; $i < $n; $i++) {\n\
    \    $r[] = $is_odd ? $r[$i - 1] + 2 : $r[$i - 1] + 1;\n    $is_odd = !$is_odd;\n\
    \  }\n  return $r;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwjrt342d.php:27\n\
    Stack trace:\n#0 /tmp/tmpwjrt342d.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpwjrt342d.php\
    \ on line 27\n"
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = [];\n    while ($n > 0) {\n        $result[] = $n;\n      \
    \  $n = $n % 2 == 0 ? $n / 2 : $n * 3 + 1;\n    }\n    return $result;\n}\n\n\
    echo \"Example 1: \" . implode(', ', make_a_pile(5)) . PHP_EOL;\necho \"Example\
    \ 2: \" . implode(', ', make_a_pile(3)) . PHP_EOL;\necho \"Example 3: \" . implode(',\
    \ ', make_a_pile(11)) . PHP_EOL;\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmp4filcnyc.php on line 15

    '
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = [];\n    while ($n > 0) {\n        $result[] = $n;\n      \
    \  $n = ($n % 2) ? $n + 2 : $n + 1;\n    }\n    return $result;\n}\nprint_r(make_a_pile(7));\n\
    function candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmpn0yhuafp.php on line 15

    '
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $pile = [$n];\n    $i = 0;\n    while (count($pile) < $n) {\n       \
    \ if ($pile[$i] % 2 === 0) {\n            $pile[] = $pile[$i] + 2;\n        }\
    \ else {\n            $pile[] = $pile[$i] + 1;\n        }\n        $i++;\n   \
    \ }\n    return $pile;\n}\n\nif (\n    make_a_pile(3) === [3, 5, 7]\n    && make_a_pile(4)\
    \ === [4, 6, 8, 10]\n    && make_a_pile(5) === [5, 7, 9, 11, 13]\n) {\n    echo\
    \ \"Done\\n\";\n} else {\n    echo \"Fail\\n\";\n}\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Fail\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu9uhzwlo.php:40\n\
    Stack trace:\n#0 /tmp/tmpu9uhzwlo.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpu9uhzwlo.php\
    \ on line 40\n"
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $pile = array($n);\n  while ($n != 1) {\n    if ($n % 2 == 0) {\n     \
    \ $n /= 2;\n    } else {\n      $n = (3 * $n + 1) / 2;\n    }\n    $pile[] = $n;\n\
    \  }\n  return $pile;\n}\n\nvar_dump(make_a_pile(3));\nvar_dump(make_a_pile(4));\n\
    function candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(6) {\n  [0]=>\n  int(3)\n  [1]=>\n  int(5)\n  [2]=>\n  int(8)\n \
    \ [3]=>\n  int(4)\n  [4]=>\n  int(2)\n  [5]=>\n  int(1)\n}\narray(3) {\n  [0]=>\n\
    \  int(4)\n  [1]=>\n  int(2)\n  [2]=>\n  int(1)\n}\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmptbto33v4.php:32\nStack trace:\n#0 /tmp/tmptbto33v4.php(39):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmptbto33v4.php on line 32\n"
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $arr = array();\n    $i = 0;\n    while ($n >= 1) {\n        $arr[$i]\
    \ = $n;\n        if ($n % 2 == 0) {\n            $n -= 1;\n        } else {\n\
    \            $n -= 2;\n        }\n        $i++;\n    }\n    return $arr;\n}\n\n\
    function candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgwnejrda.php:32\n\
    Stack trace:\n#0 /tmp/tmpgwnejrda.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpgwnejrda.php\
    \ on line 32\n"
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  if ($n == 1) {\n    return array(1);\n  }\n  $pile = array();\n  $pile[0]\
    \ = $n;\n  $next_n = ($n % 2 == 0) ? $n + 1 : $n + 2;\n  return array_merge($pile,\
    \ make_a_pile($next_n));\n}\n\necho \"<h1>Question 2a</h1>\";\necho \"<b>Test\
    \ 1: </b>\";\nvar_dump(make_a_pile(3) == array(3, 5, 7));\necho \"<br><b>Test\
    \ 2: </b>\";\nvar_dump(make_a_pile(1) == array(1));\necho \"<br><b>Test 3: </b>\"\
    ;\nvar_dump(make_a_pile(2) == array(2, 3));\necho \"<br><b>Test 4: </b>\";\nvar_dump(make_a_pile(17)\
    \ == array(17, 19, 21, 23, 25));\necho \"<br><b>Test 5: </b>\";\nvar_dump(make_a_pile(28)\
    \ == array(28, 29, 31, 33, 35, 37));\necho \"<br><b>Test 6: </b>\";\nvar_dump(make_a_pile(23)\
    \ == array(23, 25, 27, 29, 31));\n\nfunction candidate(...$args) {\n    return\
    \ make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !==\
    \ array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '<h1>Question 2a</h1><b>Test 1: </b>

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    262144 bytes) in /tmp/tmp_ljqv5gi.php on line 19

    '
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  $result[] = $n;\n  while($n > 1) {\n    $n = ($n\
    \ % 2 === 0) ? $n - 1 : $n - 2;\n    $result[] = $n;\n  }\n  return $result;\n\
    }\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi5c3pp53.php:26\n\
    Stack trace:\n#0 /tmp/tmpi5c3pp53.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpi5c3pp53.php\
    \ on line 26\n"
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $arr = [];\n  while ($n > 0) {\n    $arr[] = $n;\n    if ($n % 2 === 0)\
    \ {\n      $n = $n / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n  }\n\
    \  return $arr;\n}\n\nprint_r(make_a_pile(3));\nprint_r(make_a_pile(7));\nprint_r(make_a_pile(4));\n\
    print_r(make_a_pile(1));\nprint_r(make_a_pile(0));\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmpr4cghidq.php on line 15

    '
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  if($n == 1) {\n    return array(1);\n  }\n  $result = array();\n  $result[]\
    \ = $n;\n  while($n > 1) {\n    if($n % 2 == 0) {\n      $n /= 2;\n    } else\
    \ {\n      $n = ($n + 1) / 2;\n    }\n    $result[] = $n;\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphugghcvl.php:34\n\
    Stack trace:\n#0 /tmp/tmphugghcvl.php(41): test()\n#1 {main}\n  thrown in /tmp/tmphugghcvl.php\
    \ on line 34\n"
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  // Fill in the missing code!\n  $arr = array();\n  array_push($arr, $n);\n\
    \  while ($n > 1) {\n    if ($n % 2) {\n      $n = $n - 1;\n      array_push($arr,\
    \ $n);\n    } else {\n      $n = $n - 2;\n      array_push($arr, $n);\n    }\n\
    \  }\n  return $arr;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjtvkqxi5.php:33\n\
    Stack trace:\n#0 /tmp/tmpjtvkqxi5.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpjtvkqxi5.php\
    \ on line 33\n"
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $array = array();\n    $odd = false;\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        if ($odd) {\n            $array[] = $n + 2;\n            $n += 2;\n\
    \        } else {\n            $array[] = $n + 1;\n            $n += 1;\n    \
    \    }\n        $odd = !$odd;\n    }\n    return $array;\n}\n\nprint_r(make_a_pile(3));\n\
    function candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmpldx_553d.php on line 20

    '
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  $next = $n;\n  while ($next >= 0) {\n    $result[]\
    \ = $next;\n    $next = ($next % 2 == 0) ? $next - 1 : $next - 2;\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf2jgyl65.php:27\n\
    Stack trace:\n#0 /tmp/tmpf2jgyl65.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpf2jgyl65.php\
    \ on line 27\n"
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n\tif ($n == 1) {\n\t\treturn array(1);\n\t}\n\tif ($n % 2 == 0) {\n\t\t$base\
    \ = make_a_pile($n - 1);\n\t\tarray_push($base, $n + 1);\n\t\treturn $base;\n\t\
    } else {\n\t\t$base = make_a_pile($n - 1);\n\t\tarray_push($base, $n + 2);\n\t\
    \treturn $base;\n\t}\n}\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwh1_mk94.php:31\n\
    Stack trace:\n#0 /tmp/tmpwh1_mk94.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpwh1_mk94.php\
    \ on line 31\n"
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    return generate_pile($n, $n);\n}\n\nfunction candidate(...$args) {\n\
    \    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function generate_pile()\
    \ in /tmp/tmpc8m2phrq.php:13\nStack trace:\n#0 /tmp/tmpc8m2phrq.php(17): make_a_pile(3)\n\
    #1 /tmp/tmpc8m2phrq.php(21): candidate(3)\n#2 /tmp/tmpc8m2phrq.php(28): test()\n\
    #3 {main}\n  thrown in /tmp/tmpc8m2phrq.php on line 13\n"
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $pile = array($n);\n  $i = 0;\n  $odd = true;\n  while ($n > 0) {\n   \
    \ $n = $n - $pile[$i];\n    if ($odd) {\n      $pile[] = $pile[$i] + 2;\n    \
    \  $odd = false;\n    } else {\n      $pile[] = $pile[$i] + 1;\n      $odd = true;\n\
    \    }\n    $i += 1;\n  }\n  return $pile;\n}\nfunction candidate(...$args) {\n\
    \    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1bynj6mb.php:34\n\
    Stack trace:\n#0 /tmp/tmp1bynj6mb.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp1bynj6mb.php\
    \ on line 34\n"
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $pile = array();\n    $pile[] = $n;\n    while ($n > 1) {\n        if\
    \ ($n % 2 == 0) {\n            $n--;\n        } else {\n            $n /= 2;\n\
    \        }\n        $pile[] = $n;\n    }\n    return $pile;\n}\necho \"*** Test\
    \ 1 ***\\n\";\nvar_dump(make_a_pile(3));\necho \"*** Test 2 ***\\n\";\nvar_dump(make_a_pile(4));\n\
    echo \"*** Test 3 ***\\n\";\nvar_dump(make_a_pile(11));\necho \"*** Test 4 ***\\\
    n\";\nvar_dump(make_a_pile(14));\necho \"*** Test 5 ***\\n\";\nvar_dump(make_a_pile(1));\n\
    echo \"*** Test 6 ***\\n\";\nvar_dump(make_a_pile(0));\necho \"*** Test 7 ***\\\
    n\";\nvar_dump(make_a_pile(2));\necho \"*** Test 8 ***\\n\";\nvar_dump(make_a_pile(7));\n\
    echo \"*** Test 9 ***\\n\";\nvar_dump(make_a_pile(21));\necho \"*** Test 10 ***\\\
    n\";\nvar_dump(make_a_pile(22));\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "*** Test 1 ***\n\nDeprecated: Implicit conversion from float 1.5 to int\
    \ loses precision in /tmp/tmpbjrxf9ls.php on line 16\narray(3) {\n  [0]=>\n  int(3)\n\
    \  [1]=>\n  float(1.5)\n  [2]=>\n  float(0.75)\n}\n*** Test 2 ***\n\nDeprecated:\
    \ Implicit conversion from float 1.5 to int loses precision in /tmp/tmpbjrxf9ls.php\
    \ on line 16\narray(4) {\n  [0]=>\n  int(4)\n  [1]=>\n  int(3)\n  [2]=>\n  float(1.5)\n\
    \  [3]=>\n  float(0.75)\n}\n*** Test 3 ***\n\nDeprecated: Implicit conversion\
    \ from float 5.5 to int loses precision in /tmp/tmpbjrxf9ls.php on line 16\n\n\
    Deprecated: Implicit conversion from float 2.75 to int loses precision in /tmp/tmpbjrxf9ls.php\
    \ on line 16\n\nDeprecated: Implicit conversion from float 1.75 to int loses precision\
    \ in /tmp/tmpbjrxf9ls.php on line 16\narray(5) {\n  [0]=>\n  int(11)\n  [1]=>\n\
    \  float(5.5)\n  [2]=>\n  float(2.75)\n  [3]=>\n  float(1.75)\n  [4]=>\n  float(0.875)\n\
    }\n*** Test 4 ***\n\nDeprecated: Implicit conversion from float 6.5 to int loses\
    \ precision in /tmp/tmpbjrxf9ls.php on line 16\n\nDeprecated: Implicit conversion\
    \ from float 5.5 to int loses precision in /tmp/tmpbjrxf9ls.php on line 16\n\n\
    Deprecated: Implicit conversion from float 2.75 to int loses precision in /tmp/tmpbjrxf9ls.php\
    \ on line 16\n\nDeprecated: Implicit conversion from float 1.75 to int loses precision\
    \ in /tmp/tmpbjrxf9ls.php on line 16\narray(7) {\n  [0]=>\n  int(14)\n  [1]=>\n\
    \  int(13)\n  [2]=>\n  float(6.5)\n  [3]=>\n  float(5.5)\n  [4]=>\n  float(2.75)\n\
    \  [5]=>\n  float(1.75)\n  [6]=>\n  float(0.875)\n}\n*** Test 5 ***\narray(1)\
    \ {\n  [0]=>\n  int(1)\n}\n*** Test 6 ***\narray(1) {\n  [0]=>\n  int(0)\n}\n\
    *** Test 7 ***\narray(2) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(1)\n}\n*** Test\
    \ 8 ***\n\nDeprecated: Implicit conversion from float 3.5 to int loses precision\
    \ in /tmp/tmpbjrxf9ls.php on line 16\n\nDeprecated: Implicit conversion from float\
    \ 1.75 to int loses precision in /tmp/tmpbjrxf9ls.php on line 16\narray(4) {\n\
    \  [0]=>\n  int(7)\n  [1]=>\n  float(3.5)\n  [2]=>\n  float(1.75)\n  [3]=>\n \
    \ float(0.875)\n}\n*** Test 9 ***\n\nDeprecated: Implicit conversion from float\
    \ 10.5 to int loses precision in /tmp/tmpbjrxf9ls.php on "
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  $next = $n;\n  while ($next != 0) {\n    $result[]\
    \ = $next;\n    $next = $next % 2 == 0 ? $next + 2 : $next + 1;\n  }\n  return\
    \ $result;\n}\nprint_r(make_a_pile(3));\nprint_r(make_a_pile(4));\nprint_r(make_a_pile(5));\n\
    print_r(make_a_pile(10));\nprint_r(make_a_pile(15));\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmp8djziird.php on line 16

    '
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $pile = [$n];\n  for ($i = 1; $i < $n; $i++) {\n    $pile[] = $n + ($i\
    \ % 2 == 0 ? 2 : 1);\n  }\n  return $pile;\n}\nfunction candidate(...$args) {\n\
    \    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzz3ug40o.php:24\n\
    Stack trace:\n#0 /tmp/tmpzz3ug40o.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpzz3ug40o.php\
    \ on line 24\n"
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $stones = [];\n  $stones[] = $n;\n  if ($n % 2 == 0) {\n    $stones[] =\
    \ $n + 2;\n  } else {\n    $stones[] = $n + 1;\n  }\n  while ($stones[count($stones)\
    \ - 1] < $n * 2) {\n    if (end($stones) % 2 == 0) {\n      $stones[] = end($stones)\
    \ + 2;\n    } else {\n      $stones[] = end($stones) + 1;\n    }\n  }\n  return\
    \ $stones;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4na089hb.php:35\n\
    Stack trace:\n#0 /tmp/tmp4na089hb.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp4na089hb.php\
    \ on line 35\n"
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $a = [$n];\n    while ($n > 1) {\n        if ($n % 2 == 0) {\n      \
    \      $n = $n / 2;\n        } else {\n            $n = ($n - 1) / 2;\n      \
    \  }\n        $a[] = $n;\n    }\n    return $a;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_h27ltld.php:30\n\
    Stack trace:\n#0 /tmp/tmp_h27ltld.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp_h27ltld.php\
    \ on line 30\n"
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $array = array();\n  $s = $n;\n  $count = 1;\n  while ($s > 0) {\n    $array[]\
    \ = $s;\n    if ($s % 2 == 0) {\n      $s = $s + 2;\n    } else {\n      $s =\
    \ $s + 1;\n    }\n    $count++;\n  }\n  return $array;\n}\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmp1cfnwguy.php on line 17

    '
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n\t$result = array();\n\t$i = 1;\n\twhile ($n > 0) {\n\t\t$result[] = $n;\n\
    \t\tif ($n % 2 == 0) {\n\t\t\t$n /= 2;\n\t\t} else {\n\t\t\t$n = ($n + 1) / 2;\n\
    \t\t}\n\t\t$i++;\n\t}\n\treturn $result;\n}\nprint_r(make_a_pile(3));\nprint_r(make_a_pile(4));\n\
    print_r(make_a_pile(5));\nprint_r(make_a_pile(6));\nprint_r(make_a_pile(7));\n\
    print_r(make_a_pile(8));\nprint_r(make_a_pile(9));\nprint_r(make_a_pile(10));\n\
    \nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmp2efacpin.php on line 16

    '
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $arr = [];\n  for ($i = 0; $i < $n; $i++) {\n    $arr[] = $n;\n    $n =\
    \ $n % 2 === 0 ? $n + 2 : $n + 1;\n  }\n  return $arr;\n}\necho implode(\", \"\
    , make_a_pile(3)) . \"\\n\";\necho implode(\", \", make_a_pile(6)) . \"\\n\";\n\
    echo implode(\", \", make_a_pile(11)) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmp7xzht9by.php on line 15

    '
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $pile = array($n);\n  while (true) {\n    $last_level = $pile[count($pile)\
    \ - 1];\n    if ($last_level === 1) {\n      break;\n    }\n    $next_level =\
    \ $last_level % 2 ? $last_level + 2 : $last_level + 1;\n    $pile[] = $next_level;\n\
    \  }\n  return $pile;\n}\nprint_r(make_a_pile(3));\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmpq1zeo_en.php on line 20

    '
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $arr = array();\n    for ($i = 0; $i < $n; $i++) {\n        if ($i ==\
    \ 0) {\n            $arr[] = $n;\n        } else {\n            if ($n % 2 ==\
    \ 0) {\n                $arr[] = $arr[$i - 1] + 2;\n            } else {\n   \
    \             $arr[] = $arr[$i - 1] + 1;\n            }\n        }\n    }\n  \
    \  return $arr;\n}\necho \"make_a_pile(3):\\n\";\nvar_dump(make_a_pile(3));\n\
    echo \"make_a_pile(8):\\n\";\nvar_dump(make_a_pile(8));\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "make_a_pile(3):\narray(3) {\n  [0]=>\n  int(3)\n  [1]=>\n  int(4)\n  [2]=>\n\
    \  int(5)\n}\nmake_a_pile(8):\narray(8) {\n  [0]=>\n  int(8)\n  [1]=>\n  int(10)\n\
    \  [2]=>\n  int(12)\n  [3]=>\n  int(14)\n  [4]=>\n  int(16)\n  [5]=>\n  int(18)\n\
    \  [6]=>\n  int(20)\n  [7]=>\n  int(22)\n}\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpb7yd41nb.php:36\nStack trace:\n#0 /tmp/tmpb7yd41nb.php(43):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpb7yd41nb.php on line 36\n"
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $s = array();\n    for ($i = 0; $i < $n; $i++) {\n        $e = $n + 2\
    \ * $i;\n        if ($e % 2 === 0) {\n            $e++;\n        }\n        $s[]\
    \ = $e;\n    }\n    return $s;\n}\nfunction candidate(...$args) {\n    return\
    \ make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !==\
    \ array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb3m7didk.php:29\n\
    Stack trace:\n#0 /tmp/tmpb3m7didk.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpb3m7didk.php\
    \ on line 29\n"
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    $i = 1;\n    while ($n > 0) {\n        array_push($result,\
    \ $n);\n        if ($n % 2 == 0) {\n            $n = $n - $i;\n        } else\
    \ {\n            $n = $n - ($i + 1);\n        }\n        $i = $i + 2;\n    }\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmk8ujjn_.php:32\n\
    Stack trace:\n#0 /tmp/tmpmk8ujjn_.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpmk8ujjn_.php\
    \ on line 32\n"
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $res = array();\n    while ($n > 0) {\n        $res[] = $n;\n       \
    \ $n = $n + ($n % 2 ? 2 : 1);\n    }\n    return $res;\n}\nprint_r(make_a_pile(3));\n\
    function candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmpwlklogjz.php on line 15

    '
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  if ($n < 1) {\n    return array();\n  }\n  $result = array($n);\n  $i =\
    \ 1;\n  while ($n > 1) {\n    if ($n % 2) {\n      $n -= $i;\n    } else {\n \
    \     $n += $i;\n    }\n    $result[] = $n;\n    $i = -$i;\n  }\n  return $result;\n\
    }\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkhveysqx.php:34\n\
    Stack trace:\n#0 /tmp/tmpkhveysqx.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpkhveysqx.php\
    \ on line 34\n"
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n\t$res = array();\n\tfor ($i = $n; $i > 0; $i--) {\n\t\t$res[] = $n;\n\t\t\
    if ($n % 2 == 0) {\n\t\t\t$n -= 1;\n\t\t} else {\n\t\t\t$n -= 2;\n\t\t}\n\t}\n\
    \treturn $res;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8mavlp0_.php:30\n\
    Stack trace:\n#0 /tmp/tmp8mavlp0_.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp8mavlp0_.php\
    \ on line 30\n"
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n\t$result = array();\n\t$m = $n;\n\twhile ($m > 0) {\n\t\t$result[] = $m;\n\
    \t\tif ($m % 2 == 0) {\n\t\t\t$m--;\n\t\t}\n\t\t$m = $m / 2;\n\t}\n\treturn $result;\n\
    }\n\nif (__FILE__ == $_SERVER['SCRIPT_FILENAME']) {\n\trequire_once(\"../Libs/test_util.php\"\
    );\n\t$count = 10000;\n\t$t1 = microtime(true);\n\tfor ($i = 0; $i < $count; $i++)\
    \ {\n\t\t$in = rand(0, 1000000);\n\t\t$result = make_a_pile($in);\n\t\t//echo\
    \ \"in: $in => \" . implode(\" \", $result) . \"\\n\";\n\t}\n\t$t2 = microtime(true);\n\
    \techo $t2 - $t1;\n}\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: require_once(../Libs/test_util.php): Failed to open stream:\
    \ No such file or directory in /tmp/tmprrrwaj29.php on line 26\n\nFatal error:\
    \ Uncaught Error: Failed opening required '../Libs/test_util.php' (include_path='.:')\
    \ in /tmp/tmprrrwaj29.php:26\nStack trace:\n#0 {main}\n  thrown in /tmp/tmprrrwaj29.php\
    \ on line 26\n"
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    if ($n <= 0) {\n        return [];\n    }\n    if ($n == 1) {\n     \
    \   return [1];\n    }\n    if ($n == 2) {\n        return [2, 3];\n    }\n  \
    \  if ($n % 2 == 0) {\n        $next = $n + 2;\n    } else {\n        $next =\
    \ $n + 1;\n    }\n    return array_merge([$n], make_a_pile($next));\n}\n\nfunction\
    \ candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    20480 bytes) in /tmp/tmpeek21xd1.php on line 27

    '
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    while ($n > 0) {\n        $result[] = $n;\n \
    \       $n = ($n % 2) ? $n + 2 : $n + 1;\n    }\n    return $result;\n}\n\n$inputs\
    \ = array(3, 8, 25, 0, 1, -6);\nforeach ($inputs as $input) {\n    echo \"make_a_pile($input)\
    \ = \" .\n         json_encode(make_a_pile($input)) . \"\\n\";\n}\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmpvgwdu5yi.php on line 15

    '
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $pile = [$n];\n    for ($i = 0; $i < $n; $i++) {\n        if ($pile[$i]\
    \ % 2 === 0) {\n            $pile[] = $pile[$i] + 2;\n        } else {\n     \
    \       $pile[] = $pile[$i] + 1;\n        }\n    }\n    return $pile;\n}\necho\
    \ '<pre>make_a_pile(3): ';\nvar_dump(make_a_pile(3));\necho '</pre>';\necho '<pre>make_a_pile(4):\
    \ ';\nvar_dump(make_a_pile(4));\necho '</pre>';\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>make_a_pile(3): array(4) {\n  [0]=>\n  int(3)\n  [1]=>\n  int(4)\n\
    \  [2]=>\n  int(6)\n  [3]=>\n  int(8)\n}\n</pre><pre>make_a_pile(4): array(5)\
    \ {\n  [0]=>\n  int(4)\n  [1]=>\n  int(6)\n  [2]=>\n  int(8)\n  [3]=>\n  int(10)\n\
    \  [4]=>\n  int(12)\n}\n</pre>\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp_umobosc.php:35\nStack trace:\n#0 /tmp/tmp_umobosc.php(42): test()\n\
    #1 {main}\n  thrown in /tmp/tmp_umobosc.php on line 35\n"
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n\n}\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpflpkrw10.php:20\n\
    Stack trace:\n#0 /tmp/tmpflpkrw10.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpflpkrw10.php\
    \ on line 20\n"
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  if ($n < 1) return array();\n  $pile = array();\n  $pile[] = $n;\n  while\
    \ ($n > 1) {\n    if ($n % 2 == 0) {\n      $n = $n / 2;\n    } else {\n     \
    \ $n = ($n + 1) / 2;\n    }\n    $pile[] = $n;\n  }\n  return $pile;\n}\n\nfunction\
    \ candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq2thvcpq.php:32\n\
    Stack trace:\n#0 /tmp/tmpq2thvcpq.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpq2thvcpq.php\
    \ on line 32\n"
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $pile = array($n);\n  while ($n) {\n    if ($n % 2 == 0) {\n      $n +=\
    \ 2;\n    } else {\n      $n += 1;\n    }\n    $pile[] = $n;\n  }\n  return $pile;\n\
    }\n\n$n = 7;\n$pile = make_a_pile($n);\n$expected = array(7, 9, 11, 13, 15, 17,\
    \ 19);\nassert($pile == $expected);\n\n$n = 8;\n$pile = make_a_pile($n);\n$expected\
    \ = array(8, 10, 12, 14, 16, 18, 20);\nassert($pile == $expected);\n\nfunction\
    \ candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmptxgw390a.php on line 20

    '
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  $count = $n;\n  while ($count > 0) {\n    array_push($result,\
    \ $count);\n    if ($count % 2 == 0) {\n      $count += 1;\n    } else {\n   \
    \   $count += 2;\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmpe8v9s1lt.php on line 16

    '
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $stack = [$n];\n    while ($n > 1) {\n        $n = $n % 2 == 0 ? $n /\
    \ 2 : ($n + 1) / 2;\n        $stack[] = $n;\n    }\n    return $stack;\n}\n$x\
    \ = make_a_pile(3);\n$y = make_a_pile(4);\necho implode(', ', $x) . \"\\n\";\n\
    echo implode(', ', $y) . \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !==\
    \ array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "3, 2, 1\n4, 2, 1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmci4c983.php:29\n\
    Stack trace:\n#0 /tmp/tmpmci4c983.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpmci4c983.php\
    \ on line 29\n"
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $first = $n;\n  $current = $n % 2 === 0 ? $n - 1 : $n + 1;\n  $pile = [$first];\n\
    \  while ($current !== $first) {\n    $pile[] = $current;\n    $current = $current\
    \ % 2 === 0 ? $current - 1 : $current + 1;\n  }\n  return $pile;\n}\nfunction\
    \ candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp48eo0ozb.php:27\n\
    Stack trace:\n#0 /tmp/tmp48eo0ozb.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp48eo0ozb.php\
    \ on line 27\n"
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $pile = [$n];\n    while (end($pile) !== 1) {\n        $pile[] = end($pile)\
    \ % 2 ? end($pile) - 1 : end($pile) - 2;\n    }\n    return $pile;\n}\n\nfunction\
    \ candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmpfq94ie4v.php on line 15

    '
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $pile = array($n);\n  while ($n > 1) {\n    $n -= ($n % 2) ? 1 : 2;\n \
    \   $pile[] = $n;\n  }\n  return $pile;\n}\n\nfunction candidate(...$args) {\n\
    \    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpahjqulvg.php:26\n\
    Stack trace:\n#0 /tmp/tmpahjqulvg.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpahjqulvg.php\
    \ on line 26\n"
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $first = $n;\n  $stack = [$first];\n  while ($first > 0) {\n    $first\
    \ = ($first % 2 == 0) ? $first - 1 : $first - 2;\n    $stack[] = $first;\n  }\n\
    \  return $stack;\n}\n\necho '<pre>';\nprint_r(make_a_pile(3));\nprint_r(make_a_pile(4));\n\
    print_r(make_a_pile(5));\nprint_r(make_a_pile(6));\nprint_r(make_a_pile(7));\n\
    print_r(make_a_pile(8));\nprint_r(make_a_pile(9));\nprint_r(make_a_pile(10));\n\
    echo '</pre>';\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => 3\n    [1] => 1\n    [2] => -1\n)\nArray\n(\n\
    \    [0] => 4\n    [1] => 3\n    [2] => 1\n    [3] => -1\n)\nArray\n(\n    [0]\
    \ => 5\n    [1] => 3\n    [2] => 1\n    [3] => -1\n)\nArray\n(\n    [0] => 6\n\
    \    [1] => 5\n    [2] => 3\n    [3] => 1\n    [4] => -1\n)\nArray\n(\n    [0]\
    \ => 7\n    [1] => 5\n    [2] => 3\n    [3] => 1\n    [4] => -1\n)\nArray\n(\n\
    \    [0] => 8\n    [1] => 7\n    [2] => 5\n    [3] => 3\n    [4] => 1\n    [5]\
    \ => -1\n)\nArray\n(\n    [0] => 9\n    [1] => 7\n    [2] => 5\n    [3] => 3\n\
    \    [4] => 1\n    [5] => -1\n)\nArray\n(\n    [0] => 10\n    [1] => 9\n    [2]\
    \ => 7\n    [3] => 5\n    [4] => 3\n    [5] => 1\n    [6] => -1\n)\n</pre>\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmpm5mdc_mj.php:37\nStack trace:\n\
    #0 /tmp/tmpm5mdc_mj.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpm5mdc_mj.php\
    \ on line 37\n"
  timestamp: 1659978201
- exit_code: 0
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    for ($i = 0; $i < $n; $i++) {\n        $result[]\
    \ = 2 * $i + $n;\n    }\n    return $result;\n}\necho \"make_a_pile(1)\\n\";\n\
    var_dump(make_a_pile(1));\necho \"make_a_pile(2)\\n\";\nvar_dump(make_a_pile(2));\n\
    echo \"make_a_pile(3)\\n\";\nvar_dump(make_a_pile(3));\necho \"make_a_pile(4)\\\
    n\";\nvar_dump(make_a_pile(4));\necho \"make_a_pile(5)\\n\";\nvar_dump(make_a_pile(5));\n\
    function candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "make_a_pile(1)\narray(1) {\n  [0]=>\n  int(1)\n}\nmake_a_pile(2)\narray(2)\
    \ {\n  [0]=>\n  int(2)\n  [1]=>\n  int(4)\n}\nmake_a_pile(3)\narray(3) {\n  [0]=>\n\
    \  int(3)\n  [1]=>\n  int(5)\n  [2]=>\n  int(7)\n}\nmake_a_pile(4)\narray(4) {\n\
    \  [0]=>\n  int(4)\n  [1]=>\n  int(6)\n  [2]=>\n  int(8)\n  [3]=>\n  int(10)\n\
    }\nmake_a_pile(5)\narray(5) {\n  [0]=>\n  int(5)\n  [1]=>\n  int(7)\n  [2]=>\n\
    \  int(9)\n  [3]=>\n  int(11)\n  [4]=>\n  int(13)\n}\n"
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $level = $n;\n  $levels = [];\n  while($level > 0) {\n    $levels[] = $level;\n\
    \    if ($level % 2 == 0) {\n      $level = $level + 1;\n    } else {\n      $level\
    \ = $level + 2;\n    }\n  }\n  return $levels;\n}\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmp2e54xo91.php on line 16

    '
  timestamp: 1659978201
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $pile = [$n];\n  while ($n > 1) {\n    $n = $n % 2 == 0 ? $n - 1 : $n +\
    \ 1;\n    $pile[] = $n;\n  }\n  return $pile;\n}\n\necho implode(', ', make_a_pile(3))\
    \ . PHP_EOL; // 3, 5, 7\necho implode(', ', make_a_pile(4)) . PHP_EOL; // 4, 5,\
    \ 6\necho implode(', ', make_a_pile(6)) . PHP_EOL; // 6, 7, 8\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmpb9nudt0z.php on line 16

    '
  timestamp: 1659978201
