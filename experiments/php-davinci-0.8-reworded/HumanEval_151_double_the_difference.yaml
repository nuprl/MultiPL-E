name: HumanEval_151_double_the_difference
language: php
prompt: "<?php\n// Given an array of numbers, return the sum of squares of the numbers\n\
  // in the array that are odd. Ignore numbers that are negative or not integers.\n\
  // >>> double_the_difference(array(1, 3, 2, 0))\n// 10\n// >>> double_the_difference(array(-1,\
  \ -2, 0))\n// 0\n// >>> double_the_difference(array(9, -2))\n// 81\n// >>> double_the_difference(array(0))\n\
  // 0\n// If the input array is empty, return 0.\nfunction double_the_difference($lst)\
  \ {\n"
tests: "function candidate(...$args) {\n    return double_the_difference(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(5.0, 4.0)) !== 25) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(0.1, 0.2, 0.3)) !== 0) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(-10.0, -20.0, -30.0)) !== 0) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1.0, -2.0, 8.0))\
  \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.2,\
  \ 3.0, 5.0)) !== 34) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-9.0,\
  \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0)) !== 165) { throw new Exception(\"\
  Test failed!\"); }\n}\n\ntest();"
completions: ["  $odds = get_odds($lst);\n  $odds_squared = array_map(function($x)\
    \ { return $x * $x; }, $odds);\n  return array_sum($odds_squared);\n}\n", "  $squares\
    \ = [];\n  foreach ($lst as $number) {\n    if ($number % 2 === 1) {\n      $squares[]\
    \ = $number * $number;\n    }\n  }\n  return array_sum($squares);\n}\necho double_the_difference([1,\
    \ 3, 2, 0]) . PHP_EOL;\necho double_the_difference([-1, -2, 0]) . PHP_EOL;\necho\
    \ double_the_difference([9, -2]) . PHP_EOL;\necho double_the_difference([0]) .\
    \ PHP_EOL;\necho double_the_difference([]) . PHP_EOL;", "\t$difference = 0;\n\t\
    foreach ($lst as $key => $val) {\n\t\tif ($val % 2 != 0 && is_int($val)) {\n\t\
    \t\t$difference += $val * $val;\n\t\t}\n\t}\n\treturn $difference;\n}\n\necho\
    \ double_the_difference(array(1, 3, 2, 0)) . \"\\n\";\necho double_the_difference(array(-1,\
    \ -2, 0)) . \"\\n\";\necho double_the_difference(array(9, -2)) . \"\\n\";\necho\
    \ double_the_difference(array(0)) . \"\\n\";", "    return 0;\n}\n", "    $count\
    \ = 0;\n    foreach ($lst as $element) {\n        if (is_int($element) && $element\
    \ >= 0) {\n            if ($element % 2 == 1) {\n                $count += pow($element,\
    \ 2);\n            }\n        }\n    }\n    return $count;\n}\n", "    if(empty($lst))\
    \ {\n        return 0;\n    }\n    $res = 0;\n    foreach($lst as $el) {\n   \
    \     if(is_int($el) && $el > 0 && $el % 2 == 1) {\n            $res += $el *\
    \ $el;\n        }\n    }\n    return $res * 2;\n}", "    $sum = 0;\n    foreach\
    \ ($lst as $num) {\n        if (gettype($num) == \"integer\" && $num >= 0) {\n\
    \            if ($num % 2 == 1) {\n                $sum += $num * $num;\n    \
    \        }\n        }\n    }\n    return $sum;\n}", "    $return = 0;\n    if\
    \ (empty($lst)) {\n        return $return;\n    }\n    $return = array_sum(array_map(function($n)\
    \ {\n        if (is_int($n) && $n > 0) {\n            return pow($n, 2);\n   \
    \     }\n        return 0;\n    }, $lst));\n    return $return;\n}", "    $result\
    \ = array_filter($lst, function($item) {\n        return $item > 0 && is_int($item);\n\
    \    });\n    if (count($result) == 0) {\n        return 0;\n    }\n    $result\
    \ = array_map(function($item) {\n        return $item * $item;\n    }, $result);\n\
    \    return 2 * array_sum($result);\n}", "    $i = 0;\n    $new = array();\n \
    \   while ($i < count($lst)) {\n        if ($lst[$i] > 0 && $lst[$i] % 2 != 0)\
    \ {\n            array_push($new, $lst[$i]);\n        }\n        $i++;\n    }\n\
    \    $i = 0;\n    $sum = 0;\n    while ($i < count($new)) {\n        $sum += pow($new[$i],\
    \ 2);\n        $i++;\n    }\n    return $sum;\n}", "    if(empty($lst)) {\n  \
    \      return 0;\n    } else {\n        $odd_values = [];\n        foreach($lst\
    \ as $value) {\n            if($value > 0 && $value % 2 != 0) {\n            \
    \    array_push($odd_values, $value);\n            }\n        }\n        $sum\
    \ = 0;\n        foreach($odd_values as $value) {\n            $sum += pow($value,\
    \ 2);\n        }\n        return $sum * 2;\n    }\n}\necho double_the_difference([9,\
    \ -2]);\necho double_the_difference([1, 3, 2, 0]);\necho double_the_difference([-1,\
    \ -2, 0]);\necho double_the_difference([0]);", "  $ret = 0;\n  foreach ($lst as\
    \ $v) {\n    if ($v > 0 && is_int($v)) {\n      $ret += pow($v, 2);\n    }\n \
    \ }\n  return $ret;\n}\n", "    $sum = 0;\n    foreach ($lst as $item) {\n   \
    \     if ($item % 2 != 0 && is_int($item) && $item > 0) {\n            $sum +=\
    \ $item * $item;\n        }\n    }\n    return $sum;\n}\n", "\t$odds = [];\n\t\
    foreach ($lst as $value) {\n\t\tif ($value > 0 && $value % 2 != 0) {\n\t\t\tarray_push($odds,\
    \ $value);\n\t\t}\n\t}\n\t$sum = 0;\n\tforeach ($odds as $value) {\n\t\t$sum +=\
    \ $value ** 2;\n\t}\n\treturn $sum;\n}", "  // your code here\n}", "  $sum = 0;\n\
    \  foreach ($lst as $number) {\n    if (is_numeric($number) && $number > 0 &&\
    \ $number % 2 == 1) {\n      $sum += $number*$number;\n    }\n  }\n  return $sum;\n\
    }\n", "  $sum = 0;\n  foreach ($lst as $num) {\n    if (is_int($num) && $num >\
    \ 0) {\n      $sum += $num * $num;\n    }\n  }\n  return $sum * 2;\n}\n\necho\
    \ double_the_difference(array(1, 3, 2, 0));", "  $sum = 0;\n  $num = 0;\n  foreach\
    \ ($lst as $i) {\n    if (gettype($i) == \"integer\" && $i > 0) {\n      $sum\
    \ += pow($i, 2);\n      $num += 1;\n    }\n  }\n  if ($num == 0) {\n    return\
    \ 0;\n  }\n  else {\n    return $sum;\n  }\n}", "  $squares = array_map(function($n)\
    \ {\n    return $n * $n;\n  }, $lst);\n  $squares = array_filter($squares, function($n)\
    \ {\n    return $n > 0 && $n % 2 != 0;\n  });\n  $double = array_reduce($squares,\
    \ function($acc, $n) {\n    return $acc + $n;\n  }, 0);\n  return $double * 2;\n\
    }", "\tif (count($lst) == 0) {\n\t\treturn 0;\n\t}\n\t$sum = 0;\n\tforeach ($lst\
    \ as $n) {\n\t\tif (is_int($n) && $n > 0) {\n\t\t\t$sum += pow($n, 2);\n\t\t}\n\
    \t}\n\treturn $sum * 2;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
