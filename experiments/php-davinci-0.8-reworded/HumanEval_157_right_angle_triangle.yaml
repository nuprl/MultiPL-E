name: HumanEval_157_right_angle_triangle
language: php
prompt: "<?php\n// Given the lengths of the three sides of a triangle. Return true\
  \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled\
  \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
  // Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1,\
  \ 2, 3)\n// false\nfunction right_angle_triangle($a, $b, $c) {\n"
tests: "function candidate(...$args) {\n    return right_angle_triangle(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(3, 4, 5) !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(1, 2, 3) !== false) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(10, 6, 8) !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(2, 2, 2) !== false) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(7, 24, 25) !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(10, 5, 7) !== false) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(5, 12, 13) !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(15, 8, 17) !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(48, 55, 73) !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(1, 1, 1) !== false) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(2, 2, 10) !== false) { throw new Exception(\"\
  Test failed!\"); }\n}\n\ntest();"
completions: ["  // WRITE YOUR CODE HERE\n  if($a > $b && $a > $c){\n    if($b*$b\
    \ + $c*$c == $a*$a){\n      return true;\n    }\n  }\n  else if($b > $a && $b\
    \ > $c){\n    if($a*$a + $c*$c == $b*$b){\n      return true;\n    }\n  }\n  else\
    \ if($c > $a && $c > $b){\n    if($a*$a + $b*$b == $c*$c){\n      return true;\n\
    \    }\n  }\n  return false;\n}\n", "    $hypotenuse = max($a, $b, $c);\n    if\
    \ ($hypotenuse == $a) {\n        $a_squared = ($b * $b) + ($c * $c);\n       \
    \ $a_sqrt = sqrt($a_squared);\n        if ($a_sqrt == $a) {\n            return\
    \ true;\n        }\n    } elseif ($hypotenuse == $b) {\n        $b_squared = ($a\
    \ * $a) + ($c * $c);\n        $b_sqrt = sqrt($b_squared);\n        if ($b_sqrt\
    \ == $b) {\n            return true;\n        }\n    } elseif ($hypotenuse ==\
    \ $c) {\n        $c_squared = ($a * $a) + ($b * $b);\n        $c_sqrt = sqrt($c_squared);\n\
    \        if ($c_sqrt == $c) {\n            return true;\n        }\n    }\n  \
    \  return false;\n}\n", "  $triangle = [$a, $b, $c];\n  sort($triangle);\n  $pythag\
    \ = pow($triangle[0], 2) + pow($triangle[1], 2);\n  $hyp = pow($triangle[2], 2);\n\
    \  if ($pythag == $hyp) {\n    return true;\n  } else {\n    return false;\n \
    \ }\n}", "    // compare the square of each side to the sum of the other 2 sides\n\
    \    $sq_a = $a ** 2;\n    $sq_b = $b ** 2;\n    $sq_c = $c ** 2;\n    $sum_bc\
    \ = $b ** 2 + $c ** 2;\n    $sum_ac = $a ** 2 + $c ** 2;\n    $sum_ab = $a **\
    \ 2 + $b ** 2;\n    if ($sq_a == $sum_bc || $sq_b == $sum_ac || $sq_c == $sum_ab)\
    \ {\n        return true;\n    } else {\n        return false;\n    }\n}", " \
    \   if ($a > $b && $a > $c) {\n        if ($a*$a == $b*$b + $c*$c) {\n       \
    \     return true;\n        }\n    } elseif ($b > $a && $b > $c) {\n        if\
    \ ($b*$b == $a*$a + $c*$c) {\n            return true;\n        }\n    } elseif\
    \ ($c > $a && $c > $b) {\n        if ($c*$c == $a*$a + $b*$b) {\n            return\
    \ true;\n        }\n    } else {\n        return false;\n    }\n}\n\necho right_angle_triangle(3,\
    \ 4, 5) . \"\\n\";\necho right_angle_triangle(1, 2, 3) . \"\\n\";\necho right_angle_triangle(1,\
    \ 2, 2) . \"\\n\";\necho right_angle_triangle(4, 2, 5) . \"\\n\";\necho right_angle_triangle(2,\
    \ 3, 4) . \"\\n\";\necho right_angle_triangle(1, 2, 2) . \"\\n\";", "    $hypotenuse\
    \ = max($a, $b, $c);\n    $sides = [$a, $b, $c];\n    unset($sides[array_search($hypotenuse,\
    \ $sides)]);\n    return $hypotenuse ** 2 == ($sides[0] ** 2 + $sides[1] ** 2);\n\
    }", "}\n", "  $hypotenuse = sqrt(pow($a, 2) + pow($b, 2));\n  $side = sqrt(pow($a,\
    \ 2) + pow($c, 2));\n  $short = sqrt(pow($b, 2) + pow($c, 2));\n  if ($hypotenuse\
    \ === $c || $side === $b || $short === $a) {\n    return true;\n  } else {\n \
    \   return false;\n  }\n}", "  $a2 = $a * $a;\n  $b2 = $b * $b;\n  $c2 = $c *\
    \ $c;\n  if ($a2 + $b2 == $c2) {\n    return true;\n  } else if ($a2 + $c2 ==\
    \ $b2) {\n    return true;\n  } else if ($b2 + $c2 == $a2) {\n    return true;\n\
    \  } else {\n    return false;\n  }\n}\n\necho right_angle_triangle(1, 2, 3) .\
    \ PHP_EOL;\necho right_angle_triangle(3, 4, 5) . PHP_EOL;\necho right_angle_triangle(5,\
    \ 12, 13) . PHP_EOL;\necho right_angle_triangle(6, 8, 10) . PHP_EOL;", "    if\
    \ ((($a * $a) + ($b * $b)) == ($c * $c)) {\n        return true;\n    } else {\n\
    \        return false;\n    }\n}\necho \"Right angle triangle of (3, 4, 5): \"\
    \ . \n        (right_angle_triangle(3, 4, 5) ? \"true\" : \"false\") . \"\\n\"\
    ;\necho \"Right angle triangle of (1, 2, 3): \" . \n        (right_angle_triangle(1,\
    \ 2, 3) ? \"true\" : \"false\") . \"\\n\";\n", "    $sides = array($a, $b, $c);\n\
    \    sort($sides);\n    $a = $sides[0];\n    $b = $sides[1];\n    $c = $sides[2];\n\
    \    if ($a + $b > $c) {\n        return true;\n    } else {\n        return false;\n\
    \    }\n}\n", "    if($a > $b && $a > $c) {\n        if($a * $a == $b * $b + $c\
    \ * $c)\n            return true;\n    }\n    else if($b > $a && $b > $c) {\n\
    \        if($b * $b == $a * $a + $c * $c)\n            return true;\n    }\n \
    \   else if($c > $a && $c > $b) {\n        if($c * $c == $a * $a + $b * $b)\n\
    \            return true;\n    }\n    return false;\n}\n", "    if ($a <= 0 ||\
    \ $b <= 0 || $c <= 0) {\n        return false;\n    }\n    return pow($a, 2) +\
    \ pow($b, 2) == pow($c, 2) || pow($a, 2) + pow($c, 2) == pow($b, 2) || pow($b,\
    \ 2) + pow($c, 2) == pow($a, 2);\n}\n", "\t$sides = [$a, $b, $c];\n\tsort($sides);\n\
    \tif ($sides[0] + $sides[1] < $sides[2]) {\n\t\treturn false;\n\t}\n\t$hyp = $sides[2];\n\
    \t$x = $sides[0];\n\t$y = $sides[1];\n\tif ($hyp ** 2 == $x ** 2 + $y ** 2) {\n\
    \t\treturn true;\n\t}\n\treturn false;\n}", "    // TODO\n}", "\t$max_number =\
    \ max($a, $b, $c);\n\t$min_number = min($a, $b, $c);\n\tif ($max_number == $a)\
    \ {\n\t\t$middle_number = $b;\n\t} elseif ($max_number == $b) {\n\t\t$middle_number\
    \ = $a;\n\t} else {\n\t\t$middle_number = $a;\n\t}\n\tif ((pow($max_number, 2)\
    \ == pow($middle_number, 2) + pow($min_number, 2)) ||\n\t\t(pow($min_number, 2)\
    \ == pow($middle_number, 2) + pow($max_number, 2))) {\n\t\treturn true;\n\t} else\
    \ {\n\t\treturn false;\n\t}\n}\n", "  if ($a > $b && $a > $c) {\n    if ($a*$a\
    \ == $b*$b + $c*$c) {\n      return true;\n    }\n  } else if ($b > $a && $b >\
    \ $c) {\n    if ($b*$b == $a*$a + $c*$c) {\n      return true;\n    }\n  } else\
    \ if ($c > $a && $c > $b) {\n    if ($c*$c == $a*$a + $b*$b) {\n      return true;\n\
    \    }\n  }\n  return false;\n}\necho right_angle_triangle(3, 4, 5) . \"\\n\"\
    ;\necho right_angle_triangle(1, 2, 3) . \"\\n\";", "  // if the square of hypotenuse\
    \ is equal to the sum of squares of other two sides\n  // of a triangle. The triangle\
    \ is a right angled triangle.\n  return $a*$a + $b*$b == $c*$c;\n}\n\necho right_angle_triangle(3,\
    \ 4, 5) ? \"true\\n\" : \"false\\n\";\necho right_angle_triangle(1, 2, 3) ? \"\
    true\\n\" : \"false\\n\";", "\t$side1 = pow($a, 2);\n\t$side2 = pow($b, 2);\n\t\
    $side3 = pow($c, 2);\n\tif($side1 + $side2 == $side3 || $side1 + $side3 == $side2\
    \ || $side2 + $side3 == $side1) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\
    \t}\n}\n", "    $hyp = max(max($a, $b), $c);\n    $sq1 = ($a == $hyp) ? $b : $a;\n\
    \    $sq2 = ($c == $hyp) ? $b : $c;\n    $result = ($sq1 ** 2) + ($sq2 ** 2);\n\
    \    return ($result == $hyp ** 2);\n}"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
