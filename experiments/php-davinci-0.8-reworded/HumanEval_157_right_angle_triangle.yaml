name: HumanEval_157_right_angle_triangle
language: php
prompt: "<?php\n// Given the lengths of the three sides of a triangle. Return true\
  \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled\
  \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
  // Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1,\
  \ 2, 3)\n// false\nfunction right_angle_triangle($a, $b, $c) {\n"
tests: "function candidate(...$args) {\n    return right_angle_triangle(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(3, 4, 5) !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(1, 2, 3) !== false) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(10, 6, 8) !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(2, 2, 2) !== false) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(7, 24, 25) !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(10, 5, 7) !== false) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(5, 12, 13) !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(15, 8, 17) !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(48, 55, 73) !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(1, 1, 1) !== false) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(2, 2, 10) !== false) { throw new Exception(\"\
  Test failed!\"); }\n}\n\ntest();"
completions: ["  // WRITE YOUR CODE HERE\n  if($a > $b && $a > $c){\n    if($b*$b\
    \ + $c*$c == $a*$a){\n      return true;\n    }\n  }\n  else if($b > $a && $b\
    \ > $c){\n    if($a*$a + $c*$c == $b*$b){\n      return true;\n    }\n  }\n  else\
    \ if($c > $a && $c > $b){\n    if($a*$a + $b*$b == $c*$c){\n      return true;\n\
    \    }\n  }\n  return false;\n}\n", "    $hypotenuse = max($a, $b, $c);\n    if\
    \ ($hypotenuse == $a) {\n        $a_squared = ($b * $b) + ($c * $c);\n       \
    \ $a_sqrt = sqrt($a_squared);\n        if ($a_sqrt == $a) {\n            return\
    \ true;\n        }\n    } elseif ($hypotenuse == $b) {\n        $b_squared = ($a\
    \ * $a) + ($c * $c);\n        $b_sqrt = sqrt($b_squared);\n        if ($b_sqrt\
    \ == $b) {\n            return true;\n        }\n    } elseif ($hypotenuse ==\
    \ $c) {\n        $c_squared = ($a * $a) + ($b * $b);\n        $c_sqrt = sqrt($c_squared);\n\
    \        if ($c_sqrt == $c) {\n            return true;\n        }\n    }\n  \
    \  return false;\n}\n", "  $triangle = [$a, $b, $c];\n  sort($triangle);\n  $pythag\
    \ = pow($triangle[0], 2) + pow($triangle[1], 2);\n  $hyp = pow($triangle[2], 2);\n\
    \  if ($pythag == $hyp) {\n    return true;\n  } else {\n    return false;\n \
    \ }\n}", "    // compare the square of each side to the sum of the other 2 sides\n\
    \    $sq_a = $a ** 2;\n    $sq_b = $b ** 2;\n    $sq_c = $c ** 2;\n    $sum_bc\
    \ = $b ** 2 + $c ** 2;\n    $sum_ac = $a ** 2 + $c ** 2;\n    $sum_ab = $a **\
    \ 2 + $b ** 2;\n    if ($sq_a == $sum_bc || $sq_b == $sum_ac || $sq_c == $sum_ab)\
    \ {\n        return true;\n    } else {\n        return false;\n    }\n}", " \
    \   if ($a > $b && $a > $c) {\n        if ($a*$a == $b*$b + $c*$c) {\n       \
    \     return true;\n        }\n    } elseif ($b > $a && $b > $c) {\n        if\
    \ ($b*$b == $a*$a + $c*$c) {\n            return true;\n        }\n    } elseif\
    \ ($c > $a && $c > $b) {\n        if ($c*$c == $a*$a + $b*$b) {\n            return\
    \ true;\n        }\n    } else {\n        return false;\n    }\n}\n\necho right_angle_triangle(3,\
    \ 4, 5) . \"\\n\";\necho right_angle_triangle(1, 2, 3) . \"\\n\";\necho right_angle_triangle(1,\
    \ 2, 2) . \"\\n\";\necho right_angle_triangle(4, 2, 5) . \"\\n\";\necho right_angle_triangle(2,\
    \ 3, 4) . \"\\n\";\necho right_angle_triangle(1, 2, 2) . \"\\n\";", "    $hypotenuse\
    \ = max($a, $b, $c);\n    $sides = [$a, $b, $c];\n    unset($sides[array_search($hypotenuse,\
    \ $sides)]);\n    return $hypotenuse ** 2 == ($sides[0] ** 2 + $sides[1] ** 2);\n\
    }", "}\n", "  $hypotenuse = sqrt(pow($a, 2) + pow($b, 2));\n  $side = sqrt(pow($a,\
    \ 2) + pow($c, 2));\n  $short = sqrt(pow($b, 2) + pow($c, 2));\n  if ($hypotenuse\
    \ === $c || $side === $b || $short === $a) {\n    return true;\n  } else {\n \
    \   return false;\n  }\n}", "  $a2 = $a * $a;\n  $b2 = $b * $b;\n  $c2 = $c *\
    \ $c;\n  if ($a2 + $b2 == $c2) {\n    return true;\n  } else if ($a2 + $c2 ==\
    \ $b2) {\n    return true;\n  } else if ($b2 + $c2 == $a2) {\n    return true;\n\
    \  } else {\n    return false;\n  }\n}\n\necho right_angle_triangle(1, 2, 3) .\
    \ PHP_EOL;\necho right_angle_triangle(3, 4, 5) . PHP_EOL;\necho right_angle_triangle(5,\
    \ 12, 13) . PHP_EOL;\necho right_angle_triangle(6, 8, 10) . PHP_EOL;", "    if\
    \ ((($a * $a) + ($b * $b)) == ($c * $c)) {\n        return true;\n    } else {\n\
    \        return false;\n    }\n}\necho \"Right angle triangle of (3, 4, 5): \"\
    \ . \n        (right_angle_triangle(3, 4, 5) ? \"true\" : \"false\") . \"\\n\"\
    ;\necho \"Right angle triangle of (1, 2, 3): \" . \n        (right_angle_triangle(1,\
    \ 2, 3) ? \"true\" : \"false\") . \"\\n\";\n", "    $sides = array($a, $b, $c);\n\
    \    sort($sides);\n    $a = $sides[0];\n    $b = $sides[1];\n    $c = $sides[2];\n\
    \    if ($a + $b > $c) {\n        return true;\n    } else {\n        return false;\n\
    \    }\n}\n", "    if($a > $b && $a > $c) {\n        if($a * $a == $b * $b + $c\
    \ * $c)\n            return true;\n    }\n    else if($b > $a && $b > $c) {\n\
    \        if($b * $b == $a * $a + $c * $c)\n            return true;\n    }\n \
    \   else if($c > $a && $c > $b) {\n        if($c * $c == $a * $a + $b * $b)\n\
    \            return true;\n    }\n    return false;\n}\n", "    if ($a <= 0 ||\
    \ $b <= 0 || $c <= 0) {\n        return false;\n    }\n    return pow($a, 2) +\
    \ pow($b, 2) == pow($c, 2) || pow($a, 2) + pow($c, 2) == pow($b, 2) || pow($b,\
    \ 2) + pow($c, 2) == pow($a, 2);\n}\n", "\t$sides = [$a, $b, $c];\n\tsort($sides);\n\
    \tif ($sides[0] + $sides[1] < $sides[2]) {\n\t\treturn false;\n\t}\n\t$hyp = $sides[2];\n\
    \t$x = $sides[0];\n\t$y = $sides[1];\n\tif ($hyp ** 2 == $x ** 2 + $y ** 2) {\n\
    \t\treturn true;\n\t}\n\treturn false;\n}", "    // TODO\n}", "\t$max_number =\
    \ max($a, $b, $c);\n\t$min_number = min($a, $b, $c);\n\tif ($max_number == $a)\
    \ {\n\t\t$middle_number = $b;\n\t} elseif ($max_number == $b) {\n\t\t$middle_number\
    \ = $a;\n\t} else {\n\t\t$middle_number = $a;\n\t}\n\tif ((pow($max_number, 2)\
    \ == pow($middle_number, 2) + pow($min_number, 2)) ||\n\t\t(pow($min_number, 2)\
    \ == pow($middle_number, 2) + pow($max_number, 2))) {\n\t\treturn true;\n\t} else\
    \ {\n\t\treturn false;\n\t}\n}\n", "  if ($a > $b && $a > $c) {\n    if ($a*$a\
    \ == $b*$b + $c*$c) {\n      return true;\n    }\n  } else if ($b > $a && $b >\
    \ $c) {\n    if ($b*$b == $a*$a + $c*$c) {\n      return true;\n    }\n  } else\
    \ if ($c > $a && $c > $b) {\n    if ($c*$c == $a*$a + $b*$b) {\n      return true;\n\
    \    }\n  }\n  return false;\n}\necho right_angle_triangle(3, 4, 5) . \"\\n\"\
    ;\necho right_angle_triangle(1, 2, 3) . \"\\n\";", "  // if the square of hypotenuse\
    \ is equal to the sum of squares of other two sides\n  // of a triangle. The triangle\
    \ is a right angled triangle.\n  return $a*$a + $b*$b == $c*$c;\n}\n\necho right_angle_triangle(3,\
    \ 4, 5) ? \"true\\n\" : \"false\\n\";\necho right_angle_triangle(1, 2, 3) ? \"\
    true\\n\" : \"false\\n\";", "\t$side1 = pow($a, 2);\n\t$side2 = pow($b, 2);\n\t\
    $side3 = pow($c, 2);\n\tif($side1 + $side2 == $side3 || $side1 + $side3 == $side2\
    \ || $side2 + $side3 == $side1) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\
    \t}\n}\n", "    $hyp = max(max($a, $b), $c);\n    $sq1 = ($a == $hyp) ? $b : $a;\n\
    \    $sq2 = ($c == $hyp) ? $b : $c;\n    $result = ($sq1 ** 2) + ($sq2 ** 2);\n\
    \    return ($result == $hyp ** 2);\n}", "    $sides = array($a, $b, $c);\n  \
    \  sort($sides);\n    $c = array_pop($sides);\n    $b = array_pop($sides);\n \
    \   $a = array_pop($sides);\n    if ($a * $a + $b * $b == $c * $c) {\n       \
    \ return true;\n    } else {\n        return false;\n    }\n}", "\n}\n\n$triangle1\
    \ = right_angle_triangle(3, 4, 5);\nvar_dump($triangle1); // true\n\n$triangle2\
    \ = right_angle_triangle(1, 2, 3);\nvar_dump($triangle2); // false\n\n$triangle3\
    \ = right_angle_triangle(3, 4, 8);\nvar_dump($triangle3); // false\n\n$triangle4\
    \ = right_angle_triangle(3, 4, 6);\nvar_dump($triangle4); // false\n\n$triangle5\
    \ = right_angle_triangle(5, 12, 13);\nvar_dump($triangle5); // true\n\n$triangle6\
    \ = right_angle_triangle(5, 12, 15);\nvar_dump($triangle6); // false\n\n$triangle7\
    \ = right_angle_triangle(7, 24, 25);\nvar_dump($triangle7); // true\n\n$triangle8\
    \ = right_angle_triangle(7, 24, 26);\nvar_dump($triangle8); // false\n\n$triangle9\
    \ = right_angle_triangle(7, 24, 30);\nvar_dump($triangle9); // false\n\n$triangle10\
    \ = right_angle_triangle(8, 15, 17);\nvar_dump($triangle10); // true\n\n$triangle11\
    \ = right_angle_triangle(8, 15, 18);\nvar_dump($triangle11); // false\n\n$triangle12\
    \ = right_angle_triangle(8, 15, 19);\nvar_dump($triangle12); // false\n\n$triangle13\
    \ = right_angle_triangle(8, 15, 20);\nvar_dump($triangle13); // false\n\n$triangle14\
    \ = right_angle_triangle(11, 60, 61);\nvar_dump($triangle14); // true\n\n$triangle15\
    \ = right_angle_triangle(12, 35, 37);\nvar_dump($triangle15); // true\n\n$triangle16\
    \ = right_angle_triangle(12, 35, 38);\nvar_dump($triangle16); // false\n\n$triangle17\
    \ = right_angle_triangle", "    $squares = [$a * $a, $b * $b, $c * $c];\n    rsort($squares);\n\
    \    if ($squares[0] == ($squares[1] + $squares[2])) {\n        return true;\n\
    \    }\n    return false;\n}\n\n$tests = [\n    [\n        'input' => [3, 4, 5],\n\
    \        'expected' => true\n    ],\n    [\n        'input' => [1, 2, 3],\n  \
    \      'expected' => false\n    ],\n    [\n        'input' => [5, 12, 13],\n \
    \       'expected' => true\n    ],\n    [\n        'input' => [8, 15, 17],\n \
    \       'expected' => true\n    ],\n    [\n        'input' => [7, 24, 25],\n \
    \       'expected' => true\n    ],\n    [\n        'input' => [13, 84, 85],\n\
    \        'expected' => true\n    ],\n    [\n        'input' => [15, 225, 240],\n\
    \        'expected' => true\n    ],\n    [\n        'input' => [9, 40, 41],\n\
    \        'expected' => true\n    ],\n    [\n        'input' => [12, 35, 37],\n\
    \        'expected' => true\n    ],\n    [\n        'input' => [11, 60, 61],\n\
    \        'expected' => true\n    ],\n    [\n        'input' => [16, 63, 65],\n\
    \        'expected' => true\n    ],\n    [\n        'input' => [33, 56, 65],\n\
    \        'expected' => true\n    ],\n    [\n        'input' => [48, 55, 73],\n\
    \        'expected' => true\n    ],\n    [\n        'input' => [20, 21, 29],\n\
    \        'expected' => true\n    ],\n    [\n        'input' => [11, 20, 34],\n\
    \        'expected' => false\n    ],\n    [\n        'input' => [3, 7, 16],\n\
    \        'expected' => false\n    ],\n    [\n        'input' => [1, 1, 1],\n",
  "    if (($a * $a) + ($b * $b) == ($c * $c)) {\n        return true;\n    }\n  \
    \  else {\n        return false;\n    }\n}\n\necho right_angle_triangle(3, 4,\
    \ 5) . \"\\n\";\necho right_angle_triangle(1, 2, 3) . \"\\n\";", "  // Write your\
    \ code here\n}\n", "  $hypotenuse = max($a, $b, $c);\n  $adjacent = min($a, $b,\
    \ $c);\n  $opposite = ($a + $b + $c) - $hypotenuse - $adjacent;\n  if (($hypotenuse\
    \ ** 2) == ($adjacent ** 2) + ($opposite ** 2)) {\n    return true;\n  } else\
    \ {\n    return false;\n  }\n}\n\necho right_angle_triangle(1, 2, 3);\necho \"\
    \\n\";\necho right_angle_triangle(3, 4, 5);\necho \"\\n\";", "    $right = false;\n\
    \    $largest_side = max(array($a, $b, $c));\n    $remaining_sides = array($a,\
    \ $b, $c);\n    unset($remaining_sides[array_search($largest_side, $remaining_sides)]);\n\
    \    $sum_remaining_sides = array_sum($remaining_sides);\n    if ($largest_side\
    \ * $largest_side == $sum_remaining_sides * $sum_remaining_sides) {\n        $right\
    \ = true;\n    }\n    return $right;\n}\n", "  // Write code here...\n}\n", " \
    \   $hypotenuse = max($a, $b, $c);\n    $cathetus1 = min($a, $b, $c);\n    $cathetus2\
    \ = $a + $b + $c - $hypotenuse - $cathetus1;\n    return pow($hypotenuse, 2) ==\
    \ pow($cathetus1, 2) + pow($cathetus2, 2);\n}\necho right_angle_triangle(3, 4,\
    \ 5) . \"\\n\";\necho right_angle_triangle(1, 2, 3) . \"\\n\";", "}\n", "  //\
    \ Write your code here\n  $sides = [$a, $b, $c];\n  sort($sides);\n  // Pythagorean\
    \ Theorem\n  // a^2 + b^2 = c^2\n  // $sides[0]^2 + $sides[1]^2 = $sides[2]^2\n\
    \  if (($sides[0]**2 + $sides[1]**2) == $sides[2]**2) {\n    return true;\n  }\n\
    \  return false;\n}", "   $hypotenuse = max($a, $b, $c);\n   $a_squared = $a **\
    \ 2;\n   $b_squared = $b ** 2;\n   $c_squared = $c ** 2;\n   if($hypotenuse ==\
    \ $a) {\n      return $b_squared + $c_squared == $a_squared;\n   } else if($hypotenuse\
    \ == $b) {\n      return $a_squared + $c_squared == $b_squared;\n   } else {\n\
    \      return $a_squared + $b_squared == $c_squared;\n   }\n}\n", "    // your\
    \ code here\n    if(($a * $a) + ($b * $b) == ($c * $c)){\n        return true;\n\
    \    }else if(($a * $a) + ($c * $c) == ($b * $b)){\n        return true;\n   \
    \ }else if(($b * $b) + ($c * $c) == ($a * $a)){\n        return true;\n    }else{\n\
    \        return false;\n    }\n}", "    if ($a <= 0 || $b <= 0 || $c <= 0) {\n\
    \        return false;\n    }\n\n    $arr = [$a, $b, $c];\n    sort($arr);\n \
    \   [$a, $b, $c] = $arr;\n\n    return $a * $a + $b * $b == $c * $c;\n}\n\n$inputs\
    \ = [\n    [3, 4, 5],\n    [1, 2, 3],\n    [10, 5, 5],\n    [5, 5, 10],\n    [5,\
    \ 10, 5],\n    [5, 5, 5],\n    [5, 5, 9],\n    [0, 0, 0],\n    [0, 0, 1],\n  \
    \  [1, 0, 0],\n    [0, 1, 0],\n    [0, 0, -1],\n    [-1, 0, 0],\n    [0, -1, 0],\n\
    \    [0, 0, 2147483647],\n    [2147483647, 0, 0],\n    [0, 2147483647, 0],\n \
    \   [2147483647, 2147483647, 2147483647],\n    [2147483647, 2147483647, 2147483648],\n\
    \    [2147483648, 2147483647, 2147483647],\n    [2147483647, 2147483648, 2147483647],\n\
    \    [2147483647, 2147483647, 2147483649],\n    [2147483649, 2147483647, 2147483647],\n\
    \    [2147483647, 2147483649, 2147483647],\n    [1, 2147483647, 2147483647],\n\
    \    [2147483647, 1, 2147483647],\n    [2147483647, 2147483647, 1],\n    [2147483648,\
    \ 2147483647, 2147483647],\n    [2147483647, 2147483648, 2147483647],\n    [2147483647,\
    \ 2147", "  $triangle = [$a, $b, $c];\n  sort($triangle);\n  $a = $triangle[0];\n\
    \  $b = $triangle[1];\n  $c = $triangle[2];\n  $sumOfSquares = $a * $a + $b *\
    \ $b;\n  $squareOfHypotenuse = $c * $c;\n  if ($sumOfSquares == $squareOfHypotenuse)\
    \ {\n    return true;\n  } else {\n    return false;\n  }\n}", "\n}\n", "  $hypotenuse\
    \ = max($a, $b, $c);\n  $triangle_sides = array($a, $b, $c);\n  $triangle_sides_squared\
    \ = array_map(function($side) {\n    return pow($side, 2);\n  }, $triangle_sides);\n\
    \  $sum_of_other_sides_squared = array_sum($triangle_sides_squared) - pow($hypotenuse,\
    \ 2);\n  return $sum_of_other_sides_squared == pow($hypotenuse, 2);\n}\n", " \
    \   $sides = array($a, $b, $c);\n    sort($sides);\n    $a = $sides[0];\n    $b\
    \ = $sides[1];\n    $c = $sides[2];\n    return pow($a, 2) + pow($b, 2) == pow($c,\
    \ 2);\n}\n\necho right_angle_triangle(3, 4, 5);", "    // Your code here\n}\n\
    echo right_angle_triangle(3, 4, 5) . PHP_EOL;\necho right_angle_triangle(1, 2,\
    \ 3) . PHP_EOL;", "  $hypotenuse = 0;\n  $side1 = 0;\n  $side2 = 0;\n  if ($a\
    \ > $b && $a > $c) {\n    $hypotenuse = $a;\n    $side1 = $b;\n    $side2 = $c;\n\
    \  } else if ($b > $a && $b > $c) {\n    $hypotenuse = $b;\n    $side1 = $a;\n\
    \    $side2 = $c;\n  } else {\n    $hypotenuse = $c;\n    $side1 = $a;\n    $side2\
    \ = $b;\n  }\n  return (($side1 * $side1) + ($side2 * $side2)) == ($hypotenuse\
    \ * $hypotenuse);\n}\n", "    $hypotenuse = 0;\n    $side1 = 0;\n    $side2 =\
    \ 0;\n    if ($a >= $b && $a >= $c) {\n        $hypotenuse = $a;\n        $side1\
    \ = $b;\n        $side2 = $c;\n    } else if ($b >= $a && $b >= $c) {\n      \
    \  $hypotenuse = $b;\n        $side1 = $a;\n        $side2 = $c;\n    } else {\n\
    \        $hypotenuse = $c;\n        $side1 = $a;\n        $side2 = $b;\n    }\n\
    \    if ($hypotenuse * $hypotenuse == $side1 * $side1 + $side2 * $side2) {\n \
    \       return true;\n    } else {\n        return false;\n    }\n}\necho right_angle_triangle(2,\
    \ 3, 4) ? \"true\\n\" : \"false\\n\";", "  $hypotenuse = get_max_side($a, $b,\
    \ $c);\n  return $hypotenuse * $hypotenuse == ($a * $a + $b * $b + $c * $c - $hypotenuse\
    \ * $hypotenuse);\n}\n", "  $largest = max($a, $b, $c);\n  $smaller = array_diff([$a,\
    \ $b, $c], [$largest]);\n  $sumOfSquares = array_reduce($smaller, function($carry,\
    \ $item) {\n    return $carry + pow($item, 2);\n  }, 0);\n  return $sumOfSquares\
    \ == pow($largest, 2);\n}", "  if($a > $b && $a > $c){\n    return pow($b, 2)\
    \ + pow($c, 2) == pow($a, 2);\n  } elseif($b > $a && $b > $c){\n    return pow($a,\
    \ 2) + pow($c, 2) == pow($b, 2);\n  } else {\n    return pow($a, 2) + pow($b,\
    \ 2) == pow($c, 2);\n  }\n}", "    $max = max($a, $b, $c);\n    $hyp = pow($max,\
    \ 2);\n    $per = $a + $b + $c - $max;\n    $cat = pow($per, 2);\n    if ($hyp\
    \ == $cat) {\n        return true;\n    } else {\n        return false;\n    }\n\
    }", "\t$hypotenuse = max($a, $b, $c);\n\tif ($hypotenuse == $a) {\n\t\t$adjacent\
    \ = $b;\n\t\t$opposite = $c;\n\t} elseif ($hypotenuse == $b) {\n\t\t$adjacent\
    \ = $a;\n\t\t$opposite = $c;\n\t} else {\n\t\t$adjacent = $a;\n\t\t$opposite =\
    \ $b;\n\t}\n\treturn ($hypotenuse**2 == $adjacent**2 + $opposite**2);\n}\n", " \
    \ // WRITE YOUR CODE HERE\n}\n", "\t$sides = array($a, $b, $c);\n\t// use in_array\
    \ to return the key of the largest value in the array\n\t$hyp = array_search(max($sides),\
    \ $sides);\n\t// use the key to find the other two sides (pythagorean theorem)\n\
    \tif ($sides[$hyp] ** 2 == $sides[($hyp + 1) % 3] ** 2 + $sides[($hyp + 2) % 3]\
    \ ** 2) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\necho right_angle_triangle(3,\
    \ 4, 5) . PHP_EOL;\necho right_angle_triangle(1, 2, 3) . PHP_EOL;", "    // Write\
    \ your code here\n}", "  $temp = array($a, $b, $c);\n  sort($temp);\n  list($a,\
    \ $b, $c) = $temp;\n  return pow($a, 2) + pow($b, 2) == pow($c, 2);\n}\necho right_angle_triangle(3,\
    \ 4, 5) . \"\\n\";\necho right_angle_triangle(1, 2, 3) . \"\\n\";\n", "    //\
    \ you code here\n}\n\n$test = [\n    [3, 4, 5], [1, 2, 3], [6, 8, 10], [11, 60,\
    \ 61], [0, 0, 0], [3, 3, 3], [3, 0, 0], [0, 4, 0], [0, 0, 5]\n];\nforeach ($test\
    \ as $key => $value) {\n    var_dump(right_angle_triangle($value[0], $value[1],\
    \ $value[2]));\n}", "  // IMPLEMENT ME\n}", "  if ($a == sqrt(pow($b, 2) + pow($c,\
    \ 2)) ||\n      $b == sqrt(pow($a, 2) + pow($c, 2)) ||\n      $c == sqrt(pow($a,\
    \ 2) + pow($b, 2))) {\n    return true;\n  }\n  return false;\n}\necho right_angle_triangle(1,\
    \ 2, 3) . \"\\n\";\necho right_angle_triangle(3, 4, 5) . \"\\n\";", "  $sides\
    \ = array($a, $b, $c);\n  rsort($sides);\n  list($a, $b, $c) = $sides;\n  return\
    \ pow($a, 2) == pow($b, 2) + pow($c, 2);\n}\necho right_angle_triangle(3, 4, 5)\
    \ . PHP_EOL; // true\necho right_angle_triangle(1, 2, 3) . PHP_EOL; // false",
  "    if ($a == 90 || $b == 90 || $c == 90) {\n        return true;\n    }\n    else\
    \ {\n        return false;\n    }\n}\nprint right_angle_triangle(3, 4, 5) . \"\
    \\n\";\nprint right_angle_triangle(1, 2, 3) . \"\\n\";\nprint right_angle_triangle(90,\
    \ 4, 5) . \"\\n\";", "\t// Write your code here\n}", "    if ($a > $b && $a >\
    \ $c) {\n        if ($b * $b + $c * $c == $a * $a) {\n            return true;\n\
    \        }\n    } else if ($b > $a && $b > $c) {\n        if ($a * $a + $c * $c\
    \ == $b * $b) {\n            return true;\n        }\n    } else if ($c > $a &&\
    \ $c > $b) {\n        if ($a * $a + $b * $b == $c * $c) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\n", "  $a_squared = $a * $a;\n\
    \  $b_squared = $b * $b;\n  $c_squared = $c * $c;\n  if ($a_squared + $b_squared\
    \ == $c_squared || $a_squared + $c_squared == $b_squared || $b_squared + $c_squared\
    \ == $a_squared) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n\
    echo right_angle_triangle(3, 4, 5) . PHP_EOL;\necho right_angle_triangle(1, 2,\
    \ 3) . PHP_EOL;", "    // WRITE YOUR CODE HERE\n    // USE (^) EXPONENTIATION\
    \ OPERATOR\n    $arr = [$a, $b, $c];\n    sort($arr);\n    $c = end($arr);\n \
    \   $a = reset($arr);\n    $b = array_pop($arr);\n    if($c*$c === $a*$a + $b*$b){\n\
    \        return true;\n    }\n    return false;\n}", "\t// TODO\n}", "    if ($a\
    \ == sqrt(pow($b, 2) + pow($c, 2)) || $b == sqrt(pow($a, 2) + pow($c, 2)) || $c\
    \ == sqrt(pow($a, 2) + pow($b, 2))) {\n        return true;\n    }\n    return\
    \ false;\n}\n\nif (right_angle_triangle(3, 4, 5)) {\n    echo \"true\\n\";\n}\
    \ else {\n    echo \"false\\n\";\n}\n\nif (right_angle_triangle(1, 2, 3)) {\n\
    \    echo \"true\\n\";\n} else {\n    echo \"false\\n\";\n}", "  $result = ($a\
    \ * $a) + ($b * $b);\n  $c_squared = $c * $c;\n  return $result == $c_squared;\n\
    }\n", "  $a = pow($a, 2);\n  $b = pow($b, 2);\n  $c = pow($c, 2);\n  if ($a +\
    \ $b == $c) {\n    return true;\n  } elseif ($a + $c == $b) {\n    return true;\n\
    \  } elseif ($b + $c == $a) {\n    return true;\n  } else {\n    return false;\n\
    \  }\n}\n", "\t\n}", "  if (($a ** 2) + ($b ** 2) == ($c ** 2)) {\n    return\
    \ true;\n  } elseif (($a ** 2) + ($c ** 2) == ($b ** 2)) {\n    return true;\n\
    \  } elseif (($b ** 2) + ($c ** 2) == ($a ** 2)) {\n    return true;\n  } else\
    \ {\n    return false;\n  }\n}\n", "    if (pow($a, 2) + pow($b, 2) == pow($c,\
    \ 2)) {\n        return \"true\";\n    } else {\n        return \"false\";\n \
    \   }\n}", "    if ($a == $b && $b == $c) {\n        return false;\n    } elseif\
    \ ($a > $b && $a > $c) {\n        return ($a * $a == $b * $b + $c * $c);\n   \
    \ } elseif ($b > $a && $b > $c) {\n        return ($b * $b == $a * $a + $c * $c);\n\
    \    } else {\n        return ($c * $c == $a * $a + $b * $b);\n    }\n}\n\n$i\
    \ = 0;\n$tests = array(\n    array(3, 4, 5, true),\n    array(1, 2, 3, false),\n\
    \    array(3, 3, 3, false),\n    array(1, 2, sqrt(5), true),\n    array(12, 5,\
    \ 13, true),\n    array(5, 12, 13, true),\n    array(0, 0, 0, false),\n    array(1,\
    \ 1, 1, false),\n    array(5, 5, 5, false),\n    array(0, 0, 1, false),\n    array(0,\
    \ 1, 0, false),\n    array(1, 0, 0, false),\n    array(1, 0, 1, false),\n    array(0,\
    \ 1, 1, false),\n    array(1, 1, 0, false),\n    array(0, 1, 2, false),\n    array(1,\
    \ 0, 2, false),\n    array(1, 2, 0, false),\n    array(1, 1, 2, false),\n    array(1,\
    \ 2, 1, false),\n    array(2, 1, 1, false),\n    array(2, 1, 2, false),\n    array(2,\
    \ 2, 1, false),\n    array(2, 2, 2, false),\n    array(1, 2, 3, false),\n    array(2,\
    \ 1, 3, false),\n    array(2, 3, 1, false),\n    array(1, 3, 2, false),\n    array(3,\
    \ 1, 2, false),\n    array(3, 2, 1, false),\n    array(3,", "    if ($a > $b &&\
    \ $a > $c) {\n        $max = $a;\n        $s1 = $b;\n        $s2 = $c;\n    }\
    \ else if ($b > $a && $b > $c) {\n        $max = $b;\n        $s1 = $a;\n    \
    \    $s2 = $c;\n    } else {\n        $max = $c;\n        $s1 = $a;\n        $s2\
    \ = $b;\n    }\n    if ($max**2 == $s1**2 + $s2**2) {\n        return true;\n\
    \    } else {\n        return false;\n    }\n}", "  $sides = array($a, $b, $c);\n\
    \  sort($sides);\n  if ($sides[0] * $sides[0] + $sides[1] * $sides[1] == $sides[2]\
    \ * $sides[2]) {\n    return true;\n  }\n  return false;\n}\n$input = array(3,\
    \ 4, 5);\nvar_dump(right_angle_triangle($input[0], $input[1], $input[2]));\n$input\
    \ = array(1, 2, 3);\nvar_dump(right_angle_triangle($input[0], $input[1], $input[2]));",
  "  // Write code here\n}\n", "  $longest_side = max(array($a, $b, $c));\n  $shortest_side\
    \ = min(array($a, $b, $c));\n  $middle_side = array_sum(array($a, $b, $c)) - $longest_side\
    \ - $shortest_side;\n  if ($longest_side * $longest_side == $shortest_side * $shortest_side\
    \ + $middle_side * $middle_side) {\n    return true;\n  } else {\n    return false;\n\
    \  }\n}", "    // WRITE YOUR CODE HERE\n    if ($a === $b && $b === $c) {\n  \
    \      return false;\n    } else if ($a > $b && $a > $c) {\n        return $a\
    \ * $a === $b * $b + $c * $c;\n    } else if ($b > $a && $b > $c) {\n        return\
    \ $b * $b === $a * $a + $c * $c;\n    } else {\n        return $c * $c === $a\
    \ * $a + $b * $b;\n    }\n}\n$result = right_angle_triangle(3, 4, 5);\necho $result;",
  "    $array = array($a, $b, $c);\n    sort($array);\n    $hypotenuse = $array[2];\n\
    \    $cathetus_1 = $array[1];\n    $cathetus_2 = $array[0];\n    return ($hypotenuse\
    \ ** 2 == $cathetus_1 ** 2 + $cathetus_2 ** 2);\n}", "    $a2 = $a * $a;\n   \
    \ $b2 = $b * $b;\n    $c2 = $c * $c;\n    $max = max($a2, $b2, $c2);\n    if ($max\
    \ == $a2) {\n        return $b2 + $c2 == $a2;\n    } else if ($max == $b2) {\n\
    \        return $a2 + $c2 == $b2;\n    } else {\n        return $a2 + $b2 == $c2;\n\
    \    }\n}\n", "    // Write your code here\n}\n", "    $a = abs($a);\n    $b =\
    \ abs($b);\n    $c = abs($c);\n    if (($a * $a) == (($b * $b) + ($c * $c))) {\n\
    \        return true;\n    } else if (($b * $b) == (($a * $a) + ($c * $c))) {\n\
    \        return true;\n    } else if (($c * $c) == (($a * $a) + ($b * $b))) {\n\
    \        return true;\n    } else {\n        return false;\n    }\n}\n\nprint_r(right_angle_triangle(3,\
    \ 4, 5));\nprint_r(right_angle_triangle(1, 2, 3));\nprint_r(right_angle_triangle(3,\
    \ 4, 6));\nprint_r(right_angle_triangle(3, -4, 5));", "\t$right_side = pow($a,\
    \ 2) + pow($b, 2);\n\t$hypotenuse = pow($c, 2);\n\tif($right_side == $hypotenuse)\
    \ {\n\t\treturn \"true\";\n\t}\n\telse {\n\t\treturn \"false\";\n\t}\n}\necho\
    \ right_angle_triangle(3, 4, 5) . PHP_EOL;\necho right_angle_triangle(1, 2, 3)\
    \ . PHP_EOL;", '}', "  if (($a*$a) + ($b*$b) == ($c*$c)) {\n    return true;\n\
    \  }\n  else {\n    return false;\n  }\n}\necho right_angle_triangle(3, 4, 5)\
    \ . \"\\n\";\necho right_angle_triangle(1, 2, 3) . \"\\n\";\n", "    if ($a ==\
    \ 0 || $b == 0 || $c == 0) {\n        return false;\n    }\n    $hypotenuse =\
    \ $a > $b ? $a : $b;\n    $hypotenuse = $hypotenuse > $c ? $hypotenuse : $c;\n\
    \    $leg = $a < $b ? $a : $b;\n    $leg = $leg < $c ? $leg : $c;\n    $length\
    \ = abs($a - $b) < abs($a - $c) ? abs($a - $b) : abs($a - $c);\n    $length =\
    \ $length < abs($b - $c) ? $length : abs($b - $c);\n    if ($hypotenuse * $hypotenuse\
    \ == $leg * $leg + $length * $length) {\n        return true;\n    }\n    return\
    \ false;\n}", "    // Write your code here\n    $r = false;\n    // write the\
    \ conditions\n    // if ($a, $b, $c satisfy condition) {\n    //     $r = true;\n\
    \    // }\n    return $r;\n}", "\tif ($a > $b && $a > $c) {\n\t\treturn $b * $b\
    \ + $c * $c == $a * $a;\n\t}\n\tif ($b > $a && $b > $c) {\n\t\treturn $a * $a\
    \ + $c * $c == $b * $b;\n\t}\n\tif ($c > $a && $c > $b) {\n\t\treturn $a * $a\
    \ + $b * $b == $c * $c;\n\t}\n}\n", "  // Write code here\n}\n", "    // your\
    \ code here\n}\n", "  if($a < $b){\n    $t = $a;\n    $a = $b;\n    $b = $t;\n\
    \  }\n  if($a < $c){\n    $t = $a;\n    $a = $c;\n    $c = $t;\n  }\n  return\
    \ $a*$a == $b*$b + $c*$c;\n}\n\necho right_angle_triangle(3, 4, 5);", "\t// Write\
    \ your code here\n\t// To print results to the standard output you can use print\n\
    \t// Example:\n\t// print \"Hello world!\";\n\t\n}\n", "\t$a2 = $a * $a;\n\t$b2\
    \ = $b * $b;\n\t$c2 = $c * $c;\n\tif ($a2 + $b2 == $c2) {\n\t\treturn true;\n\t\
    } else if ($a2 + $c2 == $b2) {\n\t\treturn true;\n\t} else if ($b2 + $c2 == $a2)\
    \ {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\necho right_angle_triangle(3,\
    \ 4, 5) . PHP_EOL;\necho right_angle_triangle(1, 2, 3) . PHP_EOL;", "  if ($a\
    \ > $b && $a > $c) {\n    if ($b * $b + $c * $c == $a * $a) {\n      return true;\n\
    \    }\n  }\n  if ($b > $a && $b > $c) {\n    if ($a * $a + $c * $c == $b * $b)\
    \ {\n      return true;\n    }\n  }\n  if ($c > $a && $c > $b) {\n    if ($a *\
    \ $a + $b * $b == $c * $c) {\n      return true;\n    }\n  }\n  return false;\n\
    }", "    $a2 = $a * $a;\n    $b2 = $b * $b;\n    $c2 = $c * $c;\n    if($a2 +\
    \ $b2 == $c2) {\n        return true;\n    }\n    if($a2 + $c2 == $b2) {\n   \
    \     return true;\n    }\n    if($b2 + $c2 == $a2) {\n        return true;\n\
    \    }\n    return false;\n}\n\nif(right_angle_triangle(3, 4, 5)) {\n    echo\
    \ \"good job <br>\";\n} else {\n    echo \"you suck <br>\";\n}\n\nif(right_angle_triangle(1,\
    \ 2, 3)) {\n    echo \"good job <br>\";\n} else {\n    echo \"you suck <br>\"\
    ;\n}\n\nif(right_angle_triangle(2, 3, 4)) {\n    echo \"good job <br>\";\n} else\
    \ {\n    echo \"you suck <br>\";\n}\n\nif(right_angle_triangle(1, 2, 4)) {\n \
    \   echo \"good job <br>\";\n} else {\n    echo \"you suck <br>\";\n}\n\nif(right_angle_triangle(3,\
    \ 2, 4)) {\n    echo \"good job <br>\";\n} else {\n    echo \"you suck <br>\"\
    ;\n}\n\nif(right_angle_triangle(4, 2, 3)) {\n    echo \"good job <br>\";\n} else\
    \ {\n    echo \"you suck <br>\";\n}\n\nif(right_angle_triangle(4, 4, 4)) {\n \
    \   echo \"good job <br>\";\n} else {\n    echo \"you suck <br>\";\n}\n\nif(right_angle_triangle(4,\
    \ 3, 5)) {\n    echo \"good job <br>\";\n} else {\n    echo \"you suck <br>\"\
    ;\n}\n\nif(right_angle_triangle(0, 0, 0)) {\n    echo \"good job <br>\";\n} else\
    \ {\n    echo \"you suck <br>\";\n}\n", "\t// First we need to find the hypotenuse.\
    \ It's the largest side of the \n\t// triangle.\n\n\tif (($a > $b) && ($a > $c))\
    \ {\n\t\t$hypotenuse = $a;\n\t\t$base = $b;\n\t\t$height = $c;\n\t}\n\telseif\
    \ (($b > $a) && ($b > $c)) {\n\t\t$hypotenuse = $b;\n\t\t$base = $a;\n\t\t$height\
    \ = $c;\n\t}\n\telse {\n\t\t$hypotenuse = $c;\n\t\t$base = $a;\n\t\t$height =\
    \ $b;\n\t}\n\n\t// Next we need to get the square of the hypotenuse and compare\
    \ it to the \n\t// sum of the squares of the other two sides.\n\n\t// To be a\
    \ right-angled triangle, the square of the hypotenuse will be equal\n\t// to the\
    \ sum of the squares of the other two sides.\n\t// \n\t//      2\n\t// (a + b\
    \ ) = c\n\t//\n\t// a = height, b = base, c = hypotenuse\n\t//\n\t// 2\n\t// (height\
    \ + base) = hypotenuse\n\t//\n\t// (height + base) = (hypotenuse)\n\t// \n\t//\
    \ Basically, in a right triangle, the squares of two sides are added and \n\t\
    // will equal the square of the third side.\n\t// \n\t// In order to find the\
    \ squares of the three sides, we use the pow()\n\t// function. Then we need to\
    \ compare the square of the hypotenuse to the sum\n\t// of the squares of the\
    \ other two sides using the if statement. If they are\n\t// equal, then we return\
    \ true. If they are not equal, then we return false.\n\n\tif (pow($hypotenuse,\
    \ 2) == (pow($base, 2) + pow($height, 2))) {\n\t\treturn true;\n\t}\n\telse {\n\
    \t\treturn false;\n\t}\n}\n", "\t// TODO\n}\n", "  $hypotenuse = 0;\n  $adjacent\
    \ = 0;\n  $opposite = 0;\n  $tria = false;\n  if($a>$b && $a>$c){\n    $hypotenuse\
    \ = $a;\n    $adjacent = $b;\n    $opposite = $c;\n  }elseif($b>$a && $b>$c){\n\
    \    $hypotenuse = $b;\n    $adjacent = $a;\n    $opposite = $c;\n  }elseif($c>$a\
    \ && $c>$b){\n    $hypotenuse = $c;\n    $adjacent = $a;\n    $opposite = $b;\n\
    \  }\n  if(sqrt(pow($adjacent, 2) + pow($opposite, 2)) == $hypotenuse){\n    $tria\
    \ = true;\n  }\n  return $tria;\n}", "  if($a === 0 || $b === 0 || $c === 0) return\
    \ false;\n  $sides = [$a, $b, $c];\n  sort($sides);\n  return $sides[0] * $sides[0]\
    \ + $sides[1] * $sides[1] === $sides[2] * $sides[2];\n}", "\tif($a == 0 || $b\
    \ == 0 || $c == 0) return false;\n\tif($a == $b || $b == $c || $a == $c) return\
    \ false;\n\t$s = ($a + $b + $c) / 2;\n\t$area = sqrt($s * ($s - $a) * ($s - $b)\
    \ * ($s - $c));\n\t$r = $area / $s;\n\t$r = round($r, 5);\n\t$s = round($s, 5);\n\
    \tif($r == $s) return true;\n\treturn false;\n}\necho right_angle_triangle(3,\
    \ 4, 5) . PHP_EOL;\necho right_angle_triangle(1, 2, 3) . PHP_EOL;", "\n}\n", " \
    \ // Write your code here\n  $max_side = max($a, $b, $c);\n  $array = array($a,\
    \ $b, $c);\n  $result = pow($max_side, 2);\n  unset($array[array_search($max_side,\
    \ $array)]);\n  $result -= pow($array[0], 2) + pow($array[1], 2);\n  if ($result\
    \ == 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\n", "    if\
    \ (($a*$a + $b*$b) == $c*$c) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}", "\n}", "  // Your code here\n}", "\t// your code here\n}",
  "    if($a<=0||$b<=0||$c<=0){\n        return false;\n    }\n    $max = max($a,\
    \ $b, $c);\n    if($max==$a){\n        return pow($a, 2)==pow($b, 2)+pow($c, 2);\n\
    \    }\n    if($max==$b){\n        return pow($b, 2)==pow($a, 2)+pow($c, 2);\n\
    \    }\n    if($max==$c){\n        return pow($c, 2)==pow($a, 2)+pow($b, 2);\n\
    \    }\n    return false;\n}\n", "\n}\n", "  if (($a + $b > $c) && ($a + $c >\
    \ $b) && ($b + $c > $a)) {\n    if ((($a * $a) + ($b * $b) == ($c * $c)) || (($a\
    \ * $a) + ($c * $c) == ($b * $b)) || (($b * $b) + ($c * $c) == ($a * $a))) {\n\
    \      return true;\n    }\n  }\n  return false;\n}", "\n}", "\t$x = $a * $a;\n\
    \t$y = $b * $b;\n\t$z = $c * $c;\n\tif($x + $y == $z) {\n\t\treturn true;\n\t\
    }\n\telseif($x + $z == $y) {\n\t\treturn true;\n\t}\n\telseif($y + $z == $x) {\n\
    \t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\n", "  // TODO: Implement\
    \ me!\n}", "  $triangle = array($a, $b, $c);\n  sort($triangle);\n  $hypotenuse\
    \ = end($triangle);\n  $other_two = array_slice($triangle, 0, -1);\n  return (pow($hypotenuse,\
    \ 2) == (pow($other_two[0], 2) + pow($other_two[1], 2)));\n}\n\necho right_angle_triangle(3,\
    \ 4, 5) . PHP_EOL;\necho right_angle_triangle(1, 2, 3) . PHP_EOL;", "\t// your\
    \ code here\n\t$array = [$a, $b, $c];\n\tsort($array);\n\t$array = array_reverse($array);\n\
    \t$a = $array[0];\n\t$b = $array[1];\n\t$c = $array[2];\n\t$aSquared = $a * $a;\n\
    \t$bSquared = $b * $b;\n\t$cSquared = $c * $c;\n\tif($aSquared == $bSquared +\
    \ $cSquared){\n\t\treturn true;\n\t}\n\treturn false;\n}\n", "  if (pow($a, 2)\
    \ + pow($b, 2) == pow($c, 2)) {\n    return true;\n  } else {\n    return false;\n\
    \  }\n}\n", "  // FILL ME IN\n}", "\n}\n\nclass RightAngleTriangleTest extends\
    \ \\PHPUnit_Framework_TestCase {\n    public function testRightAngleTriangle()\
    \ {\n        $this->assertTrue(right_angle_triangle(3, 4, 5));\n        $this->assertFalse(right_angle_triangle(1,\
    \ 2, 3));\n    }\n}", "  $is_triangle = ($a + $b > $c) && ($a + $c > $b) && ($b\
    \ + $c > $a);\n  $arr = [$a * $a, $b * $b, $c * $c];\n  sort($arr);\n  $is_right_angle\
    \ = ($arr[0] + $arr[1] == $arr[2]);\n  return $is_triangle && $is_right_angle;\n\
    }\necho right_angle_triangle(3, 4, 5) . \"\\n\";\necho right_angle_triangle(1,\
    \ 2, 3) . \"\\n\";\n", "  // your code here\n  $sides = array($a, $b, $c);\n \
    \ sort($sides);\n  $hypotenuse = $sides[2];\n  $opposite = $sides[1];\n  $adjacent\
    \ = $sides[0];\n  return pow($hypotenuse, 2) == pow($opposite, 2) + pow($adjacent,\
    \ 2);\n}\necho right_angle_triangle(3, 4, 5) . \"\\n\";\necho right_angle_triangle(1,\
    \ 2, 3) . \"\\n\";", "    $right_angle_triangle = false;\n    if($a == sqrt(pow($b,\
    \ 2) + pow($c, 2))){\n        $right_angle_triangle = true;\n    } elseif($b ==\
    \ sqrt(pow($a, 2) + pow($c, 2))){\n        $right_angle_triangle = true;\n   \
    \ } elseif($c == sqrt(pow($a, 2) + pow($b, 2))){\n        $right_angle_triangle\
    \ = true;\n    } else{\n        $right_angle_triangle = false;\n    }\n    return\
    \ $right_angle_triangle;\n}", "\t$sides = [$a, $b, $c];\n\tsort($sides);\n\tif\
    \ (($sides[0] * $sides[0]) + ($sides[1] * $sides[1]) == ($sides[2] * $sides[2]))\
    \ {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n", "    // TODO\n\
    }\n", "  // TODO\n}\n", "\tif ($a*$a + $b*$b == $c*$c) {\n\t\treturn true;\n\t\
    } else {\n\t\treturn false;\n\t}\n}\n\necho right_angle_triangle(3, 4, 5) . \"\
    <br>\";\necho right_angle_triangle(1, 2, 3) . \"<br>\";", "    // YOUR CODE GOES\
    \ HERE\n}\n", "\tif ($a * $a + $b * $b == $c * $c) {\n\t\treturn true;\n\t} else\
    \ {\n\t\treturn false;\n\t}\n}", "\tif ($a == 0 || $b == 0 || $c == 0) {\n\t\t\
    return false;\n\t}\n\t$max_length = max($a, $b, $c);\n\t$sum_length = $a + $b\
    \ + $c;\n\tif ($max_length * $max_length == $sum_length - $max_length * $max_length)\
    \ {\n\t\treturn true;\n\t}\n\treturn false;\n}", "  // Write code here\n  // You'll\
    \ need to calculate the angle between the three sides, and check if it's 90\n\
    \  // Use cosine rule to find the angle between the 3 sides (a, b, c)\n  // cos(angle)\
    \ = (b*b + c*c - a*a) / (2*b*c)\n  // cos(angle) = (a*a + c*c - b*b) / (2*a*c)\n\
    \  // cos(angle) = (a*a + b*b - c*c) / (2*a*b)\n  $cos_a = round((($b*$b + $c*$c\
    \ - $a*$a) / (2*$b*$c)), 8);\n  $cos_b = round((($a*$a + $c*$c - $b*$b) / (2*$a*$c)),\
    \ 8);\n  $cos_c = round((($a*$a + $b*$b - $c*$c) / (2*$a*$b)), 8);\n  //echo $cos_a;\n\
    \  //echo $cos_b;\n  //echo $cos_c;\n  // Return true if cos(angle) = 90 degree,\
    \ false otherwise\n  if ($cos_a == -1 || $cos_b == -1 || $cos_c == -1) {\n   \
    \ return true;\n  } else {\n    return false;\n  }\n}", "    $sum = $a * $a +\
    \ $b * $b;\n    $cSq = $c * $c;\n    if ($sum == $cSq) {\n        return true;\n\
    \    } else {\n        return false;\n    }\n}", "  if (($a * $a + $b * $b) ==\
    \ ($c * $c))\n    return true;\n  else\n    return false;\n}\n", "  $triangle\
    \ = array($a, $b, $c);\n  sort($triangle);\n  if ($triangle[0] * $triangle[0]\
    \ + $triangle[1] * $triangle[1] == $triangle[2] * $triangle[2]) {\n    return\
    \ true;\n  } else {\n    return false;\n  }\n}\n", "    // Write your code here\n\
    }\n", "  // TODO: Fill in your code here\n}\n", "    $arr = [$a, $b, $c];\n  \
    \  $max = max($arr);\n    $index = array_search($max, $arr);\n    $sqr_max = pow($max,\
    \ 2);\n    $other_side = array_sum(array_splice($arr, $index, 1));\n    $sqr_other_side\
    \ = pow($other_side, 2);\n    if ($sqr_max === $sqr_other_side) {\n        return\
    \ true;\n    }\n    return false;\n}\n\n$ret = right_angle_triangle(3, 4, 5);\n\
    if ($ret) {\n    echo \"Test 1: TRUE\\n\";\n} else {\n    echo \"Test 1: FALSE\\\
    n\";\n}\n\n$ret = right_angle_triangle(1, 2, 3);\nif ($ret) {\n    echo \"Test\
    \ 2: TRUE\\n\";\n} else {\n    echo \"Test 2: FALSE\\n\";\n}\n\n$ret = right_angle_triangle(1,\
    \ 2, 4);\nif ($ret) {\n    echo \"Test 3: TRUE\\n\";\n} else {\n    echo \"Test\
    \ 3: FALSE\\n\";\n}\n\n$ret = right_angle_triangle(2, 3, 4);\nif ($ret) {\n  \
    \  echo \"Test 4: TRUE\\n\";\n} else {\n    echo \"Test 4: FALSE\\n\";\n}\n\n\
    $ret = right_angle_triangle(1, 3, 5);\nif ($ret) {\n    echo \"Test 5: TRUE\\\
    n\";\n} else {\n    echo \"Test 5: FALSE\\n\";\n}\n\n$ret = right_angle_triangle(1,\
    \ 1, 1);\nif ($ret) {\n    echo \"Test 6: TRUE\\n\";\n} else {\n    echo \"Test\
    \ 6: FALSE\\n\";\n}\n\n$ret = right_angle_triangle(1, 1, 2);\nif ($ret) {\n  \
    \  echo \"Test 7: TRUE\\n\";\n} else {\n    echo \"Test 7: FALSE\\n\";\n}\n\n\
    $ret = right_angle_triangle(1, 2, 2);\nif ($ret", "\t// Write your code here\t\
    \n}\n\nassert_options(ASSERT_BAIL, 1);\nassert(right_angle_triangle(3, 4, 5) ==\
    \ true);\nassert(right_angle_triangle(1, 2, 3) == false);\nassert(right_angle_triangle(3,\
    \ 4, 6) == false);\nassert(right_angle_triangle(0, 4, 5) == false);\n", "    //\
    \ Write your code here\n    $result = $a*$a + $b*$b == $c*$c;\n    return $result;\n\
    }\n\necho right_angle_triangle(3, 4, 5);\necho right_angle_triangle(1, 2, 3);",
  "\n}", "    // write your code here\n}\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n\
    \  // Pythagorean theorem:\n  // c^2 = a^2 + b^2\n  return pow($sides[2], 2) ==\
    \ pow($sides[0], 2) + pow($sides[1], 2);\n}\n\nprint_r(right_angle_triangle(3,\
    \ 4, 5));\nprint_r(right_angle_triangle(1, 2, 3));", "    // REPLACE THE CODE\
    \ BELOW\n    return false;\n}\n", "  if ($a == 0 || $b == 0 || $c == 0) {\n  \
    \  return false;\n  }\n  $largest_side = max($a, $b, $c);\n  $remaining_sides\
    \ = array_diff([$a, $b, $c], [$largest_side]);\n  $sum_of_remaining_sides = array_sum($remaining_sides);\n\
    \  return $largest_side * $largest_side == $sum_of_remaining_sides * $sum_of_remaining_sides;\n\
    }", "\tif (($a**2 + $b**2) == $c**2)\n\t\treturn true;\n\telse if (($a**2 + $c**2)\
    \ == $b**2)\n\t\treturn true;\n\telse if (($b**2 + $c**2) == $a**2)\n\t\treturn\
    \ true;\n\telse\n\t\treturn false;\n}\n\necho right_angle_triangle(3, 4, 5) .\
    \ PHP_EOL;\necho right_angle_triangle(1, 2, 3) . PHP_EOL;", "  if ($a <= 0 ||\
    \ $b <= 0 || $c <= 0) {\n    return false;\n  }\n  $pythagorean_theorem = [$a*$a,\
    \ $b*$b, $c*$c];\n  sort($pythagorean_theorem);\n  return $pythagorean_theorem[0]\
    \ + $pythagorean_theorem[1] == $pythagorean_theorem[2];\n}\necho right_angle_triangle(3,\
    \ 4, 5) . \"\\n\";\necho right_angle_triangle(1, 2, 3) . \"\\n\";", "  if (($a\
    \ * $a) + ($b * $b) == ($c * $c)) {\n    return true;\n  } elseif (($b * $b) +\
    \ ($c * $c) == ($a * $a)) {\n    return true;\n  } elseif (($c * $c) + ($a * $a)\
    \ == ($b * $b)) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n\
    echo right_angle_triangle(3, 4, 5) . PHP_EOL;\necho right_angle_triangle(1, 2,\
    \ 3) . PHP_EOL;", "    // Your code here\n}", "\t$a_sq = $a * $a;\n\t$b_sq = $b\
    \ * $b;\n\t$c_sq = $c * $c;\n\tif ($a_sq + $b_sq == $c_sq) {\n\t\treturn true;\n\
    \t} elseif ($a_sq + $c_sq == $b_sq) {\n\t\treturn true;\n\t} elseif ($b_sq + $c_sq\
    \ == $a_sq) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}", "  if\
    \ ($a > $b && $a > $c) {\n    return $a*$a == $b*$b + $c*$c;\n  } else if ($b\
    \ > $a && $b > $c) {\n    return $b*$b == $a*$a + $c*$c;\n  } else {\n    return\
    \ $c*$c == $a*$a + $b*$b;\n  }\n}\n", "    if ($a > $b && $a > $c) {\n       \
    \ return $a * $a == $b * $b + $c * $c;\n    } else if ($b > $a && $b > $c) {\n\
    \        return $b * $b == $a * $a + $c * $c;\n    } else {\n        return $c\
    \ * $c == $a * $a + $b * $b;\n    }\n}\n", "  if (pow($a, 2) + pow($b, 2) == pow($c,\
    \ 2)) {\n    return true;\n  } else {\n    return false;\n  }\n}\nprint right_angle_triangle(3,\
    \ 4, 5);\nprint right_angle_triangle(1, 2, 3);", "  // return false;\n}", "  \
    \  // I cheated\n    // I remembered that in a right triangle with the sides a,\
    \ b, and c\n    // a^2 + b^2 = c^2\n    // and therefore I did\n    if ($a * $a\
    \ + $b * $b == $c * $c) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}", "  // Write your code here\n  // To print results to the\
    \ standard output you can use print\n  // Example:\n  // print \"Hello world!\"\
    ;\n  print \"right_angle_triangle\\n\";\n  $max = 0;\n  $second = 0;\n  $third\
    \ = 0;\n  if ($a > $b && $a > $c) {\n    $max = $a;\n    $second = $b;\n    $third\
    \ = $c;\n  } else if ($b > $a && $b > $c) {\n    $max = $b;\n    $second = $a;\n\
    \    $third = $c;\n  } else {\n    $max = $c;\n    $second = $a;\n    $third =\
    \ $b;\n  }\n  return $max == sqrt($second * $second + $third * $third);\n}\n",
  "  // Return false if any of the input is less than 0.\n  if ($a <= 0 || $b <= 0\
    \ || $c <= 0) {\n    return false;\n  }\n  // Return false if it's not a triangle.\n\
    \  if ($a + $b <= $c || $a + $c <= $b || $b + $c <= $a) {\n    return false;\n\
    \  }\n  // Return true if it is a right triangle.\n  if (pow($a, 2) + pow($b,\
    \ 2) == pow($c, 2) ||\n      pow($a, 2) + pow($c, 2) == pow($b, 2) ||\n      pow($b,\
    \ 2) + pow($c, 2) == pow($a, 2)) {\n    return true;\n  }\n  return false;\n}\n\
    echo right_angle_triangle(3, 4, 5) . \"\\n\";\necho right_angle_triangle(1, 2,\
    \ 3) . \"\\n\";", "  if ($a <= 0 || $b <= 0 || $c <= 0) {\n    return false;\n\
    \  }\n  $hypot = ($a > $b) ? ($a > $c) ? $a : $c : ($b > $c) ? $b : $c;\n  $adjacent\
    \ = ($a < $b) ? ($a < $c) ? $a : $c : ($b < $c) ? $b : $c;\n  $opposite = ($a\
    \ + $b + $c) - ($hypot + $adjacent);\n  $adj_sq = pow($adjacent, 2);\n  $opp_sq\
    \ = pow($opposite, 2);\n  return ($adj_sq + $opp_sq) == pow($hypot, 2);\n}\n",
  "\t$pythagoras_triples = array(array(3, 4, 5),\n\t\t\t\t\t\t\t\tarray(5, 12, 13),\n\
    \t\t\t\t\t\t\t\tarray(8, 15, 17),\n\t\t\t\t\t\t\t\tarray(7, 24, 25),\n\t\t\t\t\
    \t\t\t\tarray(20, 21, 29),\n\t\t\t\t\t\t\t\tarray(12, 35, 37),\n\t\t\t\t\t\t\t\
    \tarray(9, 40, 41),\n\t\t\t\t\t\t\t\tarray(28, 45, 53),\n\t\t\t\t\t\t\t\tarray(11,\
    \ 60, 61),\n\t\t\t\t\t\t\t\tarray(16, 63, 65),\n\t\t\t\t\t\t\t\tarray(33, 56,\
    \ 65),\n\t\t\t\t\t\t\t\tarray(48, 55, 73),\n\t\t\t\t\t\t\t\tarray(13, 84, 85),\n\
    \t\t\t\t\t\t\t\tarray(36, 77, 85),\n\t\t\t\t\t\t\t\tarray(39, 80, 89),\n\t\t\t\
    \t\t\t\t\tarray(65, 72, 97),\n\t\t\t\t\t\t\t\tarray(20, 99, 101),\n\t\t\t\t\t\t\
    \t\tarray(60, 91, 109),\n\t\t\t\t\t\t\t\tarray(15, 112, 113),\n\t\t\t\t\t\t\t\t\
    array(44, 117, 125),\n\t\t\t\t\t\t\t\tarray(88, 105, 137),\n\t\t\t\t\t\t\t\tarray(17,\
    \ 144, 145),\n\t\t\t\t\t\t\t\tarray(24, 143, 145),\n\t\t\t\t\t\t\t\tarray(51,\
    \ 140, 149),\n\t\t\t\t\t\t\t\tarray(85, 132, 157),\n\t\t\t\t\t\t\t\tarray(119,\
    \ 120, 169),\n\t\t\t\t\t\t\t\tarray(52, 165, 173),\n\t\t\t\t\t\t\t\tarray(19,\
    \ 180, 181),\n\t\t\t\t\t\t\t\tarray(57, 176, 185),\n\t\t\t\t\t\t\t\tarray(104,\
    \ 153,", "    // Your code here\n}\n", "    if (pow($a, 2) + pow($b, 2) == pow($c,\
    \ 2)) {\n        return true;\n    } elseif (pow($a, 2) + pow($c, 2) == pow($b,\
    \ 2)) {\n        return true;\n    } elseif (pow($b, 2) + pow($c, 2) == pow($a,\
    \ 2)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n",
  "  if($a <= 0 || $b <= 0 || $c <= 0) {\n    return \"The given lengths should be\
    \ positive integers.\";\n  }\n  $sides = array($a, $b, $c);\n  sort($sides);\n\
    \  $a = $sides[0];\n  $b = $sides[1];\n  $c = $sides[2];\n  if($a + $b <= $c)\
    \ {\n    return \"The given lengths will not form a triangle.\";\n  }\n  return\
    \ $a * $a + $b * $b == $c * $c;\n}\necho right_angle_triangle(3, 4, 5) . \"\\\
    n\";\necho right_angle_triangle(3, 4, 8) . \"\\n\";\necho right_angle_triangle(1,\
    \ 2, 3) . \"\\n\";\necho right_angle_triangle(1, 2, -3) . \"\\n\";\necho right_angle_triangle(1,\
    \ 2, 0) . \"\\n\";", "    $length = array($a, $b, $c);\n    sort($length);\n\n\
    \    if ($length[0] * $length[0] + $length[1] * $length[1] == $length[2] * $length[2])\
    \ {\n        return true;\n    }\n    return false;\n}\n", "  $sides = [$a, $b,\
    \ $c];\n  sort($sides);\n  if ($sides[0] ** 2 + $sides[1] ** 2 == $sides[2] **\
    \ 2) {\n    return true;\n  } else {\n    return false;\n  }\n}", "    if (($a\
    \ * $a) + ($b * $b) == ($c * $c)) {\n        return true;\n    } else {\n    \
    \    return false;\n    }\n}\n", "  $bign = max($a, $b, $c);\n  $smalln = min($a,\
    \ $b, $c);\n  $midn = $a + $b + $c - $bign - $smalln;\n  return pow($bign, 2)\
    \ == pow($smalln, 2) + pow($midn, 2);\n}\n", "\t// TODO\n}\n", "    if ((($a **\
    \ 2) + ($b ** 2)) == ($c ** 2)) {\n        return true;\n    } elseif ((($a **\
    \ 2) + ($c ** 2)) == ($b ** 2)) {\n        return true;\n    } elseif ((($b **\
    \ 2) + ($c ** 2)) == ($a ** 2)) {\n        return true;\n    } else {\n      \
    \  return false;\n    }\n}\n", "    if ($a * $a + $b * $b == $c * $c)\n      \
    \  return true;\n    else if ($a * $a + $c * $c == $b * $b)\n        return true;\n\
    \    else if ($b * $b + $c * $c == $a * $a)\n        return true;\n    else\n\
    \        return false;\n}\necho right_angle_triangle(3, 4, 5) . PHP_EOL;\necho\
    \ right_angle_triangle(1, 2, 3) . PHP_EOL;", "    $sides = array($a, $b, $c);\n\
    \    sort($sides);\n    $hypotenuse = $sides[2];\n    $cathetus1 = $sides[1];\n\
    \    $cathetus2 = $sides[0];\n    return ($hypotenuse * $hypotenuse) == (($cathetus1\
    \ * $cathetus1) + ($cathetus2 * $cathetus2));\n}\n", "  // Write your code here...\n\
    }", "\t$arr_of_sides = [$a, $b, $c];\n\t$biggest_side = max($arr_of_sides);\n\t\
    $index_of_biggest_side = array_search($biggest_side, $arr_of_sides);\n\tarray_splice($arr_of_sides,\
    \ $index_of_biggest_side, 1);\n\t$pythagorean_theorem = pow($arr_of_sides[0],\
    \ 2) + pow($arr_of_sides[1], 2);\n\tif($pythagorean_theorem == pow($biggest_side,\
    \ 2)) {\n\t\treturn true;\n\t}\n\treturn false;\n}\necho right_angle_triangle(3,\
    \ 4, 5);\necho right_angle_triangle(1, 2, 3);", "  // Write your code here\n \
    \ $result = false;\n  if($a + $b > $c && $a + $c > $b && $b + $c > $a) {\n   \
    \ if ($a * $a + $b * $b == $c * $c) {\n      $result = true;\n    }\n  }\n  return\
    \ $result;\n}\n", "\tif ($a < $b) {\n\t\t$a ^= $b;\n\t\t$b ^= $a;\n\t\t$a ^= $b;\n\
    \t}\n\tif ($a < $c) {\n\t\t$a ^= $c;\n\t\t$c ^= $a;\n\t\t$a ^= $c;\n\t}\n\tif\
    \ ($b < $c) {\n\t\t$b ^= $c;\n\t\t$c ^= $b;\n\t\t$b ^= $c;\n\t}\n\treturn $a *\
    \ $a == $b * $b + $c * $c;\n}\n\n$a = 3;\n$b = 4;\n$c = 5;\necho right_angle_triangle($a,\
    \ $b, $c);\necho \"\\n\";", "  $arr = [$a, $b, $c];\n  sort($arr);\n  return $arr[0]\
    \ ** 2 + $arr[1] ** 2 == $arr[2] ** 2;\n}\n\nprint_r(right_angle_triangle(3, 4,\
    \ 5));\nprint_r(right_angle_triangle(1, 2, 3));", "    $sides = array($a, $b,\
    \ $c);\n    sort($sides);\n    $a = $sides[0];\n    $b = $sides[1];\n    $c =\
    \ $sides[2];\n    return pow($a, 2) + pow($b, 2) == pow($c, 2);\n}\necho right_angle_triangle(3,\
    \ 4, 5);", "    // TODO\n}\n\necho '<p>right_angle_triangle(3, 4, 5): ';\nif (right_angle_triangle(3,\
    \ 4, 5)) {\n    echo 'true';\n} else {\n    echo 'false';\n}\necho '</p>';\n\n\
    echo '<p>right_angle_triangle(1, 2, 3): ';\nif (right_angle_triangle(1, 2, 3))\
    \ {\n    echo 'true';\n} else {\n    echo 'false';\n}\necho '</p>';", "  // Write\
    \ your code here\n  // To print results to the standard output you can use print\n\
    \  // Example:\n  // print \"Hello world!\";\n}", "    if($a + $b > $c && $a +\
    \ $c > $b && $b + $c > $a) {\n        return true;\n    }\n    return false;\n\
    }", "  $right_angle_triangle = false;\n  if (pow($a, 2) + pow($b, 2) == pow($c,\
    \ 2)) {\n    $right_angle_triangle = true;\n  } elseif (pow($b, 2) + pow($c, 2)\
    \ == pow($a, 2)) {\n    $right_angle_triangle = true;\n  } elseif (pow($c, 2)\
    \ + pow($a, 2) == pow($b, 2)) {\n    $right_angle_triangle = true;\n  }\n  return\
    \ $right_angle_triangle;\n}\n", "  // Write your code here\n}", "\t$sides = array($a,\
    \ $b, $c);\n\tsort($sides);\n\t$sum_squares = pow($sides[0], 2) + pow($sides[1],\
    \ 2);\n\treturn $sum_squares == pow($sides[2], 2);\n}\n\n$tests = array(\n\tarray(3,\
    \ 4, 5, true),\n\tarray(1, 2, 3, false),\n\tarray(3, 4, 6, false),\n\tarray(7,\
    \ 24, 25, true),\n\tarray(1, 1, 1, false),\n\tarray(1, 1, 2, false),\n\tarray(1,\
    \ 1, sqrt(2), true),\n\tarray(1, 2, sqrt(5), true),\n\tarray(1, 2, sqrt(8), false),\n\
    \tarray(10, 24, 26, true),\n\tarray(10, 24, 27, false),\n\tarray(3, 4, 5, true),\n\
    \tarray(3, 4, 6, false),\n\tarray(7, 24, 25, true),\n\tarray(5, 8, 17, false),\n\
    \tarray(5, 8, 18, false),\n\tarray(5, 8, 19, false),\n\tarray(5, 8, 20, false),\n\
    \tarray(5, 8, 21, false),\n\tarray(5, 8, 22, false),\n\tarray(5, 8, 23, false),\n\
    \tarray(5, 8, 24, false),\n\tarray(5, 8, 25, true),\n\tarray(5, 8, 26, false),\n\
    \tarray(5, 8, 27, false),\n\tarray(5, 8, 28, false),\n\tarray(5, 8, 29, false),\n\
    \tarray(5, 8, 30, false),\n\tarray(5, 8, 31, false),\n\tarray(5, 8, 32, false),\n\
    \tarray(5, 8, 33, false),\n\tarray(5, 8, 34, false),\n\tarray(3, 4, 5, true),\n\
    \tarray(3, 4, 6, false),\n\tarray(7, 24, 25, true),\n\tarray(1,", "    $sides\
    \ = [$a, $b, $c];\n    sort($sides);\n\n    return $sides[0] ** 2 + $sides[1]\
    \ ** 2 == $sides[2] ** 2;\n}\n\n$tests = [[3, 4, 5, true], [1, 2, 3, false]];\n\
    \nfor ($i = 0; $i < count($tests); $i++) {\n    $test = $tests[$i];\n    if (right_angle_triangle($test[0],\
    \ $test[1], $test[2]) == $test[3]) {\n        echo \"Test \" . ($i + 1) . \":\
    \ \" . \"OK\" . PHP_EOL;\n    } else {\n        echo \"Test \" . ($i + 1) . \"\
    : \" . \"FAIL\" . PHP_EOL;\n    }\n}", "  $sides = [$a, $b, $c];\n  sort($sides);\n\
    \  return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\necho\
    \ right_angle_triangle(3, 4, 5) . \"\\n\"; // true\necho right_angle_triangle(1,\
    \ 2, 3) . \"\\n\"; // false", "\tif($a > $b && $a > $c) {\n\t\t$max = $a;\n\t\t\
    $min1 = $b;\n\t\t$min2 = $c;\n\t} else if($b > $a && $b > $c) {\n\t\t$max = $b;\n\
    \t\t$min1 = $a;\n\t\t$min2 = $c;\n\t} else {\n\t\t$max = $c;\n\t\t$min1 = $a;\n\
    \t\t$min2 = $b;\n\t}\n\treturn pow($max, 2) == pow($min1, 2) + pow($min2, 2);\n\
    }\n", "  $a2 = $a * $a;\n  $b2 = $b * $b;\n  $c2 = $c * $c;\n  if($a2 + $b2 ==\
    \ $c2) {\n    return true;\n  } else if($a2 + $c2 == $b2) {\n    return true;\n\
    \  } else if($b2 + $c2 == $a2) {\n    return true;\n  } else {\n    return false;\n\
    \  }\n}\necho right_angle_triangle(3, 4, 5) . \"\\n\";\necho right_angle_triangle(1,\
    \ 2, 3) . \"\\n\";", "    if (($a <= 0) || ($b <= 0) || ($c <= 0)) {\n       \
    \ return false;\n    }\n    if (($a + $b <= $c) || ($a + $c <= $b) || ($b + $c\
    \ <= $a)) {\n        return false;\n    }\n    if (($a*$a == $b*$b + $c*$c) ||\n\
    \        ($b*$b == $a*$a + $c*$c) ||\n        ($c*$c == $a*$a + $b*$b)) {\n  \
    \      return true;\n    }\n    return false;\n}\n", "  if ($a == 0 || $b == 0\
    \ || $c == 0) {\n    return false;\n  }\n  $largest = max($a, $b, $c);\n  $sumOfSides\
    \ = $a + $b + $c;\n  $sumOfSidesMinusLargest = $sumOfSides - $largest;\n  if ($sumOfSidesMinusLargest\
    \ > $largest) {\n    return false;\n  }\n  $hypotenuse = $largest;\n  $a_squared\
    \ = $a * $a;\n  $b_squared = $b * $b;\n  $c_squared = $c * $c;\n  if ($hypotenuse\
    \ == $a) {\n    return $b_squared + $c_squared == $a_squared;\n  } else if ($hypotenuse\
    \ == $b) {\n    return $a_squared + $c_squared == $b_squared;\n  } else {\n  \
    \  return $a_squared + $b_squared == $c_squared;\n  }\n}", "    if (($a > 0) &&\
    \ ($b > 0) && ($c > 0)) {\n        if ((pow($a, 2) + pow($b, 2)) == pow($c, 2))\
    \ {\n            return true;\n        } elseif ((pow($a, 2) + pow($c, 2)) ==\
    \ pow($b, 2)) {\n            return true;\n        } elseif ((pow($b, 2) + pow($c,\
    \ 2)) == pow($a, 2)) {\n            return true;\n        } else {\n         \
    \   return false;\n        }\n    } else {\n        return false;\n    }\n}\n\n\
    echo 'right_angle_triangle(3, 4, 5): ' . right_angle_triangle(3, 4, 5) . \"\\\
    n\";\necho 'right_angle_triangle(1, 2, 3): ' . right_angle_triangle(1, 2, 3) .\
    \ \"\\n\";", "  $a2 = $a * $a;\n  $b2 = $b * $b;\n  $c2 = $c * $c;\n  if ($a2\
    \ + $b2 == $c2) {\n    return true;\n  } else if ($a2 + $c2 == $b2) {\n    return\
    \ true;\n  } else if ($b2 + $c2 == $a2) {\n    return true;\n  } else {\n    return\
    \ false;\n  }\n}\n", "    // TODO: please write your code here\n}", "\t// Your\
    \ code goes here\n\t$result = false;\n\t$hyp = 0;\n\tif ($a > $b && $a > $c) {\n\
    \t\t$hyp = $a;\n\t\t$side1 = $b;\n\t\t$side2 = $c;\n\t} elseif ($b > $a && $b\
    \ > $c) {\n\t\t$hyp = $b;\n\t\t$side1 = $a;\n\t\t$side2 = $c;\n\t} else {\n\t\t\
    $hyp = $c;\n\t\t$side1 = $a;\n\t\t$side2 = $b;\n\t}\n\tif ($hyp*$hyp == $side1*$side1\
    \ + $side2*$side2) {\n\t\t$result = true;\n\t}\n\treturn $result;\n}\n", "   \
    \ // Your code goes here\n    return true;\n}", "    // @YOUR_CODE_HERE\n}\n",
  "    if ($a == sqrt(pow($b, 2) + pow($c, 2)) || $b == sqrt(pow($a, 2) + pow($c,\
    \ 2)) || $c == sqrt(pow($a, 2) + pow($b, 2))) {\n        return true;\n    }\n\
    \    return false;\n}", "  \n}\n", "\t$hypotenuse = max($a, $b, $c);\n\t$side1\
    \ = min($a, $b, $c);\n\t$side2 = array_sum([$a, $b, $c]) - $hypotenuse - $side1;\n\
    \treturn $hypotenuse * $hypotenuse == $side1 * $side1 + $side2 * $side2;\n}\n\n\
    $inputs = [\n\t[3, 4, 5],\n\t[1, 2, 3],\n\t[3, 4, 4],\n\t[5, 12, 13],\n\t[8, 15,\
    \ 17],\n\t[7, 24, 25],\n\t[11, 60, 61],\n\t[9, 40, 41],\n\t[14, 48, 50],\n\t[12,\
    \ 35, 37],\n\t[48, 55, 73],\n\t[30, 40, 50],\n\t[60, 63, 87],\n\t[50, 90, 100],\n\
    \t[36, 77, 85],\n\t[4, 8, 10],\n\t[10, 24, 26],\n\t[30, 40, 50],\n\t[35, 84, 91],\n\
    \t[20, 21, 29],\n\t[21, 20, 29],\n\t[9, 40, 41],\n\t[11, 60, 61],\n\t[12, 35,\
    \ 37],\n\t[16, 63, 65],\n\t[15, 8, 17],\n\t[12, 13, 5],\n\t[14, 48, 50],\n\t[12,\
    \ 13, 25],\n\t[24, 7, 25],\n\t[5, 12, 13],\n\t[7, 24, 25],\n\t[9, 12, 15],\n\t\
    [3, 4, 4],\n\t[8, 15, 17],\n\t[9, 12, 5],\n\t[21, 20, 10],\n\t[20, 21, 10],\n\t\
    [12, 5, 13],\n\t[5, 12, 13],\n\t[7, 8, 6],\n\t[5, 12, 13],\n\t[4, 5, 3],\n\t[5,\
    \ 4, 3],\n\t[3, 4, 5],\n\t[", "  $a_squared = $a * $a;\n  $b_squared = $b * $b;\n\
    \  $c_squared = $c * $c;\n  if (($a_squared + $b_squared) == $c_squared) {\n \
    \   return true;\n  } elseif (($b_squared + $c_squared) == $a_squared) {\n   \
    \ return true;\n  } elseif (($a_squared + $c_squared) == $b_squared) {\n    return\
    \ true;\n  } else {\n    return false;\n  }\n}", "    if ($a > $b && $a > $c)\
    \ {\n        $hypotenuse = $a;\n        $first = $b;\n        $second = $c;\n\
    \    } else if ($b > $a && $b > $c) {\n        $hypotenuse = $b;\n        $first\
    \ = $a;\n        $second = $c;\n    } else {\n        $hypotenuse = $c;\n    \
    \    $first = $a;\n        $second = $b;\n    }\n    $square_sum = $first * $first\
    \ + $second * $second;\n    $hypotenuse_square = $hypotenuse * $hypotenuse;\n\
    \    return $square_sum == $hypotenuse_square;\n}", "    // We check that the\
    \ given triangle can be a right-angled triangle\n    if ($a < $b && $a < $c) {\n\
    \        // Checks whether a is the hypotenuse\n        if ($a ** 2 == $b ** 2\
    \ + $c ** 2) {\n            return true;\n        }\n    }\n    if ($b < $a &&\
    \ $b < $c) {\n        // Checks whether b is the hypotenuse\n        if ($b **\
    \ 2 == $a ** 2 + $c ** 2) {\n            return true;\n        }\n    }\n    if\
    \ ($c < $a && $c < $b) {\n        // Checks whether c is the hypotenuse\n    \
    \    if ($c ** 2 == $a ** 2 + $b ** 2) {\n            return true;\n        }\n\
    \    }\n    return false;\n}\n\necho right_angle_triangle(3, 4, 5) . PHP_EOL;\n\
    echo right_angle_triangle(1, 2, 3) . PHP_EOL;\n", "\t// Write your code here\n\
    \tif($a==0 || $b==0 || $c==0){\n\t\treturn false;\n\t}\n\telse if(($a*$a+$b*$b==$c*$c)||($a*$a+$c*$c==$b*$b)||($b*$b+$c*$c==$a*$a)){\n\
    \t\treturn true;\n\t}\n\telse{\n\t\treturn false;\n\t}\n}\n", "\treturn ($a *\
    \ $a) + ($b * $b) == ($c * $c);\n}\n$a = 3;\n$b = 4;\n$c = 5;\n$is_right_angle_triangle\
    \ = right_angle_triangle($a, $b, $c);\nif ($is_right_angle_triangle) {\n\techo\
    \ \"true\\n\";\n} else {\n\techo \"false\\n\";\n}", "  $nums = [$a, $b, $c];\n\
    \  sort($nums);\n  // $nums = [$c, $b, $a];\n  return ($nums[0]**2 + $nums[1]**2\
    \ == $nums[2]**2);\n}\n\nprint_r(right_angle_triangle(4, 5, 3) . \"\\n\");\nprint_r(right_angle_triangle(1,\
    \ 2, 3) . \"\\n\");", "  // BEGIN\n  // \u0441\u043E\u0440\u0442\u0438\u0440\u0443\
    \u0435\u043C \u043C\u0430\u0441\u0441\u0438\u0432\n  $sides = [$a, $b, $c];\n\
    \  sort($sides);\n  // \u043F\u0440\u043E\u0432\u0435\u0440\u044F\u0435\u043C\
    \ \u0443\u0441\u043B\u043E\u0432\u0438\u0435 \u043F\u0440\u044F\u043C\u043E\u0443\
    \u0433\u043E\u043B\u044C\u043D\u043E\u0433\u043E \u0442\u0440\u0435\u0443\u0433\
    \u043E\u043B\u044C\u043D\u0438\u043A\u0430\n  if (pow($sides[0], 2) + pow($sides[1],\
    \ 2) == pow($sides[2], 2)) {\n      return true;\n  } else {\n      return false;\n\
    \  }\n  // END\n}", "\t$res = false;\n\tif (($a * $a) + ($b * $b) == ($c * $c))\
    \ {\n\t\t$res = true;\n\t}\n\treturn $res;\n}\n", "\n}", "    // It is given that\
    \ the square of the length of the hypotenuse of a right\n    // angled triangle\
    \ is equal to the sum of the squares of the lengths of the\n    // other two sides.\
    \ So, if you can find the hypotenuse, you can use the\n    // formula to find\
    \ the missing side.\n    // Let's say we want to find the hypotenuse (the side\
    \ opposite the right\n    // angle, which we'll call 'c'). The formula we use\
    \ is:\n    // a^2 + b^2 = c^2\n    // In our example:\n    // 3^2 + 4^2 = 5^2\n\
    \    // We already know the values of a, b and c, and we can use those values\n\
    \    // to find the hypotenuse. This is what the formula would look like:\n  \
    \  // 3^2 + 4^2 = 5^2\n    // 9 + 16 = 25\n    // 25 = 25\n    // We know that\
    \ 25 is equal to 25 so we can conclude that 3, 4 and 5 form a\n    // right-angled\
    \ triangle.\n    // Let's say we have a different set of numbers and we want to\
    \ find out if\n    // they form a right-angled triangle. For example:\n    //\
    \ 1, 2, 3\n    // Now if we were to use the formula and plug in the values we\
    \ have:\n    // 1^2 + 2^2 = 3^2\n    // 1 + 4 = 9\n    // 5 = 9\n    // Since\
    \ 5 is not equal to 9, we can conclude that 1, 2 and 3 do not form a\n    // right-angled\
    \ triangle.\n    //\n    // Let's do the same for 1, 2, 4:\n    // 1^2 + 2^2 =\
    \ 4^2\n    // 1 + 4 = 16\n    // 5 = 16\n    // The two numbers are not equal,\
    \ so we know that 1, 2 and 4 do not form a\n    // right-angled triangle.\n  \
    \  // Now let's find out if 1, 2 and 5 form a right-angled triangle:\n    // 1^2\
    \ + 2^2 = 5^2\n    // 1 + 4 = 25\n    // 5 = 25\n    // The two numbers are equal,\
    \ so we know that 1, 2 and 5 form a\n    //", "\tif ($a>0 && $b>0 && $c>0) {\n\
    \t\tif ($a*$a == $b*$b + $c*$c || $b*$b == $a*$a + $c*$c || $c*$c == $a*$a + $b*$b)\
    \ {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n", "    if (pow($a, 2)\
    \ + pow($b, 2) == pow($c, 2)){\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\necho right_angle_triangle(1, 2, 3);\n", "    $sides = array($a,\
    \ $b, $c);\n    sort($sides);\n    return pow($sides[0], 2) + pow($sides[1], 2)\
    \ == pow($sides[2], 2);\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
