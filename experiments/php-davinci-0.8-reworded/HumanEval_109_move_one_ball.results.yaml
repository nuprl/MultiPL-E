language: php
name: HumanEval_109_move_one_ball
results:
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n\tif(empty($arr)) {\n\t\treturn true;\n\t}\n\t\
    $flag = false;\n\t$sub_arr = [];\n\tfor($i = 0; $i < count($arr); $i++) {\n\t\t\
    if($i == 0) {\n\t\t\t$sub_arr[] = $arr[$i];\n\t\t}\n\t\telse {\n\t\t\tif($sub_arr[count($sub_arr)\
    \ - 1] > $arr[$i]) {\n\t\t\t\t$flag = true;\n\t\t\t\tarray_unshift($sub_arr, $arr[$i]);\n\
    \t\t\t}\n\t\t\telse {\n\t\t\t\t$sub_arr[] = $arr[$i];\n\t\t\t}\n\t\t}\n\t}\n\t\
    if($flag) {\n\t\treturn false;\n\t}\n\treturn true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5jt5glh9.php:54\n\
    Stack trace:\n#0 /tmp/tmp5jt5glh9.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp5jt5glh9.php\
    \ on line 54\n"
  timestamp: 1659823782
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    // If the array is empty, return true\n  \
    \  if (count($arr) === 0) {\n        return true;\n    }\n    // Get the number\
    \ of right shifts needed to obtain the sorted array\n    $shifts = min($arr);\n\
    \    // Create a new array by performing the right shifts\n    $newArr = array();\n\
    \    for ($i = 0; $i < count($arr); $i++) {\n        $newArr[$i] = $arr[($i +\
    \ $shifts) % count($arr)];\n    }\n    // Return the sorted array\n    return\
    \ $newArr;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprfpp95rh.php:44\n\
    Stack trace:\n#0 /tmp/tmprfpp95rh.php(51): test()\n#1 {main}\n  thrown in /tmp/tmprfpp95rh.php\
    \ on line 44\n"
  timestamp: 1659823782
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n\t$non_decreasing = true;\n\tfor ($i = 0; $i <\
    \ sizeof($arr); $i++) {\n\t\tif ($arr[$i] > $arr[$i + 1]) {\n\t\t\t$non_decreasing\
    \ = false;\n\t\t}\n\t}\n\tif ($non_decreasing) {\n\t\treturn true;\n\t} else {\n\
    \t\t$last = array_pop($arr);\n\t\tarray_unshift($arr, $last);\n\t\treturn move_one_ball($arr);\n\
    \t}\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Warning: Undefined array key 5 in /tmp/tmpsc5qfcqe.php on line 26


    Warning: Undefined array key 5 in /tmp/tmpsc5qfcqe.php on line 26


    Warning: Undefined array key 5 in /tmp/tmpsc5qfcqe.php on line 26


    Warning: Undefined array key 5 in /tmp/tmpsc5qfcqe.php on line 26


    Warning: Undefined array key 5 in /tmp/tmpsc5qfcqe.php on line 26


    Warning: Undefined array key 5 in /tmp/tmpsc5qfcqe.php on line 26


    Warning: Undefined array key 5 in /tmp/tmpsc5qfcqe.php on line 26


    Warning: Undefined array key 5 in /tmp/tmpsc5qfcqe.php on line 26


    Warning: Undefined array key 5 in /tmp/tmpsc5qfcqe.php on line 26


    Warning: Undefined array key 5 in /tmp/tmpsc5qfcqe.php on line 26


    Warning: Undefined array key 5 in /tmp/tmpsc5qfcqe.php on line 26


    Warning: Undefined array key 5 in /tmp/tmpsc5qfcqe.php on line 26


    Warning: Undefined array key 5 in /tmp/tmpsc5qfcqe.php on line 26


    Warning: Undefined array key 5 in /tmp/tmpsc5qfcqe.php on line 26


    Warning: Undefined array key 5 in /tmp/tmpsc5qfcqe.php on line 26


    Warning: Undefined array key 5 in /tmp/tmpsc5qfcqe.php on line 26


    Warning: Undefined array key 5 in /tmp/tmpsc5qfcqe.php on line 26


    Warning: Undefined array key 5 in /tmp/tmpsc5qfcqe.php on line 26


    Warning: Undefined array key 5 in /tmp/tmpsc5qfcqe.php on line 26


    Warning: Undefined array key 5 in /tmp/tmpsc5qfcqe.php on line 26


    Warning: Undefined array key 5 in /tmp/tmpsc5qfcqe.php on line 26


    Warning: Undefined array key 5 in /tmp/tmpsc5qfcqe.php on line 26


    Warning: Undefined array key 5 in /tmp/tmpsc5qfcqe.php on line 26


    Warning: Undefined array key 5 in /tmp/tmpsc5qfcqe.php on line 26


    Warning: Undefined array key 5 in /tmp/tmpsc5qfcqe.php on line 26


    Warning: Undefined array key 5 in /tmp/tmpsc5qfcqe.php on line 26


    Warning: Undefined array key 5 in /tmp/tmpsc5qfcqe.php on line 26


    Warning: Undefined array key 5 in /tmp/tmpsc5qfcqe.php on line 26


    Warning: Undefined array key 5 in /tmp/tmpsc5qfcqe.php on line 26


    Warning: Undefined array key 5 in /tmp/tmpsc5qfcqe.php on line 26


    Warning: Undefined array key 5 in /tm'
  timestamp: 1659823782
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) return true;\n    $len =\
    \ count($arr);\n    $i = 0;\n    while ($i < $len - 1) {\n        if ($arr[$i]\
    \ <= $arr[$i + 1]) {\n            $i++;\n        } else {\n            $arr[$i]\
    \ = $arr[$i] + $arr[$i + 1];\n            $arr[$i + 1] = $arr[$i] - $arr[$i +\
    \ 1];\n            $arr[$i] = $arr[$i] - $arr[$i + 1];\n            $i++;\n  \
    \      }\n    }\n    return true;\n}\n$arr = array(3, 4, 5, 1, 2);\nmove_one_ball($arr);\n\
    print_r($arr);\necho \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\nmove_one_ball($arr);\n\
    print_r($arr);\necho \"\\n\";\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 3\n    [1] => 4\n    [2] => 5\n    [3] => 1\n    [4]\
    \ => 2\n)\n\nArray\n(\n    [0] => 3\n    [1] => 5\n    [2] => 4\n    [3] => 1\n\
    \    [4] => 2\n)\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoeiadwwf.php:54\n\
    Stack trace:\n#0 /tmp/tmpoeiadwwf.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpoeiadwwf.php\
    \ on line 54\n"
  timestamp: 1659823782
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n\t$len = count($arr);\n\t$sorted_array = $arr;\n\
    \tsort($sorted_array);\n\t$n = 0;\n\t$sorted = true;\n\twhile($n < $len) {\n\t\
    \tif($arr[$n] != $sorted_array[$n]) {\n\t\t\t$sorted = false;\n\t\t\tbreak;\n\t\
    \t}\n\t\t$n++;\n\t}\n\tif($sorted) return true;\n\t$n = 0;\n\t$rotate_count =\
    \ 0;\n\twhile($n < $len) {\n\t\tif($arr[$n] != $sorted_array[$n]) {\n\t\t\t$i\
    \ = $n;\n\t\t\twhile($i < $len) {\n\t\t\t\tif($arr[$i] == $sorted_array[$n]) {\n\
    \t\t\t\t\t$rotate_count += $i - $n;\n\t\t\t\t\t$temp = $arr[$i];\n\t\t\t\t\t$arr[$i]\
    \ = $arr[$n];\n\t\t\t\t\t$arr[$n] = $temp;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\
    \t$i++;\n\t\t\t}\n\t\t}\n\t\t$n++;\n\t}\n\t$n = 0;\n\t$sorted = true;\n\twhile($n\
    \ < $len) {\n\t\tif($arr[$n] != $sorted_array[$n]) {\n\t\t\t$sorted = false;\n\
    \t\t\tbreak;\n\t\t}\n\t\t$n++;\n\t}\n\tif($sorted) return true;\n\treturn false;\n\
    }\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqye8by9q.php:75\n\
    Stack trace:\n#0 /tmp/tmpqye8by9q.php(80): test()\n#1 {main}\n  thrown in /tmp/tmpqye8by9q.php\
    \ on line 75\n"
  timestamp: 1659823782
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    // fill in the code\n}\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpolb7x237.php:31\n\
    Stack trace:\n#0 /tmp/tmpolb7x237.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpolb7x237.php\
    \ on line 31\n"
  timestamp: 1659823782
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $elements = count($arr);\n    for ($i = 0;\
    \ $i < $elements; $i++) {\n        if ($arr[$i] > $arr[$i + 1]) {\n          \
    \  return false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpndqk7y1g.php:38\n\
    Stack trace:\n#0 /tmp/tmpndqk7y1g.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpndqk7y1g.php\
    \ on line 38\n"
  timestamp: 1659823782
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $start = 0;\n    $end = count($arr) - 1;\n\
    \    while ($start < $end) {\n        if ($arr[$start] < $arr[$end]) {\n     \
    \       return true;\n        }\n        $start += 1;\n        $end -= 1;\n  \
    \  }\n    return false;\n}\n\n$arr = array(3, 5, 4, 1, 2);\nvar_dump(move_one_ball($arr));\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "bool(false)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb7sa9tgl.php:43\n\
    Stack trace:\n#0 /tmp/tmpb7sa9tgl.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpb7sa9tgl.php\
    \ on line 43\n"
  timestamp: 1659823782
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n  if (sizeof($arr) == 0) {\n    return true;\n\
    \  }\n\n  if (sizeof($arr) == 1) {\n    return true;\n  }\n\n  $first = $arr[0];\n\
    \  $last = $arr[sizeof($arr) - 1];\n  $index = -1;\n  $count = 0;\n  $returnVal\
    \ = true;\n\n  // find the point after which the array is non-decreasing\n  for\
    \ ($i = 1; $i < sizeof($arr); $i++) {\n    if ($arr[$i] < $arr[$i - 1]) {\n  \
    \    $index = $i;\n      break;\n    }\n  }\n\n  // if no such point is found,\
    \ just return true\n  if ($index == -1) {\n    return true;\n  }\n  else {\n \
    \   // find how many values in the array are less than the \n    // last element\n\
    \    for ($i = 0; $i < sizeof($arr); $i++) {\n      if ($arr[$i] < $last) {\n\
    \        $count++;\n      }\n    }\n\n    // if the count is one more than the\
    \ number of elements \n    // before the index, then the last element can be \n\
    \    // inserted at the index and get non-decreasing order\n    if ($count ==\
    \ $index + 1) {\n      return true;\n    }\n    else {\n      return false;\n\
    \    }\n  }\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp30jc_0dq.php:76\n\
    Stack trace:\n#0 /tmp/tmp30jc_0dq.php(83): test()\n#1 {main}\n  thrown in /tmp/tmp30jc_0dq.php\
    \ on line 76\n"
  timestamp: 1659823782
- exit_code: 0
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if(empty($arr)) {\n        return true;\n\
    \    }\n    $arrc = $arr;\n    sort($arrc);\n    $result = false;\n    for($i\
    \ = 0; $i < count($arr); $i++) {\n        $temp = array_shift($arr);\n       \
    \ array_push($arr, $temp);\n        if($arr === $arrc) {\n            $result\
    \ = true;\n            break;\n        }\n    }\n    return $result;\n}\n\necho\
    \ move_one_ball(array(1, 2, 3, 4, 5));\necho move_one_ball(array(3, 4, 5, 1, 2));\n\
    echo move_one_ball(array(3, 5, 4, 1, 2));\necho move_one_ball(array());\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '111'
  timestamp: 1659823782
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (count($arr) === 0) return true;\n    $min_index\
    \ = -1;\n    $min_value = min($arr);\n    foreach ($arr as $index => $value) {\n\
    \        if ($value === $min_value) {\n            $min_index = $index;\n    \
    \        break;\n        }\n    }\n    return $min_index == 0;\n}\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmg301w6s.php:40\n\
    Stack trace:\n#0 /tmp/tmpmg301w6s.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpmg301w6s.php\
    \ on line 40\n"
  timestamp: 1659823782
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if($len < 2) return\
    \ true;\n    $max = $arr[0];\n    for($i = 1; $i < $len; $i++) {\n        if($arr[$i]\
    \ < $max) {\n            return false;\n        }\n        $max = max($max, $arr[$i]);\n\
    \    }\n    return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\necho \"\
    \\n\";\n$arr = array(3, 4, 5, 1, 2, 3);\necho move_one_ball($arr);\necho \"\\\
    n\";\n$arr = array(3, 4, 5, 1, 2, 6);\necho move_one_ball($arr);\necho \"\\n\"\
    ;\n$arr = array(3, 4, 5, 1, 2, 7);\necho move_one_ball($arr);\necho \"\\n\";\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2aufkzud.php:56\n\
    Stack trace:\n#0 /tmp/tmp2aufkzud.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp2aufkzud.php\
    \ on line 56\n"
  timestamp: 1659823782
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n\n}\n\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp__y5pyov.php:32\n\
    Stack trace:\n#0 /tmp/tmp__y5pyov.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp__y5pyov.php\
    \ on line 32\n"
  timestamp: 1659823782
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (count($arr) < 2) {\n        return false;\n\
    \    }\n\n    $sorted = $arr;\n    sort($sorted);\n\n    $s = 0;\n    while ($s\
    \ < count($arr) && $arr[$s] === $sorted[$s]) {\n        $s++;\n    }\n\n    $e\
    \ = count($arr) - 1;\n    while ($e > $s && $arr[$e] === $sorted[$e]) {\n    \
    \    $e--;\n    }\n\n    if ($e - $s == 1) {\n        return true;\n    }\n\n\
    \    return false;\n}\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp64yx8vp_.php:52\n\
    Stack trace:\n#0 /tmp/tmp64yx8vp_.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp64yx8vp_.php\
    \ on line 52\n"
  timestamp: 1659823782
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (!count($arr)) {\n        return true;\n\
    \    }\n    return _move_one_ball($arr, 1, 0);\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function _move_one_ball()\
    \ in /tmp/tmp7taebdg0.php:27\nStack trace:\n#0 /tmp/tmp7taebdg0.php(31): move_one_ball(Array)\n\
    #1 /tmp/tmp7taebdg0.php(35): candidate(Array)\n#2 /tmp/tmp7taebdg0.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmp7taebdg0.php on line 27\n"
  timestamp: 1659823782
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $arr = array_values($arr);\n    if (count($arr)\
    \ === 0) {\n        return true;\n    }\n    $arr_length = count($arr);\n    for\
    \ ($i = 1; $i < $arr_length; $i++) {\n        $arr[$i] = $arr[$i] + 1;\n     \
    \   if (is_sorted($arr)) {\n            return true;\n        }\n        $arr[$i]\
    \ = $arr[$i] - 1;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_sorted() in\
    \ /tmp/tmpl2zk22tw.php:31\nStack trace:\n#0 /tmp/tmpl2zk22tw.php(40): move_one_ball(Array)\n\
    #1 /tmp/tmpl2zk22tw.php(44): candidate(Array)\n#2 /tmp/tmpl2zk22tw.php(51): test()\n\
    #3 {main}\n  thrown in /tmp/tmpl2zk22tw.php on line 31\n"
  timestamp: 1659823782
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n  // if array is empty, return true\n  if(count($arr)\
    \ === 0) return true;\n  // copy the array\n  $arr1 = $arr;\n  // sort the array\n\
    \  sort($arr1);\n  // check if the array is sorted\n  if($arr1 === $arr) return\
    \ true;\n  // count the number of elements in the array\n  $c = count($arr);\n\
    \  // loop through the array from the index $i\n  for($i = 0; $i < $c; $i++) {\n\
    \    // check if the numbers on the left of $i are sorted, if not, return false\n\
    \    if($i !== 0 && $arr[$i - 1] > $arr[$i]) return false;\n    // check if the\
    \ numbers on the right of $i are sorted, if not, return false\n    if($i !== $c\
    \ - 1 && $arr[$i + 1] < $arr[$i]) return false;\n  }\n  // return true\n  return\
    \ true;\n}\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx04glwy5.php:49\n\
    Stack trace:\n#0 /tmp/tmpx04glwy5.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpx04glwy5.php\
    \ on line 49\n"
  timestamp: 1659823782
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n\t$sorted = array_slice($arr, 0);\n\tsort($sorted);\n\
    \tif($arr == $sorted) {\n\t\treturn true;\n\t} else {\n\t\t$shifted = array_slice($arr,\
    \ 1);\n\t\t$last_element = $arr[0];\n\t\tarray_push($shifted, $last_element);\n\
    \t\treturn move_one_ball($shifted);\n\t}\n}\nfunction candidate(...$args) {\n\
    \    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    20480 bytes) in /tmp/tmp_s0_1f17.php on line 29

    '
  timestamp: 1659823782
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $count = count($arr);\n    $index = $count\
    \ - 1;\n    while ($index >= 0) {\n        if ($index == 0) {\n            return\
    \ true;\n        }\n        if ($arr[$index] < $arr[$index - 1]) {\n         \
    \   $temp = $arr[$index];\n            for ($i = $index; $i > 0; $i--) {\n   \
    \             $arr[$i] = $arr[$i - 1];\n            }\n            $arr[0] = $temp;\n\
    \            $index--;\n        } else {\n            $index--;\n        }\n \
    \   }\n    return false;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    echo \"<br>\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1<br>1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe32unn3h.php:56\n\
    Stack trace:\n#0 /tmp/tmpe32unn3h.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpe32unn3h.php\
    \ on line 56\n"
  timestamp: 1659823782
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n\tif (!$arr) {\n\t\treturn true;\n\t}\n\tfor ($i\
    \ = 1; $i < count($arr); $i++) {\n\t\tif ($arr[$i] < $arr[$i - 1]) {\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\treturn true;\n}\necho move_one_ball(array(3, 4, 5, 1,\
    \ 2)) ? 'true' : 'false';\necho PHP_EOL;\necho move_one_ball(array(3, 5, 4, 1,\
    \ 2)) ? 'true' : 'false';\necho PHP_EOL;\necho move_one_ball(array(3, 5, 4, 1,\
    \ 2, 3)) ? 'true' : 'false';\necho PHP_EOL;\necho move_one_ball(array(3, 4, 5,\
    \ 1, 2, 3)) ? 'true' : 'false';\necho PHP_EOL;\necho move_one_ball(array(3, 5,\
    \ 4, 2, 1)) ? 'true' : 'false';\necho PHP_EOL;\nfunction candidate(...$args) {\n\
    \    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "false\nfalse\nfalse\nfalse\nfalse\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpdwau105z.php:49\nStack trace:\n#0 /tmp/tmpdwau105z.php(56):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpdwau105z.php on line 49\n"
  timestamp: 1659823782
- exit_code: -1
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $count = count($arr);\n    for ($i = 0; $i\
    \ < $count; $i++) {\n        if ($arr[$i] == ($i + 1)) {\n            continue;\n\
    \        }\n        else {\n            $temp = $arr[$i];\n            $arr[$i]\
    \ = $arr[$temp - 1];\n            $arr[$temp - 1] = $temp;\n            $i--;\n\
    \        }\n    }\n    print_r($arr);\n    echo \"</br>\";\n    if ($arr == range(1,\
    \ $count)) {\n        return true;\n    }\n    else {\n        return false;\n\
    \    }\n}\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Timeout
  stderr: None
  stdout: 'b''Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4]
    => 5\n)\n</br>\nWarning: Undefined array key 9 in /tmp/tmp4_gehofb.php on line
    31\n\nWarning: Undefined array key -1 in /tmp/tmp4_gehofb.php on line 31\n'''
  timestamp: 1659979483
- exit_code: 0
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    // Write your code here\n    // To print results\
    \ to the standard output you can use print\n    // Example: print \"Hello world!\"\
    ;\n    $i = 0;\n    $move = 0;\n    if(empty($arr)){\n        return true;\n \
    \   }\n    while($i < count($arr)){\n        if($i != count($arr) - 1){\n    \
    \        if($arr[$i] > $arr[$i + 1]){\n                $move++;\n            }\n\
    \        }\n        $i++;\n    }\n    if($move <= 1){\n        return true;\n\
    \    }\n    return false;\n}\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979478
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n\tif (empty($arr)) {\n\t\treturn true;\n\t}\n\t\
    if (is_sorted($arr)) {\n\t\treturn true;\n\t}\n\tfor ($i = 0; $i < count($arr);\
    \ $i++) {\n\t\t$arr = insert_element($arr, $arr[$i]);\n\t\tif (is_sorted($arr))\
    \ {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_sorted() in\
    \ /tmp/tmpno4phvtf.php:27\nStack trace:\n#0 /tmp/tmpno4phvtf.php(39): move_one_ball(Array)\n\
    #1 /tmp/tmpno4phvtf.php(43): candidate(Array)\n#2 /tmp/tmpno4phvtf.php(50): test()\n\
    #3 {main}\n  thrown in /tmp/tmpno4phvtf.php on line 27\n"
  timestamp: 1659979478
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if($len == 0) {\n\
    \        return true;\n    }\n    $count = 0;\n    $max_moves = $len - 1;\n  \
    \  while($count < $max_moves) {\n        $swapped = false;\n        for($i = 0;\
    \ $i < $len - 1; $i++) {\n            if($arr[$i] > $arr[$i + 1]) {\n        \
    \        $temp = $arr[$i];\n                $arr[$i] = $arr[$i + 1];\n       \
    \         $arr[$i + 1] = $temp;\n                $swapped = true;\n          \
    \  }\n        }\n        if(!$swapped) {\n            return true;\n        }\n\
    \        $count++;\n    }\n    return false;\n}\n$arr = array(3, 5, 4, 1, 2);\n\
    echo move_one_ball($arr);\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkoac1rr8.php:56\n\
    Stack trace:\n#0 /tmp/tmpkoac1rr8.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpkoac1rr8.php\
    \ on line 56\n"
  timestamp: 1659979478
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $count = count($arr);\n    $result = true;\n\
    \    for ($i = 0; $i < $count; $i++) {\n        $thisVal = $arr[$i];\n       \
    \ if ($i < $count - 1) {\n            $nextVal = $arr[$i + 1];\n            if\
    \ ($thisVal > $nextVal) {\n                $result = false;\n                break;\n\
    \            }\n        }\n    }\n    return $result;\n}\necho move_one_ball(array(3,\
    \ 4, 5, 1, 2)) . \"\\n\";\necho move_one_ball(array(3, 5, 4, 1, 2)) . \"\\n\"\
    ;\necho move_one_ball(array(3, 5, 4, 1, 1)) . \"\\n\";\necho move_one_ball(array(3,\
    \ 5, 4, 2, 1)) . \"\\n\";\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvwj5o0kt.php:47\n\
    Stack trace:\n#0 /tmp/tmpvwj5o0kt.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpvwj5o0kt.php\
    \ on line 47\n"
  timestamp: 1659979478
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $arr1 = $arr;\n    rsort($arr1);\n    for ($i = 0; $i < count($arr);\
    \ $i++) {\n        if ($arr[$i] !== $arr1[$i]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n   \
    \ return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzmfqmer9.php:42\n\
    Stack trace:\n#0 /tmp/tmpzmfqmer9.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpzmfqmer9.php\
    \ on line 42\n"
  timestamp: 1659979478
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n  $count = count($arr);\n  $i = 0;\n  for ($j\
    \ = 1; $j < $count; $j++) {\n    if ($arr[$j] < $arr[$i]) {\n      $i = $j;\n\
    \    }\n  }\n  $count = 0;\n  for ($j = $i + 1; $j < count($arr); $j++) {\n  \
    \  if ($arr[$j] < $arr[$i]) {\n      $count++;\n    }\n  }\n  if ($count > 0)\
    \ {\n    return false;\n  }\n  $count = 0;\n  for ($j = $i - 1; $j >= 0; $j--)\
    \ {\n    if ($arr[$j] > $arr[$i]) {\n      $count++;\n    }\n  }\n  if ($count\
    \ > 0) {\n    return false;\n  }\n  return true;\n}\n\n$input0 = array(3, 4, 5,\
    \ 1, 2);\n$input1 = array(3, 5, 4, 1, 2);\n\necho move_one_ball($input0);\necho\
    \ move_one_ball($input1);\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaqr3jdsj.php:62\n\
    Stack trace:\n#0 /tmp/tmpaqr3jdsj.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpaqr3jdsj.php\
    \ on line 62\n"
  timestamp: 1659979478
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n\t$size = count($arr);\n\tif ($size == 0) return\
    \ true;\n\tfor ($i = 0; $i < $size - 1; $i++) {\n\t\tif ($arr[$i] > $arr[$i +\
    \ 1]) {\n\t\t\t// echo $arr[$i];\n\t\t\t// echo $arr[$i + 1];\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\n$arr1 = array(3,\
    \ 5, 4, 1, 2);\n$arr2 = array(3, 1, 4, 5, 2);\n\necho move_one_ball($arr) . PHP_EOL;\n\
    echo move_one_ball($arr1) . PHP_EOL;\necho move_one_ball($arr2) . PHP_EOL;\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzq5mymfz.php:48\n\
    Stack trace:\n#0 /tmp/tmpzq5mymfz.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpzq5mymfz.php\
    \ on line 48\n"
  timestamp: 1659979478
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $count = count($arr);\n    if ($count <= 1)\
    \ {\n        return true;\n    }\n\n    $min = $arr[0];\n    $min_idx = 0;\n \
    \   for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i] < $min) {\n      \
    \      $min = $arr[$i];\n            $min_idx = $i;\n        }\n    }\n\n    if\
    \ ($min_idx === 0) {\n        $idx = 1;\n        while ($idx < $count && $arr[$idx]\
    \ > $arr[$idx - 1]) {\n            $idx++;\n        }\n        return $idx ===\
    \ $count;\n    } else {\n        $idx = 0;\n        while ($idx < $min_idx &&\
    \ $arr[$idx] < $arr[$idx + 1]) {\n            $idx++;\n        }\n        return\
    \ $idx === $min_idx;\n    }\n}\n\nassert(move_one_ball(array(3, 4, 5, 1, 2)));\n\
    assert(move_one_ball(array(3, 5, 4, 1, 2)) === false);\nassert(move_one_ball(array(1,\
    \ 2, 3, 4, 5)));\nassert(move_one_ball(array(5, 4, 3, 2, 1)) === false);\nassert(move_one_ball(array(1,\
    \ 2, 3, 4, 5, 6)));\nassert(move_one_ball(array(1, 2, 3, 4, 6, 5)) === false);\n\
    assert(move_one_ball(array(1, 2, 3, 4, 5, 6, 7)));\nassert(move_one_ball(array(1,\
    \ 2, 3, 4, 5, 7, 6)) === false);\nassert(move_one_ball(array(1, 2, 3, 4, 5, 6,\
    \ 7, 8)));\nassert(move_one_ball(array(1, 2, 3, 4, 5, 6, 8, 7)) === false);\n\
    assert(move_one_ball(array(1,\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp0bmdw6k4.php on line 64

    '
  timestamp: 1659979478
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) return\
    \ true;\n    $o = [];\n    for ($i = 0; $i < $len; $i++) {\n        $o[$i] = $arr[$i];\n\
    \    }\n    sort($o);\n    $i = 0;\n    while ($i < $len && $arr[$i] == $o[$i])\
    \ {\n        $i++;\n    }\n    if ($i == $len) return true;\n    $j = $i + 1;\n\
    \    while ($j < $len && $arr[$j] == $o[$j]) {\n        $j++;\n    }\n    if ($j\
    \ == $len) return true;\n    if ($arr[$i] == $o[$j] && $arr[$j] == $o[$i]) {\n\
    \        $arr[$i] = $o[$i];\n        $arr[$j] = $o[$j];\n        return true;\n\
    \    }\n    return false;\n}\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbk54llhs.php:53\n\
    Stack trace:\n#0 /tmp/tmpbk54llhs.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpbk54llhs.php\
    \ on line 53\n"
  timestamp: 1659979478
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (count($arr) === 0) {\n        return true;\n\
    \    }\n    $min = $arr[0];\n    $min = $arr[0];\n    for ($i = 1; $i < count($arr);\
    \ $i++) {\n        if ($arr[$i] < $min) {\n            return false;\n       \
    \ }\n        $min = $arr[$i];\n    }\n    return true;\n}\n\n$arr = array(3, 4,\
    \ 5, 1, 2);\necho move_one_ball($arr);\necho PHP_EOL;\n$arr = array(3, 5, 4, 1,\
    \ 2);\necho move_one_ball($arr);\necho PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq7b5qpwl.php:49\n\
    Stack trace:\n#0 /tmp/tmpq7b5qpwl.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpq7b5qpwl.php\
    \ on line 49\n"
  timestamp: 1659979478
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (count($arr) == 0) {\n        return true;\n\
    \    }\n    $sorted = true;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n\
    \        if ($arr[$i] > $arr[$i + 1]) {\n            $sorted = false;\n      \
    \      break;\n        }\n    }\n    if ($sorted) {\n        return true;\n  \
    \  } else {\n        for ($i = count($arr) - 1; $i > 0; $i--) {\n            $arr[$i]\
    \ = $arr[$i - 1];\n        }\n        $arr[0] = $arr[count($arr) - 1];\n     \
    \   return move_one_ball($arr);\n    }\n}\nfunction candidate(...$args) {\n  \
    \  return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    262144 bytes) in /tmp/tmpqr0sbat6.php on line 41

    '
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n  if(count($arr) === 0) {\n    return true;\n\
    \  }\n  for($i = 0; $i < count($arr); $i++) {\n    if($arr[$i] !== min($arr))\
    \ {\n      array_push($arr, array_shift($arr));\n    } else {\n      array_push($arr,\
    \ array_shift($arr));\n      return true;\n    }\n  }\n  return false;\n}\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxkklue03.php:44\n\
    Stack trace:\n#0 /tmp/tmpxkklue03.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpxkklue03.php\
    \ on line 44\n"
  timestamp: 1659979478
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n  // Your code here...\n}\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf8m3jgt_.php:31\n\
    Stack trace:\n#0 /tmp/tmpf8m3jgt_.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpf8m3jgt_.php\
    \ on line 31\n"
  timestamp: 1659979478
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n\t// Write your code here\n\t$result = array();\n\
    \t$flag = false;\n\tif(count($arr) == 0) {\n\t\treturn true;\n\t}\n\t$result =\
    \ moveRight($arr);\n\tfor($i = 0; $i < count($result); $i++) {\n\t\tif($i+1 <\
    \ count($result)) {\n\t\t\tif($result[$i] > $result[$i+1]) {\n\t\t\t\t$flag =\
    \ false;\n\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\t$flag = true;\n\t\t\t}\n\t\t\
    }\n\t}\n\treturn $flag;\n}\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function moveRight() in\
    \ /tmp/tmp371iivjx.php:30\nStack trace:\n#0 /tmp/tmp371iivjx.php(44): move_one_ball(Array)\n\
    #1 /tmp/tmp371iivjx.php(48): candidate(Array)\n#2 /tmp/tmp371iivjx.php(55): test()\n\
    #3 {main}\n  thrown in /tmp/tmp371iivjx.php on line 30\n"
  timestamp: 1659979478
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    else {\n        $arrSize = count($arr);\n        $array = $arr;\n\
    \        $arraySize = count($array);\n        for ($j = 0; $j < $arraySize; $j++)\
    \ {\n            for ($i = 1; $i < $arraySize; $i++) {\n                if ($array[$i\
    \ - 1] > $array[$i]) {\n                    $temp = $array[$i];\n            \
    \        $array[$i] = $array[$i - 1];\n                    $array[$i - 1] = $temp;\n\
    \                }\n            }\n        }\n        for ($k = 0; $k < $arrSize;\
    \ $k++) {\n            if ($arr[$k] != $array[$k]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n}\necho move_one_ball(array(3,\
    \ 4, 5, 1, 2));\necho \"\\n\";\necho move_one_ball(array(3, 5, 4, 1, 2));\necho\
    \ \"\\n\";\necho move_one_ball(array());\necho \"\\n\";\necho move_one_ball(array(1,\
    \ 2, 3, 4, 5));\necho \"\\n\";\necho move_one_ball(array(1, 2, 3, 4, 5, 6));\n\
    echo \"\\n\";\necho move_one_ball(array(1, 2, 3, 4, 5, 6, 7));\necho \"\\n\";\n\
    echo move_one_ball(array(4, 1, 2, 3, 5, 6, 7));\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n1\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxaig3_37.php:67\n\
    Stack trace:\n#0 /tmp/tmpxaig3_37.php(74): test()\n#1 {main}\n  thrown in /tmp/tmpxaig3_37.php\
    \ on line 67\n"
  timestamp: 1659979478
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $count = count($arr);\n    for ($i = 0; $i\
    \ < $count - 1; $i++) {\n        if ($arr[$i] > $arr[$i + 1]) {\n            $temp\
    \ = $arr[$i];\n            $arr[$i] = $arr[$i + 1];\n            $arr[$i + 1]\
    \ = $temp;\n        }\n    }\n    for ($i = 0; $i < $count - 1; $i++) {\n    \
    \    if ($arr[$i] > $arr[$i + 1]) {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\n\n$test_case_no = 1;\n\nassert(move_one_ball(array(3,\
    \ 4, 5, 1, 2)) == true, \"Test Case $test_case_no: Failed\");\n$test_case_no++;\n\
    \nassert(move_one_ball(array(3, 5, 4, 1, 2)) == false, \"Test Case $test_case_no:\
    \ Failed\");\n$test_case_no++;\n\nassert(move_one_ball(array(2, 3, 4, 5, 1)) ==\
    \ true, \"Test Case $test_case_no: Failed\");\n$test_case_no++;\n\nassert(move_one_ball(array(4,\
    \ 3, 5, 1, 2)) == true, \"Test Case $test_case_no: Failed\");\n$test_case_no++;\n\
    \nassert(move_one_ball(array(4, 5, 3, 1, 2)) == false, \"Test Case $test_case_no:\
    \ Failed\");\n$test_case_no++;\n\nassert(move_one_ball(array(4, 5, 2, 1, 3)) ==\
    \ false, \"Test Case $test_case_no: Failed\");\n$test_case_no++;\n\nassert(move_one_ball(array(4,\
    \ 5, 1, 2, 3)) == true, \"Test Case $test_case_no: Failed\");\n$test_case_no++;\n\
    \nassert(move_one_ball(array(1, 2, 3, 4, 5)) == true, \"Test Case $test_case_\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "Test", expecting ")" in /tmp/tmp4co0rxo2.php
    on line 69

    '
  timestamp: 1659979478
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if(count($arr) == 0) {\n        return true;\n\
    \    }\n\n    $smallest_index = 0;\n    $largest_index = count($arr) - 1;\n  \
    \  $smallest_element = $arr[$smallest_index];\n    $largest_element = $arr[$largest_index];\n\
    \n    // find largest index\n    for($i = 1; $i < count($arr); $i++) {\n     \
    \   if($arr[$i] > $largest_element) {\n            $largest_index = $i;\n    \
    \        $largest_element = $arr[$i];\n        }\n    }\n\n    // find smallest\
    \ index\n    for($i = $largest_index - 1; $i >= 0; $i--) {\n        if($arr[$i]\
    \ < $smallest_element) {\n            $smallest_index = $i;\n            $smallest_element\
    \ = $arr[$i];\n        }\n    }\n\n    if($smallest_index == 0 && $largest_index\
    \ == count($arr) - 1) {\n        return true;\n    }\n\n    return false;\n}\n\
    \nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqr6me2bq.php:61\n\
    Stack trace:\n#0 /tmp/tmpqr6me2bq.php(68): test()\n#1 {main}\n  thrown in /tmp/tmpqr6me2bq.php\
    \ on line 61\n"
  timestamp: 1659979478
- exit_code: 0
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $min = min($arr);\n    $index = array_search($min, $arr);\n    $counter\
    \ = 0;\n    while($index != $counter) {\n        $a = $arr[0];\n        array_shift($arr);\n\
    \        array_push($arr, $a);\n        $counter++;\n    }\n    for ($i = 0; $i\
    \ < count($arr) - 1; $i++) {\n        if ($arr[$i] > $arr[$i + 1]) {\n       \
    \     return false;\n        }\n    }\n    return true;\n}\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979478
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n  if (!empty($arr)) {\n    if ($arr[0] == min($arr))\
    \ {\n      return true;\n    } else {\n      return false;\n    }\n  } else {\n\
    \    return true;\n  }\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvjfhrugt.php:40\n\
    Stack trace:\n#0 /tmp/tmpvjfhrugt.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpvjfhrugt.php\
    \ on line 40\n"
  timestamp: 1659979478
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    // Write your code here\n    // To print results\
    \ to the standard output you can use print\n    // Example: print \"Hello world!\"\
    ;\n    if(empty($arr)) return true;\n    $max = max($arr);\n    $index = array_search($max,\
    \ $arr);\n    $i = $index;\n    while($i != 0) {\n        $i--;\n        if($arr[$i]\
    \ > $max) return false;\n    }\n    return true;\n}\n\nprint_r(move_one_ball(array(3,\
    \ 4, 5, 1, 2)));\nprint_r(move_one_ball(array(3, 5, 4, 1, 2)));\nprint_r(move_one_ball(array(3,\
    \ 4, 5, 1, 2, 3)));\nprint_r(move_one_ball(array(2, 3, 4, 1, 5)));\nprint_r(move_one_ball(array(5,\
    \ 4, 3, 2, 1)));\nprint_r(move_one_ball(array(1, 2, 3, 4, 5)));\nprint_r(move_one_ball(array(1,\
    \ 5, 4, 3, 2)));\nprint_r(move_one_ball(array(5, 1, 2, 3, 4)));\nprint_r(move_one_ball(array(2,\
    \ 3, 1, 4, 5)));\nprint_r(move_one_ball(array(3, 1, 2, 4, 5)));\nprint_r(move_one_ball(array(5,\
    \ 4, 1, 2, 3)));\nprint_r(move_one_ball(array(1, 2, 4, 3, 5)));\nprint_r(move_one_ball(array(1,\
    \ 3, 2, 4, 5)));\nprint_r(move_one_ball(array(3, 1, 2, 4, 5)));\nprint_r(move_one_ball(array(3,\
    \ 1, 2, 4, 5)));\nprint_r(move_one_ball(array(2, 3, 1, 4, 5)));\nprint_r(move_one_ball\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmpk9yh5we1.php
    on line 55

    '
  timestamp: 1659979478
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    // Use the built-in sort function to sort\
    \ the array and also count\n    // the number of right shift operations.\n   \
    \ $sorted_arr = $arr;\n    $len = count($arr);\n    sort($sorted_arr);\n    $num_shift\
    \ = 0;\n    for ($i = 0; $i < $len; $i++) {\n        if ($arr[$i] != $sorted_arr[$i])\
    \ {\n            $num_shift += 1;\n        }\n    }\n    // If the number of right\
    \ shift operations is greater than 1, it is\n    // not possible to achieve non-decreasing\
    \ order by performing only\n    // one right shift operation.\n    if ($num_shift\
    \ > 1) {\n        return false;\n    }\n    // Otherwise, the number of right\
    \ shift operations is 1, so it is possible to\n    // achieve non-decreasing order\
    \ by performing only one right shift operation.\n    return true;\n}\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7s6_kf90.php:50\n\
    Stack trace:\n#0 /tmp/tmp7s6_kf90.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp7s6_kf90.php\
    \ on line 50\n"
  timestamp: 1659979478
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    // Write your code here\n}\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcy1bvcp0.php:31\n\
    Stack trace:\n#0 /tmp/tmpcy1bvcp0.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpcy1bvcp0.php\
    \ on line 31\n"
  timestamp: 1659979478
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $tempArr = $arr;\n    sort($tempArr);\n  \
    \  $diff = array_diff_assoc($tempArr, $arr);\n    if (empty($diff)) return false;\n\
    \    $lastIndex = end($diff);\n    $arr[$lastIndex] = $arr[0];\n    $start = array_slice($arr,\
    \ 1);\n    $start[] = $tempArr[$lastIndex];\n    for ($i = 0; $i < count($arr);\
    \ $i++) {\n        $arr = $start;\n        sort($arr);\n        $start = array_slice($arr,\
    \ 1);\n        $start[] = $tempArr[$lastIndex];\n        if ($arr == $tempArr)\
    \ return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 5 in /tmp/tmpokjwy4p7.php on line 31\n\n\
    Warning: Undefined array key 5 in /tmp/tmpokjwy4p7.php on line 36\n\nWarning:\
    \ Undefined array key 5 in /tmp/tmpokjwy4p7.php on line 36\n\nWarning: Undefined\
    \ array key 5 in /tmp/tmpokjwy4p7.php on line 36\n\nWarning: Undefined array key\
    \ 5 in /tmp/tmpokjwy4p7.php on line 36\n\nWarning: Undefined array key 5 in /tmp/tmpokjwy4p7.php\
    \ on line 36\n\nWarning: Undefined array key 5 in /tmp/tmpokjwy4p7.php on line\
    \ 36\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpokjwy4p7.php:47\n\
    Stack trace:\n#0 /tmp/tmpokjwy4p7.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpokjwy4p7.php\
    \ on line 47\n"
  timestamp: 1659979478
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n\tif(empty($arr)) return true;\n\t$index = array_search(min($arr),\
    \ $arr);\n\treturn ($index == 0) || (empty(array_slice($arr, 0, $index, true)));\n\
    }\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr) ? 'true' : 'false';\n\
    echo PHP_EOL;\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr) ? 'true'\
    \ : 'false';\necho PHP_EOL;\n$arr = array(1, 2, 3, 4, 5);\necho move_one_ball($arr)\
    \ ? 'true' : 'false';\necho PHP_EOL;\n$arr = array(5, 4, 3, 2, 1);\necho move_one_ball($arr)\
    \ ? 'true' : 'false';\necho PHP_EOL;\n$arr = array(1, 2, 1, 2, 1);\necho move_one_ball($arr)\
    \ ? 'true' : 'false';\necho PHP_EOL;\n$arr = array(1, 2, 3, 2, 1);\necho move_one_ball($arr)\
    \ ? 'true' : 'false';\necho PHP_EOL;\n$arr = array(1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12, 13, 14, 15, 16, 17, 18, 19, 20);\necho move_one_ball($arr) ? 'true' : 'false';\n\
    echo PHP_EOL;\n$arr = array(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1,\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmprmob4gdk.php on line 50

    '
  timestamp: 1659979478
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $sorted = $arr;\n    sort($sorted);\n    $n\
    \ = count($arr);\n    $first = -1;\n    $firstVal = -1;\n    for ($i = 0; $i <\
    \ $n; $i++) {\n        if ($arr[$i] != $sorted[$i]) {\n            $first = $i;\n\
    \            $firstVal = $arr[$i];\n            break;\n        }\n    }\n   \
    \ if ($first == -1) {\n        return true;\n    }\n    $last = -1;\n    $lastVal\
    \ = -1;\n    for ($i = $n - 1; $i >= 0; $i--) {\n        if ($arr[$i] != $sorted[$i])\
    \ {\n            $last = $i;\n            $lastVal = $arr[$i];\n            break;\n\
    \        }\n    }\n    if ($last == -1) {\n        return true;\n    }\n    $isPosSorted\
    \ = true;\n    for ($i = $first + 1; $i < $last; $i++) {\n        if ($arr[$i]\
    \ > $lastVal) {\n            $isPosSorted = false;\n            break;\n     \
    \   }\n    }\n    if ($isPosSorted) {\n        return true;\n    }\n    $isNegSorted\
    \ = true;\n    for ($i = $last - 1; $i > $first; $i--) {\n        if ($arr[$i]\
    \ < $firstVal) {\n            $isNegSorted = false;\n            break;\n    \
    \    }\n    }\n    if ($isNegSorted) {\n        return true;\n    }\n    return\
    \ false;\n}\necho move_one_ball(array(3, 4, 5, 1, 2));\necho \"\\n\";\necho move_one_ball(array(3,\
    \ 5, 4, 1, 2));\necho \"\\n\";\necho move_one_ball(array(4, 2, 1, 3));\necho \"\
    \\n\";\necho move_one_ball(array(3, 2, 1, 4));\necho \"\\n\";\necho move_one_ball(array(\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp3qhayey0.php on line 82

    '
  timestamp: 1659979478
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $count = count($arr);\n    for ($i = 1; $i\
    \ < $count; $i++) {\n        if ($arr[$i] < $arr[$i - 1]) {\n            if ($i\
    \ == 1) {\n                $prev = $arr[$count - 1];\n            } else {\n \
    \               $prev = $arr[$i - 2];\n            }\n            if ($arr[$i]\
    \ > $prev) {\n                return true;\n            } else {\n           \
    \     return false;\n            }\n        }\n    }\n    return true;\n}\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8d3bmhcw.php:46\n\
    Stack trace:\n#0 /tmp/tmp8d3bmhcw.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp8d3bmhcw.php\
    \ on line 46\n"
  timestamp: 1659979478
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) return true;\n    $min =\
    \ min($arr);\n    $index = array_search($min, $arr);\n    $i = 0;\n    $res =\
    \ true;\n    while($i < count($arr)) {\n        if ($i != $index) {\n        \
    \    if ($arr[$i] > $min) {\n                $res = false;\n                break;\n\
    \            }\n        }\n        $i++;\n    }\n    return $res;\n}\n\n$arr =\
    \ array(3, 4, 5, 1, 2);\n$arr = array(3, 5, 4, 1, 2);\nvar_dump(move_one_ball($arr));\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "bool(false)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps575cuea.php:49\n\
    Stack trace:\n#0 /tmp/tmps575cuea.php(56): test()\n#1 {main}\n  thrown in /tmp/tmps575cuea.php\
    \ on line 49\n"
  timestamp: 1659979478
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n\tif (count($arr) == 0) {\n\t\treturn true;\n\t\
    }\n\t$sorted_arr = $arr;\n\tsort($sorted_arr);\n\t$sorted_arr = array_flip($sorted_arr);\n\
    \t$mini = min($arr);\n\t$min_index = $sorted_arr[$mini];\n\t$arr_start = array_slice($arr,\
    \ 0, $min_index);\n\t$arr_end = array_slice($arr, $min_index);\n\tif (count($arr_start)\
    \ == 0) {\n\t\treturn true;\n\t}\n\t$start_as_end = array_merge($arr_start, $arr_end);\n\
    \tfor ($i = 0; $i < count($arr); $i++) {\n\t\tif ($start_as_end[$i] != $sorted_arr[$i])\
    \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n$arr = array(3, 4, 5,\
    \ 1, 2);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\n\
    echo move_one_ball($arr) . \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqr9m0wi3.php:56\n\
    Stack trace:\n#0 /tmp/tmpqr9m0wi3.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpqr9m0wi3.php\
    \ on line 56\n"
  timestamp: 1659979478
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n  // TODO: Write code here!\n}\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe1avjvoz.php:31\n\
    Stack trace:\n#0 /tmp/tmpe1avjvoz.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpe1avjvoz.php\
    \ on line 31\n"
  timestamp: 1659979478
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n  $m = count($arr);\n  if ($m == 0) return true;\n\
    \  $n = $m;\n  while ($n > 0) {\n    $n = 0;\n    for ($i = 1; $i < $m; $i++)\
    \ {\n      if ($arr[$i - 1] > $arr[$i]) {\n        $tmp = $arr[$i];\n        $arr[$i]\
    \ = $arr[$i - 1];\n        $arr[$i - 1] = $tmp;\n        $n = $i;\n      }\n \
    \   }\n  }\n  for ($i = 1; $i < $m; $i++) {\n    if ($arr[$i - 1] > $arr[$i])\
    \ return false;\n  }\n  return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\n$arr\
    \ = array(3, 5, 4, 1, 2);\nprint move_one_ball($arr) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjrvepnbp.php:54\n\
    Stack trace:\n#0 /tmp/tmpjrvepnbp.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpjrvepnbp.php\
    \ on line 54\n"
  timestamp: 1659979478
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $count = count($arr);\n    if ($count == 0)\
    \ {\n        return true;\n    }\n    for ($i = 0; $i < $count - 1; $i++) {\n\
    \        if ($arr[$i] > $arr[$i + 1]) {\n            return false;\n        }\n\
    \    }\n    return true;\n}\n\necho move_one_ball(array(3, 4, 5, 1, 2)) ? \"true\\\
    n\" : \"false\\n\";\necho move_one_ball(array(3, 5, 4, 1, 2)) ? \"true\\n\" :\
    \ \"false\\n\";\necho move_one_ball(array(1, 2, 3, 4, 5)) ? \"true\\n\" : \"false\\\
    n\";\necho move_one_ball(array(1, 1, 1, 1, 1)) ? \"true\\n\" : \"false\\n\";\n\
    echo move_one_ball(array(1, 2, 2, 1, 2)) ? \"true\\n\" : \"false\\n\";\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "false\nfalse\ntrue\ntrue\nfalse\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpwrlp2tqr.php:46\nStack trace:\n#0 /tmp/tmpwrlp2tqr.php(53):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpwrlp2tqr.php on line 46\n"
  timestamp: 1659979478
- exit_code: 0
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $n = count($arr);\n    if ($n == 0) {\n  \
    \      return true;\n    }\n    if ($n == 1) {\n        return true;\n    }\n\
    \    $count = 0;\n    for ($i = 1; $i < $n; $i++) {\n        if ($arr[$i] < $arr[$i\
    \ - 1]) {\n            $count++;\n        }\n    }\n    if ($count > 1) {\n  \
    \      return false;\n    }\n    return true;\n}\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979478
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n\t$n = count($arr);\n\tif ($n < 1) return true;\n\
    \t$max = $arr[0];\n\tfor ($i = 1; $i < $n; $i++) {\n\t\tif ($arr[$i] < $max) return\
    \ false;\n\t\tif ($arr[$i] > $max) $max = $arr[$i];\n\t}\n\treturn true;\n}\n\n\
    $arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr) ? \"true\\n\" : \"false\\\
    n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr) ? \"true\\n\" : \"\
    false\\n\";\n$arr = array(5, 6, 7, 1, 2, 3, 4);\necho move_one_ball($arr) ? \"\
    true\\n\" : \"false\\n\";\n$arr = array(5, 6, 7, 1, 2, 4, 3);\necho move_one_ball($arr)\
    \ ? \"true\\n\" : \"false\\n\";\n$arr = array(5, 6, 7, 2, 3, 4, 1);\necho move_one_ball($arr)\
    \ ? \"true\\n\" : \"false\\n\";\n$arr = array(5, 6, 7, 1, 2, 3, 4, 8, 9, 10, 11,\
    \ 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30,\
    \ 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,\
    \ 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68,\
    \ 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87,\
    \ 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmpcedq9hla.php
    on line 45

    '
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n\t$sorted = $arr;\n\tsort($sorted);\n\tfor ($i\
    \ = 0; $i < count($arr); $i++) {\n\t\tarray_push($arr, array_shift($arr));\n\t\
    \tif ($arr == $sorted) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\
    \n$tests = array(\n\tarray(3, 4, 5, 1, 2),\n\tarray(3, 5, 4, 1, 2),\n\tarray(1,\
    \ 2, 3, 4, 5),\n\tarray(1, 2, 3, 4, 4),\n\tarray(1, 2, 3, 3, 4),\n\tarray(1, 2,\
    \ 2, 3, 4),\n\tarray(1, 1, 2, 3, 4),\n\tarray(1, 2, 3, 4, 4),\n\tarray(1, 2, 3,\
    \ 3, 4),\n\tarray(1, 2, 2, 3, 4),\n\tarray(1, 1, 2, 3, 4),\n\tarray(3, 4, 5, 6,\
    \ 7, 1, 2),\n\tarray(3, 4, 5, 6, 7, 2, 1),\n\tarray(3, 4, 5, 6, 6, 7, 1, 2),\n\
    \tarray(3, 4, 5, 6, 6, 7, 2, 1),\n\tarray(3, 4, 5, 5, 6, 7, 1, 2),\n\tarray(3,\
    \ 4, 5, 5, 6, 7, 2, 1),\n\tarray(3, 4, 4, 5, 6, 7, 1, 2),\n\tarray(3, 4, 4, 5,\
    \ 6, 7, 2, 1),\n\tarray(3, 3, 4, 5, 6, 7, 1, 2),\n\tarray(3, 3, 4, 5, 6, 7, 2,\
    \ 1),\n\tarray(2, 3, 4, 5, 6, 7, 1, 2),\n\tarray(2, 3, 4, 5, 6, 7, 2, 1),\n\t\
    array(1, 2, 3, 4, 5, 6, 7, 1, 2),\n\tarray(1, 2, 3,\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpvmg4asea.php on line 61

    '
  timestamp: 1659979478
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n\t$min = $arr[0];\n\t$max = $arr[0];\n\tforeach\
    \ ($arr as $a) {\n\t\tif ($a < $min) {\n\t\t\t$min = $a;\n\t\t}\n\t\tif ($a >\
    \ $max) {\n\t\t\t$max = $a;\n\t\t}\n\t}\n\tif ($min == 1 && $max == sizeof($arr))\
    \ {\n\t\treturn true;\n\t}\n\treturn false;\n}\n\n$arr = array(4, 5, 1, 2, 3);\n\
    echo move_one_ball($arr);\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcdfgq2i_.php:48\n\
    Stack trace:\n#0 /tmp/tmpcdfgq2i_.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpcdfgq2i_.php\
    \ on line 48\n"
  timestamp: 1659979478
- exit_code: 0
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n  $arr_length = count($arr);\n  if ($arr_length\
    \ == 0) {\n    return true;\n  }\n  if ($arr_length == 1) {\n    return true;\n\
    \  }\n  if ($arr_length == 2) {\n    if ($arr[0] <= $arr[1]) {\n      return true;\n\
    \    } else {\n      return false;\n    }\n  }\n  for ($i = 1; $i < $arr_length;\
    \ $i++) {\n    if ($arr[$i] < $arr[$i - 1]) {\n      break;\n    }\n  }\n  if\
    \ ($i == $arr_length) {\n    return true;\n  }\n  for ($j = $i + 1; $j < $arr_length;\
    \ $j++) {\n    if ($arr[$j] < $arr[$j - 1]) {\n      return false;\n    }\n  }\n\
    \  return true;\n}\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979478
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len < 2) return\
    \ true;\n    $min = $arr[0];\n    for ($i = 1; $i < $len; $i++) {\n        if\
    \ ($arr[$i] < $min) return false;\n        $min = min($min, $arr[$i]);\n    }\n\
    \    return true;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeao1hrzf.php:39\n\
    Stack trace:\n#0 /tmp/tmpeao1hrzf.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpeao1hrzf.php\
    \ on line 39\n"
  timestamp: 1659979478
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n  $len = count($arr);\n  $max = $arr[0];\n  $min\
    \ = $arr[$len - 1];\n  $min_idx = $len - 1;\n  $max_idx = 0;\n  for ($i = 1; $i\
    \ < $len; $i++) {\n    if ($arr[$i] > $max) {\n      $max = $arr[$i];\n      $max_idx\
    \ = $i;\n    }\n    if ($arr[$i] < $min) {\n      $min = $arr[$i];\n      $min_idx\
    \ = $i;\n    }\n  }\n  if ($max_idx == 0 && $min_idx == $len - 1) {\n    return\
    \ true;\n  }\n  if ($max_idx == 0 || $min_idx == $len - 1) {\n    return false;\n\
    \  }\n  return true;\n}\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0g5ddin1.php:55\n\
    Stack trace:\n#0 /tmp/tmp0g5ddin1.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp0g5ddin1.php\
    \ on line 55\n"
  timestamp: 1659979478
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    for ($i = 0; $i <\
    \ $len; $i++) {\n        if ($arr[$i] > $arr[$i + 1]) {\n            break;\n\
    \        }\n    }\n    return $i == $len - 1 ? true : false;\n}\n$input1 = array(3,\
    \ 4, 5, 1, 2);\n$input2 = array(3, 5, 4, 1, 2);\nvar_dump(move_one_ball($input1));\n\
    var_dump(move_one_ball($input2));\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "bool(false)\nbool(false)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmprmvkx_7p.php:41\nStack trace:\n#0 /tmp/tmprmvkx_7p.php(48): test()\n\
    #1 {main}\n  thrown in /tmp/tmprmvkx_7p.php on line 41\n"
  timestamp: 1659979478
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $length = count($arr);\n    $end = $length\
    \ - 1;\n    if ($length == 0) {\n        return TRUE;\n    }\n    for ($i = 0;\
    \ $i < $length; $i++) {\n        if ($arr[$i] > $arr[$i + 1]) {\n            $next\
    \ = $i + 1;\n            if ($arr[$i] > $arr[$next + 1]) {\n                return\
    \ FALSE;\n            }\n            if ($arr[$i] > $arr[$end]) {\n          \
    \      return FALSE;\n            }\n        }\n    }\n    return TRUE;\n}\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjf6ao3uv.php:47\n\
    Stack trace:\n#0 /tmp/tmpjf6ao3uv.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpjf6ao3uv.php\
    \ on line 47\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $length = count($arr);\n    if ($length ==\
    \ 0) return true;\n    for ($i = 0; $i < $length; $i++) {\n        $j = $i + 1;\n\
    \        if (isset($arr[$j])) {\n            if ($arr[$i] > $arr[$j]) {\n    \
    \            return false;\n            }\n        }\n    }\n    return true;\n\
    }\n\n$arr = array(1, 2, 3, 4, 5);\necho move_one_ball($arr) . \"\\n\";\n$arr =\
    \ array(5, 4, 3, 2, 1);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(5,\
    \ 4, 1, 2, 3);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(3, 4, 5, 1,\
    \ 2);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho\
    \ move_one_ball($arr) . \"\\n\";\n$arr = array();\necho move_one_ball($arr) .\
    \ \"\\n\";\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n\n\n\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5ruakdnb.php:54\n\
    Stack trace:\n#0 /tmp/tmp5ruakdnb.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp5ruakdnb.php\
    \ on line 54\n"
  timestamp: 1659979479
- exit_code: 0
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $num_operations = 0;\n    $last_ball = 0;\n\
    \    $next_ball = 0;\n    if(empty($arr)) {\n        return true;\n    }\n   \
    \ for($i = 0; $i < count($arr); $i++) {\n        if($arr[$i] < $last_ball) {\n\
    \            $num_operations++;\n        }\n        if($arr[$i] < $next_ball)\
    \ {\n            $next_ball = $arr[$i];\n        }\n        $last_ball = $arr[$i];\n\
    \    }\n    return $num_operations <= 1;\n}\nfunction candidate(...$args) {\n\
    \    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n}\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpflv1879o.php:30\n\
    Stack trace:\n#0 /tmp/tmpflv1879o.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpflv1879o.php\
    \ on line 30\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n\n}\n\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp__y5pyov.php:32\n\
    Stack trace:\n#0 /tmp/tmp__y5pyov.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp__y5pyov.php\
    \ on line 32\n"
  timestamp: 1659823782
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $res = false;\n    $len = count($arr);\n \
    \   if($len == 0) {\n        $res = true;\n    }\n    else if($len == 1) {\n \
    \       $res = true;\n    }\n    else {\n        $smallest = $arr[0];\n      \
    \  $largest = $arr[0];\n        for($i = 1; $i < $len; $i++) {\n            if($arr[$i]\
    \ < $smallest) {\n                $smallest = $arr[$i];\n            }\n     \
    \       if($arr[$i] > $largest) {\n                $largest = $arr[$i];\n    \
    \        }\n        }\n        if($smallest == $arr[0] && $largest == $arr[$len\
    \ - 1]) {\n            $res = true;\n        }\n    }\n    return $res;\n}\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3_3ic179.php:54\n\
    Stack trace:\n#0 /tmp/tmp3_3ic179.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp3_3ic179.php\
    \ on line 54\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    $result = false;\n\
    \    if ($len == 0) return true;\n    for ($i = 0; $i < $len; $i++) {\n      \
    \  $len1 = $len;\n        $arr1 = $arr;\n        for ($j = 0; $j < $len1; $j++)\
    \ {\n            if ($arr1[$j] > $arr1[($j + 1) % $len1]) {\n                $temp\
    \ = $arr1[$j];\n                $arr1[$j] = $arr1[($j + 1) % $len1];\n       \
    \         $arr1[($j + 1) % $len1] = $temp;\n            }\n        }\n       \
    \ if ($arr1 == $arr) {\n            $result = true;\n            break;\n    \
    \    }\n    }\n    return $result;\n}\necho move_one_ball(array(3, 4, 5, 1, 2))\
    \ . \"\\n\";\necho move_one_ball(array(3, 5, 4, 1, 2)) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa2vy2wuc.php:51\n\
    Stack trace:\n#0 /tmp/tmpa2vy2wuc.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpa2vy2wuc.php\
    \ on line 51\n"
  timestamp: 1659979479
- exit_code: 0
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n  if (count($arr) == 0) return true;\n  $count\
    \ = 0;\n  for ($i = 1; $i < count($arr); $i++) {\n    if ($arr[$i] < $arr[$i -\
    \ 1]) $count++;\n  }\n  if ($count > 1) return false;\n  return true;\n}\necho\
    \ move_one_ball(array(3, 4, 5, 1, 2));\necho \"\\n\";\necho move_one_ball(array(3,\
    \ 5, 4, 1, 2));\necho \"\\n\";\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    '
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n  if (count($arr) == 0) {\n    return true;\n\
    \  }\n  $min_value = min($arr);\n  for ($i = 0; $i < count($arr); $i++) {\n  \
    \  if ($arr[$i] == $min_value) {\n      break;\n    }\n  }\n  $count = 0;\n  $start\
    \ = $i;\n  while ($count < count($arr)) {\n    if ($arr[$i] > $min_value) {\n\
    \      return false;\n    }\n    $i = ($i + 1) % count($arr);\n    $count++;\n\
    \  }\n  return true;\n}\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcaq9hvzm.php:52\n\
    Stack trace:\n#0 /tmp/tmpcaq9hvzm.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpcaq9hvzm.php\
    \ on line 52\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n\t$count = count($arr);\n\t$arr2 = array();\n\t\
    $arr3 = array();\n\tfor ($i = 0; $i < $count; $i++) {\n\t\tif ($arr[$i] != max($arr))\
    \ {\n\t\t\t$arr2[] = $arr[$i];\n\t\t} else {\n\t\t\t$arr3[] = $arr[$i];\n\t\t\
    }\n\t}\n\t$arr2 = array_merge($arr2, $arr3);\n\t$arr = $arr2;\n\t$arr2 = array();\n\
    \t$arr3 = array();\n\tfor ($i = 0; $i < $count; $i++) {\n\t\tif ($arr[$i] != min($arr))\
    \ {\n\t\t\t$arr2[] = $arr[$i];\n\t\t} else {\n\t\t\t$arr3[] = $arr[$i];\n\t\t\
    }\n\t}\n\t$arr2 = array_merge($arr2, $arr3);\n\treturn $arr2 == $arr;\n}\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj7n7b__v.php:53\n\
    Stack trace:\n#0 /tmp/tmpj7n7b__v.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpj7n7b__v.php\
    \ on line 53\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n  return sizeof($arr) <= 1;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa6bd09_l.php:32\n\
    Stack trace:\n#0 /tmp/tmpa6bd09_l.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpa6bd09_l.php\
    \ on line 32\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    // Your code here\n}\nmove_one_ball(array(3,\
    \ 4, 5, 1, 2));\nmove_one_ball(array(3, 5, 4, 1, 2));\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa6bswcer.php:34\n\
    Stack trace:\n#0 /tmp/tmpa6bswcer.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpa6bswcer.php\
    \ on line 34\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n  $i = 0;\n  $n = count($arr);\n  if ($n <= 1)\
    \ return true;\n  while ($i < $n - 1) {\n    if ($arr[$i] > $arr[$i + 1]) {\n\
    \      $ball = array_shift($arr);\n      array_push($arr, $ball);\n      $i =\
    \ 0;\n    } else {\n      $i += 1;\n    }\n  }\n  return true;\n}\n\n$arr = array(3,\
    \ 4, 5, 1, 2);\necho move_one_ball($arr) . \"\\n\";\n\n$arr = array(3, 5, 4, 1,\
    \ 2);\necho move_one_ball($arr) . \"\\n\";\n\n$arr = array(3, 5, 4, 2, 1);\necho\
    \ move_one_ball($arr) . \"\\n\";\n\n$arr = array(3, 5, 1, 2, 4);\necho move_one_ball($arr)\
    \ . \"\\n\";\n\n$arr = array(1, 2, 3, 4, 5);\necho move_one_ball($arr) . \"\\\
    n\";\n\n$arr = array(5, 4, 3, 2, 1);\necho move_one_ball($arr) . \"\\n\";\n\n\
    $arr = array(2, 3, 4, 5, 1);\necho move_one_ball($arr) . \"\\n\";\n\n$arr = array(1,\
    \ 2, 3, 4, 5, 6);\necho move_one_ball($arr) . \"\\n\";\n\n$arr = array(2, 3, 4,\
    \ 5, 6, 1);\necho move_one_ball($arr) . \"\\n\";\n\n$arr = array(3, 4, 5, 6, 1,\
    \ 2);\necho move_one_ball($arr) . \"\\n\";\n\n$arr = array(4, 5, 6, 1, 2, 3);\n\
    echo move_one_ball($arr) . \"\\n\";\n\n$arr = array(5, 6, 1, 2, 3, 4);\necho move_one_ball($arr)\
    \ . \"\\n\";\n\n$arr = array(1, 2, 3, 4, 5, 6\nfunction candidate(...$args) {\n\
    \    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmpcjun3jou.php
    on line 76

    '
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n\tif(count($arr) == 0) {\n\t\treturn true;\n\t\
    }\n\tfor($i = 0; $i < count($arr); $i++) {\n\t\t$next = $i+1;\n\t\tif($arr[$i]\
    \ > $arr[$next]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\necho move_one_ball(array(3,\
    \ 4, 5, 1, 2));\necho \"<br>\";\necho move_one_ball(array(3, 5, 4, 1, 2));\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<br>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6j8f27la.php:43\n\
    Stack trace:\n#0 /tmp/tmp6j8f27la.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp6j8f27la.php\
    \ on line 43\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (count($arr) == 0) return true;\n    $j\
    \ = 0;\n    while ($j < count($arr) - 1) {\n        if ($arr[$j] > $arr[$j + 1])\
    \ {\n            $temp = $arr[$j];\n            $arr[$j] = $arr[$j + 1];\n   \
    \         $arr[$j + 1] = $temp;\n            $j = 0;\n        } else {\n     \
    \       $j++;\n        }\n    }\n    return $arr;\n}\n$arr = array(2, 4, 3, 5,\
    \ 1);\n$sorted_arr = move_one_ball($arr);\nvar_dump($sorted_arr);\n\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(5) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(2)\n  [2]=>\n  int(3)\n \
    \ [3]=>\n  int(4)\n  [4]=>\n  int(5)\n}\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpvtm6lqoi.php:47\nStack trace:\n#0 /tmp/tmpvtm6lqoi.php(54):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpvtm6lqoi.php on line 47\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $n = count($arr);\n    $max = $arr[0];\n    for ($i = 1; $i < $n;\
    \ $i++) {\n        if ($arr[$i] < $max) {\n            return false;\n       \
    \ }\n        $max = max($max, $arr[$i]);\n    }\n    return true;\n}\n$arr = array(3,\
    \ 4, 5, 1, 2);\necho \"Input: [\";\nforeach ($arr as $val) {\n    echo $val .\
    \ \" \";\n}\necho \"]\\n\";\necho \"Output: \" . move_one_ball($arr) . \"\\n\"\
    ;\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Input: [3 4 5 1 2 ]\nOutput: \n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp1ths40_c.php:49\nStack trace:\n#0 /tmp/tmp1ths40_c.php(56):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp1ths40_c.php on line 49\n"
  timestamp: 1659979479
- exit_code: 0
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if(empty($arr)) {\n        return true;\n\
    \    }\n    $l = sizeof($arr);\n    $arr = array_merge($arr, $arr);\n    for($i\
    \ = 0; $i < $l; $i++) {\n        $newArr = array_slice($arr, $i, $l);\n      \
    \  $sortedArr = $newArr;\n        sort($sortedArr);\n        if($newArr == $sortedArr)\
    \ {\n            return true;\n        }\n    }\n    return false;\n}\n\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $min = $arr[0];\n    $max = $arr[0];\n   \
    \ $len = count($arr);\n    $val = $arr[0];\n    $newarr = array();\n    $newarr[0]\
    \ = $arr[0];\n    for ($i = 1; $i < $len; $i++) {\n        $newarr[$i] = $arr[$i];\n\
    \        if ($newarr[$i] < $min) {\n            $min = $newarr[$i];\n        }\n\
    \        if ($newarr[$i] > $max) {\n            $max = $newarr[$i];\n        }\n\
    \    }\n    $count = 0;\n    for ($i = 1; $i < $len; $i++) {\n        $count++;\n\
    \        if ($newarr[$i] < $val) {\n            $val = $newarr[$i];\n        \
    \    $count = 0;\n        }\n        if ($count > 2) {\n            return false;\n\
    \        }\n    }\n    if ($newarr[0] != $min) {\n        return false;\n    }\n\
    \    if ($newarr[$len - 1] != $max) {\n        return false;\n    }\n    return\
    \ true;\n}\n$arr = array(3, 4, 5, 1, 2);\nvar_dump(move_one_ball($arr));\n$arr\
    \ = array(3, 5, 4, 1, 2);\nvar_dump(move_one_ball($arr));\n$arr = array(1, 5,\
    \ 4, 3, 2);\nvar_dump(move_one_ball($arr));\n$arr = array(5, 4, 3, 2, 1);\nvar_dump(move_one_ball($arr));\n\
    $arr = array(1, 2, 3, 4, 5);\nvar_dump(move_one_ball($arr));\n$arr = array(1,\
    \ 2, 3, 4, 5, 6);\nvar_dump(move_one_ball($arr));\n$arr = array(6, 5, 4, 3, 2,\
    \ 1);\nvar_dump(move_one_ball($arr));\n$arr = array(\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpyn5y77jf.php on line 73

    '
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) return true;\n    $arr_len\
    \ = count($arr);\n    $max = -1;\n    for ($i = 0; $i < $arr_len; $i++) {\n  \
    \      if ($arr[$i] < $max) return false;\n        $max = max($max, $arr[$i]);\n\
    \    }\n    return true;\n}\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpahevvr6j.php:38\n\
    Stack trace:\n#0 /tmp/tmpahevvr6j.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpahevvr6j.php\
    \ on line 38\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $last = count($arr)-1;\n    if($last == 0){\n\
    \        return true;\n    }\n    //iterate through array\n    for($i = 0; $i\
    \ < $last; $i++){\n        //iterate through array again\n        for($x = $i+1;\
    \ $x < $last; $x++){\n            //if 1st is bigger than 2nd and 3rd is smaller\
    \ than 2nd\n            if($arr[$i] > $arr[$x] && $arr[$x+1] < $arr[$x]){\n  \
    \              //change position of 2nd element with 3rd\n                $tmp\
    \ = $arr[$x];\n                $arr[$x] = $arr[$x+1];\n                $arr[$x+1]\
    \ = $tmp;\n                return true;\n            }\n        }\n    }\n   \
    \ return false;\n}\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpet0755xz.php:49\n\
    Stack trace:\n#0 /tmp/tmpet0755xz.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpet0755xz.php\
    \ on line 49\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $count = count($arr);\n    if ($count == 0)\
    \ {\n        return true;\n    }\n\n    $return = false;\n    if ($count == 1)\
    \ {\n        return true;\n    }\n\n    $newArr = $arr;\n    for ($i = 0; $i <\
    \ $count; $i++) {\n        $end = array_pop($newArr);\n        $temp = array_slice($newArr,\
    \ 0, $i);\n        $temp[] = $end;\n        $newArr = array_merge($temp, array_slice($newArr,\
    \ $i));\n        if (is_sorted($newArr)) {\n            $return = true;\n    \
    \        break;\n        }\n    }\n\n    return $return;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_sorted() in\
    \ /tmp/tmp5jdgsixz.php:40\nStack trace:\n#0 /tmp/tmp5jdgsixz.php(50): move_one_ball(Array)\n\
    #1 /tmp/tmp5jdgsixz.php(54): candidate(Array)\n#2 /tmp/tmp5jdgsixz.php(61): test()\n\
    #3 {main}\n  thrown in /tmp/tmp5jdgsixz.php on line 40\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $times = 0;\n    $size = count($arr);\n  \
    \  for ($i = 0; $i < $size; $i++) {\n        for ($j = 0; $j < $size; $j++) {\n\
    \            if ($arr[$i] < $arr[$j]) {\n                $times += 1;\n      \
    \      }\n        }\n    }\n    if ($times == 0 || $times == ($size - 1) * $size\
    \ / 2) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\
    \nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkoi90n35.php:47\n\
    Stack trace:\n#0 /tmp/tmpkoi90n35.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpkoi90n35.php\
    \ on line 47\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n}\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpflv1879o.php:30\n\
    Stack trace:\n#0 /tmp/tmpflv1879o.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpflv1879o.php\
    \ on line 30\n"
  timestamp: 1659979479
- exit_code: -1
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n  for ($i = 0; $i < count($arr); $i++) {\n   \
    \ if ($arr[$i] > $arr[$i + 1]) {\n      $temp = $arr[$i];\n      $arr[$i] = $arr[$i\
    \ + 1];\n      $arr[$i + 1] = $temp;\n    }\n  }\n  return $arr;\n}\n\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Timeout
  stderr: None
  stdout: 'b''\nWarning: Undefined array key 5 in /tmp/tmpgcvcb4st.php on line 25\n\nWarning:
    Undefined array key 5 in /tmp/tmpgcvcb4st.php on line 27\n\nWarning: Undefined
    array key 6 in /tmp/tmpgcvcb4st.php on line 25\n\nWarning: Undefined array key
    6 in /tmp/tmpgcvcb4st.php on line 27\n\nWarning: Undefined array key 7 in /tmp/tmpgcvcb4st.php
    on line 25\n\nWarning: Undefined array key 7 in /tmp/tmpgcvcb4st.php on line 27\n\nWarning:
    Undefined array key 8 in /tmp/tmpgcvcb4st.php on line 25\n\nWarning: Undefined
    array key 8 in /tmp/tmpgcvcb4st.php on line 27\n\nWarning: Undefined array key
    9 in /tmp/tmpgcvcb4st.php on line 25\n\nWarning: Undefined array key 9 in /tmp/tmpgcvcb4st.php
    on line 27\n\nWarning: Undefined array key 10 in /tmp/tmpgcvcb4st.php on line
    25\n\nWarning: Undefined array key 10 in /tmp/tmpgcvcb4st.php on line 27\n\nWarning:
    Undefined array key 11 in /tmp/tmpgcvcb4st.php on line 25\n\nWarning: Undefined
    array key 11 in /tmp/tmpgcvcb4st.php on line 27\n\nWarning: Undefined array key
    12 in /tmp/tmpgcvcb4st.php on line 25\n\nWarning: Undefined array key 12 in /tmp/tmpgcvcb4st.php
    on line 27\n\nWarning: Undefined array key 13 in /tmp/tmpgcvcb4st.php on line
    25\n\nWarning: Undefined array key 13 in /tmp/tmpgcvcb4st.php on line 27\n\nWarning:
    Undefined array key 14 in /tmp/tmpgcvcb4st.php on line 25\n\nWarning: Undefined
    array key 14 in /tmp/tmpgcvcb4st.php on line 27\n\nWarning: Undefined array key
    15 in /tmp/tmpgcvcb4st.php on line 25\n\nWarning: Undefined array key 15 in /tmp/tmpgcvcb4st.php
    on line 27\n\nWarning: Undefined array key 16 in /tmp/tmpgcvcb4st.php on line
    25\n\nWarning: Undefined array key 16 in /tmp/tmpgcvcb4st.php on line 27\n\nWarning:
    Undefined array key 17 in /tmp/tmpgcvcb4st.php on line 25\n\nWarning: Undefined
    array key 17 in /tmp/tmpgcvcb4st.php on line 27\n\nWarning: Undefined array key
    18 in /tmp/tmpgcvcb4st.php on line 25\n\nWarning: Undefined array key 18 in /tmp/tmpgcvcb4st.php
    on line 27\n\nWarning: Undefined array key 19 in /tmp/tmpgcvcb4st.php on line
    25\n\nWarning: Undefined array'
  timestamp: 1659979485
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    // Your code here\n    if(empty($arr)) return\
    \ true;\n    $arr1 = $arr;\n    sort($arr1);\n    $shift_times = 0;\n    while(true){\n\
    \        $arr2 = $arr;\n        array_push($arr2, array_shift($arr2));\n     \
    \   $shift_times++;\n        if($arr2 == $arr1) return true;\n        if($shift_times\
    \ == count($arr)) return false;\n    }\n}\nfunction candidate(...$args) {\n  \
    \  return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp97ghl4sp.php:42\n\
    Stack trace:\n#0 /tmp/tmp97ghl4sp.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp97ghl4sp.php\
    \ on line 42\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    // BEGIN\n    $length = count($arr);\n   \
    \ if ($length === 0) {\n        return true;\n    }\n    $arr[0] = $arr[$length\
    \ - 1];\n    unset($arr[$length - 1]);\n    for ($i = 1; $i < $length; $i++) {\n\
    \        if ($arr[$i] < $arr[$i - 1]) {\n            return false;\n        }\n\
    \    }\n    return true;\n    // END\n}\n\n$tests = [\n    'move_one_ball' =>\
    \ [\n        'description' => 'shift one ball',\n        'arguments' => [\n  \
    \          [1, 2, 3, 4]\n        ],\n        'expect' => [\n            true\n\
    \        ]\n    ],\n    'move_one_ball' => [\n        'description' => 'shift\
    \ one ball',\n        'arguments' => [\n            [3, 5, 4, 1, 2]\n        ],\n\
    \        'expect' => [\n            false\n        ]\n    ],\n    'move_one_ball'\
    \ => [\n        'description' => 'shift one ball',\n        'arguments' => [\n\
    \            [2, 3, 5, 1, 4]\n        ],\n        'expect' => [\n            true\n\
    \        ]\n    ],\n    'move_one_ball' => [\n        'description' => 'shift\
    \ one ball',\n        'arguments' => [\n            [3, 4, 5, 1, 2]\n        ],\n\
    \        'expect' => [\n            true\n        ]\n    ],\n    'move_one_ball'\
    \ => [\n        'description' => 'shift one ball',\n        'arguments' => [\n\
    \            [5, 1, 4, 2, 3]\n        ],\n        'expect' => [\n            true\n\
    \        ]\n    ],\n    'move_one_ball' => [\n        'description' => 'shift\
    \ one ball',\n        'arguments' => [\n            [1, 2, 3, 4, 5]\n        ],\n\
    \        'expect' => [\n            true\n        ]\n    ],\n    'move_one_ball'\
    \ => [\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpgc7k50i9.php on line 97

    '
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $min = min($arr);\n    $arr2 = $arr;\n   \
    \ while($min != $arr2[0]) {\n        $last = array_pop($arr2);\n        array_unshift($arr2,\
    \ $last);\n    }\n    if ($arr == $arr2) {\n        return true;\n    } else {\n\
    \        return false;\n    }\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\necho \"\
    \\n\";\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps28cnv1h.php:48\n\
    Stack trace:\n#0 /tmp/tmps28cnv1h.php(55): test()\n#1 {main}\n  thrown in /tmp/tmps28cnv1h.php\
    \ on line 48\n"
  timestamp: 1659979479
- exit_code: 0
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $size = count($arr);\n    if ($size <= 1)\
    \ {\n        return true;\n    }\n    $count = 0;\n    for ($i = 0; $i < $size;\
    \ $i++) {\n        if ($i + 1 < $size && $arr[$i] > $arr[$i + 1]) {\n        \
    \    $count++;\n        }\n    }\n    if ($count == 1) {\n        return true;\n\
    \    }\n    return false;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr) . \"\\n\"\
    ;\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    '
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n\tif (empty($arr)) {\n\t\treturn true;\n\t}\n\t\
    $x = $arr[0];\n\t$y = $arr[1];\n\t$n = sizeof($arr);\n\tfor ($i = 1; $i < $n;\
    \ $i++) {\n\t\tif ($arr[$i] > $x && $arr[$i] < $y) {\n\t\t\treturn true;\n\t\t\
    }\n\t\tif ($arr[$i] > $x) {\n\t\t\t$y = $arr[$i];\n\t\t}\n\t\tif ($arr[$i] < $x)\
    \ {\n\t\t\t$x = $arr[$i];\n\t\t}\n\t}\n\treturn false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcy3fkj2s.php:51\n\
    Stack trace:\n#0 /tmp/tmpcy3fkj2s.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpcy3fkj2s.php\
    \ on line 51\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) return true;\n    $index\
    \ = 0;\n    $min = $arr[0];\n    $x = 0;\n    while ($x < count($arr)) {\n   \
    \     if ($arr[$x] < $min) {\n            $min = $arr[$x];\n            $index\
    \ = $x;\n        }\n        $x++;\n    }\n    $x = 0;\n    while ($x < count($arr))\
    \ {\n        if ($arr[$x] > $min) {\n            return false;\n        }\n  \
    \      $x++;\n    }\n    return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho\
    \ move_one_ball($arr);\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\n\
    $arr = array(1, 2, 3, 4, 5);\necho move_one_ball($arr);\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpperwlvjj.php:56\n\
    Stack trace:\n#0 /tmp/tmpperwlvjj.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpperwlvjj.php\
    \ on line 56\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n  if(empty($arr)) {\n    return true;\n  }\n \
    \ $len = count($arr);\n  $result = array_fill(0, $len, false);\n  $j = 0;\n  while($j\
    \ < $len) {\n    if($result[$j] == false) {\n      $result[$j] = true;\n     \
    \ $i = $j;\n      while($arr[$i] < $arr[($i + 1) % $len]) {\n        $i = ($i\
    \ + 1) % $len;\n        if($result[$i] == true) {\n          break;\n        }\n\
    \        $result[$i] = true;\n      }\n    }\n    $j++;\n  }\n  return false;\n\
    }\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplq_zyw06.php:52\n\
    Stack trace:\n#0 /tmp/tmplq_zyw06.php(59): test()\n#1 {main}\n  thrown in /tmp/tmplq_zyw06.php\
    \ on line 52\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n\tif(empty($arr)) {\n\t\treturn true;\n\t}\n\t\
    if($arr[0] == min($arr)) {\n\t\treturn true;\n\t}\n\t$no_of_shift = 0;\n\t$len\
    \ = count($arr);\n\t$pos = array_search(min($arr), $arr);\n\t$no_of_shift = $len\
    \ - $pos;\n\t$new_arr = array_slice($arr, $pos);\n\tfor($i = 0; $i < $pos; $i++)\
    \ {\n\t\tarray_push($new_arr, $arr[$i]);\n\t}\n\tif($new_arr == sort($new_arr))\
    \ {\n\t\treturn true;\n\t}\n\treturn false;\n}\nprint_r(move_one_ball(array(3,\
    \ 4, 5, 1, 2)));\nprint_r(move_one_ball(array(3, 5, 4, 1, 2)));\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "11\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpznn0f78p.php:52\n\
    Stack trace:\n#0 /tmp/tmpznn0f78p.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpznn0f78p.php\
    \ on line 52\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (count($arr) == 0) {\n        return true;\n\
    \    }\n    $min = PHP_INT_MAX;\n    $count = 0;\n    for ($i = 0; $i < count($arr);\
    \ $i++) {\n        if ($arr[$i] > $min) {\n            $count++;\n        }\n\
    \        $min = min($min, $arr[$i]);\n    }\n    return $count <= 1;\n}\n\n$arr\
    \ = array(3, 4, 5, 1, 2);\n$result = move_one_ball($arr);\necho $result . PHP_EOL;\n\
    \n$arr = array(3, 5, 4, 1, 2);\n$result = move_one_ball($arr);\necho $result .\
    \ PHP_EOL;\n\n$arr = array(3, 4, 5, 1, 2, 6);\n$result = move_one_ball($arr);\n\
    echo $result . PHP_EOL;\n\n$arr = array(6, 3, 4, 5, 1, 2);\n$result = move_one_ball($arr);\n\
    echo $result . PHP_EOL;\n\n$arr = array(6, 3, 4, 5, 1, 2, 10);\n$result = move_one_ball($arr);\n\
    echo $result . PHP_EOL;\n\n$arr = array(2, 3, 4, 5, 1, 6);\n$result = move_one_ball($arr);\n\
    echo $result . PHP_EOL;\n\n$arr = array(2, 3, 4, 5, 1, 6, 7);\n$result = move_one_ball($arr);\n\
    echo $result . PHP_EOL;\n\n$arr = array(2, 3, 4, 5, 1, 6, 7, 8);\n$result = move_one_ball($arr);\n\
    echo $result . PHP_EOL;\n\n$arr = array(2, 3, 4, 5, 1, 6, 7, 8, 9);\n$result =\
    \ move_one_ball($arr);\necho $result . PHP_EOL;\n\n$arr = array(2, 3, 4, 5, 1,\
    \ 6, 7, 8, 9, 10\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmp5e3zi9o3.php
    on line 75

    '
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n\n    $i = 0;\n    $j = count($arr) - 1;\n    $right_shift_count = 0;\n\
    \    while ($i < $j) {\n        if ($arr[$i] > $arr[$i + 1]) {\n            break;\n\
    \        }\n        $i++;\n    }\n    while ($j > $i) {\n        if ($arr[$j]\
    \ < $arr[$j - 1]) {\n            break;\n        }\n        $j--;\n    }\n   \
    \ if ($i == $j) {\n        return true;\n    }\n    while ($i < $j) {\n      \
    \  if ($arr[$i] > $arr[$j]) {\n            return false;\n        }\n        $i++;\n\
    \        $j--;\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n\
    \    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp90fwjlap.php:61\n\
    Stack trace:\n#0 /tmp/tmp90fwjlap.php(68): test()\n#1 {main}\n  thrown in /tmp/tmp90fwjlap.php\
    \ on line 61\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) return true;\n    if (count($arr)\
    \ === 1) return true;\n    $len = count($arr);\n    $min_index = 0;\n    $min_val\
    \ = $arr[0];\n    for ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min_val)\
    \ {\n            $min_val = $arr[$i];\n            $min_index = $i;\n        }\n\
    \    }\n    if ($min_index == 0) return true;\n    if ($min_index == $len - 1)\
    \ return false;\n    for ($i = $min_index + 1; $i < $len; $i++) {\n        if\
    \ ($arr[$i] < $min_val) return false;\n    }\n    return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp86specuy.php:50\n\
    Stack trace:\n#0 /tmp/tmp86specuy.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp86specuy.php\
    \ on line 50\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $arr1 = $arr;\n    $arr2 = $arr;\n    sort($arr1);\n\
    \    array_push($arr2, array_shift($arr2));\n    return ($arr1 == $arr2);\n}\n\
    \nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz68_y0fq.php:36\n\
    Stack trace:\n#0 /tmp/tmpz68_y0fq.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpz68_y0fq.php\
    \ on line 36\n"
  timestamp: 1659979479
- exit_code: 0
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $l = count($arr);\n    if ($l === 0) {\n \
    \       return true;\n    }\n    $sorted_arr = $arr;\n    sort($sorted_arr);\n\
    \    for ($i = 0; $i < $l; $i++) {\n        $shift_arr = $arr;\n        for ($j\
    \ = 0; $j < $l; $j++) {\n            $shift_arr[$j] = $arr[($j + $i) % $l];\n\
    \        }\n        if ($shift_arr === $sorted_arr) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n  \
    \  return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $shift = 0;\n    for ($i = 1; $i < count($arr);\
    \ $i++) {\n        if ($arr[$i] < $arr[$i - 1]) {\n            $shift++;\n   \
    \     }\n    }\n    return $shift == 1;\n}\n$arr = array(2, 3, 4, 1);\nif (move_one_ball($arr))\
    \ {\n    echo \"true\\n\";\n} else {\n    echo \"false\\n\";\n}\n$arr = array(3,\
    \ 4, 5, 1, 2);\nif (move_one_ball($arr)) {\n    echo \"true\\n\";\n} else {\n\
    \    echo \"false\\n\";\n}\n$arr = array(3, 5, 4, 1, 2);\nif (move_one_ball($arr))\
    \ {\n    echo \"true\\n\";\n} else {\n    echo \"false\\n\";\n}\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "true\ntrue\nfalse\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7mor1sxe.php:59\n\
    Stack trace:\n#0 /tmp/tmp7mor1sxe.php(62): test()\n#1 {main}\n  thrown in /tmp/tmp7mor1sxe.php\
    \ on line 59\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    // Write your code here\n    // To print results\
    \ to the standard output you can use print\n    // Example: print \"Hello world!\"\
    ;\n    $min = null;\n    $max = null;\n    $is_empty = true;\n    $min_position\
    \ = null;\n    $max_position = null;\n    foreach ($arr as $key => $value) {\n\
    \        if (!$is_empty) {\n            if ($min_position !== null && $min_position\
    \ > $key && $max_position !== null && $max_position < $key) {\n              \
    \  return false;\n            }\n            if ($value < $min) {\n          \
    \      if ($min_position !== null && $min_position > $key) {\n               \
    \     return false;\n                }\n                $min = $value;\n     \
    \           $min_position = $key;\n            }\n            if ($value > $max)\
    \ {\n                if ($max_position !== null && $max_position < $key) {\n \
    \                   return false;\n                }\n                $max = $value;\n\
    \                $max_position = $key;\n            }\n        } else {\n    \
    \        $min = $value;\n            $max = $value;\n            $is_empty = false;\n\
    \            $min_position = $key;\n            $max_position = $key;\n      \
    \  }\n    }\n    return true;\n}\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz91iuk2f.php:66\n\
    Stack trace:\n#0 /tmp/tmpz91iuk2f.php(73): test()\n#1 {main}\n  thrown in /tmp/tmpz91iuk2f.php\
    \ on line 66\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n  $sum = 0;\n  for ($i = 0; $i < count($arr);\
    \ $i++) {\n    $sum += $arr[$i];\n  }\n  $n = count($arr);\n  $sum -= ($n * ($n\
    \ + 1)) / 2;\n  return $sum == 0;\n}\n$arr = array(4, 3, 5, 2, 1);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\necho \"\
    \\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\necho \"\\n\"\
    ;\n$arr = array(5, 5, 5, 5, 4);\necho move_one_ball($arr);\necho \"\\n\";\n$arr\
    \ = array(5, 5, 5, 5, 5);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(1,\
    \ 2, 3, 4, 5);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(3, 3, 3,\
    \ 3, 3);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(1, 2, 3, 3, 3);\n\
    echo move_one_ball($arr);\necho \"\\n\";\n$arr = array(3, 3, 3, 1, 2);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(3, 3, 3, 3, 2);\necho move_one_ball($arr);\necho \"\
    \\n\";\n$arr = array(3, 3, 3, 2, 1);\necho move_one_ball($arr);\necho \"\\n\"\
    ;\n$arr = array(1, 2, 3, 4, 6);\necho move_one_ball($arr);\necho \"\\n\";\n$arr\
    \ = array(1, 2, 3, 5, 6);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(1,\
    \ 2, 3, 4, 7);\necho move_one_ball($arr);\necho \"\\n\";\n$arr\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmp8ej53wpz.php
    on line 75

    '
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (count($arr) == 0) {\n        return true;\n\
    \    }\n    $len = count($arr);\n    $min = $arr[0];\n    $min_pos = 0;\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n            $min_pos = $i;\n        }\n    }\n    if ($min_pos\
    \ + 1 == $len) {\n        return true;\n    }\n    for ($i = $min_pos + 1; $i\
    \ < $len; $i++) {\n        if ($arr[$i] < $min) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptb0ygh8_.php:53\n\
    Stack trace:\n#0 /tmp/tmptb0ygh8_.php(58): test()\n#1 {main}\n  thrown in /tmp/tmptb0ygh8_.php\
    \ on line 53\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    // Your code goes here\n}\necho move_one_ball(array(3,\
    \ 5, 4, 1, 2)) . \"\\n\";\necho move_one_ball(array(3, 4, 5, 1, 2)) . \"\\n\"\
    ;\necho move_one_ball(array(4, 5, 1, 2, 3)) . \"\\n\";\necho move_one_ball(array(1,\
    \ 2, 3, 4, 5)) . \"\\n\";\necho move_one_ball(array(5, 4, 3, 2, 1)) . \"\\n\"\
    ;\necho move_one_ball(array(5, 1, 2, 3, 4)) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\n\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqvgh435o.php:37\n\
    Stack trace:\n#0 /tmp/tmpqvgh435o.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpqvgh435o.php\
    \ on line 37\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $count = count($arr);\n    if ($count < 2)\
    \ {\n        return true;\n    }\n    $min = $arr[0];\n    $min_pos = 0;\n   \
    \ for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i] < $min) {\n        \
    \    $min = $arr[$i];\n            $min_pos = $i;\n        }\n    }\n    if ($min_pos\
    \ == 0) {\n        return true;\n    }\n    $max = $arr[0];\n    for ($i = 1;\
    \ $i < $min_pos; $i++) {\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($max > $min) {\n        return false;\n    }\n    return\
    \ true;\n}\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpydps7pdb.php:55\n\
    Stack trace:\n#0 /tmp/tmpydps7pdb.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpydps7pdb.php\
    \ on line 55\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $N = count($arr);\n    $i = 0;\n    $j = 0;\n\
    \    for ($i = 0; $i < $N; $i++) {\n        $j = $i;\n        while ($j > 0 &&\
    \ $arr[$j - 1] > $arr[$j]) {\n            $temp = $arr[$j];\n            $arr[$j]\
    \ = $arr[$j - 1];\n            $arr[$j - 1] = $temp;\n            $j--;\n    \
    \    }\n    }\n    if ($arr == sort($arr)) {\n        return true;\n    } else\
    \ {\n        return false;\n    }\n}\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzf7kuuv4.php:49\n\
    Stack trace:\n#0 /tmp/tmpzf7kuuv4.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpzf7kuuv4.php\
    \ on line 49\n"
  timestamp: 1659979479
- exit_code: 0
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (count($arr) < 2) {\n        return true;\n\
    \    }\n    $rotate_count = 0;\n    $last_ball = $arr[0];\n    for ($i = 1; $i\
    \ < count($arr); $i++) {\n        if ($arr[$i] < $last_ball) {\n            $rotate_count++;\n\
    \        }\n        $last_ball = $arr[$i];\n    }\n    return $rotate_count <=\
    \ 1;\n}\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n\tif (count($arr) <= 1) return true;\n\t$unsorted\
    \ = array();\n\tfor ($i = 0; $i < count($arr); $i++) {\n\t\tif ($arr[$i] != $i\
    \ + 1) {\n\t\t\t$unsorted[] = $arr[$i];\n\t\t}\n\t}\n\t$i = 0;\n\t$j = 0;\n\t\
    while ($i < count($unsorted) && $j < count($unsorted)) {\n\t\tif ($unsorted[$i]\
    \ < $unsorted[$j]) {\n\t\t\t$i++;\n\t\t} else {\n\t\t\t$j++;\n\t\t}\n\t}\n\treturn\
    \ $i < count($unsorted) ? false : true;\n}\nfunction candidate(...$args) {\n \
    \   return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmevlqed5.php:47\n\
    Stack trace:\n#0 /tmp/tmpmevlqed5.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpmevlqed5.php\
    \ on line 47\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if(empty($arr)){\n        return true;\n \
    \   }\n    $len = count($arr);\n    $min = $arr[0];\n    for($i = 1; $i < $len;\
    \ $i++){\n        if($arr[$i] < $min){\n            $min = $arr[$i];\n       \
    \ }\n    }\n    if($min != $arr[0]){\n        return false;\n    }else{\n    \
    \    return true;\n    }\n}\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplq2uka_4.php:45\n\
    Stack trace:\n#0 /tmp/tmplq2uka_4.php(52): test()\n#1 {main}\n  thrown in /tmp/tmplq2uka_4.php\
    \ on line 45\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n\tif (empty($arr)) return true;\n\tsort($arr);\n\
    \t$pos = null;\n\tfor ($i = 0; $i < count($arr); $i++) {\n\t\tif ($arr[$i] !=\
    \ $i + 1) {\n\t\t\t$pos = $i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif ($pos == null) return\
    \ true;\n\tif ($pos == count($arr) - 1) return false;\n\tfor ($i = $pos + 1; $i\
    \ < count($arr); $i++) {\n\t\tif ($arr[$i] != $arr[$i - 1] + 1) return false;\n\
    \t}\n\treturn true;\n}\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8pqbw3do.php:46\n\
    Stack trace:\n#0 /tmp/tmp8pqbw3do.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp8pqbw3do.php\
    \ on line 46\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $length = count($arr);\n    for ($i = 0; $i\
    \ < $length; $i++) {\n        if ($arr[$i] > $arr[$i + 1]) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\necho move_one_ball(array(3, 4,\
    \ 5, 1, 2)) . \"\\n\";\necho move_one_ball(array(3, 5, 4, 1, 2)) . \"\\n\";\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr5rcbe7r.php:39\n\
    Stack trace:\n#0 /tmp/tmpr5rcbe7r.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpr5rcbe7r.php\
    \ on line 39\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    // WRITE YOUR CODE HERE\n}\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe9fnnqyg.php:31\n\
    Stack trace:\n#0 /tmp/tmpe9fnnqyg.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpe9fnnqyg.php\
    \ on line 31\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n  $i = 0;\n  $maxValue = $arr[0];\n  $maxValueIndex\
    \ = 0;\n  for($i=0; $i<count($arr); $i++) {\n    if($arr[$i] > $maxValue) {\n\
    \      $maxValue = $arr[$i];\n      $maxValueIndex = $i;\n    }\n  }\n  $minValue\
    \ = $arr[0];\n  $minValueIndex = 0;\n  for($i=0; $i<count($arr); $i++) {\n   \
    \ if($arr[$i] < $minValue) {\n      $minValue = $arr[$i];\n      $minValueIndex\
    \ = $i;\n    }\n  }\n  if($maxValueIndex > $minValueIndex) {\n    return true;\n\
    \  } else {\n    return false;\n  }\n}\n\n$a = array(3, 5, 4, 1, 2);\necho move_one_ball($a);\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjcj2qdih.php:55\n\
    Stack trace:\n#0 /tmp/tmpjcj2qdih.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpjcj2qdih.php\
    \ on line 55\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $start = 0;\n    $end = count($arr) - 1;\n\
    \    $count = count($arr);\n    while($start < $end) {\n        if ($arr[$start]\
    \ > $arr[$end]) {\n            return false;\n        } else if ($arr[$start]\
    \ < $arr[$end]) {\n            $start += 1;\n        } else {\n            $start\
    \ += 1;\n            $end -= 1;\n        }\n    }\n    return true;\n}\necho move_one_ball(array(3,\
    \ 4, 5, 1, 2)) . \"\\n\";\necho move_one_ball(array(3, 5, 4, 1, 2)) . \"\\n\"\
    ;\necho move_one_ball(array(1, 2, 3, 4, 5)) . \"\\n\";\necho move_one_ball(array(1,\
    \ 2, 3, 5, 4)) . \"\\n\";\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwm6_8uio.php:48\n\
    Stack trace:\n#0 /tmp/tmpwm6_8uio.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpwm6_8uio.php\
    \ on line 48\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (count($arr) == 0) {\n        return true;\n\
    \    }\n    $first = $arr[0];\n    $last = $arr[count($arr) - 1];\n    $min =\
    \ min($first, $last);\n    $max = max($first, $last);\n    for ($i = 1; $i < count($arr)\
    \ - 1; $i++) {\n        if ($arr[$i] > $max || $arr[$i] < $min) {\n          \
    \  return false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxjqyzwj_.php:44\n\
    Stack trace:\n#0 /tmp/tmpxjqyzwj_.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpxjqyzwj_.php\
    \ on line 44\n"
  timestamp: 1659979479
- exit_code: 0
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    // Run through the array and see if the \n\
    \    // order is still the same after performing\n    // a right shift\n    $size\
    \ = count($arr);\n    if ($size == 0) {\n        return true;\n    }\n    for\
    \ ($i = 0; $i < $size; $i++) {\n        $temp = $arr[$size - 1];\n        for\
    \ ($j = $size - 1; $j > 0; $j--) {\n            $arr[$j] = $arr[$j - 1];\n   \
    \     }\n        $arr[0] = $temp;\n        $check = true;\n        for ($j = 0;\
    \ $j < $size - 1; $j++) {\n            if ($arr[$j] > $arr[$j + 1]) {\n      \
    \          $check = false;\n                break;\n            }\n        }\n\
    \        if ($check) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len <= 1) {\n\
    \        return true;\n    }\n    for ($i = 1; $i < $len; $i++) {\n        if\
    \ ($arr[$i] < $arr[$i - 1]) {\n            if ($i == 1) {\n                $arr\
    \ = array_slice($arr, 1);\n                $arr[] = $arr[0];\n               \
    \ unset($arr[0]);\n            } else {\n                return false;\n     \
    \       }\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfryvqpty.php:47\n\
    Stack trace:\n#0 /tmp/tmpfryvqpty.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpfryvqpty.php\
    \ on line 47\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $count = count($arr);\n    for ($i = 1; $i\
    \ < $count; $i++) {\n        if ($arr[$i] < $arr[$i - 1]) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpevuqnkc1.php:38\n\
    Stack trace:\n#0 /tmp/tmpevuqnkc1.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpevuqnkc1.php\
    \ on line 38\n"
  timestamp: 1659979479
- exit_code: 0
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n  if (empty($arr)) {\n    return true;\n  }\n\
    \  $sorted_arr = $arr;\n  sort($sorted_arr);\n  $arr_length = count($arr);\n \
    \ for ($i = 0; $i < $arr_length; $i++) {\n    $arr = array_merge(array_slice($arr,\
    \ $arr_length - 1), array_slice($arr, 0, $arr_length - 1));\n    if ($arr == $sorted_arr)\
    \ {\n      return true;\n    }\n  }\n  return false;\n}\n\n$tests = array(\n \
    \ array(3, 4, 5, 1, 2),\n  array(3, 5, 4, 1, 2),\n  array(5, 3, 4, 1, 2),\n  array(1,\
    \ 2, 3, 4, 5),\n  array(5, 1, 2, 3, 4),\n  array(5, 1, 2, 3, 4, 6),\n  array(5,\
    \ 1, 2, 3, 4, 5),\n  array(5, 5, 5, 5, 5),\n  array(1, 2, 3, 4, 5, 4, 3, 2, 1),\n\
    \  array(1, 2, 3, 4, 4, 3, 2, 1),\n  array(1, 2, 3, 3, 2, 1),\n  array(1, 2, 2,\
    \ 1),\n  array(1, 1),\n  array(1),\n  array(),\n);\nforeach ($tests as $test)\
    \ {\n  $result = move_one_ball($test);\n  echo \"$result\\n\";\n}\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1



    1

    1


    1

    1




    1

    1

    1

    1

    '
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $count = count($arr);\n    $last = $arr[$count\
    \ - 1];\n    $found = false;\n    for ($i = 0; $i < $count - 1; $i++) {\n    \
    \    if ($arr[$i] > $last) {\n            $found = true;\n            break;\n\
    \        }\n    }\n    if ($found) {\n        return false;\n    }\n    return\
    \ true;\n}\n\nprint_r(move_one_ball(array(3, 4, 5, 1, 2)) . \"\\n\");\nprint_r(move_one_ball(array(3,\
    \ 5, 4, 1, 2)) . \"\\n\");\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw3atdted.php:46\n\
    Stack trace:\n#0 /tmp/tmpw3atdted.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpw3atdted.php\
    \ on line 46\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (count($arr) == 0) {\n        return true;\n\
    \    }\n    $i = 0;\n    $j = count($arr) - 1;\n    while ($i < $j) {\n      \
    \  if ($arr[$i] <= $arr[$i + 1]) {\n            $i++;\n        } else if ($arr[$j]\
    \ >= $arr[$j - 1]) {\n            $j--;\n        } else {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp16a07zdd.php:45\n\
    Stack trace:\n#0 /tmp/tmp16a07zdd.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp16a07zdd.php\
    \ on line 45\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $n = count($arr);\n    if ($n <= 1) {\n  \
    \      return true;\n    }\n    $all_zeros = true;\n    $all_ones = true;\n  \
    \  for ($i = 0; $i < $n; $i++) {\n        if ($arr[$i] == 0) {\n            $all_ones\
    \ = false;\n        } else {\n            $all_zeros = false;\n        }\n   \
    \ }\n    if ($all_zeros || $all_ones) {\n        return true;\n    }\n    for\
    \ ($i = 0; $i < $n - 1; $i++) {\n        if ($arr[$i] > $arr[$i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv863rcf0.php:54\n\
    Stack trace:\n#0 /tmp/tmpv863rcf0.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpv863rcf0.php\
    \ on line 54\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (count($arr) == 0) {\n        return true;\n\
    \    }\n    $current_ball = 1;\n    $current_position = 0;\n    while ($current_ball\
    \ <= count($arr)) {\n        $position = array_search($current_ball, $arr);\n\
    \        $move = $position - $current_position;\n        if ($move < 0) {\n  \
    \          return false;\n        }\n        $current_position = $position;\n\
    \        $current_ball++;\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9ly49re9.php:46\n\
    Stack trace:\n#0 /tmp/tmp9ly49re9.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp9ly49re9.php\
    \ on line 46\n"
  timestamp: 1659979479
- exit_code: -1
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if(empty($arr)) return true;\n    $count =\
    \ 0;\n    $i = 1;\n    while($i < count($arr)) {\n        if($arr[$i] >= $arr[$i-1])\
    \ {\n            $i++;\n        } else {\n            $count++;\n            $i\
    \ = 1;\n        }\n    }\n    if($count > 1) return false;\n    return true;\n\
    }\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659979484
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n  $n = count($arr);\n  $sorted_arr = $arr;\n \
    \ sort($sorted_arr);\n  if ($sorted_arr == $arr) {\n    return true;\n  }\n  for\
    \ ($i = 0; $i < $n; $i++) {\n    $arr = rotate_right($arr);\n    $flag = true;\n\
    \    for ($j = 0; $j < $n; $j++) {\n      if ($arr[$j] != $sorted_arr[$j]) {\n\
    \        $flag = false;\n        break;\n      }\n    }\n    if ($flag) {\n  \
    \    return true;\n    }\n  }\n  return false;\n}\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function rotate_right()\
    \ in /tmp/tmpwmjk0vph.php:31\nStack trace:\n#0 /tmp/tmpwmjk0vph.php(46): move_one_ball(Array)\n\
    #1 /tmp/tmpwmjk0vph.php(50): candidate(Array)\n#2 /tmp/tmpwmjk0vph.php(57): test()\n\
    #3 {main}\n  thrown in /tmp/tmpwmjk0vph.php on line 31\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n  if (empty($arr)) {\n    return true;\n  }\n\n\
    \  $n = count($arr);\n  $low = 0;\n  $high = $n - 1;\n  while ($low < $high) {\n\
    \    $mid = floor(($low + $high) / 2);\n    if ($arr[$mid] < $arr[$low]) {\n \
    \     $high = $mid;\n    } else if ($arr[$mid] > $arr[$high]) {\n      $low =\
    \ $mid + 1;\n    } else {\n      return true;\n    }\n  }\n  return false;\n}\n\
    \nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdrrqtzhv.php:52\n\
    Stack trace:\n#0 /tmp/tmpdrrqtzhv.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpdrrqtzhv.php\
    \ on line 52\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $i = count($arr);\n    while ($i-- > 0) {\n\
    \        if ($arr[$i] > $arr[0]) {\n            break;\n        }\n    }\n   \
    \ $j = 0;\n    while ($j++ < $i) {\n        if ($arr[$j] < $arr[$j - 1]) {\n \
    \           return false;\n        }\n    }\n    $j = count($arr);\n    while\
    \ ($j-- > $i) {\n        if ($arr[$j] < $arr[$i]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr)\
    \ . '<br>';\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr) . '<br>';\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<br><br>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmzxi4fxi.php:53\n\
    Stack trace:\n#0 /tmp/tmpmzxi4fxi.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpmzxi4fxi.php\
    \ on line 53\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n  // Create a new array that is a copy of the\
    \ original array.\n  $arr_copy = $arr;\n  // Sort the new array.\n  sort($arr_copy);\n\
    \  // Store the number of right shifts.\n  $num_shifts = 0;\n  // Loop through\
    \ elements of the original array.\n  for ($i = 0; $i < count($arr); $i++) {\n\
    \    // If the element at the current index doesn't match the element\n    //\
    \ at the current index of the sorted array, perform a right shift.\n    if ($arr[$i]\
    \ != $arr_copy[$i]) {\n      right_shift($arr);\n      $num_shifts++;\n    }\n\
    \  }\n  // If the number of right shifts is equal to the length of the array,\n\
    \  // the array has been sorted.\n  if ($num_shifts == count($arr)) {\n    return\
    \ true;\n  }\n  // If the number of right shifts is less than the length of the\
    \ array,\n  // the array has not been sorted.\n  elseif ($num_shifts < count($arr))\
    \ {\n    return false;\n  }\n}\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function right_shift()\
    \ in /tmp/tmpbabgjl6v.php:35\nStack trace:\n#0 /tmp/tmpbabgjl6v.php(51): move_one_ball(Array)\n\
    #1 /tmp/tmpbabgjl6v.php(55): candidate(Array)\n#2 /tmp/tmpbabgjl6v.php(62): test()\n\
    #3 {main}\n  thrown in /tmp/tmpbabgjl6v.php on line 35\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n  return false;\n}\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqcz2mla0.php:31\n\
    Stack trace:\n#0 /tmp/tmpqcz2mla0.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpqcz2mla0.php\
    \ on line 31\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n  if (count($arr) <= 1) return true;\n  $min =\
    \ $arr[0];\n  $count = 1;\n  for ($i = 1; $i < count($arr); $i++) {\n    if ($arr[$i]\
    \ < $min) {\n      $min = $arr[$i];\n      $count = 1;\n    } else if ($arr[$i]\
    \ == $min) {\n      $count++;\n    }\n  }\n  if ($count > 1) return true;\n  else\
    \ return false;\n}\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptocct85s.php:43\n\
    Stack trace:\n#0 /tmp/tmptocct85s.php(50): test()\n#1 {main}\n  thrown in /tmp/tmptocct85s.php\
    \ on line 43\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    // Check if the array is empty or not\n  \
    \  if(empty($arr)){\n        return true;\n    }\n    // Sort the array\n    sort($arr);\n\
    \    // Get the first and last elements of the array\n    $first = $arr[0];\n\
    \    $last = $arr[count($arr) - 1];\n    // If the last element is equal to the\
    \ first element, it is sorted already\n    if($last == $first){\n        return\
    \ true;\n    }\n    // Unset the last element\n    unset($arr[count($arr) - 1]);\n\
    \    // If the last element is greater than the first element, then it is not\n\
    \    // possible to shift array elements and make it in non-decreasing order\n\
    \    if($last > $first){\n        return false;\n    }\n    // Return the result\
    \ of recursive call on the modified array\n    return move_one_ball($arr);\n}\n\
    echo move_one_ball(array(3, 4, 5, 1, 2)) . PHP_EOL;\necho move_one_ball(array(3,\
    \ 5, 4, 1, 2)) . PHP_EOL;\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpacq0s6df.php:54\n\
    Stack trace:\n#0 /tmp/tmpacq0s6df.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpacq0s6df.php\
    \ on line 54\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n\tif (count($arr) <= 1) return true;\n\tfor ($i\
    \ = 0; $i < count($arr); $i++) {\n\t\tif ($arr[$i] > $arr[$i + 1]) {\n\t\t\treturn\
    \ true;\n\t\t}\n\t}\n\treturn false;\n}\n\nfunction candidate(...$args) {\n  \
    \  return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpep09h44s.php:40\n\
    Stack trace:\n#0 /tmp/tmpep09h44s.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpep09h44s.php\
    \ on line 40\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $i = 0;\n    $count = count($arr);\n    while\
    \ ($i < $count) {\n        $j = $i + 1;\n        if ($arr[$i] > $arr[$j]) {\n\
    \            // swap current index and next index element\n            $temp =\
    \ $arr[$i];\n            $arr[$i] = $arr[$j];\n            $arr[$j] = $temp;\n\
    \            if ($j + 1 < $count) {\n                // check the elemnet next\
    \ to current index\n                if ($arr[$j] > $arr[$j + 1]) {\n         \
    \           return false;\n                }\n            }\n        }\n     \
    \   $i++;\n    }\n    return true;\n}\n$num = readline('Enter the number of elements\
    \ in array: ');\n$arr = [];\nfor ($i = 0; $i < $num; $i++) {\n    $arr[$i] = readline('Enter\
    \ the element ' . ($i + 1) . ': ');\n}\necho move_one_ball($arr) ? 'true' : 'false';\n\
    echo PHP_EOL;\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function readline() in\
    \ /tmp/tmpnqne5u5n.php:44\nStack trace:\n#0 {main}\n  thrown in /tmp/tmpnqne5u5n.php\
    \ on line 44\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if(empty($arr)) {\n        return true;\n\
    \    }\n    $length = count($arr);\n    for($i = 0; $i < $length - 1; $i++) {\n\
    \        if($arr[$i] > $arr[$i + 1]) {\n            return false;\n        }\n\
    \    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphvffvwtv.php:41\n\
    Stack trace:\n#0 /tmp/tmphvffvwtv.php(48): test()\n#1 {main}\n  thrown in /tmp/tmphvffvwtv.php\
    \ on line 41\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n  $right = 0;\n  $left = count($arr) - 1;\n  if($left\
    \ == -1) {\n    return true;\n  }\n  $prev = array_pop($arr);\n  $right++;\n \
    \ while($right < $left) {\n    $curr = array_pop($arr);\n    if($curr >= $prev)\
    \ {\n      $prev = $curr;\n      $right++;\n    } else {\n      $left--;\n   \
    \ }\n  }\n  return ($right == $left) ? true : false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbrksxlcj.php:50\n\
    Stack trace:\n#0 /tmp/tmpbrksxlcj.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpbrksxlcj.php\
    \ on line 50\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n  if (empty($arr)) {\n    return true;\n  }\n\n\
    \  $length = count($arr);\n  $min_last_element = PHP_INT_MAX;\n  $possible = true;\n\
    \n  for ($i = 0; $i < $length; $i++) {\n    $current_element = $arr[$i];\n   \
    \ $min_last_element = min($min_last_element, $current_element);\n\n    if ($current_element\
    \ > $min_last_element) {\n      $possible = false;\n      break;\n    }\n  }\n\
    \n  return $possible;\n}\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp41cbid9k.php:49\n\
    Stack trace:\n#0 /tmp/tmp41cbid9k.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp41cbid9k.php\
    \ on line 49\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $previous = null;\n    $n = sizeof($arr);\n\
    \    if($n == 0) {\n        return true;\n    }\n    for($i = 0; $i < $n; $i++)\
    \ {\n        if($arr[$i] < $previous) {\n            return false;\n        }\n\
    \        $previous = $arr[$i];\n    }\n    return true;\n}\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_i5icf89.php:42\n\
    Stack trace:\n#0 /tmp/tmp_i5icf89.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp_i5icf89.php\
    \ on line 42\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n\t// If the array is empty then return true as\
    \ per the problem statement.\n\tif (empty($arr)) return true;\n\t// We sort the\
    \ given array in ascending order and store it in variable 's'.\n\t$s = range(1,\
    \ count($arr));\n\tsort($s);\n\t// We are comparing the above sorted array 's'\
    \ with the given array 'arr'.\n\treturn ($s == $arr);\n}\n$arr = array(3, 4, 5,\
    \ 1, 2);\necho move_one_ball($arr) . PHP_EOL;\nfunction candidate(...$args) {\n\
    \    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpua8sb79q.php:39\n\
    Stack trace:\n#0 /tmp/tmpua8sb79q.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpua8sb79q.php\
    \ on line 39\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n\n    // For example, [3, 4, 5, 1, 2] -> [3, 4, 5, 1, 2]\n    // [3, 4,\
    \ 5, 1, 2] -> [5, 1, 2, 3, 4]\n    // [5, 1, 2, 3, 4] -> [1, 2, 3, 4, 5]\n   \
    \ // [1, 2, 3, 4, 5] -> TRUE\n\n    $count = count($arr);\n    for ($i = 0; $i\
    \ < $count; $i++) {\n        if (array_keys($arr)[0] != min($arr)) {\n       \
    \     array_push($arr, array_shift($arr));\n        }\n    }\n\n    for ($i =\
    \ 0; $i < $count; $i++) {\n        if (array_keys($arr)[$i] != $i) {\n       \
    \     return false;\n        }\n    }\n\n    return true;\n}\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpigg3ydvn.php:55\n\
    Stack trace:\n#0 /tmp/tmpigg3ydvn.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpigg3ydvn.php\
    \ on line 55\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    // TODO\n}\nfunction candidate(...$args) {\n\
    \    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm9gggdl5.php:31\n\
    Stack trace:\n#0 /tmp/tmpm9gggdl5.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpm9gggdl5.php\
    \ on line 31\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n  $l = count($arr);\n  $r = 0;\n  $min = $arr[0];\n\
    \  for ($i = 1; $i < $l; $i++) {\n    if ($arr[$i] < $min) {\n      $min = $arr[$i];\n\
    \      $r = $i;\n    }\n  }\n  if ($r > 0) {\n    for ($i = $r - 1; $i >= 0; $i--)\
    \ {\n      if ($arr[$i] > $arr[$i + 1]) return false;\n    }\n    for ($i = $r\
    \ + 1; $i < $l; $i++) {\n      if ($arr[$i] < $arr[$i - 1]) return false;\n  \
    \  }\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiiyvx7m3.php:49\n\
    Stack trace:\n#0 /tmp/tmpiiyvx7m3.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpiiyvx7m3.php\
    \ on line 49\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n  if (empty($arr)) {\n    return true;\n  }\n\
    \  $min = $arr[0];\n  $size = count($arr);\n  for ($i = 1; $i < $size; $i++) {\n\
    \    if ($arr[$i] < $min) {\n      return false;\n    }\n    $min = min($min,\
    \ $arr[$i]);\n  }\n  return true;\n}\n$arr = array(3, 4, 5, 1, 2);\necho \"<pre>\"\
    ;\nvar_dump(move_one_ball($arr));\n$arr = array(3, 5, 4, 1, 2);\nvar_dump(move_one_ball($arr));\n\
    echo \"</pre>\";\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>bool(false)\nbool(false)\n</pre>\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpe7knr3vi.php:48\nStack trace:\n#0 /tmp/tmpe7knr3vi.php(55):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpe7knr3vi.php on line 48\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n\tif (empty($arr)) return true;\n\t$len = count($arr);\n\
    \tfor ($i = 0; $i < $len; $i++) {\n\t\t$key = $arr[$i];\n\t\t$j = $i - 1;\n\t\t\
    while ($j >= 0 && $arr[$j] > $key) {\n\t\t\t$arr[$j + 1] = $arr[$j];\n\t\t\t$j\
    \ = $j - 1;\n\t\t}\n\t\t$arr[$j + 1] = $key;\n\t}\n\t$sorted = true;\n\tfor ($i\
    \ = 0; $i < $len; $i++) {\n\t\tif ($arr[$i] !== $i + 1) {\n\t\t\t$sorted = false;\n\
    \t\t\tbreak;\n\t\t}\n\t}\n\treturn $sorted;\n}\necho move_one_ball(array(3, 4,\
    \ 5, 1, 2)) . PHP_EOL;\necho move_one_ball(array(3, 5, 4, 1, 2)) . PHP_EOL;\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp19jsau7m.php:52\n\
    Stack trace:\n#0 /tmp/tmp19jsau7m.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp19jsau7m.php\
    \ on line 52\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if(!$arr) {\n        return true;\n    }\n\
    \n    $i = 1;\n    $count = 0;\n    $min = $arr[0];\n    $n = count($arr);\n \
    \   while($i < $n) {\n        if($arr[$i] < $min) {\n            $min = $arr[$i];\n\
    \            $count = 0;\n        }\n        if($arr[$i] == $min) {\n        \
    \    $count++;\n        }\n        $i++;\n    }\n    if($count >= ($n - 2)) {\n\
    \        return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkdrm28g2.php:53\n\
    Stack trace:\n#0 /tmp/tmpkdrm28g2.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpkdrm28g2.php\
    \ on line 53\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    for ($i = 0; $i <\
    \ $len; $i++) {\n        if ($arr[$i] > $arr[$i + 1]) {\n            $temp = $arr[$i];\n\
    \            $arr[$i] = $arr[$i + 1];\n            $arr[$i + 1] = $temp;\n   \
    \     }\n    }\n    $arr = array_values($arr);\n    $min_value = $arr[0];\n  \
    \  $i = 0;\n    while ($arr[$i] == $min_value) {\n        $i++;\n    }\n    if\
    \ ($i == $len) {\n        return true;\n    } else {\n        return false;\n\
    \    }\n}\necho move_one_ball(array(1, 2, 3, 4, 5)) . PHP_EOL;\necho move_one_ball(array(1,\
    \ 2, 3, 5, 4)) . PHP_EOL;\necho move_one_ball(array(3, 4, 5, 1, 2)) . PHP_EOL;\n\
    echo move_one_ball(array(3, 5, 4, 1, 2)) . PHP_EOL;\necho move_one_ball(array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10)) . PHP_EOL;\necho move_one_ball(array(1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11)) . PHP_EOL;\necho move_one_ball(array(1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12)) . PHP_EOL;\necho move_one_ball(array(1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12, 13)) . PHP_EOL;\necho move_one_ball(array(3, 5, 4, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14, 1, 2)) . PHP_EOL;\necho move_one_ball(array(1,\
    \ 2, 3, 5, 4, 6, 7, 8, 9, 10,\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpp28ic2hd.php on line 54

    '
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n  // Implement your solution here.\n  return False;\n\
    }\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphby4ow1l.php:32\n\
    Stack trace:\n#0 /tmp/tmphby4ow1l.php(39): test()\n#1 {main}\n  thrown in /tmp/tmphby4ow1l.php\
    \ on line 32\n"
  timestamp: 1659979479
- exit_code: 0
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (sizeof($arr) < 2) return true;\n    //\
    \ We don't want the first one because we want to compare it with the\n    // previous\
    \ one when we go through the array\n    $first = array_shift($arr);\n    $count\
    \ = 0;\n    foreach ($arr as $num) {\n        if ($num < $first) $count++;\n \
    \       $first = $num;\n    }\n    if ($count > 1) return false;\n    return true;\n\
    }\necho move_one_ball(array(3, 4, 5, 1, 2)) . \"\\n\";\necho move_one_ball(array(3,\
    \ 5, 4, 1, 2)) . \"\\n\";\necho move_one_ball(array(3, 5, 4, 3, 2)) . \"\\n\"\
    ;\necho move_one_ball(array(3, 5, 4, 1, 2, 4)) . \"\\n\";\necho move_one_ball(array(3,\
    \ 5, 4, 2, 1, 4)) . \"\\n\";\necho move_one_ball(array(3, 1, 2, 3, 4, 5)) . \"\
    \\n\";\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1





    1

    '
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $temp = $arr;\n    sort($temp);\n    $m =\
    \ 0;\n    $n = 0;\n    for ($i = 0; $i < count($arr); $i++) {\n        if ($arr[$i]\
    \ !== $temp[$i]) {\n            $m = $i;\n            break;\n        }\n    }\n\
    \    for ($i = count($arr) - 1; $i >= 0; $i--) {\n        if ($arr[$i] !== $temp[$i])\
    \ {\n            $n = $i;\n            break;\n        }\n    }\n    $a = array_slice($arr,\
    \ $m, $n - $m + 1);\n    if (sort($a) == $a) {\n        return true;\n    } else\
    \ {\n        return false;\n    }\n}\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_8fp7n28.php:54\n\
    Stack trace:\n#0 /tmp/tmp_8fp7n28.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp_8fp7n28.php\
    \ on line 54\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n\t// Write your code here\n\t// To print results\
    \ to the standard output you can use print\n\t// Example: print \"Hello world!\"\
    ;\n\tprint_r($arr);\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 3\n    [1] => 4\n    [2] => 5\n    [3] => 1\n    [4]\
    \ => 2\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps8f87bot.php:35\n\
    Stack trace:\n#0 /tmp/tmps8f87bot.php(42): test()\n#1 {main}\n  thrown in /tmp/tmps8f87bot.php\
    \ on line 35\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (count($arr) <= 1) {\n        return true;\n\
    \    }\n    $max = $arr[0];\n    $lastMax = $arr[0];\n    $length = count($arr);\n\
    \    $lastIndex = $length - 1;\n    $maxIndex = 0;\n    for ($i = 1; $i < $length;\
    \ $i++) {\n        if ($arr[$i] < $max) {\n            if ($arr[$i] > $lastMax)\
    \ {\n                return false;\n            }\n            $max = $arr[$i];\n\
    \            $maxIndex = $i;\n        } else {\n            $lastMax = $arr[$i];\n\
    \        }\n    }\n    if ($maxIndex === $lastIndex) {\n        return true;\n\
    \    }\n    return move_one_ball(array_merge(array_slice($arr, $maxIndex + 1),\n\
    \        array_slice($arr, 0, $maxIndex + 1)));\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxkfz3ybd.php:57\n\
    Stack trace:\n#0 /tmp/tmpxkfz3ybd.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpxkfz3ybd.php\
    \ on line 57\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    // Write your code here\n    // To print results\
    \ to the standard output you can use print\n    // Example: print \"Hello world!\"\
    ;\n    $count = 0;\n    $len = count($arr);\n    while($count < $len) {\n    \
    \    if($arr[$count] > $arr[$count+1]) {\n            return false;\n        }\n\
    \        $count++;\n    }\n    return true;\n}\n\n$input1 = array(3, 4, 5, 1,\
    \ 2);\n$input2 = array(3, 5, 4, 1, 2);\n$input3 = array(9, 8, 7, 6, 5, 4, 3, 2,\
    \ 1);\n$input4 = array(4, 5, 6, 7, 8, 9, 1, 2, 3);\n$input5 = array(5, 4, 3, 2,\
    \ 1);\n\necho move_one_ball($input1).\"\\n\";\necho move_one_ball($input2).\"\\\
    n\";\necho move_one_ball($input3).\"\\n\";\necho move_one_ball($input4).\"\\n\"\
    ;\necho move_one_ball($input5).\"\\n\";\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_m92t9u9.php:54\n\
    Stack trace:\n#0 /tmp/tmp_m92t9u9.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp_m92t9u9.php\
    \ on line 54\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n\tif (count($arr) == 0) {\n\t\treturn true;\n\t\
    }\n\n\t$count = 0;\n\t$max = $arr[0];\n\tfor ($i = 1; $i < count($arr); $i++)\
    \ {\n\t\tif ($arr[$i] < $max) {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$max = $arr[$i];\n\
    \t\t}\n\t}\n\n\tif ($count > 1) {\n\t\treturn false;\n\t}\n\n\treturn true;\n\
    }\n\n$tests = [\n\t[\n\t\t\"input\" => [3, 4, 5, 1, 2],\n\t\t\"output\" => true\n\
    \t],\n\t[\n\t\t\"input\" => [3, 5, 4, 1, 2],\n\t\t\"output\" => false\n\t],\n\t\
    [\n\t\t\"input\" => [1, 2, 3, 4, 5],\n\t\t\"output\" => true\n\t],\n\t[\n\t\t\"\
    input\" => [5, 4, 3, 2, 1],\n\t\t\"output\" => false\n\t],\n\t[\n\t\t\"input\"\
    \ => [5, 4, 2, 1, 3],\n\t\t\"output\" => true\n\t],\n\t[\n\t\t\"input\" => [5,\
    \ 4, 2, 1, 3, 7, 6],\n\t\t\"output\" => true\n\t],\n\t[\n\t\t\"input\" => [5,\
    \ 4, 2, 1, 3, 7, 8],\n\t\t\"output\" => false\n\t],\n\t[\n\t\t\"input\" => [5,\
    \ 4, 2, 1, 3, 7, 8, 9],\n\t\t\"output\" => false\n\t],\n\t[\n\t\t\"input\" =>\
    \ [5, 4, 2, 1, 3, 7, 8, 9, 10],\n\t\t\"output\" => false\n\t],\n\t[\n\t\t\"input\"\
    \ => [5, 4, 2, 1, 3, 7, 8, 9, 10, 11],\n\t\t\"output\" => false\n\t],\n\t[\n\t\
    \t\"input\" => [5, 4, 2, 1, 3, 7, 8\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "]" in /tmp/tmpom2zwinh.php
    on line 88

    '
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n\t$i = 0;\n\t$j = count($arr) - 1;\n\t$min = $arr[$i];\n\
    \t$max = $arr[$j];\n\twhile ($i <= $j) {\n\t\tif ($arr[$i] <= $min) {\n\t\t\t\
    $min = $arr[$i];\n\t\t\t$i++;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\twhile\
    \ ($j >= $i) {\n\t\tif ($arr[$j] >= $max) {\n\t\t\t$max = $arr[$j];\n\t\t\t$j--;\n\
    \t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\tif ($i > $j) {\n\t\treturn true;\n\t\
    } else {\n\t\treturn false;\n\t}\n}\n\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx0evho4k.php:56\n\
    Stack trace:\n#0 /tmp/tmpx0evho4k.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpx0evho4k.php\
    \ on line 56\n"
  timestamp: 1659979479
- exit_code: -1
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $count = count($arr);\n    for ($i = 0; $i\
    \ < $count; $i++) {\n        if ($arr[$i] > $arr[$i + 1]) {\n            array_push($arr,\
    \ array_shift($arr));\n            $i = -1;\n        }\n    }\n    return true;\n\
    }\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659979484
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n  // Your code here...\n}\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf8m3jgt_.php:31\n\
    Stack trace:\n#0 /tmp/tmpf8m3jgt_.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpf8m3jgt_.php\
    \ on line 31\n"
  timestamp: 1659979478
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) return true;\n    $length\
    \ = count($arr);\n    $max_value = $arr[0];\n    for ($i = 1; $i < $length; $i++)\
    \ {\n        if ($arr[$i] > $max_value) {\n            $max_value = $arr[$i];\n\
    \        } else {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\necho \"\\n\";\n\
    $arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\necho \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptv7_xmfj.php:48\n\
    Stack trace:\n#0 /tmp/tmptv7_xmfj.php(55): test()\n#1 {main}\n  thrown in /tmp/tmptv7_xmfj.php\
    \ on line 48\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n\treturn false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn_pspeb7.php:32\n\
    Stack trace:\n#0 /tmp/tmpn_pspeb7.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpn_pspeb7.php\
    \ on line 32\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $size = count($arr);\n    if($size <= 1) {\n\
    \        return true;\n    }\n\n    $min = $arr[0];\n    $flag = true;\n    for($i\
    \ = 1; $i < $size; $i++) {\n        if($arr[$i] < $min) {\n            $flag =\
    \ false;\n            break;\n        }\n        $min = $arr[$i];\n    }\n   \
    \ return $flag;\n}\n\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm3qrh3aw.php:50\n\
    Stack trace:\n#0 /tmp/tmpm3qrh3aw.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpm3qrh3aw.php\
    \ on line 50\n"
  timestamp: 1659979479
- exit_code: 0
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) return true;\n    $left =\
    \ $arr[0];\n    $right = $arr[1];\n    $counter = 0;\n    for ($i = 1; $i < count($arr);\
    \ $i++) {\n        if ($left > $right) {\n            $counter++;\n          \
    \  if ($counter > 1) return false;\n        }\n        $left = $right;\n     \
    \   $right = $arr[$i];\n    }\n    return true;\n}\nprint_r(move_one_ball(array(3,\
    \ 4, 5, 1, 2)));\nprint_r(move_one_ball(array(3, 5, 4, 1, 2)));\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1'
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $size = count($arr);\n    $isDecreasing =\
    \ false;\n    for ($i = 0; $i < $size - 1; $i++) {\n        if ($arr[$i] > $arr[$i\
    \ + 1]) {\n            $isDecreasing = true;\n            break;\n        }\n\
    \    }\n    if ($isDecreasing == false) {\n        return true;\n    }\n    for\
    \ ($i = 0; $i < $size - 1; $i++) {\n        if ($arr[$i] > $arr[$i + 1]) {\n \
    \           $temp = $arr[$i];\n            $arr[$i] = $arr[$i + 1];\n        \
    \    $arr[$i + 1] = $temp;\n            $isDecreasing = false;\n            for\
    \ ($j = 0; $j < $size - 1; $j++) {\n                if ($arr[$j] > $arr[$j + 1])\
    \ {\n                    $isDecreasing = true;\n                    break;\n \
    \               }\n            }\n            if ($isDecreasing == false) {\n\
    \                return true;\n            }\n        }\n    }\n    return false;\n\
    }\n\nprint(move_one_ball(array(3, 4, 5, 1, 2)) . \"\\n\");\nprint(move_one_ball(array(3,\
    \ 5, 4, 1, 2)) . \"\\n\");\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxnlv0zxi.php:62\n\
    Stack trace:\n#0 /tmp/tmpxnlv0zxi.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpxnlv0zxi.php\
    \ on line 62\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n\n    $len = count($arr);\n    $min = $arr[0];\n    $max = $arr[0];\n\
    \    for ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n       \
    \     $min = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n          \
    \  $max = $arr[$i];\n        }\n    }\n\n    return ($max - $min) == ($len - 1);\n\
    }\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxhqi11n_.php:48\n\
    Stack trace:\n#0 /tmp/tmpxhqi11n_.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpxhqi11n_.php\
    \ on line 48\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n  // your solution here\n}\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu85h2swd.php:31\n\
    Stack trace:\n#0 /tmp/tmpu85h2swd.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpu85h2swd.php\
    \ on line 31\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $count = count($arr);\n    for ($i = 0; $i\
    \ < $count - 1; $i++) {\n        $k = $i;\n        for ($j = $i + 1; $j < $count;\
    \ $j++) {\n            if ($arr[$j] < $arr[$k]) {\n                $k = $j;\n\
    \            }\n        }\n        $temp = $arr[$i];\n        $arr[$i] = $arr[$k];\n\
    \        $arr[$k] = $temp;\n    }\n    $check = true;\n    for ($i = 0; $i < $count\
    \ - 1; $i++) {\n        if ($arr[$i] > $arr[$i + 1]) {\n            $check = false;\n\
    \            break;\n        }\n    }\n    return $check;\n}\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7sdmqt0d.php:52\n\
    Stack trace:\n#0 /tmp/tmp7sdmqt0d.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp7sdmqt0d.php\
    \ on line 52\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $n = count($arr);\n    for ($i = 0; $i < $n;\
    \ $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            if ($arr[$i]\
    \ >= $arr[$j]) {\n                return true;\n            }\n        }\n   \
    \ }\n    return false;\n}\necho move_one_ball(array(3, 4, 5, 1, 2));\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr07evy96.php:42\n\
    Stack trace:\n#0 /tmp/tmpr07evy96.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpr07evy96.php\
    \ on line 42\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n\t$l = count($arr);\n\t$i = 0;\n\t$j = $l - 1;\n\
    \twhile ($i < $j) {\n\t\tif ($arr[$i] > $arr[$i + 1]) {\n\t\t\treturn false;\n\
    \t\t}\n\t\t$i++;\n\t}\n\treturn true;\n}\nfunction candidate(...$args) {\n   \
    \ return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbhfu8kb2.php:40\n\
    Stack trace:\n#0 /tmp/tmpbhfu8kb2.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpbhfu8kb2.php\
    \ on line 40\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $length = count($arr);\n    if($length <=\
    \ 0){\n        return true;\n    }\n\n    for($i = 0; $i < $length; $i++){\n \
    \       $temp = $arr[$i];\n        $j = $i + 1;\n        if($j < $length){\n \
    \           while($arr[$j] < $temp){\n                $arr[$i] = $arr[$j];\n \
    \               $arr[$j] = $temp;\n                $i++;\n                $j++;\n\
    \                if($j > $length){\n                    break;\n             \
    \   }\n            }\n        }\n    }\n    $isSorted = false;\n    for($i = 0;\
    \ $i < $length; $i++){\n        if($arr[$i] == $i + 1){\n            $isSorted\
    \ = true;\n        }else{\n            $isSorted = false;\n            break;\n\
    \        }\n    }\n    return $isSorted;\n}\n\nfunction candidate(...$args) {\n\
    \    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 5 in /tmp/tmp8ybcb95l.php on line 33\n\n\
    Warning: Undefined array key 5 in /tmp/tmp8ybcb95l.php on line 34\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp8ybcb95l.php:61\nStack trace:\n\
    #0 /tmp/tmp8ybcb95l.php(68): test()\n#1 {main}\n  thrown in /tmp/tmp8ybcb95l.php\
    \ on line 61\n"
  timestamp: 1659979479
- exit_code: 0
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) return true;\n    $n = count($arr);\n\
    \    if ($n <= 1) return true;\n    $minPos = $n - 1;\n    $minNum = $arr[$n -\
    \ 1];\n    for ($i = $n - 2; $i >= 0; $i--) {\n        if ($arr[$i] <= $minNum)\
    \ {\n            $minNum = $arr[$i];\n            $minPos = $i;\n        }\n \
    \   }\n    $arr = array_merge(array_slice($arr, $minPos), array_slice($arr, 0,\
    \ $minPos));\n    $prev = $arr[0];\n    for ($i = 1; $i < $n; $i++) {\n      \
    \  if ($arr[$i] < $prev) return false;\n        $prev = $arr[$i];\n    }\n   \
    \ return true;\n}\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $N = count($arr);\n    $arr2 = $arr;\n   \
    \ sort($arr2);\n    $count = 0;\n    for ($i = 0; $i < $N; $i++) {\n        if\
    \ ($arr[$i] != $arr2[$i]) {\n            $count++;\n        }\n    }\n    if ($count\
    \ == 1) {\n        return true;\n    } else {\n        return false;\n    }\n\
    }\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnr08_2ul.php:44\n\
    Stack trace:\n#0 /tmp/tmpnr08_2ul.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpnr08_2ul.php\
    \ on line 44\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $count = count($arr);\n    for ($i = 0; $i < $count - 1; $i++) {\n\
    \        if ($arr[$i] > $arr[$i + 1]) {\n            return false;\n        }\n\
    \    }\n    return true;\n}\n\necho move_one_ball(array(3, 4, 5, 1, 2)) . \"\\\
    n\";\necho move_one_ball(array(3, 5, 4, 1, 2)) . \"\\n\";\necho move_one_ball(array())\
    \ . \"\\n\";\necho move_one_ball(array(1, 2, 3, 4, 5)) . \"\\n\";\necho move_one_ball(array(1,\
    \ 2, 3, 4, 5, 6)) . \"\\n\";\necho move_one_ball(array(2, 1, 3, 4, 5, 6)) . \"\
    \\n\";\necho move_one_ball(array(3, 1, 2, 4, 5, 6)) . \"\\n\";\necho move_one_ball(array(4,\
    \ 1, 2, 3, 5, 6)) . \"\\n\";\necho move_one_ball(array(5, 1, 2, 3, 4, 6)) . \"\
    \\n\";\necho move_one_ball(array(6, 1, 2, 3, 4, 5)) . \"\\n\";\necho move_one_ball(array(6,\
    \ 1, 3, 2, 4, 5)) . \"\\n\";\necho move_one_ball(array(6, 1, 4, 2, 3, 5)) . \"\
    \\n\";\necho move_one_ball(array(6, 1, 5, 2, 3, 4)) . \"\\n\";\necho move_one_ball(array(5,\
    \ 6, 1, 2, 3, 4)) . \"\\n\";\necho move_one_ball(array(4, 5, 6, 1, 2, 3)) . \"\
    \\n\";\necho move_one_ball(array(3, 4, 5, 6, 1, 2)) . \"\\n\";\necho move_one_ball(array(2,\
    \ 3, 4, 5, 6, 1)) . \"\\n\";\necho move_\nfunction candidate(...$args) {\n   \
    \ return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "," or ";" in
    /tmp/tmp3z5artgz.php on line 54

    '
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $arr1 = $arr;\n    sort($arr1);\n    if($arr\
    \ == $arr1) return true;\n    if(count($arr) < 3) return false;\n    $min = $arr[0];\n\
    \    $max = $arr[0];\n    $max2 = $arr[0];\n    $index = 0;\n    $c = 0;\n   \
    \ $i = 0;\n    $start = 0;\n    $end = 0;\n    foreach($arr as $key => $val) {\n\
    \        if($val == $max) {\n            $c++;\n        }\n        if($val ==\
    \ $max2) {\n            $index = $key;\n        }\n        if($val > $max) {\n\
    \            $max2 = $max;\n            $max = $val;\n            $c = 1;\n  \
    \          $index = $key;\n        }\n        if($val < $min) {\n            $min\
    \ = $val;\n            $start = $key;\n        }\n        if($key == count($arr)\
    \ - 1) {\n            $end = $key;\n        }\n    }\n    if($c == 1) {\n    \
    \    if($index == 0) {\n            for($i = $start; $i <= $end; $i++) {\n   \
    \             if($arr[$i] == $min) {\n                    $start = $i;\n     \
    \               break;\n                }\n            }\n            $index =\
    \ $start;\n        }\n        $arr1 = array_merge(array_slice($arr, $index + 1),\
    \ array_slice($arr, 0, $index + 1));\n        return move_one_ball($arr1);\n \
    \   }\n    return false;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr)\
    \ ? \"true\" : \"false\";\necho \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr)\
    \ ? \"true\" : \"false\";\necho \"\\n\";\n$arr = array(2, 1, 3);\necho move_one_ball($arr)\
    \ ? \"true\" : \"false\";\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: 'true


    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    262144 bytes) in /tmp/tmp4p38oq9d.php on line 68

    '
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $arr=array_unique($arr);\n    if(count($arr)<=1)\n\
    \        return true;\n    if(count($arr)>2)\n        array_pop($arr);\n    sort($arr);\n\
    \    if($arr[0]==1)\n        return true;\n    return false;\n}\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwx4w13wd.php:41\n\
    Stack trace:\n#0 /tmp/tmpwx4w13wd.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpwx4w13wd.php\
    \ on line 41\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) return true;\n    $count\
    \ = count($arr);\n    for ($i = 0; $i < $count; $i++) {\n        if ($arr[$i]\
    \ > $arr[$i + 1]) return false;\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpll6eigxr.php:37\n\
    Stack trace:\n#0 /tmp/tmpll6eigxr.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpll6eigxr.php\
    \ on line 37\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    // write your code here\n    $flag = false;\n\
    \    $size = count($arr);\n    if($size == 0){\n        return true;\n    }\n\
    \    $temp = $arr[$size-1];\n    for($i = $size-1; $i > 0; $i--){\n        $arr[$i]\
    \ = $arr[$i-1];\n    }\n    $arr[0] = $temp;\n    $flag = true;\n    for($i =\
    \ 0; $i < $size-1; $i++){\n        if($arr[$i] > $arr[$i+1]){\n            $flag\
    \ = false;\n            break;\n        }\n    }\n    return $flag;\n}\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp63xzmmk_.php:49\n\
    Stack trace:\n#0 /tmp/tmp63xzmmk_.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp63xzmmk_.php\
    \ on line 49\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $count = count($arr);\n    if ($count == 0)\
    \ {\n        return true;\n    }\n    $max = max($arr);\n    $maxCount = 0;\n\
    \    $maxIndex = 0;\n    for ($i = 0; $i < $count; $i++) {\n        if ($arr[$i]\
    \ == $max) {\n            $maxCount++;\n            $maxIndex = $i;\n        }\n\
    \    }\n    $result = $maxCount == 1;\n    for ($i = $maxIndex + 1; $i < $count\
    \ && $result; $i++) {\n        $result = $arr[$i] < $max;\n    }\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptnxp6jz6.php:50\n\
    Stack trace:\n#0 /tmp/tmptnxp6jz6.php(55): test()\n#1 {main}\n  thrown in /tmp/tmptnxp6jz6.php\
    \ on line 50\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    // complete your code here\n    return true;\n\
    }\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4my7j5b4.php:35\n\
    Stack trace:\n#0 /tmp/tmp4my7j5b4.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp4my7j5b4.php\
    \ on line 35\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n\t$i = count($arr) - 1;\n\t$j = 0;\n\t$count =\
    \ 0;\n\t$visited = array();\n\twhile ($i > 0) {\n\t\t$visited[$j] = 1;\n\t\tif\
    \ ($j == $i) {\n\t\t\tif ($count == 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\
    \t$j = 0;\n\t\t\t$count = 0;\n\t\t\t$i--;\n\t\t} else {\n\t\t\tif ($arr[$j] >\
    \ $arr[$i]) {\n\t\t\t\t$count++;\n\t\t\t}\n\t\t\t$j++;\n\t\t}\n\t}\n\treturn true;\n\
    }\n\necho move_one_ball(array(3, 4, 5, 1, 2));\necho \"\\n\";\necho move_one_ball(array(3,\
    \ 5, 4, 1, 2));\necho \"\\n\";\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3jqcj739.php:56\n\
    Stack trace:\n#0 /tmp/tmp3jqcj739.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp3jqcj739.php\
    \ on line 56\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    // TODO\n}\nfunction candidate(...$args) {\n\
    \    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm9gggdl5.php:31\n\
    Stack trace:\n#0 /tmp/tmpm9gggdl5.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpm9gggdl5.php\
    \ on line 31\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n\tif (empty($arr)) {\n\t\treturn true;\n\t}\n\t\
    $i = 1;\n\twhile ($i < count($arr)) {\n\t\t$current = $arr[$i];\n\t\t$prev = $arr[$i\
    \ - 1];\n\t\tif ($current > $prev) {\n\t\t\t$i++;\n\t\t} else {\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\treturn true;\n}\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0f4xaa5w.php:44\n\
    Stack trace:\n#0 /tmp/tmp0f4xaa5w.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp0f4xaa5w.php\
    \ on line 44\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $found_ball = false;\n    $len = count($arr);\n\
    \    for ($i = 0; $i < $len; $i++) {\n        if (!$found_ball && $arr[$i] ==\
    \ 1) {\n            $found_ball = true;\n        } else if ($found_ball && $arr[$i]\
    \ != $i + 1) {\n            return false;\n        }\n    }\n    return true;\n\
    }\necho move_one_ball(array(3, 4, 5, 1, 2));\necho PHP_EOL;\necho move_one_ball(array(3,\
    \ 5, 4, 1, 2));\necho PHP_EOL;\necho move_one_ball(array(3, 5, 4, 1, 2, 8, 9,\
    \ 10, 11, 12, 13, 14, 15, 6, 7));\necho PHP_EOL;\necho move_one_ball(array(3,\
    \ 5, 4, 1, 2, 8, 9, 10, 11, 12, 13, 14, 15, 6, 7, 16));\necho PHP_EOL;\necho move_one_ball(array(3,\
    \ 5, 4, 1, 2, 8, 9, 10, 11, 12, 13, 14, 15, 6, 7, 17));\necho PHP_EOL;\n\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnr29zrbj.php:51\n\
    Stack trace:\n#0 /tmp/tmpnr29zrbj.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpnr29zrbj.php\
    \ on line 51\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n  // Write your code here \n  $sorted = $arr;\n\
    \  sort($sorted);\n  $count = 0;\n  foreach ($arr as $k => $v) {\n    if ($sorted[$k]\
    \ != $v) {\n      $count++;\n    }\n  }\n  if ($count > 1) {\n    return false;\n\
    \  }\n  return true;\n}\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw8kqvdm7.php:43\n\
    Stack trace:\n#0 /tmp/tmpw8kqvdm7.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpw8kqvdm7.php\
    \ on line 43\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (!is_array($arr)) {\n        return false;\n\
    \    }\n    $len = count($arr);\n    if ($len == 0) {\n        return true;\n\
    \    }\n    $max = $arr[0];\n    for ($i = 1; $i < $len; $i++) {\n        if ($arr[$i]\
    \ < $max) {\n            return false;\n        }\n        $max = $arr[$i];\n\
    \    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpopzo334_.php:46\n\
    Stack trace:\n#0 /tmp/tmpopzo334_.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpopzo334_.php\
    \ on line 46\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n  $result = true;\n  if (!empty($arr)) {\n   \
    \ $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n      if ($arr[$i]\
    \ > $arr[$i + 1]) {\n        $result = false;\n        break;\n      }\n    }\n\
    \  }\n  return $result;\n}\n\n$testCase = array(3, 4, 5, 1, 2);\n$testCase1 =\
    \ array(3, 5, 4, 1, 2);\n\necho move_one_ball($testCase) . PHP_EOL;\necho move_one_ball($testCase1)\
    \ . PHP_EOL;\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp04db8zob.php:47\n\
    Stack trace:\n#0 /tmp/tmp04db8zob.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp04db8zob.php\
    \ on line 47\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n  if(count($arr) == 0) {\n    return true;\n \
    \ }\n  $max = $arr[0];\n  $is_decreasing = true;\n  for($i = 1; $i < count($arr);\
    \ $i++) {\n    if($arr[$i] < $max) {\n      $is_decreasing = false;\n      break;\n\
    \    }\n    else if($arr[$i] > $max) {\n      $max = $arr[$i];\n    }\n  }\n \
    \ return $is_decreasing;\n}\necho move_one_ball(array(3, 4, 5, 1, 2));\necho move_one_ball(array(3,\
    \ 5, 4, 1, 2));\necho move_one_ball(array());\nfunction candidate(...$args) {\n\
    \    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbzexlnji.php:48\n\
    Stack trace:\n#0 /tmp/tmpbzexlnji.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpbzexlnji.php\
    \ on line 48\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $min_index = 0;\n    for($i\
    \ = 1; $i < $len; $i++) {\n        if($arr[$i] < $min) {\n            $min = $arr[$i];\n\
    \            $min_index = $i;\n        }\n    }\n    return $min_index == 0;\n\
    }\necho move_one_ball(array(3, 4, 5, 1, 2));\necho move_one_ball(array(3, 5, 4,\
    \ 1, 2));\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_2fbblin.php:45\n\
    Stack trace:\n#0 /tmp/tmp_2fbblin.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp_2fbblin.php\
    \ on line 45\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $sorted_arr = $arr;\n    $l = count($arr);\n\
    \    for ($i = 1; $i < $l; $i++) {\n        for ($j = $i; $j > 0; $j--) {\n  \
    \          if ($sorted_arr[$j] < $sorted_arr[$j - 1]) {\n                $temp\
    \ = $sorted_arr[$j];\n                $sorted_arr[$j] = $sorted_arr[$j - 1];\n\
    \                $sorted_arr[$j - 1] = $temp;\n            }\n        }\n    }\n\
    \    return $sorted_arr == $arr;\n}\n\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplnu0dqtq.php:43\n\
    Stack trace:\n#0 /tmp/tmplnu0dqtq.php(50): test()\n#1 {main}\n  thrown in /tmp/tmplnu0dqtq.php\
    \ on line 43\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n  $len = count($arr);\n  if ($len == 0) {\n  \
    \  return true;\n  }\n  $min = $arr[0];\n  $start_index = 0;\n  for ($i = 1; $i\
    \ < $len; $i++) {\n    if ($arr[$i] < $min) {\n      $min = $arr[$i];\n      $start_index\
    \ = $i;\n    }\n  }\n  $right_index = $start_index;\n  $left_index = $start_index;\n\
    \  while ($right_index < $len && $left_index >= 0) {\n    if ($arr[$right_index]\
    \ > $arr[$left_index]) {\n      return false;\n    }\n    $right_index++;\n  \
    \  $left_index--;\n  }\n  return true;\n}\n$A = array(3, 4, 5, 1, 2);\nprint_r(move_one_ball($A));\n\
    print_r(\"\\n\");\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf5ltku47.php:57\n\
    Stack trace:\n#0 /tmp/tmpf5ltku47.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpf5ltku47.php\
    \ on line 57\n"
  timestamp: 1659979479
- exit_code: 0
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if(empty($arr)) return true;\n    $left_pointer\
    \ = 0;\n    $right_pointer = count($arr) - 1;\n    $left_max = $arr[$left_pointer];\n\
    \    $right_min = $arr[$right_pointer];\n    while($left_pointer <= $right_pointer)\
    \ {\n        if($arr[$left_pointer] >= $left_max) {\n            $left_max = $arr[$left_pointer];\n\
    \            $left_pointer++;\n        } else if($arr[$right_pointer] <= $right_min)\
    \ {\n            $right_min = $arr[$right_pointer];\n            $right_pointer--;\n\
    \        } else {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\nvar_dump(move_one_ball(array(3, 4, 5, 1, 2)));\necho \"\\n\";\nvar_dump(move_one_ball(array(3,\
    \ 5, 4, 1, 2)));\necho \"\\n\";\nvar_dump(move_one_ball(array()));\necho \"\\\
    n\";\nvar_dump(move_one_ball(array(2, 1)));\necho \"\\n\";\nvar_dump(move_one_ball(array(1,\
    \ 2)));\necho \"\\n\";\nvar_dump(move_one_ball(array(1, 1, 1, 1, 1)));\necho \"\
    \\n\";\nvar_dump(move_one_ball(array(1, 1, 2, 1, 1)));\necho \"\\n\";\nvar_dump(move_one_ball(array(2,\
    \ 2, 2, 2, 2)));\necho \"\\n\";\nvar_dump(move_one_ball(array(1, 2, 3, 2, 1)));\n\
    echo \"\\n\";\nvar_dump(move_one_ball(array(1, 1, 1, 2, 1)));\necho \"\\n\";\n\
    var_dump(move_one_ball(array(1, 2, 1, 1, 1)));\necho \"\\n\";\nvar_dump(move_one_ball(array(1,\
    \ 1, 1, 1, 2)));\necho \"\\n\";\n\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'bool(true)


    bool(false)


    bool(true)


    bool(true)


    bool(true)


    bool(true)


    bool(true)


    bool(true)


    bool(false)


    bool(true)


    bool(true)


    bool(true)


    '
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $pivot = $arr[0];\n    $length = count($arr);\n    if ($length < 2)\
    \ {\n        return true;\n    }\n    $left = $right = array();\n    for ($i =\
    \ 1; $i < $length; $i++) {\n        if ($arr[$i] < $pivot) {\n            $left[]\
    \ = $arr[$i];\n        } else {\n            $right[] = $arr[$i];\n        }\n\
    \    }\n    // If array doesn't split then return false\n    if (empty($left)\
    \ || empty($right)) {\n        return false;\n    }\n    return move_one_ball($left)\
    \ && move_one_ball($right);\n}\n\n$answer = move_one_ball(array(3, 4, 5, 1, 2));\n\
    echo \"The array is \";\necho ($answer ? \"possible\" : \"not possible\");\necho\
    \ \" to sort by performing right shift operations\\n\";\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "The array is not possible to sort by performing right shift operations\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp42jmhy_s.php:56\nStack\
    \ trace:\n#0 /tmp/tmp42jmhy_s.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp42jmhy_s.php\
    \ on line 56\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n  // Code here\n}\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0vqxd8h_.php:31\n\
    Stack trace:\n#0 /tmp/tmp0vqxd8h_.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp0vqxd8h_.php\
    \ on line 31\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n  if(empty($arr)){\n    return true;\n  }\n  if(count($arr)==1){\n\
    \    return true;\n  }\n  $min = min($arr);\n  $left = 0;\n  $right = count($arr)-1;\n\
    \  while($left<$right){\n    if($arr[$left]==$min){\n      $left++;\n    }\n \
    \   if($arr[$right]==$min){\n      $right--;\n    }\n    if($arr[$left]>$arr[$right]){\n\
    \      return false;\n    }\n  }\n  return true;\n}\n\nif (count(get_included_files())\
    \ === 1) {\n  $a = array(3, 4, 5, 1, 2);\n  echo move_one_ball($a) . \"\\n\";\n\
    \  $a = array(3, 5, 4, 1, 2);\n  echo move_one_ball($a) . \"\\n\";\n  $a = array(2,\
    \ 3, 4, 1);\n  echo move_one_ball($a) . \"\\n\";\n  $a = array(2, 3, 1);\n  echo\
    \ move_one_ball($a) . \"\\n\";\n  $a = array(2, 3, 1, 4);\n  echo move_one_ball($a)\
    \ . \"\\n\";\n  $a = array(2, 3, 1, 4, 5);\n  echo move_one_ball($a) . \"\\n\"\
    ;\n  $a = array(2, 3, 1, 4, 5, 6);\n  echo move_one_ball($a) . \"\\n\";\n  $a\
    \ = array(2, 3, 1, 4, 5, 6, 7);\n  echo move_one_ball($a) . \"\\n\";\n  $a = array(2,\
    \ 3, 1, 4, 5, 6, 7, 8);\n  echo move_one_ball($a) . \"\\n\";\n  $a = array(2,\
    \ 3, 1, 4, 5, 6, 7, 8, 9);\n  echo move_one_ball($a) . \"\\n\";\n  $a = array(1,\
    \ 2, 3,\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpto5wvire.php on line 69

    '
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) return\
    \ true;\n    $min = $arr[0];\n    for ($i = 1; $i < $len; $i++) {\n        if\
    \ ($arr[$i] < $min) $min = $arr[$i];\n    }\n    if ($min == 1) return true;\n\
    \    return false;\n}\n$arr1 = array(3, 4, 5, 1, 2);\n$arr2 = array(3, 5, 4, 1,\
    \ 2);\necho move_one_ball($arr1) . PHP_EOL;\necho move_one_ball($arr2) . PHP_EOL;\n\
    \nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphyhxl3fv.php:45\n\
    Stack trace:\n#0 /tmp/tmphyhxl3fv.php(50): test()\n#1 {main}\n  thrown in /tmp/tmphyhxl3fv.php\
    \ on line 45\n"
  timestamp: 1659979479
- exit_code: -1
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if(empty($arr)){\n        return true;\n \
    \   }\n    $i = 0;\n    while($i<sizeof($arr)-1){\n        if($arr[$i]<=$arr[$i+1]){\n\
    \            $i++;\n        }\n        elseif($arr[$i]>$arr[$i+1]){\n        \
    \    $temp = $arr[$i];\n            for($j = $i; $j>0; $j--){\n              \
    \  $arr[$j] = $arr[$j-1];\n            }\n            $arr[0] = $temp;\n     \
    \   }\n    }\n    if($arr[$i]<=$arr[$i+1]){\n        return true;\n    }\n   \
    \ else{\n        return false;\n    }\n}\n$data = array(3,4,5,1,2);\n$data2 =\
    \ array(3,5,4,1,2);\n$data3 = array(5,5,5,5,5);\n$data4 = array(4,4,4,4,4);\n\
    echo move_one_ball($data);\necho move_one_ball($data2);\necho move_one_ball($data3);\n\
    echo move_one_ball($data4);\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659979484
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $length = count($arr);\n    $num_of_balls\
    \ = $length;\n    $positions = array();\n    $i = 1;\n    while ($i <= $num_of_balls)\
    \ {\n        $positions[$i] = $i;\n        $i++;\n    }\n    $balls = array();\n\
    \    $k = 1;\n    while ($k <= $num_of_balls) {\n        $i = $k;\n        while\
    \ ($i <= $num_of_balls) {\n            if (!is_empty($balls[$i])) {\n        \
    \        $positions[$balls[$i]] = $i;\n                $balls[$i] = $balls[$k];\n\
    \                $balls[$k] = NULL;\n            }\n            $i++;\n      \
    \  }\n        $k++;\n    }\n    $i = 1;\n    while ($i <= $num_of_balls) {\n \
    \       if ($positions[$i] != $arr[$i - 1]) {\n            return false;\n   \
    \     }\n        $i++;\n    }\n    return true;\n}\n\n$arr = array(3, 4, 5, 1,\
    \ 2);\necho move_one_ball($arr) . PHP_EOL;\n\n$arr = array(3, 5, 4, 1, 2);\necho\
    \ move_one_ball($arr) . PHP_EOL;\n\n$arr = array(2, 3, 1);\necho move_one_ball($arr)\
    \ . PHP_EOL;\n\n$arr = array(3, 1, 2);\necho move_one_ball($arr) . PHP_EOL;\n\n\
    $arr = array(3, 1, 4, 2);\necho move_one_ball($arr) . PHP_EOL;\n\n$arr = array(1,\
    \ 3, 2);\necho move_one_ball($arr) . PHP_EOL;\n\n$arr = array(1, 2, 3);\necho\
    \ move_one_ball($arr) . PHP_EOL;\n\n$arr = array(1, 2, 4, 3);\necho move_one_ball($arr)\
    \ . PHP_EOL;\n\n$arr = array(\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpc868tk92.php on line 81

    '
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n\tif(count($arr) <= 1) return true;\n\t$largest\
    \ = $arr[0];\n\t$smallest = $arr[0];\n\t$largestIdx = 0;\n\t$smallestIdx = 0;\n\
    \t$currentIdx = 0;\n\t$smallestToLargest = true;\n\tforeach($arr as $val) {\n\t\
    \tif($val > $largest) {\n\t\t\t$largest = $val;\n\t\t\t$largestIdx = $currentIdx;\n\
    \t\t}\n\t\tif($val < $smallest) {\n\t\t\t$smallest = $val;\n\t\t\t$smallestIdx\
    \ = $currentIdx;\n\t\t}\n\t\t$currentIdx++;\n\t}\n\t//echo \"largest = $largest,\
    \ largestIdx = $largestIdx, smallest = $smallest, smallestIdx = $smallestIdx\\\
    n\";\n\tif($largestIdx > $smallestIdx) {\n\t\t$smallestToLargest = false;\n\t\
    }\n\t$currentIdx = $smallestIdx;\n\t$currentSmallestIdx = $smallestIdx;\n\twhile($currentIdx\
    \ != $largestIdx) {\n\t\tif($smallestToLargest) {\n\t\t\t$currentIdx++;\n\t\t\t\
    if($currentIdx == count($arr)) {\n\t\t\t\t$currentIdx = 0;\n\t\t\t}\n\t\t} else\
    \ {\n\t\t\t$currentIdx--;\n\t\t\tif($currentIdx < 0) {\n\t\t\t\t$currentIdx =\
    \ count($arr) - 1;\n\t\t\t}\n\t\t}\n\t\tif($arr[$currentIdx] < $arr[$currentSmallestIdx])\
    \ {\n\t\t\t//echo \"returning false\\n\";\n\t\t\treturn false;\n\t\t}\n\t\t$currentSmallestIdx\
    \ = $currentIdx;\n\t}\n\treturn true;\n}\n$a = array(3, 4, 5, 1, 2);\necho move_one_ball($a)\
    \ . \"\\n\";\n$a = array(3, 5, 4,\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpocv6_z9b.php on line 71

    '
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n\n}\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj3u3iobs.php:31\n\
    Stack trace:\n#0 /tmp/tmpj3u3iobs.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpj3u3iobs.php\
    \ on line 31\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $n = count($arr);\n    $count = 0;\n    for\
    \ ($i = 1; $i < $n; $i++) {\n        if ($arr[$i - 1] > $arr[$i]) {\n        \
    \    $count++;\n        }\n    }\n    return $count == 1;\n}\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb9pmsw08.php:42\n\
    Stack trace:\n#0 /tmp/tmpb9pmsw08.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpb9pmsw08.php\
    \ on line 42\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n\t$count = count($arr);\n\tif ($count <= 1) {\n\
    \t\treturn true;\n\t}\n\t$pos = array_search(min($arr), $arr);\n\tif ($pos ==\
    \ 0) {\n\t\treturn true;\n\t}\n\tfor ($i = 0; $i < $count - 1; $i++) {\n\t\tif\
    \ ($arr[$i] > $arr[$i + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n\
    }\necho move_one_ball(array(3, 4, 5, 1, 2));\necho move_one_ball(array(3, 5, 4,\
    \ 1, 2));\necho move_one_ball(array(7, 8, 5, 6, 9, 1, 4, 3, 2));\necho move_one_ball(array(3,\
    \ 4, 5, 1, 2));\necho move_one_ball(array(7, 8, 5, 6, 9, 1, 4, 3, 2));\necho move_one_ball(array(3,\
    \ 4, 5, 1, 2));\necho move_one_ball(array(7, 8, 5, 6, 9, 1, 4, 3, 2));\necho move_one_ball(array(3,\
    \ 4, 5, 1, 2));\necho move_one_ball(array(7, 8, 5, 6, 9, 1, 4, 3, 2));\necho move_one_ball(array(3,\
    \ 4, 5, 1, 2));\necho move_one_ball(array(7, 8, 5, 6, 9, 1, 4, 3, 2));\necho move_one_ball(array(3,\
    \ 4, 5, 1, 2));\necho move_one_ball(array(7, 8, 5, 6, 9, 1, 4, 3, 2));\necho move_one_ball(array(3,\
    \ 4, 5, 1, 2));\necho move_one_ball(array(7, 8, 5, 6, 9, 1, 4, 3, 2));\necho move_one_ball(array(3,\
    \ 4, 5, 1, 2));\necho move_one_ball(array(7, 8,\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpf0ajx7vh.php on line 56

    '
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $cnt = count($arr);\n    if ($cnt == 0) {\n\
    \        return true;\n    }\n    for ($i = 0; $i < $cnt - 1; $i++) {\n      \
    \  if ($arr[$i] > $arr[$i + 1]) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\necho \"\
    \\n\";\n$arr = array();\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(1,\
    \ 2, 3, 4, 5);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(2, 3, 4,\
    \ 5, 1);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(2, 3, 4, 5, 6);\n\
    echo move_one_ball($arr);\necho \"\\n\";\nfunction candidate(...$args) {\n   \
    \ return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n1\n1\n\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoeb0tty6.php:59\n\
    Stack trace:\n#0 /tmp/tmpoeb0tty6.php(66): test()\n#1 {main}\n  thrown in /tmp/tmpoeb0tty6.php\
    \ on line 59\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n  // your code here\n}\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_3sqtfj7.php:31\n\
    Stack trace:\n#0 /tmp/tmp_3sqtfj7.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp_3sqtfj7.php\
    \ on line 31\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n  // Your code here\n}\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9x5tf3aa.php:31\n\
    Stack trace:\n#0 /tmp/tmp9x5tf3aa.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp9x5tf3aa.php\
    \ on line 31\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n  // Fill this in.\n}\n\necho move_one_ball(array(3,\
    \ 4, 5, 1, 2)) . \"\\n\";\necho move_one_ball(array(3, 5, 4, 1, 2)) . \"\\n\"\
    ;\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgd4uxkvb.php:34\n\
    Stack trace:\n#0 /tmp/tmpgd4uxkvb.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpgd4uxkvb.php\
    \ on line 34\n"
  timestamp: 1659979479
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n\tif (count($arr) == 0) {\n\t\treturn true;\n\t\
    }\n\tfor ($i = 0; $i < count($arr); $i++) {\n\t\t$arr[$i] -= min($arr);\n\t}\n\
    \t$arr[] = 0;\n\t$n = array_search(min($arr), $arr);\n\tfor ($i = 0; $i < count($arr);\
    \ $i++) {\n\t\tif ($arr[$i] > $arr[($i + 1) % count($arr)]) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr) . \"\\n\"\
    ;\n$arr = array(3, 5, 4, 1, 2, 1);\necho move_one_ball($arr) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_q_nuquh.php:51\n\
    Stack trace:\n#0 /tmp/tmp_q_nuquh.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp_q_nuquh.php\
    \ on line 51\n"
  timestamp: 1659979479
