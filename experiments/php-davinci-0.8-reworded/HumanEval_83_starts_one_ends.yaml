name: HumanEval_83_starts_one_ends
language: php
prompt: "<?php\n// Given a positive integer n, return the count of the numbers of\
  \ n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
  \ {\n"
tests: "function candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\
  \nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n   \
  \ if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\n\
  test();"
completions: ["  // takes n and returns the number of n-digit numbers that start or\
    \ end with 1\n  if($n < 1) return 0;\n\n  //if we're looking for a 1-digit number,\
    \ there's only one.\n  if($n == 1) return 1;\n\n  //otherwise, we have to take\
    \ into account the fact that 1 can start or end,\n  //but not both, because we're\
    \ only counting numbers, not strings.\n  //therefore we can have, from the beginning:\n\
    \  // 9,999\n  // 1,999\n  // or\n  // 9,999\n  // 99,99\n  // or\n  // 9,999\n\
    \  // 999,9\n  // or\n  // 9,999\n  // 9,999\n  // or\n  // 1,999\n  // 1,999\n\
    \  // and so on. if we start with 1 as the beginning digit, then we're looking\
    \ at\n  // two 9's and two n-1's. if we start with 9 as the beginning digit, we're\
    \ looking\n  // at one 9 and two n-1's. the same logic goes for the end.\n\n \
    \ return starts_one_ends($n-1) * 2 + starts_one_ends($n-2);\n}\n\necho starts_one_ends(3);\n\
    echo \"\\n\";\n\necho starts_one_ends(5);\necho \"\\n\";\n\necho starts_one_ends(6);\n\
    echo \"\\n\";\n\necho starts_one_ends(7);\necho \"\\n\";\n\necho starts_one_ends(8);\n\
    echo \"\\n\";\n\necho starts_one_ends(9);\necho \"\\n\";\n\necho starts_one_ends(10);\n\
    echo \"\\n\";\n\necho starts_one_ends(20);\necho \"\\n\";", "  $count = 0;\n \
    \ for ($i = 1; $i <= $n; $i++) {\n    $count += \"9\" * $i;\n  }\n  return $count;\n\
    }\n$n = 2;\necho starts_one_ends($n) . \"\\n\";\n$n = 3;\necho starts_one_ends($n)\
    \ . \"\\n\";\n$n = 4;\necho starts_one_ends($n) . \"\\n\";\n$n = 5;\necho starts_one_ends($n)\
    \ . \"\\n\";\n$n = 6;\necho starts_one_ends($n) . \"\\n\";\n$n = 7;\necho starts_one_ends($n)\
    \ . \"\\n\";\n$n = 8;\necho starts_one_ends($n) . \"\\n\";\n$n = 9;\necho starts_one_ends($n)\
    \ . \"\\n\";\n$n = 10;\necho starts_one_ends($n) . \"\\n\";\n$n = 11;\necho starts_one_ends($n)\
    \ . \"\\n\";\n$n = 12;\necho starts_one_ends($n) . \"\\n\";", "    if ($n == 1)\
    \ {\n        return 1;\n    } else {\n        return starts_one_ends($n - 1) +\
    \ pow(10, $n - 1);\n    }\n}\n", "  if ($n == 1) {\n    return 2;\n  }\n  $count\
    \ = 3;\n  $count += pow(2, $n - 2);\n  return $count;\n}\n", "  if ($n == 1) {\n\
    \    return 2;\n  } else if ($n == 2) {\n    return 3;\n  }\n  return 2 * starts_one_ends($n\
    \ - 1) + starts_one_ends($n - 2);\n}", "    if ($n == 1) return 1;\n    if ($n\
    \ == 2) return 11;\n    return 11 * (pow(10, $n - 2) - 1) + 1;\n}\n", "    if\
    \ ($n === 1) {\n        return 2;\n    }\n\n    $range = pow(10, $n) - pow(10,\
    \ $n - 1);\n    return $range * 2;\n}\n\nforeach ([1, 2, 3, 4, 5, 10] as $n) {\n\
    \    echo starts_one_ends($n) . \"\\n\";\n}", "    if ($n == 1) {\n        return\
    \ 2;\n    }\n    $f = array(1,1);\n    $first = 0;\n    $last = 1;\n    $current\
    \ = 2;\n    for ($i = 2; $i <= $n; $i++) {\n        $f[$current] = $f[$first]\
    \ + $f[$last];\n        $first = ($first + 1) % 2;\n        $last = ($last + 1)\
    \ % 2;\n        $current = ($current + 1) % 2;\n    }\n    return $f[$last];\n\
    }", "    $count = 0;\n    for ($i = 1; $i <= 9; $i++) {\n        $start_one =\
    \ $i;\n        for ($j = 2; $j <= $n; $j++) {\n            $start_one = $start_one\
    \ * 10;\n        }\n        $count += $start_one;\n    }\n    for ($i = 1; $i\
    \ <= 9; $i++) {\n        $end_one = $i;\n        for ($j = 2; $j <= $n; $j++)\
    \ {\n            $end_one = $end_one * 10 + 1;\n        }\n        $count += $end_one;\n\
    \    }\n    return $count;\n}\necho starts_one_ends(3);", "  $count = 0;\n  for\
    \ ($i = 1; $i <= $n; $i++) {\n    $count += starts_one_ends_helper($i);\n  }\n\
    \  return $count;\n}\n", "  if ($n == 1) return 1;\n  if ($n == 2) return 2;\n\
    \  $return = 0;\n  $return += starts_one_ends($n - 1);\n  $return += starts_one_ends($n\
    \ - 2);\n  return $return;\n}\n", "  if ($n == 1) return 2;\n  $count = 0;\n \
    \ for ($i = pow(10, $n - 1); $i < pow(10, $n); $i++) {\n    if (strpos($i, '1')\
    \ == 0 || strpos($i, '1') == strlen($i) - 1) {\n      $count++;\n    }\n  }\n\
    \  return $count;\n}\n\n$start = microtime(true);\n$n = $argv[1];\n$count = starts_one_ends($n);\n\
    $end = microtime(true);\n$time = $end - $start;\nprint \"TOTAL: $count\\n\";\n\
    print \"TIME: $time\\n\";", "  $first = pow(10, $n - 1);\n  $last = pow(10, $n)\
    \ - 1;\n  $count = 0;\n  for ($i = $first; $i <= $last; $i++) {\n    if ($i %\
    \ 10 == 1 || floor($i / pow(10, $n - 1)) == 1) $count++;\n  }\n  return $count;\n\
    }\nprint starts_one_ends(1) . \"\\n\";\nprint starts_one_ends(2) . \"\\n\";\n\
    print starts_one_ends(3) . \"\\n\";\nprint starts_one_ends(4) . \"\\n\";\nprint\
    \ starts_one_ends(5) . \"\\n\";", "    if ($n == 1) {\n        return 1;\n   \
    \ } else {\n        return starts_one_ends($n - 1) + pow(10, $n - 1);\n    }\n\
    }\n\necho starts_one_ends(4);", "    $endsOne = pow(10, $n - 1);\n    $startsOne\
    \ = $endsOne - 1;\n    return $endsOne + $startsOne;\n}\n\n$fptr = fopen(getenv(\"\
    OUTPUT_PATH\"), \"w\");\n\n$stdin = fopen(\"php://stdin\", \"r\");\n\nfscanf($stdin,\
    \ \"%d\\n\", $n);\n\n$result = starts_one_ends($n);\n\nfwrite($fptr, $result .\
    \ \"\\n\");\n\nfclose($stdin);\nfclose($fptr);", "    // base cases\n    if ($n\
    \ == 1) {\n        return 2;\n    }\n    if ($n == 2) {\n        return 3;\n \
    \   }\n    // recursive cases\n    // starts with one\n    // ... and ends with\
    \ one, there are starts_one_ends($n-2)\n    // ... and ends with zero, there are\
    \ starts_one_ends($n-1)\n    // ends with one\n    // ... and starts with one,\
    \ there are starts_one_ends($n-2)\n    // ... and starts with zero, there are\
    \ starts_one_ends($n-1)\n    // so there are 3 * starts_one_ends($n-1)\n    return\
    \ 3 * starts_one_ends($n-1);\n}\n\nprint starts_one_ends(3) . \"\\n\";\nprint\
    \ starts_one_ends(4) . \"\\n\";\nprint starts_one_ends(5) . \"\\n\";\nprint starts_one_ends(6)\
    \ . \"\\n\";\nprint starts_one_ends(7) . \"\\n\";\nprint starts_one_ends(8) .\
    \ \"\\n\";", "  $start_with_one = $n - 1;\n  $end_with_one = 1;\n  $zero_to_nine\
    \ = 9;\n  $not_start_or_end_with_one = $zero_to_nine * pow(10, $n - 2);\n  $total\
    \ = $start_with_one + $end_with_one + $not_start_or_end_with_one;\n  return $total;\n\
    }\n", "  if($n == 1) return 2;\n  return starts_one_ends($n - 1) + 9 * pow(10,\
    \ $n - 2);\n}\n\necho starts_one_ends(4) . \"\\n\";", "  // brute force: generate\
    \ all n-digit numbers\n  $count = 0;\n  $start = 1;\n  for ($i = 0; $i < $n -\
    \ 1; $i++) {\n    $start *= 10;\n  }\n  $end = $start * 10;\n  for ($i = $start;\
    \ $i < $end; $i++) {\n    if (strpos($i, '1') === 0 || strpos($i, '1') === strlen($i)\
    \ - 1) {\n      $count++;\n    }\n  }\n  return $count;\n}\n", "    if ($n ==\
    \ 1) {\n        return 1;\n    }\n    $starts = 1;\n    $ends = 1;\n    $start_is_one\
    \ = true;\n    $end_is_one = true;\n    for ($i = 1; $i < $n; $i++) {\n      \
    \  if ($start_is_one) {\n            $starts *= 9;\n        }\n        if ($end_is_one)\
    \ {\n            $ends *= 9;\n        }\n        $start_is_one = !$start_is_one;\n\
    \        $end_is_one = !$end_is_one;\n    }\n    return $starts + $ends;\n}\n\
    echo starts_one_ends(1) . \"\\n\";\necho starts_one_ends(2) . \"\\n\";\necho starts_one_ends(3)\
    \ . \"\\n\";\necho starts_one_ends(4) . \"\\n\";\necho starts_one_ends(5) . \"\
    \\n\";\necho starts_one_ends(6) . \"\\n\";\necho starts_one_ends(7) . \"\\n\"\
    ;\necho starts_one_ends(8) . \"\\n\";\necho starts_one_ends(9) . \"\\n\";\necho\
    \ starts_one_ends(10) . \"\\n\";\necho starts_one_ends(11) . \"\\n\";\necho starts_one_ends(12)\
    \ . \"\\n\";\necho starts_one_ends(13) . \"\\n\";\necho starts_one_ends(14) .\
    \ \"\\n\";\necho starts_one_ends(15) . \"\\n\";\necho starts_one_ends(16) . \"\
    \\n\";\necho starts_one_ends(17) . \"\\n\";\necho starts_one_ends(18) . \"\\n\"\
    ;\necho starts_one_ends(19) . \"\\n\";\necho starts_one_ends(20) . \"\\n\";\n\
    echo starts_one_ends(25) . \"\\n\";\necho starts_one_ends(30) . \"\\n\";\necho\
    \ starts_one_ends(35) . \"\\n\";\necho starts_one_ends(40) . \"\\n\";\necho starts_one_ends(45)",
  "    // The number of numbers that start or end with 1 is equal to the number\n\
    \    // of numbers that start or end with 2 or above.  So we can safely\n    //\
    \ subtract this number from the total count of $n-digit positive integers.\n \
    \   // To calculate this number, we note that the lowest number of digits\n  \
    \  // that a number can have and not start or end with 1 is 3.  This number\n\
    \    // of digits is greater than 1 for $n <= 8 (i.e. for 1-digit numbers and\n\
    \    // for 2-digit numbers) and, from $n = 9, this number of digits is equal\n\
    \    // to $n-1.\n    if ($n <= 8) {\n        $special_count = pow(10, $n-2) *\
    \ 9;\n    } else {\n        $special_count = pow(10, $n-2) * 8;\n    }\n    return\
    \ pow(10, $n) - $special_count;\n}", "  if ($n == 1) {\n    return 2;\n  }\n \
    \ $total = 10;\n  $base = 9;\n  for ($i = 1; $i < $n; $i++) {\n    $total += $base;\n\
    \    $base *= 10;\n  }\n  return $total;\n}\n", "    // Count of n-digit numbers\
    \ that start with 1\n    $start1 = pow(10, $n - 1);\n    // Count of n-digit numbers\
    \ that end with 1\n    $end1 = 9;\n    // Total\n    return $start1 + $end1;\n\
    }\n\n$start = 1;\n$end = 200;\nfor ($i = $start; $i <= $end; $i++) {\n    echo\
    \ starts_one_ends($i) . PHP_EOL;\n}", "  $count_ends = 0;\n  $count_starts = 0;\n\
    \  $count_both = 0;\n  $count_both_ends = 0;\n  $count_both_starts = 0;\n  $count_nothing\
    \ = 0;\n  for ($i = 1; $i <= $n; $i++) {\n    if ($i % 10 == 1 && $i >= 10) {\n\
    \      $count_ends += 1;\n    }\n    if ($i / 10 < 1) {\n      $count_starts +=\
    \ 1;\n    }\n    if ($i / 10 < 1 && $i % 10 == 1) {\n      $count_both += 1;\n\
    \    }\n    if ($i % 10 == 1 && $i / 10 < 1) {\n      $count_both_ends += 1;\n\
    \    }\n    if ($i / 10 < 1 && $i % 10 == 1) {\n      $count_both_starts += 1;\n\
    \    }\n    if ($i / 10 < 1 && $i % 10 != 1) {\n      $count_nothing += 1;\n \
    \   }\n  }\n  echo \"This is the count that end in 1: $count_ends \\n\";\n  echo\
    \ \"This is the count that start in 1: $count_starts \\n\";\n  echo \"This is\
    \ the count that both start and end in 1: $count_both \\n\";\n  echo \"This is\
    \ the count that start in 1 and end in 1: $count_both_ends \\n\";\n  echo \"This\
    \ is the count that start in 1 and end in 1: $count_both_starts \\n\";\n  echo\
    \ \"This is the count that start in 1 and end in anything but 1: $count_nothing\
    \ \\n\";\n}\n", "  $count = 0;\n  for ($i = 1; $i <= $n; $i++) {\n    $count +=\
    \ pow(2, $i - 1);\n  }\n  return $count;\n}\n", "  $count = 0;\n  for ($i = 0;\
    \ $i < $n; $i++) {\n    $count += pow(10, $i);\n  }\n  return $count * 2;\n}\n\
    \nvar_dump(starts_one_ends(2));\nvar_dump(starts_one_ends(1));\nvar_dump(starts_one_ends(3));",
  "    if ($n == 1) {\n        return 2;\n    }\n    $count = 0;\n    for ($i = 1;\
    \ $i <= $n; $i++) {\n        $count += starts_one_ends($n - $i);\n    }\n    return\
    \ $count;\n}\n\necho starts_one_ends(3);", "  if ($n == 1) return 1;\n  return\
    \ $n * pow(9, $n - 1) + $n * pow(9, $n - 2);\n}\n", "  if ($n == 1) {\n    return\
    \ 1;\n  } else if ($n == 2) {\n    return 3;\n  } else {\n    return 2 * $n -\
    \ 1;\n  }\n}\necho starts_one_ends(3);", "    if ($n == 1) {\n        return 2;\n\
    \    }\n    if ($n == 2) {\n        return 3;\n    }\n    return count_ends_zeros($n)\
    \ + count_ends_ones($n);\n}\n", "  if ($n == 1) {\n    return 2;\n  } else {\n\
    \    return count_start_with_one($n) + count_end_with_one($n);\n  }\n}\n", " \
    \   if ($n <= 0) return 0;\n    return $n * 9;\n}\n\nassert(27 == starts_one_ends(3));\n\
    assert(72 == starts_one_ends(4));\nassert(0 == starts_one_ends(0));\nassert(1\
    \ == starts_one_ends(1));\nassert(9 == starts_one_ends(2));", "    // Base cases\n\
    \    if ($n == 1) {\n        return 2;\n    } else if ($n == 2) {\n        return\
    \ 3;\n    }\n    $end_one = starts_one_ends($n - 1);\n    $middle = pow(10, $n\
    \ - 2);\n    $start_one = $end_one;\n    return $end_one + $middle + $start_one;\n\
    }\n\nvar_dump(starts_one_ends(1));\nvar_dump(starts_one_ends(2));\nvar_dump(starts_one_ends(3));\n\
    var_dump(starts_one_ends(4));\nvar_dump(starts_one_ends(5));\nvar_dump(starts_one_ends(6));\n\
    var_dump(starts_one_ends(7));\nvar_dump(starts_one_ends(8));\nvar_dump(starts_one_ends(9));\n\
    var_dump(starts_one_ends(10));\nvar_dump(starts_one_ends(11));\nvar_dump(starts_one_ends(12));\n\
    var_dump(starts_one_ends(13));\nvar_dump(starts_one_ends(14));\nvar_dump(starts_one_ends(15));\n\
    var_dump(starts_one_ends(16));\nvar_dump(starts_one_ends(17));\nvar_dump(starts_one_ends(18));\n\
    var_dump(starts_one_ends(19));\nvar_dump(starts_one_ends(20));\n\nvar_dump(starts_one_ends(1)\
    \ == 2);\nvar_dump(starts_one_ends(2) == 3);\nvar_dump(starts_one_ends(3) == 5);\n\
    var_dump(starts_one_ends(4) == 8);\nvar_dump(starts_one_ends(5) == 13);\nvar_dump(starts_one_ends(6)\
    \ == 21);\nvar_dump(starts_one_ends(7) == 34);\nvar_dump(starts_one_ends(", " \
    \ $tot = 0;\n  $tot += count_one_ends($n-1);\n  $tot += count_one_starts($n-1);\n\
    \  return $tot;\n}\n", "    if($n == 1) return 2;\n    if($n == 2) return 4;\n\
    \    $arr = array_fill(0, $n, 1);\n    $arr[$n - 1] = 0;\n    for($i = $n - 2;\
    \ $i >= 0; $i--) {\n        $arr[$i] = $arr[$i + 1] + $arr[$i + 2];\n    }\n \
    \   return $arr[0] * 2;\n}\n\necho starts_one_ends(1) . PHP_EOL;\necho starts_one_ends(2)\
    \ . PHP_EOL;\necho starts_one_ends(3) . PHP_EOL;\necho starts_one_ends(4) . PHP_EOL;\n\
    echo starts_one_ends(5) . PHP_EOL;\necho starts_one_ends(6) . PHP_EOL;\necho starts_one_ends(7)\
    \ . PHP_EOL;\necho starts_one_ends(8) . PHP_EOL;\necho starts_one_ends(9) . PHP_EOL;\n\
    echo starts_one_ends(10) . PHP_EOL;", "    if ($n <= 1) return 1;\n    return\
    \ pow(10, $n - 1) + (pow(10, $n - 1) - 1);\n}\n\necho starts_one_ends(1); // 2\n\
    echo \"\\n\";\necho starts_one_ends(2); // 21\necho \"\\n\";\necho starts_one_ends(3);\
    \ // 211\necho \"\\n\";\necho starts_one_ends(4); // 2111\necho \"\\n\";\necho\
    \ starts_one_ends(5); // 21111\necho \"\\n\";\necho starts_one_ends(6); // 211111\n\
    echo \"\\n\";\necho starts_one_ends(7); // 2111111\necho \"\\n\";\necho starts_one_ends(8);\
    \ // 21111111\necho \"\\n\";\necho starts_one_ends(9); // 211111111\necho \"\\\
    n\";\necho starts_one_ends(10); // 2111111111\necho \"\\n\";\n", "    if ($n <=\
    \ 0) return 0;\n    if ($n == 1) return 1;\n    $d = ($n - 1) / 2;\n    $dp =\
    \ array();\n    $dp[0] = 1;\n    $dp[1] = 2;\n    $dp[2] = 4;\n    for ($i = 3;\
    \ $i <= $d; $i++) {\n        $dp[$i] = $dp[$i - 1] + $dp[$i - 2] + $dp[$i - 3];\n\
    \    }\n    return $dp[$d] * (int)pow(3, (int)($n / 2));\n}\n\nassert(starts_one_ends(0)\
    \ == 0);\nassert(starts_one_ends(1) == 1);\nassert(starts_one_ends(2) == 2);\n\
    assert(starts_one_ends(3) == 4);\nassert(starts_one_ends(4) == 8);\nassert(starts_one_ends(5)\
    \ == 16);\nassert(starts_one_ends(6) == 32);\nassert(starts_one_ends(7) == 64);\n\
    assert(starts_one_ends(8) == 128);\nassert(starts_one_ends(9) == 256);\nassert(starts_one_ends(10)\
    \ == 512);\nassert(starts_one_ends(11) == 1024);\nassert(starts_one_ends(12) ==\
    \ 2048);\nassert(starts_one_ends(13) == 4096);\nassert(starts_one_ends(14) ==\
    \ 8192);\nassert(starts_one_ends(15) == 16384);\nassert(starts_one_ends(16) ==\
    \ 32768);\nassert(starts_one_ends(17) == 65536);\nassert(starts_one_ends(18) ==\
    \ 131072);\nassert(starts_one_ends(19) == 262144);\nassert(starts_one_ends(20)\
    \ == 524288);\nassert(starts_one_ends(21) == 1048576);\nassert(starts_one_ends(22)\
    \ == 20", "  if ($n <= 0) {\n    return 0;\n  }\n\n  $num_of_numbers = 0;\n  $num_of_numbers\
    \ += 10; // _ _ _ 1\n  $num_of_numbers += pow(10, $n - 1); // _ _ _ _ _ 1\n  $num_of_numbers\
    \ += 9 * pow(10, $n - 1); // 1 _ _ _ _ _\n  $num_of_numbers += 9 * pow(10, $n\
    \ - 1); // _ _ _ _ _ _ 1\n\n  return $num_of_numbers;\n}\n\nvar_dump(starts_one_ends(0));\n\
    var_dump(starts_one_ends(1));\nvar_dump(starts_one_ends(2));\nvar_dump(starts_one_ends(3));\n\
    var_dump(starts_one_ends(4));\nvar_dump(starts_one_ends(5));\nvar_dump(starts_one_ends(6));\n",
  "  $count = 0;\n  for ($i = 1; $i <= $n; $i++) {\n    $x = \"1\";\n    for ($j =\
    \ 0; $j < $i - 1; $j++) {\n      $x .= \"0\";\n    }\n    $count += intval($x);\n\
    \    $x = \"\";\n    for ($j = 0; $j < $i - 1; $j++) {\n      $x .= \"0\";\n \
    \   }\n    $x .= \"1\";\n    $count += intval($x);\n  }\n  return $count;\n}\n\
    \necho starts_one_ends(1) . PHP_EOL;\necho starts_one_ends(2) . PHP_EOL;\necho\
    \ starts_one_ends(3) . PHP_EOL;\necho starts_one_ends(4) . PHP_EOL;\necho starts_one_ends(5)\
    \ . PHP_EOL;\necho starts_one_ends(6) . PHP_EOL;\necho starts_one_ends(7) . PHP_EOL;\n\
    echo starts_one_ends(8) . PHP_EOL;\necho starts_one_ends(9) . PHP_EOL;\necho starts_one_ends(10)\
    \ . PHP_EOL;\necho starts_one_ends(11) . PHP_EOL;\necho starts_one_ends(12) .\
    \ PHP_EOL;\necho starts_one_ends(13) . PHP_EOL;\necho starts_one_ends(14) . PHP_EOL;\n\
    echo starts_one_ends(15) . PHP_EOL;\necho starts_one_ends(16) . PHP_EOL;\necho\
    \ starts_one_ends(17) . PHP_EOL;\necho starts_one_ends(18) . PHP_EOL;\necho starts_one_ends(19)\
    \ . PHP_EOL;\necho starts_one_ends(20) . PHP_EOL;\necho starts_one_ends(21) .\
    \ PHP_EOL;\necho starts_one_ends(22) . PHP_EOL;\necho starts_one_ends(23) . PHP_EOL",
  "  if ($n == 1) {\n    return 1;\n  }\n  if ($n == 2) {\n    return 2;\n  }\n  $dp\
    \ = [];\n  $dp[1] = 1;\n  $dp[2] = 2;\n  for ($i = 3; $i <= $n; $i++) {\n    $dp[$i]\
    \ = $dp[$i - 1] + $dp[$i - 2];\n  }\n  return $dp[$n];\n}\n\n$n = 3;\necho starts_one_ends($n);\n\
    echo \"\\n\";", "    $result = 0;\n    for ($i = 1; $i <= $n; $i++) {\n      \
    \  $result += pow(9, $i - 1);\n    }\n    for ($i = 2; $i <= $n; $i++) {\n   \
    \     $result += pow(9, $i - 1);\n    }\n    return $result;\n}\n\nfor ($i = 1;\
    \ $i <= 9; $i++) {\n    echo \"The count of the numbers of {$i}-digit positive\
    \ integers that \" .\n        \"start or end with 1 is \" . starts_one_ends($i)\
    \ . \"\\n\";\n}\n\necho \"\\n\";\n\n$n = 5;\necho \"The count of the numbers of\
    \ {$n}-digit positive integers that \" .\n    \"start or end with 1 is \" . starts_one_ends($n)\
    \ . \"\\n\";", "    $count = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $count\
    \ += pow(10, $i);\n    }\n    return $count;\n}\n\n$n = 3;\necho starts_one_ends($n)\
    \ . PHP_EOL;", "  if ($n <= 0) return 0;\n  if ($n == 1) return 1;\n  $dp = array();\n\
    \  $dp[0] = 1;\n  $dp[1] = 1;\n  for ($i = 2; $i <= $n; $i++) {\n    $dp[$i] =\
    \ $dp[$i - 1] + 9 * pow(10, $i - 2);\n  }\n  return $dp[$n];\n}\n\nvar_dump(starts_one_ends(1));\n\
    var_dump(starts_one_ends(3));\nvar_dump(starts_one_ends(4));\nvar_dump(starts_one_ends(5));",
  "    // Brute force all numbers from 1 -> 100 and check\n    $res = 0;\n    for\
    \ ($i = pow(10, $n - 1); $i < pow(10, $n); $i++) {\n        $str = strval($i);\n\
    \        if ($str[0] == 1 || $str[strlen($str) - 1] == 1) {\n            $res++;\n\
    \        }\n    }\n    return $res;\n}\necho starts_one_ends(1);", "  if ($n ==\
    \ 1) return 2;\n  $ends = [0, 1, 1, 1, 1, 1, 1, 1, 1, 1];\n  $starts = [0, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1];\n  $total = 10;\n  $exp = 1;\n  while ($exp < $n) {\n\
    \    $ends[0] = $starts[0];\n    $starts[0] = $total;\n    for ($i = 1; $i < 10;\
    \ $i++) {\n      $ends[$i] = $starts[$i] + $ends[$i - 1];\n      $starts[$i] =\
    \ $total;\n    }\n    $total = $total * 10;\n    $exp++;\n  }\n  return array_sum($starts)\
    \ + array_sum($ends);\n}\n\necho starts_one_ends(1) . \"\\n\";\necho starts_one_ends(2)\
    \ . \"\\n\";\necho starts_one_ends(3) . \"\\n\";\necho starts_one_ends(4) . \"\
    \\n\";\necho starts_one_ends(5) . \"\\n\";\necho starts_one_ends(6) . \"\\n\"\
    ;\necho starts_one_ends(7) . \"\\n\";\necho starts_one_ends(8) . \"\\n\";\necho\
    \ starts_one_ends(9) . \"\\n\";\necho starts_one_ends(10) . \"\\n\";\necho starts_one_ends(11)\
    \ . \"\\n\";\necho starts_one_ends(12) . \"\\n\";\necho starts_one_ends(13) .\
    \ \"\\n\";\necho starts_one_ends(14) . \"\\n\";\necho starts_one_ends(15) . \"\
    \\n\";\necho starts_one_ends(16) . \"\\n\";\necho starts_one_ends(17) . \"\\n\"\
    ;\necho starts_one_ends(18) . \"\\n\";\necho starts_one_ends(19) . \"\\n\";\n\
    echo starts_one_ends(20) . \"\\n\";\necho starts_one_ends(21) . \"\\n\";\necho\
    \ starts_one_ends(", "  if ($n == 1) return 2;\n  $count = 0;\n  for ($i = 0;\
    \ $i < pow(10, $n); $i++) {\n    $str = strval($i);\n    if ($str[0] == 1 || $str[$n\
    \ - 1] == 1) $count++;\n  }\n  return $count;\n}\necho starts_one_ends(1) . \"\
    \\n\";\necho starts_one_ends(2) . \"\\n\";\necho starts_one_ends(3) . \"\\n\"\
    ;\necho starts_one_ends(4) . \"\\n\";\necho starts_one_ends(6) . \"\\n\";", " \
    \   if ($n == 1) {\n        return 1;\n    } else {\n        return pow(2, $n\
    \ - 1) + starts_one_ends($n - 1);\n    }\n}\n", "    if ($n == 1) {\n        return\
    \ 2;\n    }\n    $count = 1;\n    for ($i = 2; $i <= $n; $i++) {\n        $count\
    \ = $count * 2;\n    }\n    return $count;\n}\n\nforeach (range(1, 10) as $num)\
    \ {\n    echo \"Starts or ends one of $num: \" . starts_one_ends($num) . \"\\\
    n\";\n}", "  if ($n <= 0) {\n    return 0;\n  }\n  if ($n == 1) {\n    return\
    \ 1;\n  }\n  return starts_one_ends($n - 1) + starts_one_ends($n - 2);\n}\n\n\
    var_dump(starts_one_ends(3));\nvar_dump(starts_one_ends(4));\nvar_dump(starts_one_ends(5));\n\
    var_dump(starts_one_ends(6));\nvar_dump(starts_one_ends(7));\nvar_dump(starts_one_ends(8));\n\
    var_dump(starts_one_ends(9));\nvar_dump(starts_one_ends(10));\nvar_dump(starts_one_ends(11));\n\
    var_dump(starts_one_ends(12));\nvar_dump(starts_one_ends(13));\nvar_dump(starts_one_ends(14));\n\
    var_dump(starts_one_ends(15));\nvar_dump(starts_one_ends(16));\nvar_dump(starts_one_ends(17));\n\
    var_dump(starts_one_ends(18));\nvar_dump(starts_one_ends(19));\nvar_dump(starts_one_ends(20));\n\
    var_dump(starts_one_ends(21));\nvar_dump(starts_one_ends(22));\nvar_dump(starts_one_ends(23));\n\
    var_dump(starts_one_ends(24));\nvar_dump(starts_one_ends(25));\nvar_dump(starts_one_ends(26));\n\
    var_dump(starts_one_ends(27));\nvar_dump(starts_one_ends(28));\nvar_dump(starts_one_ends(29));\n\
    var_dump(starts_one_ends(30));\nvar_dump(starts_one_ends(31));\nvar_dump(starts_one_ends(32));\n\
    var_dump(starts_one_ends(33));\nvar_dump(starts_one_ends(34));\nvar_", "    $start_one\
    \ = $n;\n    $end_one = 1;\n    $total = 1;\n    $nine = 9;\n    for ($i = 1;\
    \ $i < $n; $i++) {\n        $start_one *= $nine;\n        $end_one *= $nine;\n\
    \        $total += $start_one + $end_one;\n    }\n    return $total;\n}\n\nfor\
    \ ($i = 0; $i < 7; $i++) {\n    echo starts_one_ends($i) . \"\\n\";\n}", "   \
    \ if ($n < 2) return $n;\n    return (int) pow(10, $n - 1) + 9 * ($n - 1) * (int)\
    \ pow(10, $n - 2);\n}\n", "    if ($n < 2) return 1;\n    $count = 1; // For number\
    \ 1.\n    $count += 9; // For numbers starting with 1.\n    for ($i = 2; $i <=\
    \ $n; $i++) {\n        // For numbers ending with 1.\n        $count += 9 * pow(10,\
    \ $i - 2);\n    }\n    return $count;\n}\n", "  if($n == 1) {\n    return 2;\n\
    \  } else if($n == 2) {\n    return 5;\n  } else {\n    return starts_one_ends($n\
    \ - 1) + starts_one_ends($n - 2) + 4;\n  }\n}\n", "  if ($n == 1) {\n    return\
    \ 2;\n  }\n  if ($n == 2) {\n    return 3;\n  }\n  return starts_one_ends($n -\
    \ 1) + starts_one_ends($n - 2);\n}\n\n$in = [[1], [2], [3], [4], [5], [6], [7],\
    \ [8], [9], [10]];\n$out = [2, 3, 5, 8, 13, 21, 34, 55, 89, 144];\nforeach ($in\
    \ as $i => $n) {\n  echo 'Start(ends) ' . $n[0] . '-digit ' .\n       ($out[$i]\
    \ == starts_one_ends($n[0]) ? 'correct' : 'incorrect') . \"\\n\";\n}", "    $first_digit\
    \ = 9;\n    $mid_digits = 0;\n    $other_digits = 1;\n    $total = 0;\n    for\
    \ ($i = 1; $i < $n; $i++) {\n        $mid_digits = $first_digit + $mid_digits\
    \ * 9;\n        $other_digits = $other_digits * 10;\n        $total += $mid_digits\
    \ + $first_digit * $other_digits;\n    }\n    $total += $first_digit * $other_digits;\n\
    \    return $total;\n}\necho starts_one_ends(4) . PHP_EOL;\necho starts_one_ends(3)\
    \ . PHP_EOL;\n", "    if ($n == 1) {\n        return 2;\n    }\n    $end = 1;\n\
    \    $start = 1;\n    for ($i = 2; $i <= $n; $i++) {\n        $start = $start\
    \ * 2;\n        $end = $end * 9;\n    }\n    return $start + $end;\n}\n", "  \
    \  if ($n == 1) {\n        return 2;\n    }\n    $max = pow(10, $n) - 1;\n   \
    \ $min = pow(10, $n - 1);\n    return $max - $min + 1;\n}\n\n$n = 3;\necho starts_one_ends($n);\n\
    echo \"\\n\";", "  if ($n <= 0) {\n    return 0;\n  }\n\n  if ($n == 1) {\n  \
    \  return 1;\n  }\n\n  $dp = array_fill(0, $n + 1, 0);\n  $dp[1] = 1;\n  $dp[2]\
    \ = 1;\n\n  for ($i = 3; $i <= $n; $i++) {\n    $dp[$i] = $dp[$i - 1] + $dp[$i\
    \ - 2];\n  }\n\n  return $dp[$n] * 2 + $dp[$n - 1];\n}\n\nprint_r(starts_one_ends(1)\
    \ . PHP_EOL);\nprint_r(starts_one_ends(2) . PHP_EOL);\nprint_r(starts_one_ends(3)\
    \ . PHP_EOL);\nprint_r(starts_one_ends(4) . PHP_EOL);\nprint_r(starts_one_ends(5)\
    \ . PHP_EOL);", "    if ($n == 1) {\n        return 1;\n    } else if ($n == 2)\
    \ {\n        return 10;\n    } else {\n        $count = 10 + 9;\n        for ($i\
    \ = 3; $i <= $n; $i++) {\n            $count = $count * (9 - $i + 2) + 10;\n \
    \       }\n        return $count;\n    }\n}\n", "  $count = 0;\n  $str = \"1\"\
    ;\n  for ($i = 0; $i < $n - 1; $i++) {\n    $str .= \"0\";\n  }\n  $count += strlen($str);\n\
    \  $str = \"1\";\n  for ($i = 0; $i < $n - 1; $i++) {\n    $str .= \"1\";\n  }\n\
    \  $count += strlen($str);\n  return $count;\n}\n\n$n = 2;\necho \"n = $n\\n\"\
    ;\n$count = starts_one_ends($n);\necho \"count = $count\\n\";\n\n$n = 3;\necho\
    \ \"n = $n\\n\";\n$count = starts_one_ends($n);\necho \"count = $count\\n\";\n\
    \n$n = 4;\necho \"n = $n\\n\";\n$count = starts_one_ends($n);\necho \"count =\
    \ $count\\n\";\n\n$n = 5;\necho \"n = $n\\n\";\n$count = starts_one_ends($n);\n\
    echo \"count = $count\\n\";\n\n$n = 6;\necho \"n = $n\\n\";\n$count = starts_one_ends($n);\n\
    echo \"count = $count\\n\";\n\n$n = 7;\necho \"n = $n\\n\";\n$count = starts_one_ends($n);\n\
    echo \"count = $count\\n\";\n\n$n = 8;\necho \"n = $n\\n\";\n$count = starts_one_ends($n);\n\
    echo \"count = $count\\n\";\n\n$n = 9;\necho \"n = $n\\n\";\n$count = starts_one_ends($n);\n\
    echo \"count = $count\\n\";\n\n$n = 10;\necho \"n = $n\\n\";\n$count = starts_one_ends($n);\n\
    echo \"count = $count\\n\";\n\n$n = 11;\necho \"n = $n\\n\";\n$count = starts_one_ends($n);\n\
    echo \"count = $count\\n\";\n\n$n = 12;", "    $number = str_repeat('0', $n -\
    \ 1) . '1';\n    $init = str_repeat('0', $n - 1) . '1';\n    $end = $init;\n \
    \   $count = 0;\n    while ($number <= $end) {\n        if (strpos($number, '1')\
    \ === 0 || strpos($number, '1') === $n - 1) {\n            $count++;\n       \
    \ }\n        $number++;\n    }\n    return $count;\n}\n\nif ($argc > 1) {\n  \
    \  $n = $argv[1];\n    echo starts_one_ends($n) . PHP_EOL;\n}", "  $count = 0;\n\
    \  for ($i = 1; $i <= $n; $i++) {\n    $count += pow(9, $i - 1);\n  }\n  return\
    \ $count;\n}\n", "    $startOne = 9;\n    $rest = 9;\n    $count = 0;\n    for\
    \ ($i = 0; $i < $n; $i++) {\n        $count += $startOne * $rest;\n        $rest\
    \ *= 10;\n    }\n    return $count;\n}\n\necho starts_one_ends(1);\necho starts_one_ends(2);\n\
    echo starts_one_ends(3);\necho starts_one_ends(4);\necho starts_one_ends(5);\n\
    echo starts_one_ends(6);\necho starts_one_ends(7);\necho starts_one_ends(8);\n\
    echo starts_one_ends(9);\necho starts_one_ends(10);\necho starts_one_ends(11);\n\
    echo starts_one_ends(12);\necho starts_one_ends(13);\necho starts_one_ends(14);\n\
    echo starts_one_ends(15);\necho starts_one_ends(16);\necho starts_one_ends(17);\n\
    echo starts_one_ends(18);\necho starts_one_ends(19);\necho starts_one_ends(20);\n\
    echo starts_one_ends(21);\necho starts_one_ends(22);\necho starts_one_ends(23);\n\
    echo starts_one_ends(24);\necho starts_one_ends(25);\necho starts_one_ends(26);\n\
    echo starts_one_ends(27);\necho starts_one_ends(28);\necho starts_one_ends(29);\n\
    echo starts_one_ends(30);\necho starts_one_ends(31);\necho starts_one_ends(32);\n\
    echo starts_one_ends(33);\necho starts_one_ends(34);\necho starts_one_ends(35);\n\
    echo starts_one_ends(36);\necho starts_one_ends(37);\necho starts_one_ends(38);\n\
    echo starts_one_ends(39);\necho starts_one_ends(40);\necho starts_one_ends(41);\n\
    echo starts_one_ends(42);\necho starts_one_ends(43);\necho starts_one_ends(44);",
  "    if ($n == 1) return 1;\n    $ans = 0;\n    for ($i = 1; $i < $n; $i++) {\n\
    \        $ans += starts_one_ends($i) * starts_one_ends($n - $i - 1);\n    }\n\
    \    return $ans;\n}\n\nfor ($i = 1; $i < 10; $i++) {\n    echo starts_one_ends($i)\
    \ . \"\\n\";\n}", "  // $count = 0;\n  // for ($i = 1; $i <= $n; $i++) {\n  //\
    \   for ($j = 0; $j < 10; $j++) {\n  //     $num = str_pad($j, $i, '0', STR_PAD_LEFT);\n\
    \  //     if ($num[0] == 1 || $num[$i - 1] == 1) {\n  //       $count++;\n  //\
    \     }\n  //   }\n  // }\n  // return $count;\n\n  $start = 0;\n  $end = 0;\n\
    \  $mid = 0;\n  if ($n == 1) {\n    return 2;\n  } elseif ($n == 2) {\n    return\
    \ 9;\n  } else {\n    $start = 9;\n    $end = 9;\n    $mid = pow(10, $n - 2) *\
    \ 8;\n  }\n  return $start + $end + $mid;\n}\n", "  $count = 0;\n  for ($i = 1;\
    \ $i <= 9; $i++) {\n    $count += count_helper($n - 1, $i);\n  }\n  return $count;\n\
    }\n", "  if ($n < 1) {\n    return 0;\n  }\n\n  if ($n === 1) {\n    return 2;\n\
    \  }\n\n  return (starts_one_ends($n - 1) + 9) * 2;\n}\n\nfor ($i = 1; $i < 10;\
    \ $i++) {\n  echo starts_one_ends($i), PHP_EOL;\n}", "    $count = 0;\n    if\
    \ ($n == 1) {\n        return 1;\n    }\n    else {\n        for ($i = 1; $i <=\
    \ $n; $i++) {\n            if ($i == 1) {\n                $count += 1;\n    \
    \        }\n            else if ($i == $n) {\n                $count += 9;\n \
    \           }\n            else {\n                $count += 9 * pow(10, $i -\
    \ 2);\n            }\n        }\n    }\n    return $count;\n}\nprint_r(starts_one_ends(1));\n\
    print_r(starts_one_ends(2));\nprint_r(starts_one_ends(3));\nprint_r(starts_one_ends(4));\n\
    print_r(starts_one_ends(5));\nprint_r(starts_one_ends(6));\nprint_r(starts_one_ends(7));\n\
    print_r(starts_one_ends(8));\nprint_r(starts_one_ends(9));\nprint_r(starts_one_ends(10));\n\
    print_r(starts_one_ends(11));\nprint_r(starts_one_ends(12));\nprint_r(starts_one_ends(13));\n\
    print_r(starts_one_ends(14));\nprint_r(starts_one_ends(15));\nprint_r(starts_one_ends(16));\n\
    print_r(starts_one_ends(17));\nprint_r(starts_one_ends(18));\nprint_r(starts_one_ends(19));\n\
    print_r(starts_one_ends(20));\nprint_r(starts_one_ends(21));\nprint_r(starts_one_ends(22));\n\
    print_r(starts_one_ends(23));\nprint_r(starts_one_ends(24));\nprint_r(starts_one_ends(25));\n\
    print_r(starts_one_ends(26));\nprint_r(starts_one_ends(27));\nprint_r(starts_one_ends",
  "  if ($n == 1) {\n    return 2;\n  }\n  $n_minus_one = starts_one_ends($n - 1);\n\
    \  return 9 * $n_minus_one + pow(10, $n - 1);\n}\n\necho starts_one_ends(2);\n\
    echo PHP_EOL;\necho starts_one_ends(5);\necho PHP_EOL;", "    if ($n == 1) return\
    \ 2;\n    if ($n == 2) return 3;\n    return starts_one_ends($n - 1) + starts_one_ends($n\
    \ - 2);\n}", "  // We can either start or end with one.\n  // If we start with\
    \ one, then the remaining digits can be any of 1-9.\n  // If we end with one,\
    \ then the remaining digits can be any of 0-8.\n  // So if n>1, there are 10^(n-1)\
    \ 1-digit-strings that can be appended to\n  // the beginning, and 9^(n-1) 1-digit-strings\
    \ that can be appended to the\n  // end. Since the two overlap, we subtract one\
    \ to remove the duplicate.\n  if ($n == 1) return 2;\n  else return pow(10, $n-1)\
    \ + pow(9, $n-1) - 1;\n}\n", "    if ($n == 1) {\n        return 2;\n    }\n \
    \   if ($n == 2) {\n        return 3;\n    }\n    if ($n == 3) {\n        return\
    \ 5;\n    }\n    return starts_one_ends($n - 1) + starts_one_ends($n - 2);\n}\n",
  "    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if (strpos($i, '1')\
    \ === 0 || strpos($i, '1') === (strlen($i) - 1)) {\n            $count++;\n  \
    \      }\n    }\n    return $count;\n}\n\necho starts_one_ends(5);\n", "  $count\
    \ = 0;\n  for ($i = pow(10, $n - 1); $i < pow(10, $n); $i++) {\n    if (substr($i,\
    \ 0, 1) == 1 || substr($i, -1) == 1) {\n      $count++;\n    }\n  }\n  return\
    \ $count;\n}\n\nprint(starts_one_ends(3));\nprint(PHP_EOL);\nprint(starts_one_ends(7));\n\
    print(PHP_EOL);", "    if ($n == 1) {\n        return 2;\n    }\n    if ($n ==\
    \ 2) {\n        return 4;\n    }\n    $a = starts_one_ends($n - 1);\n    $b =\
    \ pow(10, $n - 1);\n    return 2 * $a + 3 * $b;\n}\n\necho starts_one_ends(3),\
    \ \"\\n\";\necho starts_one_ends(4), \"\\n\";\necho starts_one_ends(5), \"\\n\"\
    ;\necho starts_one_ends(6), \"\\n\";\necho starts_one_ends(7), \"\\n\";\necho\
    \ starts_one_ends(8), \"\\n\";\necho starts_one_ends(9), \"\\n\";\necho starts_one_ends(10),\
    \ \"\\n\";\necho starts_one_ends(11), \"\\n\";\necho starts_one_ends(12), \"\\\
    n\";\necho starts_one_ends(13), \"\\n\";\necho starts_one_ends(14), \"\\n\";\n\
    echo starts_one_ends(15), \"\\n\";\necho starts_one_ends(16), \"\\n\";\necho starts_one_ends(17),\
    \ \"\\n\";\necho starts_one_ends(18), \"\\n\";\necho starts_one_ends(19), \"\\\
    n\";\necho starts_one_ends(20), \"\\n\";\necho starts_one_ends(21), \"\\n\";\n\
    echo starts_one_ends(22), \"\\n\";\necho starts_one_ends(23), \"\\n\";\necho starts_one_ends(24),\
    \ \"\\n\";\necho starts_one_ends(25), \"\\n\";\necho starts_one_ends(26), \"\\\
    n\";\necho starts_one_ends(27), \"\\n\";\necho starts_one_ends(28), \"\\n\";\n\
    echo starts_one_ends(29), \"\\n\";\necho starts_one_ends(30), \"\\n\";\necho starts_one_ends(31),\
    \ \"\\n\";\necho starts_one_ends(32), \"\\n\";\necho starts_one_ends(33), \"\\\
    n\";\necho starts_one_ends(34), \"\\n\";\necho starts_one_ends(35), \"\\n\";\n\
    echo starts_", "  $start = ($n - 1) * 9;\n  $end = 9;\n  return $start + $end;\n\
    }\n\nfor ($i = 1; $i <= 10; $i++) {\n  print starts_one_ends($i) . \"\\n\";\n}",
  "  // Create the array.\n  $numbers = array_fill(0, $n, 9);\n  $count = 0;\n  //\
    \ Count the number of numbers starting with 1.\n  $count += count_array($numbers,\
    \ 1);\n  // Decrement the last number and count the number of numbers ending with\
    \ 1.\n  $numbers[$n - 1]--;\n  $count += count_array($numbers, 1);\n  return $count;\n\
    }\n", "    if ($n == 1) {\n        return 2;\n    }\n    if ($n == 2) {\n    \
    \    return 4;\n    }\n    return starts_one_ends($n - 1) + starts_one_ends($n\
    \ - 2);\n}\n", "  $ones = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  $result = $ones;\n \
    \ for ($i = 1; $i < $n; $i++) {\n    $result = array_merge($result, array_map(function($value)\
    \ {\n      return $value * 10;\n    }, $ones));\n  }\n  return count($result);\n\
    }\n", "  if ($n < 1) {\n    return 0;\n  }\n\n  if ($n == 1) {\n    return 2;\n\
    \  }\n\n  $s = [1, 1];\n  for ($i = 2; $i <= $n; $i++) {\n    $s[$i] = $s[$i -\
    \ 1] + ($s[$i - 2] * 9);\n  }\n\n  return $s[$n];\n}\n", "  if ($n == 1) {\n \
    \   return 10;\n  }\n\n  $dp = array_fill(0, $n + 1, 0);\n  $dp[1] = 10;\n  $dp[2]\
    \ = 9 * 9;\n\n  for ($i = 3; $i <= $n; $i++) {\n    $dp[$i] = $dp[$i - 1] * (9\
    \ - $i + 2) + $dp[$i - 2] * (9 - $i + 2);\n  }\n\n  return $dp[$n];\n}\n\nvar_dump(starts_one_ends(1));\n\
    var_dump(starts_one_ends(2));\nvar_dump(starts_one_ends(3));\nvar_dump(starts_one_ends(4));\n\
    var_dump(starts_one_ends(5));", "  if ($n == 1) {\n    return 2;\n  }\n  else\
    \ if ($n == 2) {\n    return 4;\n  }\n  $prev = 2;\n  $pPrev = 1;\n  $result =\
    \ 4;\n  for ($i = 3; $i <= $n; $i++) {\n    $result = $prev + $pPrev + pow(9,\
    \ $i - 2);\n    $pPrev = $prev;\n    $prev = $result;\n  }\n  return $result;\n\
    }\necho starts_one_ends(4);", "    // If a number has n-digits and starts with\
    \ 1, then it has n-1 digits\n    // that can be any digit from 0 to 9, so there\
    \ are 10^(n-1) such numbers.\n    // The count of the n-digit numbers that end\
    \ with 1 is the same.\n    return pow(10, $n - 1) * 2;\n}\necho starts_one_ends(5)\
    \ . \"\\n\";", "  if ($n == 1) {\n    return 1;\n  } else {\n    return pow(10,\
    \ $n - 1) * 9 + $n * starts_one_ends($n - 1);\n  }\n}\n\nfor ($i = 1; $i <= 5;\
    \ $i++) {\n  echo starts_one_ends($i) . \"\\n\";\n}", "  // When n is 1, the number\
    \ of n-digit positive integers is 9.\n  if ($n === 1) {\n    return 9;\n  }\n\
    \  $count = 9;\n  for ($i = 1; $i < $n; $i++) {\n    $count *= 10;\n  }\n  return\
    \ $count + starts_one_ends($n - 1);\n}\n", "  if ($n == 1) return 2;\n  if ($n\
    \ == 2) return 3;\n  $ends = 2;\n  $starts = 2;\n  $count = 3;\n  for ($i = 3;\
    \ $i <= $n; $i++) {\n    $count = $ends + $starts;\n    $ends = $starts;\n   \
    \ $starts = $count;\n  }\n  return $count;\n}\nvar_dump(starts_one_ends(3));\n\
    var_dump(starts_one_ends(4));\nvar_dump(starts_one_ends(5));\nvar_dump(starts_one_ends(6));\n\
    var_dump(starts_one_ends(7));\nvar_dump(starts_one_ends(8));\nvar_dump(starts_one_ends(9));\n\
    var_dump(starts_one_ends(10));\nvar_dump(starts_one_ends(11));\nvar_dump(starts_one_ends(12));\n\
    var_dump(starts_one_ends(13));\nvar_dump(starts_one_ends(14));\nvar_dump(starts_one_ends(15));\n\
    var_dump(starts_one_ends(16));\nvar_dump(starts_one_ends(17));\nvar_dump(starts_one_ends(18));\n\
    var_dump(starts_one_ends(19));\nvar_dump(starts_one_ends(20));\nvar_dump(starts_one_ends(21));\n\
    var_dump(starts_one_ends(22));\nvar_dump(starts_one_ends(23));\nvar_dump(starts_one_ends(24));\n\
    var_dump(starts_one_ends(25));\nvar_dump(starts_one_ends(26));\nvar_dump(starts_one_ends(27));\n\
    var_dump(starts_one_ends(28));\nvar_dump(starts_one_ends(29));\nvar_dump(starts_one_ends(30));\n\
    var_dump(starts_one_ends(31));\nvar_", "  $result = 1;\n  for ($i = 1; $i < $n;\
    \ $i++) {\n    $result = ($result * 9) + pow(10, $i);\n  }\n  return $result;\n\
    }\n\nvar_dump(starts_one_ends(1));\nvar_dump(starts_one_ends(2));\nvar_dump(starts_one_ends(3));\n\
    var_dump(starts_one_ends(4));\nvar_dump(starts_one_ends(5));", "    $cache = [];\n\
    \    $cache[0] = 0;\n    $cache[1] = 1;\n    $cache[2] = 10;\n    $cache[3] =\
    \ 10;\n    for ($i = 4; $i <= $n; $i++) {\n        $cache[$i] = $cache[$i - 1]\
    \ + $cache[$i - 2];\n    }\n    return $cache[$n];\n}\n", "    $count = 0;\n \
    \   $base = 1;\n    for ($i = 1; $i < $n; $i++) {\n        $base *= 10;\n    }\n\
    \    $count += $base;\n    if ($n == 1) {\n        return $count;\n    }\n   \
    \ $count += 9 * ($n - 1) * $base;\n    return $count;\n}\n\nfor ($i = 1; $i <\
    \ 10; $i++) {\n    echo $i, \": \", starts_one_ends($i), \"\\n\";\n}", "  $result\
    \ = 0;\n  if ($n == 1) {\n    $result = 1;\n  } else {\n    for ($j = 1; $j <\
    \ $n; $j++) {\n      $result += pow(10, $j);\n    }\n    $result *= 2;\n  }\n\
    \  return $result;\n}\n", "  if ($n == 1) {\n    return 2;\n  }\n  if ($n == 2)\
    \ {\n    return 2;\n  }\n  return pow(10, $n - 1) + pow(10, $n - 2);\n}\n\necho\
    \ starts_one_ends(1) . PHP_EOL;\necho starts_one_ends(2) . PHP_EOL;\necho starts_one_ends(3)\
    \ . PHP_EOL;\necho starts_one_ends(4) . PHP_EOL;\necho starts_one_ends(5) . PHP_EOL;\n\
    echo starts_one_ends(6) . PHP_EOL;\necho starts_one_ends(7) . PHP_EOL;\necho starts_one_ends(8)\
    \ . PHP_EOL;\necho starts_one_ends(9) . PHP_EOL;\necho starts_one_ends(10) . PHP_EOL;",
  "    $matrix = array();\n    for ($i = 0; $i < $n; $i++) {\n        $matrix[$i]\
    \ = array();\n        for ($j = 0; $j < 10; $j++) {\n            $matrix[$i][$j]\
    \ = 0;\n        }\n    }\n    $matrix[0][1] = 1;\n    for ($i = 1; $i < $n; $i++)\
    \ {\n        for ($j = 0; $j < 10; $j++) {\n            if ($j != 0) {\n     \
    \           $matrix[$i][$j] = $matrix[$i - 1][$j - 1] + $matrix[$i - 1][$j + 1];\n\
    \            } else {\n                $matrix[$i][$j] = $matrix[$i - 1][$j +\
    \ 1];\n            }\n        }\n    }\n    for ($i = 0; $i < $n; $i++) {\n  \
    \      for ($j = 0; $j < 10; $j++) {\n            echo $matrix[$i][$j] . ' ';\n\
    \        }\n        echo \"\\n\";\n    }\n    return $matrix[$n - 1][1];\n}\n\n\
    $n = 8;\necho starts_one_ends($n) . \"\\n\";", "    $count = 0;\n    for ($i =\
    \ 1; $i <= $n; $i++) {\n        $count += pow(10, $i) - pow(10, $i - 1);\n   \
    \ }\n    return $count;\n}\n", "  if($n == 1) {\n    return 2;\n  }\n  if($n ==\
    \ 2) {\n    return 3;\n  }\n  $dp = [0, 0, 3];\n  for($i = 3; $i <= $n; $i++)\
    \ {\n    $dp[$i] = $dp[$i - 1] + $dp[$i - 2];\n  }\n  return $dp[$n];\n}\nprint_r(starts_one_ends(1)\
    \ . PHP_EOL);\nprint_r(starts_one_ends(2) . PHP_EOL);\nprint_r(starts_one_ends(3)\
    \ . PHP_EOL);\nprint_r(starts_one_ends(4) . PHP_EOL);\nprint_r(starts_one_ends(5)\
    \ . PHP_EOL);", "    $ends = 1;\n    $start = 1;\n    $both = 1;\n    for ($i\
    \ = 2; $i <= $n; $i++) {\n        $ends *= 9;\n        $start *= 10;\n       \
    \ $both *= 9;\n    }\n    return $start + $ends + $both;\n}", "    if ($n == 1)\
    \ {\n        return 2;\n    } else {\n        return starts_one_ends($n - 1) +\
    \ 9 * pow(10, $n - 2);\n    }\n}\necho starts_one_ends(3);", "    $count = 0;\n\
    \    $num = 1;\n    while ($num < pow(10, $n)) {\n        if ($num % 10 == 1)\
    \ {\n            $count++;\n        }\n        $num++;\n    }\n    return $count;\n\
    }\n$tests = [\n    1 => 9,\n    2 => 180,\n    3 => 2700,\n    4 => 36000,\n \
    \   5 => 450000,\n    6 => 5400000,\n    7 => 63000000,\n    8 => 720000000,\n\
    \    9 => 8100000000,\n    10 => 90000000000,\n];\nforeach ($tests as $n => $result)\
    \ {\n    $pass = starts_one_ends($n) == $result;\n    echo \"$pass $n $result\\\
    n\";\n}", "  if ($n == 1) {\n    return 2;\n  }\n  $count_of_ones = 0;\n  $count_of_ones\
    \ += $n - 1;\n  $count_of_ones += (pow(10, $n - 1) - pow(10, $n - 2));\n  return\
    \ $count_of_ones;\n}", "    $first_digit = pow(10, $n - 1);\n    $last_digit =\
    \ pow(10, $n - 2);\n    $total = 0;\n    for ($i = 1; $i < $n; $i++) {\n     \
    \   $total += pow(10, $i);\n    }\n    return $first_digit + $last_digit + $total;\n\
    }\nfor ($i = 1; $i < 100; $i++) {\n    echo starts_one_ends($i), \"\\n\";\n}",
  "    if ($n <= 0) {\n        return 0;\n    }\n    $count = [1, 1];\n    for ($i\
    \ = 2; $i <= $n; $i++) {\n        $count[$i] = $count[$i - 1] + $count[$i - 2];\n\
    \    }\n    return $count[$n];\n}\n", "    $arr = [];\n    for ($i = 1; $i <=\
    \ $n; $i++) {\n        $arr[] = $i;\n    }\n    $arr = implode(\"\", $arr);\n\
    \    $arr = str_split($arr);\n    $sum = 0;\n    foreach ($arr as $value) {\n\
    \        if ($value == 1) {\n            $sum++;\n        }\n    }\n    return\
    \ $sum;\n}\n\necho starts_one_ends(3);", "  if ($n < 1) {\n    return 0;\n  }\n\
    \n  if ($n == 1) {\n    return 2;\n  }\n\n  if ($n == 2) {\n    return 4;\n  }\n\
    \n  return starts_one_ends($n - 1) + starts_one_ends($n - 2);\n}\n", "  $start_one\
    \ = $end_one = 0;\n  for ($i = 1; $i <= $n; $i++) {\n    $start_one += pow(10,\
    \ $i-1);\n    $end_one += pow(10, $i-1);\n  }\n  return $start_one+$end_one;\n\
    }\n\n$s = microtime(true);\n$count = starts_one_ends(1000);\n$f = microtime(true);\n\
    printf(\"time %.6f\\n\", $f-$s);\nprintf(\"answer %d\\n\", $count);", "    if\
    \ ($n == 1) return 1;\n    $add = 1;\n    $sum = 2;\n    while ($n-- > 2) {\n\
    \        $sum += $add;\n        $add *= 2;\n    }\n    return $sum;\n}\n", " \
    \ if ($n == 1) {\n    return 10;\n  }\n  if ($n == 2) {\n    return 180;\n  }\n\
    \  if ($n >= 3) {\n    $total = 10;\n    $total += ($n - 1) * 8;\n    $total +=\
    \ 9 * (count_ints($n - 2));\n    return $total;\n  }\n}\n", "  $count = 0;\n \
    \ if ($n == 1) {\n    return 2;\n  } else {\n    $count += starts_one_ends($n\
    \ - 1);\n    $new_n = 0;\n    $base = 10;\n    for ($i = 0; $i < $n - 1; $i++)\
    \ {\n      $new_n += 1 * $base;\n      $base *= 10;\n    }\n    for ($i = 1; $i\
    \ < $n; $i++) {\n      $new_n += 1 * $base;\n      $base *= 10;\n    }\n    $count\
    \ += $new_n;\n    return $count;\n  }\n}\necho starts_one_ends(5) . PHP_EOL;",
  "  if ($n < 1) {\n    throw new Exception(\"n must be positive integer\");\n  }\n\
    \n  if ($n == 1) {\n    return 2;\n  }\n\n  $count = 0;\n  $count = (10 * starts_one_ends($n\
    \ - 1)) - (9 * starts_one_ends($n - 2));\n  return $count;\n}\n\necho starts_one_ends(3)\
    \ . \"\\n\";", "    $count = 0;\n    for ($i = 1; $i <= 9; $i++) {\n        $count\
    \ += count_n($n, $i);\n    }\n    return $count;\n}\n", "    $result = 0;\n  \
    \  $count = array_fill(0, 10, 0);\n    $count[1] = 1;\n    for ($i = 1; $i < $n;\
    \ $i++) {\n        $count[1] = 1;\n        for ($j = 0; $j < 10; $j++) {\n   \
    \         $count[$j] = $count[$j] + $count[$j - 1];\n        }\n    }\n    for\
    \ ($i = 0; $i < 10; $i++) {\n        $result += $count[$i];\n    }\n    return\
    \ $result;\n}\n", "  if ($n < 1) {\n    return false;\n  }\n  if ($n == 1) {\n\
    \    return 2;\n  }\n  if ($n == 2) {\n    return 3;\n  }\n  return count_start($n)\
    \ + count_end($n);\n}\n", "  $digits = str_split($n);\n  $count = 0;\n  foreach\
    \ ($digits as $digit) {\n    if ($digit == 1) {\n      $count++;\n    }\n  }\n\
    \  return $count;\n}\necho starts_one_ends(1112);", "  if ($n == 1) {\n    return\
    \ 10;\n  }\n\n  $count = 1;\n  $val = pow(10, $n - 1);\n  $end = pow(10, $n);\n\
    \  while ($val < $end) {\n    if ($val % 10 == 1) {\n      $count++;\n    }\n\
    \    $val++;\n  }\n  return $count;\n}\n\nprint starts_one_ends(2) . PHP_EOL;\n\
    print starts_one_ends(3) . PHP_EOL;\nprint starts_one_ends(4) . PHP_EOL;\nprint\
    \ starts_one_ends(5) . PHP_EOL;\nprint starts_one_ends(6) . PHP_EOL;\nprint starts_one_ends(7)\
    \ . PHP_EOL;\nprint starts_one_ends(8) . PHP_EOL;\nprint starts_one_ends(9) .\
    \ PHP_EOL;\nprint starts_one_ends(10) . PHP_EOL;", "    if($n == 1) {\n      \
    \  return 2;\n    }\n    return floor(pow(10, $n-1) * (5/9));\n}\n\necho starts_one_ends(1)\
    \ . PHP_EOL;\necho starts_one_ends(2) . PHP_EOL;\necho starts_one_ends(3) . PHP_EOL;\n\
    echo starts_one_ends(4) . PHP_EOL;\necho starts_one_ends(5) . PHP_EOL;\necho starts_one_ends(6)\
    \ . PHP_EOL;\necho starts_one_ends(7) . PHP_EOL;\necho starts_one_ends(8) . PHP_EOL;\n\
    echo starts_one_ends(9) . PHP_EOL;\necho starts_one_ends(10) . PHP_EOL;\necho\
    \ starts_one_ends(11) . PHP_EOL;\necho starts_one_ends(12) . PHP_EOL;\necho starts_one_ends(13)\
    \ . PHP_EOL;\necho starts_one_ends(14) . PHP_EOL;\necho starts_one_ends(15) .\
    \ PHP_EOL;\necho starts_one_ends(16) . PHP_EOL;\necho starts_one_ends(17) . PHP_EOL;\n\
    echo starts_one_ends(18) . PHP_EOL;\necho starts_one_ends(19) . PHP_EOL;\necho\
    \ starts_one_ends(20) . PHP_EOL;\necho starts_one_ends(21) . PHP_EOL;\necho starts_one_ends(22)\
    \ . PHP_EOL;\necho starts_one_ends(23) . PHP_EOL;\necho starts_one_ends(24) .\
    \ PHP_EOL;\necho starts_one_ends(25) . PHP_EOL;\necho starts_one_ends(26) . PHP_EOL;\n\
    echo starts_one_ends(27) . PHP_EOL;\necho starts_one_ends(28) . PHP_EOL;\necho\
    \ starts_one_ends(29) . PHP_EOL;\necho starts_one_ends", "  $cnt = 0;\n  for ($i\
    \ = 1; $i <= $n; $i++) {\n    $cnt += 9 * pow(10, $i - 1);\n  }\n  return $cnt;\n\
    }\n", "  $total = 0;\n  $start = 9;\n  $start_sum = 9;\n  $end = 9;\n  $end_sum\
    \ = 9;\n  for ($i = 1; $i < $n; $i++) {\n    $start *= 10;\n    $start_sum +=\
    \ $start;\n    $end *= 10;\n    $end_sum += $end;\n  }\n  $total = $start_sum\
    \ + $end_sum;\n  return $total;\n}\n\necho starts_one_ends(2) . PHP_EOL; // returns\
    \ 18\necho starts_one_ends(3) . PHP_EOL; // returns 261\necho starts_one_ends(4)\
    \ . PHP_EOL; // returns 4918\necho starts_one_ends(5) . PHP_EOL; // returns 82160\n\
    echo starts_one_ends(6) . PHP_EOL; // returns 1351205\necho starts_one_ends(7)\
    \ . PHP_EOL; // returns 22559470\necho starts_one_ends(8) . PHP_EOL; // returns\
    \ 372112590\necho starts_one_ends(9) . PHP_EOL; // returns 6198304968\necho starts_one_ends(10)\
    \ . PHP_EOL; // returns 103062707878\necho starts_one_ends(11) . PHP_EOL; // returns\
    \ 1726062454204\necho starts_one_ends(12) . PHP_EOL; // returns 28982524838862\n\
    echo starts_one_ends(13) . PHP_EOL; // returns 482824756070942\necho starts_one_ends(14)\
    \ . PHP_EOL; // returns 8017596711761276\necho starts_one_ends(15) . PHP_EOL;\
    \ // returns 132657780259827212\necho starts_one_ends(16) . PHP_EOL; // returns\
    \ 2204435158278590790\necho starts_one_ends(17) . PHP_EOL; // returns 36814051748993327878\n\
    echo starts_one_ends(18) . PHP_EOL; // returns 613129755899", "  if ($n == 1)\
    \ {\n    return 2;\n  }\n  $sum = 0;\n  for ($i = 1; $i < $n; $i++) {\n    $sum\
    \ += pow(2, $i);\n  }\n  return $sum + 1;\n}\n\nfor ($i = 1; $i < 10; $i++) {\n\
    \  echo \"n = $i: \".starts_one_ends($i).\"\\n\";\n}", "  $dp = [];\n  $dp[1]\
    \ = 2;\n  for ($i = 2; $i <= $n; $i++) {\n    $dp[$i] = 9 * $dp[$i - 1] + pow(10,\
    \ $i - 1);\n  }\n  return $dp[$n];\n}\n\necho starts_one_ends(2) . \"\\n\";\n\
    echo starts_one_ends(3) . \"\\n\";\necho starts_one_ends(5) . \"\\n\";", "   \
    \ $n += 1;\n    $table = [];\n    $table[0] = 1;\n    $table[1] = 1;\n    for\
    \ ($i = 2; $i < $n; $i++) {\n        $table[$i] = $table[$i - 1] + $table[$i -\
    \ 2];\n    }\n    return $table[$n - 1];\n}\n", "  if ($n == 1) {\n    return\
    \ 2;\n  }\n  $total = 9;\n  $sum = 9;\n  for ($i = 1; $i < $n; $i++) {\n    $total\
    \ *= 10;\n    $sum += 9 * $total;\n  }\n  return $sum;\n}\n", "    if ($n == 1)\
    \ {\n        return 2;\n    } else if ($n == 2) {\n        return 3;\n    } else\
    \ {\n        return starts_one_ends($n - 1) + starts_one_ends($n - 2);\n    }\n\
    }\n\necho starts_one_ends(1) . PHP_EOL;\necho starts_one_ends(2) . PHP_EOL;\n\
    echo starts_one_ends(3) . PHP_EOL;\necho starts_one_ends(4) . PHP_EOL;\necho starts_one_ends(5)\
    \ . PHP_EOL;\necho starts_one_ends(6) . PHP_EOL;\necho starts_one_ends(7) . PHP_EOL;\n\
    echo starts_one_ends(8) . PHP_EOL;\necho starts_one_ends(9) . PHP_EOL;\necho starts_one_ends(10)\
    \ . PHP_EOL;\necho starts_one_ends(11) . PHP_EOL;\necho starts_one_ends(12) .\
    \ PHP_EOL;\necho starts_one_ends(13) . PHP_EOL;\necho starts_one_ends(14) . PHP_EOL;\n\
    echo starts_one_ends(15) . PHP_EOL;\necho starts_one_ends(16) . PHP_EOL;\necho\
    \ starts_one_ends(17) . PHP_EOL;\necho starts_one_ends(18) . PHP_EOL;\necho starts_one_ends(19)\
    \ . PHP_EOL;\necho starts_one_ends(20) . PHP_EOL;\necho starts_one_ends(21) .\
    \ PHP_EOL;\necho starts_one_ends(22) . PHP_EOL;\necho starts_one_ends(23) . PHP_EOL;\n\
    echo starts_one_ends(24) . PHP_EOL;\necho starts_one_ends(25) . PHP_EOL;\necho\
    \ starts_one_ends(26) . PHP_EOL;\necho starts_one_ends(27) . PHP_EOL;\necho starts_one_ends(28)\
    \ . PHP_EOL", "  // if the number is even\n  if ($n % 2 == 0) {\n    // return\
    \ the number of even numbers that start or end with 1\n    return $n / 2;\n  }\
    \ else {\n    // return the number of odd numbers that start or end with 1\n \
    \   return floor($n / 2) + 1;\n  }\n}\n", "  $count = 0;\n  for ($i = 10 ** ($n\
    \ - 1); $i < 10 ** $n; $i++) {\n    if (substr($i, 0, 1) == 1 || substr($i, -1)\
    \ == 1) {\n      $count++;\n    }\n  }\n  return $count;\n}\n\necho starts_one_ends(1)\
    \ . PHP_EOL;\necho starts_one_ends(2) . PHP_EOL;\necho starts_one_ends(3) . PHP_EOL;\n\
    echo starts_one_ends(4) . PHP_EOL;\necho starts_one_ends(5) . PHP_EOL;\necho starts_one_ends(6)\
    \ . PHP_EOL;\necho starts_one_ends(7) . PHP_EOL;\necho starts_one_ends(8) . PHP_EOL;\n\
    echo starts_one_ends(9) . PHP_EOL;\necho starts_one_ends(10) . PHP_EOL;", "  if\
    \ ($n == 1) {\n    return 2;\n  }\n  if ($n == 2) {\n    return 3;\n  }\n  $start\
    \ = 1;\n  $end = 1;\n  for ($i = 2; $i < $n; $i++) {\n    $tmp = $start;\n   \
    \ $start = $start + $end;\n    $end = $tmp * 2;\n  }\n  return $start + $end;\n\
    }\n\nassert(starts_one_ends(1) == 2);\nassert(starts_one_ends(2) == 3);\nassert(starts_one_ends(3)\
    \ == 5);\nassert(starts_one_ends(4) == 8);\nassert(starts_one_ends(5) == 13);\n",
  "    $total_count = pow(10, $n);\n    $start_count = $total_count - pow(10, $n -\
    \ 1);\n    $end_count = pow(10, $n - 1);\n    $n -= 2;\n    $valid_for_start =\
    \ pow(9, $n);\n    $valid_for_end = pow(9, $n);\n    return $total_count - $start_count\
    \ * $valid_for_start - $end_count * $valid_for_end;\n}\n", "  // Base case.\n\
    \  if ($n == 1) {\n    return 2;\n  }\n  // General case.\n  return floor(pow(10,\
    \ $n - 1) * 2);\n}\n", "  if ($n == 1) {\n    return 2;\n  } else if ($n == 2)\
    \ {\n    return 3;\n  } else {\n    return starts_one_ends($n - 1) + starts_one_ends($n\
    \ - 2);\n  }\n}\n\nvar_dump(starts_one_ends(1));\nvar_dump(starts_one_ends(2));\n\
    var_dump(starts_one_ends(3));\nvar_dump(starts_one_ends(4));\nvar_dump(starts_one_ends(5));\n\
    var_dump(starts_one_ends(6));\nvar_dump(starts_one_ends(7));\nvar_dump(starts_one_ends(8));\n\
    var_dump(starts_one_ends(9));\nvar_dump(starts_one_ends(10));\nvar_dump(starts_one_ends(100));",
  "    if ($n === 1) return 1;\n    return 10 * $n - 9;\n}\n\necho starts_one_ends(1)\
    \ . PHP_EOL;\necho starts_one_ends(2) . PHP_EOL;\necho starts_one_ends(3) . PHP_EOL;\n\
    echo starts_one_ends(4) . PHP_EOL;\necho starts_one_ends(5) . PHP_EOL;\necho starts_one_ends(6)\
    \ . PHP_EOL;\necho starts_one_ends(7) . PHP_EOL;\necho starts_one_ends(8) . PHP_EOL;\n\
    echo starts_one_ends(9) . PHP_EOL;\necho starts_one_ends(10) . PHP_EOL;", "  \
    \  if ($n <= 1) {\n        return $n;\n    }\n    $ret = $n;\n    $nines = 0;\n\
    \    while ($n > 1) {\n        $nines = $nines * 10 + 9;\n        $ret += $nines;\n\
    \        $n--;\n    }\n    return $ret;\n}\n\necho starts_one_ends(2) . PHP_EOL;\n\
    echo starts_one_ends(3) . PHP_EOL;\necho starts_one_ends(4) . PHP_EOL;\necho starts_one_ends(5)\
    \ . PHP_EOL;\necho starts_one_ends(6) . PHP_EOL;\necho starts_one_ends(7) . PHP_EOL;\n\
    echo starts_one_ends(8) . PHP_EOL;\necho starts_one_ends(9) . PHP_EOL;\necho starts_one_ends(10)\
    \ . PHP_EOL;", "    if ($n == 1) {\n        return 1;\n    }\n    $r = 10 - $n\
    \ + 1;\n    $p = 9;\n    while ($n > 2) {\n        $r *= $p;\n        $p--;\n\
    \        $n--;\n    }\n    return $r;\n}\n", "    if ($n <= 1) {\n        return\
    \ 1;\n    }\n    if ($n == 2) {\n        return 10;\n    }\n    $temp = starts_one_ends($n\
    \ - 1);\n    return (pow(10, $n - 1) - 1) * 2 + $temp;\n}\n", "    if ($n <= 0)\
    \ {\n        return 0;\n    }\n    if ($n == 1) {\n        return 1;\n    }\n\
    \    return 10 * (9 ** ($n - 1));\n}\n\n$n = 3;\necho starts_one_ends($n) . PHP_EOL;",
  "    if ($n === 1) {\n        return 2;\n    }\n    if ($n === 2) {\n        return\
    \ 3;\n    }\n    if ($n === 3) {\n        return 5;\n    }\n    if ($n > 3) {\n\
    \        return starts_one_ends($n - 1) + starts_one_ends($n - 2);\n    }\n}\n\
    echo starts_one_ends(4);", "    $prefix = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1];\n  \
    \  $suffix = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1];\n    $c = 10;\n    for ($i = 2; $i\
    \ <= $n; $i++) {\n        $prefix[$i] = $c;\n        $c = $c * 10 - 1;\n    }\n\
    \    return $c + $prefix[$n] - $suffix[$n];\n}\n", "    if ($n == 1) return 2;\n\
    \    $first = 1;\n    $last = 1;\n    for ($i = 1; $i < $n; $i++) {\n        $first\
    \ = $first * 10;\n        $last = $last * 10 + 1;\n    }\n    return $first +\
    \ $last;\n}\necho starts_one_ends(1) . PHP_EOL;\necho starts_one_ends(2) . PHP_EOL;\n\
    echo starts_one_ends(3) . PHP_EOL;\necho starts_one_ends(4) . PHP_EOL;\necho starts_one_ends(5)\
    \ . PHP_EOL;\necho starts_one_ends(6) . PHP_EOL;\necho starts_one_ends(7) . PHP_EOL;\n\
    echo starts_one_ends(8) . PHP_EOL;\necho starts_one_ends(9) . PHP_EOL;\necho starts_one_ends(10)\
    \ . PHP_EOL;\necho starts_one_ends(11) . PHP_EOL;\necho starts_one_ends(12) .\
    \ PHP_EOL;\necho starts_one_ends(13) . PHP_EOL;\necho starts_one_ends(14) . PHP_EOL;\n\
    echo starts_one_ends(15) . PHP_EOL;", "    $count = 0;\n    $start = 1;\n    $end\
    \ = 1;\n    while (strlen($start) < $n) {\n        $start = $start . \"0\";\n\
    \        $end = \"1\" . $end;\n        $count += 2;\n    }\n    return $count;\n\
    }\n", "  $count = 0;\n  if ($n == 1) {\n    return $count + 2;\n  }\n  $count\
    \ += pow(10, $n - 1);\n  $count += pow(10, $n - 2);\n  return $count;\n}\n\necho\
    \ starts_one_ends(1);\n", "    $matrix = [];\n    $matrix[0][0] = 0;\n    $matrix[0][1]\
    \ = 1;\n    $matrix[1][0] = 0;\n    $matrix[1][1] = 1;\n    for ($i = 2; $i <=\
    \ $n; $i++) {\n        $matrix[$i][0] = $matrix[$i - 1][0] + $matrix[$i - 1][1];\n\
    \        $matrix[$i][1] = $matrix[$i - 1][0];\n    }\n    return $matrix[$n][0]\
    \ + $matrix[$n][1];\n}\n\necho starts_one_ends(10) . PHP_EOL;", "    if ($n <=\
    \ 0) {\n        return 0;\n    }\n    $ends_in_one = 9;\n    $starts_in_one =\
    \ 10;\n    for ($i = 2; $i <= $n; $i++) {\n        $ends_in_one = $ends_in_one\
    \ * 9 + $starts_in_one;\n        $starts_in_one = $starts_in_one * 10;\n    }\n\
    \    return $ends_in_one + $starts_in_one;\n}\n\n$test_data = [\n    [5, 124],\n\
    \    [6, 342],\n    [7, 910],\n    [8, 2512],\n    [9, 6842],\n    [10, 18854],\n\
    \    [11, 52682],\n    [12, 145210],\n    [13, 400612],\n    [14, 1098642],\n\
    \    [15, 2986754],\n    [16, 8160822],\n    [17, 22102850],\n    [18, 60320362],\n\
    \    [19, 162760724],\n    [20, 438213642],\n    [21, 1182049154],\n    [22, 3210353082],\n\
    \    [23, 8644019050],\n    [24, 23403389162],\n    [25, 63562267524],\n    [26,\
    \ 171279280142],\n    [27, 463261843754],\n    [28, 1244788409482],\n    [29,\
    \ 3354865822450],\n    [30, 9038139470862],\n    [31, 24261115976024],\n    [32,\
    \ 65109478557042],\n    [33, 174260237721654],\n    [34, 467259824305282],\n \
    \   [35, 1252048261486450],\n    [36, 3344796656886862],\n    [37, 8978762262568324],\n\
    \    [38, 24016311589769042],\n    [39, 64242522654927434],\n    [40", "  if ($n\
    \ == 1) {\n    return 2;\n  }\n  return pow(2, $n - 1) * ($n - 1) + 2;\n}\necho\
    \ starts_one_ends(3) . PHP_EOL;", "  // We do this by considering the numbers\
    \ with and without leading zeros.\n  $cnt = 0;\n  // Numbers with leading zeros.\n\
    \  if ($n > 1) {\n    $cnt += pow(9, $n - 1);\n  }\n  // Numbers without leading\
    \ zeros.\n  $cnt += 9;\n  return $cnt;\n}\n\nvar_dump(starts_one_ends(1));\nvar_dump(starts_one_ends(2));\n\
    var_dump(starts_one_ends(3));\nvar_dump(starts_one_ends(4));\nvar_dump(starts_one_ends(5));",
  "  $a = pow(10, $n) - pow(10, $n - 1);\n  $b = pow(10, $n - 1) - 1;\n  return $a\
    \ + $b;\n}\n", "  if ($n == 1) return 2;\n  $start = 2;\n  $end = 1;\n  $next\
    \ = 0;\n  for ($i = 2; $i <= $n; $i++) {\n    $next = $start + $end;\n    $start\
    \ = $start + $end + ($end * 9);\n    $end = $next;\n  }\n  return $start + $end;\n\
    }\n\nfor ($i = 1; $i < 10; $i++) {\n  echo starts_one_ends($i), \"\\n\";\n}",
  "    if ($n == 1) {\n        return 2;\n    }\n    $total = 2;\n    $prefix_count\
    \ = 9;\n    $postfix_count = 10;\n    for ($i = 1; $i < $n; $i++) {\n        $total\
    \ += $prefix_count * $postfix_count;\n        $prefix_count *= 9;\n        $postfix_count\
    \ *= 10;\n    }\n    return $total;\n}\n\n$cases = [\n    [1, 2],\n    [2, 20],\n\
    \    [3, 300],\n    [4, 4000],\n    [5, 50000],\n    [6, 600000],\n    [7, 7000000],\n\
    \    [8, 80000000],\n    [9, 900000000],\n    [10, 100000000000],\n];\n\nforeach\
    \ ($cases as $case) {\n    $result = starts_one_ends($case[0]);\n    if ($result\
    \ !== $case[1]) {\n        echo \"FAIL: Input: $case[0]\\n\";\n        echo \"\
    Expected: $case[1]\\n\";\n        echo \"Actual: $result\\n\";\n    }\n}", " \
    \   if ($n == 1) {\n        return 1;\n    }\n    $end_with_1 = 10;\n    $start_with_1\
    \ = 9;\n    $others = 9;\n    for ($i = 2; $i < $n; $i++) {\n        $end_with_1\
    \ = ($end_with_1 + $others) * 2;\n        $start_with_1 = $start_with_1 * $others;\n\
    \        $others *= 10;\n    }\n    return $end_with_1 + $start_with_1;\n}\n\n\
    echo starts_one_ends(1) . PHP_EOL; // 1\necho starts_one_ends(2) . PHP_EOL; //\
    \ 19\necho starts_one_ends(3) . PHP_EOL; // 271\necho starts_one_ends(4) . PHP_EOL;\
    \ // 3439\necho starts_one_ends(5) . PHP_EOL; // 43759\necho starts_one_ends(6)\
    \ . PHP_EOL; // 547999", "  // We can use dynamic programming to build up the\
    \ solution.\n  // Let a(n) denote the number of n-digit positive integers that\
    \ start or end\n  // with 1. Then:\n  // a(n) = a(n-1) + a(n-2) + a(n-3) + ...\
    \ + a(1) + a(0)\n  // a(n-1) - a(n-2) - a(n-3) - ... - a(1) - a(0) = a(n) - a(n-1)\n\
    \  // a(n-1) = 2 * a(n-2)\n  // a(n-2) = 3 * a(n-3)\n  // a(n-3) = 4 * a(n-4)\n\
    \  // ...\n  // a(n) = (n+1) * a(n-1)\n  // a(n-1) = (n) * a(n-2)\n  // a(n-2)\
    \ = (n-1) * a(n-3)\n  // a(n-3) = (n-2) * a(n-4)\n  // ...\n  // Thus a(n) = n\
    \ * a(n-1).\n  // We can use recursion to calculate the solution with this formula.\n\
    \  // Note that a(0) = 1 and a(1) = 2.\n  if ($n < 2) {\n    return pow(2, $n);\n\
    \  }\n  return $n * starts_one_ends($n - 1);\n}\n", "  if ($n < 1) return 0;\n\
    \  if ($n === 1) return 1;\n  $total = 0;\n  for ($i = 1; $i < $n; $i++) {\n \
    \   $total += starts_one_ends($i) * 9 * pow(10, $n - $i - 1);\n  }\n  $total +=\
    \ pow(10, $n - 1);\n  return $total;\n}\n\necho starts_one_ends(1);\necho PHP_EOL;\n\
    echo starts_one_ends(2);\necho PHP_EOL;\necho starts_one_ends(3);\necho PHP_EOL;\n\
    echo starts_one_ends(4);\necho PHP_EOL;\necho starts_one_ends(5);\necho PHP_EOL;\n\
    echo starts_one_ends(6);\necho PHP_EOL;\necho starts_one_ends(7);\necho PHP_EOL;\n\
    echo starts_one_ends(8);\necho PHP_EOL;\necho starts_one_ends(9);\necho PHP_EOL;\n\
    echo starts_one_ends(10);\necho PHP_EOL;", "  $dp = array_fill(0, $n + 1, 0);\n\
    \  $dp[1] = 1;\n  for ($i = 2; $i <= $n; $i++) {\n    $dp[$i] = $dp[$i - 1] *\
    \ 9 + 10 ** ($i - 1);\n  }\n  return $dp[$n];\n}\n\necho starts_one_ends(3) .\
    \ \"\\n\";\n", "  $output = 0;\n  for ($i = 1; $i <= $n; $i++) {\n    $temp =\
    \ pow(10, $i) - pow(10, $i - 1);\n    $output += $temp;\n  }\n  return $output;\n\
    }\n\n$n = 4;\necho starts_one_ends($n);", "  if ($n <= 0) {\n    return 0;\n \
    \ }\n  if ($n == 1) {\n    return 2;\n  }\n  if ($n > 1) {\n    return starts_one_ends($n\
    \ - 1) + pow(10, $n - 1);\n  }\n}\n", "    if ($n == 1) {\n        return 2;\n\
    \    }\n    return (pow(10, $n) - pow(9, $n)) + starts_one_ends($n - 1);\n}",
  "    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $count += count_ending_one($i);\n\
    \    }\n    return $count;\n}\n", "    if ($n < 1) {\n        return 0;\n    }\n\
    \    if ($n == 1) {\n        return 2;\n    }\n    $res = 1;\n    for ($i = 0;\
    \ $i < $n - 1; $i++) {\n        $res *= 9;\n    }\n    return $res * 2;\n}\n\n\
    print_r(starts_one_ends(2));", "    $count = 0;\n    $begins = 0;\n    $ends =\
    \ 0;\n    $total = pow(10, $n);\n    if ($n === 1) {\n        return 2;\n    }\n\
    \    if ($n === 2) {\n        return 90;\n    }\n    for ($i = 1; $i < $n; $i++)\
    \ {\n        $begins += 9 * pow(10, $i - 1);\n        $ends += 9 * pow(10, $i\
    \ - 1);\n    }\n    return $begins + $ends + $total - pow(10, $n - 1);\n}\n\n\
    echo starts_one_ends(1) . \"\\n\";\necho starts_one_ends(2) . \"\\n\";\necho starts_one_ends(3)\
    \ . \"\\n\";\necho starts_one_ends(4) . \"\\n\";\necho starts_one_ends(5) . \"\
    \\n\";\necho starts_one_ends(6) . \"\\n\";\necho starts_one_ends(7) . \"\\n\"\
    ;\necho starts_one_ends(8) . \"\\n\";\necho starts_one_ends(9) . \"\\n\";\necho\
    \ starts_one_ends(10) . \"\\n\";\necho starts_one_ends(11) . \"\\n\";\necho starts_one_ends(12)\
    \ . \"\\n\";\necho starts_one_ends(13) . \"\\n\";\necho starts_one_ends(14) .\
    \ \"\\n\";\necho starts_one_ends(15) . \"\\n\";\necho starts_one_ends(16) . \"\
    \\n\";\necho starts_one_ends(17) . \"\\n\";\necho starts_one_ends(18) . \"\\n\"\
    ;\necho starts_one_ends(19) . \"\\n\";\necho starts_one_ends(20) . \"\\n\";\n\
    echo starts_one_ends(50) . \"\\n\";\necho starts_one_ends(100) . \"\\n\";\necho\
    \ starts_one_ends(500) . \"\\n\";\necho starts_one_ends(1000) . \"\\n\";\necho\
    \ starts_one_ends(5000) . \"\\n\";\necho starts_one_ends(10000) . \"\\n\";\n",
  "  // solve recursively\n  // Given n = 3,\n  // 100 -> start with 1 (1)\n  // 999\
    \ -> end with 1 (1)\n  // Total = 1 + 1 + 8 + 18 = 28\n  if ($n === 1) {\n   \
    \ return 1;\n  }\n  // number of zeros\n  $zeros = pow(10, $n - 1);\n  // number\
    \ of possible digits\n  $possible_digits = 9;\n  // number of numbers that start\
    \ with 1\n  $starts_with_one = $zeros;\n  // number of numbers that end with 1\n\
    \  $ends_with_one = $zeros;\n  // number of numbers that neither start nor end\
    \ with 1\n  $neither = $zeros * $possible_digits;\n  return $starts_with_one +\
    \ $ends_with_one +\n    $neither + starts_one_ends($n - 1);\n}\n", "    $count\
    \ = 0;\n    $start = (int) \"1\" . \"0\" * ($n - 1);\n    $end = (int) \"0\" *\
    \ ($n - 1) . \"1\";\n    while ($start <= $end) {\n        $count++;\n       \
    \ $start++;\n    }\n    return $count;\n}\necho starts_one_ends(5);", "    if\
    \ ($n == 1) return 2;\n    if ($n == 2) return 4;\n    $dp = array(1, 2, 4);\n\
    \    for ($i = 3; $i <= $n; $i++) {\n        $dp[$i] = $dp[$i - 1] + $dp[$i -\
    \ 2];\n    }\n    return $dp[$n];\n}\n\necho \"starts_one_ends(1): \" . starts_one_ends(1)\
    \ . \"\\n\";\necho \"starts_one_ends(2): \" . starts_one_ends(2) . \"\\n\";\n\
    echo \"starts_one_ends(3): \" . starts_one_ends(3) . \"\\n\";\necho \"starts_one_ends(4):\
    \ \" . starts_one_ends(4) . \"\\n\";\necho \"starts_one_ends(5): \" . starts_one_ends(5)\
    \ . \"\\n\";\necho \"starts_one_ends(6): \" . starts_one_ends(6) . \"\\n\";\n\
    echo \"starts_one_ends(7): \" . starts_one_ends(7) . \"\\n\";\necho \"starts_one_ends(8):\
    \ \" . starts_one_ends(8) . \"\\n\";\necho \"starts_one_ends(9): \" . starts_one_ends(9)\
    \ . \"\\n\";\necho \"starts_one_ends(10): \" . starts_one_ends(10) . \"\\n\";\n\
    echo \"starts_one_ends(11): \" . starts_one_ends(11) . \"\\n\";\necho \"starts_one_ends(12):\
    \ \" . starts_one_ends(12) . \"\\n\";\necho \"starts_one_ends(13): \" . starts_one_ends(13)\
    \ . \"\\n\";\necho \"starts_one_ends(14): \" . starts_one_ends(14) . \"\\n\";\n\
    echo \"starts_one_ends(15): \" . starts_one_ends(15) . \"\\n\";\necho \"starts_one_ends(16):\
    \ \" . starts_one_ends(16) . \"\\n\";\necho", "  $total = 0;\n  for ($i = 1; $i\
    \ <= $n; $i++) {\n    $total += pow(10, $i-1);\n  }\n  return $total;\n}\n\nvar_dump(starts_one_ends(3));",
  "  // Write your code here.\n  $ending_ones = calculate($n-1);\n  $starting_ones\
    \ = calculate($n-1);\n  return $ending_ones + $starting_ones;\n}\n", "  $n = $n\
    \ - 1;\n  if ($n == 0) {\n    return 10;\n  }\n  if ($n == 1) {\n    return 72;\n\
    \  }\n  if ($n == 2) {\n    return 720;\n  }\n  return starts_one_ends($n - 1)\
    \ + 9 * starts_one_ends($n - 2);\n}\n$res = starts_one_ends(3);\nprint_r($res);",
  "  $ends_in_one = $n - 1;\n  $start_in_one = $n - 1;\n  return $ends_in_one + $start_in_one\
    \ + $ends_in_one * $start_in_one;\n}\n\necho starts_one_ends(2) . PHP_EOL; //\
    \ 10\necho starts_one_ends(3) . PHP_EOL; // 100\necho starts_one_ends(4) . PHP_EOL;\
    \ // 1000\necho starts_one_ends(5) . PHP_EOL; // 10000\necho starts_one_ends(6)\
    \ . PHP_EOL; // 100000\n", "    if ($n == 1) {\n        return 2;\n    }\n   \
    \ return 10 * starts_one_ends($n - 1) - 9;\n}\n\necho starts_one_ends(1);", " \
    \   if ($n < 1) return 0;\n    if ($n === 1) return 1;\n    $start_one = 9 * pow(10,\
    \ $n - 2);\n    $ends_one = $start_one;\n    return $start_one + $ends_one;\n\
    }\necho starts_one_ends(3) . \"\\n\";\n", "    $start = [1 => 1, 2 => 11, 3 =>\
    \ 111, 4 => 1111, 5 => 11111, 6 => 111111, 7 => 1111111, 8 => 11111111, 9 => 111111111];\n\
    \    $end = [1 => 1, 2 => 9, 3 => 99, 4 => 999, 5 => 9999, 6 => 99999, 7 => 999999,\
    \ 8 => 9999999, 9 => 99999999];\n    return $start[$n] + $end[$n];\n}\n\nprint_r(starts_one_ends(3));",
  "  if ($n < 1) {\n    return 0;\n  }\n\n  $first = pow(10, $n - 1);\n  $last = pow(10,\
    \ $n) - 1;\n\n  $starts_with_one = $last - $first + 1;\n  $ends_with_one = strlen($last)\
    \ - 1;\n\n  return $starts_with_one + $ends_with_one;\n}\n\necho starts_one_ends(1)\
    \ . \"\\n\"; // 2\necho starts_one_ends(2) . \"\\n\"; // 12\necho starts_one_ends(3)\
    \ . \"\\n\"; // 61\necho starts_one_ends(4) . \"\\n\"; // 321\necho starts_one_ends(5)\
    \ . \"\\n\"; // 1651\necho starts_one_ends(6) . \"\\n\"; // 8451\necho starts_one_ends(7)\
    \ . \"\\n\"; // 43851\necho starts_one_ends(8) . \"\\n\"; // 232751\necho starts_one_ends(9)\
    \ . \"\\n\"; // 1218751\necho starts_one_ends(10) . \"\\n\"; // 6311851", "  $start_one\
    \ = $end_one = $both_one = 0;\n  $total = pow(10, $n);\n  for ($i = 1; $i < $total;\
    \ $i++) {\n    $t = $i;\n    $ends_one = false;\n    $starts_one = false;\n  \
    \  $t = $i;\n    while ($t > 0) {\n      if ($t % 10 == 1) {\n        $ends_one\
    \ = true;\n      }\n      $t = intval($t / 10);\n    }\n    if ($ends_one) {\n\
    \      $end_one++;\n    }\n    $t = $i;\n    while ($t > 0) {\n      if ($t %\
    \ 10 == 1) {\n        $starts_one = true;\n      }\n      $t = intval($t / 10);\n\
    \    }\n    if ($starts_one) {\n      $start_one++;\n    }\n    if ($starts_one\
    \ && $ends_one) {\n      $both_one++;\n    }\n  }\n  $ends_one = $total - $end_one;\n\
    \  return [$start_one, $ends_one, $both_one];\n}\n\n$n = $argv[1];\n$ret = starts_one_ends($n);\n\
    foreach ($ret as $r) {\n  echo \"$r\\n\";\n}", "  if ($n == 1) return 2;\n  if\
    \ ($n == 2) return 4;\n  $start_one = 2;\n  $end_one = 4;\n  $digits = $n - 2;\n\
    \  while ($digits > 0) {\n    $start_one = $start_one * 5;\n    $end_one = $end_one\
    \ * 5;\n    $digits--;\n  }\n  return $start_one + $end_one;\n}\n", "  if ($n\
    \ <= 0) {\n    return 0;\n  }\n  if ($n == 1) {\n    return 1;\n  }\n  if ($n\
    \ == 2) {\n    return 11;\n  }\n  $start_digit = 11;\n  $count = $start_digit;\n\
    \  for ($i = 3; $i <= $n; $i++) {\n    $start_digit = $start_digit * 9;\n    $count\
    \ += $start_digit;\n  }\n  return $count;\n}\n\n$test_cases = [\n  0 => 0,\n \
    \ 1 => 1,\n  2 => 11,\n  3 => 111,\n  4 => 1111,\n  5 => 11111,\n  6 => 111111,\n\
    \  7 => 1111111,\n  8 => 11111111,\n  9 => 111111111,\n  10 => 1111111111,\n \
    \ 11 => 11111111111,\n  12 => 111111111111,\n  13 => 1111111111111,\n  14 => 11111111111111,\n\
    \  15 => 111111111111111,\n  16 => 1111111111111111,\n  17 => 11111111111111111,\n\
    \  18 => 111111111111111111,\n  19 => 1111111111111111111,\n  20 => 11111111111111111111,\n\
    ];\n\nforeach ($test_cases as $input => $expected) {\n  $result = starts_one_ends($input);\n\
    \  if ($result !== $expected) {\n    echo \"FAIL: $input, $result, $expected\\\
    n\";\n  }\n}", "  $result = 0;\n  $digits = str_split($n);\n  $digits_len = count($digits);\n\
    \  $first_digit = reset($digits);\n  $last_digit = end($digits);\n  $low_index\
    \ = null;\n  $high_index = null;\n  if ($first_digit === '1') {\n    $low_index\
    \ = key($digits);\n  }\n  if ($last_digit === '1') {\n    $high_index = $digits_len\
    \ - 1;\n  }\n  if ($low_index !== null) {\n    $result += ($digits_len - $low_index)\
    \ * (pow(2, $digits_len - $low_index - 1) - 1);\n  }\n  if ($high_index !== null)\
    \ {\n    $result += ($high_index + 1) * (pow(2, $high_index) - 1);\n  }\n  if\
    \ ($low_index !== null && $high_index !== null) {\n    $result -= 1;\n  }\n  return\
    \ $result;\n}\n", "  if ($n == 1) {\n    return 2;\n  }\n  $count = 0;\n  $num\
    \ = 1;\n  while ($n--) {\n    $num *= 10;\n    $count += $num;\n  }\n  return\
    \ $count * 2;\n}\n\necho starts_one_ends(1) . PHP_EOL;\necho starts_one_ends(2)\
    \ . PHP_EOL;\necho starts_one_ends(3) . PHP_EOL;\necho starts_one_ends(4) . PHP_EOL;\n\
    echo starts_one_ends(5) . PHP_EOL;", "    if ($n == 1) return 2;\n    if ($n ==\
    \ 2) return 4;\n    return starts_one_ends($n - 1) + starts_one_ends($n - 2);\n\
    }\n", "    if ($n <= 1) {\n        return $n;\n    }\n\n    $d = array_fill(0,\
    \ $n + 1, 0);\n    $d[0] = 0;\n    $d[1] = 1;\n    $d[2] = 1;\n\n    for ($i =\
    \ 3; $i <= $n; $i++) {\n        $d[$i] = $d[$i - 1] + $d[$i - 2];\n    }\n\n \
    \   return $d[$n];\n}\n\nforeach ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10] as $n) {\n \
    \   echo starts_one_ends($n) . PHP_EOL;\n}", "  if ($n <= 0) return 0;\n  if ($n\
    \ == 1) return 1;\n  $sum = 1;\n  $prod = 1;\n  for ($i = 1; $i < $n; $i++) {\n\
    \    $prod *= 10;\n    $sum += $prod;\n  }\n  return $sum;\n}\nfor ($i = 0; $i\
    \ < 10; $i++) {\n  echo \"$i: \" . starts_one_ends($i) . \"\\n\";\n}", "  $result\
    \ = 0;\n  if ($n == 1) {\n    $result = 2;\n  } else if ($n == 2) {\n    $result\
    \ = 4;\n  } else {\n    $result = starts_one_ends($n - 1) + starts_one_ends($n\
    \ - 2);\n  }\n  return $result;\n}\n", "    $arr = [];\n    $arr[0] = 9;\n   \
    \ for ($i = 1; $i < $n; $i++) {\n        $arr[$i] = $arr[$i - 1] * 10 - pow(10,\
    \ $i - 1);\n    }\n    return $arr[$n - 1];\n}\n\n$input = readline();\necho starts_one_ends($input);",
  "  $limit = pow(10, $n) - 1;\n  $start_count = 0;\n  $end_count = 0;\n  for ($i\
    \ = pow(10, $n - 1); $i <= $limit; $i++) {\n    if (strpos((string)$i, '1') ===\
    \ 0) {\n      $start_count++;\n    }\n    if (strpos((string)$i, '1') === strlen((string)$i)\
    \ - 1) {\n      $end_count++;\n    }\n  }\n  return array(\n    'start' => $start_count,\n\
    \    'end' => $end_count,\n  );\n}\n", "  $memo = [ 0=>1, 1=>1, 2=>11, 3=>111,\
    \ 4=>1111 ];\n  if (array_key_exists($n, $memo)) {\n    return $memo[$n];\n  }\n\
    \n  // Consider the leftmost digit and the rightmost digit.\n  // If neither is\
    \ 1, then the number is of the form abcd... where\n  // a, b, c, d are not 1.\
    \ Therefore, the number of possible values is\n  // 9*(a, b, c, d, ...) = 9*(count\
    \ of all n-2 digit numbers).\n  // If only the leftmost digit is 1, then the number\
    \ is of the form\n  // 1bcd..., where b, c, d are not 1. Therefore, the number\
    \ of possible\n  // values is 9*(b, c, d, ...) = 9*(count of all n-2 digit numbers).\n\
    \  // If only the rightmost digit is 1, then the number is of the form\n  // abcd...1,\
    \ where a, b, c, d are not 1. Therefore, the number of\n  // possible values is\
    \ 9*(a, b, c, d, ...) = 9*(count of all n-2 digit\n  // numbers).\n  // If both\
    \ are 1, then the number is of the form 1bcd...1, where b, c,\n  // d are not\
    \ 1. Therefore, the number of possible values is\n  // 9*(b, c, d, ...) = 9*(count\
    \ of all n-2 digit numbers).\n  // Finally, we add all of these together.\n  return\
    \ 9*starts_one_ends($n-2) + starts_one_ends($n-1);\n}\n\n$n = 5;\necho starts_one_ends($n)\
    \ . \"\\n\";", "  if ($n < 1) {\n    return 0;\n  }\n  if ($n == 1) {\n    return\
    \ 2;\n  }\n  if ($n == 2) {\n    return 3;\n  }\n  $cnt = 3;\n  for ($i = 3; $i\
    \ <= $n; $i++) {\n    $cnt = $cnt * 2 + 1;\n  }\n  return $cnt;\n}\n\necho starts_one_ends(4)\
    \ . PHP_EOL;\necho starts_one_ends(3) . PHP_EOL;\necho starts_one_ends(2) . PHP_EOL;\n\
    echo starts_one_ends(1) . PHP_EOL;\necho starts_one_ends(0) . PHP_EOL;", "  $regex\
    \ = \"/^1[0-9]*1$/\";\n  $fh = fopen('php://stdin', 'r');\n  $count = 0;\n  for\
    \ ($i = 0; $i < $n; $i++) {\n    $line = fgets($fh);\n    if (preg_match($regex,\
    \ $line)) {\n      $count++;\n    }\n  }\n  return $count;\n}\n\nvar_dump(starts_one_ends(5));\n",
  "  $results = [];\n  for ($i = 0; $i < $n; $i++) {\n    $results[] = [];\n    for\
    \ ($j = 0; $j < 10; $j++) {\n      $results[$i][$j] = 0;\n    }\n  }\n  $results[0][1]\
    \ = 1;\n  $results[0][0] = 0;\n  for ($i = 1; $i < $n; $i++) {\n    for ($j =\
    \ 0; $j < 10; $j++) {\n      if ($j == 0) {\n        $results[$i][$j] = $results[$i\
    \ - 1][1];\n      } else if ($j == 1) {\n        $results[$i][$j] = $results[$i\
    \ - 1][0] + $results[$i - 1][1];\n      } else {\n        $results[$i][$j] = $results[$i\
    \ - 1][0] + $results[$i - 1][1] + $results[$i - 1][$j];\n      }\n    }\n  }\n\
    \  return $results[$n - 1][0] + $results[$n - 1][1];\n}\n\nfor ($i = 1; $i < 10;\
    \ $i++) {\n  echo starts_one_ends($i) . PHP_EOL;\n}", "  if ($n == 1) {\n    return\
    \ 10;\n  }\n  if ($n == 2) {\n    return 55;\n  }\n  $n -= 2;\n  $result = starts_one_ends($n)\
    \ * pow(10, $n);\n  return $result + 55 * pow(10, $n-1);\n}\n\nvar_dump(starts_one_ends(2));\n\
    var_dump(starts_one_ends(4));\nvar_dump(starts_one_ends(7));", "    if ($n ==\
    \ 1) {\n        return 10;\n    }\n    $first = pow(10, $n - 1);\n    $last =\
    \ pow(10, $n) - 1;\n    $cnt = $last - $first + 1;\n    $cnt -= 1;\n    return\
    \ $cnt;\n}\n\nforeach (range(1, 10) as $x) {\n    echo starts_one_ends($x) . \"\
    \\n\";\n}", "  if ($n == 1) return 2;\n  return 10 * ((10 ** ($n - 1)) - (10 **\
    \ ($n - 2)));\n}\n", "  if ($n == 1) {\n    return 2;\n  }\n  if ($n == 2) {\n\
    \    return 4;\n  }\n  return starts_one_ends($n - 1) + starts_one_ends($n - 2);\n\
    }\n\necho starts_one_ends(1) . PHP_EOL;\necho starts_one_ends(2) . PHP_EOL;\n\
    echo starts_one_ends(3) . PHP_EOL;\necho starts_one_ends(4) . PHP_EOL;\necho starts_one_ends(5)\
    \ . PHP_EOL;\necho starts_one_ends(6) . PHP_EOL;\necho starts_one_ends(7) . PHP_EOL;\n\
    echo starts_one_ends(8) . PHP_EOL;\necho starts_one_ends(9) . PHP_EOL;\necho starts_one_ends(10)\
    \ . PHP_EOL;\necho starts_one_ends(11) . PHP_EOL;\necho starts_one_ends(12) .\
    \ PHP_EOL;\necho starts_one_ends(13) . PHP_EOL;\necho starts_one_ends(14) . PHP_EOL;\n\
    echo starts_one_ends(15) . PHP_EOL;\necho starts_one_ends(16) . PHP_EOL;\necho\
    \ starts_one_ends(17) . PHP_EOL;\necho starts_one_ends(18) . PHP_EOL;\necho starts_one_ends(19)\
    \ . PHP_EOL;\necho starts_one_ends(20) . PHP_EOL;\necho starts_one_ends(21) .\
    \ PHP_EOL;\necho starts_one_ends(22) . PHP_EOL;\necho starts_one_ends(23) . PHP_EOL;\n\
    echo starts_one_ends(24) . PHP_EOL;\necho starts_one_ends(25) . PHP_EOL;\necho\
    \ starts_one_ends(26) . PHP_EOL;\necho starts_one_ends(27) . PHP_EOL;\necho starts_one_ends(28)\
    \ . PHP_EOL;\necho starts", "    if ($n == 1) {\n        return 2;\n    } else\
    \ {\n        return starts_one_ends($n - 1) + starts_one_ends($n - 2);\n    }\n\
    }\necho starts_one_ends(4);", "  if ($n == 1) {\n    return 2;\n  }\n  if ($n\
    \ == 2) {\n    return 4;\n  }\n  $f[1] = 2;\n  $f[2] = 4;\n  for ($i = 3; $i <=\
    \ $n; $i++) {\n    $f[$i] = $f[$i - 1] + $f[$i - 2];\n  }\n  return $f[$n];\n\
    }\n", "    if ($n === 1) return 1;\n    return (9 * pow(10, $n - 1) - pow(10,\
    \ $n - 1) + 1);\n}\n\nvar_dump(starts_one_ends(1));\nvar_dump(starts_one_ends(2));\n\
    var_dump(starts_one_ends(3));\nvar_dump(starts_one_ends(4));\nvar_dump(starts_one_ends(5));\n\
    \n/**\n  * n-digit Numbers start or end with 1\n  * if number starts with 1, remaining\
    \ 9 digits can be used in any order.\n  * Number of ways to fill up remaining\
    \ nine digits = 9^(n-1)\n  * if number ends with 1, it can be 1, 11, 21, 31, 41,\
    \ 51, 61, 71, 81, 91.\n  * Number of ways to fill up the remaining nine digits\
    \ = 10 * 9^(n-2)\n  * Total numbers of way to fill up n-digit numbers starting\
    \ or ending with 1 = 9 * 9^(n-1) + 10 * 9^(n-2)\n  *\n  * There is a special case\
    \ when n=1, because this equation doesnt hold for n=1.\n  * In that case number\
    \ of ways to fill up one digit number starting or ending with 1 = 1\n  */", " \
    \ $oneEnds = 0;\n  $oneStarts = 0;\n  for ($i = pow(10, $n - 1); $i < pow(10,\
    \ $n); $i++) {\n    if ($i % 10 == 1) {\n      $oneEnds++;\n    }\n    if ($i\
    \ == pow(10, $n - 1) + 1) {\n      $oneStarts++;\n    }\n  }\n  return $oneEnds\
    \ + $oneStarts;\n}\n\n$n = 5;\n$result = starts_one_ends($n);\nprint_r($result);",
  "    if ($n == 1) {\n        return 2;\n    }\n    $firstDigit = 1;\n    $lastDigit\
    \ = 1;\n    for ($i = 2; $i <= $n; $i++) {\n        $tmp = $firstDigit;\n    \
    \    $firstDigit = $firstDigit + $lastDigit;\n        $lastDigit = $tmp * 10;\n\
    \    }\n    return $firstDigit + $lastDigit;\n}\n\nvar_dump(starts_one_ends(1));",
  "  $start = pow(10, $n - 1);\n  $end = pow(10, $n);\n  $end_minus_one = $end - 1;\n\
    \  $total = 0;\n  $count = 0;\n  while ($total < $end_minus_one) {\n    $count++;\n\
    \    $total += $start;\n  }\n  return $count;\n}\n", "    $tab_taille_n = [];\n\
    \    $tab_taille_n[1] = 2;\n    for ($i = 2; $i <= $n; $i++) {\n        $tab_taille_n[$i]\
    \ = $tab_taille_n[$i - 1] + $tab_taille_n[$i - 2];\n    }\n    return $tab_taille_n[$n];\n\
    }\n$n = 5;\necho starts_one_ends($n);", "    $numbers = 1;\n    for ($i = 0; $i\
    \ < $n; $i++) {\n        $numbers *= 10;\n    }\n    $numbers = $numbers - 1;\n\
    \    $result = 9;\n    for ($i = 2; $i <= $n; $i++) {\n        $result = $result\
    \ * (10 - $i + 1) + $numbers;\n    }\n    return $result;\n}", "    if ($n ==\
    \ 1) return 2;\n    if ($n == 2) return 3;\n    $result = 5;\n    for ($i = 3;\
    \ $i <= $n; $i++) {\n        $result += 4 * $result;\n    }\n    return $result;\n\
    }\n\n$handle = fopen (\"php://stdin\",\"r\");\nfscanf($handle,\"%d\",$t);\nfor($a0\
    \ = 0; $a0 < $t; $a0++){\n    fscanf($handle,\"%d\",$n);\n    $result = starts_one_ends($n);\n\
    \    echo $result . \"\\n\";\n}\n", "    $cnt = 0;\n    for ($i = 1; $i <= $n;\
    \ $i++) {\n        $tmp = pow(10, $i) - pow(10, $i - 1);\n        $cnt += $tmp;\n\
    \    }\n    return $cnt;\n}\n\n$n = 5;\necho starts_one_ends($n) . PHP_EOL;",
  "    // there are 10^(n-1) n-digit numbers, but we only want the ones\n    // starting\
    \ or ending with 1.\n    // there are 9*10^(n-2) numbers that start with 1\n \
    \   // there are 10^(n-1) numbers that end with 1\n    // Of course, we can't\
    \ forget the 9 double-counted numbers, 100...000 to 100...0099\n    return 9*pow(10,\
    \ $n-2) + pow(10, $n-1) - 9;\n}", "    // $starting = 0;\n    // $ending = 0;\n\
    \    $total = 0;\n    $min = pow(10, $n - 1);\n    $max = pow(10, $n) - 1;\n \
    \   for ($i = $min; $i <= $max; $i++) {\n        if (strpos($i, \"1\") == 0 ||\
    \ substr($i, -1) == \"1\") {\n            $total++;\n        }\n    }\n    return\
    \ $total;\n}", "    if($n <= 0) {\n        return 0;\n    }\n    if($n === 1)\
    \ {\n        return 2;\n    }\n    $counts = array_fill(0, $n, 0);\n    $counts[0]\
    \ = 2;\n    $counts[1] = 3;\n    for($i = 2; $i < $n; $i++) {\n        $counts[$i]\
    \ = $counts[$i - 1] + $counts[$i - 2];\n    }\n    return $counts[$n - 1];\n}\n\
    \necho starts_one_ends(0) . PHP_EOL;\necho starts_one_ends(1) . PHP_EOL;\necho\
    \ starts_one_ends(2) . PHP_EOL;\necho starts_one_ends(3) . PHP_EOL;\necho starts_one_ends(4)\
    \ . PHP_EOL;\necho starts_one_ends(5) . PHP_EOL;\necho starts_one_ends(6) . PHP_EOL;",
  "  $count = 1;\n  for ($i = 1; $i < $n; $i++) {\n    $count *= 9;\n  }\n  return\
    \ $count;\n}\n\necho starts_one_ends(2) . \"\\n\";\necho starts_one_ends(3) .\
    \ \"\\n\";\necho starts_one_ends(4) . \"\\n\";\necho starts_one_ends(5) . \"\\\
    n\";", "    $starts_ends = (int) ($n * 0.5);\n    $ends_starts = $starts_ends;\n\
    \    if ($n % 2 == 1) {\n        $ends_starts++;\n    }\n    return $starts_ends\
    \ + $ends_starts;\n}", "  $count = 0;\n  for ($i = 1; $i <= $n; $i++) {\n    if\
    \ ($i == 1) {\n      $count++;\n    } else if ($i < 10) {\n      $count += 9;\n\
    \    } else {\n      $count += $i * 9;\n    }\n  }\n  return $count;\n}\n", " \
    \ $cnt = 0;\n  for ($i = 1; $i <= 9; $i++) {\n    if ($i == 1) {\n      $cnt +=\
    \ count_all($n - 1, true);\n    } else {\n      $cnt += count_all($n - 1, false);\n\
    \    }\n  }\n  return $cnt;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
