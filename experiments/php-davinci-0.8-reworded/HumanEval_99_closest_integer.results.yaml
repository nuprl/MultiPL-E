language: php
name: HumanEval_99_closest_integer
results:
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value_parts\
    \ = explode('.', $value);\n    if (count($value_parts) === 1) {\n        return\
    \ intval($value);\n    } else {\n        $decimal = intval($value_parts[1][0]);\n\
    \        if ($decimal >= 5) {\n            return intval($value_parts[0]) + 1;\n\
    \        } else {\n            return intval($value_parts[0]);\n        }\n  \
    \  }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprp55l0mj.php:36\n\
    Stack trace:\n#0 /tmp/tmprp55l0mj.php(41): test()\n#1 {main}\n  thrown in /tmp/tmprp55l0mj.php\
    \ on line 36\n"
  timestamp: 1659824629
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $val = (int)\
    \ $value;\n    if ($value - $val >= 0.5) {\n        return $val + 1;\n    } else\
    \ {\n        return $val;\n    }\n}\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpumyl3pc7.php:30\n\
    Stack trace:\n#0 /tmp/tmpumyl3pc7.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpumyl3pc7.php\
    \ on line 30\n"
  timestamp: 1659824629
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n\t$number = explode(\"\
    .\", $value);\n\tif (strpos($value, \".\") !== false) {\n\t\tif ($number[1] >=\
    \ 5) {\n\t\t\treturn ++$number[0];\n\t\t} else {\n\t\t\treturn $number[0];\n\t\
    \t}\n\t} else {\n\t\treturn $number[0];\n\t}\n}\n\necho closest_integer(\"10\"\
    ) . \"<br />\";\necho closest_integer(\"15.3\") . \"<br />\";\necho closest_integer(\"\
    -14.5\") . \"<br />\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10<br />15<br />-13<br />\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp2d_s9o1x.php:36\nStack trace:\n#0 /tmp/tmp2d_s9o1x.php(43): test()\n\
    #1 {main}\n  thrown in /tmp/tmp2d_s9o1x.php on line 36\n"
  timestamp: 1659824629
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $integer =\
    \ floor($value);\n  $decimal = $value - $integer;\n  if ($decimal > 0.5) {\n \
    \   return $integer + 1;\n  } elseif ($decimal < 0.5) {\n    return $integer;\n\
    \  } else {\n    return $integer;\n  }\n}\nfunction candidate(...$args) {\n  \
    \  return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg56uhhhp.php:31\n\
    Stack trace:\n#0 /tmp/tmpg56uhhhp.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpg56uhhhp.php\
    \ on line 31\n"
  timestamp: 1659824629
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value);\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphahuve_r.php:24\n\
    Stack trace:\n#0 /tmp/tmphahuve_r.php(31): test()\n#1 {main}\n  thrown in /tmp/tmphahuve_r.php\
    \ on line 24\n"
  timestamp: 1659824629
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    return ceil($value\
    \ - 0.5);\n}\n\n$output = closest_integer(\"10\");\necho $output;\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv49fihyd.php:26\n\
    Stack trace:\n#0 /tmp/tmpv49fihyd.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpv49fihyd.php\
    \ on line 26\n"
  timestamp: 1659824629
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return 0;\n\
    }\n\necho closest_integer(\"10\");\necho \"\\n\";\necho closest_integer(\"15.3\"\
    );\necho \"\\n\";\necho closest_integer(\"14.5\");\necho \"\\n\";\necho closest_integer(\"\
    -14.5\");\necho \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "0\n0\n0\n0\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgk67ifd_.php:32\n\
    Stack trace:\n#0 /tmp/tmpgk67ifd_.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpgk67ifd_.php\
    \ on line 32\n"
  timestamp: 1659824629
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  //enter code\
    \ here\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplunx1oln.php:24\n\
    Stack trace:\n#0 /tmp/tmplunx1oln.php(31): test()\n#1 {main}\n  thrown in /tmp/tmplunx1oln.php\
    \ on line 24\n"
  timestamp: 1659824629
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n\t$floored =\
    \ floor($value);\n\t$ceiled = ceil($value);\n\tif (abs($value - $floored) > abs($value\
    \ - $ceiled)) {\n\t\treturn $ceiled;\n\t} elseif (abs($value - $floored) < abs($value\
    \ - $ceiled)) {\n\t\treturn $floored;\n\t} else {\n\t\tif ($value > 0) {\n\t\t\
    \treturn $ceiled;\n\t\t} else {\n\t\t\treturn $floored;\n\t\t}\n\t}\n}\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0tbyv3jt.php:35\n\
    Stack trace:\n#0 /tmp/tmp0tbyv3jt.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp0tbyv3jt.php\
    \ on line 35\n"
  timestamp: 1659824629
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value_arr\
    \ = explode('.', $value);\n    if(count($value_arr) > 1) {\n        if($value_arr[1]\
    \ > 0) {\n            return $value_arr[0] + 1;\n        }\n    }\n    return\
    \ $value_arr[0];\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptxwo_f7a.php:30\n\
    Stack trace:\n#0 /tmp/tmptxwo_f7a.php(37): test()\n#1 {main}\n  thrown in /tmp/tmptxwo_f7a.php\
    \ on line 30\n"
  timestamp: 1659824629
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value);\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphahuve_r.php:24\n\
    Stack trace:\n#0 /tmp/tmphahuve_r.php(31): test()\n#1 {main}\n  thrown in /tmp/tmphahuve_r.php\
    \ on line 24\n"
  timestamp: 1659824629
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    return round($value);\n\
    }\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpflqxpvyy.php:23\n\
    Stack trace:\n#0 /tmp/tmpflqxpvyy.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpflqxpvyy.php\
    \ on line 23\n"
  timestamp: 1659824629
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n\t$int = (int)\
    \ $value;\n\t$float = (float) $value;\n\tif ($float > $int) {\n\t\treturn $int\
    \ + 1;\n\t} else {\n\t\treturn $int;\n\t}\n}\nprint closest_integer(\"10\") .\
    \ \"\\n\";\nprint closest_integer(\"15.3\") . \"\\n\";\nprint closest_integer(\"\
    14.5\") . \"\\n\";\nprint closest_integer(\"-14.5\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n16\n15\n-14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxe7r4znz.php:35\n\
    Stack trace:\n#0 /tmp/tmpxe7r4znz.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpxe7r4znz.php\
    \ on line 35\n"
  timestamp: 1659824629
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    return is_numeric($value)\
    \ ? ($value - floor($value) > .5 ? ceil($value) : floor($value)) : false;\n}\n\
    function candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd3pnsfjl.php:23\n\
    Stack trace:\n#0 /tmp/tmpd3pnsfjl.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpd3pnsfjl.php\
    \ on line 23\n"
  timestamp: 1659824629
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $dec = strpos($value,\
    \ '.');\n    $part1 = substr($value, 0, $dec);\n    $part2 = substr($value, $dec+1,\
    \ 1);\n    if ($part2 >= 5) {\n        $part1++;\n    }\n    return (int)$part1;\n\
    }\n$value = \"15.3\";\necho $value . \" => \" . closest_integer($value) . \"\\\
    n\";\n$value = \"10\";\necho $value . \" => \" . closest_integer($value) . \"\\\
    n\";\n$value = \"14.5\";\necho $value . \" => \" . closest_integer($value) . \"\
    \\n\";\n$value = \"-14.5\";\necho $value . \" => \" . closest_integer($value)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15.3 => 15\n10 => 0\n14.5 => 15\n-14.5 => -13\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpa8sfvimw.php:37\nStack trace:\n#0 /tmp/tmpa8sfvimw.php(44):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpa8sfvimw.php on line 37\n"
  timestamp: 1659824629
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n\t$value = round($value);\n\
    \treturn $value;\n}\necho closest_integer(\"10\") . PHP_EOL;\necho closest_integer(\"\
    15.3\") . PHP_EOL;\necho closest_integer(\"-15.3\") . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmhavx0b_.php:27\n\
    Stack trace:\n#0 /tmp/tmpmhavx0b_.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpmhavx0b_.php\
    \ on line 27\n"
  timestamp: 1659824629
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $string =\
    \ (string)$value;\n    $arr = explode('.', $string);\n    if(sizeof($arr) == 1)\
    \ {\n        return $value;\n    }\n    $integer_part = $arr[0];\n    $decimal_part\
    \ = (int)$arr[1];\n    if ($decimal_part > 5) {\n        $integer_part = (int)$integer_part\
    \ + 1;\n    }\n    return $integer_part;\n}\n\nfunction candidate(...$args) {\n\
    \    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_szdgjjw.php:34\n\
    Stack trace:\n#0 /tmp/tmp_szdgjjw.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp_szdgjjw.php\
    \ on line 34\n"
  timestamp: 1659824629
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    return $value\
    \ >= 0 ? (int)ceil($value) : (int)floor($value);\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9z1rf3st.php:26\n\
    Stack trace:\n#0 /tmp/tmp9z1rf3st.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp9z1rf3st.php\
    \ on line 26\n"
  timestamp: 1659824629
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value);\n\
    }\necho closest_integer(\"10\").\"\\n\";\necho closest_integer(\"15.3\").\"\\\
    n\";\necho closest_integer(\"14.5\").\"\\n\";\necho closest_integer(\"-14.5\"\
    ).\"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphs95l59x.php:27\n\
    Stack trace:\n#0 /tmp/tmphs95l59x.php(34): test()\n#1 {main}\n  thrown in /tmp/tmphs95l59x.php\
    \ on line 27\n"
  timestamp: 1659824629
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    // Write\
    \ your code here\n    // To print results to the standard output you can use print\n\
    \    // Example:\n    // print \"Hello world!\";\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu6nht7xo.php:26\n\
    Stack trace:\n#0 /tmp/tmpu6nht7xo.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpu6nht7xo.php\
    \ on line 26\n"
  timestamp: 1659824629
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    // Write\
    \ your code here\n    // To print results to the standard output you can use print\n\
    \    // Example:\n    // print \"Hello world!\";\n    return round($value);\n\
    }\n\necho closest_integer(\"15.3\");\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4f_82g00.php:29\n\
    Stack trace:\n#0 /tmp/tmp4f_82g00.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp4f_82g00.php\
    \ on line 29\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = explode(\"\
    .\", $value);\n  return (int)$value[0];\n}\necho closest_integer(\"10\") . \"\\\
    n\";\necho closest_integer(\"15.3\") . \"\\n\";\necho closest_integer(\"-14.5\"\
    ) . \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n-14\n14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg8p9adsm.php:29\n\
    Stack trace:\n#0 /tmp/tmpg8p9adsm.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpg8p9adsm.php\
    \ on line 29\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $number =\
    \ floatval($value);\n    return ceil($number - 0.5);\n}\n\necho closest_integer(\"\
    -1.6\");\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "-2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2x37u03t.php:26\n\
    Stack trace:\n#0 /tmp/tmp2x37u03t.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp2x37u03t.php\
    \ on line 26\n"
  timestamp: 1660029070
- exit_code: 0
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return (int)round($value);\n\
    }\nprint(closest_integer(\"10\"));\nprint(\"\\n\");\nprint(closest_integer(\"\
    15.3\"));\nprint(\"\\n\");\nprint(closest_integer(\"14.5\"));\nprint(\"\\n\");\n\
    print(closest_integer(\"-14.5\"));\nprint(\"\\n\");\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '10

    15

    15

    -15

    '
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $split = explode(\"\
    .\", $value);\n  if($split[1] >= 5) {\n    $split[0]++;\n  }\n  return $split[0];\n\
    }\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 1 in /tmp/tmp5kw2wkio.php on line 17\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp5kw2wkio.php:27\nStack\
    \ trace:\n#0 /tmp/tmp5kw2wkio.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp5kw2wkio.php\
    \ on line 27\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (string)$value;\n\
    \  $number = explode(\".\", $value);\n  if(isset($number[1])) {\n    $fraction\
    \ = substr($number[1], 0, 1);\n    if($fraction >= 5) {\n      $number[0] = $number[0]\
    \ + 1;\n    }\n  }\n  return $number[0];\n}\nprint closest_integer(14.5) . PHP_EOL;\n\
    print closest_integer(-14.5) . PHP_EOL;\nprint closest_integer(14.2) . PHP_EOL;\n\
    print closest_integer(-14.2) . PHP_EOL;\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\n-13\n14\n-14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0jxc4rd7.php:35\n\
    Stack trace:\n#0 /tmp/tmp0jxc4rd7.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp0jxc4rd7.php\
    \ on line 35\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return $value\
    \ - fmod($value, 1);\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe33rva5m.php:23\n\
    Stack trace:\n#0 /tmp/tmpe33rva5m.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpe33rva5m.php\
    \ on line 23\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $floor =\
    \ floor($value);\n    $ceil = ceil($value);\n    if ($value - $floor < $ceil -\
    \ $value) {\n        return $floor;\n    } else {\n        return $ceil;\n   \
    \ }\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3v935_o0.php:29\n\
    Stack trace:\n#0 /tmp/tmp3v935_o0.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp3v935_o0.php\
    \ on line 29\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  //$value =\
    \ strval($value);\n  $decimal = explode(\".\", $value);\n  if ($decimal[1] >=\
    \ 0.5) {\n    if (is_positive($value)) {\n      return ($decimal[0] + 1);\n  \
    \  } else {\n      return ($decimal[0] - 1);\n    }\n  } else {\n    return $decimal[0];\n\
    \  }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 1 in /tmp/tmpdxlw72jm.php on line 18\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpdxlw72jm.php:34\nStack\
    \ trace:\n#0 /tmp/tmpdxlw72jm.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpdxlw72jm.php\
    \ on line 34\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  return ($value - floor($value) >= 0.5) ? floor($value) + 1 : floor($value);\n\
    }\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv1zh5vih.php:24\n\
    Stack trace:\n#0 /tmp/tmpv1zh5vih.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpv1zh5vih.php\
    \ on line 24\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n\tif($value >\
    \ 0) {\n\t\t$closest = ceil($value);\n\t} else {\n\t\t$closest = floor($value);\n\
    \t}\n\treturn $closest;\n}\n\n$value = \"10\";\necho closest_integer($value);\n\
    function candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjsflk2ar.php:31\n\
    Stack trace:\n#0 /tmp/tmpjsflk2ar.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpjsflk2ar.php\
    \ on line 31\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $closest\
    \ = round($value);\n    //  print $closest;\n    if ($closest < $value) {\n  \
    \      $closest++;\n    }\n    return $closest;\n}\nprint_r(closest_integer(\"\
    -10\"));\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "-10\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3f0woowt.php:29\n\
    Stack trace:\n#0 /tmp/tmp3f0woowt.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp3f0woowt.php\
    \ on line 29\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    // Write\
    \ your code here\n    // To print results to the standard output you can use print\n\
    \    // Example:\n    // print \"Hello world!\";\n    if($value < 0) {\n     \
    \   $value = abs($value);\n        $l_value = floor($value);\n        $h_value\
    \ = ceil($value);\n        if($l_value - $value < $h_value - $value) {\n     \
    \       $closest_value = $l_value;\n        } else {\n            $closest_value\
    \ = $h_value;\n        }\n        $closest_value = -$closest_value;\n    } else\
    \ {\n        $l_value = floor($value);\n        $h_value = ceil($value);\n   \
    \     if($l_value - $value < $h_value - $value) {\n            $closest_value\
    \ = $l_value;\n        } else {\n            $closest_value = $h_value;\n    \
    \    }\n    }\n    return $closest_value;\n}\nfunction candidate(...$args) {\n\
    \    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbf966fcb.php:46\n\
    Stack trace:\n#0 /tmp/tmpbf966fcb.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpbf966fcb.php\
    \ on line 46\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value);\n\
    }\n\necho closest_integer(\"14.5\");\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyyqv42ph.php:25\n\
    Stack trace:\n#0 /tmp/tmpyyqv42ph.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpyyqv42ph.php\
    \ on line 25\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    return round($value);\n\
    }\n\necho closest_integer(\"14.5\");\necho \"\\n\";\necho closest_integer(\"-14.5\"\
    );\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\n-15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvuwaw49f.php:27\n\
    Stack trace:\n#0 /tmp/tmpvuwaw49f.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpvuwaw49f.php\
    \ on line 27\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = round($value);\n\
    \  if (substr($value, -1) >= 5) {\n    $value += 1;\n  }\n  return $value;\n}\n\
    \nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7oz21wyn.php:28\n\
    Stack trace:\n#0 /tmp/tmp7oz21wyn.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp7oz21wyn.php\
    \ on line 28\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $remainder\
    \ = $value - (int)$value;\n    if ($remainder < 0.5) {\n        return (int)$value;\n\
    \    } else {\n        return (int)$value + 1;\n    }\n}\necho closest_integer(\"\
    10\") . PHP_EOL;\necho closest_integer(\"15.3\") . PHP_EOL;\necho closest_integer(\"\
    14.5\") . PHP_EOL;\necho closest_integer(\"-14.5\") . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6rgz76vn.php:34\n\
    Stack trace:\n#0 /tmp/tmp6rgz76vn.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp6rgz76vn.php\
    \ on line 34\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $rounded\
    \ = round($value);\n    $difference = $value - $rounded;\n    if ($difference\
    \ < 0) {\n        return $rounded - 1;\n    } elseif ($difference > 0) {\n   \
    \     return $rounded + 1;\n    } else {\n        return $rounded;\n    }\n}\n\
    function candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqrzw2j6q.php:31\n\
    Stack trace:\n#0 /tmp/tmpqrzw2j6q.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpqrzw2j6q.php\
    \ on line 31\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // 1) Split\
    \ the string into numbers and decimal values\n  $whole = explode(\".\", $value);\n\
    \  // 2) If there is no decimal\n  if(!isset($whole[1])) {\n    return $whole[0];\n\
    \  }\n  // 3) If there is a decimal\n  $dec = explode(\"\", $whole[1]);\n  if($dec[0]\
    \ < 5) {\n    return $whole[0];\n  } else {\n    return ++$whole[0];\n  }\n}\n\
    \nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7o5l_yqz.php:36\n\
    Stack trace:\n#0 /tmp/tmp7o5l_yqz.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp7o5l_yqz.php\
    \ on line 36\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  return ($value > 0) ? round($value) : ceil($value);\n}\necho closest_integer(\"\
    10\") . \"\\n\";\necho closest_integer(\"15.3\") . \"\\n\";\necho closest_integer(\"\
    14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn0wo5f1b.php:28\n\
    Stack trace:\n#0 /tmp/tmpn0wo5f1b.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpn0wo5f1b.php\
    \ on line 28\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n\t$round = round($value);\n\
    \t$floor = floor($value);\n\t$ceil = ceil($value);\n\tif (abs($value - $round)\
    \ < abs($value - $floor)) {\n\t\tif (abs($value - $round) < abs($value - $ceil))\
    \ {\n\t\t\treturn $round;\n\t\t} else {\n\t\t\treturn $ceil;\n\t\t}\n\t} else\
    \ {\n\t\tif (abs($value - $floor) < abs($value - $ceil)) {\n\t\t\treturn $floor;\n\
    \t\t} else {\n\t\t\treturn $ceil;\n\t\t}\n\t}\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5p87q8ki.php:39\n\
    Stack trace:\n#0 /tmp/tmp5p87q8ki.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp5p87q8ki.php\
    \ on line 39\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $num = (int)$value;\n\
    \  $diff = abs($value - $num);\n  $rounded = round($value);\n  $diff2 = abs($value\
    \ - $rounded);\n  return $diff > $diff2 ? $rounded : $num;\n}\necho closest_integer(\"\
    10\") . \"\\n\";\necho closest_integer(\"15.3\") . \"\\n\";\necho closest_integer(\"\
    14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n14\n-14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp09p7nmnk.php:33\n\
    Stack trace:\n#0 /tmp/tmp09p7nmnk.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp09p7nmnk.php\
    \ on line 33\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $closest\
    \ = 0;\n    if ($value > 0) {\n        for ($i = 0; $i < $value; $i++) {\n   \
    \         if ($value - $i < $value + $i) {\n                $closest = $i;\n \
    \               break;\n            }\n        }\n    } else {\n        for ($i\
    \ = 0; $i > $value; $i--) {\n            if ($value - $i > $value + $i) {\n  \
    \              $closest = $i;\n                break;\n            }\n       \
    \ }\n    }\n    return $closest;\n}\n\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2x61e4b3.php:40\n\
    Stack trace:\n#0 /tmp/tmp2x61e4b3.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp2x61e4b3.php\
    \ on line 40\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value);\n\
    }\necho closest_integer(\"10\") . PHP_EOL;\necho closest_integer(\"15.3\") . PHP_EOL;\n\
    \nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0xxxfur7.php:26\n\
    Stack trace:\n#0 /tmp/tmp0xxxfur7.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp0xxxfur7.php\
    \ on line 26\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    return round($value);\n\
    }\n\necho closest_integer(\"10\") . PHP_EOL;\necho closest_integer(\"15.3\") .\
    \ PHP_EOL;\necho closest_integer(\"14.5\") . PHP_EOL;\necho closest_integer(\"\
    -14.5\") . PHP_EOL;\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4fudeiam.php:28\n\
    Stack trace:\n#0 /tmp/tmp4fudeiam.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp4fudeiam.php\
    \ on line 28\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $num = floatval($value);\n\
    \  $integer = floor($num);\n  $decimal = $num - $integer;\n  if($decimal > 0.5)\
    \ {\n    return $integer + 1;\n  } else {\n    return $integer;\n  }\n}\n$output\
    \ = closest_integer(\"14.5\");\necho $output;\nfunction candidate(...$args) {\n\
    \    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "14\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6schvy07.php:32\n\
    Stack trace:\n#0 /tmp/tmp6schvy07.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp6schvy07.php\
    \ on line 32\n"
  timestamp: 1660029070
- exit_code: 0
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return intval(round($value));\n\
    }\n\nprint closest_integer(\"10\") . \"\\n\";\nprint closest_integer(\"15.3\"\
    ) . \"\\n\";\nprint closest_integer(\"14.5\") . \"\\n\";\nprint closest_integer(\"\
    -14.5\") . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '10

    15

    15

    -15

    '
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $rounded =\
    \ round($value);\n  if ($rounded < $value)\n    return $rounded + 1;\n  else\n\
    \    return $rounded;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd7yu6we1.php:28\n\
    Stack trace:\n#0 /tmp/tmpd7yu6we1.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpd7yu6we1.php\
    \ on line 28\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $int = intval($value);\n\
    \    if($value - $int == 0.5) {\n        return $int + 1;\n    } elseif ($value\
    \ - $int == -0.5) {\n        return $int - 1;\n    } else {\n        return round($value);\n\
    \    }\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpntsem_j9.php:30\n\
    Stack trace:\n#0 /tmp/tmpntsem_j9.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpntsem_j9.php\
    \ on line 30\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n\n}\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpahp6hsnx.php:23\n\
    Stack trace:\n#0 /tmp/tmpahp6hsnx.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpahp6hsnx.php\
    \ on line 23\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $decimal =\
    \ abs(floatval($value) - intval($value));\n  if($decimal >= 0.5) {\n    return\
    \ intval($value) + 1;\n  } else {\n    return intval($value);\n  }\n}\n\necho\
    \ closest_integer(\"10\");\necho \"\\n\";\necho closest_integer(\"15.3\");\necho\
    \ \"\\n\";\necho closest_integer(\"14.5\");\necho \"\\n\";\necho closest_integer(\"\
    -14.5\");\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-13\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0hrfqhh7.php:38\n\
    Stack trace:\n#0 /tmp/tmp0hrfqhh7.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp0hrfqhh7.php\
    \ on line 38\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n\n}\n\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw53_1rhn.php:24\n\
    Stack trace:\n#0 /tmp/tmpw53_1rhn.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpw53_1rhn.php\
    \ on line 24\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $nearest_int\
    \ = round($value);\n  return $nearest_int;\n}\n\necho closest_integer(10) . PHP_EOL;\n\
    echo closest_integer(15.3) . PHP_EOL;\necho closest_integer(-14.5) . PHP_EOL;\n\
    function candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvsfv1usk.php:28\n\
    Stack trace:\n#0 /tmp/tmpvsfv1usk.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpvsfv1usk.php\
    \ on line 28\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n\tif (intval($value)\
    \ == $value) {\n\t\treturn intval($value);\n\t} else {\n\t\treturn round($value);\n\
    \t}\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsrc1ouw4.php:28\n\
    Stack trace:\n#0 /tmp/tmpsrc1ouw4.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpsrc1ouw4.php\
    \ on line 28\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // Write your\
    \ code here\n  // To print results to the standard output you can use print\n\
    \  // Example:\n  // print \"Hello world!\";\n  $val = (int)$value;\n  if($val-$value\
    \ == 0)\n    print $val;\n  elseif($val+1-$value <= 0.5)\n    print $val+1;\n\
    \  else\n    print $val;\n}\n\nfscanf(STDIN, \"%s\\n\", $value);\nclosest_integer($value);\n\
    function candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "010\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppigb9kp_.php:36\n\
    Stack trace:\n#0 /tmp/tmppigb9kp_.php(43): test()\n#1 {main}\n  thrown in /tmp/tmppigb9kp_.php\
    \ on line 36\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $floor = floor($value);\n\
    \  $ceil = ceil($value);\n  if ($value - $floor == 0.5) {\n    if ($floor >= 0)\
    \ {\n      return $ceil;\n    } else {\n      return $floor;\n    }\n  } else\
    \ {\n    return round($value);\n  }\n}\n\nfunction candidate(...$args) {\n   \
    \ return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyod4659g.php:34\n\
    Stack trace:\n#0 /tmp/tmpyod4659g.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpyod4659g.php\
    \ on line 34\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $decimal =\
    \ $value - floor($value);\n  return (round($decimal) == 0.5) ? round($value) :\
    \ round($value, 0, PHP_ROUND_HALF_DOWN);\n}\n\nfunction candidate(...$args) {\n\
    \    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpub8_72zd.php:25\n\
    Stack trace:\n#0 /tmp/tmpub8_72zd.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpub8_72zd.php\
    \ on line 25\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    // Write\
    \ your code here\n    // To print results to the standard output you can use print\n\
    \    // Example:\n    // print \"Hello world!\";\n    $number = (float)$value;\n\
    \    $first_number = ceil($number);\n    $second_number = floor($number);\n  \
    \  $first_diff = $first_number - $number;\n    $second_diff = $number - $second_number;\n\
    \    if ($first_diff < $second_diff) {\n        return $first_number;\n    } else\
    \ {\n        return $second_number;\n    }\n}\n$value = 15.3;\nprint closest_integer($value);\n\
    function candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvhucooi4.php:38\n\
    Stack trace:\n#0 /tmp/tmpvhucooi4.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpvhucooi4.php\
    \ on line 38\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n\t$value = (int)$value;\n\
    \tif ($value < 0) {\n\t\t$value = -$value;\n\t}\n    return $value;\n}\necho closest_integer(\"\
    12.6\");\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "12\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0_f6avdf.php:29\n\
    Stack trace:\n#0 /tmp/tmp0_f6avdf.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp0_f6avdf.php\
    \ on line 29\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $ceil = ceil($value);\n\
    \  $floor = floor($value);\n  $ceil_diff = $ceil - $value;\n  $floor_diff = $value\
    \ - $floor;\n  if ($ceil_diff > $floor_diff) {\n    return $floor;\n  } elseif\
    \ ($ceil_diff < $floor_diff) {\n    return $ceil;\n  } else {\n    return 0;\n\
    \  }\n}\necho closest_integer(\"10\") . PHP_EOL;\necho closest_integer(\"15.3\"\
    ) . PHP_EOL;\necho closest_integer(\"14.5\") . PHP_EOL;\necho closest_integer(\"\
    -14.5\") . PHP_EOL;\necho closest_integer(\"-14.7\") . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "0\n15\n0\n0\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5sh5ukvf.php:38\n\
    Stack trace:\n#0 /tmp/tmp5sh5ukvf.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp5sh5ukvf.php\
    \ on line 38\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return $value\
    \ >= 0 ? floor($value) : ceil($value);\n}\necho closest_integer(\"15.3\");\necho\
    \ \"\\n\";\necho closest_integer(\"14.5\");\necho \"\\n\";\necho closest_integer(\"\
    -14.5\");\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\n14\n-14\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb4ew3_wv.php:28\n\
    Stack trace:\n#0 /tmp/tmpb4ew3_wv.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpb4ew3_wv.php\
    \ on line 28\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value1 = round($value);\n\
    \  $value2 = round($value, 0, PHP_ROUND_HALF_DOWN);\n  $value3 = round($value,\
    \ 0, PHP_ROUND_HALF_UP);\n  if (abs($value1 - $value) < abs($value2 - $value))\
    \ {\n    return $value1;\n  } else if (abs($value1 - $value) > abs($value2 - $value))\
    \ {\n    return $value2;\n  } else {\n    return $value3;\n  }\n}\necho closest_integer(\"\
    -13.8\");\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "-14\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbljanimf.php:33\n\
    Stack trace:\n#0 /tmp/tmpbljanimf.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpbljanimf.php\
    \ on line 33\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    return round($value);\n\
    }\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpflqxpvyy.php:23\n\
    Stack trace:\n#0 /tmp/tmpflqxpvyy.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpflqxpvyy.php\
    \ on line 23\n"
  timestamp: 1659824629
- exit_code: 0
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    return (int)round($value);\n\
    }\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $int = (int)\
    \ round($value);\n    $diff = $value - $int;\n    if ($diff >= 0.5) {\n      \
    \  return $int + 1;\n    } elseif ($diff < 0.5 && $diff > 0) {\n        return\
    \ $int;\n    } elseif ($diff <= 0 && $diff > -0.5) {\n        return $int;\n \
    \   } else {\n        return $int - 1;\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpop23y8xm.php:34\n\
    Stack trace:\n#0 /tmp/tmpop23y8xm.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpop23y8xm.php\
    \ on line 34\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    return round($value);\n\
    }\n\n$tests = array(\"10\", \"15.3\", \"14.5\", \"-14.5\");\n\nforeach ($tests\
    \ as $test) {\n    echo closest_integer($test) . \"\\n\";\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpub8wfh5e.php:29\n\
    Stack trace:\n#0 /tmp/tmpub8wfh5e.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpub8wfh5e.php\
    \ on line 29\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $closest_integer = round($value);\n  return $closest_integer;\n}\necho closest_integer('10')\
    \ . \"<br>\";\necho closest_integer('15.3') . \"<br>\";\necho closest_integer('-14.5')\
    \ . \"<br>\";\necho closest_integer('14.5') . \"<br>\";\necho closest_integer('16.8')\
    \ . \"<br>\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10<br>15<br>-15<br>15<br>17<br>\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpw0mg1jmk.php:30\nStack trace:\n#0 /tmp/tmpw0mg1jmk.php(37):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpw0mg1jmk.php on line 30\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $num = intval($value);\n\
    \    if ($num == $value) {\n        return $num;\n    } elseif ($num < $value)\
    \ {\n        return $num + 1;\n    } else {\n        return $num - 1;\n    }\n\
    }\n\n$input1 = \"10\";\n$input2 = \"15.3\";\necho closest_integer($input1) . \"\
    \\n\";\necho closest_integer($input2) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n16\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgkn6sk0d.php:38\n\
    Stack trace:\n#0 /tmp/tmpgkn6sk0d.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpgkn6sk0d.php\
    \ on line 38\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    // your code\
    \ here\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbv0418en.php:23\n\
    Stack trace:\n#0 /tmp/tmpbv0418en.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpbv0418en.php\
    \ on line 23\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    return (integer)$value;\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplt2575ub.php:25\n\
    Stack trace:\n#0 /tmp/tmplt2575ub.php(31): test()\n#1 {main}\n  thrown in /tmp/tmplt2575ub.php\
    \ on line 25\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $res = number_format($value,\
    \ 0, '.', '');\n  if($res >= $value) {\n    return $res;\n  }\n  return $res -\
    \ 1;\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2d0_nnpq.php:27\n\
    Stack trace:\n#0 /tmp/tmp2d0_nnpq.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp2d0_nnpq.php\
    \ on line 27\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    return round($value);\n\
    }\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpflqxpvyy.php:23\n\
    Stack trace:\n#0 /tmp/tmpflqxpvyy.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpflqxpvyy.php\
    \ on line 23\n"
  timestamp: 1659824629
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $num = floatval($value);\n\
    \  $num1 = floor($num);\n  $num2 = ceil($num);\n  if ($num < 0) {\n    $num1 =\
    \ ceil($num);\n    $num2 = floor($num);\n  }\n  $answer = round($num, 0, PHP_ROUND_HALF_UP);\n\
    \  if ($answer == $num1) {\n    $answer = $num1;\n  } else if ($answer == $num2)\
    \ {\n    $answer = $num2;\n  }\n  return $answer;\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt303s5x2.php:36\n\
    Stack trace:\n#0 /tmp/tmpt303s5x2.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpt303s5x2.php\
    \ on line 36\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n\treturn round($value);\n\
    }\necho closest_integer(\"10\").\"\\n\";\necho closest_integer(\"15.3\").\"\\\
    n\";\necho closest_integer(\"14.5\").\"\\n\";\necho closest_integer(\"-14.5\"\
    ).\"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp27yvr4a5.php:27\n\
    Stack trace:\n#0 /tmp/tmp27yvr4a5.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp27yvr4a5.php\
    \ on line 27\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $round = round($value);\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  if (abs($value - $floor)\
    \ === abs($value - $ceil)) {\n    return abs($value) < $ceil ? $floor : $ceil;\n\
    \  }\n  return abs($value - $floor) < abs($value - $ceil) ? $floor : $ceil;\n\
    }\necho closest_integer(\"10\") . PHP_EOL;\necho closest_integer(\"15.3\") . PHP_EOL;\n\
    echo closest_integer(\"14.5\") . PHP_EOL;\necho closest_integer(\"-14.5\") . PHP_EOL;\n\
    \nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n14\n-14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp38_4afqb.php:34\n\
    Stack trace:\n#0 /tmp/tmp38_4afqb.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp38_4afqb.php\
    \ on line 34\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value);\n\
    }\n\nprint_r(closest_integer(\"10\"));\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk0ljk9lr.php:25\n\
    Stack trace:\n#0 /tmp/tmpk0ljk9lr.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpk0ljk9lr.php\
    \ on line 25\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $floorValue\
    \ = floor($value);\n    $ceilValue = ceil($value);\n    $result = round($value);\n\
    \    if ($value < 0) {\n        if ((abs($value) - $floorValue) > 0.5) {\n   \
    \         $result = $ceilValue;\n        } else {\n            $result = $floorValue;\n\
    \        }\n    } else {\n        if (($ceilValue - $value) > 0.5) {\n       \
    \     $result = $floorValue;\n        } else {\n            $result = $ceilValue;\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmeby4ri5.php:40\n\
    Stack trace:\n#0 /tmp/tmpmeby4ri5.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpmeby4ri5.php\
    \ on line 40\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n\t$num = intval($value);\n\
    \t$float = $value - $num;\n\tif ($float == 0) {\n\t\treturn $num;\n\t} elseif\
    \ ($float > 0.5) {\n\t\treturn $num + 1;\n\t} else {\n\t\treturn $num;\n\t}\n\
    }\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz6z3q074.php:32\n\
    Stack trace:\n#0 /tmp/tmpz6z3q074.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpz6z3q074.php\
    \ on line 32\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = round($value);\n\
    \  return $value;\n}\necho closest_integer(\"10\");\necho \"<br />\";\necho closest_integer(\"\
    15.3\");\necho \"<br />\";\necho closest_integer(\"14.5\");\necho \"<br />\";\n\
    echo closest_integer(\"-14.5\");\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10<br />15<br />15<br />-15\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpq_eu4b81.php:31\nStack trace:\n#0 /tmp/tmpq_eu4b81.php(38): test()\n\
    #1 {main}\n  thrown in /tmp/tmpq_eu4b81.php on line 31\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value);\n\
    }\necho closest_integer(\"10\").\"\\n\";\necho closest_integer(\"15.3\").\"\\\
    n\";\necho closest_integer(\"14.5\").\"\\n\";\necho closest_integer(\"-14.5\"\
    ).\"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphs95l59x.php:27\n\
    Stack trace:\n#0 /tmp/tmphs95l59x.php(34): test()\n#1 {main}\n  thrown in /tmp/tmphs95l59x.php\
    \ on line 27\n"
  timestamp: 1659824629
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $isNegative\
    \ = substr($value, 0, 1) === '-';\n    $int = $isNegative ? intval(substr($value,\
    \ 1)) : intval($value);\n    $decimal = abs($value - $int);\n    $inc = $int +\
    \ 1;\n    if ($decimal > abs($value - $inc)) {\n        return $isNegative ? -$inc\
    \ : $inc;\n    }\n    return $isNegative ? -$int : $int;\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5gkunme5.php:31\n\
    Stack trace:\n#0 /tmp/tmp5gkunme5.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp5gkunme5.php\
    \ on line 31\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    // Write\
    \ your code here\n    // To print results to the standard output you can use print\n\
    \    // Example:\n    // print \"Hello world!\";\n    if($value > 0){\n      \
    \  return ceil($value);\n    }else{\n        return floor($value);\n    }\n}\n\
    function candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqbswk5bs.php:31\n\
    Stack trace:\n#0 /tmp/tmpqbswk5bs.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpqbswk5bs.php\
    \ on line 31\n"
  timestamp: 1660029070
- exit_code: 0
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // Write your\
    \ code here\n  $value = number_format($value, 0, '.', '');\n  return (int)$value;\n\
    }\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $decimals =\
    \ $value - floor($value);\n  if ($decimals < 0.5) {\n    return floor($value);\n\
    \  } else {\n    return ceil($value);\n  }\n}\nfunction candidate(...$args) {\n\
    \    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx__238g7.php:28\n\
    Stack trace:\n#0 /tmp/tmpx__238g7.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpx__238g7.php\
    \ on line 28\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $num = round($value);\n\
    \    $dec = $value - $num;\n    if ($dec > 0) {\n        return $num;\n    } else\
    \ {\n        return $num - 1;\n    }\n}\n\n$value = \"-10.5\";\necho closest_integer($value);\n\
    function candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "-11\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuha2jjmq.php:32\n\
    Stack trace:\n#0 /tmp/tmpuha2jjmq.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpuha2jjmq.php\
    \ on line 32\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value);\n\
    }\n\necho closest_integer(\"10\").\"\\n\";\necho closest_integer(\"15.3\").\"\\\
    n\";\necho closest_integer(\"-14.5\").\"\\n\";\nfunction candidate(...$args) {\n\
    \    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsh3nz5w2.php:27\n\
    Stack trace:\n#0 /tmp/tmpsh3nz5w2.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpsh3nz5w2.php\
    \ on line 27\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $values = explode(\"\
    .\", $value);\n  if (sizeof($values) > 1) {\n    if ($values[1] < 50) {\n    \
    \  return $values[0];\n    } else {\n      return intval($values[0]) + 1;\n  \
    \  }\n  } else {\n    return $value;\n  }\n}\necho closest_integer(\"10\") . PHP_EOL;\n\
    echo closest_integer(\"15.3\") . PHP_EOL;\necho closest_integer(\"14.5\") . PHP_EOL;\n\
    echo closest_integer(\"-14.5\") . PHP_EOL;\nfunction candidate(...$args) {\n \
    \   return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n14\n-14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp37wm_n94.php:36\n\
    Stack trace:\n#0 /tmp/tmp37wm_n94.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp37wm_n94.php\
    \ on line 36\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value);\n\
    }\necho closest_integer('10') . PHP_EOL;\necho closest_integer('15.3') . PHP_EOL;\n\
    echo closest_integer('14.5') . PHP_EOL;\necho closest_integer('-14.5') . PHP_EOL;\n\
    function candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpawxs77lt.php:27\n\
    Stack trace:\n#0 /tmp/tmpawxs77lt.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpawxs77lt.php\
    \ on line 27\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // Your code\
    \ here\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwd7lpo0a.php:23\n\
    Stack trace:\n#0 /tmp/tmpwd7lpo0a.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpwd7lpo0a.php\
    \ on line 23\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    return round($value);\n\
    }\n\necho \"Closest integer of 14.5 is \" . closest_integer(14.5) . \"<br>\";\n\
    echo \"Closest integer of -14.5 is \" . closest_integer(-14.5) . \"<br>\";\necho\
    \ \"Closest integer of 14.4 is \" . closest_integer(14.4) . \"<br>\";\necho \"\
    Closest integer of -14.4 is \" . closest_integer(-14.4) . \"<br>\";\necho \"Closest\
    \ integer of 14.6 is \" . closest_integer(14.6) . \"<br>\";\necho \"Closest integer\
    \ of -14.6 is \" . closest_integer(-14.6) . \"<br>\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Closest integer of 14.5 is 15<br>Closest integer of -14.5 is -15<br>Closest\
    \ integer of 14.4 is 14<br>Closest integer of -14.4 is -14<br>Closest integer\
    \ of 14.6 is 15<br>Closest integer of -14.6 is -15<br>\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpi5us1qf2.php:30\nStack trace:\n#0 /tmp/tmpi5us1qf2.php(37):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpi5us1qf2.php on line 30\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    return round($value);\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsxboo4dn.php:24\n\
    Stack trace:\n#0 /tmp/tmpsxboo4dn.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpsxboo4dn.php\
    \ on line 24\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $result =\
    \ round($value);\n    return $result;\n}\necho closest_integer(\"10\") . \"\\\
    n\";\necho closest_integer(\"15.3\") . \"\\n\";\necho closest_integer(\"14.5\"\
    ) . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuo78o_ki.php:28\n\
    Stack trace:\n#0 /tmp/tmpuo78o_ki.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpuo78o_ki.php\
    \ on line 28\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $ceil = ceil($value);\n\
    \  $floor = floor($value);\n  $ceil_temp = ceil($value);\n  $floor_temp = floor($value);\n\
    \  $ceil_temp = abs($ceil_temp);\n  $floor_temp = abs($floor_temp);\n  $ceil_temp\
    \ = abs($ceil_temp) - abs($value);\n  $floor_temp = abs($value) - abs($floor_temp);\n\
    \  if ($ceil_temp < $floor_temp) {\n    return $ceil;\n  } elseif ($ceil_temp\
    \ > $floor_temp) {\n    return $floor;\n  } elseif ($ceil_temp == $floor_temp)\
    \ {\n    return $ceil;\n  }\n}\necho(closest_integer(\"10\"));\necho(\"\\n\");\n\
    echo(closest_integer(\"15.3\"));\necho(\"\\n\");\necho(closest_integer(\"14.5\"\
    ));\necho(\"\\n\");\necho(closest_integer(\"-14.5\"));\necho(\"\\n\");\n\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyjn55nd0.php:46\n\
    Stack trace:\n#0 /tmp/tmpyjn55nd0.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpyjn55nd0.php\
    \ on line 46\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $integer\
    \ = round($value);\n    if ($value < 0) {\n        $diff1 = abs($value - $integer);\n\
    \        $diff2 = abs($value - ($integer - 1));\n        if ($diff1 < $diff2)\
    \ {\n            return $integer;\n        } else {\n            return $integer\
    \ - 1;\n        }\n    } else {\n        $diff1 = abs($value - $integer);\n  \
    \      $diff2 = abs($value - ($integer + 1));\n        if ($diff1 < $diff2) {\n\
    \            return $integer;\n        } else {\n            return $integer +\
    \ 1;\n        }\n    }\n}\n\n$answer = closest_integer(\"10\");\necho $answer;\n\
    \nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpghybulo6.php:44\n\
    Stack trace:\n#0 /tmp/tmpghybulo6.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpghybulo6.php\
    \ on line 44\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ (float)$value;\n    if($value>=0){\n      $ceil = ceil($value);\n      $floor\
    \ = floor($value);\n      if($ceil-$value > $value-$floor){\n        return $floor;\n\
    \      }else{\n        return $ceil;\n      }\n    }else{\n      $ceil = ceil($value);\n\
    \      $floor = floor($value);\n      if($ceil-$value > $value-$floor){\n    \
    \    return $ceil;\n      }else{\n        return $floor;\n      }\n    }\n}\n\
    echo closest_integer(\"10\").\"\\n\";\necho closest_integer(\"15.3\").\"\\n\"\
    ;\necho closest_integer(\"14.5\").\"\\n\";\necho closest_integer(\"-14.5\").\"\
    \\n\";\necho closest_integer(\"-17.9\").\"\\n\";\necho closest_integer(\"-10\"\
    ).\"\\n\";\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n-17\n-10\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpwskgdka_.php:47\nStack trace:\n#0 /tmp/tmpwskgdka_.php(54): test()\n\
    #1 {main}\n  thrown in /tmp/tmpwskgdka_.php on line 47\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    return round($value);\n\
    }\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpflqxpvyy.php:23\n\
    Stack trace:\n#0 /tmp/tmpflqxpvyy.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpflqxpvyy.php\
    \ on line 23\n"
  timestamp: 1659824629
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $integers\
    \ = array_map(function($value) {\n        return abs($value - (int)$value);\n\
    \    }, range(floor($value), ceil($value)));\n    asort($integers);\n    return\
    \ array_slice(array_keys($integers), 0, 1)[0];\n}\n\nprint_r(closest_integer(\"\
    10\") . \"\\n\");\nprint_r(closest_integer(\"15.3\") . \"\\n\");\nprint_r(closest_integer(\"\
    14.5\") . \"\\n\");\nprint_r(closest_integer(\"-14.5\") . \"\\n\");\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "0\n0\n0\n0\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpujws56dm.php:32\n\
    Stack trace:\n#0 /tmp/tmpujws56dm.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpujws56dm.php\
    \ on line 32\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // Your code\
    \ here\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwd7lpo0a.php:23\n\
    Stack trace:\n#0 /tmp/tmpwd7lpo0a.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpwd7lpo0a.php\
    \ on line 23\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $down = floor($value);\n\
    \    $up = ceil($value);\n    $diff_down = $value - $down;\n    $diff_up = $up\
    \ - $value;\n    if ($diff_down > $diff_up) {\n        return $up;\n    } else\
    \ {\n        return $down;\n    }\n}\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpva0ep5a_.php:31\n\
    Stack trace:\n#0 /tmp/tmpva0ep5a_.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpva0ep5a_.php\
    \ on line 31\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $previous = floor($value);\n    $next = ceil($value);\n\
    \    if ($value > 0) {\n        if (($value - $previous) <= ($next - $value))\
    \ {\n            return $previous;\n        } else {\n            return $next;\n\
    \        }\n    } else {\n        if (($previous - $value) <= ($value - $next))\
    \ {\n            return $previous;\n        } else {\n            return $next;\n\
    \        }\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptraaxnpg.php:39\n\
    Stack trace:\n#0 /tmp/tmptraaxnpg.php(46): test()\n#1 {main}\n  thrown in /tmp/tmptraaxnpg.php\
    \ on line 39\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    // Write\
    \ your code here\n    // To print results to the standard output you can use print\n\
    \    // Example:\n    // print \"Hello world!\";\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu6nht7xo.php:26\n\
    Stack trace:\n#0 /tmp/tmpu6nht7xo.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpu6nht7xo.php\
    \ on line 26\n"
  timestamp: 1659824629
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $strlen =\
    \ strlen($value);\n    $dot_pos = strpos($value, '.');\n    if ($dot_pos === false)\
    \ {\n        return (int)$value;\n    }\n    $next_digit = $value[$dot_pos + 1];\n\
    \    $result = (int)$value;\n    if ($next_digit >= 5) {\n        $result++;\n\
    \    }\n    return $result;\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4xwq2e17.php:35\n\
    Stack trace:\n#0 /tmp/tmp4xwq2e17.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp4xwq2e17.php\
    \ on line 35\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n\n}\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpahp6hsnx.php:23\n\
    Stack trace:\n#0 /tmp/tmpahp6hsnx.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpahp6hsnx.php\
    \ on line 23\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    return round($value);\n\
    }\necho closest_integer(\"10\");\necho PHP_EOL;\necho closest_integer(\"15.3\"\
    );\necho PHP_EOL;\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfeg9ou69.php:27\n\
    Stack trace:\n#0 /tmp/tmpfeg9ou69.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpfeg9ou69.php\
    \ on line 27\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    return round($value);\n\
    }\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpflqxpvyy.php:23\n\
    Stack trace:\n#0 /tmp/tmpflqxpvyy.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpflqxpvyy.php\
    \ on line 23\n"
  timestamp: 1659824629
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    if ($value > 0) {\n        $return = floor($value);\n\
    \        if ($value - $return >= 0.5) {\n            $return++;\n        }\n \
    \   } else {\n        $return = ceil($value);\n        if ($return - $value >=\
    \ 0.5) {\n            $return--;\n        }\n    }\n    return $return;\n}\necho\
    \ closest_integer(\"15.3\") . \"\\n\";\necho closest_integer(\"14.5\") . \"\\\
    n\";\necho closest_integer(\"-14.5\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpft40dnly.php:38\n\
    Stack trace:\n#0 /tmp/tmpft40dnly.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpft40dnly.php\
    \ on line 38\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    // Write\
    \ your code here\n    // To print results to the standard output you can use print\n\
    \    // Example:\n    // print \"Hello world!\";\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu6nht7xo.php:26\n\
    Stack trace:\n#0 /tmp/tmpu6nht7xo.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpu6nht7xo.php\
    \ on line 26\n"
  timestamp: 1659824629
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $up_down =\
    \ $value > 0 ? ceil($value) : floor($value);\n  $up_up = $value > 0 ? ceil($value)\
    \ + 1 : floor($value) - 1;\n  $down_down = $value > 0 ? ceil($value) - 1 : floor($value)\
    \ + 1;\n  $up_diff = abs($value - $up_up);\n  $down_diff = abs($value - $down_down);\n\
    \  $up_down_diff = abs($value - $up_down);\n  if ($up_diff < $down_diff && $up_diff\
    \ < $up_down_diff) {\n    return $up_up;\n  } elseif ($down_diff < $up_diff &&\
    \ $down_diff < $up_down_diff) {\n    return $down_down;\n  } else {\n    return\
    \ $up_down;\n  }\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_16ac5vm.php:35\n\
    Stack trace:\n#0 /tmp/tmp_16ac5vm.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp_16ac5vm.php\
    \ on line 35\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    // Your code\
    \ here\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4m8kuwn7.php:24\n\
    Stack trace:\n#0 /tmp/tmp4m8kuwn7.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp4m8kuwn7.php\
    \ on line 24\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value);\n\
    }\n\necho closest_integer(\"10\");\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfhhv17de.php:25\n\
    Stack trace:\n#0 /tmp/tmpfhhv17de.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpfhhv17de.php\
    \ on line 25\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    return round($value);\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsxboo4dn.php:24\n\
    Stack trace:\n#0 /tmp/tmpsxboo4dn.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpsxboo4dn.php\
    \ on line 24\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $num = intval($value);\n\
    \    $floor = floor($value);\n    $ceil = ceil($value);\n    if ($floor == $ceil)\
    \ {\n        return $floor;\n    }\n    if (abs($value - $floor) < abs($value\
    \ - $ceil)) {\n        return $floor;\n    }\n    if (abs($value - $floor) > abs($value\
    \ - $ceil)) {\n        return $ceil;\n    }\n    if ($value > 0) {\n        return\
    \ $ceil;\n    }\n    return $floor;\n}\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzifcge5c.php:38\n\
    Stack trace:\n#0 /tmp/tmpzifcge5c.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpzifcge5c.php\
    \ on line 38\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // Your code\
    \ here\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeivfax32.php:24\n\
    Stack trace:\n#0 /tmp/tmpeivfax32.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpeivfax32.php\
    \ on line 24\n"
  timestamp: 1660029070
- exit_code: 0
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // Your code\
    \ here\n  $value = floatval($value);\n  return (int)round($value);\n}\n\nif(is_numeric($_GET['num']))\
    \ {\n  echo closest_integer($_GET['num']);\n}\nfunction candidate(...$args) {\n\
    \    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Warning: Undefined array key "num" in /tmp/tmp5yd8rs_o.php on line 21

    '
  timestamp: 1660029070
- exit_code: 0
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value += 0.5;\n\
    \  return round($value);\n}\necho closest_integer(\"10\");\necho \"\\n\";\necho\
    \ closest_integer(\"15.3\");\necho \"\\n\";\necho closest_integer(\"-14.5\");\n\
    echo \"\\n\";\necho closest_integer(\"14.5\");\necho \"\\n\";\n ?>\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "11\n16\n-14\n15\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value);\n\
    }\necho closest_integer(\"10\");\necho PHP_EOL;\necho closest_integer(\"15.3\"\
    );\necho PHP_EOL;\necho closest_integer(\"14.5\");\necho PHP_EOL;\necho closest_integer(\"\
    -14.5\");\necho PHP_EOL;\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp93w5q3zt.php:31\n\
    Stack trace:\n#0 /tmp/tmp93w5q3zt.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp93w5q3zt.php\
    \ on line 31\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value);\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphahuve_r.php:24\n\
    Stack trace:\n#0 /tmp/tmphahuve_r.php(31): test()\n#1 {main}\n  thrown in /tmp/tmphahuve_r.php\
    \ on line 24\n"
  timestamp: 1659824629
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    return round($value);\n\
    }\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpflqxpvyy.php:23\n\
    Stack trace:\n#0 /tmp/tmpflqxpvyy.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpflqxpvyy.php\
    \ on line 23\n"
  timestamp: 1659824629
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ round($value);\n    return $value;\n}\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0rj7_sme.php:24\n\
    Stack trace:\n#0 /tmp/tmp0rj7_sme.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp0rj7_sme.php\
    \ on line 24\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n\treturn ((int)\
    \ round($value)) - ($value > 0 ? 1 : 0);\n}\n\n$int = closest_integer('10');\n\
    echo $int;\necho \"\\n\";\n$int = closest_integer('15.3');\necho $int;\necho \"\
    \\n\";\n$int = closest_integer('14.5');\necho $int;\necho \"\\n\";\n$int = closest_integer('-14.5');\n\
    echo $int;\necho \"\\n\";\n$int = closest_integer('-14.0');\necho $int;\necho\
    \ \"\\n\";\n$int = closest_integer('-0.5');\necho $int;\necho \"\\n\";\n$int =\
    \ closest_integer('-1.5');\necho $int;\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "9\n14\n14\n-15\n-14\n-1\n-2\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpm51pjwzm.php:45\nStack trace:\n#0 /tmp/tmpm51pjwzm.php(52): test()\n\
    #1 {main}\n  thrown in /tmp/tmpm51pjwzm.php on line 45\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    return round($value);\n\
    }\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpflqxpvyy.php:23\n\
    Stack trace:\n#0 /tmp/tmpflqxpvyy.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpflqxpvyy.php\
    \ on line 23\n"
  timestamp: 1659824629
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    //$whole\
    \ = floor($value);\n    $dec = $value - floor($value);\n    if ($dec == 0.5) {\n\
    \        if ($value > 0) {\n            return (ceil($value));\n        } else\
    \ {\n            return (floor($value));\n        }\n    } else {\n        return\
    \ (round($value));\n    }\n}\n\necho closest_integer(\"-14.5\") . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmfpr9r3q.php:35\n\
    Stack trace:\n#0 /tmp/tmpmfpr9r3q.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpmfpr9r3q.php\
    \ on line 35\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $num = floatval($value);\n\
    \  $ceil = ceil($num);\n  $floor = floor($num);\n  if (($ceil - $num) == 0.5)\
    \ {\n    return $ceil;\n  } elseif (($ceil - $num) < 0.5) {\n    return $ceil;\n\
    \  } else {\n    return $floor;\n  }\n}\n$test = closest_integer(\"-14.5\");\n\
    echo $test;\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "-14\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsdghceg_.php:34\n\
    Stack trace:\n#0 /tmp/tmpsdghceg_.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpsdghceg_.php\
    \ on line 34\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $temp = intval($value);\n\
    \  if ($temp == $value) {\n    return $temp;\n  } else {\n    if ($value < 0)\
    \ {\n      $temp--;\n    } else {\n      $temp++;\n    }\n    return $temp;\n\
    \  }\n}\necho closest_integer('15.3');\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "16\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnsrufmm2.php:37\n\
    Stack trace:\n#0 /tmp/tmpnsrufmm2.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpnsrufmm2.php\
    \ on line 37\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    return round($value);\n\
    }\necho closest_integer(14.5);\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3ihpeu0n.php:24\n\
    Stack trace:\n#0 /tmp/tmp3ihpeu0n.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp3ihpeu0n.php\
    \ on line 24\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    return round($value);\n\
    }\necho closest_integer(\"10\");\necho \"\\n\";\necho closest_integer(\"15.3\"\
    );\necho \"\\n\";\necho closest_integer(\"14.5\");\necho \"\\n\";\necho closest_integer(\"\
    -14.5\");\necho \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfsbn2cw8.php:31\n\
    Stack trace:\n#0 /tmp/tmpfsbn2cw8.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpfsbn2cw8.php\
    \ on line 31\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $rounded_value\
    \ = round($value);\n    if ($value < 0) {\n        if ($value - $rounded_value\
    \ < -0.5) {\n            return $rounded_value;\n        } else {\n          \
    \  return $rounded_value - 1;\n        }\n    } else {\n        if ($value - $rounded_value\
    \ < 0.5) {\n            return $rounded_value;\n        } else {\n           \
    \ return $rounded_value + 1;\n        }\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbj2puzeb.php:37\n\
    Stack trace:\n#0 /tmp/tmpbj2puzeb.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpbj2puzeb.php\
    \ on line 37\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $integer =\
    \ intval($value);\n  $difference = $value - $integer;\n  if ($difference < 0)\
    \ {\n    $difference = -$difference;\n  }\n  if ($difference >= 0.5) {\n    $integer\
    \ += 1;\n  }\n  return $integer;\n}\n\necho closest_integer('10') . PHP_EOL;\n\
    echo closest_integer('15.3') . PHP_EOL;\necho closest_integer('14.5') . PHP_EOL;\n\
    echo closest_integer('-14.5') . PHP_EOL;\nfunction candidate(...$args) {\n   \
    \ return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-13\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptfokql78.php:38\n\
    Stack trace:\n#0 /tmp/tmptfokql78.php(43): test()\n#1 {main}\n  thrown in /tmp/tmptfokql78.php\
    \ on line 38\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    return round($value);\n\
    }\n\nvar_dump(closest_integer(\"10\")); // 10\nvar_dump(closest_integer(\"15.3\"\
    )); // 15\nvar_dump(closest_integer(\"14.5\")); // 15\nvar_dump(closest_integer(\"\
    -14.5\")); // -15\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "float(10)\nfloat(15)\nfloat(15)\nfloat(-15)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpgo9xcsm1.php:28\nStack trace:\n#0 /tmp/tmpgo9xcsm1.php(35):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpgo9xcsm1.php on line 28\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    // your code\
    \ here\n    if (is_int($value)) {\n        return $value;\n    }\n    $val2 =\
    \ floor($value);\n    $val3 = ceil($value);\n    $val4 = abs($value - $val2);\n\
    \    $val5 = abs($value - $val3);\n    if ($val4 < $val5) {\n        return $val2;\n\
    \    } else {\n        return $val3;\n    }\n}\nfunction candidate(...$args) {\n\
    \    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp06ri3131.php:35\n\
    Stack trace:\n#0 /tmp/tmp06ri3131.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp06ri3131.php\
    \ on line 35\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  if(floor($value) == $value) return $value;\n  if($value < 0) {\n    if($value\
    \ >= floor($value) + 0.5) return floor($value);\n    else return ceil($value);\n\
    \  }\n  if($value >= floor($value) + 0.5) return ceil($value);\n  else return\
    \ floor($value);\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpos4ob9nl.php:30\n\
    Stack trace:\n#0 /tmp/tmpos4ob9nl.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpos4ob9nl.php\
    \ on line 30\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $num = round($value);\n\
    \  if ($num > $value) {\n    $num = $num - 1;\n  }\n  return $num;\n}\n\n$num\
    \ = \"10\";\necho closest_integer($num) . PHP_EOL;\n\n$num = \"15.3\";\necho closest_integer($num)\
    \ . PHP_EOL;\n\n$num = \"14.5\";\necho closest_integer($num) . PHP_EOL;\n\n$num\
    \ = \"-14.5\";\necho closest_integer($num) . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n14\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprl2jzrdi.php:39\n\
    Stack trace:\n#0 /tmp/tmprl2jzrdi.php(46): test()\n#1 {main}\n  thrown in /tmp/tmprl2jzrdi.php\
    \ on line 39\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n\treturn round($value);\n\
    }\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa3fn4pdi.php:23\n\
    Stack trace:\n#0 /tmp/tmpa3fn4pdi.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpa3fn4pdi.php\
    \ on line 23\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = round($value);\n\
    \  return $value;\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplcz445zp.php:24\n\
    Stack trace:\n#0 /tmp/tmplcz445zp.php(31): test()\n#1 {main}\n  thrown in /tmp/tmplcz445zp.php\
    \ on line 24\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $array =\
    \ explode(\".\", $value);\n    if ($array[1] > 5){\n        return $array[0] +\
    \ 1;\n    } else {\n        return $array[0];\n    }\n}\necho closest_integer(\"\
    10\").PHP_EOL;\necho closest_integer(\"15.3\").PHP_EOL;\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 1 in /tmp/tmp8risxsbf.php on line 17\n10\n\
    15\n\nWarning: Undefined array key 1 in /tmp/tmp8risxsbf.php on line 17\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmp8risxsbf.php:31\nStack trace:\n\
    #0 /tmp/tmp8risxsbf.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp8risxsbf.php\
    \ on line 31\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n\t// Your code\
    \ here\n\t$str = '';\n\tif(strpos($value, '.') == false) {\n\t\treturn $value;\n\
    \t} else {\n\t\t$temp = explode('.', $value);\n\t\tif($temp[1] > 5) {\n\t\t\t\
    $str = $temp[0] + 1;\n\t\t} else {\n\t\t\t$str = $temp[0];\n\t\t}\n\t}\n\treturn\
    \ $str;\n}\n\necho closest_integer(\"10\").PHP_EOL;\necho closest_integer(\"15.3\"\
    ).PHP_EOL;\necho closest_integer(\"14.5\").PHP_EOL;\necho closest_integer(\"-14.5\"\
    ).PHP_EOL;\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n14\n-14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw4mh5wg6.php:41\n\
    Stack trace:\n#0 /tmp/tmpw4mh5wg6.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpw4mh5wg6.php\
    \ on line 41\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value);\n\
    }\n\necho closest_integer(\"10\");\necho closest_integer(\"15.3\");\necho closest_integer(\"\
    14.5\");\necho closest_integer(\"-14.5\");\nfunction candidate(...$args) {\n \
    \   return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "101515-15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7i5dsk3p.php:28\n\
    Stack trace:\n#0 /tmp/tmp7i5dsk3p.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp7i5dsk3p.php\
    \ on line 28\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    // Write\
    \ your code here\n    $float_input = floatval($value);\n    $int_input = intval($value);\n\
    \    if($float_input - $int_input >= 0.5) {\n        return $int_input + 1;\n\
    \    }\n    else {\n        return $int_input;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpno8rymkb.php:34\n\
    Stack trace:\n#0 /tmp/tmpno8rymkb.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpno8rymkb.php\
    \ on line 34\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value);\n\
    }\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6o8v2fx5.php:23\n\
    Stack trace:\n#0 /tmp/tmp6o8v2fx5.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp6o8v2fx5.php\
    \ on line 23\n"
  timestamp: 1660029070
- exit_code: 0
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value);\n\
    }\n\necho closest_integer(\"10\") . PHP_EOL;\necho closest_integer(\"15.3\") .\
    \ PHP_EOL;\necho closest_integer(\"14.5\") . PHP_EOL;\necho closest_integer(\"\
    -14.5\") . PHP_EOL;\n ?>\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "10\n15\n15\n-15\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $number =\
    \ floatval($value);\n    $number_int = intval($number);\n    $number_frac = $number\
    \ - $number_int;\n    if ($number_frac < 0.5) {\n        return $number_int;\n\
    \    } else {\n        return $number_int + 1;\n    }\n}\necho closest_integer(\"\
    10\") . PHP_EOL;\necho closest_integer(\"15.3\") . PHP_EOL;\necho closest_integer(\"\
    -14.5\") . PHP_EOL;\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n-14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppf8vh4r1.php:36\n\
    Stack trace:\n#0 /tmp/tmppf8vh4r1.php(41): test()\n#1 {main}\n  thrown in /tmp/tmppf8vh4r1.php\
    \ on line 36\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    return round($value);\n\
    }\necho closest_integer(\"10\") . PHP_EOL;\necho closest_integer(\"15.3\") . PHP_EOL;\n\
    echo closest_integer(\"-14.5\") . PHP_EOL;\necho closest_integer(\"14.5\") . PHP_EOL;\n\
    echo closest_integer(\"-15.3\") . PHP_EOL;\necho closest_integer(\"16.5\") . PHP_EOL;\n\
    echo closest_integer(\"-16.5\") . PHP_EOL;\nfunction candidate(...$args) {\n \
    \   return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n-15\n15\n-15\n17\n-17\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmplhukkss3.php:30\nStack trace:\n#0 /tmp/tmplhukkss3.php(37):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmplhukkss3.php on line 30\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $num = explode(\"\
    .\", $value);\n  if(count($num)==1) {\n    return $num[0];\n  }\n  else {\n  \
    \  if($num[1] >= 5) {\n      return $num[0] + 1;\n    }\n    else {\n      return\
    \ $num[0];\n    }\n  }\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgod72xhs.php:34\n\
    Stack trace:\n#0 /tmp/tmpgod72xhs.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpgod72xhs.php\
    \ on line 34\n"
  timestamp: 1660029070
- exit_code: 0
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $val = floatval($value);\n\
    \  return ceil($val);\n}\necho closest_integer(\"10\").\"\\n\";\necho closest_integer(\"\
    15.3\").\"\\n\";\necho closest_integer(\"14.5\").\"\\n\";\necho closest_integer(\"\
    -14.5\").\"\\n\";\n ?>\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "10\n16\n15\n-14\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return (round($value));\n\
    }\necho closest_integer(\"10\");\necho PHP_EOL;\necho closest_integer(\"15.3\"\
    );\necho PHP_EOL;\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptvm367f1.php:27\n\
    Stack trace:\n#0 /tmp/tmptvm367f1.php(34): test()\n#1 {main}\n  thrown in /tmp/tmptvm367f1.php\
    \ on line 27\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $rounded\
    \ = round($value);\n    $ceiled = ceil($value);\n    $floored = floor($value);\n\
    \    $distance_rounded = abs($value - $rounded);\n    $distance_ceiled = abs($value\
    \ - $ceiled);\n    $distance_floored = abs($value - $floored);\n    if ($distance_rounded\
    \ <= $distance_ceiled && $distance_rounded <= $distance_floored) {\n        return\
    \ $rounded;\n    } elseif ($distance_ceiled <= $distance_rounded && $distance_ceiled\
    \ <= $distance_floored) {\n        return $ceiled;\n    } else {\n        return\
    \ $floored;\n    }\n}\necho 'closest_integer(\"10\")';\necho '<br>';\necho closest_integer(\"\
    10\");\necho '<br>';\necho 'closest_integer(\"15.3\")';\necho '<br>';\necho closest_integer(\"\
    15.3\");\necho '<br>';\necho 'closest_integer(\"14.5\")';\necho '<br>';\necho\
    \ closest_integer(\"14.5\");\necho '<br>';\necho 'closest_integer(\"-14.5\")';\n\
    echo '<br>';\necho closest_integer(\"-14.5\");\necho '<br>';\necho 'closest_integer(\"\
    -15.3\")';\necho '<br>';\necho closest_integer(\"-15.3\");\necho '<br>';\necho\
    \ 'closest_integer(\"-10\")';\necho '<br>';\necho closest_integer(\"-10\");\n\
    echo '<br>';\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "closest_integer(\"10\")<br>10<br>closest_integer(\"15.3\")<br>15<br>closest_integer(\"\
    14.5\")<br>15<br>closest_integer(\"-14.5\")<br>-15<br>closest_integer(\"-15.3\"\
    )<br>-15<br>closest_integer(\"-10\")<br>-10<br>\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpn8qypbay.php:59\nStack trace:\n#0 /tmp/tmpn8qypbay.php(66):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpn8qypbay.php on line 59\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    return round($value);\n\
    }\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpflqxpvyy.php:23\n\
    Stack trace:\n#0 /tmp/tmpflqxpvyy.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpflqxpvyy.php\
    \ on line 23\n"
  timestamp: 1659824629
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  //your code\
    \ here\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4m8ongco.php:24\n\
    Stack trace:\n#0 /tmp/tmp4m8ongco.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp4m8ongco.php\
    \ on line 24\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $val = (string)$value;\n\
    \    $val_array = explode('.', $val);\n    if(!isset($val_array[1])) {\n     \
    \   return $val;\n    } elseif($val_array[1] >= 5) {\n        return $val_array[0]\
    \ + 1;\n    } else {\n        return $val_array[0];\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwuhsglnk.php:31\n\
    Stack trace:\n#0 /tmp/tmpwuhsglnk.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpwuhsglnk.php\
    \ on line 31\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $number = floatval($value);\n\
    \  $number1 = ceil($number);\n  $number2 = floor($number);\n  if ($number - $number2\
    \ >= 0.5) {\n    return $number1;\n  } else {\n    return $number2;\n  }\n}\n\
    echo \"closest_integer(\\\"10\\\") => \" . closest_integer(\"10\") . \"\\n\";\n\
    echo \"closest_integer(\\\"15.3\\\") => \" . closest_integer(\"15.3\") . \"\\\
    n\";\necho \"closest_integer(\\\"14.5\\\") => \" . closest_integer(\"14.5\") .\
    \ \"\\n\";\necho \"closest_integer(\\\"-14.5\\\") => \" . closest_integer(\"-14.5\"\
    ) . \"\\n\";\necho \"closest_integer(\\\"-15.3\\\") => \" . closest_integer(\"\
    -15.3\") . \"\\n\";\necho \"closest_integer(\\\"0\\\") => \" . closest_integer(\"\
    0\") . \"\\n\";\necho \"closest_integer(\\\"-0.6\\\") => \" . closest_integer(\"\
    -0.6\") . \"\\n\";\necho \"closest_integer(\\\"0.6\\\") => \" . closest_integer(\"\
    0.6\") . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "closest_integer(\"10\") => 10\nclosest_integer(\"15.3\") => 15\nclosest_integer(\"\
    14.5\") => 15\nclosest_integer(\"-14.5\") => -14\nclosest_integer(\"-15.3\") =>\
    \ -15\nclosest_integer(\"0\") => 0\nclosest_integer(\"-0.6\") => -1\nclosest_integer(\"\
    0.6\") => 1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppgqzywzr.php:38\n\
    Stack trace:\n#0 /tmp/tmppgqzywzr.php(45): test()\n#1 {main}\n  thrown in /tmp/tmppgqzywzr.php\
    \ on line 38\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value);\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphahuve_r.php:24\n\
    Stack trace:\n#0 /tmp/tmphahuve_r.php(31): test()\n#1 {main}\n  thrown in /tmp/tmphahuve_r.php\
    \ on line 24\n"
  timestamp: 1659824629
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ is_float($value) ? $value : intval($value);\n    return $value - ($value % 1)\
    \ + ($value > 0 ? 0.5 : -0.5);\n}\necho closest_integer(\"10\") . \"\\n\";\necho\
    \ closest_integer(\"15.3\") . \"\\n\";\necho closest_integer(\"14.5\") . \"\\\
    n\";\necho closest_integer(\"-14.5\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10.5\n15.5\n14.5\n-14.5\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpd3mmje70.php:28\nStack trace:\n#0 /tmp/tmpd3mmje70.php(35): test()\n\
    #1 {main}\n  thrown in /tmp/tmpd3mmje70.php on line 28\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n\n}\n\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw53_1rhn.php:24\n\
    Stack trace:\n#0 /tmp/tmpw53_1rhn.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpw53_1rhn.php\
    \ on line 24\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // Convert\
    \ the value to a string because\n  // that is what is expected in the return\n\
    \  // statement.\n  $value = $value . \"\";\n  // Find the index of the \".\"\
    \ character.\n  $index = strpos($value, \".\");\n  // If there is a \".\" character,\
    \ find the\n  // substring after it.\n  if ($index) {\n    $value = substr($value,\
    \ $index + 1);\n  }\n  // If the value is less than 5, return the\n  // original\
    \ value cast to an integer.\n  if ($value < 5) {\n    return (int)$value;\n  }\n\
    \  // If the value is greater than or equal to 5,\n  // return the value + 1 cast\
    \ to an integer.\n  return (int)$value + 1;\n}\nfunction candidate(...$args) {\n\
    \    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi7u1pmnz.php:41\n\
    Stack trace:\n#0 /tmp/tmpi7u1pmnz.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpi7u1pmnz.php\
    \ on line 41\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = explode(\"\
    .\", $value);\n  $num = strlen($value[1]);\n  if($num % 2 == 0){\n    $val = round($value[1]);\n\
    \    $res = array($value[0], $val);\n    $res = implode($res);\n    return $res;\n\
    \  }\n  else{\n    $val = round($value[1], 1);\n    $res = array($value[0], $val);\n\
    \    $res = implode($res);\n    return $res;\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 1 in /tmp/tmpm57plp3h.php on line 17\n\n\
    Deprecated: strlen(): Passing null to parameter #1 ($string) of type string is\
    \ deprecated in /tmp/tmpm57plp3h.php on line 17\n\nWarning: Undefined array key\
    \ 1 in /tmp/tmpm57plp3h.php on line 19\n\nDeprecated: round(): Passing null to\
    \ parameter #1 ($num) of type int|float is deprecated in /tmp/tmpm57plp3h.php\
    \ on line 19\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm57plp3h.php:37\n\
    Stack trace:\n#0 /tmp/tmpm57plp3h.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpm57plp3h.php\
    \ on line 37\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    return round($value);\n\
    }\n\nprint_r(closest_integer(\"10\") . \"\\n\");\nprint_r(closest_integer(\"15.3\"\
    ) . \"\\n\");\nprint_r(closest_integer(\"14.5\") . \"\\n\");\nprint_r(closest_integer(\"\
    -14.5\") . \"\\n\");\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiyd34zh4.php:28\n\
    Stack trace:\n#0 /tmp/tmpiyd34zh4.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpiyd34zh4.php\
    \ on line 28\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $num = floatval($value);\n\
    \    $num_int = intval($num);\n    $int_above = intval($num) + 1;\n    $int_below\
    \ = intval($num) - 1;\n    $remainder = $num - $num_int;\n    if ($remainder ==\
    \ 0) {\n        return $num_int;\n    } else if ($remainder >= 0.5) {\n      \
    \  return $int_above;\n    } else {\n        return $int_below;\n    }\n}\n\n\
    function candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph82i_g5o.php:38\n\
    Stack trace:\n#0 /tmp/tmph82i_g5o.php(42): test()\n#1 {main}\n  thrown in /tmp/tmph82i_g5o.php\
    \ on line 38\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // Your code\
    \ here\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeivfax32.php:24\n\
    Stack trace:\n#0 /tmp/tmpeivfax32.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpeivfax32.php\
    \ on line 24\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    return round($value);\n\
    }\necho closest_integer(\"10\");\necho \"\\n\";\necho closest_integer(\"15.3\"\
    );\necho \"\\n\";\necho closest_integer(\"14.5\");\necho \"\\n\";\necho closest_integer(\"\
    -14.5\");\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4e6zpe1a.php:30\n\
    Stack trace:\n#0 /tmp/tmp4e6zpe1a.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp4e6zpe1a.php\
    \ on line 30\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    return round($value);\n\
    }\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpflqxpvyy.php:23\n\
    Stack trace:\n#0 /tmp/tmpflqxpvyy.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpflqxpvyy.php\
    \ on line 23\n"
  timestamp: 1659824629
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n\t$to_return\
    \ = (int) $value;\n\t$decimal = $value - $to_return;\n\treturn $decimal > 0 ?\
    \ $to_return + 1 : $to_return;\n}\n\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprfo9xx1m.php:28\n\
    Stack trace:\n#0 /tmp/tmprfo9xx1m.php(33): test()\n#1 {main}\n  thrown in /tmp/tmprfo9xx1m.php\
    \ on line 28\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    return (int)$value;\n\
    }\n\necho \"<pre>closest_integer('14.5')\\r\\n\";\nvar_dump(closest_integer('14.5'));\n\
    echo \"</pre>\";\necho \"<pre>closest_integer('10')\\r\\n\";\nvar_dump(closest_integer('10'));\n\
    echo \"</pre>\";\necho \"<pre>closest_integer('15.3')\\r\\n\";\nvar_dump(closest_integer('15.3'));\n\
    echo \"</pre>\";\necho \"<pre>closest_integer('-14.5')\\r\\n\";\nvar_dump(closest_integer('-14.5'));\n\
    echo \"</pre>\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>closest_integer('14.5')\r\nint(14)\n</pre><pre>closest_integer('10')\r\
    \nint(10)\n</pre><pre>closest_integer('15.3')\r\nint(15)\n</pre><pre>closest_integer('-14.5')\r\
    \nint(-14)\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcag4ijkb.php:37\n\
    Stack trace:\n#0 /tmp/tmpcag4ijkb.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpcag4ijkb.php\
    \ on line 37\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    // Write\
    \ your code here\n    // To print results to the standard output you can use print\n\
    \    // Example:\n    // print \"Hello world!\";\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaei_n8fb.php:27\n\
    Stack trace:\n#0 /tmp/tmpaei_n8fb.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpaei_n8fb.php\
    \ on line 27\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $closest\
    \ = round($value);\n    $is_closest_up = $closest < $value;\n    $diff_up = abs($closest\
    \ - $value);\n    $diff_down = abs($closest - $value);\n    if ($diff_up > $diff_down)\
    \ {\n        $closest = $closest - 1;\n    }\n    return $closest;\n}\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_0yu9m9u.php:30\n\
    Stack trace:\n#0 /tmp/tmp_0yu9m9u.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp_0yu9m9u.php\
    \ on line 30\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $number =\
    \ round($value);\n    return $number;\n}\nfunction candidate(...$args) {\n   \
    \ return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp53k4r5jz.php:24\n\
    Stack trace:\n#0 /tmp/tmp53k4r5jz.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp53k4r5jz.php\
    \ on line 24\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    return round($value);\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsxboo4dn.php:24\n\
    Stack trace:\n#0 /tmp/tmpsxboo4dn.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpsxboo4dn.php\
    \ on line 24\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    return round($value);\n\
    }\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpflqxpvyy.php:23\n\
    Stack trace:\n#0 /tmp/tmpflqxpvyy.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpflqxpvyy.php\
    \ on line 23\n"
  timestamp: 1659824629
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value);\n\
    }\necho closest_integer(\"14.5\");\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp06teadfs.php:24\n\
    Stack trace:\n#0 /tmp/tmp06teadfs.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp06teadfs.php\
    \ on line 24\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $s = (string)\
    \ $value;\n    $dot = strpos($s, '.');\n    if ($dot === false) {\n        return\
    \ (int) $s;\n    }\n    $s = str_replace('.', '', $s);\n    $n = $s[$dot];\n \
    \   if ($n > 5) {\n        $s[$dot] = '5';\n        $s = intval($s);\n       \
    \ return $s + 1;\n    }\n    $s[$dot] = '5';\n    return intval($s);\n}\n\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaejfhwf1.php:38\n\
    Stack trace:\n#0 /tmp/tmpaejfhwf1.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpaejfhwf1.php\
    \ on line 38\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n   return round($value);\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp78wtblcd.php:24\n\
    Stack trace:\n#0 /tmp/tmp78wtblcd.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp78wtblcd.php\
    \ on line 24\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $ret = round($value);\n\
    \    if ($ret > $value) {\n        $ret -= 1;\n    }\n    return $ret;\n}\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi3c8x0k1.php:27\n\
    Stack trace:\n#0 /tmp/tmpi3c8x0k1.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpi3c8x0k1.php\
    \ on line 27\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    return round($value);\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsxboo4dn.php:24\n\
    Stack trace:\n#0 /tmp/tmpsxboo4dn.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpsxboo4dn.php\
    \ on line 24\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $val = 0;\n\
    \  $val = ($value - floor($value) >= 0.5) ? ceil($value) : floor($value);\n  return\
    \ $val;\n}\necho closest_integer(\"10\") . \"\\n\";\necho closest_integer(\"15.3\"\
    ) . \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdfw4xh1e.php:29\n\
    Stack trace:\n#0 /tmp/tmpdfw4xh1e.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpdfw4xh1e.php\
    \ on line 29\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ (float)$value;\n    return $value - $value % 1 >= 0.5 ? ceil($value) : floor($value);\n\
    }\n$test = closest_integer(\"10\");\nprint_r($test);\necho \"\\n\";\n$test2 =\
    \ closest_integer(\"15.3\");\nprint_r($test2);\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n\nDeprecated: Implicit conversion from float 15.3 to int loses precision\
    \ in /tmp/tmpi4r37nz8.php on line 17\n16\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpi4r37nz8.php:30\nStack trace:\n#0 /tmp/tmpi4r37nz8.php(37):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpi4r37nz8.php on line 30\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    //\n}\n\n\
    function candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp47ba54om.php:24\n\
    Stack trace:\n#0 /tmp/tmp47ba54om.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp47ba54om.php\
    \ on line 24\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $number =\
    \ round($value);\n    if($number > $value) {\n        return $number - 1;\n  \
    \  }\n    else {\n        return $number;\n    }\n}\necho \"closest_integer(\\\
    \"10\\\")\";\necho \"<br>\";\necho closest_integer(\"10\");\necho \"<br>\";\n\
    echo \"closest_integer(\\\"15.3\\\")\";\necho \"<br>\";\necho closest_integer(\"\
    15.3\");\necho \"<br>\";\necho \"closest_integer(\\\"14.5\\\")\";\necho \"<br>\"\
    ;\necho closest_integer(\"14.5\");\necho \"<br>\";\necho \"closest_integer(\\\"\
    -14.5\\\")\";\necho \"<br>\";\necho closest_integer(\"-14.5\");\necho \"<br>\"\
    ;\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "closest_integer(\"10\")<br>10<br>closest_integer(\"15.3\")<br>15<br>closest_integer(\"\
    14.5\")<br>14<br>closest_integer(\"-14.5\")<br>-15<br>\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpi_i4c16s.php:45\nStack trace:\n#0 /tmp/tmpi_i4c16s.php(52):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpi_i4c16s.php on line 45\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $result =\
    \ round($value);\n    return $result;\n}\nprint \"Closest Integer: \" . closest_integer(\"\
    10\") . \"\\n\";\nprint \"Closest Integer: \" . closest_integer(\"15.3\") . \"\
    \\n\";\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Closest Integer: 10\nClosest Integer: 15\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpaeuhz2se.php:27\nStack trace:\n#0 /tmp/tmpaeuhz2se.php(34):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpaeuhz2se.php on line 27\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $num = floor($value);\n\
    \  $diff = $value - $num;\n  if ($diff == 0.5) {\n    if ($value > 0) {\n    \
    \  return $num + 1;\n    } else {\n      return $num - 1;\n    }\n  } else {\n\
    \    return round($value);\n  }\n}\n\necho closest_integer(\"10\") . PHP_EOL;\n\
    echo closest_integer(\"15.3\") . PHP_EOL;\necho closest_integer(\"14.5\") . PHP_EOL;\n\
    echo closest_integer(\"-14.5\") . PHP_EOL;\necho closest_integer(\"15.6\") . PHP_EOL;\n\
    echo closest_integer(\"-15.5\") . PHP_EOL;\necho closest_integer(\"15.4\") . PHP_EOL;\n\
    echo closest_integer(\"-15.4\") . PHP_EOL;\nfunction candidate(...$args) {\n \
    \   return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-16\n16\n-17\n15\n-15\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpcs24xsy0.php:42\nStack trace:\n#0 /tmp/tmpcs24xsy0.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpcs24xsy0.php on line 42\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    // Write\
    \ your code here\n    // To print results to the standard output you can use print\n\
    \    // Example:\n    // print \"Hello world!\";\n    if(round($value) == $value)\n\
    \    {\n        return $value;\n    }\n    if(round($value) < $value)\n    {\n\
    \        return round($value)+1;\n    }\n    if(round($value) > $value)\n    {\n\
    \        return round($value)-1;\n    }\n}\nfunction candidate(...$args) {\n \
    \   return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsnru2cs0.php:38\n\
    Stack trace:\n#0 /tmp/tmpsnru2cs0.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpsnru2cs0.php\
    \ on line 38\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $vals = explode(\"\
    .\", $value);\n  $int = intval($vals[0]);\n  if (sizeof($vals) > 1) {\n    $dec\
    \ = intval($vals[1]);\n    $int += $dec > 4 ? 1 : 0;\n  }\n  return $int;\n}\n\
    \nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsieq51ri.php:32\n\
    Stack trace:\n#0 /tmp/tmpsieq51ri.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpsieq51ri.php\
    \ on line 32\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // Your code\
    \ here\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeivfax32.php:24\n\
    Stack trace:\n#0 /tmp/tmpeivfax32.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpeivfax32.php\
    \ on line 24\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    // Write\
    \ your code here\n    // To print results to the standard output you can use print\n\
    \    // Example:\n    // print \"Hello world!\";\n    $v = (string)$value;\n \
    \   $d = strpos($v, '.');\n    if($d === false) return $v;\n    if(substr($v,\
    \ $d + 1, 1) >= 5) return substr($v, 0, $d) + 1;\n    return substr($v, 0, $d);\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsx0fsv5i.php:32\n\
    Stack trace:\n#0 /tmp/tmpsx0fsv5i.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpsx0fsv5i.php\
    \ on line 32\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n\t$int = intval($value);\n\
    \t$float = floatval($value);\n\tif ($float - $int < 0.5) {\n\t\treturn $int;\n\
    \t} else {\n\t\treturn $int + 1;\n\t}\n}\nfunction candidate(...$args) {\n   \
    \ return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpax5f11e1.php:31\n\
    Stack trace:\n#0 /tmp/tmpax5f11e1.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpax5f11e1.php\
    \ on line 31\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n\t// TODO: your\
    \ code here\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8_fjhuv5.php:24\n\
    Stack trace:\n#0 /tmp/tmp8_fjhuv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp8_fjhuv5.php\
    \ on line 24\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    return $value;\n\
    }\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj57w7ab8.php:23\n\
    Stack trace:\n#0 /tmp/tmpj57w7ab8.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpj57w7ab8.php\
    \ on line 23\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = number_format((float)$value,\
    \ 0, '.', '');\n  return $value;\n}\n\nclosest_integer(\"-14.5\");\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp08dba8e1.php:26\n\
    Stack trace:\n#0 /tmp/tmp08dba8e1.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp08dba8e1.php\
    \ on line 26\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n\treturn round($value);\n\
    }\necho closest_integer(\"10\") . \"\\n\";\necho closest_integer(\"15.3\") . \"\
    \\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpncnrlqfa.php:25\n\
    Stack trace:\n#0 /tmp/tmpncnrlqfa.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpncnrlqfa.php\
    \ on line 25\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n\tif (strstr($value,\
    \ '.')) {\n\t\treturn round($value);\n\t} else {\n\t\treturn intval($value);\n\
    \t}\n}\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"-14.5\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0r0wfhsf.php:30\n\
    Stack trace:\n#0 /tmp/tmp0r0wfhsf.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp0r0wfhsf.php\
    \ on line 30\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value);\n\
    }\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6o8v2fx5.php:23\n\
    Stack trace:\n#0 /tmp/tmp6o8v2fx5.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp6o8v2fx5.php\
    \ on line 23\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $negative =\
    \ false;\n  if ($value < 0) {\n    $negative = true;\n    $value = $value * -1;\n\
    \  }\n  $parts = explode('.', $value);\n  if ($parts[1] > 4) {\n    $parts[0]++;\n\
    \  }\n  $value = $parts[0];\n  if ($negative) {\n    $value = $value * -1;\n \
    \ }\n  return $value;\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 1 in /tmp/tmpv5we4018.php on line 22\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpv5we4018.php:36\nStack\
    \ trace:\n#0 /tmp/tmpv5we4018.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpv5we4018.php\
    \ on line 36\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $closest =\
    \ round($value);\n  if ($closest > $value) {\n    return $closest - 1;\n  } else\
    \ {\n    return $closest;\n  }\n}\necho closest_integer(\"10\") . \"<br>\";\n\
    echo closest_integer(\"15.3\") . \"<br>\";\necho closest_integer(\"14.5\") . \"\
    <br>\";\necho closest_integer(\"-14.5\") . \"<br>\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10<br>15<br>14<br>-15<br>\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpetlxyiux.php:32\nStack trace:\n#0 /tmp/tmpetlxyiux.php(39): test()\n\
    #1 {main}\n  thrown in /tmp/tmpetlxyiux.php on line 32\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value);\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphahuve_r.php:24\n\
    Stack trace:\n#0 /tmp/tmphahuve_r.php(31): test()\n#1 {main}\n  thrown in /tmp/tmphahuve_r.php\
    \ on line 24\n"
  timestamp: 1659824629
- exit_code: 0
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    return (int)\
    \ round($value);\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n\t$round = round($value);\n\
    \tif ($round > $value) {\n\t\treturn $round - 1;\n\t} else {\n\t\treturn $round;\n\
    \t}\n}\necho closest_integer('15.3') . PHP_EOL;\necho closest_integer('10') .\
    \ PHP_EOL;\necho closest_integer('14.5') . PHP_EOL;\necho closest_integer('-14.5')\
    \ . PHP_EOL;\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\n10\n14\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbqzyha97.php:32\n\
    Stack trace:\n#0 /tmp/tmpbqzyha97.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpbqzyha97.php\
    \ on line 32\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $ceil = ceil($value);\n\
    \    $floor = floor($value);\n    if ($ceil - $value >= 0.5) {\n        return\
    \ $floor;\n    } else {\n        return $ceil;\n    }\n}\necho closest_integer(\"\
    14.5\");\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "14\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp39r46l1r.php:30\n\
    Stack trace:\n#0 /tmp/tmp39r46l1r.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp39r46l1r.php\
    \ on line 30\n"
  timestamp: 1660029070
- exit_code: 0
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    return (int)round($value);\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n\t// round returns\
    \ float with precision\n\t// and intval always returns an integer\n\t// so adding\
    \ an intval in the returned\n\t// function is not necessary\n\treturn round($value);\n\
    }\necho closest_integer(\"10\") . PHP_EOL;\necho closest_integer(\"15.3\") . PHP_EOL;\n\
    echo closest_integer(\"14.5\") . PHP_EOL;\necho closest_integer(\"-14.5\") . PHP_EOL;\n\
    \nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2p3guk3l.php:32\n\
    Stack trace:\n#0 /tmp/tmp2p3guk3l.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp2p3guk3l.php\
    \ on line 32\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $whole =\
    \ floor($value);\n    $decimal = $value - $whole;\n    $ceil = ceil($value);\n\
    \    if ($decimal < 0.5) {\n        return $whole;\n    } else {\n        return\
    \ $ceil;\n    }\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcwd22tzg.php:30\n\
    Stack trace:\n#0 /tmp/tmpcwd22tzg.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpcwd22tzg.php\
    \ on line 30\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $intval =\
    \ intval($value);\n    $decimals = $value - $intval;\n    if ($decimals >= 0.5)\
    \ {\n        return $intval + 1;\n    } else {\n        return $intval;\n    }\n\
    }\n\necho closest_integer(\"10\") . \"\\n\";\necho closest_integer(\"15.3\") .\
    \ \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3yyiu2i4.php:37\n\
    Stack trace:\n#0 /tmp/tmp3yyiu2i4.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp3yyiu2i4.php\
    \ on line 37\n"
  timestamp: 1660029070
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (int)$value;\n\
    \  if (strpos($value, \".\") !== false) {\n    if ($value > 0) {\n      return\
    \ (int)ceil($value);\n    } else {\n      return (int)floor($value);\n    }\n\
    \  } else {\n    return $value;\n  }\n}\n\necho closest_integer(\"14.5\");\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "14\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp66ppggfd.php:35\n\
    Stack trace:\n#0 /tmp/tmp66ppggfd.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp66ppggfd.php\
    \ on line 35\n"
  timestamp: 1660029070
