language: php
name: HumanEval_158_find_max
results:
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $res =\
    \ '';\n    foreach ($words as $word) {\n        $letters = str_split($word);\n\
    \        $count = count(array_unique($letters));\n        if ($count > $max) {\n\
    \            $max = $count;\n            $res = $word;\n        }\n    }\n   \
    \ return $res;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1ekfuvn6.php:32\n\
    Stack trace:\n#0 /tmp/tmp1ekfuvn6.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp1ekfuvn6.php\
    \ on line 32\n"
  timestamp: 1659823903
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $max_string = \"\";\n \
    \ $max_count = 0;\n  foreach ($words as $word) {\n    if (count_unique_characters($word)\
    \ > $max_count) {\n      $max_string = $word;\n      $max_count = count_unique_characters($word);\n\
    \    }\n  }\n  return $max_string;\n}\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_characters()\
    \ in /tmp/tmpjt__nc5k.php:16\nStack trace:\n#0 /tmp/tmpjt__nc5k.php(24): find_max(Array)\n\
    #1 /tmp/tmpjt__nc5k.php(28): candidate(Array)\n#2 /tmp/tmpjt__nc5k.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpjt__nc5k.php on line 16\n"
  timestamp: 1659823903
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $max = 0;\n  $maxIndex\
    \ = 0;\n  for ($i = 0; $i < count($words); $i++) {\n    $unique = 0;\n    $unique_arr\
    \ = array();\n    for ($j = 0; $j < strlen($words[$i]); $j++) {\n      if (!in_array($words[$i][$j],\
    \ $unique_arr)) {\n        $unique_arr[] = $words[$i][$j];\n        $unique++;\n\
    \      }\n    }\n    if ($unique > $max) {\n      $max = $unique;\n      $maxIndex\
    \ = $i;\n    }\n  }\n  return $words[$maxIndex];\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8u67ozw5.php:38\n\
    Stack trace:\n#0 /tmp/tmp8u67ozw5.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp8u67ozw5.php\
    \ on line 38\n"
  timestamp: 1659823903
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use print\n  // Example:\
    \ print \"Hello world!\";\n  $max_count = 0;\n  $result = \"\";\n  foreach ($words\
    \ as $word) {\n    $count = count_unique_characters($word);\n    if ($count >\
    \ $max_count) {\n      $max_count = $count;\n      $result = $word;\n    }\n \
    \ }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_characters()\
    \ in /tmp/tmpmhn0eyac.php:19\nStack trace:\n#0 /tmp/tmpmhn0eyac.php(29): find_max(Array)\n\
    #1 /tmp/tmpmhn0eyac.php(33): candidate(Array)\n#2 /tmp/tmpmhn0eyac.php(45): test()\n\
    #3 {main}\n  thrown in /tmp/tmpmhn0eyac.php on line 19\n"
  timestamp: 1659823903
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n\t$max_count = 0;\n\t$max_word\
    \ = '';\n\tforeach ($words as $word) {\n\t\t$count = count_unique_characters($word);\n\
    \t\tif ($count > $max_count) {\n\t\t\t$max_count = $count;\n\t\t\t$max_word =\
    \ $word;\n\t\t}\n\t}\n\treturn $max_word;\n}\nfunction candidate(...$args) {\n\
    \    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_characters()\
    \ in /tmp/tmpve_frnkx.php:16\nStack trace:\n#0 /tmp/tmpve_frnkx.php(25): find_max(Array)\n\
    #1 /tmp/tmpve_frnkx.php(29): candidate(Array)\n#2 /tmp/tmpve_frnkx.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpve_frnkx.php on line 16\n"
  timestamp: 1659823903
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n\t$max = 0;\n\t$res = '';\n\
    \tforeach ($words as $word) {\n\t\t$count = count_chars($word, 1);\n\t\tif (count($count)\
    \ > $max) {\n\t\t\t$max = count($count);\n\t\t\t$res = $word;\n\t\t}\n\t}\n\t\
    return $res;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjp_lv_8w.php:31\n\
    Stack trace:\n#0 /tmp/tmpjp_lv_8w.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpjp_lv_8w.php\
    \ on line 31\n"
  timestamp: 1659823903
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n\t$str_length = $words[0];\n\
    \t$str_size = strlen($str_length);\n\t$new_str = \"\";\n\tfor ($i = 0; $i < count($words);\
    \ $i++) {\n\t\t$current_length = strlen($words[$i]);\n\t\tif ($current_length\
    \ > $str_size) {\n\t\t\t$str_size = $current_length;\n\t\t\t$str_length = $words[$i];\n\
    \t\t}\n\t}\n\treturn $str_length;\n}\n\nprint_r(find_max(array(\"name\", \"of\"\
    , \"string\")) . PHP_EOL);\nprint_r(find_max(array(\"name\", \"enam\", \"game\"\
    )) . PHP_EOL);\nprint_r(find_max(array(\"aaaaaaa\", \"bb\", \"cc\")) . PHP_EOL);\n\
    \nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "string\nname\naaaaaaa\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp83joayey.php:36\nStack trace:\n#0 /tmp/tmp83joayey.php(47): test()\n\
    #1 {main}\n  thrown in /tmp/tmp83joayey.php on line 36\n"
  timestamp: 1659823903
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n\t$max = '';\n\t$max_unique\
    \ = 0;\n\tforeach ($words as $word) {\n\t\t$unique = strlen(unique_chars($word));\n\
    \t\tif ($unique > $max_unique) {\n\t\t\t$max = $word;\n\t\t\t$max_unique = $unique;\n\
    \t\t}\n\t}\n\treturn $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function unique_chars()\
    \ in /tmp/tmpbtu_9kpe.php:16\nStack trace:\n#0 /tmp/tmpbtu_9kpe.php(26): find_max(Array)\n\
    #1 /tmp/tmpbtu_9kpe.php(30): candidate(Array)\n#2 /tmp/tmpbtu_9kpe.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmpbtu_9kpe.php on line 16\n"
  timestamp: 1659823903
- exit_code: 0
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $words = array_map(function($str)\
    \ {\n    return array(\n      'string' => $str,\n      'count' => count(array_flip(str_split($str)))\n\
    \    );\n  }, $words);\n  usort($words, function($a, $b) {\n    if ($a['count']\
    \ === $b['count']) {\n      return strcmp($a['string'], $b['string']);\n    }\n\
    \    return $a['count'] < $b['count'];\n  });\n  return $words[0]['string'];\n\
    }\n$tests = array(\n  array(\"name\", \"of\", \"string\"),\n  array(\"name\",\
    \ \"enam\", \"game\"),\n  array(\"aaaaaaa\", \"bb\", \"cc\")\n);\nforeach ($tests\
    \ as $test) {\n  echo find_max($test) . \"\\n\";\n}\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Deprecated: usort(): Returning bool from comparison function is deprecated, return
    an integer less than, equal to, or greater than zero in /tmp/tmpo4x3zzuz.php on
    line 24

    string

    enam

    aaaaaaa


    Deprecated: usort(): Returning bool from comparison function is deprecated, return
    an integer less than, equal to, or greater than zero in /tmp/tmpo4x3zzuz.php on
    line 24


    Deprecated: usort(): Returning bool from comparison function is deprecated, return
    an integer less than, equal to, or greater than zero in /tmp/tmpo4x3zzuz.php on
    line 24


    Deprecated: usort(): Returning bool from comparison function is deprecated, return
    an integer less than, equal to, or greater than zero in /tmp/tmpo4x3zzuz.php on
    line 24


    Deprecated: usort(): Returning bool from comparison function is deprecated, return
    an integer less than, equal to, or greater than zero in /tmp/tmpo4x3zzuz.php on
    line 24


    Deprecated: usort(): Returning bool from comparison function is deprecated, return
    an integer less than, equal to, or greater than zero in /tmp/tmpo4x3zzuz.php on
    line 24

    '
  timestamp: 1659823903
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n\t$max_word = $words[0];\n\
    \t$max_num_unique_chars = count_unique_chars($max_word);\n\tforeach ($words as\
    \ $word) {\n\t\t$num_unique_chars = count_unique_chars($word);\n\t\tif ($num_unique_chars\
    \ > $max_num_unique_chars) {\n\t\t\t$max_word = $word;\n\t\t\t$max_num_unique_chars\
    \ = $num_unique_chars;\n\t\t}\n\t}\n\treturn $max_word;\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmpzwb8nywe.php:14\nStack trace:\n#0 /tmp/tmpzwb8nywe.php(26): find_max(Array)\n\
    #1 /tmp/tmpzwb8nywe.php(30): candidate(Array)\n#2 /tmp/tmpzwb8nywe.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmpzwb8nywe.php on line 14\n"
  timestamp: 1659823903
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $temp\
    \ = 0;\n    $answer = \"\";\n    for ($i = 0; $i < count($words); $i++) {\n  \
    \      $temp = count_chars($words[$i], 1);\n        if (count($temp) > $max) {\n\
    \            $max = count($temp);\n            $answer = $words[$i];\n       \
    \ }\n    }\n    return $answer;\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn56ejvev.php:32\n\
    Stack trace:\n#0 /tmp/tmpn56ejvev.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpn56ejvev.php\
    \ on line 32\n"
  timestamp: 1659823903
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $word = \"\";\n    $maxChars\
    \ = 0;\n    foreach ($words as $w) {\n        $arr = str_split($w);\n        $unique\
    \ = 0;\n        $used = array();\n        foreach ($arr as $char) {\n        \
    \    if (!in_array($char, $used)) {\n                $unique++;\n            \
    \    $used[] = $char;\n            }\n        }\n        if ($unique > $maxChars)\
    \ {\n            $maxChars = $unique;\n            $word = $w;\n        }\n  \
    \  }\n    return $word;\n}\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi_5n1r9s.php:38\n\
    Stack trace:\n#0 /tmp/tmpi_5n1r9s.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpi_5n1r9s.php\
    \ on line 38\n"
  timestamp: 1659823903
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $unique = array();\n  $max\
    \ = 0;\n  $max_key = 0;\n  foreach ($words as $key => $value) {\n    $unique[$key]\
    \ = str_split($value);\n    $unique[$key] = array_unique($unique[$key]);\n   \
    \ $unique[$key] = count($unique[$key]);\n    if ($unique[$key] > $max) {\n   \
    \   $max = $unique[$key];\n      $max_key = $key;\n    }\n  }\n  return $words[$max_key];\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6xfhfge4.php:34\n\
    Stack trace:\n#0 /tmp/tmp6xfhfge4.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp6xfhfge4.php\
    \ on line 34\n"
  timestamp: 1659823903
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n\t$max_word = \"\";\n\t$max_count\
    \ = 0;\n\tforeach ($words as $word) {\n\t\t$count = count_unique_chars($word);\n\
    \t\tif ($count > $max_count) {\n\t\t\t$max_count = $count;\n\t\t\t$max_word =\
    \ $word;\n\t\t}\n\t}\n\treturn $max_word;\n}\nfunction candidate(...$args) {\n\
    \    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmpoecnsa2u.php:16\nStack trace:\n#0 /tmp/tmpoecnsa2u.php(25): find_max(Array)\n\
    #1 /tmp/tmpoecnsa2u.php(29): candidate(Array)\n#2 /tmp/tmpoecnsa2u.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpoecnsa2u.php on line 16\n"
  timestamp: 1659823903
- exit_code: 0
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $max_unique_chars = 0;\n\
    \  $max_unique_char_word = '';\n  foreach ($words as $word) {\n    $unique_chars\
    \ = str_split(implode('', array_unique(str_split($word))));\n    $num_unique_chars\
    \ = count($unique_chars);\n    if ($num_unique_chars > $max_unique_chars) {\n\
    \      $max_unique_chars = $num_unique_chars;\n      $max_unique_char_word = $word;\n\
    \    } else if ($num_unique_chars == $max_unique_chars) {\n      if ($word < $max_unique_char_word)\
    \ {\n        $max_unique_char_word = $word;\n      }\n    }\n  }\n  return $max_unique_char_word;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823903
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $max = 0;\n  $result =\
    \ '';\n  foreach ($words as $word) {\n    $letter_count = count_unique_letters($word);\n\
    \    if ($letter_count > $max) {\n      $max = $letter_count;\n      $result =\
    \ $word;\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_letters()\
    \ in /tmp/tmpc88py45t.php:16\nStack trace:\n#0 /tmp/tmpc88py45t.php(26): find_max(Array)\n\
    #1 /tmp/tmpc88py45t.php(30): candidate(Array)\n#2 /tmp/tmpc88py45t.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmpc88py45t.php on line 16\n"
  timestamp: 1659823903
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $word_max = '';\n   \
    \ foreach ($words as $word) {\n        $char_arr = str_split($word);\n       \
    \ $max_chars = array_unique($char_arr);\n        if (count($max_chars) > count($word_max))\
    \ {\n            $word_max = $word;\n        }\n    }\n    return $word_max;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: count(): Argument #1 ($value) must be\
    \ of type Countable|array, string given in /tmp/tmpvnkjy1ki.php:17\nStack trace:\n\
    #0 /tmp/tmpvnkjy1ki.php(25): find_max(Array)\n#1 /tmp/tmpvnkjy1ki.php(29): candidate(Array)\n\
    #2 /tmp/tmpvnkjy1ki.php(41): test()\n#3 {main}\n  thrown in /tmp/tmpvnkjy1ki.php\
    \ on line 17\n"
  timestamp: 1659823903
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $max_count = 0;\n  $max_word\
    \ = '';\n  foreach ($words as $word) {\n    $word_count = count_unique_chars($word);\n\
    \    if ($word_count > $max_count) {\n      $max_count = $word_count;\n      $max_word\
    \ = $word;\n    }\n  }\n  return $max_word;\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmp585q94j9.php:16\nStack trace:\n#0 /tmp/tmp585q94j9.php(26): find_max(Array)\n\
    #1 /tmp/tmp585q94j9.php(30): candidate(Array)\n#2 /tmp/tmp585q94j9.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmp585q94j9.php on line 16\n"
  timestamp: 1659823903
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max_word = '';\n   \
    \ $max_count = 0;\n    foreach ($words as $word) {\n        $unique_chars = array_unique(str_split($word));\n\
    \        $unique_count = count($unique_chars);\n        if ($unique_count > $max_count)\
    \ {\n            $max_count = $unique_count;\n            $max_word = $word;\n\
    \        }\n    }\n    return $max_word;\n}\n$arr = array(\"name\", \"of\", \"\
    string\");\necho find_max($arr);\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "string\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp44kh_n2p.php:33\n\
    Stack trace:\n#0 /tmp/tmp44kh_n2p.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp44kh_n2p.php\
    \ on line 33\n"
  timestamp: 1659823903
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $current_word = $words[0];\n\
    \  $count = 0;\n  $max_count = 0;\n  $max_word = $current_word;\n  $pos = 0;\n\
    \  $length = strlen($current_word);\n  for ($i = 0; $i < count($words); $i++)\
    \ {\n    if ($current_word == $words[$i]) {\n      continue;\n    }\n    $current_word\
    \ = $words[$i];\n    $count = 0;\n    $pos = 0;\n    $length = strlen($current_word);\n\
    \    while ($pos < $length) {\n      if (strpos($current_word, $current_word[$pos],\
    \ $pos + 1) === false) {\n        $count++;\n      }\n      $pos++;\n    }\n \
    \   if ($count > $max_count) {\n      $max_count = $count;\n      $max_word =\
    \ $current_word;\n    }\n  }\n  return $max_word;\n}\n\n$words = array(\"name\"\
    , \"of\", \"string\");\n$result = find_max($words);\necho $result . \"\\n\";\n\
    \n$words = array(\"name\", \"enam\", \"game\");\n$result = find_max($words);\n\
    echo $result . \"\\n\";\n\n$words = array(\"aaaaaaa\", \"bb\", \"cc\");\n$result\
    \ = find_max($words);\necho $result . \"\\n\";\nfunction candidate(...$args) {\n\
    \    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "string\nenam\nbb\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6d9hn3pi.php:59\n\
    Stack trace:\n#0 /tmp/tmp6d9hn3pi.php(69): test()\n#1 {main}\n  thrown in /tmp/tmp6d9hn3pi.php\
    \ on line 59\n"
  timestamp: 1659823903
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $max_word = $words[0];\n\
    \  foreach ($words as $word) {\n    if (count_unique_chars($word) > count_unique_chars($max_word))\
    \ {\n      $max_word = $word;\n    }\n  }\n  return $max_word;\n}\n\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmp5bzhnmrv.php:15\nStack trace:\n#0 /tmp/tmp5bzhnmrv.php(23): find_max(Array)\n\
    #1 /tmp/tmp5bzhnmrv.php(27): candidate(Array)\n#2 /tmp/tmp5bzhnmrv.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmp5bzhnmrv.php on line 15\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max_count = 0;\n   \
    \ $max_index = 0;\n    foreach ($words as $index => $word) {\n        $unique_chars\
    \ = array_unique(str_split($word));\n        $unique_chars_count = count($unique_chars);\n\
    \        if ($unique_chars_count > $max_count) {\n            $max_count = $unique_chars_count;\n\
    \            $max_index = $index;\n        }\n    }\n    return $words[$max_index];\n\
    }\n\n$a = array(\"name\", \"of\", \"string\");\n$b = array(\"name\", \"enam\"\
    , \"game\");\n$c = array(\"aaaaaaa\", \"bb\", \"cc\");\necho find_max($a);\necho\
    \ find_max($b);\necho find_max($c);\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "stringnameaaaaaaa\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw23mkyqn.php:38\n\
    Stack trace:\n#0 /tmp/tmpw23mkyqn.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpw23mkyqn.php\
    \ on line 38\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $wordLen = [];\n    foreach\
    \ ($words as $word) {\n        $wordLen[$word] = strlen(count_chars($word, 1));\n\
    \    }\n    asort($wordLen);\n    end($wordLen);\n    return key($wordLen);\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: strlen(): Argument #1 ($str) must be\
    \ of type string, array given in /tmp/tmp5f0c2cwt.php:15\nStack trace:\n#0 /tmp/tmp5f0c2cwt.php(23):\
    \ find_max(Array)\n#1 /tmp/tmp5f0c2cwt.php(27): candidate(Array)\n#2 /tmp/tmp5f0c2cwt.php(39):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp5f0c2cwt.php on line 15\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_word\
    \ = $words[0];\n    foreach ($words as $word) {\n        $unique_chars = array_unique(str_split($word));\n\
    \        if (count($unique_chars) > $max) {\n            $max = count($unique_chars);\n\
    \            $max_word = $word;\n        }\n    }\n    return $max_word;\n}\n\n\
    assert(find_max(array(\"name\", \"of\", \"string\")) == \"string\");\nassert(find_max(array(\"\
    name\", \"enam\", \"game\")) == \"enam\");\nassert(find_max(array(\"aaaaaaa\"\
    , \"bb\", \"cc\")) == \"aaaaaaa\");\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught AssertionError: assert(find_max(['name', 'enam',\
    \ 'game']) == 'enam') in /tmp/tmpn2e2hy9t.php:26\nStack trace:\n#0 /tmp/tmpn2e2hy9t.php(26):\
    \ assert(false, 'assert(find_max...')\n#1 {main}\n  thrown in /tmp/tmpn2e2hy9t.php\
    \ on line 26\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $maxWord;\n  $maxCharCount\
    \ = 0;\n  foreach ($words as $w) {\n    $charCount = count_chars($w, 1);\n   \
    \ if (count($charCount) > $maxCharCount) {\n      $maxCharCount = count($charCount);\n\
    \      $maxWord = $w;\n    }\n  }\n  return $maxWord;\n}\nprint_r(find_max(array(\"\
    name\", \"of\", \"string\"))); // string\nprint_r(find_max(array(\"name\", \"\
    enam\", \"game\"))); // enam\nprint_r(find_max(array(\"aaaaaaa\", \"bb\", \"cc\"\
    ))); // aaaaaaa\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "stringnameaaaaaaa\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5y176yj6.php:33\n\
    Stack trace:\n#0 /tmp/tmp5y176yj6.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp5y176yj6.php\
    \ on line 33\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $max = count_chars($words[0]);\n\
    \  $max = array_keys($max)[0];\n  $maxString = $words[0];\n  foreach ($words as\
    \ $word) {\n    $uniqueChars = count_chars($word);\n    $uniqueChars = array_keys($uniqueChars)[0];\n\
    \    if ($uniqueChars > $max) {\n      $max = $uniqueChars;\n      $maxString\
    \ = $word;\n    }\n  }\n  return $maxString;\n}\n\necho find_max(array(\"name\"\
    , \"of\", \"string\")) . \"\\n\";\necho find_max(array(\"name\", \"enam\", \"\
    game\")) . \"\\n\";\necho find_max(array(\"aaaaaaa\", \"bb\", \"cc\")) . \"\\\
    n\";\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "name\nname\naaaaaaa\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpebalr8mx.php:35\nStack trace:\n#0 /tmp/tmpebalr8mx.php(47): test()\n\
    #1 {main}\n  thrown in /tmp/tmpebalr8mx.php on line 35\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $max_count = 0;\n  $max_word\
    \ = \"\";\n  foreach ($words as $word) {\n    $word_count = count_unique_chars($word);\n\
    \    if ($word_count > $max_count) {\n      $max_count = $word_count;\n      $max_word\
    \ = $word;\n    }\n  }\n  return $max_word;\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmpa5g_t92t.php:16\nStack trace:\n#0 /tmp/tmpa5g_t92t.php(26): find_max(Array)\n\
    #1 /tmp/tmpa5g_t92t.php(30): candidate(Array)\n#2 /tmp/tmpa5g_t92t.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmpa5g_t92t.php on line 16\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $maxWord = $words[0];\n\
    \  $maxCount = count(uniqCharacters($words[0]));\n  foreach ($words as $word)\
    \ {\n    $count = count(uniqCharacters($word));\n    if ($count > $maxCount) {\n\
    \      $maxCount = $count;\n      $maxWord = $word;\n    }\n  }\n  return $maxWord;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function uniqCharacters()\
    \ in /tmp/tmpenqlkn8o.php:14\nStack trace:\n#0 /tmp/tmpenqlkn8o.php(26): find_max(Array)\n\
    #1 /tmp/tmpenqlkn8o.php(30): candidate(Array)\n#2 /tmp/tmpenqlkn8o.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmpenqlkn8o.php on line 14\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $unique_words = [];\n \
    \ foreach ($words as $word) {\n    $unique_words[$word] = strlen(count_chars($word,\
    \ 1));\n  }\n  arsort($unique_words);\n  $max_word = array_keys($unique_words)[0];\n\
    \  return $max_word;\n}\n$a = array(\"name\", \"of\", \"string\");\n$b = array(\"\
    name\", \"enam\", \"game\");\n$c = array(\"aaaaaaa\", \"bb\", \"cc\");\necho find_max($a);\n\
    echo \"<br>\";\necho find_max($b);\necho \"<br>\";\necho find_max($c);\necho \"\
    <br>\";\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: strlen(): Argument #1 ($str) must be\
    \ of type string, array given in /tmp/tmpjn13tn2r.php:15\nStack trace:\n#0 /tmp/tmpjn13tn2r.php(24):\
    \ find_max(Array)\n#1 {main}\n  thrown in /tmp/tmpjn13tn2r.php on line 15\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = \"\";\n    $cur_max\
    \ = 0;\n    foreach ($words as $word) {\n        $unique_chars = array_unique(str_split($word));\n\
    \        if (count($unique_chars) > $cur_max) {\n            $max = $word;\n \
    \           $cur_max = count($unique_chars);\n        }\n    }\n    return $max;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdjyzj4xz.php:31\n\
    Stack trace:\n#0 /tmp/tmpdjyzj4xz.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpdjyzj4xz.php\
    \ on line 31\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $word = null;\n    $max\
    \ = 0;\n    foreach ($words as $one_word) {\n        $count = count_unique_chars($one_word);\n\
    \        if ($count > $max) {\n            $max = $count;\n            $word =\
    \ $one_word;\n        }\n    }\n    return $word;\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmpg0pbgql3.php:16\nStack trace:\n#0 /tmp/tmpg0pbgql3.php(26): find_max(Array)\n\
    #1 /tmp/tmpg0pbgql3.php(30): candidate(Array)\n#2 /tmp/tmpg0pbgql3.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmpg0pbgql3.php on line 16\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $counts = array();\n\
    \    foreach ($words as $word) {\n        $counts[$word] = count_unique_chars($word);\n\
    \    }\n    $max = max($counts);\n    $winners = array();\n    foreach ($counts\
    \ as $word => $count) {\n        if ($count == $max) {\n            $winners[]\
    \ = $word;\n        }\n    }\n    usort($winners, 'strnatcmp');\n    return $winners[0];\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmpsknf22h3.php:15\nStack trace:\n#0 /tmp/tmpsknf22h3.php(29): find_max(Array)\n\
    #1 /tmp/tmpsknf22h3.php(33): candidate(Array)\n#2 /tmp/tmpsknf22h3.php(45): test()\n\
    #3 {main}\n  thrown in /tmp/tmpsknf22h3.php on line 15\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max_count = 0;\n   \
    \ $word = '';\n    foreach ($words as $word) {\n        $count = count_unique_chars($word);\n\
    \        if ($count > $max_count) {\n            $max_count = $count;\n      \
    \      $max_word = $word;\n        }\n    }\n    return $max_word;\n}\n\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmp317aobvb.php:16\nStack trace:\n#0 /tmp/tmp317aobvb.php(26): find_max(Array)\n\
    #1 /tmp/tmp317aobvb.php(30): candidate(Array)\n#2 /tmp/tmp317aobvb.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmp317aobvb.php on line 16\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $word_counts = array();\n\
    \  foreach ($words as $word) {\n    $word_counts[$word] = count_chars($word);\n\
    \  }\n  asort($word_counts);\n  return key($word_counts);\n}\nprint(find_max(array(\"\
    name\", \"of\", \"string\")) . \"\\n\");\nprint(find_max(array(\"name\", \"enam\"\
    , \"game\")) . \"\\n\");\nprint(find_max(array(\"aaaaaaa\", \"bb\", \"cc\")) .\
    \ \"\\n\");\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "string\nname\ncc\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_mjvoerb.php:29\n\
    Stack trace:\n#0 /tmp/tmp_mjvoerb.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp_mjvoerb.php\
    \ on line 29\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $max_count = 0;\n  $result\
    \ = null;\n  foreach ($words as $word) {\n    $unique_chars = array_count_values(str_split($word));\n\
    \    $count = count($unique_chars);\n    if ($count > $max_count) {\n      $max_count\
    \ = $count;\n      $result = $word;\n    }\n  }\n  return $result;\n}\n\n$words\
    \ = array(\"name\", \"of\", \"string\");\necho find_max($words);\necho \"\\n\"\
    ;\n$words = array(\"name\", \"enam\", \"game\");\necho find_max($words);\necho\
    \ \"\\n\";\n$words = array(\"aaaaaaa\", \"bb\", \"cc\");\necho find_max($words);\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "string\nname\naaaaaaa\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpna55o_ar.php:41\nStack trace:\n#0 /tmp/tmpna55o_ar.php(52): test()\n\
    #1 {main}\n  thrown in /tmp/tmpna55o_ar.php on line 41\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max_unique_chars = 0;\n\
    \    $max_word = $words[0];\n    foreach ($words as $word) {\n        $unique_chars\
    \ = array_count_values(str_split($word));\n        if (count($unique_chars) >\
    \ $max_unique_chars) {\n            $max_unique_chars = count($unique_chars);\n\
    \            $max_word = $word;\n        }\n    }\n    return $max_word;\n}\n\
    function candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz2k0bc8t.php:30\n\
    Stack trace:\n#0 /tmp/tmpz2k0bc8t.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpz2k0bc8t.php\
    \ on line 30\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $longest_word = '';\n\
    \    $max_chars = 0;\n    foreach ($words as $word) {\n        $chars = count_chars($word,\
    \ 1);\n        if (count($chars) > $max_chars) {\n            $max_chars = count($chars);\n\
    \            $longest_word = $word;\n        }\n    }\n    return $longest_word;\n\
    }\n$words = array(\"name\", \"of\", \"string\");\n$longest_word = find_max($words);\n\
    echo \"The longest word is '$longest_word'\\n\";\n$words = array(\"name\", \"\
    enam\", \"game\");\n$longest_word = find_max($words);\necho \"The longest word\
    \ is '$longest_word'\\n\";\n$words = array(\"aaaaaaa\", \"bb\", \"cc\");\n$longest_word\
    \ = find_max($words);\necho \"The longest word is '$longest_word'\\n\";\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "The longest word is 'string'\nThe longest word is 'name'\nThe longest word\
    \ is 'aaaaaaa'\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd2gd9n0_.php:39\n\
    Stack trace:\n#0 /tmp/tmpd2gd9n0_.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpd2gd9n0_.php\
    \ on line 39\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_word\
    \ = \"\";\n    foreach ($words as $word) {\n        $unique_chars = array_unique(str_split($word));\n\
    \        if (count($unique_chars) > $max) {\n            $max = count($unique_chars);\n\
    \            $max_word = $word;\n        }\n    }\n    return $max_word;\n}\n\n\
    $array = [\"name\", \"of\", \"string\"];\necho find_max($array) . \"\\n\";\n$array\
    \ = [\"name\", \"enam\", \"game\"];\necho find_max($array) . \"\\n\";\n$array\
    \ = [\"aaaaaaa\", \"bb\", \"cc\"];\necho find_max($array) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "string\nname\naaaaaaa\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpug79u5m8.php:37\nStack trace:\n#0 /tmp/tmpug79u5m8.php(48): test()\n\
    #1 {main}\n  thrown in /tmp/tmpug79u5m8.php on line 37\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $max = $words[0];\n  $chars\
    \ = array_flip(str_split($max));\n  foreach ($words as $word) {\n    $word_chars\
    \ = array_flip(str_split($word));\n    if (count($word_chars) > count($chars))\
    \ {\n      $max = $word;\n      $chars = $word_chars;\n    }\n  }\n  return $max;\n\
    }\n\nprint(find_max(array(\"name\", \"of\", \"string\")) . \"\\n\");\nprint(find_max(array(\"\
    name\", \"enam\", \"game\")) . \"\\n\");\nprint(find_max(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) . \"\\n\");\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "string\nname\naaaaaaa\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpeakdnuah.php:34\nStack trace:\n#0 /tmp/tmpeakdnuah.php(45): test()\n\
    #1 {main}\n  thrown in /tmp/tmpeakdnuah.php on line 34\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max_len = 0;\n    $max_word\
    \ = \"\";\n    foreach ($words as $word) {\n        $word_len = count(array_unique(str_split($word)));\n\
    \        if ($word_len > $max_len) {\n            $max_len = $word_len;\n    \
    \        $max_word = $word;\n        }\n    }\n    return $max_word;\n}\n\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpft03tkfq.php:31\n\
    Stack trace:\n#0 /tmp/tmpft03tkfq.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpft03tkfq.php\
    \ on line 31\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $max = \"\";\n  $max_count\
    \ = 0;\n  foreach ($words as $word) {\n    $count = count_unique_chars($word);\n\
    \    if ($count > $max_count) {\n      $max = $word;\n      $max_count = $count;\n\
    \    }\n  }\n  return $max;\n}\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmpo44fz_48.php:16\nStack trace:\n#0 /tmp/tmpo44fz_48.php(25): find_max(Array)\n\
    #1 /tmp/tmpo44fz_48.php(29): candidate(Array)\n#2 /tmp/tmpo44fz_48.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpo44fz_48.php on line 16\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n\t$max = 0;\n\t$max_index\
    \ = 0;\n\tforeach ($words as $index => $word) {\n\t\t$temp = count_unique_characters($word);\n\
    \t\tif ($temp > $max) {\n\t\t\t$max = $temp;\n\t\t\t$max_index = $index;\n\t\t\
    }\n\t}\n\treturn $words[$max_index];\n}\n\nfunction candidate(...$args) {\n  \
    \  return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_characters()\
    \ in /tmp/tmpbqez6x7k.php:16\nStack trace:\n#0 /tmp/tmpbqez6x7k.php(26): find_max(Array)\n\
    #1 /tmp/tmpbqez6x7k.php(30): candidate(Array)\n#2 /tmp/tmpbqez6x7k.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmpbqez6x7k.php on line 16\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    // first, find the length\
    \ of the longest unique string\n    $length = 0;\n    foreach ($words as $word)\
    \ {\n        if (strlen($word) > $length) {\n            $length = strlen($word);\n\
    \        }\n    }\n    $result = '';\n    // if there are no matches in the words\
    \ array, return the first word\n    if ($length == 0) {\n        return $words[0];\n\
    \    }\n    // loop through the array and find any words that are the longest\
    \ length\n    // with the most unique characters\n    foreach ($words as $word)\
    \ {\n        if (strlen($word) == $length) {\n            $characters = array();\n\
    \            for ($i = 0; $i < strlen($word); $i++) {\n                $characters[]\
    \ = $word[$i];\n            }\n            if (count(array_unique($characters))\
    \ == $length) {\n                $result = $word;\n                break;\n  \
    \          }\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl1vck8aa.php:47\n\
    Stack trace:\n#0 /tmp/tmpl1vck8aa.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpl1vck8aa.php\
    \ on line 47\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $word_score = array();\n\
    \    foreach ($words as $word) {\n        $score = 0;\n        $word_length =\
    \ strlen($word);\n        for ($i = 0; $i < $word_length; $i++) {\n          \
    \  if (!in_array($word[$i], $word_score)) {\n                $score += 1;\n  \
    \          }\n        }\n        $word_score[$word] = $score;\n    }\n    return\
    \ max($word_score);\n}\n\n$test_array1 = array(\"name\", \"of\", \"string\");\n\
    $test_array2 = array(\"name\", \"enam\", \"game\");\n$test_array3 = array(\"aaaaaaa\"\
    , \"bb\", \"cc\");\n$test_array4 = array(\"enam\", \"enam\", \"enam\");\necho\
    \ find_max($test_array1);\necho find_max($test_array2);\necho find_max($test_array3);\n\
    echo find_max($test_array4);\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "6474\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd27dx06z.php:40\n\
    Stack trace:\n#0 /tmp/tmpd27dx06z.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpd27dx06z.php\
    \ on line 40\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  // YOUR CODE GOES HERE\n\
    }\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4z8j924z.php:20\n\
    Stack trace:\n#0 /tmp/tmp4z8j924z.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp4z8j924z.php\
    \ on line 20\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $max_word = $words[0];\n\
    \  foreach ($words as $word) {\n    if (num_unique_chars($word) > num_unique_chars($max_word))\
    \ {\n      $max_word = $word;\n    }\n  }\n  return $max_word;\n}\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function num_unique_chars()\
    \ in /tmp/tmpkrw32xv5.php:15\nStack trace:\n#0 /tmp/tmpkrw32xv5.php(22): find_max(Array)\n\
    #1 /tmp/tmpkrw32xv5.php(26): candidate(Array)\n#2 /tmp/tmpkrw32xv5.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpkrw32xv5.php on line 15\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    // your code here\n}\n\
    function candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkq4lsipe.php:20\n\
    Stack trace:\n#0 /tmp/tmpkq4lsipe.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpkq4lsipe.php\
    \ on line 20\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n\t$arr = [];\n\tforeach ($words\
    \ as $key => $word) {\n\t\t$arr[$key] = count_chars($word, 1);\n\t}\n\t$max =\
    \ max($arr);\n\t$res = array_search($max, $arr);\n\treturn $words[$res];\n}\n\
    function candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2diev7ne.php:27\n\
    Stack trace:\n#0 /tmp/tmp2diev7ne.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp2diev7ne.php\
    \ on line 27\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $min = count($words[0]);\n\
    \  $min_index = 0;\n  for ($i = 1; $i < count($words); $i++) {\n    if (count($words[$i])\
    \ < $min) {\n      $min = count($words[$i]);\n      $min_index = $i;\n    }\n\
    \  }\n  return $words[$min_index];\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: count(): Argument #1 ($value) must be\
    \ of type Countable|array, string given in /tmp/tmpsm02q5fs.php:13\nStack trace:\n\
    #0 /tmp/tmpsm02q5fs.php(25): find_max(Array)\n#1 /tmp/tmpsm02q5fs.php(29): candidate(Array)\n\
    #2 /tmp/tmpsm02q5fs.php(41): test()\n#3 {main}\n  thrown in /tmp/tmpsm02q5fs.php\
    \ on line 13\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n\t$most_unique = '';\n\t\
    $most_unique_count = 0;\n\tforeach ($words as $word) {\n\t\t$temp_arr = array();\n\
    \t\tfor ($i = 0; $i < strlen($word); $i++) {\n\t\t\tif (in_array($word[$i], $temp_arr))\
    \ {\n\t\t\t\tcontinue;\n\t\t\t} else {\n\t\t\t\tarray_push($temp_arr, $word[$i]);\n\
    \t\t\t}\n\t\t}\n\t\tif (count($temp_arr) > $most_unique_count) {\n\t\t\t$most_unique_count\
    \ = count($temp_arr);\n\t\t\t$most_unique = $word;\n\t\t}\n\t}\n\treturn $most_unique;\n\
    }\n\necho find_max(array(\"name\", \"of\", \"string\")) . PHP_EOL;\necho find_max(array(\"\
    name\", \"enam\", \"game\")) . PHP_EOL;\necho find_max(array(\"aaaaaaa\", \"bb\"\
    , \"cc\")) . PHP_EOL;\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "string\nname\naaaaaaa\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpry524yha.php:41\nStack trace:\n#0 /tmp/tmpry524yha.php(52): test()\n\
    #1 {main}\n  thrown in /tmp/tmpry524yha.php on line 41\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max_words = [];\n  \
    \  $max_num_unique_chars = 0;\n    foreach ($words as $word) {\n        $num_unique_chars\
    \ = num_unique_chars($word);\n        if ($num_unique_chars > $max_num_unique_chars)\
    \ {\n            $max_words = [$word];\n            $max_num_unique_chars = $num_unique_chars;\n\
    \        } elseif ($num_unique_chars == $max_num_unique_chars) {\n           \
    \ $max_words[] = $word;\n        }\n    }\n    return min($max_words);\n}\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function num_unique_chars()\
    \ in /tmp/tmp58k6vj1u.php:16\nStack trace:\n#0 /tmp/tmp58k6vj1u.php(27): find_max(Array)\n\
    #1 /tmp/tmp58k6vj1u.php(31): candidate(Array)\n#2 /tmp/tmp58k6vj1u.php(43): test()\n\
    #3 {main}\n  thrown in /tmp/tmp58k6vj1u.php on line 16\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  if (count($words) == 0)\
    \ {\n    return null;\n  }\n  $max_word = $words[0];\n  $max_unique_length = count(get_unique_chars($words[0]));\n\
    \  foreach ($words as $word) {\n    $unique_chars = get_unique_chars($word);\n\
    \    if (count($unique_chars) > $max_unique_length) {\n      $max_unique_length\
    \ = count($unique_chars);\n      $max_word = $word;\n    }\n  }\n  return $max_word;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_unique_chars()\
    \ in /tmp/tmpq0se5adk.php:17\nStack trace:\n#0 /tmp/tmpq0se5adk.php(29): find_max(Array)\n\
    #1 /tmp/tmpq0se5adk.php(33): candidate(Array)\n#2 /tmp/tmpq0se5adk.php(45): test()\n\
    #3 {main}\n  thrown in /tmp/tmpq0se5adk.php on line 17\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $max_unique_chars = 0;\n\
    \  $max_unique_char_words = array();\n  foreach ($words as $word) {\n    $unique_chars\
    \ = count_unique_chars($word);\n    if ($unique_chars > $max_unique_chars) {\n\
    \      $max_unique_chars = $unique_chars;\n      $max_unique_char_words = array($word);\n\
    \    } else if ($unique_chars == $max_unique_chars) {\n      $max_unique_char_words[]\
    \ = $word;\n    }\n  }\n  if (count($max_unique_char_words) == 1) {\n    return\
    \ $max_unique_char_words[0];\n  } else {\n    sort($max_unique_char_words);\n\
    \    return $max_unique_char_words[0];\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmp8roh0s4u.php:16\nStack trace:\n#0 /tmp/tmp8roh0s4u.php(33): find_max(Array)\n\
    #1 /tmp/tmp8roh0s4u.php(37): candidate(Array)\n#2 /tmp/tmp8roh0s4u.php(49): test()\n\
    #3 {main}\n  thrown in /tmp/tmp8roh0s4u.php on line 16\n"
  timestamp: 1659979964
- exit_code: 0
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n\t$sorted = array();\n\t\
    for ($i = 0; $i < count($words); $i++) {\n\t\t$sorted[$i] = array(\n\t\t\t\"word\"\
    \ => $words[$i],\n\t\t\t\"uniques\" => count(array_unique(str_split($words[$i])))\n\
    \t\t);\n\t}\n\tusort($sorted, function($a, $b) {\n\t\tif ($a[\"uniques\"] != $b[\"\
    uniques\"]) {\n\t\t\treturn $b[\"uniques\"] <=> $a[\"uniques\"];\n\t\t} else {\n\
    \t\t\treturn $a[\"word\"] <=> $b[\"word\"];\n\t\t}\n\t});\n\treturn $sorted[0][\"\
    word\"];\n}\n$input = array(\"name\", \"of\", \"string\");\necho find_max($input)\
    \ . \"\\n\";\n$input = array(\"name\", \"enam\", \"game\");\necho find_max($input)\
    \ . \"\\n\";\n$input = array(\"aaaaaaa\", \"bb\", \"cc\");\necho find_max($input)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'string

    enam

    aaaaaaa

    '
  timestamp: 1659979964
- exit_code: 0
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n\t$max_char_number = 0;\n\
    \t$max_words = array();\n\tforeach ($words as $word) {\n\t\t$unique_chars = array_unique(str_split($word));\n\
    \t\t$unique_char_number = count($unique_chars);\n\t\tif ($unique_char_number >\
    \ $max_char_number) {\n\t\t\t$max_char_number = $unique_char_number;\n\t\t\t$max_words\
    \ = array($word);\n\t\t} else if ($unique_char_number == $max_char_number) {\n\
    \t\t\t$max_words[] = $word;\n\t\t}\n\t}\n\tsort($max_words);\n\treturn $max_words[0];\n\
    }\n\necho find_max(array(\"name\", \"of\", \"string\")) . PHP_EOL;\necho find_max(array(\"\
    name\", \"enam\", \"game\")) . PHP_EOL;\necho find_max(array(\"aaaaaaa\", \"bb\"\
    , \"cc\")) . PHP_EOL;\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'string

    enam

    aaaaaaa

    '
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $maxWord = \"\";\n  \
    \  $maxCount = 0;\n    foreach ($words as $word) {\n        $charCount = count_chars($word,\
    \ 3);\n        if (strlen($charCount) > $maxCount) {\n            $maxCount =\
    \ strlen($charCount);\n            $maxWord = $word;\n        }\n    }\n    return\
    \ $maxWord;\n}\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3dc555e3.php:30\n\
    Stack trace:\n#0 /tmp/tmp3dc555e3.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp3dc555e3.php\
    \ on line 30\n"
  timestamp: 1659979964
- exit_code: 0
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $max_chars = 0;\n  $max_words\
    \ = array();\n  foreach ($words as $word) {\n    $chars = count_chars($word, 1);\n\
    \    if (count($chars) > $max_chars) {\n      $max_chars = count($chars);\n  \
    \    $max_words = array($word);\n    } else if (count($chars) == $max_chars) {\n\
    \      $max_words[] = $word;\n    }\n  }\n  sort($max_words);\n  return $max_words[0];\n\
    }\n\nif (count($argv) > 1) {\n  $words = array_slice($argv, 1);\n  print find_max($words)\
    \ . \"\\n\";\n} else {\n  print find_max(array(\"name\", \"of\", \"string\"))\
    \ . \"\\n\";\n  print find_max(array(\"name\", \"enam\", \"game\")) . \"\\n\"\
    ;\n  print find_max(array(\"aaaaaaa\", \"bb\", \"cc\")) . \"\\n\";\n}\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'string

    enam

    aaaaaaa

    '
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    // your code here\n \
    \   $max = max(array_map('strlen', $words));\n    return array_reduce($words,\
    \ function($carry, $item) use ($max) {\n        return strlen($item) == $max ?\
    \ ($carry ? $carry : $item) : $carry;\n    });\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp74is97_7.php:26\n\
    Stack trace:\n#0 /tmp/tmp74is97_7.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp74is97_7.php\
    \ on line 26\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $counts = [];\n    foreach\
    \ ($words as $word) {\n        $counts[$word] = count_unique_characters($word);\n\
    \    }\n    $max_count = max($counts);\n    $max_words = array_keys($counts, $max_count);\n\
    \    sort($max_words);\n    return array_shift($max_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_characters()\
    \ in /tmp/tmp7u0mad2x.php:15\nStack trace:\n#0 /tmp/tmp7u0mad2x.php(24): find_max(Array)\n\
    #1 /tmp/tmp7u0mad2x.php(28): candidate(Array)\n#2 /tmp/tmp7u0mad2x.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmp7u0mad2x.php on line 15\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $max = 0;\n  $max_word\
    \ = \"\";\n  foreach ($words as $word) {\n    $current = count_unique_chars($word);\n\
    \    if ($current > $max) {\n      $max = $current;\n      $max_word = $word;\n\
    \    }\n  }\n  return $max_word;\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmpqsi000si.php:16\nStack trace:\n#0 /tmp/tmpqsi000si.php(26): find_max(Array)\n\
    #1 /tmp/tmpqsi000si.php(30): candidate(Array)\n#2 /tmp/tmpqsi000si.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmpqsi000si.php on line 16\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = $words[0];\n \
    \   foreach ($words as $i => $word) {\n        if ( count_unique_characters($word)\
    \ > count_unique_characters($max) ) {\n            $max = $word;\n        }\n\
    \    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_characters()\
    \ in /tmp/tmprju6oeu4.php:15\nStack trace:\n#0 /tmp/tmprju6oeu4.php(23): find_max(Array)\n\
    #1 /tmp/tmprju6oeu4.php(27): candidate(Array)\n#2 /tmp/tmprju6oeu4.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmprju6oeu4.php on line 15\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $sorted_words = array();\n\
    \  foreach ($words as $word) {\n    $chars = str_split($word);\n    $unique_chars\
    \ = array_unique($chars);\n    $sorted_words[$word] = count($unique_chars);\n\
    \  }\n  arsort($sorted_words);\n  $max_chars = reset($sorted_words);\n  foreach\
    \ ($sorted_words as $word => $unique_chars) {\n    if ($unique_chars == $max_chars)\
    \ {\n      return $word;\n    }\n  }\n}\necho find_max(array(\"aaaaaaa\", \"bb\"\
    , \"cc\")) . \"\\n\";\necho find_max(array(\"name\", \"enam\", \"game\")) . \"\
    \\n\";\necho find_max(array(\"name\", \"of\", \"string\")) . \"\\n\";\n\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "aaaaaaa\nname\nstring\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpxplpn0da.php:37\nStack trace:\n#0 /tmp/tmpxplpn0da.php(48): test()\n\
    #1 {main}\n  thrown in /tmp/tmpxplpn0da.php on line 37\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $results = array();\n \
    \ foreach ($words as $word) {\n    $cnt = 0;\n    $prev_char = '';\n    for ($i\
    \ = 0; $i < strlen($word); $i++) {\n      if ($word[$i] != $prev_char) {\n   \
    \     $cnt++;\n        $prev_char = $word[$i];\n      }\n    }\n    $results[$word]\
    \ = $cnt;\n  }\n  arsort($results);\n  return key($results);\n}\n\n$words = array(\"\
    name\", \"of\", \"string\");\necho find_max($words) . PHP_EOL;\n$words = array(\"\
    name\", \"enam\", \"game\");\necho find_max($words) . PHP_EOL;\n$words = array(\"\
    aaaaaaa\", \"bb\", \"cc\");\necho find_max($words) . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "string\nname\naaaaaaa\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpw5b_avli.php:41\nStack trace:\n#0 /tmp/tmpw5b_avli.php(52): test()\n\
    #1 {main}\n  thrown in /tmp/tmpw5b_avli.php on line 41\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $max_len = 0;\n  $max_word\
    \ = '';\n  foreach ($words as $word) {\n    $len = strlen(unique_chars($word));\n\
    \    if ($len > $max_len) {\n      $max_len = $len;\n      $max_word = $word;\n\
    \    }\n  }\n  return $max_word;\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function unique_chars()\
    \ in /tmp/tmpm2ms8rmf.php:16\nStack trace:\n#0 /tmp/tmpm2ms8rmf.php(26): find_max(Array)\n\
    #1 /tmp/tmpm2ms8rmf.php(30): candidate(Array)\n#2 /tmp/tmpm2ms8rmf.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmpm2ms8rmf.php on line 16\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $max_word = $words[0];\n\
    \  foreach ($words as $word) {\n    if (strlen(unique_chars($word)) > strlen(unique_chars($max_word)))\
    \ {\n      $max_word = $word;\n    }\n  }\n  return $max_word;\n}\n\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function unique_chars()\
    \ in /tmp/tmp4fb8rspb.php:15\nStack trace:\n#0 /tmp/tmp4fb8rspb.php(23): find_max(Array)\n\
    #1 /tmp/tmp4fb8rspb.php(27): candidate(Array)\n#2 /tmp/tmp4fb8rspb.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmp4fb8rspb.php on line 15\n"
  timestamp: 1659979964
- exit_code: 0
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $max_len = 0;\n  $max_word\
    \ = '';\n  foreach ($words as $word) {\n    $chars = array();\n    for ($i = 0;\
    \ $i < strlen($word); $i++) {\n      $chars[$word[$i]] = 1;\n    }\n    $len =\
    \ count($chars);\n    if ($len > $max_len) {\n      $max_len = $len;\n      $max_word\
    \ = $word;\n    } else if ($len == $max_len) {\n      if ($word < $max_word) {\n\
    \        $max_word = $word;\n      }\n    }\n  }\n  return $max_word;\n}\n$array1\
    \ = array(\"name\", \"of\", \"string\");\n$array2 = array(\"name\", \"enam\",\
    \ \"game\");\n$array3 = array(\"aaaaaaa\", \"bb\", \"cc\");\necho find_max($array1)\
    \ . PHP_EOL;\necho find_max($array2) . PHP_EOL;\necho find_max($array3) . PHP_EOL;\n\
    \nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'string

    enam

    aaaaaaa

    '
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use print\n    // Example:\
    \ print \"Hello world!\";\n}\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6e5ax5r0.php:22\n\
    Stack trace:\n#0 /tmp/tmp6e5ax5r0.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp6e5ax5r0.php\
    \ on line 22\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $max_word = null;\n  $max_length\
    \ = 0;\n  foreach ($words as $word) {\n    $this_length = count(array_unique(str_split($word)));\n\
    \    if ($this_length > $max_length) {\n      $max_length = $this_length;\n  \
    \    $max_word = $word;\n    }\n  }\n  return $max_word;\n}\necho find_max(array(\"\
    name\", \"of\", \"string\")) . \"\\n\";\necho find_max(array(\"name\", \"enam\"\
    , \"game\")) . \"\\n\";\necho find_max(array(\"aaaaaaa\", \"bb\", \"cc\")) . \"\
    \\n\";\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "string\nname\naaaaaaa\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpr960zd_k.php:34\nStack trace:\n#0 /tmp/tmpr960zd_k.php(45): test()\n\
    #1 {main}\n  thrown in /tmp/tmpr960zd_k.php on line 34\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  // Return value\n  $result\
    \ = \"\";\n  // Keep track of the count of unique characters\n  $max_count = 0;\n\
    \  foreach ($words as $word) {\n    // Count the number of unique characters in\
    \ the current word\n    $count = count_unique_chars($word);\n    // Determine\
    \ if the current word has a larger count of unique characters\n    if ($count\
    \ > $max_count) {\n      // Update the result with the current word\n      $result\
    \ = $word;\n      // Update the maximum count\n      $max_count = $count;\n  \
    \  }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmpxvksc0jn.php:19\nStack trace:\n#0 /tmp/tmpxvksc0jn.php(32): find_max(Array)\n\
    #1 /tmp/tmpxvksc0jn.php(36): candidate(Array)\n#2 /tmp/tmpxvksc0jn.php(48): test()\n\
    #3 {main}\n  thrown in /tmp/tmpxvksc0jn.php on line 19\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $result = \"\";\n  $len\
    \ = 0;\n  foreach ($words as $word) {\n    $chars = array();\n    $s = \"\";\n\
    \    for ($i = 0; $i < strlen($word); $i++) {\n      $ch = $word[$i];\n      if\
    \ (!array_key_exists($ch, $chars)) {\n        $chars[$ch] = 1;\n        $s .=\
    \ $ch;\n      }\n    }\n    if (strlen($s) > $len) {\n      $len = strlen($s);\n\
    \      $result = $word;\n    }\n  }\n  return $result;\n}\n\n$words = array(\"\
    name\", \"of\", \"string\");\n$words2 = array(\"name\", \"enam\", \"game\");\n\
    $words3 = array(\"aaaaaaa\", \"bb\", \"cc\");\necho find_max($words) . \"\\n\"\
    ;\necho find_max($words2) . \"\\n\";\necho find_max($words3) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "string\nname\naaaaaaa\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpys7mnoe_.php:45\nStack trace:\n#0 /tmp/tmpys7mnoe_.php(56): test()\n\
    #1 {main}\n  thrown in /tmp/tmpys7mnoe_.php on line 45\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n\t$unique_char_count = array();\n\
    \tforeach ($words as $word) {\n\t\t$unique_char_count[$word] = count(array_unique(str_split($word)));\n\
    \t}\n\t$max_count = max($unique_char_count);\n\tforeach ($unique_char_count as\
    \ $word => $count) {\n\t\tif ($count == $max_count) {\n\t\t\treturn $word;\n\t\
    \t}\n\t}\n}\n\necho find_max(array(\"name\", \"of\", \"string\")) . \"\\n\";\n\
    echo find_max(array(\"name\", \"enam\", \"game\")) . \"\\n\";\necho find_max(array(\"\
    aaaaaaa\", \"bb\", \"cc\")) . \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "string\nname\naaaaaaa\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp6innl0zc.php:34\nStack trace:\n#0 /tmp/tmp6innl0zc.php(45): test()\n\
    #1 {main}\n  thrown in /tmp/tmp6innl0zc.php on line 34\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    // =====================\
    \ YOUR WORK HERE =====================\n    $max_count = 0;\n    $max_word = '';\n\
    \    foreach ($words as $word) {\n        $unique_letters = array_unique(str_split($word));\n\
    \        $count = count($unique_letters);\n        if ($count > $max_count) {\n\
    \            $max_count = $count;\n            $max_word = $word;\n        }\n\
    \    }\n    return $max_word;\n    // =========================================================\n\
    }\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6g3lk0vf.php:33\n\
    Stack trace:\n#0 /tmp/tmp6g3lk0vf.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp6g3lk0vf.php\
    \ on line 33\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max_word = '';\n   \
    \ $max_count = 0;\n    foreach ($words as $word) {\n        $chars = str_split($word);\n\
    \        $unique_chars = array_unique($chars);\n        $unique_count = count($unique_chars);\n\
    \        if ($unique_count > $max_count) {\n            $max_count = $unique_count;\n\
    \            $max_word = $word;\n        }\n    }\n    return $max_word;\n}\n\
    $words = array(\"name\", \"of\", \"string\");\necho find_max($words) . \"\\n\"\
    ;\n$words = array(\"name\", \"enam\", \"game\");\necho find_max($words) . \"\\\
    n\";\n$words = array(\"aaaaaaa\", \"bb\", \"cc\");\necho find_max($words) . \"\
    \\n\";\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "string\nname\naaaaaaa\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp176odmpn.php:38\nStack trace:\n#0 /tmp/tmp176odmpn.php(49): test()\n\
    #1 {main}\n  thrown in /tmp/tmp176odmpn.php on line 38\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max_word = \"\";\n \
    \   $max_unique_chars = 0;\n    foreach ($words as $word) {\n        $word_chars\
    \ = str_split($word);\n        $word_chars = array_unique($word_chars);\n    \
    \    $num_unique_chars = count($word_chars);\n        if ($num_unique_chars >\
    \ $max_unique_chars) {\n            $max_unique_chars = $num_unique_chars;\n \
    \           $max_word = $word;\n        }\n    }\n    return $max_word;\n}\n$words\
    \ = array(\"name\", \"of\", \"string\");\nprint(\"find_max(\" . json_encode($words)\
    \ . \") => \" . find_max($words) . \"\\n\");\n$words = array(\"name\", \"enam\"\
    , \"game\");\nprint(\"find_max(\" . json_encode($words) . \") => \" . find_max($words)\
    \ . \"\\n\");\n$words = array(\"aaaaaaa\", \"bb\", \"cc\");\nprint(\"find_max(\"\
    \ . json_encode($words) . \") => \" . find_max($words) . \"\\n\");\n\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "find_max([\"name\",\"of\",\"string\"]) => string\nfind_max([\"name\",\"\
    enam\",\"game\"]) => name\nfind_max([\"aaaaaaa\",\"bb\",\"cc\"]) => aaaaaaa\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp_pjfr5f3.php:39\nStack\
    \ trace:\n#0 /tmp/tmp_pjfr5f3.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp_pjfr5f3.php\
    \ on line 39\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $max = \"\";\n  $max_count\
    \ = 0;\n  for ($i = 0; $i < count($words); $i++) {\n    $count = count_unique_chars($words[$i]);\n\
    \    if ($count > $max_count) {\n      $max = $words[$i];\n      $max_count =\
    \ $count;\n    }\n  }\n  return $max;\n}\n\nfunction candidate(...$args) {\n \
    \   return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmp3y5jpmwu.php:16\nStack trace:\n#0 /tmp/tmp3y5jpmwu.php(26): find_max(Array)\n\
    #1 /tmp/tmp3y5jpmwu.php(30): candidate(Array)\n#2 /tmp/tmp3y5jpmwu.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmp3y5jpmwu.php on line 16\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $maxCount = 1;\n  $maxWord\
    \ = \"\";\n  foreach ($words as $word) {\n    $chars = str_split($word);\n   \
    \ $uniqueChars = [];\n    foreach ($chars as $char) {\n      if (!in_array($char,\
    \ $uniqueChars)) {\n        $uniqueChars[] = $char;\n      }\n    }\n    if (count($uniqueChars)\
    \ > $maxCount) {\n      $maxCount = count($uniqueChars);\n      $maxWord = $word;\n\
    \    }\n  }\n  return $maxWord;\n}\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1mduswc_.php:36\n\
    Stack trace:\n#0 /tmp/tmp1mduswc_.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp1mduswc_.php\
    \ on line 36\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $max_count = 0;\n  $max_word\
    \ = '';\n  foreach ($words as $word) {\n    $count = count_unique_chars($word);\n\
    \    if ($count > $max_count) {\n      $max_count = $count;\n      $max_word =\
    \ $word;\n    }\n  }\n  return $max_word;\n}\n\nfunction candidate(...$args) {\n\
    \    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmpkykis_80.php:16\nStack trace:\n#0 /tmp/tmpkykis_80.php(26): find_max(Array)\n\
    #1 /tmp/tmpkykis_80.php(30): candidate(Array)\n#2 /tmp/tmpkykis_80.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmpkykis_80.php on line 16\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $max_unique_chars = [];\n\
    \  foreach ($words as $word) {\n    $unique_chars = [];\n    for ($i = 0; $i <\
    \ strlen($word); $i++) {\n      if (!in_array($word[$i], $unique_chars)) {\n \
    \       $unique_chars[] = $word[$i];\n      }\n    }\n    $max_unique_chars[$word]\
    \ = count($unique_chars);\n  }\n  arsort($max_unique_chars);\n  $result = array_keys($max_unique_chars)[0];\n\
    \  return $result;\n}\n\nassert_options(ASSERT_BAIL, 1);\nassert(find_max([\"\
    name\", \"of\", \"string\"]) === \"string\");\nassert(find_max([\"name\", \"enam\"\
    , \"game\"]) === \"enam\");\nassert(find_max([\"aaaaaaa\", \"bb\", \"cc\"]) ===\
    \ \"aaaaaaa\");\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught AssertionError: assert(find_max(['name', 'enam',\
    \ 'game']) === 'enam') in /tmp/tmp3rdklbt3.php:30\nStack trace:\n#0 /tmp/tmp3rdklbt3.php(30):\
    \ assert(false, 'assert(find_max...')\n#1 {main}\n  thrown in /tmp/tmp3rdklbt3.php\
    \ on line 30\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $lengths = array();\n \
    \ foreach ($words as $word) {\n    $lengths[] = strlen(unique_chars($word));\n\
    \  }\n  $max_length = max($lengths);\n  $max_index = array_search($max_length,\
    \ $lengths);\n  return $words[$max_index];\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function unique_chars()\
    \ in /tmp/tmpnyet9nqn.php:15\nStack trace:\n#0 /tmp/tmpnyet9nqn.php(23): find_max(Array)\n\
    #1 /tmp/tmpnyet9nqn.php(27): candidate(Array)\n#2 /tmp/tmpnyet9nqn.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmpnyet9nqn.php on line 15\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n\t$max = -1;\n\t$max_word\
    \ = \"\";\n\tforeach ($words as $word) {\n\t\tif (unique_chars($word) > $max)\
    \ {\n\t\t\t$max = unique_chars($word);\n\t\t\t$max_word = $word;\n\t\t}\n\t}\n\
    \treturn $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function unique_chars()\
    \ in /tmp/tmpl4_r1uto.php:16\nStack trace:\n#0 /tmp/tmpl4_r1uto.php(25): find_max(Array)\n\
    #1 /tmp/tmpl4_r1uto.php(29): candidate(Array)\n#2 /tmp/tmpl4_r1uto.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpl4_r1uto.php on line 16\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $max_chars = 0;\n  $max_word\
    \ = '';\n  foreach ($words as $word) {\n    $chars = [];\n    for ($i = 0; $i\
    \ < strlen($word); $i++) {\n      $char = $word[$i];\n      if (!in_array($char,\
    \ $chars)) {\n        $chars[] = $char;\n      }\n    }\n    if (count($chars)\
    \ > $max_chars) {\n      $max_chars = count($chars);\n      $max_word = $word;\n\
    \    }\n  }\n  return $max_word;\n}\n\n$words = ['name', 'of', 'string'];\necho\
    \ find_max($words);\necho \"\\n\";\n$words = ['name', 'enam', 'game'];\necho find_max($words);\n\
    echo \"\\n\";\n$words = ['aaaaaaa', 'bb', 'cc'];\necho find_max($words);\necho\
    \ \"\\n\";\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "string\nname\naaaaaaa\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpxmjw6eg2.php:46\nStack trace:\n#0 /tmp/tmpxmjw6eg2.php(57): test()\n\
    #1 {main}\n  thrown in /tmp/tmpxmjw6eg2.php on line 46\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $max = 0;\n  $ret = null;\n\
    \  foreach ($words as $word) {\n    $count = count_unique_chars($word);\n    if\
    \ ($count > $max) {\n      $max = $count;\n      $ret = $word;\n    }\n  }\n \
    \ return $ret;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmpnwb5_ybf.php:16\nStack trace:\n#0 /tmp/tmpnwb5_ybf.php(26): find_max(Array)\n\
    #1 /tmp/tmpnwb5_ybf.php(30): candidate(Array)\n#2 /tmp/tmpnwb5_ybf.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmpnwb5_ybf.php on line 16\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $max_word = $words[0];\n\
    \  $max_unique_char = strlen(unique_chars($words[0]));\n  foreach ($words as $word)\
    \ {\n    $unique_char = strlen(unique_chars($word));\n    if ($unique_char > $max_unique_char)\
    \ {\n      $max_unique_char = $unique_char;\n      $max_word = $word;\n    }\n\
    \  }\n  return $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function unique_chars()\
    \ in /tmp/tmpfflpu677.php:14\nStack trace:\n#0 /tmp/tmpfflpu677.php(26): find_max(Array)\n\
    #1 /tmp/tmpfflpu677.php(30): candidate(Array)\n#2 /tmp/tmpfflpu677.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmpfflpu677.php on line 14\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = strlen($words[0]);\n\
    \    $current = strlen($words[0]);\n    $max_word = $words[0];\n    for ($i =\
    \ 1; $i < count($words); $i++) {\n        $current = strlen($words[$i]);\n   \
    \     if ($current >= $max) {\n            $max = $current;\n            $max_word\
    \ = $words[$i];\n        }\n    }\n    return $max_word;\n}\n$words = array(\"\
    name\", \"of\", \"string\");\necho find_max($words);\necho \"<br>\";\n$words =\
    \ array(\"name\", \"enam\", \"game\");\necho find_max($words);\necho \"<br>\"\
    ;\n$words = array(\"aaaaaaa\", \"bb\", \"cc\");\necho find_max($words);\necho\
    \ \"<br>\";\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "string<br>game<br>aaaaaaa<br>\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpk1pc2po7.php:40\nStack trace:\n#0 /tmp/tmpk1pc2po7.php(51): test()\n\
    #1 {main}\n  thrown in /tmp/tmpk1pc2po7.php on line 40\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n\t$max = 0;\n\t$res = '';\n\
    \tforeach ($words as $word) {\n\t\t$tmp = count_unique_characters($word);\n\t\t\
    if ($tmp > $max) {\n\t\t\t$max = $tmp;\n\t\t\t$res = $word;\n\t\t}\n\t}\n\treturn\
    \ $res;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_characters()\
    \ in /tmp/tmpxz0lbtdm.php:16\nStack trace:\n#0 /tmp/tmpxz0lbtdm.php(26): find_max(Array)\n\
    #1 /tmp/tmpxz0lbtdm.php(30): candidate(Array)\n#2 /tmp/tmpxz0lbtdm.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmpxz0lbtdm.php on line 16\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n\t$results = [];\n\t$max\
    \ = 0;\n\t$uniques = [];\n\tforeach ($words as $word) {\n\t\t$uniques[$word] =\
    \ get_number_of_unique_chars($word);\n\t\tif ($uniques[$word] > $max) {\n\t\t\t\
    $max = $uniques[$word];\n\t\t}\n\t}\n\tforeach ($uniques as $word => $unique)\
    \ {\n\t\tif ($unique == $max) {\n\t\t\t$results[] = $word;\n\t\t}\n\t}\n\tsort($results);\n\
    \treturn $results[0];\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_number_of_unique_chars()\
    \ in /tmp/tmpbu2y03dw.php:17\nStack trace:\n#0 /tmp/tmpbu2y03dw.php(32): find_max(Array)\n\
    #1 /tmp/tmpbu2y03dw.php(36): candidate(Array)\n#2 /tmp/tmpbu2y03dw.php(48): test()\n\
    #3 {main}\n  thrown in /tmp/tmpbu2y03dw.php on line 17\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max_char_count = 0;\n\
    \    $max_word = \"\";\n    foreach ($words as $word) {\n        $word_char_count\
    \ = unique_chars($word);\n        if ($word_char_count > $max_char_count) {\n\
    \            $max_char_count = $word_char_count;\n            $max_word = $word;\n\
    \        }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n\
    \    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function unique_chars()\
    \ in /tmp/tmpqa3rrdzp.php:16\nStack trace:\n#0 /tmp/tmpqa3rrdzp.php(26): find_max(Array)\n\
    #1 /tmp/tmpqa3rrdzp.php(30): candidate(Array)\n#2 /tmp/tmpqa3rrdzp.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmpqa3rrdzp.php on line 16\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $max_word = null;\n  $max_count\
    \ = 0;\n  foreach ($words as $word) {\n    $count = count_unique_characters($word);\n\
    \    if ($count > $max_count) {\n      $max_count = $count;\n      $max_word =\
    \ $word;\n    }\n  }\n  return $max_word;\n}\n\nfunction candidate(...$args) {\n\
    \    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_characters()\
    \ in /tmp/tmpet5edeft.php:16\nStack trace:\n#0 /tmp/tmpet5edeft.php(26): find_max(Array)\n\
    #1 /tmp/tmpet5edeft.php(30): candidate(Array)\n#2 /tmp/tmpet5edeft.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmpet5edeft.php on line 16\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $max = array();\n  foreach\
    \ ($words as $word) {\n    $chars = array();\n    for ($i = 0; $i < strlen($word);\
    \ $i++) {\n      if (!isset($chars[$word[$i]])) {\n        $chars[$word[$i]] =\
    \ 1;\n      }\n    }\n    if (count($chars) > count($max)) {\n      $max = $chars;\n\
    \      $max_word = $word;\n    }\n  }\n  return $max_word;\n}\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoyb2xilr.php:34\n\
    Stack trace:\n#0 /tmp/tmpoyb2xilr.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpoyb2xilr.php\
    \ on line 34\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    // your code here\n}\n\
    function candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkq4lsipe.php:20\n\
    Stack trace:\n#0 /tmp/tmpkq4lsipe.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpkq4lsipe.php\
    \ on line 20\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = '';\n    $max_chars\
    \ = 0;\n    foreach ($words as $word) {\n        $chars = count_chars($word, 1);\n\
    \        if (count($chars) > $max_chars) {\n            $max = $word;\n      \
    \      $max_chars = count($chars);\n        }\n    }\n    return $max;\n}\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpliu5fugg.php:30\n\
    Stack trace:\n#0 /tmp/tmpliu5fugg.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpliu5fugg.php\
    \ on line 30\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $max = \"\";\n  $max_count\
    \ = 0;\n  foreach ($words as $word) {\n    $chars = array();\n    for ($i = 0;\
    \ $i < strlen($word); $i++) {\n      $chars[$word[$i]] = true;\n    }\n    $char_count\
    \ = count($chars);\n    if ($char_count > $max_count) {\n      $max = $word;\n\
    \      $max_count = $char_count;\n    }\n  }\n  return $max;\n}\n$words = array(\"\
    name\", \"of\", \"string\");\necho \"find_max(\".json_encode($words).\")\\n\"\
    ;\necho find_max($words).\"\\n\";\n$words = array(\"name\", \"enam\", \"game\"\
    );\necho \"find_max(\".json_encode($words).\")\\n\";\necho find_max($words).\"\
    \\n\";\n$words = array(\"aaaaaaa\", \"bb\", \"cc\");\necho \"find_max(\".json_encode($words).\"\
    )\\n\";\necho find_max($words).\"\\n\";\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "find_max([\"name\",\"of\",\"string\"])\nstring\nfind_max([\"name\",\"enam\"\
    ,\"game\"])\nname\nfind_max([\"aaaaaaa\",\"bb\",\"cc\"])\naaaaaaa\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpi0npv0p6.php:43\nStack trace:\n\
    #0 /tmp/tmpi0npv0p6.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpi0npv0p6.php\
    \ on line 43\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = null;\n    foreach\
    \ ($words as $word) {\n        $char_array = str_split($word);\n        if (count(array_unique($char_array))\
    \ > count(array_unique(str_split($max)))) {\n            $max = $word;\n     \
    \   }\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nDeprecated: str_split(): Passing null to parameter #1 ($string) of type\
    \ string is deprecated in /tmp/tmpx60ybu3v.php on line 16\n\nDeprecated: str_split():\
    \ Passing null to parameter #1 ($string) of type string is deprecated in /tmp/tmpx60ybu3v.php\
    \ on line 16\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx60ybu3v.php:29\n\
    Stack trace:\n#0 /tmp/tmpx60ybu3v.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpx60ybu3v.php\
    \ on line 29\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    // Write your code here.\n\
    }\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpco5oc8ps.php:20\n\
    Stack trace:\n#0 /tmp/tmpco5oc8ps.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpco5oc8ps.php\
    \ on line 20\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max_len = 0;\n    $max_word\
    \ = '';\n    foreach ($words as $word) {\n        $w_len = strlen(count_chars($word,\
    \ 3));\n        if ($w_len > $max_len) {\n            $max_len = $w_len;\n   \
    \         $max_word = $word;\n        }\n    }\n    return $max_word;\n}\necho\
    \ find_max(array(\"name\", \"of\", \"string\")) . \"\\n\";\necho find_max(array(\"\
    name\", \"enam\", \"game\")) . \"\\n\";\necho find_max(array(\"aaaaaaa\", \"bb\"\
    , \"cc\")) . \"\\n\";\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "string\nname\naaaaaaa\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpgc7bz1nv.php:33\nStack trace:\n#0 /tmp/tmpgc7bz1nv.php(44): test()\n\
    #1 {main}\n  thrown in /tmp/tmpgc7bz1nv.php on line 33\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  // your code here\n}\n\
    function candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprmiabqff.php:20\n\
    Stack trace:\n#0 /tmp/tmprmiabqff.php(32): test()\n#1 {main}\n  thrown in /tmp/tmprmiabqff.php\
    \ on line 20\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max_len = 0;\n    $len\
    \ = count($words);\n    $result = \"\";\n    $i = 0;\n    while ($i < $len) {\n\
    \        $chars = get_distinct_chars($words[$i]);\n        $num_chars = count($chars);\n\
    \        if ($num_chars > $max_len) {\n            $max_len = $num_chars;\n  \
    \          $result = $words[$i];\n        }\n        $i = $i + 1;\n    }\n   \
    \ return $result;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_distinct_chars()\
    \ in /tmp/tmphogxmw4y.php:18\nStack trace:\n#0 /tmp/tmphogxmw4y.php(30): find_max(Array)\n\
    #1 /tmp/tmphogxmw4y.php(34): candidate(Array)\n#2 /tmp/tmphogxmw4y.php(46): test()\n\
    #3 {main}\n  thrown in /tmp/tmphogxmw4y.php on line 18\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = [];\n    foreach\
    \ ($words as $word) {\n        $chars = [];\n        for ($i = 0; $i < strlen($word);\
    \ $i++) {\n            $chars[$word[$i]] = true;\n        }\n        $max[$word]\
    \ = count($chars);\n    }\n    asort($max);\n    return array_keys($max)[0];\n\
    }\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp77d_o5c4.php:29\n\
    Stack trace:\n#0 /tmp/tmp77d_o5c4.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp77d_o5c4.php\
    \ on line 29\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_word\
    \ = '';\n    foreach ($words as $word) {\n        $unique_chars = array_unique(str_split($word));\n\
    \        if (count($unique_chars) > $max) {\n            $max = count($unique_chars);\n\
    \            $max_word = $word;\n        }\n    }\n    return $max_word;\n}\n\n\
    function candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppq8b1j_s.php:31\n\
    Stack trace:\n#0 /tmp/tmppq8b1j_s.php(42): test()\n#1 {main}\n  thrown in /tmp/tmppq8b1j_s.php\
    \ on line 31\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $word_chars = [];\n \
    \   $max_len = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n    \
    \    $word_chars[$word] = array_unique(str_split($word));\n        if (count($word_chars[$word])\
    \ > $max_len) {\n            $max_len = count($word_chars[$word]);\n         \
    \   $max_word = $word;\n        }\n    }\n    return $max_word;\n}\n$words = ['name',\
    \ 'of', 'string'];\necho find_max($words);\necho PHP_EOL;\n$words = ['name', 'enam',\
    \ 'game'];\necho find_max($words);\necho PHP_EOL;\n$words = ['aaaaaaa', 'bb',\
    \ 'cc'];\necho find_max($words);\necho PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "string\nname\naaaaaaa\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmplqpim125.php:40\nStack trace:\n#0 /tmp/tmplqpim125.php(51): test()\n\
    #1 {main}\n  thrown in /tmp/tmplqpim125.php on line 40\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $max_word = \"\";\n  $max_len\
    \ = 0;\n  foreach ($words as $word) {\n    $u_chars = array_unique(str_split($word));\n\
    \    $len = count($u_chars);\n    if ($len > $max_len) {\n      $max_len = $len;\n\
    \      $max_word = $word;\n    }\n  }\n  return $max_word;\n}\n\n$words = [\"\
    name\", \"of\", \"string\"];\necho find_max($words) . \"\\n\";\n$words = [\"name\"\
    , \"enam\", \"game\"];\necho find_max($words) . \"\\n\";\n$words = [\"aaaaaaa\"\
    , \"bb\", \"cc\"];\necho find_max($words) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "string\nname\naaaaaaa\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp6mjaqx1j.php:38\nStack trace:\n#0 /tmp/tmp6mjaqx1j.php(49): test()\n\
    #1 {main}\n  thrown in /tmp/tmp6mjaqx1j.php on line 38\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = array_fill(0,\
    \ count($words), 0);\n    for ($i = 0; $i < count($words); $i++) {\n        $c\
    \ = 0;\n        $unique = array();\n        while ($c < strlen($words[$i])) {\n\
    \            if (!in_array($words[$i][$c], $unique)) {\n                array_push($unique,\
    \ $words[$i][$c]);\n            }\n            $c++;\n        }\n        $max[$i]\
    \ = count($unique);\n    }\n    $max_index = 0;\n    for ($i = 1; $i < count($max);\
    \ $i++) {\n        if ($max[$i] > $max[$max_index]) {\n            $max_index\
    \ = $i;\n        }\n    }\n    return $words[$max_index];\n}\n\n$words = [\"name\"\
    , \"of\", \"string\"];\necho find_max($words) . \"\\n\";\n$words = [\"name\",\
    \ \"enam\", \"game\"];\necho find_max($words) . \"\\n\";\n$words = [\"aaaaaaa\"\
    , \"bb\", \"cc\"];\necho find_max($words) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "string\nname\naaaaaaa\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp62q0rdfv.php:46\nStack trace:\n#0 /tmp/tmp62q0rdfv.php(57): test()\n\
    #1 {main}\n  thrown in /tmp/tmp62q0rdfv.php on line 46\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max_word = '';\n   \
    \ $max_chars = 0;\n    foreach ($words as $word) {\n        $count = count_unique_chars($word);\n\
    \        if ($count > $max_chars) {\n            $max_chars = $count;\n      \
    \      $max_word = $word;\n        }\n    }\n    return $max_word;\n}\n\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmpm1h4dky2.php:16\nStack trace:\n#0 /tmp/tmpm1h4dky2.php(26): find_max(Array)\n\
    #1 /tmp/tmpm1h4dky2.php(30): candidate(Array)\n#2 /tmp/tmpm1h4dky2.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmpm1h4dky2.php on line 16\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    // Feel free to modify\
    \ the code below\n    $max = $words[0];\n    foreach ($words as $word) {\n   \
    \     if (count_chars($word) > count_chars($max)) {\n            $max = $word;\n\
    \        }\n    }\n    return $max;\n}\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoqt6m1pk.php:27\n\
    Stack trace:\n#0 /tmp/tmpoqt6m1pk.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpoqt6m1pk.php\
    \ on line 27\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n\tif (count($words) == 0)\
    \ {\n\t\treturn NULL;\n\t}\n\t$max_num_unique_chars = 0;\n\t$max_index = 0;\n\t\
    foreach ($words as $index => $word) {\n\t\t$chars = array();\n\t\tfor ($i = 0;\
    \ $i < strlen($word); $i++) {\n\t\t\t$chars[$word[$i]] = 1;\n\t\t}\n\t\t$num_unique_chars\
    \ = count($chars);\n\t\tif ($num_unique_chars > $max_num_unique_chars) {\n\t\t\
    \t$max_num_unique_chars = $num_unique_chars;\n\t\t\t$max_index = $index;\n\t\t\
    }\n\t}\n\treturn $words[$max_index];\n}\n\n$array = array(\"aaaaaaa\", \"bb\"\
    , \"cc\");\nprint find_max($array);\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "aaaaaaa\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgvq822g0.php:40\n\
    Stack trace:\n#0 /tmp/tmpgvq822g0.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpgvq822g0.php\
    \ on line 40\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  foreach ($words as $index\
    \ => $word) {\n    $unique_chars[$index] = count_chars($word, 1);\n  }\n  $num_unique_chars\
    \ = array_map(\"count\", $unique_chars);\n  $max_index = array_search(max($num_unique_chars),\
    \ $num_unique_chars);\n  return $words[$max_index];\n}\nprint_r(find_max(array(\"\
    name\", \"of\", \"string\")) . \"\\n\");\nprint_r(find_max(array(\"name\", \"\
    enam\", \"game\")) . \"\\n\");\nprint_r(find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\")) . \"\\n\");\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "string\nname\naaaaaaa\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpwzwb5rm8.php:29\nStack trace:\n#0 /tmp/tmpwzwb5rm8.php(40): test()\n\
    #1 {main}\n  thrown in /tmp/tmpwzwb5rm8.php on line 29\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $best_word = $words[0];\n\
    \    $best_word_len = strlen(implode(array_unique(str_split($best_word))));\n\
    \    foreach ($words as $word) {\n        $word_len = strlen(implode(array_unique(str_split($word))));\n\
    \        if ($word_len > $best_word_len) {\n            $best_word = $word;\n\
    \            $best_word_len = $word_len;\n        }\n    }\n    return $best_word;\n\
    }\n\necho find_max(array(\"name\", \"of\", \"string\")) . PHP_EOL;\necho find_max(array(\"\
    name\", \"enam\", \"game\")) . PHP_EOL;\necho find_max(array(\"aaaaaaa\", \"bb\"\
    , \"cc\")) . PHP_EOL;\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "string\nname\naaaaaaa\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpebo54tn_.php:34\nStack trace:\n#0 /tmp/tmpebo54tn_.php(45): test()\n\
    #1 {main}\n  thrown in /tmp/tmpebo54tn_.php on line 34\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $max_len = 0;\n  $res =\
    \ '';\n  foreach ($words as $word) {\n    $unique_chars = count_chars($word, 1);\n\
    \    if (count($unique_chars) > $max_len) {\n      $max_len = count($unique_chars);\n\
    \      $res = $word;\n    }\n  }\n  return $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw04elp2l.php:31\n\
    Stack trace:\n#0 /tmp/tmpw04elp2l.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpw04elp2l.php\
    \ on line 31\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $max_word = \"\";\n  $curr_word\
    \ = \"\";\n  $max_count = 0;\n  $curr_count = 0;\n  foreach ($words as $value)\
    \ {\n    $curr_word = $value;\n    $curr_count = count_unique_chars($curr_word);\n\
    \    if ($curr_count > $max_count) {\n      $max_count = $curr_count;\n      $max_word\
    \ = $curr_word;\n    }\n  }\n  return $max_word;\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmpe2o8x4jd.php:19\nStack trace:\n#0 /tmp/tmpe2o8x4jd.php(29): find_max(Array)\n\
    #1 /tmp/tmpe2o8x4jd.php(33): candidate(Array)\n#2 /tmp/tmpe2o8x4jd.php(45): test()\n\
    #3 {main}\n  thrown in /tmp/tmpe2o8x4jd.php on line 19\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = $words[0];\n \
    \   foreach ($words as $word) {\n        if (count_unique_chars($word) > count_unique_chars($max))\
    \ {\n            $max = $word;\n        }\n    }\n    return $max;\n}\n\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmp528dx65h.php:15\nStack trace:\n#0 /tmp/tmp528dx65h.php(23): find_max(Array)\n\
    #1 /tmp/tmp528dx65h.php(27): candidate(Array)\n#2 /tmp/tmp528dx65h.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmp528dx65h.php on line 15\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max_len = 0;\n    $max_string\
    \ = \"\";\n    foreach ($words as $word) {\n        $len = count(count_chars($word,\
    \ 1));\n        if ($len > $max_len) {\n            $max_len = $len;\n       \
    \     $max_string = $word;\n        }\n    }\n    return $max_string;\n}\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1o1pqpbg.php:30\n\
    Stack trace:\n#0 /tmp/tmp1o1pqpbg.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp1o1pqpbg.php\
    \ on line 30\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $unique_chars = [];\n \
    \ $highest_count = -1;\n  $max_word = NULL;\n  foreach ($words as $word) {\n \
    \   $unique_chars[$word] = array_unique(str_split($word));\n    if (count($unique_chars[$word])\
    \ > $highest_count) {\n      $highest_count = count($unique_chars[$word]);\n \
    \     $max_word = $word;\n    }\n  }\n  return $max_word;\n}\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqwpby_qk.php:31\n\
    Stack trace:\n#0 /tmp/tmpqwpby_qk.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpqwpby_qk.php\
    \ on line 31\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $current_max = 0;\n \
    \   $max_str = $words[0];\n    for ($i = 0; $i < count($words); $i++) {\n    \
    \    $unique_chars = array();\n        for ($j = 0; $j < strlen($words[$i]); $j++)\
    \ {\n            $char = $words[$i][$j];\n            if (!array_key_exists($char,\
    \ $unique_chars)) {\n                $unique_chars[$char] = 1;\n            }\n\
    \        }\n        if (count($unique_chars) > $current_max) {\n            $current_max\
    \ = count($unique_chars);\n            $max_str = $words[$i];\n        }\n   \
    \ }\n    return $max_str;\n}\n\n$words = array(\"name\", \"of\", \"string\");\n\
    echo find_max($words) . PHP_EOL;\n\n$words = array(\"name\", \"enam\", \"game\"\
    );\necho find_max($words) . PHP_EOL;\n\n$words = array(\"aaaaaaa\", \"bb\", \"\
    cc\");\necho find_max($words) . PHP_EOL;\nfunction candidate(...$args) {\n   \
    \ return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "string\nname\naaaaaaa\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpyz7i_8lh.php:45\nStack trace:\n#0 /tmp/tmpyz7i_8lh.php(56): test()\n\
    #1 {main}\n  thrown in /tmp/tmpyz7i_8lh.php on line 45\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $max_word = $words[0];\n\
    \  $max_len = count(array_unique(str_split($max_word)));\n  for ($i = 1; $i <\
    \ count($words); $i++) {\n    $word = $words[$i];\n    $len = count(array_unique(str_split($word)));\n\
    \    if ($len > $max_len) {\n      $max_word = $word;\n      $max_len = $len;\n\
    \    }\n  }\n  return $max_word;\n}\n$words = array(\"name\", \"of\", \"string\"\
    );\necho find_max($words) . \"\\n\";\n$words = array(\"name\", \"enam\", \"game\"\
    );\necho find_max($words) . \"\\n\";\n$words = array(\"aaaaaaa\", \"bb\", \"cc\"\
    );\necho find_max($words) . \"\\n\";\n$words = array(\"aaabbbccc\", \"abc\", \"\
    cc\");\necho find_max($words) . \"\\n\";\n$words = array(\"abc\", \"cc\", \"aaabbbccc\"\
    );\necho find_max($words) . \"\\n\";\n$words = array(\"aa\", \"bb\", \"cc\");\n\
    echo find_max($words) . \"\\n\";\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "string\nname\naaaaaaa\naaabbbccc\nabc\naa\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpjkqjywop.php:43\nStack trace:\n#0 /tmp/tmpjkqjywop.php(54):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpjkqjywop.php on line 43\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $longest\
    \ = $words[0];\n    foreach ($words as $word) {\n        $unique = array_unique(str_split($word));\n\
    \        if (count($unique) > $max) {\n            $max = count($unique);\n  \
    \          $longest = $word;\n        }\n    }\n    return $longest;\n}\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7e3b0q7w.php:30\n\
    Stack trace:\n#0 /tmp/tmp7e3b0q7w.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp7e3b0q7w.php\
    \ on line 30\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $max_word = $words[0];\n\
    \  $max_count = count_unique_characters($max_word);\n  foreach ($words as $word)\
    \ {\n    $count = count_unique_characters($word);\n    if ($count > $max_count)\
    \ {\n      $max_count = $count;\n      $max_word = $word;\n    }\n  }\n  return\
    \ $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_characters()\
    \ in /tmp/tmp5f_4mu17.php:14\nStack trace:\n#0 /tmp/tmp5f_4mu17.php(26): find_max(Array)\n\
    #1 /tmp/tmp5f_4mu17.php(30): candidate(Array)\n#2 /tmp/tmp5f_4mu17.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmp5f_4mu17.php on line 14\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $result = null;\n  $max_count\
    \ = 0;\n  foreach ($words as $word) {\n    $count = count_unique_characters($word);\n\
    \    if ($count > $max_count) {\n      $max_count = $count;\n      $result = $word;\n\
    \    }\n  }\n  return $result;\n}\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_characters()\
    \ in /tmp/tmp2fete9o3.php:16\nStack trace:\n#0 /tmp/tmp2fete9o3.php(25): find_max(Array)\n\
    #1 /tmp/tmp2fete9o3.php(29): candidate(Array)\n#2 /tmp/tmp2fete9o3.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmp2fete9o3.php on line 16\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max_word = '';\n   \
    \ $max_count = 0;\n    foreach ($words as $word) {\n        $letters = array();\n\
    \        for ($i = 0; $i < strlen($word); $i++) {\n            $letters[$word[$i]]\
    \ = 1;\n        }\n        $count = count($letters);\n        if ($count > $max_count)\
    \ {\n            $max_count = $count;\n            $max_word = $word;\n      \
    \  }\n    }\n    return $max_word;\n}\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgthbksst.php:34\n\
    Stack trace:\n#0 /tmp/tmpgthbksst.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpgthbksst.php\
    \ on line 34\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = '';\n    $max_unique\
    \ = 0;\n    foreach ($words as $word) {\n        $unique = array_unique(str_split($word));\n\
    \        if (count($unique) > $max_unique) {\n            $max = $word;\n    \
    \        $max_unique = count($unique);\n        }\n    }\n    return $max;\n}\n\
    function candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpop_ic5hl.php:30\n\
    Stack trace:\n#0 /tmp/tmpop_ic5hl.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpop_ic5hl.php\
    \ on line 30\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $unique_words = array();\n\
    \  $unique_chars = array();\n  $unique_count = array();\n  foreach ($words as\
    \ $word) {\n    $unique_words[$word] = array_unique(str_split($word));\n    $unique_chars[$word]\
    \ = count($unique_words[$word]);\n    $unique_count[$word] = count($unique_words[$word]);\n\
    \  }\n  asort($unique_count);\n  $max_unique = $unique_count[0];\n  $top_words\
    \ = array();\n  foreach ($unique_count as $word => $num) {\n    if ($num == $max_unique)\
    \ {\n      $top_words[] = $word;\n    }\n  }\n  asort($top_words);\n  $top_word\
    \ = $top_words[0];\n  return $top_word;\n}\nfunction candidate(...$args) {\n \
    \   return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmpqoz3y8xw.php on line 22\n\n\
    Warning: Undefined array key 0 in /tmp/tmpqoz3y8xw.php on line 30\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpqoz3y8xw.php:38\nStack trace:\n\
    #0 /tmp/tmpqoz3y8xw.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpqoz3y8xw.php\
    \ on line 38\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $array_size = count($words);\n\
    \  $max_word = \"\";\n  $max_val = 0;\n  for ($i = 0; $i < $array_size; $i++)\
    \ {\n    $this_val = get_val($words[$i]);\n    if ($this_val > $max_val) {\n \
    \     $max_val = $this_val;\n      $max_word = $words[$i];\n    }\n  }\n  return\
    \ $max_word;\n}\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_val() in\
    \ /tmp/tmpsevof9rp.php:17\nStack trace:\n#0 /tmp/tmpsevof9rp.php(26): find_max(Array)\n\
    #1 /tmp/tmpsevof9rp.php(30): candidate(Array)\n#2 /tmp/tmpsevof9rp.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmpsevof9rp.php on line 17\n"
  timestamp: 1659979964
- exit_code: 0
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $word_lengths = [];\n \
    \ foreach ($words as $word) {\n    $word_lengths[$word] = strlen(implode(array_unique(str_split($word))));\n\
    \  }\n  arsort($word_lengths);\n  $max_words = [];\n  foreach ($word_lengths as\
    \ $word => $length) {\n    if ($length === max($word_lengths)) {\n      $max_words[]\
    \ = $word;\n    }\n  }\n  sort($max_words);\n  return $max_words[0];\n}\n$array1\
    \ = [\"name\", \"of\", \"string\"];\n$array2 = [\"name\", \"enam\", \"game\"];\n\
    $array3 = [\"aaaaaaa\", \"bb\", \"cc\"];\nprint_r(find_max($array1));\nprint_r(find_max($array2));\n\
    print_r(find_max($array3));\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: stringenamaaaaaaa
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $max_count = 0;\n  $max_count_word\
    \ = null;\n  foreach ($words as $word) {\n    $count = count_unique_characters($word);\n\
    \    if ($count > $max_count) {\n      $max_count = $count;\n      $max_count_word\
    \ = $word;\n    }\n  }\n  return $max_count_word;\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_characters()\
    \ in /tmp/tmphz7x12ib.php:16\nStack trace:\n#0 /tmp/tmphz7x12ib.php(26): find_max(Array)\n\
    #1 /tmp/tmphz7x12ib.php(30): candidate(Array)\n#2 /tmp/tmphz7x12ib.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmphz7x12ib.php on line 16\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $word_counts = array_map(function($word)\
    \ {\n        return count_chars($word, 3);\n    }, $words);\n    $counts = array_map(function($word_count)\
    \ {\n        return count($word_count);\n    }, $word_counts);\n    $max_count\
    \ = max($counts);\n    $max_index = array_search($max_count, $counts);\n    return\
    \ $words[$max_index];\n}\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: count(): Argument #1 ($value) must be\
    \ of type Countable|array, string given in /tmp/tmpjfzxgcqk.php:17\nStack trace:\n\
    #0 [internal function]: {closure}('aemn')\n#1 /tmp/tmpjfzxgcqk.php(18): array_map(Object(Closure),\
    \ Array)\n#2 /tmp/tmpjfzxgcqk.php(24): find_max(Array)\n#3 /tmp/tmpjfzxgcqk.php(28):\
    \ candidate(Array)\n#4 /tmp/tmpjfzxgcqk.php(40): test()\n#5 {main}\n  thrown in\
    \ /tmp/tmpjfzxgcqk.php on line 17\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max_len = 0;\n    $max_words\
    \ = array();\n    foreach ($words as $word) {\n        $unique_chars = 0;\n  \
    \      $chars = array();\n        for ($i = 0; $i < strlen($word); $i++) {\n \
    \           if (!isset($chars[$word[$i]])) {\n                $chars[$word[$i]]\
    \ = true;\n                $unique_chars++;\n            }\n        }\n      \
    \  if ($unique_chars > $max_len) {\n            $max_len = $unique_chars;\n  \
    \          $max_words = array($word);\n        } else if ($unique_chars == $max_len)\
    \ {\n            $max_words[] = $word;\n        }\n    }\n    usort($max_words,\
    \ \"sort_strings\");\n    return $max_words[0];\n}\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: usort(): Argument #2 ($callback) must\
    \ be a valid callback, function \"sort_strings\" not found or invalid function\
    \ name in /tmp/tmpuns1slug.php:31\nStack trace:\n#0 /tmp/tmpuns1slug.php(31):\
    \ usort(Array, 'sort_strings')\n#1 /tmp/tmpuns1slug.php(35): find_max(Array)\n\
    #2 /tmp/tmpuns1slug.php(39): candidate(Array)\n#3 /tmp/tmpuns1slug.php(51): test()\n\
    #4 {main}\n  thrown in /tmp/tmpuns1slug.php on line 31\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n\t$max = 0;\n\t$max_words\
    \ = array();\n\tforeach ($words as $word) {\n\t\t$uniques = count_uniques($word);\n\
    \t\tif ($uniques > $max) {\n\t\t\t$max = $uniques;\n\t\t\t$max_words = array($word);\n\
    \t\t} else if ($uniques == $max) {\n\t\t\t$max_words[] = $word;\n\t\t}\n\t}\n\t\
    usort($max_words, \"compare_lex\");\n\treturn $max_words[0];\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_uniques()\
    \ in /tmp/tmp1_pfpuha.php:16\nStack trace:\n#0 /tmp/tmp1_pfpuha.php(29): find_max(Array)\n\
    #1 /tmp/tmp1_pfpuha.php(33): candidate(Array)\n#2 /tmp/tmp1_pfpuha.php(45): test()\n\
    #3 {main}\n  thrown in /tmp/tmp1_pfpuha.php on line 16\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max_word = '';\n   \
    \ $max_count = 0;\n    foreach ($words as $word) {\n        $chars = array();\n\
    \        for ($i = 0; $i < strlen($word); $i++) {\n            $char = $word[$i];\n\
    \            if (!in_array($char, $chars)) {\n                $chars[] = $char;\n\
    \            }\n        }\n        if (count($chars) > $max_count) {\n       \
    \     $max_count = count($chars);\n            $max_word = $word;\n        }\n\
    \    }\n    return $max_word;\n}\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp85c36gjl.php:36\n\
    Stack trace:\n#0 /tmp/tmp85c36gjl.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp85c36gjl.php\
    \ on line 36\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $maxLength = 0;\n  $maxWord\
    \ = $words[0];\n  foreach ($words as $w) {\n    $uniqueLetters = array_unique(str_split($w));\n\
    \    if (count($uniqueLetters) > $maxLength) {\n      $maxLength = count($uniqueLetters);\n\
    \      $maxWord = $w;\n    }\n  }\n  return $maxWord;\n}\necho find_max(array(\"\
    name\", \"of\", \"string\")) . \"\\n\";\necho find_max(array(\"name\", \"enam\"\
    , \"game\")) . \"\\n\";\necho find_max(array(\"aaaaaaa\", \"bb\", \"cc\")) . \"\
    \\n\";\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "string\nname\naaaaaaa\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpavjyo9c3.php:33\nStack trace:\n#0 /tmp/tmpavjyo9c3.php(44): test()\n\
    #1 {main}\n  thrown in /tmp/tmpavjyo9c3.php on line 33\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  foreach ($words as $word)\
    \ {\n    $characters = str_split($word);\n    $uniq_characters = array_unique($characters);\n\
    \    $count = count($uniq_characters);\n    $counts[$word] = $count;\n  }\n  arsort($counts);\n\
    \  return key($counts);\n}\n\n$words = array(\"name\", \"of\", \"string\");\n\
    echo find_max($words) . \"\\n\";\n$words = array(\"name\", \"enam\", \"game\"\
    );\necho find_max($words) . \"\\n\";\n$words = array(\"aaaaaaa\", \"bb\", \"cc\"\
    );\necho find_max($words) . \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "string\nname\naaaaaaa\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpd6q777uc.php:35\nStack trace:\n#0 /tmp/tmpd6q777uc.php(46): test()\n\
    #1 {main}\n  thrown in /tmp/tmpd6q777uc.php on line 35\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $mostUnique = \"\";\n\
    \    $maxUnique = 0;\n    foreach ($words as $word) {\n        $unique = get_unique_chars($word);\n\
    \        if (count($unique) > $maxUnique) {\n            $maxUnique = count($unique);\n\
    \            $mostUnique = $word;\n        }\n    }\n    return $mostUnique;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_unique_chars()\
    \ in /tmp/tmp1p1zw3yd.php:16\nStack trace:\n#0 /tmp/tmp1p1zw3yd.php(26): find_max(Array)\n\
    #1 /tmp/tmp1p1zw3yd.php(30): candidate(Array)\n#2 /tmp/tmp1p1zw3yd.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmp1p1zw3yd.php on line 16\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $longest_word = $words[0];\n\
    \    $longest_word_len = get_unique_len($longest_word);\n    for ($i = 1; $i <\
    \ count($words); $i++) {\n        $word = $words[$i];\n        $word_len = get_unique_len($word);\n\
    \        if ($word_len > $longest_word_len) {\n            $longest_word = $word;\n\
    \            $longest_word_len = $word_len;\n        }\n    }\n    return $longest_word;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_unique_len()\
    \ in /tmp/tmp5jjr3r7g.php:14\nStack trace:\n#0 /tmp/tmp5jjr3r7g.php(27): find_max(Array)\n\
    #1 /tmp/tmp5jjr3r7g.php(31): candidate(Array)\n#2 /tmp/tmp5jjr3r7g.php(43): test()\n\
    #3 {main}\n  thrown in /tmp/tmp5jjr3r7g.php on line 14\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n\t$unique_chars = [];\n\t\
    $max_size = 0;\n\t$max_index = 0;\n\tfor ($i = 0; $i < count($words); $i++) {\n\
    \t\t$word = $words[$i];\n\t\tfor ($j = 0; $j < strlen($word); $j++) {\n\t\t\t\
    $char = $word[$j];\n\t\t\tif (!in_array($char, $unique_chars)) {\n\t\t\t\tarray_push($unique_chars,\
    \ $char);\n\t\t\t}\n\t\t}\n\t\tif (count($unique_chars) > $max_size) {\n\t\t\t\
    $max_size = count($unique_chars);\n\t\t\t$max_index = $i;\n\t\t}\n\t\t$unique_chars\
    \ = [];\n\t}\n\treturn $words[$max_index];\n}\nfunction candidate(...$args) {\n\
    \    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpylsqmjfa.php:38\n\
    Stack trace:\n#0 /tmp/tmpylsqmjfa.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpylsqmjfa.php\
    \ on line 38\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $max_word = $words[0];\n\
    \  $max_length = strlen(max_unique_chars($words[0]));\n  foreach ($words as $word)\
    \ {\n    $unique_length = strlen(max_unique_chars($word));\n    if ($unique_length\
    \ > $max_length) {\n      $max_length = $unique_length;\n      $max_word = $word;\n\
    \    }\n  }\n  return $max_word;\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function max_unique_chars()\
    \ in /tmp/tmp0u8r8xrz.php:14\nStack trace:\n#0 /tmp/tmp0u8r8xrz.php(26): find_max(Array)\n\
    #1 /tmp/tmp0u8r8xrz.php(30): candidate(Array)\n#2 /tmp/tmp0u8r8xrz.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmp0u8r8xrz.php on line 14\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $max = array(\n    'num'\
    \ => 0,\n    'word' => '',\n  );\n  foreach ($words as $word) {\n    $num = count(array_unique(str_split($word)));\n\
    \    if ($num > $max['num']) {\n      $max['num'] = $num;\n      $max['word']\
    \ = $word;\n    }\n  }\n  return $max['word'];\n}\n$array = array(\"aaaaaaa\"\
    , \"bb\", \"cc\");\necho find_max($array);\nfunction candidate(...$args) {\n \
    \   return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "aaaaaaa\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqaw_090j.php:34\n\
    Stack trace:\n#0 /tmp/tmpqaw_090j.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpqaw_090j.php\
    \ on line 34\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $uniques = [];\n  foreach\
    \ ($words as $word) {\n    $uniques[$word] = array_unique(str_split($word));\n\
    \  }\n  // uasort($uniques, function($a, $b) {\n  //   return count($a) - count($b);\n\
    \  // });\n  // print_r($uniques);\n  $max = array_slice($uniques, 0, 1);\n  foreach\
    \ ($uniques as $unique) {\n    if (count($unique) > count($max)) {\n      $max\
    \ = $unique;\n    }\n  }\n  return array_search($max, $uniques);\n}\n\n$array\
    \ = [\"name\", \"of\", \"string\"];\nprint_r(find_max($array));\necho \"\\n\"\
    ;\n$array = [\"name\", \"enam\", \"game\"];\nprint_r(find_max($array));\necho\
    \ \"\\n\";\n$array = [\"aaaaaaa\", \"bb\", \"cc\"];\nprint_r(find_max($array));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "string\nname\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqnsflwmt.php:45\n\
    Stack trace:\n#0 /tmp/tmpqnsflwmt.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpqnsflwmt.php\
    \ on line 45\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = $words[0];\n \
    \   $max_count = count_unique_chars($max);\n    for ($i = 1; $i < count($words);\
    \ $i++) {\n        $cur_count = count_unique_chars($words[$i]);\n        if ($cur_count\
    \ > $max_count) {\n            $max = $words[$i];\n            $max_count = $cur_count;\n\
    \        }\n    }\n    return $max;\n}\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmp4v7j7_w_.php:14\nStack trace:\n#0 /tmp/tmp4v7j7_w_.php(25): find_max(Array)\n\
    #1 /tmp/tmp4v7j7_w_.php(29): candidate(Array)\n#2 /tmp/tmp4v7j7_w_.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmp4v7j7_w_.php on line 14\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max_word = $words[0];\n\
    \    $max_letters = count_letters($words[0]);\n    for ($i = 1; $i < count($words);\
    \ $i++) {\n        $word = $words[$i];\n        $letters = count_letters($word);\n\
    \        if ($letters > $max_letters) {\n            $max_word = $word;\n    \
    \        $max_letters = $letters;\n        } else if ($letters == $max_letters)\
    \ {\n            if ($word < $max_word) {\n                $max_word = $word;\n\
    \            }\n        }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_letters()\
    \ in /tmp/tmp6sjjwk4a.php:14\nStack trace:\n#0 /tmp/tmp6sjjwk4a.php(31): find_max(Array)\n\
    #1 /tmp/tmp6sjjwk4a.php(35): candidate(Array)\n#2 /tmp/tmp6sjjwk4a.php(47): test()\n\
    #3 {main}\n  thrown in /tmp/tmp6sjjwk4a.php on line 14\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    foreach ($words as $word)\
    \ {\n        $unique = count_chars($word, 3);\n        $unique = substr($unique,\
    \ 1, strlen($unique)-2);\n        $unique = count(explode(\",\", $unique));\n\
    \        $words_unique[$word] = $unique;\n    }\n    asort($words_unique);\n \
    \   return array_pop(array_keys($words_unique));\n}\n$words = array(\"name\",\
    \ \"of\", \"string\");\necho find_max($words);\necho \"<br>\";\n$words = array(\"\
    name\", \"enam\", \"game\");\necho find_max($words);\necho \"<br>\";\n$words =\
    \ array(\"aaaaaaa\", \"bb\", \"cc\");\necho find_max($words);\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nNotice: Only variables should be passed by reference in /tmp/tmp746l2xi1.php\
    \ on line 20\nstring<br>\nNotice: Only variables should be passed by reference\
    \ in /tmp/tmp746l2xi1.php on line 20\ngame<br>\nNotice: Only variables should\
    \ be passed by reference in /tmp/tmp746l2xi1.php on line 20\ncc\nNotice: Only\
    \ variables should be passed by reference in /tmp/tmp746l2xi1.php on line 20\n\
    \nNotice: Only variables should be passed by reference in /tmp/tmp746l2xi1.php\
    \ on line 20\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp746l2xi1.php:36\n\
    Stack trace:\n#0 /tmp/tmp746l2xi1.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp746l2xi1.php\
    \ on line 36\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $longest = \"\";\n  $longest_unique\
    \ = array();\n  foreach ($words as $word) {\n    $unique = array_unique(str_split($word));\n\
    \    if (count($unique) > count($longest_unique)) {\n      $longest = $word;\n\
    \      $longest_unique = $unique;\n    }\n  }\n  return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg14elrit.php:31\n\
    Stack trace:\n#0 /tmp/tmpg14elrit.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpg14elrit.php\
    \ on line 31\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n\t$max = 0;\n\t$max_word\
    \ = \"\";\n\tforeach ($words as $word) {\n\t\t$count = count_unique_chars($word);\n\
    \t\tif ($count > $max) {\n\t\t\t$max = $count;\n\t\t\t$max_word = $word;\n\t\t\
    }\n\t}\n\treturn $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmplnc4rm2i.php:16\nStack trace:\n#0 /tmp/tmplnc4rm2i.php(26): find_max(Array)\n\
    #1 /tmp/tmplnc4rm2i.php(30): candidate(Array)\n#2 /tmp/tmplnc4rm2i.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmplnc4rm2i.php on line 16\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = strlen($words[0]);\n\
    \    $max_word = $words[0];\n    foreach ($words as $word) {\n        if ($max\
    \ < (strlen(unique_str($word)))) {\n            $max = strlen(unique_str($word));\n\
    \            $max_word = $word;\n        }\n    }\n    return $max_word;\n}\n\n\
    function candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function unique_str()\
    \ in /tmp/tmpbmga9jeu.php:16\nStack trace:\n#0 /tmp/tmpbmga9jeu.php(25): find_max(Array)\n\
    #1 /tmp/tmpbmga9jeu.php(29): candidate(Array)\n#2 /tmp/tmpbmga9jeu.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpbmga9jeu.php on line 16\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  // YOUR CODE GOES HERE\n\
    \  $max_len = 0;\n  $max_word = '';\n  foreach ($words as $word) {\n    $word_len\
    \ = strlen(uniq_chars($word));\n    if ($word_len > $max_len) {\n      $max_len\
    \ = $word_len;\n      $max_word = $word;\n    }\n  }\n  return $max_word;\n}\n\
    \nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function uniq_chars()\
    \ in /tmp/tmpxc2_gl94.php:17\nStack trace:\n#0 /tmp/tmpxc2_gl94.php(27): find_max(Array)\n\
    #1 /tmp/tmpxc2_gl94.php(31): candidate(Array)\n#2 /tmp/tmpxc2_gl94.php(43): test()\n\
    #3 {main}\n  thrown in /tmp/tmpxc2_gl94.php on line 17\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max_count = -1;\n  \
    \  $chosen_word = \"\";\n    foreach ($words as $word) {\n        $chars = count_chars($word,\
    \ 1);\n        $count = count($chars);\n        if ($count > $max_count) {\n \
    \           $max_count = $count;\n            $chosen_word = $word;\n        }\n\
    \    }\n    return $chosen_word;\n}\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp961xfzvd.php:31\n\
    Stack trace:\n#0 /tmp/tmp961xfzvd.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp961xfzvd.php\
    \ on line 31\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $maxLength = 0;\n  $maxWord\
    \ = '';\n  foreach ($words as $word) {\n    $l = strlen(count_chars($word, 1));\n\
    \    if ($l > $maxLength) {\n      $maxLength = $l;\n      $maxWord = $word;\n\
    \    }\n  }\n  return $maxWord;\n}\n\n$words = array(\"name\", \"of\", \"string\"\
    );\necho find_max($words) . PHP_EOL;\n$words = array(\"name\", \"enam\", \"game\"\
    );\necho find_max($words) . PHP_EOL;\n$words = array(\"aaaaaaa\", \"bb\", \"cc\"\
    );\necho find_max($words) . PHP_EOL;\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: strlen(): Argument #1 ($str) must be\
    \ of type string, array given in /tmp/tmpz3tlmy48.php:16\nStack trace:\n#0 /tmp/tmpz3tlmy48.php(26):\
    \ find_max(Array)\n#1 {main}\n  thrown in /tmp/tmpz3tlmy48.php on line 16\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n\t$lex = array();\n\tforeach\
    \ ($words as $word) {\n\t\tif (strlen($word) > 0) {\n\t\t\t$lex[$word] = strlen(implode('',\
    \ array_unique(str_split($word))));\n\t\t}\n\t}\n\treturn key($lex);\n}\necho\
    \ find_max(array(\"name\", \"of\", \"string\")) . \"\\n\";\necho find_max(array(\"\
    name\", \"enam\", \"game\")) . \"\\n\";\necho find_max(array(\"aaaaaaa\", \"bb\"\
    , \"cc\")) . \"\\n\";\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "name\nname\naaaaaaa\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpz7lek44x.php:29\nStack trace:\n#0 /tmp/tmpz7lek44x.php(41): test()\n\
    #1 {main}\n  thrown in /tmp/tmpz7lek44x.php on line 29\n"
  timestamp: 1659979964
- exit_code: 0
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    // sort the words array\
    \ by number of unique chars\n    // if numbers of unique chars are the same, sort\
    \ by lexicographical order\n    usort($words, function($a, $b) {\n        $unique_chars_a\
    \ = count_chars($a, 3);\n        $unique_chars_b = count_chars($b, 3);\n     \
    \   $count_a = strlen($unique_chars_a);\n        $count_b = strlen($unique_chars_b);\n\
    \        if ($count_a == $count_b) {\n            return strcmp($a, $b);\n   \
    \     }\n        return $count_b - $count_a;\n    });\n    return $words[0];\n\
    }\n\n$words = [\"string\", \"name\", \"of\"];\necho find_max($words) . PHP_EOL;\n\
    $words = [\"name\", \"enam\", \"game\"];\necho find_max($words) . PHP_EOL;\n$words\
    \ = [\"aaaaaaa\", \"bb\", \"cc\"];\necho find_max($words) . PHP_EOL;\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'string

    enam

    aaaaaaa

    '
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_word\
    \ = \"\";\n    foreach ($words as $word) {\n        $unique_chars = 0;\n     \
    \   $char_seen = array();\n        for ($i = 0; $i < strlen($word); $i++) {\n\
    \            if (!isset($char_seen[$word[$i]])) {\n                $unique_chars++;\n\
    \                $char_seen[$word[$i]] = True;\n            }\n        }\n   \
    \     if ($unique_chars > $max) {\n            $max = $unique_chars;\n       \
    \     $max_word = $word;\n        }\n    }\n    return $max_word;\n}\n\n$words\
    \ = array(\"name\", \"of\", \"string\");\n$words = array(\"name\", \"enam\", \"\
    game\");\n$words = array(\"aaaaaaa\", \"bb\", \"cc\");\necho find_max($words)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "aaaaaaa\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw_pebc14.php:42\n\
    Stack trace:\n#0 /tmp/tmpw_pebc14.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpw_pebc14.php\
    \ on line 42\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $max = array();\n  foreach\
    \ ($words as $word) {\n    $max[] = strlen(count_chars($word, 3));\n  }\n  $max\
    \ = max($max);\n  foreach ($words as $word) {\n    if (strlen(count_chars($word,\
    \ 3)) == $max) {\n      return $word;\n    }\n  }\n}\necho find_max(array(\"name\"\
    , \"of\", \"string\")) . \"\\n\";\necho find_max(array(\"name\", \"enam\", \"\
    game\")) . \"\\n\";\necho find_max(array(\"aaaaaaa\", \"bb\", \"cc\")) . \"\\\
    n\";\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "string\nname\naaaaaaa\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpmiw46tau.php:34\nStack trace:\n#0 /tmp/tmpmiw46tau.php(45): test()\n\
    #1 {main}\n  thrown in /tmp/tmpmiw46tau.php on line 34\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max_word = null;\n \
    \   $max_char_count = 0;\n    foreach ($words as $word) {\n        $unique_chars\
    \ = [];\n        $unique_chars_count = 0;\n        foreach (str_split($word) as\
    \ $char) {\n            if (!in_array($char, $unique_chars)) {\n             \
    \   $unique_chars[] = $char;\n                $unique_chars_count++;\n       \
    \     }\n        }\n        if ($unique_chars_count > $max_char_count) {\n   \
    \         $max_char_count = $unique_chars_count;\n            $max_word = $word;\n\
    \        }\n    }\n    return $max_word;\n}\n\n$words = [\"name\", \"of\", \"\
    string\"];\n$max_word = find_max($words);\necho $max_word . PHP_EOL;\n\n$words\
    \ = [\"name\", \"enam\", \"game\"];\n$max_word = find_max($words);\necho $max_word\
    \ . PHP_EOL;\n\n$words = [\"aaaaaaa\", \"bb\", \"cc\"];\n$max_word = find_max($words);\n\
    echo $max_word . PHP_EOL;\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "string\nname\naaaaaaa\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmprl04ir94.php:49\nStack trace:\n#0 /tmp/tmprl04ir94.php(60): test()\n\
    #1 {main}\n  thrown in /tmp/tmprl04ir94.php on line 49\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = null;\n    $max_count\
    \ = 0;\n    foreach ($words as $word) {\n        $chars = array();\n        $count\
    \ = 0;\n        for ($i = 0; $i < strlen($word); $i++) {\n            $char =\
    \ substr($word, $i, 1);\n            if (!isset($chars[$char])) {\n          \
    \      $chars[$char] = 1;\n                $count++;\n            }\n        }\n\
    \        if ($count > $max_count) {\n            $max = $word;\n            $max_count\
    \ = $count;\n        }\n    }\n    return $max;\n}\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp41ah6zv4.php:38\n\
    Stack trace:\n#0 /tmp/tmp41ah6zv4.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp41ah6zv4.php\
    \ on line 38\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n\t$counts = [];\n\tforeach\
    \ ($words as $word) {\n\t\t$unique_char_count = 0;\n\t\t$unique_chars = [];\n\t\
    \t$chars = str_split($word);\n\t\tforeach ($chars as $char) {\n\t\t\tif (!isset($unique_chars[$char]))\
    \ {\n\t\t\t\t$unique_char_count++;\n\t\t\t\t$unique_chars[$char] = 1;\n\t\t\t\
    }\n\t\t}\n\t\t$counts[$word] = $unique_char_count;\n\t}\n\t$max_val = max($counts);\n\
    \tforeach ($counts as $word => $count) {\n\t\tif ($count == $max_val) {\n\t\t\t\
    return $word;\n\t\t}\n\t}\n}\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl2evmqe_.php:39\n\
    Stack trace:\n#0 /tmp/tmpl2evmqe_.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpl2evmqe_.php\
    \ on line 39\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $max_word = $words[0];\n\
    \  $max_chars = unique_chars($words[0]);\n  foreach($words as $word) {\n    $word_chars\
    \ = unique_chars($word);\n    if(count($word_chars) > count($max_chars)) {\n \
    \     $max_word = $word;\n      $max_chars = $word_chars;\n    }\n  }\n  return\
    \ $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function unique_chars()\
    \ in /tmp/tmp3t3ffcav.php:14\nStack trace:\n#0 /tmp/tmp3t3ffcav.php(26): find_max(Array)\n\
    #1 /tmp/tmp3t3ffcav.php(30): candidate(Array)\n#2 /tmp/tmp3t3ffcav.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmp3t3ffcav.php on line 14\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $maxCharCount = 0;\n\
    \    $maxWord = \"\";\n    foreach ($words as $word) {\n        $charCount = count_unique_chars($word);\n\
    \        if ($charCount > $maxCharCount) {\n            $maxCharCount = $charCount;\n\
    \            $maxWord = $word;\n        }\n    }\n    return $maxWord;\n}\n\n\
    function candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmpti9o5wki.php:16\nStack trace:\n#0 /tmp/tmpti9o5wki.php(26): find_max(Array)\n\
    #1 /tmp/tmpti9o5wki.php(30): candidate(Array)\n#2 /tmp/tmpti9o5wki.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmpti9o5wki.php on line 16\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n\t// Write your code here\n\
    \t$max = array('');\n\tforeach ($words as $word) {\n\t\t$unique = array_unique(str_split($word));\n\
    \t\tif (sizeof($unique) > sizeof($max)) {\n\t\t\t$max = $unique;\n\t\t}\n\t}\n\
    \treturn array_search(implode($max), $words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz24jrv01.php:29\n\
    Stack trace:\n#0 /tmp/tmpz24jrv01.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpz24jrv01.php\
    \ on line 29\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $result = [];\n    $min_len\
    \ = count($words[0]);\n    foreach ($words as $word) {\n        if (count($word)\
    \ < $min_len) {\n            $min_len = count($word);\n        }\n    }\n    foreach\
    \ ($words as $word) {\n        if (count($word) == $min_len) {\n            array_push($result,\
    \ $word);\n        }\n    }\n    sort($result);\n    return $result[0];\n}\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: count(): Argument #1 ($value) must be\
    \ of type Countable|array, string given in /tmp/tmp3fk49iqs.php:14\nStack trace:\n\
    #0 /tmp/tmp3fk49iqs.php(29): find_max(Array)\n#1 /tmp/tmp3fk49iqs.php(33): candidate(Array)\n\
    #2 /tmp/tmp3fk49iqs.php(45): test()\n#3 {main}\n  thrown in /tmp/tmp3fk49iqs.php\
    \ on line 14\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $word_counts = [];\n  foreach\
    \ ($words as $word) {\n    $word_counts[$word] = sizeof(array_unique(str_split($word)));\n\
    \  }\n  arsort($word_counts);\n  return key($word_counts);\n}\n\necho find_max(array(\"\
    name\", \"of\", \"string\")) . \"\\n\";\necho find_max(array(\"name\", \"enam\"\
    , \"game\")) . \"\\n\";\necho find_max(array(\"aaaaaaa\", \"bb\", \"cc\")) . \"\
    \\n\";\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "string\nname\naaaaaaa\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpyje55pmo.php:30\nStack trace:\n#0 /tmp/tmpyje55pmo.php(41): test()\n\
    #1 {main}\n  thrown in /tmp/tmpyje55pmo.php on line 30\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n\t$max_char = 0;\n\t$max_word\
    \ = $words[0];\n\tfor ($i = 0; $i < count($words); $i++) {\n\t\t$word = $words[$i];\n\
    \t\t$unique_count = 0;\n\t\t$unique_chars = [];\n\t\tfor ($j = 0; $j < strlen($word);\
    \ $j++) {\n\t\t\t$char = $word[$j];\n\t\t\tif (!in_array($char, $unique_chars))\
    \ {\n\t\t\t\t$unique_chars[] = $char;\n\t\t\t\t$unique_count++;\n\t\t\t}\n\t\t\
    }\n\t\tif ($unique_count > $max_char) {\n\t\t\t$max_char = $unique_count;\n\t\t\
    \t$max_word = $word;\n\t\t}\n\t}\n\treturn $max_word;\n}\n$words = [\"aa\", \"\
    bb\", \"cc\", \"dd\", \"ee\", \"ff\", \"gg\", \"hh\", \"ii\", \"jj\", \"kk\",\
    \ \"ll\", \"mm\", \"nn\", \"oo\", \"pp\", \"qq\", \"rr\", \"ss\", \"tt\", \"uu\"\
    , \"vv\", \"ww\", \"xx\", \"yy\", \"zz\"];\nprint_r(find_max($words));\n\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "aa\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk5mvb3x8.php:42\n\
    Stack trace:\n#0 /tmp/tmpk5mvb3x8.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpk5mvb3x8.php\
    \ on line 42\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max_char_count = 0;\n\
    \    $result = null;\n    foreach ($words as $word) {\n        $char_count = strlen(implode('',\
    \ array_unique(str_split($word))));\n        if ($char_count > $max_char_count)\
    \ {\n            $max_char_count = $char_count;\n            $result = $word;\n\
    \        }\n    }\n    return $result;\n}\nfunction candidate(...$args) {\n  \
    \  return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7yub0s3m.php:30\n\
    Stack trace:\n#0 /tmp/tmp7yub0s3m.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp7yub0s3m.php\
    \ on line 30\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $unique_char_count = 0;\n\
    \  $unique_word = \"\";\n  foreach ($words as $word) {\n    $current_unique_count\
    \ = count_unique_chars($word);\n    if ($current_unique_count > $unique_char_count)\
    \ {\n      $unique_char_count = $current_unique_count;\n      $unique_word = $word;\n\
    \    }\n  }\n  return $unique_word;\n}\n\nfunction candidate(...$args) {\n   \
    \ return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmpv4rwev3h.php:16\nStack trace:\n#0 /tmp/tmpv4rwev3h.php(26): find_max(Array)\n\
    #1 /tmp/tmpv4rwev3h.php(30): candidate(Array)\n#2 /tmp/tmpv4rwev3h.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmpv4rwev3h.php on line 16\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $max_unique_chars = array();\n\
    \  $best_word = NULL;\n  foreach ($words as $word) {\n    $unique_chars = 0;\n\
    \    $seen_chars = array();\n    for ($i = 0; $i < strlen($word); $i++) {\n  \
    \    $char = $word[$i];\n      if (!in_array($char, $seen_chars)) {\n        $unique_chars++;\n\
    \        $seen_chars[] = $char;\n      }\n    }\n    if ($unique_chars > count($max_unique_chars))\
    \ {\n      $max_unique_chars = $seen_chars;\n      $best_word = $word;\n    }\n\
    \  }\n  return $best_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0_ytomit.php:39\n\
    Stack trace:\n#0 /tmp/tmp0_ytomit.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp0_ytomit.php\
    \ on line 39\n"
  timestamp: 1659979964
- exit_code: 0
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n\t$most_unique = array();\n\
    \tforeach ($words as $word) {\n\t\t$word_chars = str_split($word);\n\t\t$chars\
    \ = array();\n\t\tforeach ($word_chars as $char) {\n\t\t\tif (!in_array($char,\
    \ $chars)) {\n\t\t\t\t$chars[] = $char;\n\t\t\t}\n\t\t}\n\t\t$num_unique = count($chars);\n\
    \t\tif (count($most_unique) == 0) {\n\t\t\t$most_unique = array($word, $num_unique);\n\
    \t\t} else if ($num_unique > $most_unique[1]) {\n\t\t\t$most_unique = array($word,\
    \ $num_unique);\n\t\t} else if ($num_unique == $most_unique[1]) {\n\t\t\tif ($word\
    \ < $most_unique[0]) {\n\t\t\t\t$most_unique = array($word, $num_unique);\n\t\t\
    \t}\n\t\t}\n\t}\n\treturn $most_unique[0];\n}\n\n$words = array(\"name\", \"of\"\
    , \"string\");\necho find_max($words) . PHP_EOL;\n$words = array(\"name\", \"\
    enam\", \"game\");\necho find_max($words) . PHP_EOL;\n$words = array(\"aaaaaaa\"\
    , \"bb\", \"cc\");\necho find_max($words) . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'string

    enam

    aaaaaaa

    '
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $max_count = 0;\n  $max_word\
    \ = '';\n  foreach ($words as $word) {\n    $unique_chars = count_unique_chars($word);\n\
    \    if ($unique_chars > $max_count) {\n      $max_count = $unique_chars;\n  \
    \    $max_word = $word;\n    }\n  }\n  return $max_word;\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmp8fqqflst.php:16\nStack trace:\n#0 /tmp/tmp8fqqflst.php(26): find_max(Array)\n\
    #1 /tmp/tmp8fqqflst.php(30): candidate(Array)\n#2 /tmp/tmp8fqqflst.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmp8fqqflst.php on line 16\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n\t$longest = \"\";\n\t$count\
    \ = 0;\n\t$len = count($words);\n\tfor ($i = 0; $i < $len; $i++) {\n\t\t$word\
    \ = $words[$i];\n\t\t$unique = str_split(implode(array_unique(str_split($word))));\n\
    \t\t$unique_count = count($unique);\n\t\tif ($unique_count > $count) {\n\t\t\t\
    $longest = $word;\n\t\t\t$count = $unique_count;\n\t\t}\n\t}\n\treturn $longest;\n\
    }\n$words = array(\"name\", \"of\", \"string\");\necho find_max($words);\necho\
    \ \"\\n\";\n$words = array(\"name\", \"enam\", \"game\");\necho find_max($words);\n\
    echo \"\\n\";\n$words = array(\"aaaaaaa\", \"bb\", \"cc\");\necho find_max($words);\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "string\nname\naaaaaaa\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpysv4ss3w.php:42\nStack trace:\n#0 /tmp/tmpysv4ss3w.php(53): test()\n\
    #1 {main}\n  thrown in /tmp/tmpysv4ss3w.php on line 42\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $max_count = 0;\n  $max_word\
    \ = \"\";\n  foreach ($words as $word) {\n    $uniques = [];\n    for ($i = 0;\
    \ $i < strlen($word); $i++) {\n      $uniques[$word[$i]] = true;\n    }\n    $count\
    \ = count($uniques);\n    if ($count > $max_count) {\n      $max_count = $count;\n\
    \      $max_word = $word;\n    } else if ($count == $max_count) {\n      $max_word\
    \ = lex_compare($max_word, $word);\n    }\n  }\n  return $max_word;\n}\n\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function lex_compare()\
    \ in /tmp/tmp5d1ta1yo.php:25\nStack trace:\n#0 /tmp/tmp5d1ta1yo.php(32): find_max(Array)\n\
    #1 /tmp/tmp5d1ta1yo.php(37): candidate(Array)\n#2 /tmp/tmp5d1ta1yo.php(48): test()\n\
    #3 {main}\n  thrown in /tmp/tmp5d1ta1yo.php on line 25\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    // Your code here\n \
    \   $count=array();\n    foreach ($words as $word) {\n      $count[]=strlen(implode(\"\
    \",array_unique(str_split($word))));\n    }\n    for ($i=0; $i < count($count);\
    \ $i++) {\n      if ($count[$i]==max($count)) {\n        return $words[$i];\n\
    \      }\n    }\n}\necho find_max(array(\"name\", \"of\", \"string\"));\necho\
    \ \"<br>\";\necho find_max(array(\"name\", \"enam\", \"game\"));\necho \"<br>\"\
    ;\necho find_max(array(\"aaaaaaa\", \"bb\", \"cc\"));\necho \"<br>\";\necho find_max(array(\"\
    aaaaaaa\", \"bb\", \"cc\", \"dd\"));\necho \"<br>\";\necho find_max(array(\"aaaaaaa\"\
    , \"bb\", \"cc\", \"dd\", \"ee\"));\necho \"<br>\";\necho find_max(array(\"aaaaaaa\"\
    , \"bb\", \"cc\", \"dd\", \"ee\", \"ff\"));\necho \"<br>\";\necho find_max(array(\"\
    aaaaaaa\", \"bb\", \"cc\", \"dd\", \"ee\", \"ff\", \"gg\"));\necho \"<br>\";\n\
    echo find_max(array(\"aaaaaaa\", \"bb\", \"cc\", \"dd\", \"ee\", \"ff\", \"gg\"\
    , \"hh\"));\necho \"<br>\";\necho find_max(array(\"aaaaaaa\", \"bb\", \"cc\",\
    \ \"dd\", \"ee\", \"ff\", \"gg\", \"hh\", \"ii\"));\necho \"<br>\";\necho find_max(array(\"\
    aaaaaaa\", \"bb\", \"cc\", \"dd\", \"ee\", \"ff\", \"gg\", \"hh\", \"ii\", \"\
    jj\"));\necho \"<br>\";\necho find_max(array(\"aaaaaaa\", \"bb\", \"cc\", \"dd\"\
    , \"ee\", \"ff\", \"gg\", \"hh\", \"ii\", \"jj\", \"kk\"));\necho \"<br>\";\n\
    echo find_max(array(\"aaaaaaa\", \"bb\", \"cc\", \"dd\", \"ee\", \"ff\", \"gg\"\
    , \"hh\", \"ii\", \"jj\", \"\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "name", expecting ")" in /tmp/tmptnnsjgun.php
    on line 52

    '
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    if (count($words) ==\
    \ 0) {\n        return \"\";\n    }\n\n    $max_word = $words[0];\n    $max_unique_chars\
    \ = count(array_unique(str_split($max_word)));\n\n    foreach ($words as $word)\
    \ {\n        $unique_chars = count(array_unique(str_split($word)));\n        if\
    \ ($unique_chars > $max_unique_chars) {\n            $max_unique_chars = $unique_chars;\n\
    \            $max_word = $word;\n        }\n    }\n\n    return $max_word;\n}\n\
    \nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp74e07lku.php:37\n\
    Stack trace:\n#0 /tmp/tmp74e07lku.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp74e07lku.php\
    \ on line 37\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  // TODO\n}\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphd1nq988.php:20\n\
    Stack trace:\n#0 /tmp/tmphd1nq988.php(32): test()\n#1 {main}\n  thrown in /tmp/tmphd1nq988.php\
    \ on line 20\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $max_word = $words[0];\n\
    \  $max_uniq = find_uniq_chars($max_word);\n  foreach ($words as $word) {\n  \
    \  $uniq = find_uniq_chars($word);\n    if ($uniq > $max_uniq) {\n      $max_uniq\
    \ = $uniq;\n      $max_word = $word;\n    }\n  }\n  return $max_word;\n}\n\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function find_uniq_chars()\
    \ in /tmp/tmp5zke9gyq.php:14\nStack trace:\n#0 /tmp/tmp5zke9gyq.php(26): find_max(Array)\n\
    #1 /tmp/tmp5zke9gyq.php(30): candidate(Array)\n#2 /tmp/tmp5zke9gyq.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmp5zke9gyq.php on line 14\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n\t$max_count = -1;\n\t$max_word\
    \ = \"\";\n\tforeach ($words as $word) {\n\t\t$count = count_unique_chars($word);\n\
    \t\tif ($count > $max_count) {\n\t\t\t$max_count = $count;\n\t\t\t$max_word =\
    \ $word;\n\t\t}\n\t}\n\treturn $max_word;\n}\n\nfunction candidate(...$args) {\n\
    \    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmpzu6t93tw.php:16\nStack trace:\n#0 /tmp/tmpzu6t93tw.php(26): find_max(Array)\n\
    #1 /tmp/tmpzu6t93tw.php(30): candidate(Array)\n#2 /tmp/tmpzu6t93tw.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmpzu6t93tw.php on line 16\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $maxChars = 0;\n  $maxWord\
    \ = '';\n  $lexicoMaxWord = '';\n  foreach ($words as $key => $word) {\n    $chars\
    \ = count_chars($word,1);\n    $uniqChars = count($chars);\n    if ($uniqChars\
    \ > $maxChars) {\n      $maxChars = $uniqChars;\n      $maxWord = $word;\n   \
    \ }\n    if ($lexicoMaxWord == '') {\n      $lexicoMaxWord = $word;\n    } else\
    \ if ($word < $lexicoMaxWord) {\n      $lexicoMaxWord = $word;\n    }\n  }\n \
    \ if ($maxChars == 0) {\n    return $lexicoMaxWord;\n  }\n  return $maxWord;\n\
    }\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdzgndvg8.php:40\n\
    Stack trace:\n#0 /tmp/tmpdzgndvg8.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpdzgndvg8.php\
    \ on line 40\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n\t$max_word = $words[0];\n\
    \t$max_count = 0;\n\tforeach ($words as $word) {\n\t\t$letters = str_split($word);\n\
    \t\t$unique_letters = array_unique($letters);\n\t\t$count = count($unique_letters);\n\
    \t\tif ($count > $max_count) {\n\t\t\t$max_count = $count;\n\t\t\t$max_word =\
    \ $word;\n\t\t}\n\t}\n\treturn $max_word;\n}\nfunction candidate(...$args) {\n\
    \    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuc1a2zos.php:32\n\
    Stack trace:\n#0 /tmp/tmpuc1a2zos.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpuc1a2zos.php\
    \ on line 32\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $max_unique_letters = \"\
    \";\n  $max_unique_word = \"\";\n  foreach ($words as $word) {\n    $unique_letters\
    \ = \"\";\n    foreach (str_split($word) as $letter) {\n      if (strpos($unique_letters,\
    \ $letter) === false) {\n        $unique_letters .= $letter;\n      }\n    }\n\
    \    if (strlen($unique_letters) > strlen($max_unique_letters)) {\n      $max_unique_letters\
    \ = $unique_letters;\n      $max_unique_word = $word;\n    }\n  }\n  return $max_unique_word;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp33mm0b5z.php:36\n\
    Stack trace:\n#0 /tmp/tmp33mm0b5z.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp33mm0b5z.php\
    \ on line 36\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $max_word = '';\n  $max_count\
    \ = 0;\n  foreach ($words as $word) {\n    $letters = str_split($word);\n    $uniques\
    \ = array_unique($letters);\n    $count = count($uniques);\n    if ($count > $max_count)\
    \ {\n      $max_count = $count;\n      $max_word = $word;\n    }\n  }\n  return\
    \ $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwfhqv5la.php:33\n\
    Stack trace:\n#0 /tmp/tmpwfhqv5la.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpwfhqv5la.php\
    \ on line 33\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $max_char_count = 0;\n\
    \  $max_word = \"\";\n  foreach ($words as $word) {\n    $char_count = count_chars($word,\
    \ 1);\n    if (count($char_count) > $max_char_count) {\n      $max_char_count\
    \ = count($char_count);\n      $max_word = $word;\n    }\n  }\n  return $max_word;\n\
    }\necho \"test case 1: name, of, string = \" . find_max(array(\"name\", \"of\"\
    , \"string\")) . \"\\n\";\necho \"test case 2: name, enam, game = \" . find_max(array(\"\
    name\", \"enam\", \"game\")) . \"\\n\";\necho \"test case 3: aaaaaaa, bb, cc =\
    \ \" . find_max(array(\"aaaaaaa\", \"bb\", \"cc\")) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "test case 1: name, of, string = string\ntest case 2: name, enam, game =\
    \ name\ntest case 3: aaaaaaa, bb, cc = aaaaaaa\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpis3l4qi0.php:33\nStack trace:\n#0 /tmp/tmpis3l4qi0.php(44):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpis3l4qi0.php on line 33\n"
  timestamp: 1659979964
- exit_code: 0
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max_words = array($words[0]);\n\
    \    for ($i = 1; $i < count($words); $i++) {\n        $max_chars = array_count_values(str_split($max_words[0]));\n\
    \        $num_max_chars = count($max_chars);\n        $word_chars = array_count_values(str_split($words[$i]));\n\
    \        $num_word_chars = count($word_chars);\n        if ($num_word_chars >\
    \ $num_max_chars) {\n            $max_words = array($words[$i]);\n        } else\
    \ if ($num_word_chars == $num_max_chars) {\n            array_push($max_words,\
    \ $words[$i]);\n        }\n    }\n    $min_word = $max_words[0];\n    for ($i\
    \ = 1; $i < count($max_words); $i++) {\n        if ($max_words[$i] < $min_word)\
    \ {\n            $min_word = $max_words[$i];\n        }\n    }\n    return $min_word;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  if (empty($words)) {\n\
    \    return FALSE;\n  }\n  $max = 0;\n  $max_word = \"\";\n  foreach ($words as\
    \ $word) {\n    $unique_letters = array_unique(str_split($word));\n    $length\
    \ = count($unique_letters);\n    if ($length > $max) {\n      $max = $length;\n\
    \      $max_word = $word;\n    }\n  }\n  return $max_word;\n}\n\necho find_max(array(\"\
    name\", \"of\", \"string\")) . PHP_EOL;\necho find_max(array(\"name\", \"enam\"\
    , \"game\")) . PHP_EOL;\necho find_max(array(\"aaaaaaa\", \"bb\", \"cc\")) . PHP_EOL;\n\
    function candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "string\nname\naaaaaaa\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpb4se31u_.php:38\nStack trace:\n#0 /tmp/tmpb4se31u_.php(49): test()\n\
    #1 {main}\n  thrown in /tmp/tmpb4se31u_.php on line 38\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = array();\n   \
    \ foreach ($words as $word) {\n        $chars = str_split($word);\n        $max_chars\
    \ = array_unique($chars);\n        if (count($max_chars) > count($max)) {\n  \
    \          $max = $max_chars;\n            $max_word = $word;\n        }\n   \
    \ }\n    return $max_word;\n}\n\n$arr = array(\"aaaaaaa\", \"bb\", \"cc\");\n\
    $arr2 = array(\"name\", \"enam\", \"game\");\necho find_max($arr);\necho find_max($arr2);\n\
    function candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "aaaaaaaname\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkrzsv9yd.php:35\n\
    Stack trace:\n#0 /tmp/tmpkrzsv9yd.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpkrzsv9yd.php\
    \ on line 35\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $str = \"\";\n  $unique_chars\
    \ = 0;\n  $max_unique_chars = 0;\n  foreach ($words as $word) {\n    $str_chars\
    \ = str_split($word);\n    foreach ($str_chars as $char) {\n      if (!strstr($str,\
    \ $char)) {\n        $str .= $char;\n        $unique_chars++;\n      }\n    }\n\
    \    if ($unique_chars > $max_unique_chars) {\n      $max_unique_chars = $unique_chars;\n\
    \      $max_string = $word;\n    }\n    $str = \"\";\n    $unique_chars = 0;\n\
    \  }\n  return $max_string;\n}\n\nprint(find_max(array(\"name\", \"of\", \"string\"\
    )) . \"\\n\");\nprint(find_max(array(\"name\", \"enam\", \"game\")) . \"\\n\"\
    );\nprint(find_max(array(\"aaaaaaa\", \"bb\", \"cc\")) . \"\\n\");\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "string\nname\naaaaaaa\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpjm9rtiu0.php:43\nStack trace:\n#0 /tmp/tmpjm9rtiu0.php(54): test()\n\
    #1 {main}\n  thrown in /tmp/tmpjm9rtiu0.php on line 43\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = [null, null];\n\
    \    foreach ($words as $word) {\n        $chars = array_unique(str_split($word));\n\
    \        if ($max[1] == null || count($chars) > $max[1]) {\n            $max =\
    \ [$word, count($chars)];\n        }\n    }\n    return $max[0];\n}\n\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqvwacfut.php:29\n\
    Stack trace:\n#0 /tmp/tmpqvwacfut.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpqvwacfut.php\
    \ on line 29\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  if (empty($words)) {\n\
    \    return null;\n  }\n\n  $max_word = $words[0];\n  $max_word_char_count = count_unique_chars($max_word);\n\
    \n  foreach ($words as $word) {\n    $word_char_count = count_unique_chars($word);\n\
    \    if ($word_char_count > $max_word_char_count) {\n      $max_word = $word;\n\
    \      $max_word_char_count = $word_char_count;\n    }\n  }\n\n  return $max_word;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmpqwt4rhsg.php:18\nStack trace:\n#0 /tmp/tmpqwt4rhsg.php(32): find_max(Array)\n\
    #1 /tmp/tmpqwt4rhsg.php(36): candidate(Array)\n#2 /tmp/tmpqwt4rhsg.php(48): test()\n\
    #3 {main}\n  thrown in /tmp/tmpqwt4rhsg.php on line 18\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $result = '';\n    $max\
    \ = 0;\n    foreach ($words as $word) {\n        $arr = str_split($word);\n  \
    \      $arr = array_unique($arr);\n        $count = count($arr);\n        if ($count\
    \ > $max) {\n            $max = $count;\n            $result = $word;\n      \
    \  }\n    }\n    return $result;\n}\n\necho '<pre>';\nprint_r(find_max(array(\"\
    name\", \"of\", \"string\")));\necho '</pre>';\necho '<pre>';\nprint_r(find_max(array(\"\
    name\", \"enam\", \"game\")));\necho '</pre>';\necho '<pre>';\nprint_r(find_max(array(\"\
    aaaaaaa\", \"bb\", \"cc\")));\necho '</pre>';\nfunction candidate(...$args) {\n\
    \    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>string</pre><pre>name</pre><pre>aaaaaaa</pre>\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp2yo046wq.php:42\nStack trace:\n#0 /tmp/tmp2yo046wq.php(53):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp2yo046wq.php on line 42\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $max_word = '';\n  $max_count\
    \ = 0;\n  foreach ($words as $w) {\n    $count = count_unique_characters($w);\n\
    \    if ($count > $max_count) {\n      $max_count = $count;\n      $max_word =\
    \ $w;\n    }\n  }\n  return $max_word;\n}\n\nfunction candidate(...$args) {\n\
    \    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_characters()\
    \ in /tmp/tmplwjtc5lw.php:16\nStack trace:\n#0 /tmp/tmplwjtc5lw.php(26): find_max(Array)\n\
    #1 /tmp/tmplwjtc5lw.php(30): candidate(Array)\n#2 /tmp/tmplwjtc5lw.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmplwjtc5lw.php on line 16\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $max = 0;\n  $current =\
    \ 0;\n  $max_word = \"\";\n  foreach ($words as $word) {\n    $current = count_unique_chars($word);\n\
    \    if ($current > $max) {\n      $max = $current;\n      $max_word = $word;\n\
    \    }\n  }\n  return $max_word;\n}\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmpv5zjclyq.php:17\nStack trace:\n#0 /tmp/tmpv5zjclyq.php(26): find_max(Array)\n\
    #1 /tmp/tmpv5zjclyq.php(30): candidate(Array)\n#2 /tmp/tmpv5zjclyq.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmpv5zjclyq.php on line 17\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max_word = '';\n   \
    \ $max_count = 0;\n    foreach ($words as $word) {\n        $count = count_unique_characters($word);\n\
    \        if ($count > $max_count) {\n            $max_count = $count;\n      \
    \      $max_word = $word;\n        }\n    }\n    return $max_word;\n}\n\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_characters()\
    \ in /tmp/tmp7m973d5m.php:16\nStack trace:\n#0 /tmp/tmp7m973d5m.php(26): find_max(Array)\n\
    #1 /tmp/tmp7m973d5m.php(30): candidate(Array)\n#2 /tmp/tmp7m973d5m.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmp7m973d5m.php on line 16\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max_count = 0;\n   \
    \ $max_index = 0;\n    foreach ($words as $index => $word) {\n        $unique_chars\
    \ = array_unique(str_split($word));\n        $unique_chars_count = count($unique_chars);\n\
    \        if ($unique_chars_count > $max_count) {\n            $max_count = $unique_chars_count;\n\
    \            $max_index = $index;\n        }\n    }\n    return $words[$max_index];\n\
    }\n$words = [\"string\", \"of\", \"name\"];\n$words = [\"enam\", \"name\", \"\
    game\"];\n$words = [\"aaaaaaa\", \"bb\", \"cc\"];\n$result = find_max($words);\n\
    echo $result;\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "aaaaaaa\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsqfe78oy.php:37\n\
    Stack trace:\n#0 /tmp/tmpsqfe78oy.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpsqfe78oy.php\
    \ on line 37\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $freq = array();\n  \
    \  foreach ($words as $word) {\n        $w = str_split($word);\n        $freq[$word]\
    \ = count(array_unique($w));\n    }\n    // print_r($freq);\n    $max = max($freq);\n\
    \    $maxKey = array_search($max, $freq);\n    return $maxKey;\n}\n\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnahtr5a6.php:30\n\
    Stack trace:\n#0 /tmp/tmpnahtr5a6.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpnahtr5a6.php\
    \ on line 30\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_word\
    \ = \"\";\n    foreach ($words as $word) {\n        $unique_chars = array_unique(str_split($word));\n\
    \        if (count($unique_chars) > $max) {\n            $max = count($unique_chars);\n\
    \            $max_word = $word;\n        }\n    }\n    return $max_word;\n}\n\n\
    function candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaxhlq27g.php:31\n\
    Stack trace:\n#0 /tmp/tmpaxhlq27g.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpaxhlq27g.php\
    \ on line 31\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max_word = $words[0];\n\
    \    $max_num_of_chars = count_chars($max_word);\n    foreach ($words as $word)\
    \ {\n        $num_of_chars = count_chars($word);\n        if ($num_of_chars >\
    \ $max_num_of_chars) {\n            $max_word = $word;\n            $max_num_of_chars\
    \ = $num_of_chars;\n        }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp37m0_gy0.php:30\n\
    Stack trace:\n#0 /tmp/tmp37m0_gy0.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp37m0_gy0.php\
    \ on line 30\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $max = 0;\n  $result =\
    \ NULL;\n  foreach ($words as $word) {\n    $count = count_unique_chars($word);\n\
    \    if ($count > $max) {\n      $max = $count;\n      $result = $word;\n    }\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmpqlsq65wx.php:16\nStack trace:\n#0 /tmp/tmpqlsq65wx.php(26): find_max(Array)\n\
    #1 /tmp/tmpqlsq65wx.php(30): candidate(Array)\n#2 /tmp/tmpqlsq65wx.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmpqlsq65wx.php on line 16\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $word = $words[0];\n\
    \    $max_num_unique_chars = find_num_unique_chars($word);\n    for ($i = 1; $i\
    \ < count($words); $i++) {\n        $chars = find_num_unique_chars($words[$i]);\n\
    \        if ($chars > $max_num_unique_chars) {\n            $word = $words[$i];\n\
    \            $max_num_unique_chars = $chars;\n        }\n    }\n    return $word;\n\
    }\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function find_num_unique_chars()\
    \ in /tmp/tmpk2kzjeyr.php:14\nStack trace:\n#0 /tmp/tmpk2kzjeyr.php(25): find_max(Array)\n\
    #1 /tmp/tmpk2kzjeyr.php(29): candidate(Array)\n#2 /tmp/tmpk2kzjeyr.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpk2kzjeyr.php on line 14\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max_length = 0;\n  \
    \  $max_word = '';\n    foreach ($words as $word) {\n        $unique_char_length\
    \ = count(unique_chars($word));\n        if ($unique_char_length > $max_length)\
    \ {\n            $max_length = $unique_char_length;\n            $max_word = $word;\n\
    \        }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n\
    \    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function unique_chars()\
    \ in /tmp/tmphmadyvip.php:16\nStack trace:\n#0 /tmp/tmphmadyvip.php(26): find_max(Array)\n\
    #1 /tmp/tmphmadyvip.php(30): candidate(Array)\n#2 /tmp/tmphmadyvip.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmphmadyvip.php on line 16\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $max = [0,0];\n  for ($i=0;\
    \ $i < count($words); $i++) {\n    $chars = str_split($words[$i]);\n    $uniques\
    \ = [];\n    for ($j=0; $j < count($chars); $j++) {\n      if (!in_array($chars[$j],\
    \ $uniques)) {\n        array_push($uniques, $chars[$j]);\n      }\n    }\n  \
    \  if (count($uniques) > $max[0]) {\n      $max = [count($uniques), $i];\n   \
    \ }\n  }\n  return $words[$max[1]];\n}\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5pbjokvp.php:34\n\
    Stack trace:\n#0 /tmp/tmp5pbjokvp.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp5pbjokvp.php\
    \ on line 34\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  // Implement find_max()\n\
    \  $max_char_count = 0;\n  $max_word = \"\";\n  foreach ($words as $word) {\n\
    \    $char_count = 0;\n    $dup_char = array();\n    for ($i = 0; $i < strlen($word);\
    \ $i++) {\n      if (!in_array($word[$i], $dup_char)) {\n        $char_count++;\n\
    \        $dup_char[] = $word[$i];\n      }\n    }\n    if ($char_count > $max_char_count)\
    \ {\n      $max_char_count = $char_count;\n      $max_word = $word;\n    }\n \
    \ }\n  return $max_word;\n}\n\n$words = [\"name\", \"of\", \"string\"];\nprint\
    \ find_max($words) . \"\\n\";\n$words = [\"name\", \"enam\", \"game\"];\nprint\
    \ find_max($words) . \"\\n\";\n$words = [\"aaaaaaa\", \"bb\", \"cc\"];\nprint\
    \ find_max($words) . \"\\n\";\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "string\nname\naaaaaaa\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmprrf1g_rc.php:45\nStack trace:\n#0 /tmp/tmprrf1g_rc.php(56): test()\n\
    #1 {main}\n  thrown in /tmp/tmprrf1g_rc.php on line 45\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $count = 0;\n  $word =\
    \ '';\n  foreach ($words as $word) {\n    $count_tmp = strlen(count_chars($word,\
    \ 3));\n    if ($count_tmp > $count) {\n      $count = $count_tmp;\n      $return\
    \ = $word;\n    }\n  }\n  return $return;\n}\n\nprint(find_max(array(\"name\"\
    , \"of\", \"string\")) . \"\\n\");\nprint(find_max(array(\"name\", \"enam\", \"\
    game\")) . \"\\n\");\nprint(find_max(array(\"aaaaaaa\", \"bb\", \"cc\")) . \"\\\
    n\");\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "string\nname\naaaaaaa\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp5dnw7b9z.php:34\nStack trace:\n#0 /tmp/tmp5dnw7b9z.php(45): test()\n\
    #1 {main}\n  thrown in /tmp/tmp5dnw7b9z.php on line 34\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n\t$max = 0;\n\t$max_word\
    \ = \"\";\n\tforeach ($words as $word) {\n\t\t$temp = 0;\n\t\tfor ($i = 0; $i\
    \ < strlen($word); $i++) {\n\t\t\t$temp = $temp | (1 << (ord($word[$i]) - 97));\n\
    \t\t}\n\t\tif (substr_count(decbin($temp), \"1\") > $max) {\n\t\t\t$max = substr_count(decbin($temp),\
    \ \"1\");\n\t\t\t$max_word = $word;\n\t\t}\n\t}\n\treturn $max_word;\n}\n\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmply0yueqj.php:34\n\
    Stack trace:\n#0 /tmp/tmply0yueqj.php(45): test()\n#1 {main}\n  thrown in /tmp/tmply0yueqj.php\
    \ on line 34\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $max_word = $words[0];\n\
    \  $max_unique_chars = 0;\n  foreach ($words as $word) {\n    $unique_chars =\
    \ get_unique_chars($word);\n    if (count($unique_chars) > $max_unique_chars)\
    \ {\n      $max_unique_chars = count($unique_chars);\n      $max_word = $word;\n\
    \    }\n  }\n  return $max_word;\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_unique_chars()\
    \ in /tmp/tmpwe28b90h.php:16\nStack trace:\n#0 /tmp/tmpwe28b90h.php(26): find_max(Array)\n\
    #1 /tmp/tmpwe28b90h.php(30): candidate(Array)\n#2 /tmp/tmpwe28b90h.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmpwe28b90h.php on line 16\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n\t$max = array(0, '');\n\t\
    foreach ($words as $word) {\n\t\t$unique = array_unique(str_split($word));\n\t\
    \tif (count($unique) > $max[0]) {\n\t\t\t$max = array(count($unique), $word);\n\
    \t\t}\n\t}\n\treturn $max[1];\n}\n\necho find_max(array(\"name\", \"of\", \"string\"\
    )) . \"\\n\";\necho find_max(array(\"name\", \"enam\", \"game\")) . \"\\n\";\n\
    echo find_max(array(\"aaaaaaa\", \"bb\", \"cc\")) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "string\nname\naaaaaaa\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpyvg3ealr.php:32\nStack trace:\n#0 /tmp/tmpyvg3ealr.php(43): test()\n\
    #1 {main}\n  thrown in /tmp/tmpyvg3ealr.php on line 32\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $max = 0;\n  $max_string\
    \ = '';\n  foreach ($words as $word) {\n    $unique_chars = array_unique(str_split($word));\n\
    \    if (count($unique_chars) > $max) {\n      $max = count($unique_chars);\n\
    \      $max_string = $word;\n    }\n  }\n  return $max_string;\n}\necho find_max(array(\"\
    name\", \"of\", \"string\")) . \"\\n\";\necho find_max(array(\"name\", \"enam\"\
    , \"game\")) . \"\\n\";\necho find_max(array(\"aaaaaaa\", \"bb\", \"cc\")) . \"\
    \\n\";\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "string\nname\naaaaaaa\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp36jvpkgc.php:34\nStack trace:\n#0 /tmp/tmp36jvpkgc.php(45): test()\n\
    #1 {main}\n  thrown in /tmp/tmp36jvpkgc.php on line 34\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $count = array();\n  $max\
    \ = 0;\n  $max_word = '';\n  foreach ($words as $word) {\n    $count[$word] =\
    \ count_unique_chars($word);\n    if ($count[$word] > $max) {\n      $max = $count[$word];\n\
    \      $max_word = $word;\n    }\n  }\n  return $max_word;\n}\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmpl9xyb36x.php:17\nStack trace:\n#0 /tmp/tmpl9xyb36x.php(26): find_max(Array)\n\
    #1 /tmp/tmpl9xyb36x.php(30): candidate(Array)\n#2 /tmp/tmpl9xyb36x.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmpl9xyb36x.php on line 17\n"
  timestamp: 1659979964
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n\t$max = 0;\n\t$maxWord =\
    \ $words[0];\n\tforeach ($words as $word) {\n\t\t$count = count_chars($word, 1);\n\
    \t\tif (count($count) > $max) {\n\t\t\t$max = count($count);\n\t\t\t$maxWord =\
    \ $word;\n\t\t}\n\t}\n\treturn $maxWord;\n}\necho find_max(array(\"name\", \"\
    of\", \"string\")) . \"\\n\";\necho find_max(array(\"name\", \"enam\", \"game\"\
    )) . \"\\n\";\necho find_max(array(\"aaaaaaa\", \"bb\", \"cc\")) . \"\\n\";\n\
    function candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "string\nname\naaaaaaa\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp5mv30ca6.php:33\nStack trace:\n#0 /tmp/tmp5mv30ca6.php(44): test()\n\
    #1 {main}\n  thrown in /tmp/tmp5mv30ca6.php on line 33\n"
  timestamp: 1659979964
