name: HumanEval_55_fib
language: php
prompt: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
  // 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n"
tests: "function candidate(...$args) {\n    return fib(...$args);\n}\n\nfunction test():\
  \ void {\n    if (candidate(10) !== 55) { throw new Exception(\"Test failed!\");\
  \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n  \
  \  if (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11)\
  \ !== 89) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !==\
  \ 144) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["  if ($n <= 1) {\n    return $n;\n  }\n  return fib($n - 1) + fib($n\
    \ - 2);\n}\n\nfib(10);", "  if ($n <= 2) {\n    return 1;\n  }\n  return fib($n\
    \ - 1) + fib($n - 2);\n}\n\necho \"fib(10) is \" . fib(10) . \"\\n\";\necho \"\
    fib(1) is \" . fib(1) . \"\\n\";\necho \"fib(8) is \" . fib(8) . \"\\n\";", " \
    \   $fibs = array(0, 1);\n    for ($i = 2; $i <= $n; $i++) {\n        $fibs[$i]\
    \ = $fibs[$i - 1] + $fibs[$i - 2];\n    }\n    return $fibs[$n];\n}\n\necho fib(1)\
    \ . PHP_EOL;\necho fib(2) . PHP_EOL;\necho fib(3) . PHP_EOL;\necho fib(4) . PHP_EOL;\n\
    echo fib(5) . PHP_EOL;\necho fib(10) . PHP_EOL;\n", "  if ($n === 0) {\n    return\
    \ 0;\n  } else if ($n === 1) {\n    return 1;\n  } else {\n    return fib($n -\
    \ 1) + fib($n - 2);\n  }\n}\n", "    $fibs = array(0, 1);\n    for ($i = 2; $i\
    \ <= $n; $i++) {\n        $fibs[$i] = $fibs[$i - 1] + $fibs[$i - 2];\n    }\n\
    \    return $fibs[$n];\n}\n", "    // Put your code here\n}", "    $fibs = [0,\
    \ 1];\n    $fibs[$n] = fib($n - 1) + fib($n - 2);\n    return $fibs[$n];\n}\n\n\
    echo fib(10);", "\tif ($n < 2) {\n\t\treturn $n;\n\t}\n\treturn fib($n - 1) +\
    \ fib($n - 2);\n}\n\necho fib(10);", "  if ($n < 2) {\n    return $n;\n  }\n \
    \ return fib($n - 1) + fib($n - 2);\n}\n\nassert(fib(10) == 55);\nassert(fib(1)\
    \ == 1);\nassert(fib(8) == 21);", "    if ($n < 2) {\n        return $n;\n   \
    \ }\n    return fib($n - 1) + fib($n - 2);\n}\n", "    if ($n < 2) {\n       \
    \ return $n;\n    }\n    $a = 0;\n    $b = 1;\n    for ($i = 1; $i < $n; $i++)\
    \ {\n        $c = $a + $b;\n        $a = $b;\n        $b = $c;\n    }\n    return\
    \ $b;\n}\n", "  if ($n < 2) {\n    return $n;\n  }\n  return fib($n - 1) + fib($n\
    \ - 2);\n}\n\nfor ($i = 0; $i < 10; $i++) {\n  echo fib($i);\n  echo \"\\n\";\n\
    }", "    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n      \
    \  return 1;\n    }\n    return fib($n - 1) + fib($n - 2);\n}\n", "\tif ($n ===\
    \ 0) {\n\t\treturn 0;\n\t} else if ($n === 1) {\n\t\treturn 1;\n\t} else {\n\t\
    \treturn fib($n - 1) + fib($n - 2);\n\t}\n}\n", "    if($n == 0) {\n        return\
    \ 0;\n    } else if($n == 1) {\n        return 1;\n    } else {\n        return\
    \ fib($n - 1) + fib($n - 2);\n    }\n}\n\nfor($i = 0; $i < 10; $i++) {\n    $ans\
    \ = fib($i);\n    echo \"fib($i) => $ans\\n\";\n}", "    if($n == 0) {\n     \
    \   return 0;\n    }\n    if($n == 1) {\n        return 1;\n    }\n    return\
    \ fib($n - 1) + fib($n - 2);\n}\n", "    if ($n <= 2) return 1;\n    return fib($n\
    \ - 1) + fib($n - 2);\n}", "\tif ($n <= 1) {\n\t\treturn $n;\n\t}\n\telse {\n\t\
    \treturn fib($n - 1) + fib($n - 2);\n\t}\n}\n", "  if ($n < 2) {\n    return $n;\n\
    \  } else {\n    return fib($n - 1) + fib($n - 2);\n  }\n}\n\necho fib(10) . \"\
    \\n\";\necho fib(1) . \"\\n\";\necho fib(8) . \"\\n\";", "  if ($n < 3) {\n  \
    \  return 1;\n  }\n  return fib($n - 1) + fib($n - 2);\n}\n", "\tif ($n <= 1)\
    \ {\n\t\treturn $n;\n\t} else {\n\t\treturn fib($n - 1) + fib($n - 2);\n\t}\n\
    }\necho fib(10);", "    $result = 0;\n    $prev = 0;\n    $prev_prev = 0;\n  \
    \  for ($i = 0; $i < $n; $i++) {\n        if ($i == 0) {\n            $result\
    \ = 1;\n        } else if ($i == 1) {\n            $result = 1;\n        } else\
    \ {\n            $result = $prev + $prev_prev;\n        }\n        $prev_prev\
    \ = $prev;\n        $prev = $result;\n    }\n    return $result;\n}", "    if\
    \ ($n == 0) {\n        return 0;\n    } else if ($n == 1) {\n        return 1;\n\
    \    } else {\n        return fib($n - 1) + fib($n - 2);\n    }\n}\n", "    $seq\
    \ = array();\n    array_push($seq, 0);\n    array_push($seq, 1);\n    for ($i\
    \ = 2; $i <= $n; $i++) {\n        $seq[$i] = $seq[$i - 1] + $seq[$i - 2];\n  \
    \  }\n    return $seq[$n];\n}\n", "    // use array to hold the sequence\n   \
    \ $sequence = array(0, 1);\n    if ($n == 0) {\n        return $sequence[0];\n\
    \    } else if ($n == 1) {\n        return $sequence[1];\n    } else {\n     \
    \   // calculate the n-th number\n        for ($i = 2; $i <= $n; $i++) {\n   \
    \         $sequence[$i] = $sequence[$i - 1] + $sequence[$i - 2];\n        }\n\
    \        return $sequence[$n];\n    }\n}\n\necho fib(10) . \"\\n\";\necho fib(1)\
    \ . \"\\n\";\necho fib(8) . \"\\n\";", "\treturn (1/$GLOBALS['phi'])*((pow($GLOBALS['phi'],\
    \ $n))-(pow(-$GLOBALS['phi'],-$n)));\n}\n", "\tif ($n < 2)\n\t\treturn $n;\n\t\
    return fib($n - 1) + fib($n - 2);\n}\n", "    if ($n == 0) return 0;\n    if ($n\
    \ == 1) return 1;\n    return fib($n - 1) + fib($n - 2);\n}\necho fib(10);\necho\
    \ \"\\n\";\necho fib(1);\necho \"\\n\";\necho fib(8);\necho \"\\n\";", "    if\
    \ ($n == 0) {\n        return 0;\n    } else if ($n == 1) {\n        return 1;\n\
    \    } else {\n        return fib($n - 1) + fib($n - 2);\n    }\n}\n", "\tif($n\
    \ == 0 || $n == 1) {\n\t\treturn $n;\n\t}\n\treturn fib($n - 1) + fib($n - 2);\n\
    }\n", "    return 1 + $n;\n}\n", "    if ($n == 0) {\n        return 0;\n    }\n\
    \    $fib = [0, 1];\n    for ($i = 2; $i <= $n; $i++) {\n        $fib[$i] = $fib[$i\
    \ - 1] + $fib[$i - 2];\n    }\n    return $fib[$n];\n}\n", "  if ($n == 0) {\n\
    \    return 0;\n  } else if ($n == 1) {\n    return 1;\n  } else {\n    return\
    \ fib($n - 1) + fib($n - 2);\n  }\n}\n\nvar_dump(fib(10));\nvar_dump(fib(1));\n\
    var_dump(fib(8));", "    if ($n < 2) {\n        return $n;\n    }\n    return\
    \ fib($n - 1) + fib($n - 2);\n}\n", "  if ($n < 3) {\n    return 1;\n  }\n  return\
    \ fib($n - 1) + fib($n - 2);\n}\n\necho fib(10).\"\\n\";\necho fib(1).\"\\n\"\
    ;\necho fib(8).\"\\n\";", "    if ($n < 2) {\n        return $n;\n    }\n    return\
    \ fib($n - 1) + fib($n - 2);\n}\n\necho fib(8) . \"\\n\";", "\t// Base cases\n\
    \tif ($n < 1) {\n\t\treturn 0;\n\t}\n\tif ($n == 1) {\n\t\treturn 1;\n\t}\n\t\
    // recursion\n\treturn fib($n - 1) + fib($n - 2);\n}\n", "  // 0, 1, 1, 2, 3,\
    \ 5, 8, 13, 21\n  if ($n <= 1) {\n    return $n;\n  }\n  return fib($n - 1) +\
    \ fib($n - 2);\n}\necho fib(5);\necho \"\\n\";\necho fib(1);\necho \"\\n\";\n\
    echo fib(8);\necho \"\\n\";\n", "    if($n < 3) return 1;\n    return fib($n -\
    \ 1) + fib($n - 2);\n}\n\necho fib(8) . PHP_EOL;\n", "    if ($n == 0) return\
    \ 0;\n    else if ($n == 1) return 1;\n    else {\n        return fib($n - 1)\
    \ + fib($n - 2);\n    }\n}", "  if ($n < 2) {\n    return $n;\n  }\n  $prev =\
    \ 0;\n  $curr = 1;\n  $i = 2;\n  while ($i <= $n) {\n    $next = $prev + $curr;\n\
    \    $prev = $curr;\n    $curr = $next;\n    $i++;\n  }\n  return $curr;\n}\n",
  "    if ($n == 0) {\n        return 0;\n    } else if ($n == 1) {\n        return\
    \ 1;\n    } else {\n        return fib($n - 1) + fib($n - 2);\n    }\n}\n", "\t\
    $s = (int)sqrt(5);\n\treturn (int)(pow((1 + $s) / 2, $n) / $s + 0.5);\n}\n", " \
    \   if ($n < 2) {\n        return $n;\n    } else {\n        return fib($n - 1)\
    \ + fib($n - 2);\n    }\n}\n\n$fib = new InterpreterFunction('fib');\n$fib->setDocstring('Return\
    \ n-th Fibonacci number.');\n$fib->registerArgument(new Argument('n', Argument::TYPE_INTEGER));\n\
    $fib->registerReturn(Argument::TYPE_INTEGER);\n", "    if ($n == 0) {\n      \
    \  return 0;\n    }\n    $fibs = array();\n    $fibs[0] = 0;\n    $fibs[1] = 1;\n\
    \    for ($i = 2; $i <= $n; $i++) {\n        $fibs[$i] = $fibs[$i - 1] + $fibs[$i\
    \ - 2];\n    }\n    return $fibs[$n];\n}\n", "    if ($n < 2) {\n        return\
    \ $n;\n    }\n    return fib($n - 1) + fib($n - 2);\n}\n\nvar_dump(fib(10));\n\
    var_dump(fib(1));\nvar_dump(fib(8));", "\tif ($n <= 1) {\n\t\treturn $n;\n\t}\n\
    \treturn fib($n - 1) + fib($n - 2);\n}\n\necho fib(0);\necho fib(1);\necho fib(2);\n\
    echo fib(3);\necho fib(4);\necho fib(5);\necho fib(6);\necho fib(7);\necho fib(8);\n\
    echo fib(9);\necho fib(10);", "    $a = 0;\n    $b = 1;\n    for ($i = 0; $i <\
    \ $n; $i++) {\n        $a = $a + $b;\n        $b = $a - $b;\n    }\n    return\
    \ $a;\n}\n\necho fib(10) . \"\\n\";\necho fib(1) . \"\\n\";\necho fib(8) . \"\\\
    n\";", "    if ($n < 2) {\n        return $n;\n    }\n    return fib($n - 1) +\
    \ fib($n - 2);\n}\n", "    if ($n <= 2) return 1;\n    return fib($n - 1) + fib($n\
    \ - 2);\n}\n", "  return ( $n < 2 ) ? $n : fib($n-1) + fib($n-2);\n}\n", "   \
    \ if ($n < 2) {\n        return $n;\n    }\n    $fib_n = 1;\n    $fib_1 = 0;\n\
    \    for ($i = 2; $i <= $n; $i++) {\n        $fib_0 = $fib_1;\n        $fib_1\
    \ = $fib_n;\n        $fib_n = $fib_0 + $fib_1;\n    }\n    return $fib_n;\n}",
  "    if ($n < 2) {\n        return $n;\n    }\n    return fib($n - 1) + fib($n -\
    \ 2);\n}\n\necho fib(10);\n", "\tif ($n === 0) {\n\t\treturn 0;\n\t}\n\tif ($n\
    \ === 1) {\n\t\treturn 1;\n\t}\n\treturn fib($n - 1) + fib($n - 2);\n}\n\n$code\
    \ = new Code();\n$code->appendCode('$n = 10;');\n$code->appendCode('print $n .\
    \ \": \" . fib($n) . \"\\n\";');\n$code->appendCode('$n = 1;');\n$code->appendCode('print\
    \ $n . \": \" . fib($n) . \"\\n\";');\n$code->appendCode('$n = 8;');\n$code->appendCode('print\
    \ $n . \": \" . fib($n) . \"\\n\";');\n\necho (new Text($code))->getText();\n\n\
    echo (new Shell($code))->getShell();", "\tif ($n == 0) {\n\t\treturn 0;\n\t} else\
    \ if ($n == 1) {\n\t\treturn 1;\n\t} else {\n\t\treturn fib($n - 1) + fib($n -\
    \ 2);\n\t}\n}\n", "    if ($n <= 2) {\n        return 1;\n    } else {\n     \
    \   return fib($n - 1) + fib($n - 2);\n    }\n}\n", "    if ($n < 2) {\n     \
    \   return $n;\n    } else {\n        return fib($n - 1) + fib($n - 2);\n    }\n\
    }\nvar_dump(fib(10));", "    if ($n < 2) {\n        return $n;\n    }\n    $arr\
    \ = [0, 1];\n    for ($i = 2; $i <= $n; $i++) {\n        $arr[$i] = $arr[$i -\
    \ 1] + $arr[$i - 2];\n    }\n    return $arr[$n];\n}\n", "    $fibs = array(0,\
    \ 1);\n    for ($i = 0; $i < $n; $i++) {\n        $fibs[] = $fibs[count($fibs)\
    \ - 1] + $fibs[count($fibs) - 2];\n    }\n    return $fibs[$n];\n}", "    if ($n\
    \ <= 1) {\n        return $n;\n    }\n    return fib($n - 1) + fib($n - 2);\n\
    }\n\necho fib(10) . \"\\n\";\necho fib(1) . \"\\n\";\necho fib(8) . \"\\n\";",
  "    if ($n < 2) {\n        return $n;\n    }\n    $fibonacci = [0, 1];\n    for\
    \ ($i = 2; $i <= $n; $i++) {\n        $fibonacci[$i] = $fibonacci[$i - 1] + $fibonacci[$i\
    \ - 2];\n    }\n    return $fibonacci[$n];\n}\necho fib(10);\necho \"\\n\";\n\
    echo fib(1);\necho \"\\n\";\necho fib(8);\necho \"\\n\";\n", "  $n1 = 0;\n  $n2\
    \ = 1;\n  $sum = 0;\n  for ($i = 1; $i < $n; $i++) {\n    $sum = $n1 + $n2;\n\
    \    $n1 = $n2;\n    $n2 = $sum;\n  }\n  return $sum;\n}\n\necho fib(10) . \"\\\
    n\";\necho fib(1) . \"\\n\";\necho fib(8) . \"\\n\";", "    if ($n <= 1) return\
    \ $n;\n    return fib($n - 1) + fib($n - 2);\n}\n\necho fib(10);\necho \"\\n\"\
    ;\necho fib(1);\necho \"\\n\";\necho fib(8);\necho \"\\n\";", "    if ($n ===\
    \ 0) {\n        return 0;\n    } else if ($n === 1) {\n        return 1;\n   \
    \ } else {\n        return fib($n - 1) + fib($n - 2);\n    }\n}\n\nassert(fib(10)\
    \ === 55);\nassert(fib(1) === 1);\nassert(fib(8) === 21);\n", "  return $n <=\
    \ 1 ? $n : fib($n - 1) + fib($n - 2);\n}\n", "    if ($n == 0) return 0;\n   \
    \ if ($n == 1) return 1;\n    return fib($n - 1) + fib($n - 2);\n}\n\nif (isset($argv[1]))\
    \ {\n    echo fib($argv[1]) . \"\\n\";\n}", "\t$a = 1;\n\t$b = 1;\n\tfor ($i =\
    \ 2; $i < $n; $i++) {\n\t\t$tmp = $a;\n\t\t$a = $b;\n\t\t$b = $a + $tmp;\n\t}\n\
    \treturn $b;\n}\n", "    if ($n < 2) {\n        return $n;\n    } else {\n   \
    \     return fib($n - 1) + fib($n - 2);\n    }\n}\n$fib_number = filter_input(INPUT_GET,\
    \ 'fib_number', FILTER_VALIDATE_INT);\nif ($fib_number != false) {\n    echo fib($fib_number);\n\
    } else {\n    echo \"Enter an integer\";\n}", "    if ($n == 0) return 0;\n  \
    \  if ($n == 1) return 1;\n    return fib($n - 1) + fib($n - 2);\n}\n", "    return\
    \ $n <= 1 ? $n : fib($n - 1) + fib($n - 2);\n}\n\necho fib(10);", "    $num1 =\
    \ 0;\n    $num2 = 1;\n    $num3 = 1;\n    if ($n == 1) {\n        return $num1;\n\
    \    }\n    if ($n == 2) {\n        return $num2;\n    }\n    for ($i = 2; $i\
    \ < $n; $i++) {\n        $num3 = $num1 + $num2;\n        $num1 = $num2;\n    \
    \    $num2 = $num3;\n    }\n    return $num3;\n}\n", "\tif ($n <= 1) {\n\t\treturn\
    \ $n;\n\t} else {\n\t\treturn fib($n - 1) + fib($n - 2);\n\t}\n}\n\necho fib(8);\n\
    echo '<br>';\necho fib(1);\necho '<br>';\necho fib(10);", "    if ($n <= 1) return\
    \ $n;\n    else return fib($n - 1) + fib($n - 2);\n}\n", "  if ($n == 0) return\
    \ 0;\n  if ($n == 1) return 1;\n  return fib($n - 1) + fib($n - 2);\n}\n", " \
    \   $x = 0;\n    $y = 1;\n    $i = 1;\n    while ($i < $n) {\n        $x = $x\
    \ + $y;\n        $y = $x - $y;\n        $i = $i + 1;\n    }\n    return $x;\n\
    }\n", "    $a = 1;\n    $b = 1;\n    for ($i = 3; $i <= $n; $i++) {\n        $b\
    \ = $a + $b;\n        $a = $b - $a;\n    }\n    return $b;\n}\n", "  return (\n\
    \    $n < 2 ? $n : fib($n - 1) + fib($n - 2)\n  );\n}\n\necho fib(10) . \"\\n\"\
    ;\necho fib(1) . \"\\n\";\necho fib(8) . \"\\n\";", "  $fn2 = 0;\n  $fn1 = 1;\n\
    \  for ($i = 0; $i < $n; $i++) {\n    $fn = $fn2 + $fn1;\n    $fn2 = $fn1;\n \
    \   $fn1 = $fn;\n  }\n  return $fn2;\n}\n", "  if ($n < 3) {\n    return 1;\n\
    \  } else {\n    return fib($n - 1) + fib($n - 2);\n  }\n}\n", "  if ($n <= 1)\
    \ {\n    return $n;\n  }\n  return fib($n - 1) + fib($n - 2);\n}\n\nvar_dump(fib(10));\n\
    var_dump(fib(1));\nvar_dump(fib(8));", "\tif ($n == 0) {\n\t\treturn 0;\n\t} else\
    \ if ($n == 1) {\n\t\treturn 1;\n\t} else {\n\t\treturn fib($n - 1) + fib($n -\
    \ 2);\n\t}\n}\n", "    if ($n < 2) {\n        return $n;\n    }\n    return fib($n\
    \ - 1) + fib($n - 2);\n}\n", "    $a = 0;\n    $b = 1;\n    while ($n--) {\n \
    \       $a += $b;\n        list($a, $b) = array($b, $a);\n    }\n    return $a;\n\
    }\n", "    return _fib($n, 0, 1);\n}\n", "    if($n == 0) {\n        return 0;\n\
    \    }\n    if($n == 1) {\n        return 1;\n    }\n    return fib($n - 1) +\
    \ fib($n - 2);\n}\n\necho fib(10);\necho \"\\n\";\necho fib(1);\necho \"\\n\"\
    ;\necho fib(8);\necho \"\\n\";\n", "    if ($n == 0) {\n        return 0;\n  \
    \  } else if ($n == 1) {\n        return 1;\n    } else {\n        return fib($n\
    \ - 1) + fib($n - 2);\n    }\n}\n", "    $result = 0;\n    $a = 0;\n    $b = 1;\n\
    \    if ($n <= 1) {\n        return $n;\n    }\n    for ($i = 1; $i < $n; $i++)\
    \ {\n        $result = $a + $b;\n        $a = $b;\n        $b = $result;\n   \
    \ }\n    return $result;\n}\n", "  return fib_iter(1, 0, $n);\n}\n", "  $a = 1;\n\
    \  $b = 1;\n  for ($i = 2; $i < $n; $i++) {\n    $c = $a + $b;\n    $a = $b;\n\
    \    $b = $c;\n  }\n  return $b;\n}\n\n$n = 10;\nprintf(\"Fibonacci of %d: %d\\\
    n\", $n, fib($n));", "    $first = 0;\n    $second = 1;\n    for ($i = 0; $i <\
    \ $n; $i++) {\n        $first += $second;\n        $second = $first - $second;\n\
    \    }\n    return $first;\n}\n", "\tif ($n == 0) {\n\t\treturn 0;\n\t}\n\tif\
    \ ($n == 1) {\n\t\treturn 1;\n\t}\n\treturn fib($n - 1) + fib($n - 2);\n}\n",
  "  if ($n <= 1) {\n    return $n;\n  }\n  $last = 0;\n  $next = 1;\n  for ($i =\
    \ 1; $i < $n; $i++) {\n    $tmp = $next;\n    $next = $last + $next;\n    $last\
    \ = $tmp;\n  }\n  return $next;\n}\n", "    if ($n == 0) {\n        return 0;\n\
    \    } else if ($n == 1) {\n        return 1;\n    } else {\n        return fib($n\
    \ - 1) + fib($n - 2);\n    }\n}", "\tif($n == 0) {\n\t\treturn 0;\n\t} else if($n\
    \ == 1) {\n\t\treturn 1;\n\t} else {\n\t\treturn fib($n - 1) + fib($n - 2);\n\t\
    }\n}\n", "    if ($n < 2) {\n        return $n;\n    } else {\n        return\
    \ fib($n - 1) + fib($n - 2);\n    }\n}\necho fib(8); // 21\necho \"\\n\";\n",
  "  if ($n < 0) {\n    return -1;\n  }\n  if ($n < 2) {\n    return $n;\n  }\n  $n1\
    \ = 0;\n  $n2 = 1;\n  for ($i = 2; $i <= $n; $i++) {\n    $ret = $n1 + $n2;\n\
    \    $n1 = $n2;\n    $n2 = $ret;\n  }\n  return $ret;\n}\n$argv = $_SERVER['argv'];\n\
    $argc = $_SERVER['argc'];\nif ($argc < 2) {\n  echo \"Usage: fib.php <n>\\n\"\
    ;\n  exit(1);\n}\necho fib($argv[1]) . \"\\n\";", "\tif($n == 0) {\n\t\treturn\
    \ 0;\n\t} else if($n == 1) {\n\t\treturn 1;\n\t} else {\n\t\treturn fib($n - 1)\
    \ + fib($n - 2);\n\t}\n}\n", "    if ($n < 2) {\n        return $n;\n    }\n \
    \   $f1 = 0;\n    $f2 = 1;\n    for ($i = 2; $i <= $n; $i++) {\n        $f1 =\
    \ $f2;\n        $f2 = $f1 + $f2;\n    }\n    return $f2;\n}\n", "    if ($n <=\
    \ 1) {\n        return $n;\n    }\n    return fib($n - 1) + fib($n - 2);\n}",
  "    if ($n == 0) {\n        return 0;\n    } else if ($n == 1) {\n        return\
    \ 1;\n    } else {\n        return fib($n - 1) + fib($n - 2);\n    }\n}\n", "\t\
    if($n < 3) {\n\t\treturn 1;\n\t} else {\n\t\treturn fib($n - 1) + fib($n - 2);\n\
    \t}\n}", "    if ($n == 0) {\n        return 0;\n    } else if ($n == 1) {\n \
    \       return 1;\n    } else {\n        return fib($n - 1) + fib($n - 2);\n \
    \   }\n}\n", "    if ($n <= 2) {\n        return 1;\n    }\n    return fib($n\
    \ - 1) + fib($n - 2);\n}\n\nvar_dump(fib(10));", "\tif($n <= 1) {\n\t\treturn\
    \ $n;\n\t}\n\treturn fib($n - 1) + fib($n - 2);\n}\n", "    if ($n < 3) {\n  \
    \      return 1;\n    } else {\n        return fib($n - 1) + fib($n - 2);\n  \
    \  }\n}\n", "\tif($n < 2) {\n\t\treturn $n;\n\t}\n\treturn fib($n - 1) + fib($n\
    \ - 2);\n}\n", "    if ($n < 3) {\n        return 1;\n    } else {\n        return\
    \ fib($n - 1) + fib($n - 2);\n    }\n}\n\necho fib(10);", "    if ($n < 2) {\n\
    \        return $n;\n    }\n    $prev = 0;\n    $curr = 1;\n    for ($i = 1; $i\
    \ < $n; $i++) {\n        $next = $prev + $curr;\n        $prev = $curr;\n    \
    \    $curr = $next;\n    }\n    return $curr;\n}\n", "    if($n < 2) return $n;\n\
    \    return fib($n - 1) + fib($n - 2);\n}\n", "  if ($n <= 2) {\n    return 1;\n\
    \  }\n  return fib($n - 1) + fib($n - 2);\n}\n", "  if ($n <= 2) {\n    return\
    \ 1;\n  } else {\n    return fib($n - 1) + fib($n - 2);\n  }\n}\n", "    if ($n\
    \ == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 1;\n \
    \   }\n    return fib($n - 1) + fib($n - 2);\n}\n", "    if ($n < 2) {\n     \
    \   return $n;\n    }\n    return fib($n - 1) + fib($n - 2);\n}\n", "    if ($n\
    \ < 2) return $n;\n    return fib($n - 1) + fib($n - 2);\n}\n\necho fib(10) .\
    \ PHP_EOL;\necho fib(1) . PHP_EOL;\necho fib(8) . PHP_EOL;", "    if ($n == 0)\
    \ {\n        return 0;\n    }\n    if ($n == 1) {\n        return 1;\n    }\n\
    \    return fib($n - 1) + fib($n - 2);\n}\n", "\tif ($n < 2) {\n\t\treturn $n;\n\
    \t} else {\n\t\treturn fib($n - 1) + fib($n - 2);\n\t}\n}\n\nprint(fib(10));\n\
    print(\"\\n\");\nprint(fib(1));\nprint(\"\\n\");\nprint(fib(8));\nprint(\"\\n\"\
    );", "    if ($n == 0) {\n        return 0;\n    } else if ($n == 1) {\n     \
    \   return 1;\n    } else {\n        return fib($n - 1) + fib($n - 2);\n    }\n\
    }", "    return ($n < 2) ? $n : fib($n - 1) + fib($n - 2);\n}\n\n$bench = new\
    \ SimpleBench;\n$bench->setN(25);\n$bench->setTitle('Fibonacci');\n$bench->bench(function()\
    \ {\n    fib(25);\n});", "    if ($n == 0) {\n        return 0;\n    }\n    if\
    \ ($n == 1) {\n        return 1;\n    }\n    return fib($n - 1) + fib($n - 2);\n\
    }", "    if ($n < 2) {\n        return $n;\n    }\n    return fib($n - 1) + fib($n\
    \ - 2);\n}\necho fib(10) . \"\\n\";\necho fib(1) . \"\\n\";\necho fib(8) . \"\\\
    n\";", "  if ($n <= 1) {\n    return $n;\n  }\n  return fib($n - 1) + fib($n -\
    \ 2);\n}\n", "  $a = 0;\n  $b = 1;\n  for ($i = 0; $i < $n; $i++) {\n    $c =\
    \ $a + $b;\n    $a = $b;\n    $b = $c;\n  }\n  return $a;\n}\n\n$in = $argv[1];\n\
    echo fib($in) . \"\\n\";", "    return ($n < 2) ? $n : fib($n - 1) + fib($n -\
    \ 2);\n}\n\necho fib(10) . PHP_EOL;\necho fib(1) . PHP_EOL;\necho fib(8) . PHP_EOL;",
  "    return $n <= 1 ? $n : fib($n - 1) + fib($n - 2);\n}\n", "  if ($n <= 1) {\n\
    \    return $n;\n  }\n  return fib($n - 1) + fib($n - 2);\n}\n", "    return fib_iter(1,\
    \ 0, $n);\n}\n", "    if($n == 0) return 0;\n    if($n == 1) return 1;\n    return\
    \ fib($n - 1) + fib($n - 2);\n}\n", "  if ($n == 0) return 0;\n  if ($n == 1)\
    \ return 1;\n  return fib($n - 1) + fib($n - 2);\n}\n\necho(fib(10));\necho(\"\
    \\n\");\necho(fib(1));\necho(\"\\n\");\necho(fib(8));\necho(\"\\n\");", "    $fib\
    \ = [1, 1];\n    for ($i = 2; $i < $n; $i++) {\n        $fib[$i] = $fib[$i - 1]\
    \ + $fib[$i - 2];\n    }\n    return $fib[$n - 1];\n}\n", "  if ($n == 0) {\n\
    \    return 0;\n  } else if ($n == 1) {\n    return 1;\n  } else {\n    return\
    \ fib($n - 1) + fib($n - 2);\n  }\n}\n", "  return fib_iter(1, 0, $n);\n}\n",
  "    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return\
    \ 1;\n    }\n    $fib_0 = 0;\n    $fib_1 = 1;\n    for ($i = 1; $i < $n; $i++)\
    \ {\n        $fib_0 += $fib_1;\n        $fib_1 = $fib_0 - $fib_1;\n    }\n   \
    \ return $fib_0;\n}\n", "    return ($n <= 1) ? $n : fib($n - 1) + fib($n - 2);\n\
    }\n\n$fib_numbers = array();", "    if($n == 0) {\n        return 0;\n    }\n\
    \    if($n == 1) {\n        return 1;\n    }\n    return fib($n - 1) + fib($n\
    \ - 2);\n}\n", "\tif ($n == 0) return 0;\n\tif ($n == 1) return 1;\n\tif ($n >\
    \ 1) {\n\t\treturn fib($n - 1) + fib($n - 2);\n\t}\n}\n\necho fib(10) . \"\\n\"\
    ;\necho fib(1) . \"\\n\";\necho fib(8) . \"\\n\";", "\tif ($n < 0) {\n\t\t// TODO:\
    \ Raise error or return 0 instead?\n\t\tthrow new Exception(\"Fibonacci sequence\
    \ has no negative numbers!\");\n\t} else if ($n == 0) {\n\t\treturn 0;\n\t} else\
    \ if ($n == 1) {\n\t\treturn 1;\n\t} else {\n\t\treturn fib($n - 1) + fib($n -\
    \ 2);\n\t}\n}\n", "    if ($n < 0) {\n        return NULL;\n    }\n    if ($n\
    \ == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 1;\n \
    \   }\n    return fib($n - 1) + fib($n - 2);\n}\n\n$n = intval(fgets(STDIN));\n\
    echo(fib($n));", "    if ($n < 2) {\n        return $n;\n    } else {\n      \
    \  return fib($n - 1) + fib($n - 2);\n    }\n}\n\nfor ($i = 0; $i < 10; $i++)\
    \ {\n    echo fib($i) . ' ';\n}\necho PHP_EOL;\necho fib(10) . PHP_EOL;\necho\
    \ fib(1) . PHP_EOL;\necho fib(8) . PHP_EOL;", "  if ($n < 2) {\n    return $n;\n\
    \  }\n  return fib($n - 1) + fib($n - 2);\n}\n\nfor ($i = 0; $i < 10; $i++) {\n\
    \  echo fib($i), \"\\n\";\n}", "  if ($n == 0) {\n    return 0;\n  }\n  if ($n\
    \ == 1) {\n    return 1;\n  }\n  $num = 0;\n  $last_num = 1;\n  for ($i = 1; $i\
    \ < $n; $i++) {\n    $num += $last_num;\n    $last_num = $num - $last_num;\n \
    \ }\n  return $num;\n}\n", "    $a = 0;\n    $b = 1;\n    for ($i = 0; $i < $n;\
    \ $i++) {\n        $tmp = $a;\n        $a = $b;\n        $b = $tmp + $b;\n   \
    \ }\n    return $a;\n}\n", "\tif($n==0)\n\t\treturn 0;\n\tif($n==1)\n\t\treturn\
    \ 1;\n\treturn fib($n-1)+fib($n-2);\n}\necho fib(10);\necho \"\\n\";\necho fib(1);\n\
    echo \"\\n\";\necho fib(8);\necho \"\\n\";", "    // F(n) = F(n-1) + F(n-2)\n\
    \    // F(1) = 1\n    // F(2) = 1\n    $curr = 1;\n    $prev = 0;\n    $last =\
    \ 1;\n    for ($i = 0; $i < $n; $i++) {\n        $curr = $prev + $last;\n    \
    \    $prev = $last;\n        $last = $curr;\n    }\n    return $curr;\n}\necho\
    \ fib(10);\necho \"\\n\";\necho fib(1);\necho \"\\n\";\necho fib(8);\necho \"\\\
    n\";", "    if ($n < 2) {\n        return $n;\n    } else {\n        return fib($n\
    \ - 1) + fib($n - 2);\n    }\n}", "    $r = 1;\n    $l = 0;\n    for ($i = 1;\
    \ $i < $n; $i++) {\n        $r += $l;\n        $l = $r - $l;\n    }\n    return\
    \ $r;\n}\n", "    if ($n == 0) {\n        return 0;\n    } else if ($n == 1) {\n\
    \        return 1;\n    } else {\n        return fib($n - 1) + fib($n - 2);\n\
    \    }\n}\n\necho fib(10);\necho \"\\n\";\necho fib(1);\necho \"\\n\";\necho fib(8);\n\
    echo \"\\n\";", "  if ($n == 0) return 0;\n  if ($n == 1) return 1;\n  $a = 0;\n\
    \  $b = 1;\n  for ($i = 2; $i <= $n; $i++) {\n    $c = $a + $b;\n    $a = $b;\n\
    \    $b = $c;\n  }\n  return $c;\n}\n", "    // YOUR CODE HERE\n    if ($n ===\
    \ 0) return 0;\n    if ($n === 1) return 1;\n    return fib($n - 1) + fib($n -\
    \ 2);\n}\n\n/**\n * Generate a random string, using a cryptographically secure\
    \ \n * pseudorandom number generator (random_int)\n * \n * For PHP 7, random_int\
    \ is a PHP core function\n * For PHP 5.x, depends on https://github.com/paragonie/random_compat\n\
    \ * \n * @param int $length      How many characters do we want?\n * @param string\
    \ $keyspace A string of all possible characters\n *                         to\
    \ select from\n * @return string\n */", "    return $n < 2 ? $n : fib($n - 1)\
    \ + fib($n - 2);\n}\n\necho fib(10) . \"\\n\";\necho fib(1) . \"\\n\";\necho fib(8)\
    \ . \"\\n\";", "    return (1/$sqrt5)*(pow((1+$sqrt5)/2, $n) - pow((1-$sqrt5)/2,\
    \ $n));\n}", "  if ($n < 3) {\n    return 1;\n  }\n  return fib($n - 1) + fib($n\
    \ - 2);\n}\n\n$bench = new Bench();\n$bench->register('fib', function() {\n  fib(20);\n\
    });\n$bench->run();", "\tif ($n <= 2) {\n\t\treturn 1;\n\t} else {\n\t\treturn\
    \ fib($n - 1) + fib($n - 2);\n\t}\n}\n\necho fib(10) . \"\\n\";\necho fib(1) .\
    \ \"\\n\";\necho fib(8) . \"\\n\";", "    if ($n < 2) {\n        return $n;\n\
    \    } else {\n        return fib($n - 1) + fib($n - 2);\n    }\n}\n", "\t// base\
    \ case\n\tif ($n < 3) {\n\t\treturn 1;\n\t} else {\n\t\t// recursive case\n\t\t\
    return fib($n - 1) + fib($n - 2);\n\t}\n}\n", "    if ($n <= 2) {\n        return\
    \ 1;\n    }\n    return fib($n - 1) + fib($n - 2);\n}\n", "    if ($n < 3) {\n\
    \        return 1;\n    }\n    else {\n        return fib($n - 1) + fib($n - 2);\n\
    \    }\n}\n", "    if ($n < 2) {\n        return $n;\n    }\n    return fib($n\
    \ - 1) + fib($n - 2);\n}\necho fib(10);\necho \"\\n\";\necho fib(1);\necho \"\\\
    n\";\necho fib(8);\necho \"\\n\";", "\tif ($n < 2) {\n\t\treturn $n;\n\t}\n\t\
    return fib($n - 1) + fib($n - 2);\n}\necho fib(10);\necho \"\\n\";\necho fib(1);\n\
    echo \"\\n\";\necho fib(8);\necho \"\\n\";\n", "    if ($n < 2) {\n        return\
    \ $n;\n    }\n    $result = 0;\n    $prev1 = 1;\n    $prev2 = 0;\n    for ($i\
    \ = 1; $i < $n; $i++) {\n        $result = $prev1 + $prev2;\n        $prev2 =\
    \ $prev1;\n        $prev1 = $result;\n    }\n    return $result;\n}\n", "\tif\
    \ ($n <= 1) {\n\t\treturn $n;\n\t}\n\treturn fib($n - 1) + fib($n - 2);\n}\n",
  "    if ($n < 0) {\n        return NULL;\n    } else if ($n == 0) {\n        return\
    \ 0;\n    } else if ($n == 1) {\n        return 1;\n    } else {\n        return\
    \ fib($n - 1) + fib($n - 2);\n    }\n}\n", "\tif ($n == 0) {\n\t\treturn 0;\n\t\
    } else if ($n == 1) {\n\t\treturn 1;\n\t} else {\n\t\treturn fib($n - 1) + fib($n\
    \ - 2);\n\t}\n}\n", "    if($n <= 1) {\n        return $n;\n    } else {\n   \
    \     return fib($n - 1) + fib($n - 2);\n    }\n}\n\necho \"fib(10): \" . fib(10)\
    \ . \"\\n\";\necho \"fib(1): \" . fib(1) . \"\\n\";\necho \"fib(8): \" . fib(8)\
    \ . \"\\n\";", "    if ($n === 0) {\n        return 0;\n    } else if ($n ===\
    \ 1) {\n        return 1;\n    } else {\n        return fib($n - 1) + fib($n -\
    \ 2);\n    }\n}", "    if ($n < 2) {\n        return $n;\n    }\n    $a = 0;\n\
    \    $b = 1;\n    for ($i = 1; $i < $n; $i++) {\n        $b = $a + $b;\n     \
    \   $a = $b - $a;\n    }\n    return $b;\n}\n", "    // TODO: Fill in this function\n\
    \    if ($n == 0) {\n        return 0;\n    } else if ($n == 1) {\n        return\
    \ 1;\n    } else {\n        return fib($n - 1) + fib($n - 2);\n    }\n}\n", " \
    \ if ($n === 0) return 0;\n  if ($n === 1) return 1;\n  $a = 0;\n  $b = 1;\n \
    \ for ($i = 2; $i <= $n; $i++) {\n    $sum = $a + $b;\n    $a = $b;\n    $b =\
    \ $sum;\n  }\n  return $sum;\n}\n", "  // Put your code here.\n  // Don't write\
    \ a main function.\n  if ($n == 0 || $n == 1) {\n    return $n;\n  } else {\n\
    \    return fib($n - 1) + fib($n - 2);\n  }\n}\n", "    if ($n == 0) {\n     \
    \   return 0;\n    } else if ($n == 1) {\n        return 1;\n    } else {\n  \
    \      return fib($n - 1) + fib($n - 2);\n    }\n}\n\necho \"Fibonacci(10) = \"\
    \ . fib(10) . \"\\n\";\necho \"Fibonacci(1) = \" . fib(1) . \"\\n\";\necho \"\
    Fibonacci(8) = \" . fib(8) . \"\\n\";", "\tif ($n == 0) return 0;\n\tif ($n ==\
    \ 1) return 1;\n\treturn fib($n - 1) + fib($n - 2);\n}\n", "    if($n <= 1) {\n\
    \        return $n;\n    } else {\n        return fib($n - 1) + fib($n - 2);\n\
    \    }\n}\n\necho fib(10);\necho \"\\n\";\necho fib(1);\necho \"\\n\";\necho fib(8);\n\
    echo \"\\n\";", "  if ($n <= 1) return $n;\n  return fib($n - 1) + fib($n - 2);\n\
    }\n", "  if ($n <= 1) return $n;\n  return fib($n - 1) + fib($n - 2);\n}\n\nvar_dump(fib(10));",
  "    // Base case for n == 0 or n == 1\n    if ($n == 0 || $n == 1) {\n        return\
    \ $n;\n    }\n    // Recursive case.\n    return fib($n - 1) + fib($n - 2);\n}",
  "    $a = 1;\n    $b = 1;\n    for ($i = 0; $i < $n; $i++) {\n        $c = $a +\
    \ $b;\n        $a = $b;\n        $b = $c;\n    }\n    return $a;\n}\n", "  if\
    \ ($n == 0) return 0;\n  if ($n == 1) return 1;\n  return fib($n - 1) + fib($n\
    \ - 2);\n}\n", "\tif ($n == 0) {\n\t\treturn 0;\n\t} else if ($n == 1) {\n\t\t\
    return 1;\n\t} else {\n\t\treturn fib($n - 1) + fib($n - 2);\n\t}\n}", "    if\
    \ ($n < 2) {\n        return $n;\n    } else {\n        return fib($n - 1) + fib($n\
    \ - 2);\n    }\n}\n", "    if ($n == 0) {\n        return 0;\n    }\n    if ($n\
    \ == 1) {\n        return 1;\n    }\n    return fib($n - 1) + fib($n - 2);\n}\n",
  "  if($n == 0) {\n    return 0;\n  } else if($n == 1) {\n    return 1;\n  } else\
    \ {\n    return fib($n - 1) + fib($n - 2);\n  }\n}\n", "    if ($n <= 2) {\n \
    \       return 1;\n    }\n    return fib($n - 1) + fib($n - 2);\n}", "    if ($n\
    \ <= 2) return 1;\n    return fib($n - 1) + fib($n - 2);\n}\nprint fib(10);",
  "    if ($n == 0) {\n        return 0;\n    }\n    $a = 0;\n    $b = 1;\n    for\
    \ ($i = 1; $i < $n; $i++) {\n        $c = $a + $b;\n        $a = $b;\n       \
    \ $b = $c;\n    }\n    return $b;\n}\n", "\tif($n <= 2) {\n\t\treturn 1;\n\t}\n\
    \treturn fib($n - 1) + fib($n - 2);\n}\n$n = 8;\necho \"fib(\" . $n . \") = \"\
    \ . fib($n) . \"\\n\";", "  if ($n == 0) {\n    return 0;\n  } else if ($n ==\
    \ 1) {\n    return 1;\n  } else {\n    return fib($n - 1) + fib($n - 2);\n  }\n\
    }", "  if ($n == 0) {\n    return 0;\n  } else if ($n == 1) {\n    return 1;\n\
    \  } else {\n    return fib($n - 1) + fib($n - 2);\n  }\n}", "    if ($n <= 2)\
    \ {\n        return 1;\n    }\n    return fib($n - 1) + fib($n - 2);\n}\n", " \
    \   if ($n < 2) {\n        return $n;\n    }\n    $prev = 1;\n    $current = 1;\n\
    \    for ($i = 2; $i < $n; $i++) {\n        $tmp = $current;\n        $current\
    \ += $prev;\n        $prev = $tmp;\n    }\n    return $current;\n}\n", "  if ($n\
    \ == 0) {\n    return 0;\n  }\n  if ($n == 1) {\n    return 1;\n  }\n  return\
    \ fib($n - 1) + fib($n - 2);\n}\n\nfor ($i = 0; $i < 10; $i++) {\n  var_dump(fib($i));\n\
    }", "    if ($n < 2) {\n        return $n;\n    }\n    return fib($n - 1) + fib($n\
    \ - 2);\n}\n", "    $current = 0;\n    $next  = 1;\n\n    for ($i = 0; $i < $n;\
    \ $i++) {\n        $new_current = $next;\n        $next = $current + $next;\n\
    \        $current = $new_current;\n    }\n\n    return $current;\n}\n\necho fib(10);\n\
    echo \"\\n\";\necho fib(1);\necho \"\\n\";\necho fib(8);\necho \"\\n\";", "  return\
    \ $n <= 1 ? $n : fib($n - 1) + fib($n - 2);\n}\n\necho fib(10) . PHP_EOL;\necho\
    \ fib(1) . PHP_EOL;\necho fib(8) . PHP_EOL;", "\tif($n < 2) return $n;\n\treturn\
    \ fib($n - 1) + fib($n - 2);\n}\n\n$n = 1;\nif(!empty($_GET['n'])) {\n\t$n = intval($_GET['n']);\n\
    }\n\necho fib($n);", "  if ($n == 0) {\n    return 0;\n  }\n  if ($n == 1) {\n\
    \    return 1;\n  }\n  return fib($n - 1) + fib($n - 2);\n}\n\nvar_dump(fib(10));\n\
    var_dump(fib(1));\nvar_dump(fib(8));", "\tif ($n < 2) {\n\t\treturn $n;\n\t} else\
    \ {\n\t\treturn fib($n - 1) + fib($n - 2);\n\t}\n}\n\necho fib(10);\n", "    if\
    \ ($n <= 1) {\n        return $n;\n    }\n    return fib($n - 1) + fib($n - 2);\n\
    }\n", "    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n    \
    \    return 1;\n    }\n    return fib($n - 1) + fib($n - 2);\n}\n", "    if ($n\
    \ < 3) {\n        return 1;\n    }\n    else {\n        return fib($n - 1) + fib($n\
    \ - 2);\n    }\n}\n", "    if ($n < 2) {\n        return $n;\n    }\n    return\
    \ fib($n - 1) + fib($n - 2);\n}\n\n$n = intval(fgets(STDIN));\nprint(fib($n));",
  "    if ($n <= 1) {\n        return $n;\n    }\n    return fib($n - 1) + fib($n\
    \ - 2);\n}\n\nfib(10);\nfib(1);\nfib(8);"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
