name: HumanEval_55_fib
language: php
prompt: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
  // 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n"
tests: "function candidate(...$args) {\n    return fib(...$args);\n}\n\nfunction test():\
  \ void {\n    if (candidate(10) !== 55) { throw new Exception(\"Test failed!\");\
  \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n  \
  \  if (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11)\
  \ !== 89) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !==\
  \ 144) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["  if ($n <= 1) {\n    return $n;\n  }\n  return fib($n - 1) + fib($n\
    \ - 2);\n}\n\nfib(10);", "  if ($n <= 2) {\n    return 1;\n  }\n  return fib($n\
    \ - 1) + fib($n - 2);\n}\n\necho \"fib(10) is \" . fib(10) . \"\\n\";\necho \"\
    fib(1) is \" . fib(1) . \"\\n\";\necho \"fib(8) is \" . fib(8) . \"\\n\";", " \
    \   $fibs = array(0, 1);\n    for ($i = 2; $i <= $n; $i++) {\n        $fibs[$i]\
    \ = $fibs[$i - 1] + $fibs[$i - 2];\n    }\n    return $fibs[$n];\n}\n\necho fib(1)\
    \ . PHP_EOL;\necho fib(2) . PHP_EOL;\necho fib(3) . PHP_EOL;\necho fib(4) . PHP_EOL;\n\
    echo fib(5) . PHP_EOL;\necho fib(10) . PHP_EOL;\n", "  if ($n === 0) {\n    return\
    \ 0;\n  } else if ($n === 1) {\n    return 1;\n  } else {\n    return fib($n -\
    \ 1) + fib($n - 2);\n  }\n}\n", "    $fibs = array(0, 1);\n    for ($i = 2; $i\
    \ <= $n; $i++) {\n        $fibs[$i] = $fibs[$i - 1] + $fibs[$i - 2];\n    }\n\
    \    return $fibs[$n];\n}\n", "    // Put your code here\n}", "    $fibs = [0,\
    \ 1];\n    $fibs[$n] = fib($n - 1) + fib($n - 2);\n    return $fibs[$n];\n}\n\n\
    echo fib(10);", "\tif ($n < 2) {\n\t\treturn $n;\n\t}\n\treturn fib($n - 1) +\
    \ fib($n - 2);\n}\n\necho fib(10);", "  if ($n < 2) {\n    return $n;\n  }\n \
    \ return fib($n - 1) + fib($n - 2);\n}\n\nassert(fib(10) == 55);\nassert(fib(1)\
    \ == 1);\nassert(fib(8) == 21);", "    if ($n < 2) {\n        return $n;\n   \
    \ }\n    return fib($n - 1) + fib($n - 2);\n}\n", "    if ($n < 2) {\n       \
    \ return $n;\n    }\n    $a = 0;\n    $b = 1;\n    for ($i = 1; $i < $n; $i++)\
    \ {\n        $c = $a + $b;\n        $a = $b;\n        $b = $c;\n    }\n    return\
    \ $b;\n}\n", "  if ($n < 2) {\n    return $n;\n  }\n  return fib($n - 1) + fib($n\
    \ - 2);\n}\n\nfor ($i = 0; $i < 10; $i++) {\n  echo fib($i);\n  echo \"\\n\";\n\
    }", "    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n      \
    \  return 1;\n    }\n    return fib($n - 1) + fib($n - 2);\n}\n", "\tif ($n ===\
    \ 0) {\n\t\treturn 0;\n\t} else if ($n === 1) {\n\t\treturn 1;\n\t} else {\n\t\
    \treturn fib($n - 1) + fib($n - 2);\n\t}\n}\n", "    if($n == 0) {\n        return\
    \ 0;\n    } else if($n == 1) {\n        return 1;\n    } else {\n        return\
    \ fib($n - 1) + fib($n - 2);\n    }\n}\n\nfor($i = 0; $i < 10; $i++) {\n    $ans\
    \ = fib($i);\n    echo \"fib($i) => $ans\\n\";\n}", "    if($n == 0) {\n     \
    \   return 0;\n    }\n    if($n == 1) {\n        return 1;\n    }\n    return\
    \ fib($n - 1) + fib($n - 2);\n}\n", "    if ($n <= 2) return 1;\n    return fib($n\
    \ - 1) + fib($n - 2);\n}", "\tif ($n <= 1) {\n\t\treturn $n;\n\t}\n\telse {\n\t\
    \treturn fib($n - 1) + fib($n - 2);\n\t}\n}\n", "  if ($n < 2) {\n    return $n;\n\
    \  } else {\n    return fib($n - 1) + fib($n - 2);\n  }\n}\n\necho fib(10) . \"\
    \\n\";\necho fib(1) . \"\\n\";\necho fib(8) . \"\\n\";", "  if ($n < 3) {\n  \
    \  return 1;\n  }\n  return fib($n - 1) + fib($n - 2);\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
