language: php
name: HumanEval_61_correct_bracketing
results:
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $len = strlen($brackets);\n    $open = 0;\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        if ($brackets[$i] == \"(\") {\n            $open++;\n     \
    \   } else {\n            $open--;\n        }\n        if ($open < 0) {\n    \
    \        return false;\n        }\n    }\n    return $open == 0;\n}\n\n$in = fopen(\"\
    6_5_input.txt\", \"r\");\nwhile ($line = fgets($in)) {\n    echo correct_bracketing($line)\
    \ ? \"true\\n\" : \"false\\n\";\n}\nfclose($in);\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: fopen(6_5_input.txt): Failed to open stream: No such file or\
    \ directory in /tmp/tmpq4rsrhvn.php on line 28\n\nFatal error: Uncaught TypeError:\
    \ fgets(): Argument #1 ($stream) must be of type resource, bool given in /tmp/tmpq4rsrhvn.php:29\n\
    Stack trace:\n#0 /tmp/tmpq4rsrhvn.php(29): fgets(false)\n#1 {main}\n  thrown in\
    \ /tmp/tmpq4rsrhvn.php on line 29\n"
  timestamp: 1659823601
- exit_code: 0
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $bracket_stack = array();\n    foreach(str_split($brackets) as $bracket)\
    \ {\n        if($bracket == \"(\") {\n            array_push($bracket_stack, \"\
    (\");\n        } else {\n            if(count($bracket_stack) == 0) {\n      \
    \          return false;\n            }\n            array_pop($bracket_stack);\n\
    \        }\n    }\n    return count($bracket_stack) == 0;\n}\n\necho correct_bracketing(\"\
    (\") . \"\\n\";\necho correct_bracketing(\"()\") . \"\\n\";\necho correct_bracketing(\"\
    (()())\") . \"\\n\";\necho correct_bracketing(\")(()\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    1

    1


    '
  timestamp: 1659823601
- exit_code: 0
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n\t$len = strlen($brackets);\n\t$stack = array();\n\t$i = 0;\n\twhile($i <\
    \ $len) {\n\t\tif($brackets[$i] == \"(\") {\n\t\t\tarray_push($stack, \"(\");\n\
    \t\t} else {\n\t\t\tif(empty($stack)) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\
    \t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t\t$i++;\n\t}\n\tif(empty($stack))\
    \ {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823601
- exit_code: 0
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $stack = new SplStack();\n  for ($i = 0; $i < strlen($brackets); $i++)\
    \ {\n    $char = $brackets[$i];\n    if ($char == '(') {\n      $stack->push('(');\n\
    \    } else {\n      if ($stack->isEmpty()) {\n        return false;\n      }\n\
    \      $stack->pop();\n    }\n  }\n  return $stack->isEmpty();\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823601
- exit_code: 0
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $cnt = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n       \
    \ if ($brackets[$i] == \"(\") {\n            $cnt++;\n        } else {\n     \
    \       $cnt--;\n        }\n        if ($cnt < 0) {\n            return false;\n\
    \        }\n    }\n    return $cnt == 0;\n}\n\nfunction candidate(...$args) {\n\
    \    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823601
- exit_code: 0
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n\t$stack = new SplStack();\n\t$len = strlen($brackets);\n\tfor ($i = 0; $i\
    \ < $len; $i++) {\n\t\t$item = $brackets[$i];\n\t\tif ($item == \"(\") {\n\t\t\
    \t$stack->push($item);\n\t\t} else {\n\t\t\tif ($stack->isEmpty()) {\n\t\t\t\t\
    return false;\n\t\t\t}\n\t\t\t$stack->pop();\n\t\t}\n\t}\n\treturn $stack->isEmpty();\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823601
- exit_code: 0
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n\t$open = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\tif ($brackets[$i]\
    \ == \"(\") {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$open--;\n\t\t}\n\t\tif ($open\
    \ < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $open == 0;\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823601
- exit_code: 0
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $len = strlen($brackets);\n  $open_bracket_count = 0;\n  for ($i = 0; $i\
    \ < $len; $i++) {\n    $bracket = $brackets[$i];\n    if ($bracket == \"(\") {\n\
    \      $open_bracket_count++;\n    } else if ($bracket == \")\") {\n      $open_bracket_count--;\n\
    \    } else {\n      return false;\n    }\n    if ($open_bracket_count < 0) {\n\
    \      return false;\n    }\n  }\n  return $open_bracket_count == 0;\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823601
- exit_code: 0
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $len = strlen($brackets);\n    $a = 0;\n    $b = 0;\n    for ($i = 0;\
    \ $i < $len; $i++) {\n        if ($brackets[$i] == \"(\") $a++;\n        else\
    \ if ($brackets[$i] == \")\") $b++;\n        if ($b > $a) return false;\n    }\n\
    \    return ($a == $b);\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $open = 0;\n  $len = strlen($brackets);\n  for ($i = 0; $i < $len; $i++)\
    \ {\n    if ($brackets[$i] == \"(\") {\n      $open++;\n    } else if ($brackets[$i]\
    \ == \")\") {\n      $open--;\n    } else {\n      echo \"non-bracket encountered\\\
    n\";\n      return;\n    }\n    if ($open < 0) {\n      echo \"too many closing\
    \ brackets\\n\";\n      return;\n    }\n  }\n  if ($open == 0) {\n    echo \"\
    true\\n\";\n  } else {\n    echo \"false\\n\";\n  }\n}\n\ncorrect_bracketing(\"\
    (\")\ncorrect_bracketing(\"()\")\ncorrect_bracketing(\"(()())\")\ncorrect_bracketing(\"\
    )(()\")\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "correct_bracketing" in /tmp/tmpqlpxkga5.php
    on line 37

    '
  timestamp: 1659823601
- exit_code: 0
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $arr = str_split($brackets);\n  $stack = array();\n  $i = 0;\n  while ($i\
    \ < count($arr)) {\n    if ($arr[$i] == \"(\") {\n      array_push($stack, $arr[$i]);\n\
    \    } else {\n      if (empty($stack)) {\n        return false;\n      } else\
    \ {\n        array_pop($stack);\n      }\n    }\n    $i++;\n  }\n  if (empty($stack))\
    \ {\n    return true;\n  } else {\n    return false;\n  }\n}\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n\n}\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvczbq9nz.php:20\n\
    Stack trace:\n#0 /tmp/tmpvczbq9nz.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpvczbq9nz.php\
    \ on line 20\n"
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $open_count = substr_count($brackets, \"(\");\n    $close_count = substr_count($brackets,\
    \ \")\");\n    return $open_count == $close_count;\n}\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdq102nkw.php:27\n\
    Stack trace:\n#0 /tmp/tmpdq102nkw.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpdq102nkw.php\
    \ on line 27\n"
  timestamp: 1659823601
- exit_code: 0
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $list = [];\n    $count = 0;\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == \"(\") {\n            $list[$count] =\
    \ 1;\n            $count++;\n        } else {\n            if ($count == 0) {\n\
    \                return false;\n            } else {\n                $count--;\n\
    \            }\n        }\n    }\n    if ($count != 0) {\n        return false;\n\
    \    }\n    return true;\n}\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823601
- exit_code: 0
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n\t$open_brackets = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\
    \tif ($brackets[$i] == \"(\") {\n\t\t\t$open_brackets++;\n\t\t} else {\n\t\t\t\
    $open_brackets--;\n\t\t}\n\t\tif ($open_brackets < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn $open_brackets == 0;\n}\nfunction candidate(...$args) {\n\
    \    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823601
- exit_code: 0
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $bracket_pairs = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n\
    \        if ($brackets[$i] == '(') {\n            $bracket_pairs++;\n        }\
    \ else {\n            $bracket_pairs--;\n        }\n        if ($bracket_pairs\
    \ < 0) {\n            return false;\n        }\n    }\n    return $bracket_pairs\
    \ == 0;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823601
- exit_code: 0
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $stack = array();\n    $split = str_split($brackets);\n    foreach ($split\
    \ as $char) {\n        if ($char == \"(\") {\n            array_push($stack, $char);\n\
    \        } else {\n            if (count($stack) > 0) {\n                array_pop($stack);\n\
    \            } else {\n                return false;\n            }\n        }\n\
    \    }\n    return count($stack) == 0;\n}\n\nfunction candidate(...$args) {\n\
    \    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823601
- exit_code: 0
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n\t$expected = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\tif\
    \ ($brackets[$i] == \"(\") {\n\t\t\t$expected++;\n\t\t} else if ($brackets[$i]\
    \ == \")\") {\n\t\t\t$expected--;\n\t\t}\n\t\tif ($expected < 0) {\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\treturn $expected == 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  \n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptku0hpz3.php:21\n\
    Stack trace:\n#0 /tmp/tmptku0hpz3.php(35): test()\n#1 {main}\n  thrown in /tmp/tmptku0hpz3.php\
    \ on line 21\n"
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  // base case\n  if ($brackets == '') {\n    return true;\n  }\n\n  // recursive\
    \ case\n  $first_char = substr($brackets, 0, 1);\n  $remaining_brackets = substr($brackets,\
    \ 1);\n\n  if ($first_char == '(') {\n    $nested_result = correct_bracketing($remaining_brackets);\n\
    \    if ($nested_result) {\n      $closing_bracket_index = strpos($remaining_brackets,\
    \ ')');\n      if ($closing_bracket_index) {\n        $remaining_brackets = substr($remaining_brackets,\
    \ $closing_bracket_index + 1);\n        return correct_bracketing($remaining_brackets);\n\
    \      }\n    }\n  }\n\n  return false;\n}\n\necho \"correct_bracketing(\\\"(\\\
    \")\\n\";\necho correct_bracketing(\"(\");\necho \"\\n\";\n\necho \"correct_bracketing(\\\
    \"()\\\")\\n\";\necho correct_bracketing(\"()\");\necho \"\\n\";\n\necho \"correct_bracketing(\\\
    \"(()())\\\")\\n\";\necho correct_bracketing(\"(()())\");\necho \"\\n\";\n\necho\
    \ \"correct_bracketing(\\\")(()\\\")\\n\";\necho correct_bracketing(\")(()\");\n\
    echo \"\\n\";\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "correct_bracketing(\"(\")\n\ncorrect_bracketing(\"()\")\n\ncorrect_bracketing(\"\
    (()())\")\n\ncorrect_bracketing(\")(()\")\n\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpxfzpn1ov.php:57\nStack trace:\n#0 /tmp/tmpxfzpn1ov.php(71):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpxfzpn1ov.php on line 57\n"
  timestamp: 1659823601
