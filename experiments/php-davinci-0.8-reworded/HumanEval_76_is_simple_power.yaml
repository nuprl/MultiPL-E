name: HumanEval_76_is_simple_power
language: php
prompt: "<?php\n// Your task is to write a function that returns true if a number\
  \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
  \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
  \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
  \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>>\
  \ is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n"
tests: "function candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
  \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test\
  \ failed!\"); }\n}\n\ntest();"
completions: ["    $isPow = is_int(log($x, $n));\n    return $isPow;\n}", "  if($x\
    \ === 1) {\n    return true;\n  }\n  $divisor = $n;\n  while($divisor < $x) {\n\
    \    $divisor *= $n;\n  }\n  return $divisor === $x;\n}", "  $result = false;\n\
    \  // If the given base is 1, then the given number must be 1 too.\n  if ($n ===\
    \ 1) {\n    $result = $x === 1;\n  } else {\n    $root = pow($x, 1 / $n);\n  \
    \  $result = $root === round($root);\n  }\n  return $result;\n}\n", "    if (pow($n,\
    \ intval(log($x, $n))) == $x) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}", "  return pow($n, intval(log($x, $n))) == $x;\n}", "  if($x==$n)\
    \ return true;\n  if($x%$n!=0) return false;\n  return is_simple_power($x/$n,\
    \ $n);\n}", "  if (pow($n, (int)log($x, $n)) == $x) {\n    return true;\n  } else\
    \ {\n    return false;\n  }\n}", "  $result = pow($n, intval(log($x)/log($n)));\n\
    \  if ($result == $x) {\n    return true;\n  } else {\n    return false;\n  }\n\
    }\n\necho is_simple_power(3, 2);", "    // your code here\n}", "    $power = log($x,\
    \ $n);\n    return $power == floor($power);\n}\necho is_simple_power(1, 4).\"\\\
    n\";\necho is_simple_power(2, 2).\"\\n\";\necho is_simple_power(8, 2).\"\\n\"\
    ;\necho is_simple_power(3, 2).\"\\n\";\necho is_simple_power(3, 1).\"\\n\";\n\
    echo is_simple_power(5, 3).\"\\n\";", "  $result = pow($n, round(log($x)/log($n)));\n\
    \  return ($result == $x);\n}\n\necho is_simple_power(1, 4) . \"<br>\";\necho\
    \ is_simple_power(2, 2) . \"<br>\";\necho is_simple_power(8, 2) . \"<br>\";\n\
    echo is_simple_power(3, 2) . \"<br>\";\necho is_simple_power(3, 1) . \"<br>\"\
    ;\necho is_simple_power(5, 3) . \"<br>\";\n", "  return pow($n,floor(log($x)/log($n)))\
    \ == $x;\n}\n ?>", "  if ($x == 1 && $n != 1) {\n    return false;\n  } elseif\
    \ ($x == 1 && $n == 1) {\n    return true;\n  } elseif ($x == 0) {\n    return\
    \ false;\n  }\n  for ($i = 2; $i <= $x; $i++) {\n    if ($x == pow($n, $i)) {\n\
    \      return true;\n    }\n  }\n  return false;\n}", "  // Your code here\n \
    \ $test = pow($n, (int)log($x, $n));\n  if ($test == $x) {\n    return true;\n\
    \  } else {\n    return false;\n  }\n}", "  if ($x == 1 && $n == 1) {\n    return\
    \ true;\n  } elseif ($x <= 0 || $n <= 0) {\n    return false;\n  }\n  $n_power\
    \ = $n;\n  while ($n_power < $x) {\n    $n_power *= $n;\n  }\n  return $n_power\
    \ == $x;\n}\n\necho \"1, 4\\n\";\necho is_simple_power(1, 4) ? \"true\\n\" : \"\
    false\\n\";\necho \"2, 2\\n\";\necho is_simple_power(2, 2) ? \"true\\n\" : \"\
    false\\n\";\necho \"8, 2\\n\";\necho is_simple_power(8, 2) ? \"true\\n\" : \"\
    false\\n\";\necho \"3, 2\\n\";\necho is_simple_power(3, 2) ? \"true\\n\" : \"\
    false\\n\";\necho \"3, 1\\n\";\necho is_simple_power(3, 1) ? \"true\\n\" : \"\
    false\\n\";\necho \"5, 3\\n\";\necho is_simple_power(5, 3) ? \"true\\n\" : \"\
    false\\n\";\necho \"0, 0\\n\";\necho is_simple_power(0, 0) ? \"true\\n\" : \"\
    false\\n\";\necho \"10, 2\\n\";\necho is_simple_power(10, 2) ? \"true\\n\" : \"\
    false\\n\";\necho \"100, 2\\n\";\necho is_simple_power(100, 2) ? \"true\\n\" :\
    \ \"false\\n\";\necho \"1, 1\\n\";\necho is_simple_power(1, 1) ? \"true\\n\" :\
    \ \"false\\n\";", "  return log($x, $n) % 1 == 0;\n}\n", "    $xx = log($x) /\
    \ log($n);\n    return ($xx == floor($xx));\n}\n\n$answer = is_simple_power(3,\
    \ 2);\nvar_dump($answer);", "    return pow($n, intval(log($x) / log($n))) ==\
    \ $x;\n}", "  $pow = pow($n, round(log($x, $n)));\n  return ($pow === $x) ? true\
    \ : false;\n}\necho is_simple_power(1, 4) . \"<br>\";\necho is_simple_power(2,\
    \ 2) . \"<br>\";\necho is_simple_power(8, 2) . \"<br>\";\necho is_simple_power(3,\
    \ 2) . \"<br>\";\necho is_simple_power(3, 1) . \"<br>\";\necho is_simple_power(5,\
    \ 3) . \"<br>\";", "  if($x == 1){\n    return true;\n  }\n  $power = 1;\n  while($power\
    \ <= $x){\n    if($power == $x){\n      return true;\n    }\n    $power *= $n;\n\
    \  }\n  return false;\n}", "    if (log($x, $n) % 1 == 0) {\n      return true;\n\
    \    } else {\n      return false;\n    }\n}\n", "  $power = 1;\n  for ($i = 0;\
    \ $i < $x; $i++) {\n    $power *= $n;\n    if ($power == $x) {\n      return true;\n\
    \    }\n  }\n  return false;\n}\n ?>", "\tif ($x == 1) return true;\n\tif ($x\
    \ == $n) return true;\n\t$i = 1;\n\twhile (pow($n, $i) < $x) {\n\t\t$i++;\n\t\
    }\n\tif (pow($n, $i) == $x) return true;\n\treturn false;\n}", "  $int = log($x)\
    \ / log($n);\n  return floor($int) == $int;\n}", "  return log($x, $n) == (int)log($x,\
    \ $n);\n}", "  if ($x == 1 && $n == 1) {\n    return true;\n  } elseif ($x % $n\
    \ == 0) {\n    return is_simple_power($x / $n, $n);\n  } else {\n    return false;\n\
    \  }\n}", "  $result = $n**intval(log($x, $n));\n  if ($result == $x) {\n    return\
    \ true;\n  } else {\n    return false;\n  }\n}\n", "  for ($i = 1; $i < $x; $i++)\
    \ {\n    if ($x === pow($n, $i)) {\n      return true;\n    }\n  }\n  return false;\n\
    }", "  $res = false;\n  $factor = 1;\n  $digits = strlen($x);\n  for ($i = 1;\
    \ $i <= $digits; $i++) {\n    $factor *= $n;\n    if ($factor == $x) {\n     \
    \ $res = true;\n    }\n  }\n  return $res;\n}\n", "    $integer = log($x, $n);\n\
    \    return $integer == (int)$integer;\n}", "    if($x == 1) return true;\n  \
    \  if($x == $n) return true;\n    $x_temp = $x;\n    while($x_temp > $n) {\n \
    \       $x_temp = $x_temp / $n;\n    }\n    if($x_temp == $n) return true;\n \
    \   return false;\n}\n$x = 1;\n$n = 4;\necho is_simple_power($x, $n);", "  $y\
    \ = 1;\n  while($y <= $x) {\n    if($y == $x) {\n      return true;\n    }\n \
    \   $y *= $n;\n  }\n  return false;\n}\n ?>", "    if (pow($n, floor(log($x)/log($n)))\
    \ == $x) {\n        return true;\n    } else {\n        return false;\n    }\n\
    }", "  for ($i = 0; $i < $x; $i++) {\n    if (pow($n, $i) == $x) {\n      return\
    \ true;\n    }\n  }\n  return false;\n}", "  for ($i = 2; $i <= $x; $i++) {\n\
    \    if ($x == $n**$i) {\n      return true;\n    }\n  }\n  return false;\n}",
  "  $int = 0;\n  $result = false;\n  while ($x >= pow($n, $int)) {\n    if ($x ==\
    \ pow($n, $int)) {\n      $result = true;\n    }\n    $int++;\n  }\n  return $result;\n\
    }", "  return log($x, $n) == round(log($x, $n)) ? true : false;\n}\n", "  return\
    \ pow($n, round(log($x, $n))) == $x;\n}\nprint_r(is_simple_power(1, 4) . PHP_EOL);\n\
    print_r(is_simple_power(2, 2) . PHP_EOL);\nprint_r(is_simple_power(8, 2) . PHP_EOL);\n\
    print_r(is_simple_power(3, 2) . PHP_EOL);\nprint_r(is_simple_power(3, 1) . PHP_EOL);\n\
    print_r(is_simple_power(5, 3) . PHP_EOL);", "  $bool;\n  $power = pow($n, intval(log($x,\
    \ $n)));\n  if($power == $x){\n    $bool = true;\n  } else {\n    $bool = false;\n\
    \  }\n  return $bool;\n}", "  $number = pow($n, round(log($x, $n)));\n  return\
    \ $number == $x;\n}\n\nprint_r(is_simple_power(1, 4) . \"\\n\");\nprint_r(is_simple_power(2,\
    \ 2) . \"\\n\");\nprint_r(is_simple_power(8, 2) . \"\\n\");\nprint_r(is_simple_power(3,\
    \ 2) . \"\\n\");\nprint_r(is_simple_power(3, 1) . \"\\n\");\nprint_r(is_simple_power(5,\
    \ 3) . \"\\n\");", "    return (log($x) / log($n)) % 1 == 0;\n}\n", "    if ($x\
    \ == 1 || $x == $n) {\n        return true;\n    }\n    if ($x % $n != 0) {\n\
    \        return false;\n    }\n    $npower = $n;\n    while ($npower < $x) {\n\
    \        $npower *= $n;\n    }\n    return $npower == $x;\n}", "  $minVal = 1;\n\
    \  for ($i = 1; $minVal <= $x; $i++) {\n    $minVal = $n ** $i;\n    if ($minVal\
    \ == $x) {\n      return true;\n    }\n  }\n  return false;\n}", "  $check = pow($n,\
    \ floor(log($x, $n)));\n  return $check == $x;\n}", "  // $x is a simple power\
    \ of $n if $n**$int = $x\n  // $x / $n = $n\n  // $x / $n**2 = $n\n  // $x / $n**3\
    \ = $n\n  // $x / $n**4 = $n\n  // $x / $n**5 = $n\n  // $x / $n**6 = $n\n  //\
    \ $x / $n**7 = $n\n  // $x / $n**8 = $n\n  // $x / $n**9 = $n\n  // $x / $n**10\
    \ = $n\n  // $x / $n**11 = $n\n  // $x / $n**12 = $n\n  // $x / $n**13 = $n\n\
    \  // $x / $n**14 = $n\n  // $x / $n**15 = $n\n  // $x / $n**16 = $n\n  // $x\
    \ / $n**17 = $n\n  // $x / $n**18 = $n\n  // $x / $n**19 = $n\n  // $x / $n**20\
    \ = $n\n  // $x / $n**21 = $n\n  // $x / $n**22 = $n\n  // $x / $n**23 = $n\n\
    \  // $x / $n**24 = $n\n  // $x / $n**25 = $n\n  // $x / $n**26 = $n\n  // $x\
    \ / $n**27 = $n\n  // $x / $n**28 = $n\n  // $x / $n**29 = $n\n  // $x / $n**30\
    \ = $n\n  // $x / $n**31 = $n\n  // $x / $n**32 = $n\n  // $x / $n**33 = $n\n\
    \  // $x / $n**34 = $n\n  // $x / $n**35 = $n\n  // $x / $n**36 = $n\n  // $x\
    \ / $n**37 = $n\n  // $x / $n**38 = $", "  if ($x == 1) return false;\n  if ($x\
    \ == $n) return true;\n  if ($x < $n) return false;\n  if ($x % $n == 0) {\n \
    \   return is_simple_power($x / $n, $n);\n  }\n  return false;\n}\n", "\n}\n\n\
    /*\n    ----TESTE----\n*/\n$test1 = 1;\n$test2 = 4;\n\necho is_simple_power($test1,\
    \ $test2);", "  if($x==$n) {\n    return true;\n  }\n  elseif($x>$n && $x%$n==0)\
    \ {\n    return is_simple_power($x/$n, $n);\n  }\n  else {\n    return false;\n\
    \  }\n}\n", "    $i = 1;\n    while($i < $x) {\n        $i *= $n;\n    }\n   \
    \ return $i == $x;\n}", "    // your code here\n}", "\treturn log($x, $n) == (int)log($x,\
    \ $n);\n}\n\nvar_dump(is_simple_power(1, 4));\nvar_dump(is_simple_power(2, 2));\n\
    var_dump(is_simple_power(8, 2));\nvar_dump(is_simple_power(3, 2));\nvar_dump(is_simple_power(3,\
    \ 1));\nvar_dump(is_simple_power(5, 3));", "    if ($x == 1) {\n        return\
    \ true;\n    }\n    if ($x == $n) {\n        return true;\n    }\n    while ($x\
    \ > $n) {\n        if ($x % $n != 0) {\n            return false;\n        }\n\
    \        $x = $x / $n;\n    }\n    if ($x == $n) {\n        return true;\n   \
    \ }\n    return false;\n}\n\necho is_simple_power(1, 4) . \"\\n\";\necho is_simple_power(2,\
    \ 2) . \"\\n\";\necho is_simple_power(8, 2) . \"\\n\";\necho is_simple_power(3,\
    \ 2) . \"\\n\";\necho is_simple_power(3, 1) . \"\\n\";\necho is_simple_power(5,\
    \ 3) . \"\\n\";", "    $n = (int)$n;\n    $x = (int)$x;\n    $log = $n == 1 ?\
    \ 1 : log($x) / log($n);\n    return $n ** $log == $x;\n}\n", "    if ($x ===\
    \ 1 || $x === $n) {\n        return true;\n    }\n    if ($x % $n !== 0) {\n \
    \       return false;\n    }\n    return is_simple_power($x / $n, $n);\n}\necho\
    \ is_simple_power(1, 4) . '<br />';\necho is_simple_power(2, 2) . '<br />';\n\
    echo is_simple_power(8, 2) . '<br />';\necho is_simple_power(3, 2) . '<br />';\n\
    echo is_simple_power(3, 1) . '<br />';\necho is_simple_power(5, 3) . '<br />';",
  "    // your code\n    return (log($x, $n) % 1 == 0) ? true : false;\n}\n\necho\
    \ is_simple_power(1, 4);\necho is_simple_power(2, 2);\necho is_simple_power(8,\
    \ 2);\necho is_simple_power(3, 2);\necho is_simple_power(3, 1);\necho is_simple_power(5,\
    \ 3);", "    if($x==1){\n      return true;\n    }\n    if($x % $n != 0){\n  \
    \    return false;\n    }\n    return is_simple_power($x/$n, $n);\n}", "  if ($x\
    \ == 1 && $n == 0) {\n    return true;\n  } else if ($x == 0) {\n    return false;\n\
    \  } else {\n    $isPower = true;\n    $power = 0;\n    while ($isPower) {\n \
    \     $rem = $x % $n;\n      if ($rem == 0) {\n        $x = $x / $n;\n       \
    \ $power++;\n      } else {\n        $isPower = false;\n      }\n    }\n    if\
    \ ($x == 1) {\n      return true;\n    } else {\n      return false;\n    }\n\
    \  }\n}\necho is_simple_power(1, 4) . PHP_EOL;\necho is_simple_power(2, 2) . PHP_EOL;\n\
    echo is_simple_power(8, 2) . PHP_EOL;\necho is_simple_power(3, 2) . PHP_EOL;\n\
    echo is_simple_power(3, 1) . PHP_EOL;\necho is_simple_power(5, 3) . PHP_EOL;",
  "  for ($i = 0; $i < $x; $i++) {\n    if ($n ** $i == $x) {\n      return true;\n\
    \    }\n  }\n  return false;\n}\necho is_simple_power(1, 4) . \"\\n\";\necho is_simple_power(2,\
    \ 2) . \"\\n\";\necho is_simple_power(8, 2) . \"\\n\";\necho is_simple_power(3,\
    \ 2) . \"\\n\";\necho is_simple_power(3, 1) . \"\\n\";\necho is_simple_power(5,\
    \ 3) . \"\\n\";\n ?>", "  $log_result = log($x, $n);\n  return is_integer($log_result);\n\
    }\n ?>", "    if($x == 1){\n      return true;\n    }\n    if($x == $n){\n   \
    \   return true;\n    }\n    if($x > $n){\n      $pow = 1;\n      $pow = $n *\
    \ $pow;\n      while($pow < $x){\n        $pow = $n * $pow;\n      }\n      if($pow\
    \ == $x){\n        return true;\n      }else{\n        return false;\n      }\n\
    \    }else{\n      return false;\n    }\n}", "  $result = ($x ** 1 / $n);\n  $result2\
    \ = ($x ** 2 / $n);\n  if ($result == $n) {\n    return true;\n  }\n  elseif ($result2\
    \ == $n) {\n    return true;\n  }\n  else {\n    return false;\n  }\n}\n ?>",
  "  $divisor = $n;\n  while ($divisor <= $x) {\n    if ($divisor === $x) {\n    \
    \  return true;\n    }\n    $divisor *= $n;\n  }\n  return false;\n}\n\necho is_simple_power(1,\
    \ 4) . PHP_EOL;\necho is_simple_power(2, 2) . PHP_EOL;\necho is_simple_power(8,\
    \ 2) . PHP_EOL;\necho is_simple_power(3, 2) . PHP_EOL;\necho is_simple_power(3,\
    \ 1) . PHP_EOL;\necho is_simple_power(5, 3) . PHP_EOL;", "  return $x > 0 && $n\
    \ > 0 && pow($n, round(log($x) / log($n))) == $x;\n}\n\nvar_dump(is_simple_power(1,\
    \ 4)); // true\nvar_dump(is_simple_power(2, 2)); // true\nvar_dump(is_simple_power(8,\
    \ 2)); // true\nvar_dump(is_simple_power(3, 2)); // false\nvar_dump(is_simple_power(3,\
    \ 1)); // false\nvar_dump(is_simple_power(5, 3)); // false", "  //your code here\n\
    \  return 1;\n}\n\nvar_dump(is_simple_power(1, 4)); //=> true\nvar_dump(is_simple_power(2,\
    \ 2)); //=> true\nvar_dump(is_simple_power(8, 2)); //=> true\nvar_dump(is_simple_power(3,\
    \ 2)); //=> false\nvar_dump(is_simple_power(3, 1)); //=> false\nvar_dump(is_simple_power(5,\
    \ 3)); //=> false", "  for ($i = 0; $i < $x; $i++) {\n    if (pow($n, $i) == $x)\
    \ {\n      return true;\n    }\n  }\n  return false;\n}", "  if (pow($n, 1) ==\
    \ $x) {\n    return true;\n  } else if (pow($n, 2) == $x) {\n    return true;\n\
    \  } else if (pow($n, 3) == $x) {\n    return true;\n  } else if (pow($n, 4) ==\
    \ $x) {\n    return true;\n  } else if (pow($n, 5) == $x) {\n    return true;\n\
    \  } else if (pow($n, 6) == $x) {\n    return true;\n  } else if (pow($n, 7) ==\
    \ $x) {\n    return true;\n  } else if (pow($n, 8) == $x) {\n    return true;\n\
    \  } else if (pow($n, 9) == $x) {\n    return true;\n  } else if (pow($n, 10)\
    \ == $x) {\n    return true;\n  } else {\n    return false;\n  }\n}", "    $i\
    \ = 1;\n    while($i <= $x) {\n        if ($i * $i == $x) {\n            return\
    \ true;\n        }\n        $i++;\n    }\n    return false;\n}", "  return log($x,\
    \ $n) == round(log($x, $n));\n}\necho is_simple_power(1, 4) . \"\\n\";\necho is_simple_power(2,\
    \ 2) . \"\\n\";\necho is_simple_power(8, 2) . \"\\n\";\necho is_simple_power(3,\
    \ 2) . \"\\n\";\necho is_simple_power(3, 1) . \"\\n\";\necho is_simple_power(5,\
    \ 3) . \"\\n\";", "  return (\n    is_int($x / pow($n, intval(log($x, $n)))) &&\n\
    \    ($x / pow($n, intval(log($x, $n))) == 1)\n  );\n}", "    return $x == (int)\
    \ pow($n, round(log($x, $n), 0));\n}\nprint is_simple_power(1, 4) ? \"true\" :\
    \ \"false\";\necho \"\\n\";\nprint is_simple_power(2, 2) ? \"true\" : \"false\"\
    ;\necho \"\\n\";\nprint is_simple_power(8, 2) ? \"true\" : \"false\";\necho \"\
    \\n\";\nprint is_simple_power(3, 2) ? \"true\" : \"false\";\necho \"\\n\";\nprint\
    \ is_simple_power(3, 1) ? \"true\" : \"false\";\necho \"\\n\";\nprint is_simple_power(5,\
    \ 3) ? \"true\" : \"false\";\necho \"\\n\";", "  $k = 1;\n  while ($k < $x) {\n\
    \    $k *= $n;\n  }\n  return $k == $x;\n}\n\n$tests = [\n  [1, 4],\n  [2, 2],\n\
    \  [8, 2],\n  [3, 2],\n  [3, 1],\n  [5, 3],\n];\n\nforeach ($tests as [$x, $n])\
    \ {\n  $result = is_simple_power($x, $n);\n  echo \"is_simple_power($x, $n) =\
    \ $result\\n\";\n}", "  if($x == 1) return true;\n  if($x % $n != 0) return false;\n\
    \  if($x / $n == 1) return true;\n  return is_simple_power($x / $n, $n);\n}\n\n\
    echo is_simple_power(1, 4) ? \"true\" : \"false\";\necho \"\\n\";\necho is_simple_power(2,\
    \ 2) ? \"true\" : \"false\";\necho \"\\n\";\necho is_simple_power(8, 2) ? \"true\"\
    \ : \"false\";\necho \"\\n\";\necho is_simple_power(3, 2) ? \"true\" : \"false\"\
    ;\necho \"\\n\";\necho is_simple_power(3, 1) ? \"true\" : \"false\";\necho \"\\\
    n\";\necho is_simple_power(5, 3) ? \"true\" : \"false\";\necho \"\\n\";", "  $isPower\
    \ = false;\n  while ($n ** 1 <= $x) {\n    if ($n ** 1 === $x) {\n      $isPower\
    \ = true;\n    }\n    $n++;\n  }\n  return $isPower;\n}", "  $i = 0;\n  while\
    \ (pow($n, $i) <= $x) {\n    if (pow($n, $i) == $x) {\n      return true;\n  \
    \  }\n    $i++;\n  }\n  return false;\n}\n\n$i = 0;\nwhile (pow(3, $i) <= 4) {\n\
    \  echo pow(3, $i) . PHP_EOL;\n  $i++;\n}\n\necho is_simple_power(1, 4) . PHP_EOL;\n\
    echo is_simple_power(2, 2) . PHP_EOL;\necho is_simple_power(8, 2) . PHP_EOL;\n\
    echo is_simple_power(3, 2) . PHP_EOL;\necho is_simple_power(3, 1) . PHP_EOL;\n\
    echo is_simple_power(5, 3) . PHP_EOL;", "  if($x%$n != 0) {\n    return false;\n\
    \  }\n  if($x == $n) {\n    return true;\n  }\n  return is_simple_power($x/$n,\
    \ $n);\n}", "    $res = false;\n    $integer = (int) $x;\n    if($integer == $x)\
    \ {\n        $res = pow($n, (int) log($x, $n)) == $x;\n    }\n    return $res;\n\
    }\n\nprint_r(is_simple_power(2, 2));\nprint_r(is_simple_power(3, 2));\nprint_r(is_simple_power(8,\
    \ 2));\nprint_r(is_simple_power(1, 4));\nprint_r(is_simple_power(3, 1));\nprint_r(is_simple_power(5,\
    \ 3));\nprint_r(is_simple_power(0.5, 2));\nprint_r(is_simple_power(2.3, 2));\n\
    print_r(is_simple_power(-3, 2));\nprint_r(is_simple_power(3, -2));", "  return\
    \ ((int)log($x, $n) == log($x, $n)) ? true : false;\n}", "  return pow($n,round(log($x)/log($n)))\
    \ == $x;\n}", "  return $x == pow($n, round(log($x, $n)));\n}\n ?>", "    $int\
    \ = 0;\n    while($n**$int <= $x) {\n        if($n**$int == $x) {\n          \
    \  return true;\n        }\n        $int++;\n    }\n    return false;\n}", " \
    \ $power = 1;\n  $i = 1;\n  if ($x == $n) {\n    return true;\n  }\n  while ($power\
    \ < $x) {\n    $power = pow($n, $i);\n    if ($power == $x) {\n      return true;\n\
    \    }\n    $i++;\n  }\n  return false;\n}", "\treturn is_int(log($x, $n));\n\
    }\n", "  return (log($x) / log($n)) == round(log($x) / log($n));\n}", "  if ($x\
    \ == 1) {\n    return true;\n  }\n  elseif ($x == 0) {\n    return false;\n  }\n\
    \  elseif ($x == $n) {\n    return true;\n  }\n  elseif ($x == 2) {\n    return\
    \ false;\n  }\n  elseif ($x == 3) {\n    return false;\n  }\n  elseif ($x % $n\
    \ == 0) {\n    return is_simple_power($x / $n, $n);\n  }\n  else {\n    return\
    \ false;\n  }\n}\n\necho is_simple_power(1, 4);\necho is_simple_power(2, 2);\n\
    echo is_simple_power(8, 2);\necho is_simple_power(3, 2);\necho is_simple_power(3,\
    \ 1);\necho is_simple_power(5, 3);", "  if ($x === 1 || $x === $n) {\n    return\
    \ true;\n  }\n  return ($x % $n === 0) ? is_simple_power($x / $n, $n) : false;\n\
    }", "  $number = $x;\n  for ($i = 1; $i < $x; $i++) {\n    $number /= $n;\n  \
    \  if ($number == 1) {\n      return true;\n    }\n  }\n  return false;\n}\n\n\
    echo is_simple_power(1, 4) . PHP_EOL;\necho is_simple_power(2, 2) . PHP_EOL;\n\
    echo is_simple_power(8, 2) . PHP_EOL;\necho is_simple_power(3, 2) . PHP_EOL;\n\
    echo is_simple_power(3, 1) . PHP_EOL;\necho is_simple_power(5, 3) . PHP_EOL;",
  "    if ($x == 0 && $n == 0) {\n        return true;\n    }\n    if ($x == 0 &&\
    \ $n != 0) {\n        return false;\n    }\n    if ($x != 0 && $n == 0) {\n  \
    \      return false;\n    }\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($n == 1) {\n        return false;\n    }\n    if ($x < 0 || $n < 0) {\n\
    \        return false;\n    }\n    if ($x % $n != 0) {\n        return false;\n\
    \    }\n    return is_simple_power($x / $n, $n);\n}\n\necho is_simple_power(1,\
    \ 4);\necho is_simple_power(2, 2);\necho is_simple_power(8, 2);\necho is_simple_power(3,\
    \ 2);\necho is_simple_power(3, 1);\necho is_simple_power(5, 3);\necho is_simple_power(6,\
    \ 2);", "  for ($i = 2; $i <= $x; $i++) {\n    for ($j = 1; $j <= $x; $j++) {\n\
    \      if ($n ** $i == $x) {\n        return true;\n      }\n    }\n  }\n  return\
    \ false;\n}\n\necho is_simple_power(1, 4);\necho is_simple_power(2, 2);\necho\
    \ is_simple_power(8, 2);\necho is_simple_power(3, 2);\necho is_simple_power(3,\
    \ 1);\necho is_simple_power(5, 3);", "    // Do your magic here\n    $result =\
    \ $n**intval(log($x, $n));\n    return $result == $x;\n}", "  $value = 1;\n  while($value\
    \ < $x) {\n    $value *= $n;\n  }\n  return $value == $x;\n}", "  return log($x,\
    \ $n) == round(log($x, $n)) ? true : false;\n}", "  $exp = 1;\n  while ($n **\
    \ $exp <= $x) {\n    if ($n ** $exp == $x) {\n      return true;\n    }\n    $exp++;\n\
    \  }\n  return false;\n}\n\nvar_dump(is_simple_power(1, 4));\nvar_dump(is_simple_power(2,\
    \ 2));\nvar_dump(is_simple_power(8, 2));\nvar_dump(is_simple_power(3, 2));\nvar_dump(is_simple_power(3,\
    \ 1));\nvar_dump(is_simple_power(5, 3));", "  if ($x < 1) return false;\n  $x\
    \ = log($x, $n);\n  return $x == floor($x);\n}", "    if(log($x, $n) % 1 === 0)\
    \ {\n        return true;\n    }\n    return false;\n}", "  // your code here...\n\
    \  if($x==$n) {\n    return true;\n  } elseif($x%$n != 0) {\n    return false;\n\
    \  } else {\n    return is_simple_power($x/$n, $n);\n  }\n}\necho is_simple_power(27,3);\n\
    echo \"\\n\";\necho is_simple_power(25,5);\necho \"\\n\";\necho is_simple_power(125,5);\n\
    echo \"\\n\";\necho is_simple_power(625,5);\necho \"\\n\";", "    $int = 0;\n\
    \    while (pow($n, $int) <= $x) {\n        if (pow($n, $int) == $x) {\n     \
    \       return true;\n        }\n        $int++;\n    }\n    return false;\n}",
  "  return is_int(log($x, $n));\n}", "  return log($x, $n) % 1 == 0;\n}", "    $count\
    \ = 0;\n    while ($x > 1) {\n        $x /= $n;\n        $count++;\n    }\n  \
    \  return ($x == 1 && $count > 1) ? true : false;\n}\n", "    if($x%$n!=0){\n\
    \        return false;\n    }\n    if($x%$n == 0){\n        if($x == $n){\n  \
    \          return true;\n        }else{\n            return is_simple_power($x/$n,\
    \ $n);\n        }\n    }\n}", "    return log($x) / log($n) % 1 == 0;\n}", " \
    \ return pow($n, floor(log($x, $n))) == $x;\n}", "  $result = $n**intval(log($x)/log($n));\n\
    \  return ($result === $x) ? true : false;\n}", "    $m = $n;\n    while ($m <=\
    \ $x) {\n        if ($m == $x) {\n            return true;\n        }\n      \
    \  $m *= $n;\n    }\n    return false;\n}", "  if ($x === 1 || $x === $n) {\n\
    \    return true;\n  }\n  if ($x === 0 || $x % $n !== 0) {\n    return false;\n\
    \  }\n  return is_simple_power($x / $n, $n);\n}", "    if (pow($n, log($x, $n))\
    \ == $x) {\n        return true;\n    }\n    return false;\n}", "\tif(log($x,\
    \ $n) == round(log($x, $n))) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\
    \t}\n}\n\necho is_simple_power(1, 4);\necho is_simple_power(2, 2);\necho is_simple_power(8,\
    \ 2);\necho is_simple_power(3, 2);\necho is_simple_power(3, 1);\necho is_simple_power(5,\
    \ 3);\n", "    return pow($n, (int) log($x, $n)) == $x;\n}\n", "  // using log\
    \ (base $n) $x as the exponent and $n as the base\n  return log($x, $n) == round(log($x,\
    \ $n));\n}\n", "    return log($x, $n) % 1 == 0;\n}", "  $root = pow($x, 1/$n);\n\
    \  if (intval($root) == $root) {\n    return true;\n  } else {\n    return false;\n\
    \  }\n}\necho is_simple_power(1, 4);\necho is_simple_power(2, 2);\necho is_simple_power(8,\
    \ 2);\necho is_simple_power(3, 2);\necho is_simple_power(3, 1);\necho is_simple_power(5,\
    \ 3);\n", "  //your code here\n}", "    if ($x == 1 || $x == $n) {\n        return\
    \ true;\n    }\n    $i = 1;\n    while ($i * $n < $x) {\n        $i *= $n;\n \
    \   }\n    return $i == $x;\n}", "  for ($i = 0; $i < 10; $i++) {\n    if (pow($n,\
    \ $i) == $x) {\n      return true;\n    }\n  }\n  return false;\n}\n\necho is_simple_power(1,\
    \ 4) . \"\\n\";\necho is_simple_power(2, 2) . \"\\n\";\necho is_simple_power(8,\
    \ 2) . \"\\n\";\necho is_simple_power(3, 2) . \"\\n\";\necho is_simple_power(3,\
    \ 1) . \"\\n\";\necho is_simple_power(5, 3) . \"\\n\";", "\treturn (pow($n, floor(log($x)/log($n)))\
    \ == $x) ? true : false;\n}\n", "\n}", "    $pow = 1;\n    for ($i = 0; $i < $x;\
    \ $i++) {\n        $pow *= $n;\n        if ($pow == $x) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}", "  $result = 1;\n  while ($result\
    \ < $x) {\n    $result *= $n;\n  }\n  return $result == $x;\n}", "    $i = 1;\n\
    \    if ($x <= 0 || $n <= 0) return false;\n    if ($x == 1) return true;\n  \
    \  while (pow($n, $i) <= $x) {\n        if (pow($n, $i) == $x) return true;\n\
    \        $i++;\n    }\n    return false;\n}", "  $int = log($x, $n);\n  if(is_int($int))\
    \ {\n    return true;\n  } else {\n    return false;\n  }\n}\n", "    if ($x ==\
    \ $n ** 1) {\n        return true;\n    } else {\n        return false;\n    }\n\
    }", "    // your code here\n}", "  $c = log($x, $n);\n  if($c == round($c)) {\n\
    \    return true;\n  } else {\n    return false;\n  }\n}", "    return ($x ==\
    \ $n*$n*$n);\n}", "    if($x % $n == 0) {\n        return is_simple_power($x /\
    \ $n, $n);\n    } elseif($x == 1) {\n        return true;\n    } else {\n    \
    \    return false;\n    }\n}", "  if ($x == 1) return true;\n  return (log($x,\
    \ $n) == round(log($x, $n))) ? true : false;\n}", "  $res = log($x, $n);\n  if\
    \ (is_int($res)) {\n    return true;\n  } else {\n    return false;\n  }\n}\n",
  "    $int = 1;\n    while ($int < PHP_INT_MAX) {\n        if ($x == pow($n, $int))\
    \ {\n            return true;\n        }\n        $int++;\n    }\n    return false;\n\
    }", "    $number = 1;\n    while ($number * $n <= $x) {\n        if ($number *\
    \ $n == $x) {\n            return true;\n        }\n        $number = $number\
    \ * $n;\n    }\n    return false;\n}\n", "  $x = log($x, $n);\n  if (is_int($x))\
    \ {\n    return true;\n  } else {\n    return false;\n  }\n}", "  $exp = 0;\n\
    \  while (pow($n, $exp) < $x) {\n    $exp++;\n  }\n  if (pow($n, $exp) == $x)\
    \ {\n    return true;\n  } else {\n    return false;\n  }\n}", "  $sq = sqrt($x);\n\
    \  if ($sq * $sq === $x) {\n    $sq = sqrt($sq);\n    if ($sq * $sq === $n) {\n\
    \      return true;\n    }\n  }\n  return false;\n}\n", "  return ($x == pow($n,\
    \ round(log($x, $n)))) ? true : false;\n}", "  if($x == $n){\n    return true;\n\
    \  }\n  elseif($x == 1){\n    return true;\n  }\n  elseif($x%$n==0){\n    return\
    \ is_simple_power($x/$n, $n);\n  }\n  else{\n    return false;\n  }\n}", "   \
    \ return pow($n, intval(log($x, $n))) == $x;\n}", "  $rest = $x;\n  while($rest\
    \ % $n == 0) {\n    $rest /= $n;\n  }\n  return $rest == 1;\n}\n\necho is_simple_power(1,\
    \ 4) ? \"true\" : \"false\";\necho \"\\n\";\necho is_simple_power(2, 2) ? \"true\"\
    \ : \"false\";\necho \"\\n\";\necho is_simple_power(8, 2) ? \"true\" : \"false\"\
    ;\necho \"\\n\";\necho is_simple_power(3, 2) ? \"true\" : \"false\";\necho \"\\\
    n\";\necho is_simple_power(3, 1) ? \"true\" : \"false\";\necho \"\\n\";\necho\
    \ is_simple_power(5, 3) ? \"true\" : \"false\";\necho \"\\n\";", "  if (pow($n,\
    \ 1) == $x) {\n    return true;\n  } elseif (pow($n, 2) == $x) {\n    return true;\n\
    \  } elseif (pow($n, 3) == $x) {\n    return true;\n  } elseif (pow($n, 4) ==\
    \ $x) {\n    return true;\n  } elseif (pow($n, 5) == $x) {\n    return true;\n\
    \  } elseif (pow($n, 6) == $x) {\n    return true;\n  } elseif (pow($n, 7) ==\
    \ $x) {\n    return true;\n  } elseif (pow($n, 8) == $x) {\n    return true;\n\
    \  } elseif (pow($n, 9) == $x) {\n    return true;\n  } elseif (pow($n, 10) ==\
    \ $x) {\n    return true;\n  } else {\n    return false;\n  }\n}", "  return pow($n,\
    \ round(log($x)/log($n))) == $x;\n}", "    if ($x === 0) {\n        return false;\n\
    \    }\n\n    while ($x % $n === 0) {\n        $x /= $n;\n    }\n\n    return\
    \ $x === 1;\n}\n\nvar_dump(is_simple_power(1, 4)); // true\nvar_dump(is_simple_power(2,\
    \ 2)); // true\nvar_dump(is_simple_power(8, 2)); // true\nvar_dump(is_simple_power(3,\
    \ 2)); // false\nvar_dump(is_simple_power(3, 1)); // false\nvar_dump(is_simple_power(5,\
    \ 3)); // false", "    $int = 0;\n    while ($x > 1) {\n        $x /= $n;\n  \
    \      $int++;\n    }\n    return (int)$x === 1;\n}", "  $value = pow($n, (int)\
    \ log($x, $n));\n  return $value == $x;\n}", "    $int = 1;\n    while ($n **\
    \ $int < $x) {\n        $int++;\n    }\n    return $n ** $int == $x;\n}\n\necho\
    \ is_simple_power(4, 2);", "    if (pow($n, $n) === $x) {\n        return true;\n\
    \    } else {\n        return false;\n    }\n}", "  if ($x == 1) return true;\n\
    \  if ($x == 0) return false;\n  $rounded = round(log($x, $n));\n  $power = $n\
    \ ** $rounded;\n  return $power == $x;\n}\n", "    $z = 0;\n    $res = false;\n\
    \    if ($x == 1) {\n        $res = true;\n    } elseif ($x > 1) {\n        for\
    \ ($i = 1; $i <= $x; $i++) {\n            $z = pow($n, $i);\n            if ($z\
    \ == $x) {\n                $res = true;\n                break;\n           \
    \ }\n        }\n    }\n    return $res;\n}", "  $power = round(log($x, $n));\n\
    \  return $power == log($x, $n);\n}", "    return log($x, $n) % 1 == 0;\n}\n",
  "    $num = sqrt($x);\n    return $num == intval($num) && log($x, $n) == intval(log($x,\
    \ $n));\n}", "  if ($x == $n) {\n    return true;\n  }\n  if ($x < $n) {\n   \
    \ return false;\n  }\n  if ($x % $n != 0) {\n    return false;\n  }\n\n  return\
    \ is_simple_power($x / $n, $n);\n}\n\n$tests = [\n  [1, 4],\n  [2, 2],\n  [8,\
    \ 2],\n  [3, 2],\n  [3, 1],\n  [5, 3],\n];\n\nforeach ($tests as $test) {\n  $x\
    \ = $test[0];\n  $n = $test[1];\n  $res = is_simple_power($x, $n);\n  echo \"\
    is_simple_power($x, $n) = $res\\n\";\n}", "  if ($x == $n**(log($x, $n))) {\n\
    \    return 'true';\n  } else {\n    return 'false';\n  }\n}\n\necho is_simple_power(1,\
    \ 4);\necho '<br>';\necho is_simple_power(2, 2);\necho '<br>';\necho is_simple_power(8,\
    \ 2);\necho '<br>';\necho is_simple_power(3, 2);\necho '<br>';\necho is_simple_power(3,\
    \ 1);\necho '<br>';\necho is_simple_power(5, 3);\necho '<br>';", "\tif ($x ==\
    \ 1) {\n\t\treturn true;\n\t}\n\tif ($x == $n) {\n\t\treturn true;\n\t}\n\tif\
    \ ($x == 0) {\n\t\treturn false;\n\t}\n\t$n = $n ** (log($x, $n));\n\tif ($n ==\
    \ $x) {\n\t\treturn true;\n\t}\n\treturn false;\n}", "  if(log($x, $n)%1==0) return\
    \ true;\n  return false;\n}\n ?>", "    $s = log($x, $n);\n    return $s == intval($s);\n\
    }\necho is_simple_power(1, 4).\"\\n\";\necho is_simple_power(2, 2).\"\\n\";\n\
    echo is_simple_power(8, 2).\"\\n\";\necho is_simple_power(3, 2).\"\\n\";\necho\
    \ is_simple_power(3, 1).\"\\n\";\necho is_simple_power(5, 3).\"\\n\";", "  $max_iterations\
    \ = 100;\n  for ($i = 0; $i < $max_iterations; $i++) {\n    if (pow($n, $i) ==\
    \ $x) {\n      return true;\n    }\n  }\n  return false;\n}\n", "  $pow = log($x,\
    \ $n);\n  return ($pow == round($pow));\n}\n", "  return $x ** (1/ log($x, $n))\
    \ % 1 == 0;\n}", "    $int = 1;\n    $res = $n;\n    while($res <= $x) {\n   \
    \     if($res == $x) {\n            return true;\n        }\n        $res *= $n;\n\
    \        $int++;\n    }\n    return false;\n}\n", "  $power = 1;\n  $i = 1;\n\
    \  do {\n    $power = $n ** $i;\n    $i++;\n  } while ($power < $x);\n  if ($power\
    \ == $x) {\n    return true;\n  } else {\n    return false;\n  }\n}\n", "    return\
    \ pow($n, floor(log($x, $n))) == $x;\n}", "    $result = 0;\n    $n_count = 0;\n\
    \    while ($result < $x) {\n        $result = $n**$n_count;\n        $n_count++;\n\
    \    }\n    if ($result == $x) {\n        return true;\n    } else {\n       \
    \ return false;\n    }\n}\necho is_simple_power(1, 4).\"\\n\";\necho is_simple_power(2,\
    \ 2).\"\\n\";\necho is_simple_power(8, 2).\"\\n\";\necho is_simple_power(3, 2).\"\
    \\n\";\necho is_simple_power(3, 1).\"\\n\";\necho is_simple_power(5, 3).\"\\n\"\
    ;", "  $pow = $n ** (int)log($x, $n);\n  return $pow == $x;\n}\n", "    if ($x\
    \ === 1) return true;\n    $i = 2;\n    while ($i < $x) {\n        if ($n ** $i\
    \ === $x) return true;\n        $i++;\n    }\n    return false;\n}\n\necho is_simple_power(2,\
    \ 4) ? 'true' : 'false';\necho '<br>';\necho is_simple_power(2, 2) ? 'true' :\
    \ 'false';\necho '<br>';\necho is_simple_power(8, 2) ? 'true' : 'false';\necho\
    \ '<br>';\necho is_simple_power(3, 2) ? 'true' : 'false';\necho '<br>';\necho\
    \ is_simple_power(3, 1) ? 'true' : 'false';\necho '<br>';\necho is_simple_power(5,\
    \ 3) ? 'true' : 'false';\necho '<br>';\necho is_simple_power(1, 1) ? 'true' :\
    \ 'false';\necho '<br>';\necho is_simple_power(2, 3) ? 'true' : 'false';\necho\
    \ '<br>';\necho is_simple_power(3, 5) ? 'true' : 'false';\necho '<br>';\necho\
    \ is_simple_power(2, 1) ? 'true' : 'false';\necho '<br>';\necho is_simple_power(12,\
    \ 2) ? 'true' : 'false';\necho '<br>';\necho is_simple_power(16, 2) ? 'true' :\
    \ 'false';\necho '<br>';\necho is_simple_power(8, 3) ? 'true' : 'false';\necho\
    \ '<br>';\necho is_simple_power(64, 3) ? 'true' : 'false';\necho '<br>';\necho\
    \ is_simple_power(125, 5) ? 'true' : 'false';\necho '<br>';\necho is_simple_power(24,\
    \ 3) ? 'true' : 'false';\necho '<br>';\necho is_simple_power(81, 4) ? 'true' :\
    \ 'false';\n", "  $x_log = log($x);\n  $n_log = log($n);\n  $result = $x_log /\
    \ $n_log;\n  return is_int($result);\n}", "  return floor(log($x)/log($n)) ==\
    \ log($x)/log($n);\n}", "  $int = (int)log($x, $n);\n  return $n**$int === $x;\n\
    }\n", "    //your code here\n    $power = pow($n, floor(log($x)/log($n)));\n \
    \   return $power == $x;\n}", "  return log($x) / log($n) % 1 == 0;\n}\n", " \
    \ return pow($n, (int)log($x)/log($n)) === $x;\n}", "    return (pow($n,intval(log($x,$n)))\
    \ == $x);\n}", "\t$count = 1;\n\tif ($x == 1 && $n == 1) {\n\t\treturn true;\n\
    \t} elseif ($x != 1 && $n == 1) {\n\t\treturn false;\n\t} elseif ($x == 1 && $n\
    \ != 1) {\n\t\treturn false;\n\t} else {\n\t\t$power = $n * $n;\n\t\twhile ($power\
    \ <= $x) {\n\t\t\tif ($power == $x) {\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\
    \t\t\t$power = $power * $n;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}", "\tif(pow($n,\
    \ log($x, $n)) == $x) {\n\t\treturn true;\n\t}\n\treturn false;\n}", "\t$num =\
    \ 1;\n\twhile($num < $x) {\n\t\t$num *= $n;\n\t}\n\tif($num == $x) {\n\t\treturn\
    \ true;\n\t}\n\treturn false;\n}", "  if ($x == 1 && $n == 1) return true;\n \
    \ if ($x > 1 && $n > 1) {\n    $p = log($x, $n);\n    return is_int($p);\n  }\n\
    \  return false;\n}", "  $power = $n;\n  while($power <= $x) {\n    if($power\
    \ == $x) {\n      return true;\n    }\n    $power *= $n;\n  }\n  return false;\n\
    }", "  if($x == 1) {\n    return true;\n  }\n  $pow = $n;\n  while($pow < $x)\
    \ {\n    $pow *= $n;\n  }\n  return $pow == $x;\n}\necho is_simple_power(1, 4)\
    \ . \"\\n\";\necho is_simple_power(2, 2) . \"\\n\";\necho is_simple_power(8, 2)\
    \ . \"\\n\";\necho is_simple_power(3, 2) . \"\\n\";\necho is_simple_power(3, 1)\
    \ . \"\\n\";\necho is_simple_power(5, 3) . \"\\n\";", "  $power = 1;\n  while\
    \ ($power < $x) {\n    $power *= $n;\n  }\n  return $power == $x;\n}\n", "   \
    \ if (1 == $x) {\n        return false;\n    }\n    for ($i = 1; $i <= $x; $i++)\
    \ {\n        if (pow($n, $i) == $x) {\n            return true;\n        }\n \
    \   }\n    return false;\n}", "  if ($x < 0 || $n < 0) {\n    return false;\n\
    \  }\n  if ($x == 1) {\n    return true;\n  }\n  if ($n == 1) {\n    return false;\n\
    \  }\n  if ($x == $n) {\n    return true;\n  }\n  $a = 1;\n  $b = $n;\n  if ($x\
    \ > $n) {\n    while ($b * $n <= $x) {\n      $b *= $n;\n      if ($b == $x) {\n\
    \        return true;\n      }\n    }\n  }\n  if ($x < $n) {\n    while ($b *\
    \ $n > $x) {\n      $a *= $n;\n      if ($a == $x) {\n        return true;\n \
    \     }\n    }\n  }\n  return false;\n}", "    // Good luck!\n    $root = pow($x,1/$n);\n\
    \    return ($root == round($root));\n}", "  $result = pow($n, 1);\n  $count =\
    \ 1;\n  $count2 = 0;\n  for ($i=0; $i < 100; $i++) {\n    $result = pow($n, $count);\n\
    \    if ($result === $x) {\n      return true;\n    } elseif ($result < $x) {\n\
    \      $count2 = $count2 + 1;\n      $count = $count + 1;\n    } elseif ($result\
    \ > $x) {\n      if ($count2 > 0) {\n        return false;\n      } else {\n \
    \       return false;\n      }\n    }\n  }\n}\necho is_simple_power(1, 4);\necho\
    \ is_simple_power(2, 2);\necho is_simple_power(8, 2);\necho is_simple_power(3,\
    \ 2);\necho is_simple_power(3, 1);\necho is_simple_power(5, 3);", "    $simple_power\
    \ = true;\n    if($x <= 1) {\n        $simple_power = false;\n    }\n\n    $power\
    \ = 1;\n    while($x > $power) {\n        $power *= $n;\n    }\n\n    if($x !==\
    \ $power) {\n        $simple_power = false;\n    }\n\n    return $simple_power;\n\
    }", "    $i = 1;\n    $power = pow($n, $i);\n    while ($power <= $x) {\n    \
    \    if ($power == $x) {\n            return true;\n        }\n        $i++;\n\
    \        $power = pow($n, $i);\n    }\n    return false;\n}\n\nvar_dump(is_simple_power(1,\
    \ 4));\nvar_dump(is_simple_power(2, 2));\nvar_dump(is_simple_power(8, 2));\nvar_dump(is_simple_power(3,\
    \ 2));\nvar_dump(is_simple_power(3, 1));\nvar_dump(is_simple_power(5, 3));", " \
    \   return pow($n,intval(log($x,$n))) == $x;\n}", "  if ($x <= 0 || $n <= 0 ||\
    \ $x == $n) {\n    return false;\n  }\n  while ($x >= $n) {\n    if ($x == $n)\
    \ {\n      return true;\n    }\n    if ($x % $n != 0) {\n      return false;\n\
    \    }\n    $x /= $n;\n  }\n  return false;\n}\n", "  $i = 0;\n  $result = 0;\n\
    \  $i = $x / $n;\n  // if ($i == intval($i)) {\n  //   $result = TRUE;\n  // }\
    \ else {\n  //   $result = FALSE;\n  // }\n  // return $result;\n  return $i ==\
    \ intval($i);\n}\n\necho is_simple_power(8, 2);\n", "  if ($x < 0 || $n < 0) {\n\
    \    return false;\n  }\n  $exponent = array_search($x, array_map(function($a)\
    \ use ($n) { return pow($n, $a); }, range(0, $x)));\n  if ($exponent == '') {\n\
    \    return false;\n  }\n  return true;\n}\necho is_simple_power(1, 4).\"\\n\"\
    ;\necho is_simple_power(2, 2).\"\\n\";\necho is_simple_power(8, 2).\"\\n\";\n\
    echo is_simple_power(3, 2).\"\\n\";\necho is_simple_power(3, 1).\"\\n\";\necho\
    \ is_simple_power(5, 3).\"\\n\";", "  if(pow($n, intval(log($x, $n))) == $x) {\n\
    \    return true;\n  }\n  return false;\n}\necho is_simple_power(4, 2);", "  \
    \  return pow($n, round(log($x, $n))) == $x;\n}", "  return (sqrt($x) % 1 == 0)\
    \ && ($x % $n == 0);\n}\n", "    $pow = log($x, $n);\n    return floor($pow) ==\
    \ $pow;\n}\n", "    if ($x == 1) {\n        return true;\n    }\n    if ($x ==\
    \ 0) {\n        return false;\n    }\n    for ($i = 1; $i <= $x; $i++) {\n   \
    \     if ($n ** $i == $x) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\n\nprint_r(is_simple_power(1, 4));\necho \"<br>\";\nprint_r(is_simple_power(2,\
    \ 2));\necho \"<br>\";\nprint_r(is_simple_power(8, 2));\necho \"<br>\";\nprint_r(is_simple_power(3,\
    \ 2));\necho \"<br>\";\nprint_r(is_simple_power(3, 1));\necho \"<br>\";\nprint_r(is_simple_power(5,\
    \ 3));\necho \"<br>\";\nprint_r(is_simple_power(0, 0));\necho \"<br>\";\nprint_r(is_simple_power(1,\
    \ 1));\necho \"<br>\";\nprint_r(is_simple_power(0, 1));\necho \"<br>\";\nprint_r(is_simple_power(1,\
    \ 0));\necho \"<br>\";\nprint_r(is_simple_power(0, 0));\necho \"<br>\";\nprint_r(is_simple_power(27,\
    \ 3));\necho \"<br>\";\nprint_r(is_simple_power(81, 9));\necho \"<br>\";\nprint_r(is_simple_power(1,\
    \ 1));\necho \"<br>\";\nprint_r(is_simple_power(10, 2));\necho \"<br>\";\nprint_r(is_simple_power(0,\
    \ 0));\necho \"<br>\";\nprint_r(is_simple_power(0, 0));\necho \"<br>\";\nprint_r(is_simple_power(0,\
    \ 0));\necho \"<br>\";\nprint_r(is_simple_power(0, 0));\necho \"<br>\";\nprint_r(is_simple_power(0,\
    \ 0));\necho \"<br>\";\nprint_r(is_simple", "  return log($x, $n) == (int)log($x,\
    \ $n);\n}", "  $power = round(log($x) / log($n));\n  return ($n ** $power) ==\
    \ $x;\n}\n", "    $pow = round(log($x) / log($n));\n    return pow($n, $pow) ==\
    \ $x;\n}\n", "    if ($x == 1) {\n        return true;\n    }\n    if (intval(pow($x,\
    \ 1 / $n)) ** $n == $x) {\n        return true;\n    }\n    return false;\n}",
  "  return (log($x, $n) == floor(log($x, $n))) ? true : false;\n}", "\t// x is a\
    \ simple power of n if n**int=x\n\t// $n should not be 0\n\t// n should not be\
    \ -1\n\t// x should not be 0\n\tif ($n == 0 || $n == -1 || $x == 0) return false;\n\
    \tif ($n == 1) return true;\n\tif ($n == -1) return false;\n\tif ($x == 1) return\
    \ true;\n\t$power = 1;\n\tif ($n > 0) {\n\t\twhile (bcpow($n, $power) <= $x) {\n\
    \t\t\tif (bcpow($n, $power) == $x) return true;\n\t\t\t$power++;\n\t\t}\n\t} else\
    \ {\n\t\twhile (bcpow($n, $power) >= $x) {\n\t\t\tif (bcpow($n, $power) == $x)\
    \ return true;\n\t\t\t$power++;\n\t\t}\n\t}\n\treturn false;\n}\n", "    $root\
    \ = pow($x, (1 / $n));\n    if ($root == round($root, 0)) {\n        return true;\n\
    \    } else {\n        return false;\n    }\n}", "    if($x < 0 || $n < 0) return\
    \ false;\n    if($x == 0) return true;\n    if($n == 0) return false;\n    for($i\
    \ = 1; $i <= $x; $i++) {\n        if(pow($n, $i) == $x) return true;\n    }\n\
    \    return false;\n}", "  return pow($n, round(log($x, $n))) == $x;\n}"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
