name: HumanEval_76_is_simple_power
language: php
prompt: "<?php\n// Your task is to write a function that returns true if a number\
  \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
  \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
  \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
  \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>>\
  \ is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n"
tests: "function candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
  \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test\
  \ failed!\"); }\n}\n\ntest();"
completions: ["    $isPow = is_int(log($x, $n));\n    return $isPow;\n}", "  if($x\
    \ === 1) {\n    return true;\n  }\n  $divisor = $n;\n  while($divisor < $x) {\n\
    \    $divisor *= $n;\n  }\n  return $divisor === $x;\n}", "  $result = false;\n\
    \  // If the given base is 1, then the given number must be 1 too.\n  if ($n ===\
    \ 1) {\n    $result = $x === 1;\n  } else {\n    $root = pow($x, 1 / $n);\n  \
    \  $result = $root === round($root);\n  }\n  return $result;\n}\n", "    if (pow($n,\
    \ intval(log($x, $n))) == $x) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}", "  return pow($n, intval(log($x, $n))) == $x;\n}", "  if($x==$n)\
    \ return true;\n  if($x%$n!=0) return false;\n  return is_simple_power($x/$n,\
    \ $n);\n}", "  if (pow($n, (int)log($x, $n)) == $x) {\n    return true;\n  } else\
    \ {\n    return false;\n  }\n}", "  $result = pow($n, intval(log($x)/log($n)));\n\
    \  if ($result == $x) {\n    return true;\n  } else {\n    return false;\n  }\n\
    }\n\necho is_simple_power(3, 2);", "    // your code here\n}", "    $power = log($x,\
    \ $n);\n    return $power == floor($power);\n}\necho is_simple_power(1, 4).\"\\\
    n\";\necho is_simple_power(2, 2).\"\\n\";\necho is_simple_power(8, 2).\"\\n\"\
    ;\necho is_simple_power(3, 2).\"\\n\";\necho is_simple_power(3, 1).\"\\n\";\n\
    echo is_simple_power(5, 3).\"\\n\";", "  $result = pow($n, round(log($x)/log($n)));\n\
    \  return ($result == $x);\n}\n\necho is_simple_power(1, 4) . \"<br>\";\necho\
    \ is_simple_power(2, 2) . \"<br>\";\necho is_simple_power(8, 2) . \"<br>\";\n\
    echo is_simple_power(3, 2) . \"<br>\";\necho is_simple_power(3, 1) . \"<br>\"\
    ;\necho is_simple_power(5, 3) . \"<br>\";\n", "  return pow($n,floor(log($x)/log($n)))\
    \ == $x;\n}\n ?>", "  if ($x == 1 && $n != 1) {\n    return false;\n  } elseif\
    \ ($x == 1 && $n == 1) {\n    return true;\n  } elseif ($x == 0) {\n    return\
    \ false;\n  }\n  for ($i = 2; $i <= $x; $i++) {\n    if ($x == pow($n, $i)) {\n\
    \      return true;\n    }\n  }\n  return false;\n}", "  // Your code here\n \
    \ $test = pow($n, (int)log($x, $n));\n  if ($test == $x) {\n    return true;\n\
    \  } else {\n    return false;\n  }\n}", "  if ($x == 1 && $n == 1) {\n    return\
    \ true;\n  } elseif ($x <= 0 || $n <= 0) {\n    return false;\n  }\n  $n_power\
    \ = $n;\n  while ($n_power < $x) {\n    $n_power *= $n;\n  }\n  return $n_power\
    \ == $x;\n}\n\necho \"1, 4\\n\";\necho is_simple_power(1, 4) ? \"true\\n\" : \"\
    false\\n\";\necho \"2, 2\\n\";\necho is_simple_power(2, 2) ? \"true\\n\" : \"\
    false\\n\";\necho \"8, 2\\n\";\necho is_simple_power(8, 2) ? \"true\\n\" : \"\
    false\\n\";\necho \"3, 2\\n\";\necho is_simple_power(3, 2) ? \"true\\n\" : \"\
    false\\n\";\necho \"3, 1\\n\";\necho is_simple_power(3, 1) ? \"true\\n\" : \"\
    false\\n\";\necho \"5, 3\\n\";\necho is_simple_power(5, 3) ? \"true\\n\" : \"\
    false\\n\";\necho \"0, 0\\n\";\necho is_simple_power(0, 0) ? \"true\\n\" : \"\
    false\\n\";\necho \"10, 2\\n\";\necho is_simple_power(10, 2) ? \"true\\n\" : \"\
    false\\n\";\necho \"100, 2\\n\";\necho is_simple_power(100, 2) ? \"true\\n\" :\
    \ \"false\\n\";\necho \"1, 1\\n\";\necho is_simple_power(1, 1) ? \"true\\n\" :\
    \ \"false\\n\";", "  return log($x, $n) % 1 == 0;\n}\n", "    $xx = log($x) /\
    \ log($n);\n    return ($xx == floor($xx));\n}\n\n$answer = is_simple_power(3,\
    \ 2);\nvar_dump($answer);", "    return pow($n, intval(log($x) / log($n))) ==\
    \ $x;\n}", "  $pow = pow($n, round(log($x, $n)));\n  return ($pow === $x) ? true\
    \ : false;\n}\necho is_simple_power(1, 4) . \"<br>\";\necho is_simple_power(2,\
    \ 2) . \"<br>\";\necho is_simple_power(8, 2) . \"<br>\";\necho is_simple_power(3,\
    \ 2) . \"<br>\";\necho is_simple_power(3, 1) . \"<br>\";\necho is_simple_power(5,\
    \ 3) . \"<br>\";", "  if($x == 1){\n    return true;\n  }\n  $power = 1;\n  while($power\
    \ <= $x){\n    if($power == $x){\n      return true;\n    }\n    $power *= $n;\n\
    \  }\n  return false;\n}"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
