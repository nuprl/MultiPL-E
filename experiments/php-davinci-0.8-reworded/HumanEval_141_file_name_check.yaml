name: HumanEval_141_file_name_check
language: php
prompt: "<?php\n// Create a function which takes a string representing a file's name,\
  \ and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
  // A file's name is considered to be valid if and only if all the following conditions\
  \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in the\
  \ file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring\
  \ before the dot should not be empty, and it starts with a letter from \n// the\
  \ latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should\
  \ be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
  example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\n\
  function file_name_check($file_name) {\n"
tests: "function candidate(...$args) {\n    return file_name_check(...$args);\n}\n\
  \nfunction test(): void {\n    if (candidate(\"example.txt\") !== \"Yes\") { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(\"1example.dll\") !== \"\
  No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"s1sdf3.asd\"\
  ) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K.dll\"\
  ) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
  MY16FILE3.exe\") !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(\"His12FILE94.exe\") !== \"No\") { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(\"_Y.txt\") !== \"No\") { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(\"?aREYA.exe\") !== \"No\") { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(\"/this_is_valid.dll\") !== \"No\") { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(\"this_is_valid.wow\") !== \"\
  No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"this_is_valid.txt\"\
  ) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
  this_is_valid.txtexe\") !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(\"#this2_i4s_5valid.ten\") !== \"No\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"@this1_is6_valid.exe\") !== \"No\") { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(\"this_is_12valid.6exe4.txt\"\
  ) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"all.exe.txt\"\
  ) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I563_No.exe\"\
  ) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
  Is3youfault.txt\") !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n   \
  \ if (candidate(\"no_one#knows.dll\") !== \"Yes\") { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(\"1I563_Yes3.exe\") !== \"No\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"I563_Yes3.txtt\") !== \"No\") { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(\"final..txt\") !== \"No\")\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"final132\") !==\
  \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_f4indsartal132.\"\
  ) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".txt\"\
  ) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"s.\"\
  ) !== \"No\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["  $length = strlen($file_name);\n  if ($length < 6) {\n    return \"\
    No\";\n  }\n  $dot_index = strpos($file_name, \".\");\n  if ($dot_index === FALSE)\
    \ {\n    return \"No\";\n  }\n  $name = substr($file_name, 0, $dot_index);\n \
    \ $ext = substr($file_name, $dot_index + 1);\n  if ($dot_index < 1 || !ctype_alpha($name[0]))\
    \ {\n    return \"No\";\n  }\n  if (!preg_match(\"/[A-Za-z]/\", $name)) {\n  \
    \  return \"No\";\n  }\n  if (substr_count($name, \"0\") + substr_count($name,\
    \ \"1\") + substr_count($name, \"2\") + substr_count($name, \"3\") + substr_count($name,\
    \ \"4\") + substr_count($name, \"5\") + substr_count($name, \"6\") + substr_count($name,\
    \ \"7\") + substr_count($name, \"8\") + substr_count($name, \"9\") > 3) {\n  \
    \  return \"No\";\n  }\n  if ($ext !== \"txt\" && $ext !== \"exe\" && $ext !==\
    \ \"dll\") {\n    return \"No\";\n  }\n  return \"Yes\";\n}", "    $arr = explode('.',\
    \ $file_name);\n    if (count($arr) > 2) return 'No';\n    $is_valid = preg_match('/^[a-zA-Z][a-zA-Z0-9]*$/',\
    \ $arr[0]);\n    if (!$is_valid) return 'No';\n    $is_valid = preg_match('/^[0-9]{0,3}$/',\
    \ $arr[0]);\n    if ($is_valid) return 'No';\n    if (!in_array($arr[1], ['txt',\
    \ 'exe', 'dll'])) return 'No';\n    return 'Yes';\n}", "    if (count(explode('.',\
    \ $file_name)) != 2) {\n        return 'No';\n    }\n    $file_name_without_ext\
    \ = explode('.', $file_name)[0];\n    $ext = explode('.', $file_name)[1];\n  \
    \  if (strlen($file_name_without_ext) < 1 || $file_name_without_ext[0] < 'A' ||\
    \ $file_name_without_ext[0] > 'z') {\n        return 'No';\n    }\n    if (!in_array($ext,\
    \ ['txt', 'exe', 'dll'])) {\n        return 'No';\n    }\n    if (preg_match_all('/[0-9]/',\
    \ $file_name_without_ext) > 3) {\n        return 'No';\n    }\n    return 'Yes';\n\
    }\necho file_name_check(\"example.txt\") . \"\\n\";\necho file_name_check(\"1example.dll\"\
    ) . \"\\n\";\necho file_name_check(\"leetcode.exe\") . \"\\n\";\necho file_name_check(\"\
    leetcode.1.exe\") . \"\\n\";\necho file_name_check(\"abc..txt\") . \"\\n\";\n\
    echo file_name_check(\"abc.txt\") . \"\\n\";\necho file_name_check(\"abc.txt.exe\"\
    ) . \"\\n\";\necho file_name_check(\"a.txt\") . \"\\n\";\necho file_name_check(\"\
    a.dll\") . \"\\n\";\necho file_name_check(\"aaa.txt\") . \"\\n\";\necho file_name_check(\"\
    example.txt\") . \"\\n\";\necho file_name_check(\"example.exe\") . \"\\n\";\n\
    echo file_name_check(\"example.dll\") . \"\\n\";\necho file_name_check(\"example1.txt\"\
    ) . \"\\n\";\necho file_name_check(\"example1.exe\") . \"\\n\";\necho file_name_check(\"\
    example1.dll\") . \"\\n\";\necho file_name_check(\"example10.txt\") . \"\\n\"\
    ;\necho file_name_check(\"example10.exe\") . \"\\n\";\necho file_name", "\t$last_dot_position\
    \ = strrpos($file_name, '.');\n\t$dot_count = substr_count($file_name, '.');\n\
    \t$first_part = substr($file_name, 0, $last_dot_position);\n\t$last_part = substr($file_name,\
    \ $last_dot_position + 1);\n\t$digit_count = preg_match_all('/[0-9]/', $file_name);\n\
    \t$first_part_is_valid = (preg_match('/^[a-zA-Z]+$/', $first_part) === 1);\n\t\
    $is_valid_extension = in_array($last_part, ['txt', 'exe', 'dll']);\n\treturn $first_part_is_valid\
    \ && $dot_count === 1 && $digit_count <= 3 && $is_valid_extension ? \"Yes\" :\
    \ \"No\";\n}\necho file_name_check(\"example.txt\") . \"\\n\";\necho file_name_check(\"\
    1example.dll\") . \"\\n\";", "\n}\n", "    if(check($file_name) == true) {\n \
    \       return \"Yes\";\n    }\n    else {\n        return \"No\";\n    }\n}\n",
  "    $dot_position = strpos($file_name, '.');\n    $extension = substr($file_name,\
    \ $dot_position + 1);\n    $extensions = ['txt', 'exe', 'dll'];\n    if(strlen($file_name)\
    \ == $dot_position) {\n        return 'No';\n    }\n    if(!in_array($extension,\
    \ $extensions)) {\n        return 'No';\n    }\n    if(!preg_match('/^[a-zA-Z][a-zA-Z0-9]*$/',\
    \ substr($file_name, 0, $dot_position))) {\n        return 'No';\n    }\n    $digits\
    \ = str_split($file_name);\n    $digit_count = 0;\n    foreach($digits as $digit)\
    \ {\n        if(is_numeric($digit)) {\n            $digit_count++;\n        }\n\
    \    }\n    if($digit_count > 3) {\n        return 'No';\n    }\n    return 'Yes';\n\
    }\n\n$file_name = 'example.txt';\necho file_name_check($file_name);", "    $dot_position\
    \ = strpos($file_name, '.');\n    $substr_before_dot = substr($file_name, 0, $dot_position);\n\
    \    $substr_after_dot = substr($file_name, $dot_position + 1);\n    $count_of_digits\
    \ = 0;\n    for ($i = 0; $i < strlen($substr_before_dot); $i++) {\n        if\
    \ (ctype_digit($substr_before_dot[$i])) {\n            $count_of_digits++;\n \
    \       }\n    }\n    if ($count_of_digits > 3) {\n        return \"No\";\n  \
    \  }\n    $is_letter = ctype_alpha($substr_before_dot[0]);\n    if (!$is_letter)\
    \ {\n        return \"No\";\n    }\n    $available_extensions = ['txt', 'exe',\
    \ 'dll'];\n    if (!in_array($substr_after_dot, $available_extensions)) {\n  \
    \      return \"No\";\n    }\n    return \"Yes\";\n}", "    if (empty($file_name))\
    \ {\n        return \"No\";\n    }\n    $file_info = explode(\".\", $file_name);\n\
    \    if (count($file_info) !== 2) {\n        return \"No\";\n    }\n    $file_name\
    \ = $file_info[0];\n    $file_ext = $file_info[1];\n    $valid_ext = ['txt', 'exe',\
    \ 'dll'];\n    if (!in_array($file_ext, $valid_ext)) {\n        return \"No\"\
    ;\n    }\n    if (empty($file_name)) {\n        return \"No\";\n    }\n    if\
    \ (!preg_match(\"/^[a-zA-Z]/\", $file_name)) {\n        return \"No\";\n    }\n\
    \    if (preg_match(\"/[0-9]{4,}/\", $file_name)) {\n        return \"No\";\n\
    \    }\n    return \"Yes\";\n}\n", "\t$result = \"No\";\n\tif (preg_match('/^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .[a-zA-Z]{3}$/', $file_name)) {\n\t\tif (substr($file_name, strpos($file_name,\
    \ \".\") + 1) == \"txt\" ||\n\t\t\tsubstr($file_name, strpos($file_name, \".\"\
    ) + 1) == \"exe\" ||\n\t\t\tsubstr($file_name, strpos($file_name, \".\") + 1)\
    \ == \"dll\") {\n\t\t\t$result = \"Yes\";\n\t\t}\n\t}\n\treturn $result;\n}\n\n\
    echo file_name_check(\"example.txt\") . \"\\n\";\necho file_name_check(\"1example.dll\"\
    ) . \"\\n\";\necho file_name_check(\"example.txt.exe\") . \"\\n\";\necho file_name_check(\"\
    example.txt.3\") . \"\\n\";", "    $flag = 0;\n    $count = 0;\n    $alphabet\
    \ = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\
    \ 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E',\
    \ 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U',\
    \ 'V', 'W', 'X', 'Y', 'Z'];\n    $num_digits = ['0', '1', '2', '3', '4', '5',\
    \ '6', '7', '8', '9'];\n    $extensions = ['txt', 'exe', 'dll'];\n    // check\
    \ if there is any element in the file_name that is not alphanumeric\n    for ($i\
    \ = 0; $i < strlen($file_name); $i++) {\n        if (!in_array($file_name[$i],\
    \ $alphabet) && !in_array($file_name[$i], $num_digits) && $file_name[$i] != '.')\
    \ {\n            return \"No\";\n        }\n    }\n    // check if the file name\
    \ doesn't contain more than three digits\n    for ($i = 0; $i < strlen($file_name);\
    \ $i++) {\n        if (in_array($file_name[$i], $num_digits)) {\n            $count++;\n\
    \        }\n    }\n    if ($count > 3) {\n        return \"No\";\n    }\n    //\
    \ check if there is exactly one dot\n    for ($i = 0; $i < strlen($file_name);\
    \ $i++) {\n        if ($file_name[$i] == '.') {\n            $flag++;\n      \
    \  }\n    }\n    if ($flag != 1) {\n        return \"No\";\n    }\n    // check\
    \ if the substring before", "    if(preg_match('/^[a-zA-Z]\\w*\\.(txt|exe|dll)$/',\
    \ $file_name))\n        return \"Yes\";\n    else\n        return \"No\";\n}\n\
    print_r(file_name_check(\"example.txt\"));\necho '<br/>';\nprint_r(file_name_check(\"\
    1example.dll\"));\necho '<br/>';\n", "    if(preg_match(\"/[0-9]{4,}/\", $file_name))\
    \ return \"No\";\n    if(preg_match(\"/^[a-zA-Z]\\w*\\.[txt|exe|dll]$/\", $file_name))\
    \ return \"Yes\";\n    return \"No\";\n}\n", "    $file_name_split = explode('.',\
    \ $file_name);\n    if (count($file_name_split) > 2) return 'No';\n    if (count($file_name_split)\
    \ == 1) return 'No';\n    $left_part = $file_name_split[0];\n    $right_part =\
    \ $file_name_split[1];\n    if (count(str_split($left_part)) < 1) return 'No';\n\
    \    if (!preg_match('/^[A-Za-z]{1}/', $left_part)) return 'No';\n    if (!in_array($right_part,\
    \ ['txt', 'exe', 'dll'])) return 'No';\n    if (preg_match('/\\d{4,}/', $left_part))\
    \ return 'No';\n    return 'Yes';\n}", "    \n    $file_name_parts = explode(\"\
    .\", $file_name);\n    $match_count = preg_match_all(\"/[0-9]/\", $file_name);\n\
    \    if (count($file_name_parts) != 2 || $match_count > 3 || empty($file_name_parts[0])\
    \ || \n        !preg_match(\"/^[a-zA-Z]/\", $file_name_parts[0]) || \n       \
    \ !preg_match(\"/^(txt|exe|dll)$/\", $file_name_parts[1])) {\n        return \"\
    No\";\n    }\n    return \"Yes\";\n}\n", "    $check1 = array('0', '1', '2', '3',\
    \ '4', '5', '6', '7', '8', '9');\n    $number_count = 0;\n    for ($i = 0; $i\
    \ < strlen($file_name); $i++) {\n        if (in_array($file_name[$i], $check1))\
    \ {\n            $number_count++;\n        }\n    }\n    if ($number_count > 3)\
    \ {\n        return \"No\";\n    }\n    if (!preg_match('/[a-zA-Z]\\./', $file_name))\
    \ {\n        return \"No\";\n    }\n    if (substr_count($file_name, '.') != 1)\
    \ {\n        return \"No\";\n    }\n    $check2 = array('txt', 'exe', 'dll');\n\
    \    $ext = explode('.', $file_name);\n    if (!in_array($ext[1], $check2)) {\n\
    \        return \"No\";\n    }\n    return \"Yes\";\n}\necho file_name_check(\"\
    example.txt\") . \"<br>\";\necho file_name_check(\"1example.dll\") . \"<br>\"\
    ;\necho file_name_check(\"example.dll\") . \"<br>\";\necho file_name_check(\"\
    a.txt\") . \"<br>\";\necho file_name_check(\"a.exe\") . \"<br>\";\necho file_name_check(\"\
    a.dll\") . \"<br>\";\necho file_name_check(\"1a.txt\") . \"<br>\";\necho file_name_check(\"\
    1a.exe\") . \"<br>\";\necho file_name_check(\"1a.dll\") . \"<br>\";\necho file_name_check(\"\
    2a.txt\") . \"<br>\";\necho file_name_check(\"2a.exe\") . \"<br>\";\necho file_name_check(\"\
    2a.dll\") . \"<br>\";\necho file_name_check(\"3a.txt\") . \"<br>\";\necho file_name_check(\"\
    3a.exe\") . \"<br>\";\necho file_name_check(\"3a.dll\") . \"<", "    // Your code\
    \ goes here.\n    $len = strlen($file_name);\n    $dot = strpos($file_name, '.');\n\
    \    $exp = explode('.', $file_name);\n    $arr = ['txt', 'exe', 'dll'];\n   \
    \ $str = '';\n    for ($i = 0; $i < $len; $i++) {\n        if ($file_name[$i]\
    \ >= '0' && $file_name[$i] <= '9') {\n            $str .= $file_name[$i];\n  \
    \      }\n    }\n    if (strlen($str) > 3) {\n        return 'No';\n    }\n  \
    \  if ($dot == false) {\n        return 'No';\n    }\n    if ($exp[0] == '') {\n\
    \        return 'No';\n    }\n    if ($exp[0][0] < 'a' || $exp[0][0] > 'z' &&\
    \ $exp[0][0] < 'A' || $exp[0][0] > 'Z') {\n        return 'No';\n    }\n    if\
    \ (!in_array($exp[1], $arr)) {\n        return 'No';\n    }\n    return 'Yes';\n\
    }", "\tif (count(explode('.', $file_name)) === 2) {\n\t\t$array = explode('.',\
    \ $file_name);\n\t\tif (count(explode('txt', $array[1])) === 2 \n\t\t\t|| count(explode('exe',\
    \ $array[1])) === 2 \n\t\t\t|| count(explode('dll', $array[1])) === 2) {\n\t\t\
    \t\treturn 'Yes';\n\t\t}\n\t}\n\treturn 'No';\n}\n\necho file_name_check(\"example.txt\"\
    ) . \"\\n\"; // \"Yes\"\necho file_name_check(\"1example.dll\") . \"\\n\"; //\
    \ \"No\"\necho file_name_check(\"123.123\") . \"\\n\"; // \"No\"\necho file_name_check(\"\
    example.exe\") . \"\\n\"; // \"Yes\"\necho file_name_check(\"example.txtt\") .\
    \ \"\\n\"; // \"No\"\necho file_name_check(\"example123.txt\") . \"\\n\"; // \"\
    Yes\"\necho file_name_check(\"example12.txt\") . \"\\n\"; // \"Yes\"\necho file_name_check(\"\
    example.dll\") . \"\\n\"; // \"Yes\"\necho file_name_check(\"example.dlll\") .\
    \ \"\\n\"; // \"No\"\necho file_name_check(\"example123.dll\") . \"\\n\"; // \"\
    No\"\necho file_name_check(\"example12.dll\") . \"\\n\"; // \"No\"\necho file_name_check(\"\
    example.exee\") . \"\\n\"; // \"No\"\necho file_name_check(\"example123.exe\"\
    ) . \"\\n\"; // \"No\"\necho file_name_check(\"example12.exe\") . \"\\n\"; //\
    \ \"No\"", "\t$extension = substr($file_name, strrpos($file_name, '.') + 1);\n\
    \t$file_name = str_replace(\".\" . $extension, \"\", $file_name);\n\t$length =\
    \ strlen($file_name);\n\tif (!preg_match(\"/^[a-zA-Z]+$/\", $file_name[0])) {\n\
    \t\treturn \"No\";\n\t}\n\t$count = 0;\n\tfor ($i = 0; $i < $length; $i++) {\n\
    \t\tif (is_numeric($file_name[$i])) {\n\t\t\t$count++;\n\t\t}\n\t}\n\tif ($count\
    \ > 3) {\n\t\treturn \"No\";\n\t}\n\tif ($extension == \"txt\" || $extension ==\
    \ \"exe\" || $extension == \"dll\") {\n\t\treturn \"Yes\";\n\t}\n\treturn \"No\"\
    ;\n}", "    $file_name_arr = explode('.', $file_name);\n    if (sizeof($file_name_arr)\
    \ != 2) {\n        return \"No\";\n    }\n    $file_name_arr[0] = str_split($file_name_arr[0]);\n\
    \    $file_name_arr[1] = str_split($file_name_arr[1]);\n    $is_valid = true;\n\
    \    $digit_count = 0;\n    for ($i = 0; $i < sizeof($file_name_arr[0]); $i++)\
    \ {\n        if (ord($file_name_arr[0][$i]) < ord('a') || ord($file_name_arr[0][$i])\
    \ > ord('z')) {\n            if (ord($file_name_arr[0][$i]) < ord('A') || ord($file_name_arr[0][$i])\
    \ > ord('Z')) {\n                if (ord($file_name_arr[0][$i]) < ord('0') ||\
    \ ord($file_name_arr[0][$i]) > ord('9')) {\n                    $is_valid = false;\n\
    \                    break;\n                } else {\n                    $digit_count++;\n\
    \                }\n            }\n        }\n    }\n    if ($digit_count > 3)\
    \ {\n        $is_valid = false;\n    }\n    if (!($file_name_arr[1][0] == 't'\
    \ && $file_name_arr[1][1] == 'x' && $file_name_arr[1][2] == 't' ||\n         \
    \   $file_name_arr[1][0] == 'e' && $file_name_arr[1][1] == 'x' && $file_name_arr[1][2]\
    \ == 'e' ||\n            $file_name_arr[1][0] == 'd' && $file_name_arr[1][1] ==\
    \ 'l' && $file_name_arr[1][2] == 'l')) {\n        $is_valid = false;\n    }\n\
    \    if ($is_valid) {\n        return \"Yes\";\n    } else {\n        return"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
