name: HumanEval_43_pairs_sum_to_zero
language: php
prompt: "<?php\n// pairs_sum_to_zero takes an array of integers as an input.\n// it\
  \ returns true if there are two distinct elements in the array that\n// sum to zero,\
  \ and false otherwise.\n// >>> pairs_sum_to_zero(array(1, 3, 5, 0))\n// false\n\
  // >>> pairs_sum_to_zero(array(1, 3, -2, 1))\n// false\n// >>> pairs_sum_to_zero(array(1,\
  \ 2, 3, 7))\n// false\n// >>> pairs_sum_to_zero(array(2, 4, -5, 3, 5, 7))\n// true\n\
  // >>> pairs_sum_to_zero(array(1))\n// false\nfunction pairs_sum_to_zero($l) {\n"
tests: "function candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false) {\
  \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2, 1))\
  \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
  \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
  \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n \
  \   if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 4, 2, 30))\
  \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
  \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\n\
  test();"
completions: ["\n}\n", "}\n", "    // Your code here.\n    for ($i = 0; $i < count($l);\
    \ $i++) {\n        for ($j = 0; $j < count($l); $j++) {\n            if ($i !=\
    \ $j && $l[$i] + $l[$j] == 0) {\n                return true;\n            }\n\
    \        }\n    }\n    return false;\n}\n", "\tforeach ($l as $i) {\n\t\tforeach\
    \ ($l as $j) {\n\t\t\tif ($i + $j == 0 && $i != $j) {\n\t\t\t\treturn true;\n\t\
    \t\t}\n\t\t}\n\t}\n\treturn false;\n}\n", "\t$map = array();\n\tforeach ($l as\
    \ $item) {\n\t\tif (array_key_exists($item, $map)) {\n\t\t\treturn true;\n\t\t\
    }\n\t\t$map[-1 * $item] = true;\n\t}\n\treturn false;\n}\n", "  // $l is an array\
    \ of integers\n  // replace this line with the correct return value\n  $result\
    \ = false;\n  for ($i = 0; $i < count($l); $i++) {\n    for ($j = $i + 1; $j <\
    \ count($l); $j++) {\n      if ($l[$i] + $l[$j] == 0) {\n        $result = true;\n\
    \      }\n    }\n  }\n  return $result;\n}\n", "    for ($i = 0; $i < count($l);\
    \ $i++) {\n        for ($j = $i + 1; $j < count($l); $j++) {\n            if ($l[$i]\
    \ + $l[$j] == 0) {\n                return true;\n            }\n        }\n \
    \   }\n    return false;\n}\n", "\t$positive = 0;\n\t$negative = 0;\n\tforeach\
    \ ($l as $value) {\n\t\tif ($value > 0) {\n\t\t\t$positive += 1;\n\t\t} elseif\
    \ ($value < 0) {\n\t\t\t$negative += 1;\n\t\t}\n\t}\n\t$comb = ($positive * ($positive\
    \ - 1)) / 2 + ($negative * ($negative - 1)) / 2;\n\treturn (($positive + $negative)\
    \ >= 2) && ($comb % 2 == 0);\n}\n", "\treturn false;\n}\n", "    // COUNTING SORT\n\
    \    // Count the number of occurences of each key.\n    $counts = array();\n\
    \    foreach ($l as $value) {\n        if (!array_key_exists($value, $counts))\
    \ {\n            $counts[$value] = 0;\n        }\n        $counts[$value]++;\n\
    \    }\n    foreach ($counts as $key => $value) {\n        // If the key has a\
    \ negative of itself, return true.\n        $negative_key = -$key;\n        if\
    \ (array_key_exists($negative_key, $counts)) {\n            return true;\n   \
    \     }\n    }\n    return false;\n}", "\tif (count($l) < 2) {\n\t\treturn false;\n\
    \t}\n\t$i = 0;\n\twhile ($i < count($l)) {\n\t\t$j = $i + 1;\n\t\twhile ($j <\
    \ count($l)) {\n\t\t\tif ($l[$i] + $l[$j] == 0) {\n\t\t\t\treturn true;\n\t\t\t\
    }\n\t\t\t$j = $j + 1;\n\t\t}\n\t\t$i = $i + 1;\n\t}\n\treturn false;\n}", "  \
    \  // your code here\n    //your code here\n    if (count($l) <= 1) {\n      \
    \  return false;\n    }\n    foreach ($l as $element) {\n        if (in_array(-1\
    \ * $element, $l)) {\n            return true;\n        }\n    }\n    return false;\n\
    }\n", "    $p = array();\n    $pairs = array();\n    for ($i = 0; $i < count($l);\
    \ $i++) {\n        if (!array_key_exists($l[$i], $p)) {\n            $p[$l[$i]]\
    \ = array();\n        }\n        array_push($p[$l[$i]], $i);\n    }\n    $found\
    \ = false;\n    foreach ($p as $k => $v) {\n        if (array_key_exists(-$k,\
    \ $p)) {\n            if ($k == 0 && count($p[0]) == 1) {\n                continue;\n\
    \            }\n            foreach ($p[$k] as $a) {\n                foreach\
    \ ($p[-$k] as $b) {\n                    if ($a == $b) {\n                   \
    \     continue;\n                    }\n                    $found = true;\n \
    \                   array_push($pairs, array($a, $b));\n                }\n  \
    \          }\n        }\n    }\n    return $pairs;\n}\n\n$array = array(1, 3,\
    \ 5, 0);\n$result = pairs_sum_to_zero($array);\nprint_r($result);\n$array = array(1,\
    \ 3, -2, 1);\n$result = pairs_sum_to_zero($array);\nprint_r($result);\n$array\
    \ = array(1, 2, 3, 7);\n$result = pairs_sum_to_zero($array);\nprint_r($result);\n\
    $array = array(2, 4, -5, 3, 5, 7);\n$result = pairs_sum_to_zero($array);\nprint_r($result);\n\
    $array = array(1);\n$result = pairs_sum_to_zero($array);\nprint_r($result);",
  "  \n  $arr = [];\n  foreach ($l as $k => $v) {\n    if (array_key_exists($v, $arr))\
    \ {\n      return true;\n    }\n    $arr[-$v] = true;\n  }\n  return false;\n\
    }\n", "\tif (count($l) <= 1) {\n\t\treturn false;\n\t}\n\tsort($l);\n\t$i = 0;\n\
    \t$j = count($l) - 1;\n\twhile ($i < $j) {\n\t\t$sum = $l[$i] + $l[$j];\n\t\t\
    if ($sum === 0) {\n\t\t\treturn true;\n\t\t} else if ($sum < 0) {\n\t\t\t$i++;\n\
    \t\t} else {\n\t\t\t$j--;\n\t\t}\n\t}\n\treturn false;\n}\n", "    return false;\n\
    }\n", "    $x = array_filter($l, function($y) { return $y == 0; });\n    if (count($x)\
    \ > 1) {\n        return true;\n    }\n    $a = array_unique($l);\n    sort($a);\n\
    \    for ($i = 0; $i < count($a); $i++) {\n        for ($j = $i + 1; $j < count($a);\
    \ $j++) {\n            if ($a[$i] + $a[$j] == 0) {\n                return true;\n\
    \            }\n        }\n    }\n    return false;\n}", "\t// START\n}\n", " \
    \   if(empty($l)) {\n        return false;\n    }\n    $seen = array();\n    foreach($l\
    \ as $i) {\n        if(isset($seen[-$i])) {\n            return true;\n      \
    \  }\n        $seen[$i] = 1;\n    }\n    return false;\n}", "  foreach ($l as\
    \ $i) {\n    foreach ($l as $j) {\n      if ($i + $j == 0 && $i != $j) {\n   \
    \     return true;\n      }\n    }\n  }\n  return false;\n}"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
