name: HumanEval_43_pairs_sum_to_zero
language: php
prompt: "<?php\n// pairs_sum_to_zero takes an array of integers as an input.\n// it\
  \ returns true if there are two distinct elements in the array that\n// sum to zero,\
  \ and false otherwise.\n// >>> pairs_sum_to_zero(array(1, 3, 5, 0))\n// false\n\
  // >>> pairs_sum_to_zero(array(1, 3, -2, 1))\n// false\n// >>> pairs_sum_to_zero(array(1,\
  \ 2, 3, 7))\n// false\n// >>> pairs_sum_to_zero(array(2, 4, -5, 3, 5, 7))\n// true\n\
  // >>> pairs_sum_to_zero(array(1))\n// false\nfunction pairs_sum_to_zero($l) {\n"
tests: "function candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false) {\
  \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2, 1))\
  \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
  \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
  \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n \
  \   if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 4, 2, 30))\
  \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
  \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\n\
  test();"
completions: ["\n}\n", "}\n", "    // Your code here.\n    for ($i = 0; $i < count($l);\
    \ $i++) {\n        for ($j = 0; $j < count($l); $j++) {\n            if ($i !=\
    \ $j && $l[$i] + $l[$j] == 0) {\n                return true;\n            }\n\
    \        }\n    }\n    return false;\n}\n", "\tforeach ($l as $i) {\n\t\tforeach\
    \ ($l as $j) {\n\t\t\tif ($i + $j == 0 && $i != $j) {\n\t\t\t\treturn true;\n\t\
    \t\t}\n\t\t}\n\t}\n\treturn false;\n}\n", "\t$map = array();\n\tforeach ($l as\
    \ $item) {\n\t\tif (array_key_exists($item, $map)) {\n\t\t\treturn true;\n\t\t\
    }\n\t\t$map[-1 * $item] = true;\n\t}\n\treturn false;\n}\n", "  // $l is an array\
    \ of integers\n  // replace this line with the correct return value\n  $result\
    \ = false;\n  for ($i = 0; $i < count($l); $i++) {\n    for ($j = $i + 1; $j <\
    \ count($l); $j++) {\n      if ($l[$i] + $l[$j] == 0) {\n        $result = true;\n\
    \      }\n    }\n  }\n  return $result;\n}\n", "    for ($i = 0; $i < count($l);\
    \ $i++) {\n        for ($j = $i + 1; $j < count($l); $j++) {\n            if ($l[$i]\
    \ + $l[$j] == 0) {\n                return true;\n            }\n        }\n \
    \   }\n    return false;\n}\n", "\t$positive = 0;\n\t$negative = 0;\n\tforeach\
    \ ($l as $value) {\n\t\tif ($value > 0) {\n\t\t\t$positive += 1;\n\t\t} elseif\
    \ ($value < 0) {\n\t\t\t$negative += 1;\n\t\t}\n\t}\n\t$comb = ($positive * ($positive\
    \ - 1)) / 2 + ($negative * ($negative - 1)) / 2;\n\treturn (($positive + $negative)\
    \ >= 2) && ($comb % 2 == 0);\n}\n", "\treturn false;\n}\n", "    // COUNTING SORT\n\
    \    // Count the number of occurences of each key.\n    $counts = array();\n\
    \    foreach ($l as $value) {\n        if (!array_key_exists($value, $counts))\
    \ {\n            $counts[$value] = 0;\n        }\n        $counts[$value]++;\n\
    \    }\n    foreach ($counts as $key => $value) {\n        // If the key has a\
    \ negative of itself, return true.\n        $negative_key = -$key;\n        if\
    \ (array_key_exists($negative_key, $counts)) {\n            return true;\n   \
    \     }\n    }\n    return false;\n}", "\tif (count($l) < 2) {\n\t\treturn false;\n\
    \t}\n\t$i = 0;\n\twhile ($i < count($l)) {\n\t\t$j = $i + 1;\n\t\twhile ($j <\
    \ count($l)) {\n\t\t\tif ($l[$i] + $l[$j] == 0) {\n\t\t\t\treturn true;\n\t\t\t\
    }\n\t\t\t$j = $j + 1;\n\t\t}\n\t\t$i = $i + 1;\n\t}\n\treturn false;\n}", "  \
    \  // your code here\n    //your code here\n    if (count($l) <= 1) {\n      \
    \  return false;\n    }\n    foreach ($l as $element) {\n        if (in_array(-1\
    \ * $element, $l)) {\n            return true;\n        }\n    }\n    return false;\n\
    }\n", "    $p = array();\n    $pairs = array();\n    for ($i = 0; $i < count($l);\
    \ $i++) {\n        if (!array_key_exists($l[$i], $p)) {\n            $p[$l[$i]]\
    \ = array();\n        }\n        array_push($p[$l[$i]], $i);\n    }\n    $found\
    \ = false;\n    foreach ($p as $k => $v) {\n        if (array_key_exists(-$k,\
    \ $p)) {\n            if ($k == 0 && count($p[0]) == 1) {\n                continue;\n\
    \            }\n            foreach ($p[$k] as $a) {\n                foreach\
    \ ($p[-$k] as $b) {\n                    if ($a == $b) {\n                   \
    \     continue;\n                    }\n                    $found = true;\n \
    \                   array_push($pairs, array($a, $b));\n                }\n  \
    \          }\n        }\n    }\n    return $pairs;\n}\n\n$array = array(1, 3,\
    \ 5, 0);\n$result = pairs_sum_to_zero($array);\nprint_r($result);\n$array = array(1,\
    \ 3, -2, 1);\n$result = pairs_sum_to_zero($array);\nprint_r($result);\n$array\
    \ = array(1, 2, 3, 7);\n$result = pairs_sum_to_zero($array);\nprint_r($result);\n\
    $array = array(2, 4, -5, 3, 5, 7);\n$result = pairs_sum_to_zero($array);\nprint_r($result);\n\
    $array = array(1);\n$result = pairs_sum_to_zero($array);\nprint_r($result);",
  "  \n  $arr = [];\n  foreach ($l as $k => $v) {\n    if (array_key_exists($v, $arr))\
    \ {\n      return true;\n    }\n    $arr[-$v] = true;\n  }\n  return false;\n\
    }\n", "\tif (count($l) <= 1) {\n\t\treturn false;\n\t}\n\tsort($l);\n\t$i = 0;\n\
    \t$j = count($l) - 1;\n\twhile ($i < $j) {\n\t\t$sum = $l[$i] + $l[$j];\n\t\t\
    if ($sum === 0) {\n\t\t\treturn true;\n\t\t} else if ($sum < 0) {\n\t\t\t$i++;\n\
    \t\t} else {\n\t\t\t$j--;\n\t\t}\n\t}\n\treturn false;\n}\n", "    return false;\n\
    }\n", "    $x = array_filter($l, function($y) { return $y == 0; });\n    if (count($x)\
    \ > 1) {\n        return true;\n    }\n    $a = array_unique($l);\n    sort($a);\n\
    \    for ($i = 0; $i < count($a); $i++) {\n        for ($j = $i + 1; $j < count($a);\
    \ $j++) {\n            if ($a[$i] + $a[$j] == 0) {\n                return true;\n\
    \            }\n        }\n    }\n    return false;\n}", "\t// START\n}\n", " \
    \   if(empty($l)) {\n        return false;\n    }\n    $seen = array();\n    foreach($l\
    \ as $i) {\n        if(isset($seen[-$i])) {\n            return true;\n      \
    \  }\n        $seen[$i] = 1;\n    }\n    return false;\n}", "  foreach ($l as\
    \ $i) {\n    foreach ($l as $j) {\n      if ($i + $j == 0 && $i != $j) {\n   \
    \     return true;\n      }\n    }\n  }\n  return false;\n}", "  // echo \"Entering\
    \ \" . __FUNCTION__ . \"\\n\";\n  $has_zero = array_search(0, $l);\n  if ($has_zero)\
    \ {\n    return false;\n  }\n  // echo \"No zero found in array\\n\";\n  $l =\
    \ array_unique($l);\n  $length = count($l);\n  // echo \"Array length: $length\\\
    n\";\n  for ($i = 0; $i < $length; $i++) {\n    $current = $l[$i];\n    // echo\
    \ \"Current: $current\\n\";\n    if ($current == 0) {\n      continue;\n    }\n\
    \    $test = -$current;\n    // echo \"Test: $test\\n\";\n    $search = array_search($test,\
    \ $l);\n    if ($search) {\n      return true;\n    }\n  }\n  return false;\n}",
  "\t// TODO\n\t$count = count($l);\n\tif($count < 2) {\n\t\treturn false;\n\t}\n\t\
    sort($l);\n\t$lo = 0;\n\t$hi = $count - 1;\n\twhile($lo < $hi) {\n\t\t$sum = $l[$lo]\
    \ + $l[$hi];\n\t\tif($sum == 0) {\n\t\t\treturn true;\n\t\t}\n\t\telse if($sum\
    \ < 0) {\n\t\t\t$lo++;\n\t\t}\n\t\telse {\n\t\t\t$hi--;\n\t\t}\n\t}\n\treturn\
    \ false;\n}\n", "  if (count($l) <= 1) {\n    return false;\n  }\n  $first = array_shift($l);\n\
    \  return in_array(-$first, $l) || pairs_sum_to_zero($l);\n}", "    return false;\n\
    }", "\tforeach ($l as $num) {\n\t\tforeach ($l as $other_num) {\n\t\t\tif ($num\
    \ + $other_num == 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n\
    }\n", "    // Your code here.\n    return false;\n}", "  // WRITE ME\n  for ($i\
    \ = 0; $i < count($l); $i++) {\n    for ($j = 0; $j < count($l); $j++) {\n   \
    \   if ($l[$i] == $l[$j] || $i == $j) {\n        continue;\n      }\n      if\
    \ ($l[$i] + $l[$j] == 0) {\n        return true;\n      }\n    }\n  }\n  return\
    \ false;\n}\n", "    $count = count($l);\n    $result = false;\n    for ($i =\
    \ 0; $i < $count; $i++) {\n        for ($j = $i + 1; $j < $count; $j++) {\n  \
    \          if ($l[$i] + $l[$j] == 0) {\n                $result = true;\n    \
    \            break;\n            }\n        }\n    }\n    return $result;\n}",
  "    $l2 = $l;\n    foreach ($l as $i) {\n        foreach ($l2 as $j) {\n      \
    \      if ($i + $j == 0) {\n                return true;\n            }\n    \
    \    }\n    }\n    return false;\n}\n", "\n}\n", "  if(count($l) < 2) return false;\n\
    \  for($i = 0; $i < count($l); $i++) {\n    for($j = $i + 1; $j < count($l); $j++)\
    \ {\n      if($l[$i] + $l[$j] == 0) return true;\n    }\n  }\n  return false;\n\
    }\n", "    // YOUR CODE HERE\n    return false;\n}\n", "\t$num_keys = count($l);\n\
    \tfor ($i = 0; $i < $num_keys; $i++) {\n\t\tfor ($j = $i+1; $j < $num_keys; $j++)\
    \ {\n\t\t\tif ($l[$i] + $l[$j] == 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\
    \t}\n\treturn false;\n}\n", "\tif (count($l) <= 1) {\n\t\treturn false;\n\t}\n\
    \t$i = 0;\n\twhile ($i < count($l)) {\n\t\tif (in_array(-$l[$i], $l)) {\n\t\t\t\
    return true;\n\t\t}\n\t\t$i++;\n\t}\n\treturn false;\n}", "\n}\n\n", "  // YOUR\
    \ CODE HERE\n  if (count($l) < 2) {\n    return false;\n  }\n  for ($i = 0; $i\
    \ < count($l); $i++) {\n    for ($j = $i + 1; $j < count($l); $j++) {\n      if\
    \ ($l[$i] + $l[$j] == 0) {\n        return true;\n      }\n    }\n  }\n  return\
    \ false;\n}\n", "  $zero = 0;\n  $result = false;\n  if (empty($l)) {\n    return\
    \ $result;\n  }\n  $size = count($l);\n  for ($i = 0; $i < $size; $i++) {\n  \
    \  for ($j = $i + 1; $j < $size; $j++) {\n      if ($l[$i] + $l[$j] == $zero)\
    \ {\n        $result = true;\n        break;\n      }\n    }\n  }\n  return $result;\n\
    }\n", "    $A = $l;\n    $n = count($A);\n    sort($A);\n    $left = 0;\n    $right\
    \ = $n - 1;\n    while ($left < $right) {\n        $sum = $A[$left] + $A[$right];\n\
    \        if ($sum == 0) {\n            return true;\n        } else if ($sum <\
    \ 0) {\n            $left++;\n        } else {\n            $right--;\n      \
    \  }\n    }\n    return false;\n}\n", "    if (count($l) <= 1) {\n        return\
    \ false;\n    }\n    $map = array();\n    for ($i = 0; $i < count($l); $i++) {\n\
    \        $map[$l[$i]] = true;\n    }\n    foreach ($map as $key => $value) {\n\
    \        if (array_key_exists(-$key, $map)) {\n            return true;\n    \
    \    }\n    }\n    return false;\n}", "    // Your code here\n    $temp = [];\n\
    \    $len = count($l);\n    for ($i = 0; $i < $len; $i++) {\n        if (!isset($temp[$l[$i]]))\
    \ {\n            $temp[$l[$i]] = 1;\n        } else {\n            $temp[$l[$i]]\
    \ += 1;\n        }\n    }\n    for ($i = 0; $i < $len; $i++) {\n        if ($l[$i]\
    \ == 0) {\n            if ($temp[$l[$i]] >= 2) {\n                return true;\n\
    \            }\n        } else if (isset($temp[-$l[$i]])) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}", "    $ln = count($l);\n    if\
    \ ($ln === 0) {\n        return false;\n    } else if ($ln === 1) {\n        return\
    \ false;\n    } else {\n        for ($i = 0; $i < $ln; $i++) {\n            for\
    \ ($j = 0; $j < $ln; $j++) {\n                if ($l[$i] + $l[$j] === 0 && $i\
    \ !== $j) {\n                    return true;\n                }\n           \
    \ }\n        }\n        return false;\n    }\n}\n", "  foreach ($l as $l1) {\n\
    \    foreach ($l as $l2) {\n      if ($l1 != $l2 && $l1 + $l2 == 0)\n        return\
    \ true;\n    }\n  }\n  return false;\n}\n", "  for ($i = 0; $i < count($l); $i++)\
    \ {\n    for ($j = $i + 1; $j < count($l); $j++) {\n      if ($l[$i] + $l[$j]\
    \ == 0) return true;\n    }\n  }\n  return false;\n}\n", "  $l1 = $l;\n  foreach\
    \ ($l as $e1) {\n    foreach ($l1 as $e2) {\n      if ($e1 + $e2 == 0) {\n   \
    \     return true;\n      }\n    }\n  }\n  return false;\n}\n", "  $found = False;\n\
    \  for ($i = 0; $i < count($l); $i++) {\n    for ($j = $i + 1; $j < count($l);\
    \ $j++) {\n      if ($l[$i] + $l[$j] == 0) {\n        $found = True;\n      }\n\
    \    }\n  }\n  return $found;\n}\n", "\n}", "    // WRITE ME\n    // vars for\
    \ working on the array\n    $len = count($l);\n    $result = false;\n    for ($i\
    \ = 0; $i < $len; $i++) {\n        for ($j = 0; $j < $len; $j++) {\n         \
    \   if ($l[$i] + $l[$j] == 0) {\n                $result = true;\n           \
    \ }\n        }\n    }\n    return $result;\n}\n", "\tfor ($i = 0; $i < count($l);\
    \ $i++) {\n\t\tfor ($j = $i + 1; $j < count($l); $j++) {\n\t\t\tif ($l[$i] + $l[$j]\
    \ == 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}", " \
    \ return false;\n}\n", "\tfor ($i = 0; $i < count($l) - 1; $i++) {\n\t\tfor ($j\
    \ = $i + 1; $j < count($l); $j++) {\n\t\t\tif ($l[$i] + $l[$j] == 0) {\n\t\t\t\
    \treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}", "\t// the idea is to\
    \ sort the array. this takes O(n log n) time. then we can\n\t// walk down the\
    \ list and look for matches. this is O(n), so that's\n\t// O(n log n) overall.\n\
    \n\t// the sort only needs to know if the two values are in the right order\n\t\
    // or not. this means you could use a custom function for the sort, or\n\t// you\
    \ could use a \"sort\" function that only compares and not swaps. this\n\t// seems\
    \ to be the PHP version:\n\t// http://php.net/manual/en/function.usort.php\n\t\
    // they use the same sort that quicksort uses. it's O(n log n) worst case\n\t\
    // but in the average case it is O(n) time. there are a few other sorts\n\t//\
    \ that are faster (i.e. O(n) time, but they use extra space.\n\t$i = 0;\n\t$len\
    \ = count($l);\n\t$a = true;\n\twhile($i < $len) {\n\t\tif ($l[$i] < 0) {\n\t\t\
    \t$a = false;\n\t\t\tbreak;\n\t\t}\n\t\t$i++;\n\t}\n\tif ($a)\n\t\treturn false;\n\
    \t$i = 0;\n\twhile($i < $len) {\n\t\tif ($l[$i] > 0) {\n\t\t\t$a = true;\n\t\t\
    \tbreak;\n\t\t}\n\t\t$i++;\n\t}\n\tif (!$a)\n\t\treturn false;\n\tsort($l);\n\t\
    $i = 0;\n\t$j = $len - 1;\n\twhile($i < $j) {\n\t\t$val = $l[$i] + $l[$j];\n\t\
    \tif ($val == 0)\n\t\t\treturn true;\n\t\tif ($val < 0)\n\t\t\t$i++;\n\t\telse\n\
    \t\t\t$j--;\n\t}\n\treturn false;\n}\n", "\tif(count($l)==0) return false;\n\t\
    if(count($l)==1) return false;\n\tif(count($l)==2) return false;\n\t\n\tfor($i=0;$i<count($l);$i++){\n\
    \t\tfor($j=$i+1;$j<count($l);$j++){\n\t\t\tif($l[$i]+$l[$j]==0) return true;\n\
    \t\t}\n\t}\n\treturn false;\n}\n\n", "  $t = array();\n  foreach ($l as $n) {\n\
    \    if (array_key_exists($n, $t)) {\n      return true;\n    }\n    $t[-1 * $n]\
    \ = 1;\n  }\n  return false;\n}\n", "    // your code here\n\t$len = count($l);\n\
    \tfor($i=0;$i<$len;$i++){\n\t\tfor($j=$i+1;$j<$len;$j++){\n\t\t\tif(($l[$i]+$l[$j])==0){\n\
    \t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n", "\n}\n", "\t\
    $i = 0;\n\t$j = 0;\n\t$i_length = count($l);\n\tif ($i_length == 1) {\n\t\treturn\
    \ false;\n\t}\n\t$j_length = count($l);\n\twhile ($i < $i_length) {\n\t\twhile\
    \ ($j < $j_length) {\n\t\t\tif ($i != $j) {\n\t\t\t\tif ($l[$i] + $l[$j] == 0)\
    \ {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$j++;\n\t\t}\n\t\t$i++;\n\
    \t\t$j = 0;\n\t}\n\treturn false;\n}\n", "\treturn false;\n}\n", "  if (count($l)\
    \ <= 1) {\n    return false;\n  }\n  $counter = 0;\n  for ($i = 0; $i < count($l);\
    \ $i++) {\n    for ($j = 0; $j < count($l); $j++) {\n      if ($i != $j) {\n \
    \       if ($l[$i] + $l[$j] == 0) {\n          $counter += 1;\n        }\n   \
    \   }\n    }\n  }\n  if ($counter >= 1) {\n    return true;\n  } else {\n    return\
    \ false;\n  }\n}\n", "  $pairs = array();\n  foreach ($l as $i) {\n    if (array_key_exists(-$i,\
    \ $pairs)) {\n      return true;\n    }\n    $pairs[$i] = $i;\n  }\n  return false;\n\
    }\n", "  // your code here\n}\n", "    // $l is the array of integers\n    //\
    \ return true if there are two elements that sum to zero\n    // false otherwise\n\
    \    return false;\n}", "\tforeach ($l as $key1 => $value1) {\n\t\tforeach ($l\
    \ as $key2 => $value2) {\n\t\t\tif ($key1 != $key2 && $value1 == -$value2) {\n\
    \t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n", "\tfor ($i =\
    \ 0; $i < count($l) - 1; $i++) {\n\t\tfor ($j = $i + 1; $j < count($l); $j++)\
    \ {\n\t\t\tif ($l[$i] + $l[$j] == 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\
    \t}\n\treturn false;\n}\n", "    // hint 1: use sort\n    // hint 2: use two pointers:\
    \ one at the beginning, and one at the end\n    // hint 3: a loop is also required\n\
    \    // loop invariant: because of how two pointers are moved,\n    //       \
    \          at any time, there are at most 2 elements of $l\n    //           \
    \      that sum to zero.\n    //                 the sum of these two elements\
    \ is the sum of\n    //                 the element pointed to by the first pointer\n\
    \    //                 and the element pointed to by the second pointer\n   \
    \ // hint 4: you don't need to store all the possible pairs\n    //         that\
    \ sum to zero in an array\n    // hint 5: use return\n    return false;\n}\n",
  "    foreach ($l as $value) {\n        if (in_array(-1 * $value, $l)) {\n      \
    \      return true;\n        }\n    }\n    return false;\n}\n", "\t// your code\
    \ here\n}\n", "    $check = 0;\n    for ($i = 0; $i < count($l); $i++) {\n   \
    \     for ($j = 0; $j < count($l); $j++) {\n            if ($i !== $j) {\n   \
    \             if ($l[$i] + $l[$j] === 0) {\n                    $check = 1;\n\
    \                }\n            }\n        }\n    }\n    if ($check === 1) {\n\
    \        return true;\n    } else {\n        return false;\n    }\n}\n", "   \
    \ $prev = null;\n    $curr = null;\n    foreach ($l as $i) {\n        if ($prev\
    \ !== null) {\n            if ($prev + $i === 0) {\n                return true;\n\
    \            }\n        }\n        $prev = $i;\n    }\n    return false;\n}\n",
  "    if (count($l) == 0) {\n        return false;\n    }\n    $first = array_shift($l);\n\
    \    foreach ($l as $second) {\n        if ($first + $second == 0) {\n       \
    \     return true;\n        }\n    }\n    return pairs_sum_to_zero($l);\n}\n",
  "    $sum = 0;\n    foreach ($l as $value) {\n        if ($value === $sum) {\n \
    \           return true;\n        }\n        $sum += $value;\n    }\n    return\
    \ false;\n}\nassert(false === pairs_sum_to_zero(array(1, 3, 5, 0)));\nassert(false\
    \ === pairs_sum_to_zero(array(1, 3, -2, 1)));\nassert(false === pairs_sum_to_zero(array(1,\
    \ 2, 3, 7)));\nassert(true === pairs_sum_to_zero(array(2, 4, -5, 3, 5, 7)));\n\
    assert(false === pairs_sum_to_zero(array(1)));", "    $last = count($l)-1;\n \
    \   $b = false;\n    if ($last < 1) {\n        return $b;\n    }\n    for ($i\
    \ = 0; $i < $last; $i++) {\n        $s = $l[$i];\n        for ($j = $i+1; $j <=\
    \ $last; $j++) {\n            $sum = $s + $l[$j];\n            if ($sum == 0)\
    \ {\n                $b = true;\n                break;\n            }\n     \
    \   }\n    }\n    return $b;\n}\n", "    // YOUR CODE HERE\n    // Initialize\
    \ empty array\n    $sum_vals = array();\n    // loop through list\n    foreach\
    \ ($l as $val) {\n        // add the current value to existing vals (otherwise\
    \ 0) and check if value exists in array\n        if (isset($sum_vals[$val])) {\n\
    \            // return true if we find our value\n            return True;\n \
    \       } else {\n            // Otherwise, add the negative value to the array\n\
    \            $sum_vals[$val * -1] = $val;\n        }\n    }\n    // return false\
    \ if we don't find any\n    return False;\n}\n", "    $n = count($l);\n    if\
    \ ($n == 0) return false;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j\
    \ = $i + 1; $j < $n; $j++) {\n            if ($l[$i] + $l[$j] == 0) return true;\n\
    \        }\n    }\n    return false;\n}\n\nif (count($argv) > 1) {\n    $x = array();\n\
    \    for ($i = 1; $i < count($argv); $i++) {\n        $x[] = intval($argv[$i]);\n\
    \    }\n    echo(pairs_sum_to_zero($x) ? \"true\" : \"false\") . \"\\n\";\n}",
  "  return false;\n}\n", "\tif (count($l) < 2) {\n\t\treturn false;\n\t}\n\t$hash\
    \ = array();\n\tfor ($i = 0; $i < count($l); $i++) {\n\t\tif (array_key_exists($l[$i],\
    \ $hash)) {\n\t\t\treturn true;\n\t\t}\n\t\t$hash[-1 * $l[$i]] = true;\n\t}\n\t\
    return false;\n}\n", "  $h = array();\n  for ($i = 0; $i < count($l); $i++) {\n\
    \    if ($l[$i] == 0) {\n      return false;\n    }\n    if (isset($h[$l[$i]]))\
    \ {\n      return true;\n    }\n    $h[-$l[$i]] = 1;\n  }\n  return false;\n}\n\
    \n/*\n  Given an array of integers, return indices of the two numbers such that\
    \ they add up to a specific target.\n\n  You may assume that each input would\
    \ have exactly one solution, and you may not use the same element twice.\n\n \
    \ Example:\n\n  Given nums = [2, 7, 11, 15], target = 9,\n\n  Because nums[0]\
    \ + nums[1] = 2 + 7 = 9,\n  return [0, 1].\n */", "\t$size = count($l);\n\tfor\
    \ ($i = 0; $i < $size; $i++) {\n\t\tfor ($j = $i + 1; $j < $size; $j++) {\n\t\t\
    \tif ($l[$i] + $l[$j] == 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ false;\n}", "    foreach ($l as $x) {\n        foreach ($l as $y) {\n      \
    \      if ($x + $y == 0 && $x != $y) {\n                return true;\n       \
    \     }\n        }\n    }\n    return false;\n}\n", "    if (count($l) <= 1) return\
    \ false;\n    $i = 0;\n    $j = count($l) - 1;\n    while ($i < $j) {\n      \
    \  if ($l[$i] + $l[$j] == 0) return true;\n        if ($l[$i] + $l[$j] > 0) $j--;\n\
    \        else $i++;\n    }\n    return false;\n}\n", "    // write your code here\
    \ and return the correct result.\n    return true;\n}", "\treturn false;\n}\n",
  "  return false;\n}\n", "\t$i = 0;\n\t$arr1 = array();\n\t$arr2 = array();\n\twhile\
    \ ($i < count($l)) {\n\t\t$j = 0;\n\t\twhile ($j < count($l)) {\n\t\t\tif ($l[$i]\
    \ + $l[$j] == 0) {\n\t\t\t\tarray_push($arr1, $l[$i]);\n\t\t\t\tarray_push($arr2,\
    \ $l[$j]);\n\t\t\t}\n\t\t\t$j = $j + 1;\n\t\t}\n\t\t$i = $i + 1;\n\t}\n\tif (count($arr1)\
    \ > 1) {\n\t\t$k = 0;\n\t\twhile ($k < count($arr1)) {\n\t\t\t$n = 0;\n\t\t\t\
    while ($n < count($arr2)) {\n\t\t\t\tif ($arr1[$k] == $arr2[$n]) {\n\t\t\t\t\t\
    return false;\n\t\t\t\t}\n\t\t\t\t$n = $n + 1;\n\t\t\t}\n\t\t\t$k = $k + 1;\n\t\
    \t}\n\t\treturn true;\n\t}\n\treturn false;\n}", "}\n", "    for ($i = 0; $i <\
    \ count($l); $i++) {\n        for ($j = $i + 1; $j < count($l); $j++) {\n    \
    \        if ($l[$i] + $l[$j] == 0) {\n                return true;\n         \
    \   }\n        }\n    }\n    return false;\n}", "    // Your code here\n}", "\n\
    }\n", "    $pairs = 0;\n    for ($i = 0; $i < count($l); $i++) {\n        for\
    \ ($j = $i + 1; $j < count($l); $j++) {\n            if ($l[$i] + $l[$j] == 0)\
    \ {\n                $pairs++;\n            }\n        }\n    }\n    if ($pairs\
    \ > 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n",
  "\t$count = count($l);\n\tif ($count < 2) {\n\t\treturn false;\n\t}\n\tfor ($i =\
    \ 0; $i < $count; $i++) {\n\t\tfor ($j = $i + 1; $j < $count; $j++) {\n\t\t\t\
    if ($l[$i] + $l[$j] == 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ false;\n}\n\nclass TestPairsSumToZero extends PHPUnit_Framework_TestCase {\n\
    \tfunction test_pairs_sum_to_zero() {\n\t\t$this->assertFalse(pairs_sum_to_zero(array(1,\
    \ 3, 5, 0)));\n\t\t$this->assertFalse(pairs_sum_to_zero(array(1, 3, -2, 1)));\n\
    \t\t$this->assertFalse(pairs_sum_to_zero(array(1, 2, 3, 7)));\n\t\t$this->assertTrue(pairs_sum_to_zero(array(2,\
    \ 4, -5, 3, 5, 7)));\n\t\t$this->assertFalse(pairs_sum_to_zero(array(1)));\n\t\
    }\n}\n", "  // Write a function that takes an array of integers and determines\
    \ if\n  // there exists a pair that sums to zero.\n  // Hint: Use a hash\n  return\
    \ false;\n}\n\n$l = array(1, 3, 5, 0);\n$l = array(1, 3, -2, 1);\n$l = array(1,\
    \ 2, 3, 7);\n$l = array(2, 4, -5, 3, 5, 7);\n$l = array(1);\necho pairs_sum_to_zero($l)\
    \ ? \"true\\n\" : \"false\\n\";", "  $count = 0;\n  for ($i = 0; $i < count($l);\
    \ $i++) {\n    for ($j = $i + 1; $j < count($l); $j++) {\n      if ($l[$i] + $l[$j]\
    \ == 0) {\n        $count++;\n      }\n    }\n  }\n  if ($count > 0) {\n    return\
    \ true;\n  } else {\n    return false;\n  }\n}\n", "    // ...\n}\n", "    //\
    \ note: there is no need to declare $l as an array, since it is\n    //      \
    \ an array by default.\n    // note: we are using the PHP built-in function count()\
    \ to get the\n    //       length of the array. However, count() is O(N) for arrays,\n\
    \    //       so if you would like to do it in O(1), then you can use\n    //\
    \       the function sizeof() instead.\n    // note: $i is the index of the elements\
    \ in the array. Note that the\n    //       maximum value of $i can reach the\
    \ last index of the array,\n    //       which is one less than the length of\
    \ the array.\n    for ($i = 0; $i < count($l) - 1; $i++) {\n        // note: $j\
    \ is used as the value of the element in the array.\n        // note: we need\
    \ to use $l[$i] because we are getting the value\n        //       of the elements\
    \ in the array by index.\n        $target = -$l[$i];\n        // note: array_search\
    \ returns the index of the first element that\n        //       matches the target\
    \ value. Returns false if the value is\n        //       not found.\n        if\
    \ (array_search($target, $l) !== false) {\n            return true;\n        }\n\
    \    }\n    return false;\n}\n", "\t// write your solution below\n}\n", "\t//\
    \ Your code here\n\treturn false;\n}\n", "    if (count($l)<2) {\n        return\
    \ false;\n    }\n    foreach ($l as $i) {\n        $rest = array_diff($l, array($i));\n\
    \        foreach ($rest as $j) {\n            if ($i + $j == 0) {\n          \
    \      return true;\n            }\n        }\n    }\n    return false;\n}\n",
  '}', "\tif (count($l) < 2) {\n\t\treturn false;\n\t}\n\t$numbers = [];\n\tfor ($i\
    \ = 0; $i < count($l); $i++) {\n\t\t$number = $l[$i];\n\t\tif (!$numbers[$number])\
    \ {\n\t\t\t$numbers[$number] = 1;\n\t\t} else {\n\t\t\t$numbers[$number]++;\n\t\
    \t}\n\t}\n\tforeach ($numbers as $key => $value) {\n\t\tif ($key === 0) {\n\t\t\
    \tif ($value >= 2) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t} else if ($numbers[-$key])\
    \ {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}", "    // your code here\n\
    \    // your code here\n    \n    // Assume no two distinct elements in the array\
    \ that sum to zero\n    $pairs = false;\n    \n    // Create an array of the positive\
    \ and negative values in the original array\n    $positive_array = array();\n\
    \    $negative_array = array();\n    foreach ($l as $value) {\n        if ($value\
    \ > 0) {\n            array_push($positive_array, $value);\n        } else {\n\
    \            array_push($negative_array, $value);\n        }\n    }\n    \n  \
    \  // Use a for loop to find a match, if any, between values in the positive and\
    \ negative arrays. \n    foreach ($positive_array as $positive_value) {\n    \
    \    foreach ($negative_array as $negative_value) {\n            if ($positive_value\
    \ + $negative_value == 0) {\n                $pairs = true;\n            }\n \
    \       }\n    }\n    \n    return $pairs;\n}\n\n\n", "\tfor ($i = 0; $i < count($l);\
    \ $i++) {\n\t\t$a = $l[$i];\n\t\tfor ($j = $i + 1; $j < count($l); $j++) {\n\t\
    \t\t$b = $l[$j];\n\t\t\tif ($a + $b == 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\
    \t}\n\t}\n\treturn false;\n}\n", "  // Write your solution here\n  $arr = [];\n\
    \  $i = 0;\n  $j = 0;\n  $length = count($l);\n  while ($i < $length) {\n    while\
    \ ($j < $length) {\n      if ($l[$i] + $l[$j] == 0) {\n        return true;\n\
    \      }\n      $j++;\n    }\n    $i++;\n  }\n  return false;\n}\n", "    $c=count($l);\n\
    \    for($i=0;$i<$c;$i++){\n        for($j=0;$j<$c;$j++){\n            if($i!=$j){\n\
    \                if($l[$i]+$l[$j]==0){\n                    return true;\n   \
    \             }\n            }\n        }\n    }\n    return false;\n}\n", "\n\
    }\n", "\n}\n", "\tfor ($i = 0; $i < count($l); $i++) {\n\t\tfor ($j = $i + 1;\
    \ $j < count($l); $j++) {\n\t\t\tif ($l[$i] + $l[$j] == 0) {\n\t\t\t\treturn true;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n", "  return false;\n}\n", "    // I\
    \ want to know if there are 2 numbers in the list\n    // that sum to zero. This\
    \ is the same as asking if\n    // there are two numbers in the list that have\
    \ the\n    // opposite value\n    // I start by building a new list with the negative\
    \ values\n    // of all the numbers in the input list\n    $r = array();\n   \
    \ foreach ($l as $e) {\n        $r[] = -$e;\n    }\n    // now, I just need to\
    \ know if there are two identical\n    // values in my list\n    return has_duplicates($r);\n\
    }\n", "  return false;\n}", "\n}\n", "    // your code here\n    // use a hashtable\
    \ to find the complement\n    $comp = array();\n    foreach ($l as $e) {\n   \
    \     if (array_key_exists($e, $comp))\n            return true;\n        $comp[-1\
    \ * $e] = 1;\n    }\n    return false;\n}", "  $n = count($l);\n  if ($n == 0)\
    \ {\n    return false;\n  }\n  $d = array();\n  for ($i = 0; $i < $n; $i++) {\n\
    \    $d[$l[$i]] = true;\n  }\n  for ($i = 0; $i < $n; $i++) {\n    if (isset($d[-$l[$i]]))\
    \ {\n      return true;\n    }\n  }\n  return false;\n}\n", "}\n", "\t// WRITE\
    \ YOUR CODE HERE\n}", "\t// TODO: your code here\n\t$n = count($l);\n\t$found\
    \ = false;\n\tfor ($i = 0; $i < $n; $i++) {\n\t\tfor ($j = $i + 1; $j < $n; $j++)\
    \ {\n\t\t\tif ($l[$i] + $l[$j] == 0) {\n\t\t\t\t$found = true;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn $found;\n}\n", "\t// sum to zero is a special case\
    \ where we want to check for positive\n\t// and negative values of the same number.\n\
    \t//\n\t// this function can be solved in O(n) time.\n\t// hint: use an associative\
    \ array.\n\t$array = array();\n\tforeach ($l as $number) {\n\t\tif (isset($array[$number]))\
    \ {\n\t\t\treturn true;\n\t\t}\n\t\t$array[-$number] = true;\n\t}\n\treturn false;\n\
    }\n", "\tif (sizeof($l) <= 1) {\n\t\treturn false;\n\t}\n\tsort($l);\n\tif ($l[0]\
    \ + $l[sizeof($l) - 1] < 0) {\n\t\treturn false;\n\t}\n\tfor ($i = 0; $i < sizeof($l);\
    \ $i++) {\n\t\tfor ($j = $i + 1; $j < sizeof($l); $j++) {\n\t\t\tif ($l[$i] +\
    \ $l[$j] == 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n\
    }\n", "  for ($i = 0; $i < count($l); $i++) {\n    for ($j = $i + 1; $j < count($l);\
    \ $j++) {\n      if ($l[$i] + $l[$j] == 0) {\n        return true;\n      }\n\
    \    }\n  }\n  return false;\n}\n", "  $l = array_unique($l); // remove duplicates\n\
    \  foreach ($l as $a) {\n    if (in_array(-$a, $l)) {\n      return true;\n  \
    \  }\n  }\n  return false;\n}\n\nclass TestPairsSumToZero extends Test {\n  public\
    \ function testEmpty() {\n    $this->assert(pairs_sum_to_zero(array()), false);\n\
    \  }\n  public function testPositive() {\n    $this->assert(pairs_sum_to_zero(array(1,\
    \ 3, 5, 0)), false);\n  }\n  public function testNegative() {\n    $this->assert(pairs_sum_to_zero(array(1,\
    \ 3, -2, 1)), false);\n  }\n  public function testNoMatch() {\n    $this->assert(pairs_sum_to_zero(array(1,\
    \ 2, 3, 7)), false);\n  }\n  public function testMatch() {\n    $this->assert(pairs_sum_to_zero(array(2,\
    \ 4, -5, 3, 5, 7)), true);\n  }\n  public function testSingle() {\n    $this->assert(pairs_sum_to_zero(array(1)),\
    \ false);\n  }\n}\n\n(new TestPairsSumToZero())->run();", "  $result = false;\n\
    \  foreach ($l as $v1) {\n    foreach ($l as $v2) {\n      if ($v1 == $v2) {\n\
    \        continue;\n      } elseif ($v1 + $v2 == 0) {\n        $result = true;\n\
    \      }\n    }\n  }\n  return $result;\n}", "\t$l_in_order = insertion_sort($l);\n\
    \t//print_r($l_in_order);\n\t\n\tfor ($i = 0; $i < count($l_in_order); $i++) {\n\
    \t\tif ($l_in_order[$i] > 0) {\n\t\t\t$j = $i;\n\t\t\twhile ($j > 0) {\n\t\t\t\
    \t$j--;\n\t\t\t\tif ($l_in_order[$i] + $l_in_order[$j] == 0) {\n\t\t\t\t\treturn\
    \ true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n", "    // Write\
    \ your solution here.  Be sure to use helper functions where possible.\n    sort($l);\n\
    \    for ($i = 0; $i < count($l); $i++) {\n        if ($l[$i] > 0) {\n       \
    \     return false;\n        }\n        $j = binary_search($l, -$l[$i], $i + 1,\
    \ count($l) - 1);\n        if ($j > 0) {\n            return true;\n        }\n\
    \    }\n    return false;\n}\n", "  // check if there are at least two numbers\
    \ in the array\n  if (count($l) < 2) {\n    return false;\n  }\n  // check if\
    \ there is a zero in the array\n  for ($i = 0; $i < count($l); $i++) {\n    if\
    \ ($l[$i] == 0) {\n      return true;\n    }\n  }\n  // if we haven't found a\
    \ zero in the array yet, go over each\n  // number in the array and check if there's\
    \ a number in the array\n  // that's the negative of the current number\n  for\
    \ ($i = 0; $i < count($l); $i++) {\n    for ($j = 0; $j < count($l); $j++) {\n\
    \      if ($l[$i] + $l[$j] == 0) {\n        return true;\n      }\n    }\n  }\n\
    \  return false;\n}", "\tforeach ($l as $i) {\n\t\t$sums[] = 0 - $i;\n\t}\n\t\
    return count(array_intersect($l, $sums)) > 1;\n}\n", "    $zero = array_search(0,\
    \ $l);\n    if ($zero !== false) {\n        unset($l[$zero]);\n    }\n    $l2\
    \ = array_flip($l);\n    for ($i = 0; $i < count($l); $i++) {\n        if (isset($l2[-1\
    \ * $l[$i]])) {\n            return true;\n        }\n    }\n    return false;\n\
    }\n$l = array(1, 2, 3, 7);\necho pairs_sum_to_zero($l);", "  return true;\n}\n",
  "\t\n}\n", "  // TODO\n}", "  // Note: this solution iterates through every pair\
    \ in the array,\n  // and returns true immediately if it finds a pair that sums\
    \ to zero.\n  // In general, it's best to return early from a function if you\
    \ can.\n  foreach ($l as $x) {\n    foreach ($l as $y) {\n      if ($x + $y ==\
    \ 0) return true;\n    }\n  }\n  return false;\n}\n", "  // 1. sort the array\
    \ in ascending order\n  // 2. grab the first and last element. if they are equal\
    \ to zero, return true\n  // 3. iterate through the array starting at 0, moving\
    \ the left pointer to the right\n  //    and the right pointer to the left. Use\
    \ the sum of the left and right pointers\n  //    to figure out what to do next.\n\
    \  // 4. if the sum is greater than zero, increment the left pointer. If the sum\
    \ is less\n  //    than zero, decrement the right pointer. Otherwise, return true.\n\
    \  // 5. if the left pointer is greater than the right pointer, return false.\n\
    \n  // 1.\n  sort($l);\n\n  // 2.\n  if (array_key_exists(0, $l) && array_key_exists(-1,\
    \ $l) && ($l[0] == 0 && $l[-1] == 0)) {\n    return true;\n  }\n\n  // 3.\n  $left\
    \ = 0;\n  $right = count($l) - 1;\n  while ($left < $right) {\n    if ($l[$left]\
    \ + $l[$right] > 0) {\n      $right--;\n    } elseif ($l[$left] + $l[$right] <\
    \ 0) {\n      $left++;\n    } else {\n      return true;\n    }\n  }\n\n  // 5.\n\
    \  return false;\n}\n\n$l = array(1, 3, 5, 0);\nvar_dump(pairs_sum_to_zero($l));\n\
    $l = array(1, 3, -2, 1);\nvar_dump(pairs_sum_to_zero($l));\n$l = array(1, 2, 3,\
    \ 7);\nvar_dump(pairs_sum_to_zero($l));\n$l = array(2, 4, -5, 3, 5, 7);\nvar_dump(pairs_sum_to_zero($l));\n\
    $l = array(1);\nvar_dump(pairs_sum_to_zero($l));\n$l = array(0, 0);\nvar_dump(pairs_sum_to_zero($l));",
  "  // loop through the array\n  foreach ($l as $i) {\n    // compare each element\
    \ against each other element\n    // to see if they sum to zero\n    foreach ($l\
    \ as $j) {\n      if ($i + $j == 0) {\n        return True;\n      }\n    }\n\
    \  }\n  return False;\n}\n", "    // your code here\n    if (sizeof($l) < 2) return\
    \ false;\n    for ($i = 0; $i < sizeof($l); $i++) {\n        for ($j = $i + 1;\
    \ $j < sizeof($l); $j++) {\n            if ($l[$i] + $l[$j] == 0) return true;\n\
    \        }\n    }\n    return false;\n}", "    // your code here\n    $sum = 0;\n\
    \    foreach ($l as $x) {\n        $sum = $sum + $x;\n    }\n    if ($sum == 0)\
    \ {\n        return true;\n    } else {\n        return false;\n    }\n}", " \
    \   $count = count($l);\n    for ($i = 0; $i < $count; $i++) {\n        for ($j\
    \ = $i + 1; $j < $count; $j++) {\n            if ($l[$i] + $l[$j] == 0) {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }\n\necho pairs_sum_to_zero(array(1, 3, 5, 0)) . PHP_EOL;\necho pairs_sum_to_zero(array(1,\
    \ 3, -2, 1)) . PHP_EOL;\necho pairs_sum_to_zero(array(1, 2, 3, 7)) . PHP_EOL;\n\
    echo pairs_sum_to_zero(array(2, 4, -5, 3, 5, 7)) . PHP_EOL;\necho pairs_sum_to_zero(array(1))\
    \ . PHP_EOL;", "    $count = count($l);\n    if ($count == 1) {\n        return\
    \ false;\n    } else {\n        $x = $l[0];\n        $ls = array_slice($l, 1);\n\
    \        if (in_array(-$x, $ls)) {\n            return true;\n        } else {\n\
    \            return pairs_sum_to_zero($ls);\n        }\n    }\n}\n", "    $count\
    \ = count($l);\n    for ($i = 0; $i < $count; $i++) {\n        for ($j = $i +\
    \ 1; $j < $count; $j++) {\n            if ($l[$i] + $l[$j] == 0) {\n         \
    \       return true;\n            }\n        }\n    }\n    return false;\n}\n",
  "    for ($i = 0; $i < count($l); $i++) {\n        for ($j = $i + 1; $j < count($l);\
    \ $j++) {\n            if ($l[$i] + $l[$j] == 0)\n                return true;\n\
    \        }\n    }\n    return false;\n}\n\nassert(false == pairs_sum_to_zero(array(1,\
    \ 3, 5, 0)));\nassert(false == pairs_sum_to_zero(array(1, 3, -2, 1)));\nassert(false\
    \ == pairs_sum_to_zero(array(1, 2, 3, 7)));\nassert(true == pairs_sum_to_zero(array(2,\
    \ 4, -5, 3, 5, 7)));\nassert(false == pairs_sum_to_zero(array(1)));\nassert(false\
    \ == pairs_sum_to_zero(array()));\necho \"All test passed\\n\";", "  // TODO:\
    \ complete the implementation of pairs_sum_to_zero\n}\n", "  // TODO: implement\n\
    }\n", "    // Your code here\n    $index = 0;\n    foreach ($l as $num) {\n  \
    \      if ($num == 0) {\n            $index++;\n        }\n    }\n    if ($index\
    \ > 1) {\n        return true;\n    }\n    return false;\n}\n", "  return false;\n\
    }", "    if (empty($l))\n        return false;\n    $l = array_unique($l);\n \
    \   if (count($l) < 2)\n        return false;\n    if (in_array(0, $l))\n    \
    \    return true;\n    $p = 0;\n    $n = 0;\n    for ($i = 0; $i < count($l);\
    \ $i++) {\n        if ($l[$i] < 0)\n            $n++;\n        else\n        \
    \    $p++;\n    }\n    if ($p > 0 && $n > 0)\n        return true;\n    return\
    \ false;\n}\n", "  $h = array();\n  foreach ($l as $val) {\n    $h[$val] = 1;\n\
    \  }\n  foreach ($l as $val) {\n    if ($val != 0 && array_key_exists(-$val, $h))\
    \ {\n      return true;\n    }\n  }\n  return false;\n}\n", "    // TODO\n}\n",
  "  \n}", "  $length = count($l);\n  for ($i = 0; $i < $length; $i++) {\n    for\
    \ ($j = $i + 1; $j < $length; $j++) {\n      if ($l[$i] + $l[$j] == 0) {\n   \
    \     return true;\n      }\n    }\n  }\n  return false;\n}\n\nassert(false ==\
    \ pairs_sum_to_zero(array(1, 3, 5, 0)));\nassert(false == pairs_sum_to_zero(array(1,\
    \ 3, -2, 1)));\nassert(false == pairs_sum_to_zero(array(1, 2, 3, 7)));\nassert(true\
    \ == pairs_sum_to_zero(array(2, 4, -5, 3, 5, 7)));\nassert(false == pairs_sum_to_zero(array(1)));\n",
  "    $count = 0;\n    for ($i = 0; $i < count($l); $i++) {\n        for ($j = 0;\
    \ $j < count($l); $j++) {\n            if ($l[$i] + $l[$j] == 0) {\n         \
    \       $count = $count + 1;\n            }\n        }\n    }\n    if ($count\
    \ == 2) {\n        return true;\n    } else {\n        return false;\n    }\n\
    }\n", "    // TODO: implement this function\n}\n", "    $n = count($l);\n    $pairs\
    \ = array();\n    for ($i = 0; $i < $n; $i++) {\n        $pairs[$l[$i]] = $i;\n\
    \    }\n    for ($i = 0; $i < $n; $i++) {\n        if (isset($pairs[-$l[$i]])\
    \ && $pairs[-$l[$i]] != $i) {\n            return true;\n        }\n    }\n  \
    \  return false;\n}", "    $n = count($l);\n    for ($i = 0; $i < $n; $i++) {\n\
    \        for ($j = $i + 1; $j < $n; $j++) {\n            if ($l[$i] + $l[$j] ==\
    \ 0) {\n                return true;\n            }\n        }\n    }\n    return\
    \ false;\n}\n$l = array(1, 2, 3, 7);\nprint(pairs_sum_to_zero($l));", "\t$arrayLength\
    \ = count($l);\n\t$arrayLengthMinusOne = $arrayLength - 1;\n\tfor ($i = 0; $i\
    \ < $arrayLengthMinusOne; $i++) {\n\t\tfor ($j = $i + 1; $j < $arrayLength; $j++)\
    \ {\n\t\t\tif ($l[$i] + $l[$j] == 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\
    \t}\n\treturn false;\n}\n", "  if (sizeof($l) < 2) {\n    return false;\n  }\n\
    \n  $s = [];\n  for ($i = 0; $i < sizeof($l); $i++) {\n    for ($j = $i + 1; $j\
    \ < sizeof($l); $j++) {\n      $s[] = [$l[$i], $l[$j]];\n    }\n  }\n\n  for ($i\
    \ = 0; $i < sizeof($s); $i++) {\n    if (array_sum($s[$i]) == 0) {\n      return\
    \ true;\n    }\n  }\n\n  return false;\n}\n", "  // your code here\n}\n", "\t\
    $f = [];\n\tforeach ($l as $v) {\n\t\tif (isset($f[-$v])) {\n\t\t\treturn true;\n\
    \t\t}\n\t\t$f[$v] = 1;\n\t}\n\treturn false;\n}\n", "    // Your code here\n}\n",
  "\n}\n", "\t// Your code here\n\treturn FALSE;\n}", "\t$l2 = array();\n\tforeach\
    \ ($l as $value) {\n\t\t$l2[] = -$value;\n\t}\n\treturn count(array_intersect($l,\
    \ $l2)) > 0;\n}\n", "    // your code here\n}\n", "  if (empty($l)) {\n    return\
    \ false;\n  }\n\n  $result = [];\n  for ($i = 0; $i < count($l); $i++) {\n   \
    \ $result[$l[$i]] = $l[$i];\n  }\n\n  foreach ($result as $k => $v) {\n    if\
    \ (array_key_exists($k, $result)) {\n      return true;\n    }\n  }\n\n  return\
    \ false;\n}\n", "    // Write your code here\n    // To print results to the standard\
    \ output you can use print\n    // Example: print \"Hello world!\";\n}", "   \
    \ $pairs = [];\n    foreach ($l as $v) {\n        if (isset($pairs[-$v])) return\
    \ true;\n        $pairs[$v] = $v;\n    }\n    return false;\n}\n", "    // ...\n\
    }", "  // Finish this one on your own!\n  return false;\n}\n", "    $dict = array();\n\
    \    foreach ($l as $value) {\n        if (array_key_exists(-$value, $dict)) {\n\
    \            return true;\n        }\n        $dict[$value] = true;\n    }\n \
    \   return false;\n}\n", "\t// TODO: fill this in\n}", "\t// TODO: Write your\
    \ code here\n}", "\tif (count($l) < 2) {\n\t\treturn false;\n\t}\n\t$h = array();\n\
    \tfor ($i = 0; $i < count($l); $i++) {\n\t\t$n = $l[$i];\n\t\tif (array_key_exists($n,\
    \ $h)) {\n\t\t\treturn true;\n\t\t}\n\t\telse {\n\t\t\t$h[-$n] = true;\n\t\t}\n\
    \t}\n\treturn false;\n}\n", "  return false;\n}", "  sort($l);\n  $low = 0;\n\
    \  $high = count($l) - 1;\n  while ($low < $high) {\n    $sum = $l[$low] + $l[$high];\n\
    \    if ($sum == 0) {\n      return true;\n    } else if ($sum < 0) {\n      $low++;\n\
    \    } else {\n      $high--;\n    }\n  }\n  return false;\n}\n", "\t// takes\
    \ O(n^2) time\n\tforeach ($l as $value1) {\n\t\tforeach ($l as $value2) {\n\t\t\
    \tif ($value1 + $value2 == 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\t\
    return false;\n}\n", "  $found = 0;\n  foreach ($l as $el) {\n    if (isset($el_index[-$el]))\
    \ {\n      $found++;\n    }\n    $el_index[$el] = 1;\n  }\n  return $found > 0;\n\
    }\n\nif (!check_test_pairs_sum_to_zero()) {\n  print(\"Test for pairs_sum_to_zero\
    \ failed.\\n\");\n} else {\n  print(\"Test for pairs_sum_to_zero passed.\\n\"\
    );\n}\n", "  $ar = array();\n  foreach ($l as $i) {\n    if (isset($ar[$i])) {\n\
    \      return true;\n    }\n    $ar[-$i] = 1;\n  }\n  return false;\n}\n", " \
    \   return max($l) == min($l);\n}", "}\n", "  $vals = array();\n  foreach ($l\
    \ as $v) {\n    if (array_key_exists(-$v, $vals)) {\n      return true;\n    }\n\
    \    $vals[$v] = $v;\n  }\n  return false;\n}\n", "\t// your code here\n\treturn\
    \ false;\n}\n", "    foreach ($l as $i) {\n        if (in_array(-$i, $l)) {\n\
    \            return true;\n        }\n    }\n    return false;\n}\n", "  // TODO:\
    \ you know what to do.\n  return false;\n}\n", "\t$len = count($l);\n\tif ($len\
    \ < 2) {\n\t\treturn false;\n\t}\n\t// if there is a zero in the array, we know\
    \ that at least two elements\n\t// sum to zero.\n\tif (in_array(0, $l)) {\n\t\t\
    return true;\n\t}\n\t$seen = array();\n\tfor ($i = 0; $i < $len; $i++) {\n\t\t\
    if (in_array($l[$i], $seen)) {\n\t\t\treturn true;\n\t\t}\n\t\t$seen[] = -1 *\
    \ $l[$i];\n\t}\n\treturn false;\n}\n", "  // TODO: your code here\n  // use function\
    \ to determine if there are duplicate values\n  $dupes = array_unique($l);\n \
    \ // check if the array length is the same if it is there are no dupes\n  if (count($l)\
    \ === count($dupes)) {\n  \t// loop through the array\n  \tfor ($i=0; $i < count($l);\
    \ $i++) { \n  \t\t// this will equal the current value\n  \t\t$current = $l[$i];\n\
    \  \t\t// remove the current value\n  \t\tunset($l[$i]);\n  \t\t// loop through\
    \ and check if the negative number exists\n  \t\tfor ($j=0; $j < count($l); $j++)\
    \ { \n  \t\t\tif (in_array(-$current, $l)) {\n  \t\t\t\treturn true;\n  \t\t\t\
    }\n  \t\t}\n  \t}\n  }\n\n  return false;\n}\n", "  // check if the array has\
    \ only one element.\n  if (count($l) == 1) {\n    return false;\n  }\n\n  // create\
    \ an empty associative array.\n  $buffer = array();\n\n  // populate the associative\
    \ array with negative values from the list.\n  foreach ($l as $value) {\n    $buffer[-$value]\
    \ = -$value;\n  }\n\n  // check if the list contains a key, which is also a value.\n\
    \  foreach ($l as $value) {\n    if (array_key_exists($value, $buffer)) {\n  \
    \    return true;\n    }\n  }\n\n  return false;\n}\n", "  // Write your code\
    \ here\n}", "  // first sort the list\n  sort($l);\n  // set up two pointers,\
    \ called i and j.\n  // i should point to the first element in the list,\n  //\
    \ and j should point to the last element in the list.\n  $i = 0;\n  $j = count($l)\
    \ - 1;\n  // as long as i is less than j, we need to check to see if the sum\n\
    \  // of the elements at index i and index j is zero.\n  while ($i < $j) {\n \
    \   // if the sum is 0, return true.\n    if ($l[$i] + $l[$j] == 0) {\n      return\
    \ true;\n    }\n    // otherwise, if the sum is positive, move the element in\
    \ j back by one.\n    else if ($l[$i] + $l[$j] > 0) {\n      $j--;\n    }\n  \
    \  // otherwise, if the sum is negative, move the element in i forward by one.\n\
    \    else {\n      $i++;\n    }\n  }\n  // if we get to this point, then we never\
    \ found a sum of zero.\n  // return false.\n  return false;\n}\n\n$l = array(1,\
    \ 2, 3, 7);\nprint_r($l);\necho pairs_sum_to_zero($l) . \"\\n\";\n$l = array(2,\
    \ 4, -5, 3, 5, 7);\nprint_r($l);\necho pairs_sum_to_zero($l) . \"\\n\";", "  \
    \  for ($i = 0; $i < count($l); $i++) {\n        for ($j = $i + 1; $j < count($l);\
    \ $j++) {\n            if ($l[$i] + $l[$j] == 0) {\n                return true;\n\
    \            }\n        }\n    }\n    return false;\n}\n", "    if (count($l)\
    \ < 2) {\n        return false;\n    }\n    foreach ($l as $v) {\n        if (in_array(-$v,\
    \ $l)) {\n            return true;\n        }\n    }\n    return false;\n}\n",
  "    // Remove the following line when you start working on the function.\n    return\
    \ false;\n}\n", "  foreach ($l as $k => $v) {\n    if (in_array(-$v, $l)) {\n\
    \      return true;\n    }\n  }\n  return false;\n}\n", "\t\n\t// O(nlogn)\n\t\
    // sort the array first\n\tsort($l);\n\t\n\t// define head and tail pointers\n\
    \t$head = 0;\n\t$tail = count($l) - 1;\n\t\n\t// keep going until the two pointers\
    \ cross\n\twhile ($head < $tail) {\n\t\t$head_el = $l[$head];\n\t\t$tail_el =\
    \ $l[$tail];\n\t\t$sum = $head_el + $tail_el;\n\t\t\n\t\t// if the sum is greater\
    \ than zero, we need to decrement the tail pointer\n\t\tif ($sum > 0) {\n\t\t\t\
    $tail--;\n\t\t// if the sum is less than zero, we need to increment the head pointer\n\
    \t\t} else if ($sum < 0) {\n\t\t\t$head++;\n\t\t// if the sum is zero, we can\
    \ stop looking. we have a pair!\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t}\n\
    \t\n\t// if we run out of elements, no pair exists\n\treturn false;\n}\n", " \
    \   // your solution here\n}", "  if (count($l) < 2) {\n    return false;\n  }\n\
    \  sort($l);\n  for ($i = 0; $i < count($l); $i++) {\n    $target = -$l[$i];\n\
    \    $left = $i + 1;\n    $right = count($l) - 1;\n    while ($left < $right)\
    \ {\n      $sum = $l[$left] + $l[$right];\n      if ($sum < $target) {\n     \
    \   $left++;\n      } else if ($sum > $target) {\n        $right--;\n      } else\
    \ {\n        return true;\n      }\n    }\n  }\n  return false;\n}", "  $count\
    \ = 0;\n  foreach ($l as $key => $value) {\n    $count++;\n  }\n  if ($count <\
    \ 2) {\n    return false;\n  }\n  foreach ($l as $key => $value) {\n    for ($i\
    \ = 0; $i < $count - 1; $i++) {\n      if (($l[$key] + $l[$i]) == 0) {\n     \
    \   return true;\n      }\n    }\n  }\n  return false;\n}\necho pairs_sum_to_zero(array(1,3,5,0));\n\
    echo pairs_sum_to_zero(array(1,3,-2,1));\necho pairs_sum_to_zero(array(1,2,3,7));\n\
    echo pairs_sum_to_zero(array(2,4,-5,3,5,7));\necho pairs_sum_to_zero(array(1));",
  "    // TODO: implement me\n    return false;\n}", "    // YOUR CODE HERE\n    for\
    \ ($i = 0; $i < count($l); $i++) {\n        for ($j = $i + 1; $j < count($l);\
    \ $j++) {\n            if ($l[$i] + $l[$j] == 0) {\n                return true;\n\
    \            }\n        }\n    }\n    return false;\n}\n", "  foreach ($l as $v)\
    \ {\n    $val = -$v;\n    if (in_array($val, $l)) {\n      return true;\n    }\n\
    \  }\n  return false;\n}\n", "\t// Write your code here.\n\t$count = count($l);\n\
    \tif ($count < 2) return false;\n\t$i = 0;\n\t$j = $count - 1;\n\tsort($l);\n\t\
    while ($i < $j) {\n\t\t$sum = $l[$i] + $l[$j];\n\t\tif ($sum == 0) return true;\n\
    \t\telse if ($sum > 0) $j--;\n\t\telse $i++;\n\t}\n\treturn false;\n}\n", "  if\
    \ (count($l) < 2) return false;\n  $matches = array();\n  foreach ($l as $value)\
    \ {\n    if (in_array(-$value, $matches)) return true;\n    $matches[] = $value;\n\
    \  }\n  return false;\n}\n", "\t$found = false;\n\tfor ($i = 0; $i < count($l)\
    \ - 1; $i++) {\n\t\tfor ($j = $i + 1; $j < count($l); $j++) {\n\t\t\tif ($l[$i]\
    \ + $l[$j] == 0) {\n\t\t\t\t$found = true;\n\t\t\t}\n\t\t}\n\t}\n\treturn $found;\n\
    }", "    // your code here\n    $n = count($l);\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        for ($j = $i + 1; $j < $n; $j++) {\n            if ($l[$i] + $l[$j]\
    \ == 0) {\n                return true;\n            }\n        }\n    }\n   \
    \ return false;\n}\n\n$l = array(2, 4, -5, 3, 5, 7);\necho pairs_sum_to_zero($l);",
  "\t\n\t$elements = count($l);\n\t\n\tif ($elements < 2) {\n\t\treturn false;\n\t\
    }\n\t\n\tsort($l);\n\t\n\t$low = 0;\n\t$high = $elements - 1;\n\t\n\twhile ($low\
    \ < $high) {\n\t\t$sum = $l[$low] + $l[$high];\n\t\tif ($sum == 0) {\n\t\t\treturn\
    \ true;\n\t\t} elseif ($sum > 0) {\n\t\t\t$high--;\n\t\t} else {\n\t\t\t$low++;\n\
    \t\t}\n\t}\n\t\n\treturn false;\n}\n", "\t$count = 0;\n\t$i = 0;\n\t$length =\
    \ count($l);\n\twhile ($i < $length) {\n\t\t$j = $i + 1;\n\t\twhile ($j < $length)\
    \ {\n\t\t\tif ($l[$i] + $l[$j] == 0) {\n\t\t\t\t$count++;\n\t\t\t}\n\t\t\t$j++;\n\
    \t\t}\n\t\t$i++;\n\t}\n\tif ($count > 0) {\n\t\treturn true;\n\t} else {\n\t\t\
    return false;\n\t}\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
