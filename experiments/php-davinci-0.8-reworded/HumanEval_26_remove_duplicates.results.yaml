language: php
name: HumanEval_26_remove_duplicates
results:
- exit_code: 0
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $length = count($numbers);\n    $result = array();\n    for ($i = 0;\
    \ $i < $length; $i++) {\n        $is_unique = true;\n        for ($j = 0; $j <\
    \ $length; $j++) {\n            if ($i !== $j && $numbers[$i] === $numbers[$j])\
    \ {\n                $is_unique = false;\n                break;\n           \
    \ }\n        }\n        if ($is_unique) {\n            $result[] = $numbers[$i];\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823541
- exit_code: 0
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $unique = array();\n    $unique_elements = array();\n    foreach ($numbers\
    \ as $number) {\n        if (!isset($unique[$number])) {\n            $unique[$number]\
    \ = 0;\n        }\n        $unique[$number]++;\n    }\n    foreach ($unique as\
    \ $number => $occurrences) {\n        if ($occurrences == 1) {\n            $unique_elements[]\
    \ = $number;\n        }\n    }\n    return $unique_elements;\n}\n$result = remove_duplicates(array(1,\
    \ 2, 3, 2, 4));\necho \"$result[0], $result[1], $result[2]\\n\";\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1, 3, 4

    '
  timestamp: 1659823541
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $result = array();\n    foreach ($numbers as $number) {\n        if (!in_array($number,\
    \ $result)) {\n            $result[] = $number;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0clzbs5l.php:23\n\
    Stack trace:\n#0 /tmp/tmp0clzbs5l.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp0clzbs5l.php\
    \ on line 23\n"
  timestamp: 1659823541
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $uniques = array();\n    foreach ($numbers as $number) {\n        if\
    \ (! in_array($number, $uniques)) {\n            $uniques[] = $number;\n     \
    \   }\n    }\n    return $uniques;\n}\n\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvfi9prwl.php:23\n\
    Stack trace:\n#0 /tmp/tmpvfi9prwl.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpvfi9prwl.php\
    \ on line 23\n"
  timestamp: 1659823541
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  // your code here\n  $size = count($numbers);\n  $num_index = 0;\n  $last_num_index\
    \ = 0;\n  $not_dupe = [];\n  $is_dupe = false;\n  while ($num_index < $size) {\n\
    \    $key = $numbers[$num_index];\n    if (!isset($not_dupe[$key])) {\n      $not_dupe[$key]\
    \ = true;\n      $last_num_index = $num_index;\n    } else {\n      $numbers[$num_index]\
    \ = $numbers[$last_num_index];\n      $numbers[$last_num_index] = $key;\n    \
    \  $last_num_index = $last_num_index - 1;\n    }\n    $num_index = $num_index\
    \ + 1;\n  }\n  return array_slice($numbers, 0, $last_num_index + 1);\n}\n\n$numbers\
    \ = [1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n$numbers = remove_duplicates($numbers);\n\
    print_r($numbers);\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprj2nbpyx.php:38\n\
    Stack trace:\n#0 /tmp/tmprj2nbpyx.php(41): test()\n#1 {main}\n  thrown in /tmp/tmprj2nbpyx.php\
    \ on line 38\n"
  timestamp: 1659823541
- exit_code: 0
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n\t$unique_numbers = array();\n\t$numbers_counts = array_count_values($numbers);\n\
    \tforeach ($numbers_counts as $number => $count) {\n\t\tif ($count === 1) {\n\t\
    \t\t$unique_numbers[] = $number;\n\t\t}\n\t}\n\treturn $unique_numbers;\n}\n\n\
    var_dump(remove_duplicates(array(1, 2, 3, 2, 4)));\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "array(3) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(3)\n  [2]=>\n  int(4)\n}\n"
  timestamp: 1659823541
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $out = array();\n    foreach ($numbers as $num) {\n        if (!in_array($num,\
    \ $out)) {\n            $out[] = $num;\n        }\n    }\n    return $out;\n}\n\
    \nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcheip02g.php:23\n\
    Stack trace:\n#0 /tmp/tmpcheip02g.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpcheip02g.php\
    \ on line 23\n"
  timestamp: 1659823541
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $unique = array();\n    $result = array();\n    foreach ($numbers as\
    \ $number) {\n        if (!in_array($number, $unique)) {\n            $unique[]\
    \ = $number;\n            $result[] = $number;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvlllqgwf.php:25\n\
    Stack trace:\n#0 /tmp/tmpvlllqgwf.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpvlllqgwf.php\
    \ on line 25\n"
  timestamp: 1659823541
- exit_code: 0
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    // $results = array();\n    // foreach ($numbers as $number) {\n    //\
    \     if (!isset($count[$number])) {\n    //         $count[$number] = 0;\n  \
    \  //     }\n    //     $count[$number]++;\n    // }\n    // foreach ($count as\
    \ $number => $occurrences) {\n    //     if ($occurrences == 1) {\n    //    \
    \     $results[] = $number;\n    //     }\n    // }\n    // return $results;\n\
    \n    $count = array_count_values($numbers);\n    return array_keys($count, 1);\n\
    }\n\n$res = remove_duplicates(array(1, 2, 3, 2, 4));\nvar_dump($res);\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "array(3) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(3)\n  [2]=>\n  int(4)\n}\n"
  timestamp: 1659823541
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $output = array();\n  $hash = array();\n  foreach ($numbers as $number)\
    \ {\n    if (!array_key_exists($number, $hash)) {\n      $hash[$number] = 1;\n\
    \      $output[] = $number;\n    }\n  }\n  return $output;\n}\n$input = array(1,\
    \ 2, 3, 2, 4);\nvar_dump(remove_duplicates($input));\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(4) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(2)\n  [2]=>\n  int(3)\n \
    \ [3]=>\n  int(4)\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv65rzrqg.php:26\n\
    Stack trace:\n#0 /tmp/tmpv65rzrqg.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpv65rzrqg.php\
    \ on line 26\n"
  timestamp: 1659823541
- exit_code: 0
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n\t$data = [];\n\t$duplicate = [];\n\t$end = count($numbers);\n\tfor ($i =\
    \ 0; $i < $end; $i++) {\n\t\t$index = array_search($numbers[$i], $data);\n\t\t\
    if ($index !== false) {\n\t\t\t$duplicate[] = $numbers[$i];\n\t\t} else {\n\t\t\
    \t$data[] = $numbers[$i];\n\t\t}\n\t}\n\t$temp = [];\n\tforeach ($data as $value)\
    \ {\n\t\tif (!in_array($value, $duplicate)) {\n\t\t\t$temp[] = $value;\n\t\t}\n\
    \t}\n\treturn $temp;\n}\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823541
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $output = array();\n    foreach ($numbers as $number) {\n        if (!in_array($number,\
    \ $output)) {\n            $output[] = $number;\n        }\n    }\n    return\
    \ $output;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyyll7ddf.php:23\n\
    Stack trace:\n#0 /tmp/tmpyyll7ddf.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpyyll7ddf.php\
    \ on line 23\n"
  timestamp: 1659823541
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $temp = array();\n    $result = array();\n    foreach ($numbers as $number)\
    \ {\n        if (in_array($number, $temp)) {\n            if (!in_array($number,\
    \ $result)) {\n                $result[] = $number;\n            }\n        }\
    \ else {\n            $temp[] = $number;\n        }\n    }\n    return $result;\n\
    }\n\n$a = array(1, 2, 3, 2, 4);\nvar_dump(remove_duplicates($a));\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(1) {\n  [0]=>\n  int(2)\n}\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpnief4dsy.php:29\nStack trace:\n#0 /tmp/tmpnief4dsy.php(33):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpnief4dsy.php on line 29\n"
  timestamp: 1659823541
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n\t$count = array_count_values($numbers);\n\treturn array_filter($numbers,\
    \ function($element) use ($count) {\n\t\treturn $count[$element] == 1;\n\t});\n\
    }\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprz4fl_r2.php:20\n\
    Stack trace:\n#0 /tmp/tmprz4fl_r2.php(23): test()\n#1 {main}\n  thrown in /tmp/tmprz4fl_r2.php\
    \ on line 20\n"
  timestamp: 1659823541
- exit_code: 0
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  // TODO: Complete function\n  $newArr = [];\n  $counter = 0;\n  for ($i\
    \ = 0; $i < count($numbers); $i++) {\n    for ($j = 0; $j < count($numbers); $j++)\
    \ {\n      if ($numbers[$i] == $numbers[$j]) {\n        $counter++;\n      }\n\
    \    }\n    if ($counter <= 1) {\n      array_push($newArr, $numbers[$i]);\n \
    \   }\n    $counter = 0;\n  }\n  return $newArr;\n}\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823541
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $unique_numbers = array();\n  foreach ($numbers as $number) {\n    if (!in_array($number,\
    \ $unique_numbers)) {\n      $unique_numbers[] = $number;\n    }\n  }\n  return\
    \ $unique_numbers;\n}\n\nassert_options(ASSERT_BAIL, 1);\nassert(remove_duplicates(array(1,\
    \ 2, 3, 2, 4)) == array(1, 3, 4));\necho \"All tests pass\\n\";\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught AssertionError: assert(remove_duplicates([1, 2,\
    \ 3, 2, 4]) == [1, 3, 4]) in /tmp/tmp6aekrm1h.php:17\nStack trace:\n#0 /tmp/tmp6aekrm1h.php(17):\
    \ assert(false, 'assert(remove_d...')\n#1 {main}\n  thrown in /tmp/tmp6aekrm1h.php\
    \ on line 17\n"
  timestamp: 1659823541
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n\t$counts = array_count_values($numbers);\n\tforeach ($counts as $key =>\
    \ $value) {\n\t\tif ($value > 1) {\n\t\t\tunset($numbers[array_search($key, $numbers)]);\n\
    \t\t}\n\t}\n\treturn $numbers;\n}\n\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprnhkhfv5.php:23\n\
    Stack trace:\n#0 /tmp/tmprnhkhfv5.php(26): test()\n#1 {main}\n  thrown in /tmp/tmprnhkhfv5.php\
    \ on line 23\n"
  timestamp: 1659823541
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $numbers = array_values(array_unique($numbers));\n    return $numbers;\n\
    }\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpogty9lao.php:18\n\
    Stack trace:\n#0 /tmp/tmpogty9lao.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpogty9lao.php\
    \ on line 18\n"
  timestamp: 1659823541
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $array = [];\n  foreach ($numbers as $key => $value) {\n    if (!in_array($value,\
    \ $array)) {\n      $array[] = $value;\n    }\n  }\n  return $array;\n}\n$array\
    \ = [1, 2, 3, 2, 4];\necho '<pre>';\nprint_r(remove_duplicates($array));\necho\
    \ '</pre>';\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n\
    )\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo53mm7zj.php:27\n\
    Stack trace:\n#0 /tmp/tmpo53mm7zj.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpo53mm7zj.php\
    \ on line 27\n"
  timestamp: 1659823541
- exit_code: 0
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $unique_numbers = array();\n    $duplicate_numbers = array();\n    foreach\
    \ ($numbers as $number) {\n        if (array_key_exists($number, $unique_numbers))\
    \ {\n            $duplicate_numbers[$number] = $number;\n        } else {\n  \
    \          $unique_numbers[$number] = $number;\n        }\n    }\n    $output\
    \ = array();\n    foreach ($numbers as $number) {\n        if (!array_key_exists($number,\
    \ $duplicate_numbers)) {\n            $output[] = $number;\n        }\n    }\n\
    \    return $output;\n}\n\necho \"\\n\";\necho \"input: array(1, 2, 3, 2, 4)\\\
    n\";\necho \"output: \\n\";\nprint_r(remove_duplicates(array(1, 2, 3, 2, 4)));\n\
    echo \"\\n\";\necho \"input: array(1, 2, 3, 4, 1, 2, 4, 3)\\n\";\necho \"output:\
    \ \\n\";\nprint_r(remove_duplicates(array(1, 2, 3, 4, 1, 2, 4, 3)));\necho \"\\\
    n\";\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "\ninput: array(1, 2, 3, 2, 4)\noutput: \nArray\n(\n    [0] => 1\n    [1]\
    \ => 3\n    [2] => 4\n)\n\ninput: array(1, 2, 3, 4, 1, 2, 4, 3)\noutput: \nArray\n\
    (\n)\n\n"
  timestamp: 1659823541
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $result = array();\n  $tmp = array();\n  foreach ($numbers as $number)\
    \ {\n    if (!in_array($number, $tmp)) {\n      $tmp[] = $number;\n      $result[]\
    \ = $number;\n    }\n  }\n  return $result;\n}\n$numbers = array(1, 2, 3, 2, 4);\n\
    $result = remove_duplicates($numbers);\nvar_dump($result);\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(4) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(2)\n  [2]=>\n  int(3)\n \
    \ [3]=>\n  int(4)\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcysxf5kw.php:27\n\
    Stack trace:\n#0 /tmp/tmpcysxf5kw.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpcysxf5kw.php\
    \ on line 27\n"
  timestamp: 1659978686
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $result = array();\n  $uniques = array();\n  foreach ($numbers as $number)\
    \ {\n    if (!in_array($number, $uniques)) {\n      $uniques[] = $number;\n  \
    \    $result[] = $number;\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp17q0756l.php:25\n\
    Stack trace:\n#0 /tmp/tmp17q0756l.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp17q0756l.php\
    \ on line 25\n"
  timestamp: 1659978686
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $i = 0;\n  $counter = count($numbers);\n  while ($i < $counter) {\n   \
    \ $j = $i + 1;\n    while ($j < $counter) {\n      if ($numbers[$i] == $numbers[$j])\
    \ {\n        unset($numbers[$j]);\n        $counter--;\n      }\n      $j++;\n\
    \    }\n    $i++;\n  }\n  $numbers = array_values($numbers);\n  return $numbers;\n\
    }\n\n$numbers = array(1, 2, 3, 2, 4);\nvar_dump(remove_duplicates($numbers));\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 3 in /tmp/tmp4p5b3oma.php on line 12\narray(4)\
    \ {\n  [0]=>\n  int(1)\n  [1]=>\n  int(2)\n  [2]=>\n  int(3)\n  [3]=>\n  int(4)\n\
    }\n\nWarning: Undefined array key 3 in /tmp/tmp4p5b3oma.php on line 12\n\nWarning:\
    \ Undefined array key 3 in /tmp/tmp4p5b3oma.php on line 12\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp4p5b3oma.php:33\nStack trace:\n#0 /tmp/tmp4p5b3oma.php(36):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp4p5b3oma.php on line 33\n"
  timestamp: 1659978686
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $numbers_tmp = array();\n    $result = array();\n    foreach ($numbers\
    \ as $number) {\n        if (!in_array($number, $numbers_tmp)) {\n           \
    \ $numbers_tmp[] = $number;\n            $result[] = $number;\n        }\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7_yoepva.php:25\n\
    Stack trace:\n#0 /tmp/tmp7_yoepva.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp7_yoepva.php\
    \ on line 25\n"
  timestamp: 1659978686
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $result = array();\n    foreach ($numbers as $number) {\n        if (!\
    \ in_array($number, $result)) {\n            $result[] = $number;\n        }\n\
    \    }\n    return $result;\n}\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpptbbmmpx.php:22\n\
    Stack trace:\n#0 /tmp/tmpptbbmmpx.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpptbbmmpx.php\
    \ on line 22\n"
  timestamp: 1659978686
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n\t$results = array();\n\tforeach ($numbers as $number) {\n\t\tif (!in_array($number,\
    \ $results)) {\n\t\t\t$results[] = $number;\n\t\t}\n\t}\n\treturn $results;\n\
    }\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqhminmc2.php:22\n\
    Stack trace:\n#0 /tmp/tmpqhminmc2.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpqhminmc2.php\
    \ on line 22\n"
  timestamp: 1659978686
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $elements = array();\n    $result = array();\n    foreach ($numbers as\
    \ $number) {\n        if (!in_array($number, $elements)) {\n            $elements[]\
    \ = $number;\n            $result[] = $number;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf615os6v.php:25\n\
    Stack trace:\n#0 /tmp/tmpf615os6v.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpf615os6v.php\
    \ on line 25\n"
  timestamp: 1659978686
- exit_code: 0
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $output = array();\n    $counter = array();\n    foreach ($numbers as\
    \ $number) {\n        if (isset($counter[$number])) {\n            $counter[$number]\
    \ += 1;\n        } else {\n            $counter[$number] = 1;\n        }\n   \
    \ }\n    foreach ($numbers as $number) {\n        if ($counter[$number] == 1)\
    \ {\n            $output[] = $number;\n        }\n    }\n    return $output;\n\
    }\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978687
- exit_code: 0
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $result = array();\n  foreach ($numbers as $number) {\n    if (!isset($result[$number]))\
    \ {\n      $result[$number] = 1;\n    } else {\n      $result[$number] += 1;\n\
    \    }\n  }\n  return array_keys(array_filter($result, function($v) { return $v\
    \ == 1; }));\n}\n\nprint_r(remove_duplicates(array(1, 2, 3, 2, 4)));\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 3\n    [2] => 4\n)\n"
  timestamp: 1659978686
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n\t$uniques = array();\n\tforeach ($numbers as $number) {\n\t\tif (!in_array($number,\
    \ $uniques)) {\n\t\t\t$uniques[] = $number;\n\t\t}\n\t}\n\treturn $uniques;\n\
    }\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm5_8us2d.php:23\n\
    Stack trace:\n#0 /tmp/tmpm5_8us2d.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpm5_8us2d.php\
    \ on line 23\n"
  timestamp: 1659978686
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $result = array();\n  $duplicates = array();\n  foreach ($numbers as $number)\
    \ {\n    if (in_array($number, $result)) {\n      $duplicates[] = $number;\n \
    \   } else {\n      $result[] = $number;\n    }\n  }\n  foreach ($duplicates as\
    \ $duplicate) {\n    $key = array_search($duplicate, $result);\n    unset($result[$key]);\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp03xtwndd.php:30\n\
    Stack trace:\n#0 /tmp/tmp03xtwndd.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp03xtwndd.php\
    \ on line 30\n"
  timestamp: 1659978686
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $result = array();\n  foreach ($numbers as $number) {\n    if (!in_array($number,\
    \ $result)) {\n      $result[] = $number;\n    }\n  }\n  return $result;\n}\n\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpggi1ipxg.php:23\n\
    Stack trace:\n#0 /tmp/tmpggi1ipxg.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpggi1ipxg.php\
    \ on line 23\n"
  timestamp: 1659978687
- exit_code: 0
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $numbers_counter = array_count_values($numbers);\n  $result = array();\n\
    \  foreach ($numbers_counter as $number => $count) {\n    if ($count === 1) {\n\
    \      $result[] = $number;\n    }\n  }\n  return $result;\n}\nprint_r(remove_duplicates(array(1,\
    \ 2, 3, 2, 4)));\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 3\n    [2] => 4\n)\n"
  timestamp: 1659978686
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n\t$ret = array();\n\tforeach ($numbers as $number) {\n\t\tif (!in_array($number,\
    \ $ret)) {\n\t\t\t$ret[] = $number;\n\t\t}\n\t}\n\treturn $ret;\n}\nprint_r(remove_duplicates(array(1,\
    \ 2, 3, 2, 4)));\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpcp0zh2g5.php:23\nStack\
    \ trace:\n#0 /tmp/tmpcp0zh2g5.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpcp0zh2g5.php\
    \ on line 23\n"
  timestamp: 1659978686
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $all_numbers = array();\n  $res = array();\n  for ($i = 0; $i < count($numbers);\
    \ $i++) {\n    if (!in_array($numbers[$i], $all_numbers)) {\n      $all_numbers[]\
    \ = $numbers[$i];\n      $res[] = $numbers[$i];\n    }\n  }\n  return $res;\n\
    }\n$numbers = array(1, 2, 3, 2, 4);\nvar_dump(remove_duplicates($numbers));\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(4) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(2)\n  [2]=>\n  int(3)\n \
    \ [3]=>\n  int(4)\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5v1n4_1y.php:26\n\
    Stack trace:\n#0 /tmp/tmp5v1n4_1y.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp5v1n4_1y.php\
    \ on line 26\n"
  timestamp: 1659978686
- exit_code: 0
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $filtered_numbers = array();\n  $occurences = array();\n  foreach ($numbers\
    \ as $number) {\n    if (!isset($occurences[$number])) {\n      $occurences[$number]\
    \ = 1;\n    } else {\n      $occurences[$number] += 1;\n    }\n  }\n  foreach\
    \ ($numbers as $number) {\n    if ($occurences[$number] == 1) {\n      $filtered_numbers[]\
    \ = $number;\n    }\n  }\n  return $filtered_numbers;\n}\n\nprint_r(remove_duplicates(array(1,\
    \ 2, 3, 2, 4)));\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 3\n    [2] => 4\n)\n"
  timestamp: 1659978686
- exit_code: 0
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $uniques = array();\n    foreach ($numbers as $number) {\n        if\
    \ (!isset($uniques[$number])) {\n            $uniques[$number] = 1;\n        }\
    \ else {\n            $uniques[$number] += 1;\n        }\n    }\n    foreach ($uniques\
    \ as $key => $value) {\n        if ($value > 1) {\n            unset($uniques[$key]);\n\
    \        }\n    }\n    return array_keys($uniques);\n}\n\necho \"----------remove_duplicates----------\\\
    n\";\nvar_dump(remove_duplicates(array(1, 2, 3, 2, 4)));\n\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "----------remove_duplicates----------\narray(3) {\n  [0]=>\n  int(1)\n\
    \  [1]=>\n  int(3)\n  [2]=>\n  int(4)\n}\n"
  timestamp: 1659978686
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n\t$unique_numbers = array();\n\tforeach ($numbers as $number) {\n\t\tif (!in_array($number,\
    \ $unique_numbers)) {\n\t\t\t$unique_numbers[] = $number;\n\t\t}\n\t}\n\treturn\
    \ $unique_numbers;\n}\necho PHP_EOL . 'remove_duplicates(array(1, 2, 3, 2, 4))'\
    \ . PHP_EOL;\nprint_r(remove_duplicates(array(1, 2, 3, 2, 4)));\necho PHP_EOL;\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nremove_duplicates(array(1, 2, 3, 2, 4))\nArray\n(\n    [0] => 1\n   \
    \ [1] => 2\n    [2] => 3\n    [3] => 4\n)\n\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp54hiv_gw.php:25\nStack trace:\n#0 /tmp/tmp54hiv_gw.php(28):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp54hiv_gw.php on line 25\n"
  timestamp: 1659978686
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $unique_numbers = array();\n  foreach ($numbers as $number) {\n    if (!in_array($number,\
    \ $unique_numbers)) {\n      $unique_numbers[] = $number;\n    }\n  }\n  return\
    \ $unique_numbers;\n}\n$numbers = array(1, 2, 3, 2, 4);\n$unique_numbers = remove_duplicates($numbers);\n\
    print_r($unique_numbers);\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmprbopjzyh.php:25\nStack\
    \ trace:\n#0 /tmp/tmprbopjzyh.php(28): test()\n#1 {main}\n  thrown in /tmp/tmprbopjzyh.php\
    \ on line 25\n"
  timestamp: 1659978686
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $numbers = array_unique($numbers);\n    return $numbers;\n}\n\nprint_r(remove_duplicates(array(1,\
    \ 2, 3, 2, 4)));\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [4] => 4\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp71x876rr.php:19\nStack\
    \ trace:\n#0 /tmp/tmp71x876rr.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp71x876rr.php\
    \ on line 19\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $unique_numbers = array();\n  foreach ($numbers as $number) {\n    if (!in_array($number,\
    \ $unique_numbers)) {\n      $unique_numbers[] = $number;\n    }\n  }\n  return\
    \ $unique_numbers;\n}\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_yifuj44.php:22\n\
    Stack trace:\n#0 /tmp/tmp_yifuj44.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp_yifuj44.php\
    \ on line 22\n"
  timestamp: 1659978686
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    return array_unique($numbers);\n}\n\nfunction candidate(...$args) {\n\
    \    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptcl8k4v2.php:17\n\
    Stack trace:\n#0 /tmp/tmptcl8k4v2.php(20): test()\n#1 {main}\n  thrown in /tmp/tmptcl8k4v2.php\
    \ on line 17\n"
  timestamp: 1659978686
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $numbers_no_dups = array();\n  foreach ($numbers as $number) {\n    $numbers_no_dups[$number]\
    \ = 1;\n  }\n  return array_keys($numbers_no_dups);\n}\n\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplept43q6.php:21\n\
    Stack trace:\n#0 /tmp/tmplept43q6.php(24): test()\n#1 {main}\n  thrown in /tmp/tmplept43q6.php\
    \ on line 21\n"
  timestamp: 1659978686
- exit_code: 0
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $hash = array();\n  foreach ($numbers as $number) {\n    if (!isset($hash[$number]))\
    \ {\n      $hash[$number] = 1;\n    } else {\n      $hash[$number]++;\n    }\n\
    \  }\n  $unique = array();\n  foreach ($numbers as $number) {\n    if ($hash[$number]\
    \ == 1) {\n      $unique[] = $number;\n    }\n  }\n  return $unique;\n}\n\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $uniques = array();\n    foreach ($numbers as $number) {\n        if\
    \ (!in_array($number, $uniques)) {\n            $uniques[] = $number;\n      \
    \  }\n    }\n    return $uniques;\n}\n\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwl55h30_.php:23\n\
    Stack trace:\n#0 /tmp/tmpwl55h30_.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpwl55h30_.php\
    \ on line 23\n"
  timestamp: 1659978687
- exit_code: 0
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $result = array();\n  $numbers_counted = array_count_values($numbers);\n\
    \  foreach ($numbers_counted as $number => $count) {\n    if ($count === 1) {\n\
    \      $result[] = $number;\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  // Your code here.\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_agekpl5.php:15\n\
    Stack trace:\n#0 /tmp/tmp_agekpl5.php(20): test()\n#1 {main}\n  thrown in /tmp/tmp_agekpl5.php\
    \ on line 15\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n\treturn array_unique($numbers);\n}\n\nfunction candidate(...$args) {\n \
    \   return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0t5_uaco.php:17\n\
    Stack trace:\n#0 /tmp/tmp0t5_uaco.php(20): test()\n#1 {main}\n  thrown in /tmp/tmp0t5_uaco.php\
    \ on line 17\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  if (count($numbers) == 0) {\n    return array();\n  }\n  $finalArray =\
    \ array();\n  foreach ($numbers as $key => $value) {\n    if (!in_array($value,\
    \ $finalArray)) {\n      $finalArray[] = $value;\n    }\n  }\n  return $finalArray;\n\
    }\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvs5jtxws.php:26\n\
    Stack trace:\n#0 /tmp/tmpvs5jtxws.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpvs5jtxws.php\
    \ on line 26\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $uniques = array();\n    foreach ($numbers as $num) {\n        if (!in_array($num,\
    \ $uniques)) {\n            $uniques[] = $num;\n        }\n    }\n    return $uniques;\n\
    }\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcf7udsit.php:23\n\
    Stack trace:\n#0 /tmp/tmpcf7udsit.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpcf7udsit.php\
    \ on line 23\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n\treturn array_unique($numbers);\n}\n\nfunction candidate(...$args) {\n \
    \   return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0t5_uaco.php:17\n\
    Stack trace:\n#0 /tmp/tmp0t5_uaco.php(20): test()\n#1 {main}\n  thrown in /tmp/tmp0t5_uaco.php\
    \ on line 17\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    // TODO\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzr8w2r58.php:15\n\
    Stack trace:\n#0 /tmp/tmpzr8w2r58.php(20): test()\n#1 {main}\n  thrown in /tmp/tmpzr8w2r58.php\
    \ on line 15\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n\tforeach ($numbers as $key => $value) {\n\t\t$numbers[$value] = 1;\n\t}\n\
    \t//echo \"numbers: \"; print_r($numbers); echo \"<br>\";\n\tforeach ($numbers\
    \ as $key => $value) {\n\t\t$result[$key] = $value;\n\t}\n\t//echo \"result: \"\
    ; print_r($result); echo \"<br>\";\n\treturn $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $result in /tmp/tmp9e6gzwdk.php on line 15\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9e6gzwdk.php:23\nStack\
    \ trace:\n#0 /tmp/tmp9e6gzwdk.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp9e6gzwdk.php\
    \ on line 23\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $unique = array();\n  foreach ($numbers as $number) {\n    if (!in_array($number,\
    \ $unique)) {\n      $unique[] = $number;\n    }\n  }\n  return $unique;\n}\n\n\
    $data = array(1, 2, 3, 2, 4);\n\nvar_dump(remove_duplicates($data));\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(4) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(2)\n  [2]=>\n  int(3)\n \
    \ [3]=>\n  int(4)\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsx1l8q0e.php:26\n\
    Stack trace:\n#0 /tmp/tmpsx1l8q0e.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpsx1l8q0e.php\
    \ on line 26\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $result = array();\n  $results = array();\n  $count = count($numbers);\n\
    \  for ($i = 0; $i < $count; $i++) {\n    $result[] = $numbers[$i];\n    $search_key\
    \ = array_search($numbers[$i], $numbers);\n    if ($search_key > $i) {\n     \
    \ $result = array_diff($result, array($numbers[$i]));\n    }\n  }\n  $result =\
    \ array_values($result);\n  return $result;\n}\necho '<pre>';\nprint_r(remove_duplicates(array(1,\
    \ 2, 3, 2, 4)));\necho '</pre>';\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 2\n\
    \    [4] => 4\n)\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplc8jt2hl.php:30\n\
    Stack trace:\n#0 /tmp/tmplc8jt2hl.php(33): test()\n#1 {main}\n  thrown in /tmp/tmplc8jt2hl.php\
    \ on line 30\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  // your code here\n}\n\nvar_dump(remove_duplicates(array(1, 2, 3, 2, 4)));\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "NULL\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgurthhad.php:16\n\
    Stack trace:\n#0 /tmp/tmpgurthhad.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpgurthhad.php\
    \ on line 16\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    // TODO: Implement me!\n}\n\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_solj1dw.php:15\n\
    Stack trace:\n#0 /tmp/tmp_solj1dw.php(20): test()\n#1 {main}\n  thrown in /tmp/tmp_solj1dw.php\
    \ on line 15\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  // $uniques = array();\n  // foreach ($numbers as $number) {\n  //   if\
    \ (!in_array($number, $uniques)) {\n  //     $uniques[] = $number;\n  //   }\n\
    \  // }\n  // return $uniques;\n\n  return array_unique($numbers);\n}\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppoj1f8ea.php:24\n\
    Stack trace:\n#0 /tmp/tmppoj1f8ea.php(27): test()\n#1 {main}\n  thrown in /tmp/tmppoj1f8ea.php\
    \ on line 24\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $numbers = array_unique($numbers);\n    return $numbers;\n}\n\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmj7qptgu.php:18\n\
    Stack trace:\n#0 /tmp/tmpmj7qptgu.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpmj7qptgu.php\
    \ on line 18\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    // Your solution here.\n}\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7kl7r12n.php:14\n\
    Stack trace:\n#0 /tmp/tmp7kl7r12n.php(19): test()\n#1 {main}\n  thrown in /tmp/tmp7kl7r12n.php\
    \ on line 14\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    return array_unique($numbers);\n}\n\nfunction candidate(...$args) {\n\
    \    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptcl8k4v2.php:17\n\
    Stack trace:\n#0 /tmp/tmptcl8k4v2.php(20): test()\n#1 {main}\n  thrown in /tmp/tmptcl8k4v2.php\
    \ on line 17\n"
  timestamp: 1659978686
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $result = array();\n  foreach ($numbers as $number) {\n    if (!in_array($number,\
    \ $result)) {\n      $result[] = $number;\n    }\n  }\n  return $result;\n}\n\
    $numbers = array(1, 2, 3, 2, 4);\nprint_r(remove_duplicates($numbers));\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpq71cyyzr.php:24\nStack\
    \ trace:\n#0 /tmp/tmpq71cyyzr.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpq71cyyzr.php\
    \ on line 24\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $unique_numbers = array();\n  foreach ($numbers as $number) {\n    if (in_array($number,\
    \ $unique_numbers)) {\n      continue;\n    }\n    $unique_numbers[] = $number;\n\
    \  }\n  return $unique_numbers;\n}\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvjpura6z.php:23\n\
    Stack trace:\n#0 /tmp/tmpvjpura6z.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpvjpura6z.php\
    \ on line 23\n"
  timestamp: 1659978687
- exit_code: 0
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $hash = array();\n  foreach ($numbers as $number) {\n    if (isset($hash[$number]))\
    \ {\n      $hash[$number] += 1;\n    } else {\n      $hash[$number] = 1;\n   \
    \ }\n  }\n  $output = array();\n  foreach ($numbers as $number) {\n    if ($hash[$number]\
    \ == 1) {\n      $output[] = $number;\n    }\n  }\n  return $output;\n}\n\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978687
- exit_code: 0
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $duplicates = array();\n  $no_duplicates = array();\n  foreach ($numbers\
    \ as $number) {\n    if (in_array($number, $no_duplicates)) {\n      array_push($duplicates,\
    \ $number);\n    } else {\n      array_push($no_duplicates, $number);\n    }\n\
    \  }\n  return array_values(array_diff($no_duplicates, $duplicates));\n}\necho\
    \ implode(', ', remove_duplicates(array(1, 2, 3, 2, 4)));\necho \"\\n\";\n\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1, 3, 4

    '
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $result = array();\n    for ($i = 0; $i < count($numbers); $i++) {\n\
    \        if (array_search($numbers[$i], $numbers) == $i) {\n            $result[]\
    \ = $numbers[$i];\n        }\n    }\n    return $result;\n}\necho implode(remove_duplicates(array(1,\
    \ 2, 3, 2, 4)), ',');\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: implode(): Argument #2 ($array) must\
    \ be of type ?array, string given in /tmp/tmp_izlba1k.php:15\nStack trace:\n#0\
    \ /tmp/tmp_izlba1k.php(15): implode(Array, ',')\n#1 {main}\n  thrown in /tmp/tmp_izlba1k.php\
    \ on line 15\n"
  timestamp: 1659978687
- exit_code: 0
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $duplicates = array();\n    $unique = array();\n    foreach ($numbers\
    \ as $number) {\n        if (array_key_exists($number, $duplicates)) {\n     \
    \       $duplicates[$number] += 1;\n        } else {\n            $duplicates[$number]\
    \ = 1;\n        }\n    }\n    foreach ($numbers as $number) {\n        if ($duplicates[$number]\
    \ == 1) {\n            $unique[] = $number;\n        }\n    }\n    return $unique;\n\
    }\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $unique = array();\n    foreach ($numbers as $number) {\n        if (!\
    \ in_array($number, $unique)) {\n            $unique[] = $number;\n        }\n\
    \    }\n    return $unique;\n}\n\n$numbers = array(1, 2, 3, 2, 4);\nprint_r(remove_duplicates($numbers));\n\
    \nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpllxvsvc3.php:26\nStack\
    \ trace:\n#0 /tmp/tmpllxvsvc3.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpllxvsvc3.php\
    \ on line 26\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n\t$uniques = array();\n\tforeach ($numbers as $number) {\n\t\tif (!in_array($number,\
    \ $uniques)) {\n\t\t\t$uniques[] = $number;\n\t\t}\n\t}\n\treturn $uniques;\n\
    }\n\n$numbers = array(1, 2, 3, 2, 4);\nprint_r(remove_duplicates($numbers));\n\
    \nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpkykm9m_7.php:26\nStack\
    \ trace:\n#0 /tmp/tmpkykm9m_7.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpkykm9m_7.php\
    \ on line 26\n"
  timestamp: 1659978687
- exit_code: 0
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $numbers = array_count_values($numbers);\n    $newArray = [];\n    foreach\
    \ ($numbers as $key => $value) {\n        if ($value == 1) {\n            $newArray[]\
    \ = $key;\n        }\n    }\n    return $newArray;\n}\n\necho '<h2>\u0423\u0434\
    \u0430\u043B\u0435\u043D\u0438\u0435 \u0434\u0443\u0431\u043B\u0438\u043A\u0430\
    \u0442\u043E\u0432 \u0438\u0437 \u043C\u0430\u0441\u0441\u0438\u0432\u0430</h2>';\n\
    $numbers = [1, 2, 3, 2, 4];\necho '<pre>';\nprint_r($numbers);\necho '</pre>';\n\
    $result = remove_duplicates($numbers);\necho '<pre>';\nprint_r($result);\necho\
    \ '</pre>';\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<h2>\u0423\u0434\u0430\u043B\u0435\u043D\u0438\u0435 \u0434\u0443\u0431\
    \u043B\u0438\u043A\u0430\u0442\u043E\u0432 \u0438\u0437 \u043C\u0430\u0441\u0441\
    \u0438\u0432\u0430</h2><pre>Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n\
    \    [3] => 2\n    [4] => 4\n)\n</pre><pre>Array\n(\n    [0] => 1\n    [1] =>\
    \ 3\n    [2] => 4\n)\n</pre>"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $unique = array();\n  foreach ($numbers as $number) {\n    if (!in_array($number,\
    \ $unique)) {\n      $unique[] = $number;\n    }\n  }\n  return $unique;\n}\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpenl96x3e.php:22\n\
    Stack trace:\n#0 /tmp/tmpenl96x3e.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpenl96x3e.php\
    \ on line 22\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $unique = array();\n    foreach ($numbers as $number) {\n        if (!in_array($number,\
    \ $unique)) {\n            $unique[] = $number;\n        }\n    }\n    return\
    \ $unique;\n}\n\n$array = array(1, 2, 3, 2, 4);\n$array = remove_duplicates($array);\n\
    echo implode(\", \", $array);\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1, 2, 3, 4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq_6kx9ob.php:26\n\
    Stack trace:\n#0 /tmp/tmpq_6kx9ob.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpq_6kx9ob.php\
    \ on line 26\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $temp_array = array();\n    $temp_array[0] = $numbers[0];\n    $i = 1;\n\
    \    for ($j = 1; $j < count($numbers); $j++) {\n        if ($numbers[$j] != $numbers[$j\
    \ - 1]) {\n            $temp_array[$i] = $numbers[$j];\n            $i++;\n  \
    \      }\n    }\n    return $temp_array;\n}\n\n$array = array(1, 2, 3, 2, 4);\n\
    var_dump(remove_duplicates($array));\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(5) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(2)\n  [2]=>\n  int(3)\n \
    \ [3]=>\n  int(2)\n  [4]=>\n  int(4)\n}\n\nWarning: Undefined array key 0 in /tmp/tmpjhgh6dl5.php\
    \ on line 8\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjhgh6dl5.php:26\n\
    Stack trace:\n#0 /tmp/tmpjhgh6dl5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpjhgh6dl5.php\
    \ on line 26\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  // Your code here.\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_agekpl5.php:15\n\
    Stack trace:\n#0 /tmp/tmp_agekpl5.php(20): test()\n#1 {main}\n  thrown in /tmp/tmp_agekpl5.php\
    \ on line 15\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $arr = array();\n    foreach ($numbers as $number) {\n        if (!in_array($number,\
    \ $arr)) {\n            $arr[] = $number;\n        }\n    }\n    return $arr;\n\
    }\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoqn7mdtp.php:23\n\
    Stack trace:\n#0 /tmp/tmpoqn7mdtp.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpoqn7mdtp.php\
    \ on line 23\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    // Your code here\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7l86rqu9.php:15\n\
    Stack trace:\n#0 /tmp/tmp7l86rqu9.php(20): test()\n#1 {main}\n  thrown in /tmp/tmp7l86rqu9.php\
    \ on line 15\n"
  timestamp: 1659978687
- exit_code: 0
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $myarray = array_count_values($numbers);\n  $newarray = array();\n  foreach\
    \ ($myarray as $key => $value) {\n    if ($value === 1) {\n      array_push($newarray,\
    \ $key);\n    }\n  }\n  return $newarray;\n}\necho '<pre>';\nvar_dump(remove_duplicates(array(1,\
    \ 2, 3, 2, 4)));\necho '</pre>';\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>array(3) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(3)\n  [2]=>\n  int(4)\n\
    }\n</pre>"
  timestamp: 1659978687
- exit_code: 0
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $result = array();\n    $counts = array_count_values($numbers);\n   \
    \ foreach ($numbers as $num) {\n        if ($counts[$num] == 1) {\n          \
    \  $result[] = $num;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $tmp = array();\n    foreach ($numbers as $number) {\n        if (!in_array($number,\
    \ $tmp)) {\n            $tmp[] = $number;\n        }\n    }\n    return $tmp;\n\
    }\necho json_encode(remove_duplicates(array(1, 2, 3, 2, 4)));\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "[1,2,3,4]\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnzg1_q4s.php:23\n\
    Stack trace:\n#0 /tmp/tmpnzg1_q4s.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpnzg1_q4s.php\
    \ on line 23\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n\t$new_array = array();\n\tforeach ($numbers as $number) {\n\t\tif ( !in_array($number,\
    \ $new_array) ) {\n\t\t\t$new_array[] = $number;\n\t\t}\n\t}\n\treturn $new_array;\n\
    }\n\n$test = array(1, 2, 3, 2, 4);\nprint_r(remove_duplicates($test));\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpx9jbn_88.php:25\nStack\
    \ trace:\n#0 /tmp/tmpx9jbn_88.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpx9jbn_88.php\
    \ on line 25\n"
  timestamp: 1659978687
- exit_code: 0
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $result = array();\n  $occurences = array();\n  foreach ($numbers as $num)\
    \ {\n    if (!array_key_exists($num, $occurences)) {\n      $occurences[$num]\
    \ = 1;\n    } else {\n      $occurences[$num]++;\n    }\n  }\n  foreach ($numbers\
    \ as $num) {\n    if ($occurences[$num] == 1) {\n      $result[] = $num;\n   \
    \ }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $result = array();\n    $unique = array();\n    foreach ($numbers as\
    \ $num) {\n        if (!isset($unique[$num])) {\n            $unique[$num] = true;\n\
    \            $result[] = $num;\n        }\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx8qgqns5.php:25\n\
    Stack trace:\n#0 /tmp/tmpx8qgqns5.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpx8qgqns5.php\
    \ on line 25\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    // Fill in the missing code.\n    $output_array = array();\n    $dupes\
    \ = array();\n    foreach ($numbers as $number) {\n        if (in_array($number,\
    \ $output_array)) {\n            $dupes[] = $number;\n        } else {\n     \
    \       $output_array[] = $number;\n        }\n    }\n    return array_diff($output_array,\
    \ $dupes);\n}\n\nvar_dump(remove_duplicates(array(1, 2, 3, 2, 4)));\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(3) {\n  [0]=>\n  int(1)\n  [2]=>\n  int(3)\n  [3]=>\n  int(4)\n}\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8jfw9lnd.php:28\nStack\
    \ trace:\n#0 /tmp/tmp8jfw9lnd.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp8jfw9lnd.php\
    \ on line 28\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $unique_numbers = array();\n  foreach ($numbers as $number) {\n    if (!in_array($number,\
    \ $unique_numbers)) {\n      $unique_numbers[] = $number;\n    }\n  }\n  return\
    \ $unique_numbers;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpta125p7v.php:23\n\
    Stack trace:\n#0 /tmp/tmpta125p7v.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpta125p7v.php\
    \ on line 23\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  return array_values(array_unique($numbers));\n}\n\necho json_encode(remove_duplicates(array(1,\
    \ 2, 3, 2, 4)));\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "[1,2,3,4]\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0xhnebw9.php:18\n\
    Stack trace:\n#0 /tmp/tmp0xhnebw9.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp0xhnebw9.php\
    \ on line 18\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  //...\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf_pbwta_.php:15\n\
    Stack trace:\n#0 /tmp/tmpf_pbwta_.php(20): test()\n#1 {main}\n  thrown in /tmp/tmpf_pbwta_.php\
    \ on line 15\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $unique = array();\n    foreach ($numbers as $number) {\n        if (!in_array($number,\
    \ $unique)) {\n            $unique[] = $number;\n        }\n    }\n    return\
    \ $unique;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8rdr9xxf.php:23\n\
    Stack trace:\n#0 /tmp/tmp8rdr9xxf.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp8rdr9xxf.php\
    \ on line 23\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $unique_numbers = array();\n    foreach ($numbers as $number) {\n   \
    \     if (count(array_keys($unique_numbers, $number)) == 0) {\n            $unique_numbers[]\
    \ = $number;\n        }\n    }\n    return $unique_numbers;\n}\n\nassert(remove_duplicates(array(1,\
    \ 2, 3, 2, 4)) == array(1, 3, 4));\n\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught AssertionError: assert(remove_duplicates([1, 2,\
    \ 3, 2, 4]) == [1, 3, 4]) in /tmp/tmpax_tj_8x.php:16\nStack trace:\n#0 /tmp/tmpax_tj_8x.php(16):\
    \ assert(false, 'assert(remove_d...')\n#1 {main}\n  thrown in /tmp/tmpax_tj_8x.php\
    \ on line 16\n"
  timestamp: 1659978687
- exit_code: 0
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $uniqueNumbers = [];\n    $numberCounts = [];\n    foreach ($numbers\
    \ as $number) {\n        if (!isset($numberCounts[$number])) {\n            $numberCounts[$number]\
    \ = 0;\n        }\n        $numberCounts[$number]++;\n    }\n    foreach ($numbers\
    \ as $number) {\n        if ($numberCounts[$number] === 1) {\n            $uniqueNumbers[]\
    \ = $number;\n        }\n    }\n    return $uniqueNumbers;\n}\necho \"Exercise\
    \ 1 results: <br />\";\necho \"<pre>\";\nprint_r(remove_duplicates([1, 2, 3, 2,\
    \ 4]));\necho \"</pre>\";\necho \"<hr />\";\n\nfunction candidate(...$args) {\n\
    \    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Exercise 1 results: <br /><pre>Array\n(\n    [0] => 1\n    [1] => 3\n \
    \   [2] => 4\n)\n</pre><hr />"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $numbers = array_flip($numbers);\n  $numbers = array_flip($numbers);\n\
    \  return $numbers;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5trjw1vp.php:19\n\
    Stack trace:\n#0 /tmp/tmp5trjw1vp.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp5trjw1vp.php\
    \ on line 19\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    return array_unique($numbers);\n}\nprint_r(remove_duplicates(array(1,\
    \ 2, 3, 2, 4)));\n\necho \"<br><br>\";\necho \"<br><br>\";\n\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [4] => 4\n)\n<br><br><br><br>\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp8stvid9h.php:21\nStack\
    \ trace:\n#0 /tmp/tmp8stvid9h.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp8stvid9h.php\
    \ on line 21\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $newArray = [];\n    $duplicate = [];\n    foreach ($numbers as $number)\
    \ {\n        if (in_array($number, $newArray)) {\n            array_push($duplicate,\
    \ $number);\n        } else {\n            array_push($newArray, $number);\n \
    \       }\n    }\n    foreach ($duplicate as $item) {\n        $key = array_search($item,\
    \ $newArray);\n        unset($newArray[$key]);\n    }\n    return $newArray;\n\
    }\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1jgft8af.php:29\n\
    Stack trace:\n#0 /tmp/tmp1jgft8af.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp1jgft8af.php\
    \ on line 29\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $result = array();\n  $seen = array();\n  foreach ($numbers as $number)\
    \ {\n    if (!isset($seen[$number])) {\n      $result[] = $number;\n      $seen[$number]\
    \ = true;\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn381u6b0.php:25\n\
    Stack trace:\n#0 /tmp/tmpn381u6b0.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpn381u6b0.php\
    \ on line 25\n"
  timestamp: 1659978687
- exit_code: 0
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $counter = array_count_values($numbers);\n    $result = array();\n  \
    \  foreach ($counter as $key => $value) {\n        if ($value === 1) {\n     \
    \       $result[] = $key;\n        }\n    }\n    return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n\t$numbers_distinct = array();\n\tforeach ($numbers as $number) {\n\t\tif\
    \ (!in_array($number, $numbers_distinct)) {\n\t\t\t$numbers_distinct[] = $number;\n\
    \t\t}\n\t}\n\treturn $numbers_distinct;\n}\n\nvar_dump(remove_duplicates(array(1,\
    \ 2, 3, 2, 4)));\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(4) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(2)\n  [2]=>\n  int(3)\n \
    \ [3]=>\n  int(4)\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgpq6pci_.php:25\n\
    Stack trace:\n#0 /tmp/tmpgpq6pci_.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpgpq6pci_.php\
    \ on line 25\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $arrlength = count($numbers);\n  $output = array();\n  for($x = 0; $x <\
    \ $arrlength; $x++) {\n    if(!in_array($numbers[$x], $output)) {\n      array_push($output,\
    \ $numbers[$x]);\n    }\n  }\n  return $output;\n}\n\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjrxj_dz0.php:24\n\
    Stack trace:\n#0 /tmp/tmpjrxj_dz0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpjrxj_dz0.php\
    \ on line 24\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $uniques = array();\n  foreach ($numbers as $num) {\n    if (!in_array($num,\
    \ $uniques)) {\n      $uniques[] = $num;\n    }\n  }\n  return $uniques;\n}\n\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6xzwv7x5.php:23\n\
    Stack trace:\n#0 /tmp/tmp6xzwv7x5.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp6xzwv7x5.php\
    \ on line 23\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $numbers_arr = [];\n  foreach ($numbers as $number) {\n    if (!in_array($number,\
    \ $numbers_arr)) {\n      $numbers_arr[] = $number;\n    }\n  }\n  return $numbers_arr;\n\
    }\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbuwtmxct.php:23\n\
    Stack trace:\n#0 /tmp/tmpbuwtmxct.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpbuwtmxct.php\
    \ on line 23\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n\t$non_duplicates = array();\n\tforeach ($numbers as $number) {\n\t\tif (!in_array($number,\
    \ $non_duplicates)) {\n\t\t\t$non_duplicates[] = $number;\n\t\t}\n\t}\n\treturn\
    \ $non_duplicates;\n}\n$numbers = array(1, 2, 3, 2, 4);\nprint_r(remove_duplicates($numbers));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n)\n\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg5x2pmdu.php:25\nStack\
    \ trace:\n#0 /tmp/tmpg5x2pmdu.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpg5x2pmdu.php\
    \ on line 25\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $output = array();\n    foreach ($numbers as $number) {\n        if (!in_array($number,\
    \ $output)) {\n            $output[] = $number;\n        }\n    }\n    return\
    \ $output;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyyll7ddf.php:23\n\
    Stack trace:\n#0 /tmp/tmpyyll7ddf.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpyyll7ddf.php\
    \ on line 23\n"
  timestamp: 1659823541
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $uniques = array();\n  foreach ($numbers as $number) {\n    if (!in_array($number,\
    \ $uniques)) {\n      $uniques[] = $number;\n    }\n  }\n  return $uniques;\n\
    }\n\n$numbers = array(1, 2, 3, 2, 4);\nprint_r(remove_duplicates($numbers));\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpd4iaqdf4.php:25\nStack\
    \ trace:\n#0 /tmp/tmpd4iaqdf4.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpd4iaqdf4.php\
    \ on line 25\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n\t$numbers1 = array_unique($numbers);\n\treturn $numbers1;\n}\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuhala38p.php:17\n\
    Stack trace:\n#0 /tmp/tmpuhala38p.php(20): test()\n#1 {main}\n  thrown in /tmp/tmpuhala38p.php\
    \ on line 17\n"
  timestamp: 1659978687
- exit_code: 0
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $result = array();\n    $counts = array_count_values($numbers);\n   \
    \ foreach ($numbers as $key => $value) {\n        if ($counts[$value] == 1) {\n\
    \            $result[] = $value;\n        }\n    }\n    return $result;\n}\n\n\
    $a = array(1, 2, 3, 2, 4);\n$result = remove_duplicates($a);\nprint_r($result);\n\
    \nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 3\n    [2] => 4\n)\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $unique = array();\n  foreach ($numbers as $number) {\n    if (in_array($number,\
    \ $unique)) {\n      continue;\n    }\n    array_push($unique, $number);\n  }\n\
    \  return $unique;\n}\n\n$numbers = array(1, 2, 3, 2, 4);\nprint_r(remove_duplicates($numbers));\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpdqbar40j.php:26\nStack\
    \ trace:\n#0 /tmp/tmpdqbar40j.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpdqbar40j.php\
    \ on line 26\n"
  timestamp: 1659978687
- exit_code: 0
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $numbers_mapped = array();\n    foreach ($numbers as $number) {\n   \
    \     if ( ! isset($numbers_mapped[$number])) {\n            $numbers_mapped[$number]\
    \ = 1;\n        } else {\n            $numbers_mapped[$number]++;\n        }\n\
    \    }\n    $numbers_filtered = array();\n    foreach ($numbers_mapped as $number\
    \ => $count) {\n        if ($count === 1) {\n            $numbers_filtered[] =\
    \ $number;\n        }\n    }\n    return $numbers_filtered;\n}\n\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n\t$result = array();\n\tforeach ($numbers as $number) {\n\t\tif (!in_array($number,\
    \ $result)) {\n\t\t\t$result[] = $number;\n\t\t}\n\t}\n\treturn $result;\n}\n\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2pry_gz_.php:23\n\
    Stack trace:\n#0 /tmp/tmp2pry_gz_.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp2pry_gz_.php\
    \ on line 23\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $unique_numbers = array();\n    foreach ($numbers as $number) {\n   \
    \     if (!in_array($number, $unique_numbers)) {\n            $unique_numbers[]\
    \ = $number;\n        }\n    }\n    return $unique_numbers;\n}\n\necho \"\\nRemove\
    \ duplicates:\\n\";\necho implode(', ', remove_duplicates(array(1, 2, 3, 2, 4)));\
    \ // 1, 3, 4\necho \"\\n\";\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nRemove duplicates:\n1, 2, 3, 4\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpfafr4_b7.php:27\nStack trace:\n#0 /tmp/tmpfafr4_b7.php(30):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpfafr4_b7.php on line 27\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n\t$new_array = array();\n\t$occurrences = array();\n\tforeach ($numbers as\
    \ $number) {\n\t\tif (!in_array($number, $occurrences)) {\n\t\t\t$occurrences[]\
    \ = $number;\n\t\t\t$new_array[] = $number;\n\t\t}\n\t}\n\treturn $new_array;\n\
    }\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnn1bbe_g.php:25\n\
    Stack trace:\n#0 /tmp/tmpnn1bbe_g.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpnn1bbe_g.php\
    \ on line 25\n"
  timestamp: 1659978687
- exit_code: 0
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n\t$unique = array();\n\t$unique_count = array();\n\tforeach ($numbers as\
    \ $number) {\n\t\tif (isset($unique_count[$number])) {\n\t\t\t$unique_count[$number]++;\n\
    \t\t} else {\n\t\t\t$unique_count[$number] = 1;\n\t\t}\n\t}\n\tforeach ($numbers\
    \ as $number) {\n\t\tif ($unique_count[$number] == 1) {\n\t\t\t$unique[] = $number;\n\
    \t\t}\n\t}\n\treturn $unique;\n}\n$arr = array(1, 2, 3, 2, 4);\nprint_r(remove_duplicates($arr));\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 3\n    [2] => 4\n)\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n\t$numbers_count = count($numbers);\n\t$last_number = $numbers[0];\n\t$duplicates\
    \ = array();\n\tfor ($i = 1; $i < $numbers_count; $i++) {\n\t\tif ($last_number\
    \ == $numbers[$i]) {\n\t\t\t$duplicates[] = $numbers[$i];\n\t\t}\n\t\t$last_number\
    \ = $numbers[$i];\n\t}\n\treturn array_diff($numbers, $duplicates);\n}\n$numbers\
    \ = array(1, 2, 3, 2, 4);\necho \"Remove duplicates in (\" . implode(\", \", $numbers)\
    \ . \"): \";\n$numbers = remove_duplicates($numbers);\necho \"(\" . implode(\"\
    , \", $numbers) . \")\";\necho \"\\n\";\n\nfunction candidate(...$args) {\n  \
    \  return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Remove duplicates in (1, 2, 3, 2, 4): (1, 2, 3, 2, 4)\n\nWarning: Undefined\
    \ array key 0 in /tmp/tmpo0vl_1km.php on line 8\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpo0vl_1km.php:31\nStack trace:\n#0 /tmp/tmpo0vl_1km.php(34):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpo0vl_1km.php on line 31\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  return array_unique($numbers);\n}\n\nfunction candidate(...$args) {\n \
    \   return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf91pqktt.php:17\n\
    Stack trace:\n#0 /tmp/tmpf91pqktt.php(20): test()\n#1 {main}\n  thrown in /tmp/tmpf91pqktt.php\
    \ on line 17\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $new_array = [];\n    foreach ($numbers as $number) {\n        if (!in_array($number,\
    \ $new_array)) {\n            $new_array[] = $number;\n        }\n    }\n    return\
    \ $new_array;\n}\nprint_r(remove_duplicates([1, 2, 3, 2, 4]));\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpnx48uq_5.php:23\nStack\
    \ trace:\n#0 /tmp/tmpnx48uq_5.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpnx48uq_5.php\
    \ on line 23\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  return array_values(array_unique($numbers));\n}\n\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcxnfkhta.php:17\n\
    Stack trace:\n#0 /tmp/tmpcxnfkhta.php(20): test()\n#1 {main}\n  thrown in /tmp/tmpcxnfkhta.php\
    \ on line 17\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $deduped = array();\n  $already_seen = array();\n  foreach ($numbers as\
    \ $num) {\n    if (!in_array($num, $already_seen)) {\n      $deduped[] = $num;\n\
    \      $already_seen[] = $num;\n    }\n  }\n  return $deduped;\n}\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4zci5klf.php:24\n\
    Stack trace:\n#0 /tmp/tmp4zci5klf.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp4zci5klf.php\
    \ on line 24\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n\t$result = array();\n\tforeach ($numbers as $number) {\n\t\tif (!in_array($number,\
    \ $result)) {\n\t\t\t$result[] = $number;\n\t\t}\n\t}\n\treturn $result;\n}\n\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2pry_gz_.php:23\n\
    Stack trace:\n#0 /tmp/tmp2pry_gz_.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp2pry_gz_.php\
    \ on line 23\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $result = array();\n  foreach ($numbers as $number) {\n    if (!in_array($number,\
    \ $result)) {\n      $result[] = $number;\n    }\n  }\n  return $result;\n}\n\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpggi1ipxg.php:23\n\
    Stack trace:\n#0 /tmp/tmpggi1ipxg.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpggi1ipxg.php\
    \ on line 23\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $new_array = array();\n  foreach ($numbers as $number) {\n    if (!in_array($number,\
    \ $new_array)) {\n      $new_array[] = $number;\n    }\n  }\n  return $new_array;\n\
    }\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmyxe6088.php:23\n\
    Stack trace:\n#0 /tmp/tmpmyxe6088.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpmyxe6088.php\
    \ on line 23\n"
  timestamp: 1659978687
- exit_code: 0
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $result = array();\n    foreach ($numbers as $index => $number) {\n \
    \       if (array_key_exists($number, $result)) {\n            unset($result[$number]);\n\
    \        } else {\n            $result[$number] = $index;\n        }\n    }\n\
    \    return array_keys($result);\n}\n\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $numbers_unique = array_unique($numbers);\n    foreach ($numbers as $item)\
    \ {\n        if (!in_array($item, $numbers_unique)) {\n            unset($item);\n\
    \        }\n    }\n    return $numbers;\n}\n$numbers = array(1, 2, 3, 2, 4);\n\
    echo \"<pre>\";\nprint_r(remove_duplicates($numbers));\necho \"</pre>\";\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 2\n\
    \    [4] => 4\n)\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7lj4e7hl.php:26\n\
    Stack trace:\n#0 /tmp/tmp7lj4e7hl.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp7lj4e7hl.php\
    \ on line 26\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $filtered = array();\n  foreach ($numbers as $number) {\n    if (!in_array($number,\
    \ $filtered)) {\n      $filtered[] = $number;\n    }\n  }\n  return $filtered;\n\
    }\n\nassert_options(ASSERT_BAIL, 1);\nassert(remove_duplicates(array(1, 2, 3,\
    \ 2, 4)) == array(1, 3, 4));\nassert(remove_duplicates(array(1, 2, 3, 4)) == array(1,\
    \ 2, 3, 4));\nassert(remove_duplicates(array(1, 2, 3, 3, 3, 4)) == array(1, 2,\
    \ 4));\nassert(remove_duplicates(array(1, 2, 2, 3, 3, 3, 4)) == array(1, 4));\n\
    echo \"All tests passed.\\n\";\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught AssertionError: assert(remove_duplicates([1, 2,\
    \ 3, 2, 4]) == [1, 3, 4]) in /tmp/tmp3ps9_ai1.php:17\nStack trace:\n#0 /tmp/tmp3ps9_ai1.php(17):\
    \ assert(false, 'assert(remove_d...')\n#1 {main}\n  thrown in /tmp/tmp3ps9_ai1.php\
    \ on line 17\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n\t$result = array();\n\tforeach ($numbers as $number) {\n\t\tif (!isset($seen[$number]))\
    \ {\n\t\t\t$result[] = $number;\n\t\t\t$seen[$number] = true;\n\t\t}\n\t}\n\t\
    return $result;\n}\nprint_r(remove_duplicates(array(1, 2, 3, 2, 4)));\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpf9n3yeo7.php:24\nStack\
    \ trace:\n#0 /tmp/tmpf9n3yeo7.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpf9n3yeo7.php\
    \ on line 24\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $distinct = array();\n    foreach ($numbers as $num) {\n        if (!in_array($num,\
    \ $distinct)) {\n            $distinct[] = $num;\n        }\n    }\n    return\
    \ $distinct;\n}\n\n$numbers = array(1, 2, 3, 2, 4);\nprint_r(remove_duplicates($numbers));\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp_x_4v122.php:25\nStack\
    \ trace:\n#0 /tmp/tmp_x_4v122.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp_x_4v122.php\
    \ on line 25\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $uniques = array();\n  foreach ($numbers as $number) {\n    if (!in_array($number,\
    \ $uniques)) {\n      $uniques[] = $number;\n    }\n  }\n  return $uniques;\n\
    }\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptjvdsil7.php:23\n\
    Stack trace:\n#0 /tmp/tmptjvdsil7.php(26): test()\n#1 {main}\n  thrown in /tmp/tmptjvdsil7.php\
    \ on line 23\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $no_duplicates = array();\n    foreach ($numbers as $number) {\n    \
    \    if (count(array_keys($no_duplicates, $number)) == 0) {\n            $no_duplicates[]\
    \ = $number;\n        }\n    }\n    return $no_duplicates;\n}\n\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmu_ejjv7.php:23\n\
    Stack trace:\n#0 /tmp/tmpmu_ejjv7.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpmu_ejjv7.php\
    \ on line 23\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  // TODO: Implement me!\n}\n\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsakybao1.php:15\n\
    Stack trace:\n#0 /tmp/tmpsakybao1.php(20): test()\n#1 {main}\n  thrown in /tmp/tmpsakybao1.php\
    \ on line 15\n"
  timestamp: 1659978687
- exit_code: 0
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $numbersArray = [];\n  $duplicatesArray = [];\n  $outputArray = [];\n \
    \ foreach ($numbers as $number) {\n    if (in_array($number, $numbersArray)) {\n\
    \      $duplicatesArray[] = $number;\n    } else {\n      $numbersArray[] = $number;\n\
    \    }\n  }\n  foreach ($numbers as $number) {\n    if (!in_array($number, $duplicatesArray))\
    \ {\n      $outputArray[] = $number;\n    }\n  }\n  return $outputArray;\n}\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $arr = array();\n  foreach ($numbers as $num) {\n    if (!in_array($num,\
    \ $arr)) {\n      $arr[] = $num;\n    }\n  }\n  return $arr;\n}\n\n$arr = array(1,\
    \ 2, 3, 2, 4);\nprint_r(remove_duplicates($arr));\n\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpjmzbxumi.php:26\nStack\
    \ trace:\n#0 /tmp/tmpjmzbxumi.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpjmzbxumi.php\
    \ on line 26\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    return array_unique($numbers);\n}\n\nfunction candidate(...$args) {\n\
    \    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptcl8k4v2.php:17\n\
    Stack trace:\n#0 /tmp/tmptcl8k4v2.php(20): test()\n#1 {main}\n  thrown in /tmp/tmptcl8k4v2.php\
    \ on line 17\n"
  timestamp: 1659978686
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n\t$uniques = array();\n\tforeach ($numbers as $number) {\n\t\tif (array_search($number,\
    \ $uniques) === false) {\n\t\t\t$uniques[] = $number;\n\t\t}\n\t}\n\treturn $uniques;\n\
    }\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb9ykdxh7.php:23\n\
    Stack trace:\n#0 /tmp/tmpb9ykdxh7.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpb9ykdxh7.php\
    \ on line 23\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $uniques = array();\n    foreach ($numbers as $n) {\n        if (!in_array($n,\
    \ $uniques))\n            $uniques[] = $n;\n    }\n    return $uniques;\n}\necho\
    \ '<pre>' . implode(', ', remove_duplicates(array(1, 2, 3, 2, 4))) . '</pre>';\n\
    \nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>1, 2, 3, 4</pre>\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpkedax2bw.php:23\nStack trace:\n#0 /tmp/tmpkedax2bw.php(26): test()\n\
    #1 {main}\n  thrown in /tmp/tmpkedax2bw.php on line 23\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $result = array();\n    $map = array();\n    foreach ($numbers as $n)\
    \ {\n        if (!isset($map[$n])) {\n            $map[$n] = 1;\n            $result[]\
    \ = $n;\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpptuws1zu.php:24\n\
    Stack trace:\n#0 /tmp/tmpptuws1zu.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpptuws1zu.php\
    \ on line 24\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n\t$final = array();\n\t$count = count($numbers);\n\t$key = 0;\n\t$last =\
    \ 0;\n\tfor ($i = 0; $i < $count; $i++) {\n\t\t$key = $numbers[$i];\n\t\tif ($last\
    \ != $key) {\n\t\t\t$first = -1;\n\t\t\tfor ($j = 0; $j < $count; $j++) {\n\t\t\
    \t\tif ($numbers[$j] == $key) {\n\t\t\t\t\tif ($first == -1) {\n\t\t\t\t\t\t$first\
    \ = $j;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$first = $j;\n\t\t\t\t\t\tbreak;\n\t\t\
    \t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ($first == $i) {\n\t\t\t\t$final[] = $key;\n\
    \t\t\t}\n\t\t}\n\t\t$last = $key;\n\t}\n\treturn $final;\n}\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7omndj3a.php:40\n\
    Stack trace:\n#0 /tmp/tmp7omndj3a.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp7omndj3a.php\
    \ on line 40\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $count = count($numbers);\n    for ($i = 0; $i < $count; $i++) {\n  \
    \      for ($j = $i + 1; $j < $count; $j++) {\n            if ($numbers[$i] ==\
    \ $numbers[$j]) {\n                unset($numbers[$i]);\n            }\n     \
    \   }\n    }\n    return $numbers;\n}\n\n$array = array(1, 2, 3, 2, 4);\n$result\
    \ = remove_duplicates($array);\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 1 in /tmp/tmpiazu_q41.php on line 10\n\n\
    Warning: Undefined array key 1 in /tmp/tmpiazu_q41.php on line 10\n\nWarning:\
    \ Undefined array key 1 in /tmp/tmpiazu_q41.php on line 10\n\nWarning: Undefined\
    \ array key 1 in /tmp/tmpiazu_q41.php on line 10\n\nWarning: Undefined array key\
    \ 2 in /tmp/tmpiazu_q41.php on line 10\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpiazu_q41.php:28\nStack trace:\n#0 /tmp/tmpiazu_q41.php(31):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpiazu_q41.php on line 28\n"
  timestamp: 1659978687
- exit_code: 0
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $out = array();\n  $cnt = array_count_values($numbers);\n  foreach ($numbers\
    \ as $n) {\n    if ($cnt[$n] == 1) {\n      $out[] = $n;\n    }\n  }\n  return\
    \ $out;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978687
- exit_code: 0
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n\t$occurrences = [];\n\tforeach ($numbers as $number) {\n\t\tif (isset($occurrences[$number]))\
    \ {\n\t\t\t$occurrences[$number]++;\n\t\t} else {\n\t\t\t$occurrences[$number]\
    \ = 1;\n\t\t}\n\t}\n\t$unique_numbers = [];\n\tforeach ($numbers as $number) {\n\
    \t\tif ($occurrences[$number] == 1) {\n\t\t\t$unique_numbers[] = $number;\n\t\t\
    }\n\t}\n\treturn $unique_numbers;\n}\n\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978687
- exit_code: 0
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $frequencies = array_count_values($numbers);\n    $result = array();\n\
    \    foreach ($numbers as $number) {\n        if ($frequencies[$number] == 1)\
    \ {\n            $result[] = $number;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978687
- exit_code: 0
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    // return array_unique($numbers);\n    $result = [];\n    foreach ($numbers\
    \ as $value) {\n        if (count(array_keys($numbers, $value)) === 1) {\n   \
    \         $result[] = $value;\n        }\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978687
- exit_code: 0
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $result = array();\n    $number_occurrence = array();\n    foreach ($numbers\
    \ as $number) {\n        if (!isset($number_occurrence[$number])) {\n        \
    \    $number_occurrence[$number] = 1;\n        } else {\n            $number_occurrence[$number]++;\n\
    \        }\n    }\n    foreach ($numbers as $number) {\n        if ($number_occurrence[$number]\
    \ == 1) {\n            $result[] = $number;\n        }\n    }\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    // your code goes here\n    $unique = array_unique($numbers);\n    return\
    \ $unique;\n}\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwpr0jcm5.php:18\n\
    Stack trace:\n#0 /tmp/tmpwpr0jcm5.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpwpr0jcm5.php\
    \ on line 18\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $unique_numbers = array();\n    foreach ($numbers as $number) {\n   \
    \     if (!in_array($number, $unique_numbers)) {\n            $unique_numbers[]\
    \ = $number;\n        }\n    }\n    return $unique_numbers;\n}\n\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprpafuv34.php:23\n\
    Stack trace:\n#0 /tmp/tmprpafuv34.php(26): test()\n#1 {main}\n  thrown in /tmp/tmprpafuv34.php\
    \ on line 23\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $array = array();\n    for ($i = 0; $i < count($numbers); $i++) {\n \
    \       if (! in_array($numbers[$i], $array)) {\n            $array[] = $numbers[$i];\n\
    \        }\n    }\n    return $array;\n}\n\nfunction candidate(...$args) {\n \
    \   return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1uq4vr_y.php:23\n\
    Stack trace:\n#0 /tmp/tmp1uq4vr_y.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp1uq4vr_y.php\
    \ on line 23\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $unique = array();\n    foreach ($numbers as $number) {\n        if (!in_array($number,\
    \ $unique)) {\n            $unique[] = $number;\n        }\n    }\n    return\
    \ $unique;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8rdr9xxf.php:23\n\
    Stack trace:\n#0 /tmp/tmp8rdr9xxf.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp8rdr9xxf.php\
    \ on line 23\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $results = array();\n    foreach ($numbers as $num) {\n        if (!in_array($num,\
    \ $results)) {\n            $results[] = $num;\n        }\n    }\n    return $results;\n\
    }\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgt43x_md.php:23\n\
    Stack trace:\n#0 /tmp/tmpgt43x_md.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpgt43x_md.php\
    \ on line 23\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n\t$numbers = array_count_values($numbers);\n\tforeach ($numbers as $key =>\
    \ $value) {\n\t\tif ($value > 1) {\n\t\t\tunset($numbers[$key]);\n\t\t}\n\t}\n\
    \treturn $numbers;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw9ar41h1.php:22\n\
    Stack trace:\n#0 /tmp/tmpw9ar41h1.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpw9ar41h1.php\
    \ on line 22\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $elements = array();\n    foreach ($numbers as $number) {\n        if\
    \ (!in_array($number, $elements)) {\n            $elements[] = $number;\n    \
    \    }\n    }\n    return $elements;\n}\n\nfunction candidate(...$args) {\n  \
    \  return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1rv3_8ga.php:23\n\
    Stack trace:\n#0 /tmp/tmp1rv3_8ga.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp1rv3_8ga.php\
    \ on line 23\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    return array_unique($numbers);\n}\n\n$numbers = array(1, 2, 3, 2, 4);\n\
    var_dump(remove_duplicates($numbers));\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(4) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(2)\n  [2]=>\n  int(3)\n \
    \ [4]=>\n  int(4)\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdgqcql0x.php:19\n\
    Stack trace:\n#0 /tmp/tmpdgqcql0x.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpdgqcql0x.php\
    \ on line 19\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $numbers = array_flip($numbers);\n    $numbers = array_flip($numbers);\n\
    \    $numbers = array_values($numbers);\n    return $numbers;\n}\n\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp263ns8vo.php:20\n\
    Stack trace:\n#0 /tmp/tmp263ns8vo.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp263ns8vo.php\
    \ on line 20\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n\t// count occurences of each number\n\t$counts = array_count_values($numbers);\n\
    \t\n\t// loop through each occurence\n\tforeach ($counts as $number => $count)\
    \ {\n\t\t// if the number occurs more than once\n\t\tif ($count > 1) {\n\t\t\t\
    // remove all occurences of the number\n\t\t\t$numbers = array_diff($numbers,\
    \ array($number));\n\t\t}\n\t}\n\t\n\treturn $numbers;\n}\n\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjlgdnwj1.php:29\n\
    Stack trace:\n#0 /tmp/tmpjlgdnwj1.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpjlgdnwj1.php\
    \ on line 29\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $unique = array();\n  foreach ($numbers as $number) {\n    if (!in_array($number,\
    \ $unique)) {\n      $unique[] = $number;\n    }\n  }\n  return $unique;\n}\n\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq6n2v8a2.php:23\n\
    Stack trace:\n#0 /tmp/tmpq6n2v8a2.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpq6n2v8a2.php\
    \ on line 23\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n\t// YOUR CODE HERE\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp70gu5suj.php:15\n\
    Stack trace:\n#0 /tmp/tmp70gu5suj.php(20): test()\n#1 {main}\n  thrown in /tmp/tmp70gu5suj.php\
    \ on line 15\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n\t$count = 0;\n\tforeach ($numbers as $key => $val) {\n\t\tif (in_array($val,\
    \ $numbers)) {\n\t\t\t$count++;\n\t\t}\n\t\tif ($count > 1) {\n\t\t\tunset($numbers[$key]);\n\
    \t\t}\n\t}\n\tprint_r($numbers);\n}\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaaa61ck9.php:23\n\
    Stack trace:\n#0 /tmp/tmpaaa61ck9.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpaaa61ck9.php\
    \ on line 23\n"
  timestamp: 1659978687
- exit_code: 0
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $ret = array();\n    for ($i = 0; $i < count($numbers); $i++) {\n   \
    \     $times = 0;\n        for ($j = 0; $j < count($numbers); $j++) {\n      \
    \      if ($numbers[$i] == $numbers[$j]) {\n                $times++;\n      \
    \      }\n        }\n        if ($times == 1) {\n            $ret[] = $numbers[$i];\n\
    \        }\n    }\n    return $ret;\n}\n\necho implode(\", \", remove_duplicates(array(1,\
    \ 2, 3, 2, 4))) . \"\\n\";\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1, 3, 4

    '
  timestamp: 1659978687
- exit_code: 0
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $counts = array_count_values($numbers);\n    $result = array();\n   \
    \ foreach ($numbers as $number) {\n        if ($counts[$number] == 1) {\n    \
    \        $result[] = $number;\n        }\n    }\n    return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978687
- exit_code: 0
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $result = array();\n    $occurrences = array();\n    foreach ($numbers\
    \ as $number) {\n        if (!array_key_exists($number, $occurrences)) {\n   \
    \         $occurrences[$number] = 1;\n        } else {\n            $occurrences[$number]\
    \ += 1;\n        }\n    }\n    foreach ($numbers as $number) {\n        if ($occurrences[$number]\
    \ == 1) {\n            $result[] = $number;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n\t$res = array();\n\tforeach ($numbers as $number) {\n\t\tif (!in_array($number,\
    \ $res)) {\n\t\t\t$res[] = $number;\n\t\t}\n\t}\n\treturn $res;\n}\n\n$ret = remove_duplicates(array(1,\
    \ 2, 3, 2, 4));\nprint_r($ret);\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmphuflx8vl.php:25\nStack\
    \ trace:\n#0 /tmp/tmphuflx8vl.php(28): test()\n#1 {main}\n  thrown in /tmp/tmphuflx8vl.php\
    \ on line 25\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $output = array();\n  $numbers_count = count($numbers);\n  for ($i = 0;\
    \ $i < $numbers_count; $i++) {\n    $already_present = FALSE;\n    for ($j = 0;\
    \ $j < $i; $j++) {\n      if ($numbers[$i] == $numbers[$j]) {\n        $already_present\
    \ = TRUE;\n        break;\n      }\n    }\n    if (!$already_present) {\n    \
    \  $output[] = $numbers[$i];\n    }\n  }\n  return $output;\n}\n\nprint_r(remove_duplicates(array(1,\
    \ 2, 3, 2, 4)));\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpc8vwb72u.php:33\nStack\
    \ trace:\n#0 /tmp/tmpc8vwb72u.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpc8vwb72u.php\
    \ on line 33\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    return array_reverse(array_diff_assoc(array_reverse($numbers), array_reverse(array_unique($numbers))));\n\
    }\n\n$result = remove_duplicates(array(1, 2, 3, 2, 4));\nprint_r($result);\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 2\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmprbeyd3w1.php:18\nStack\
    \ trace:\n#0 /tmp/tmprbeyd3w1.php(22): test()\n#1 {main}\n  thrown in /tmp/tmprbeyd3w1.php\
    \ on line 18\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $uniques = array();\n    foreach ($numbers as $number) {\n        if\
    \ (!in_array($number, $uniques)) {\n            $uniques[] = $number;\n      \
    \  }\n    }\n    return $uniques;\n}\n\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwl55h30_.php:23\n\
    Stack trace:\n#0 /tmp/tmpwl55h30_.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpwl55h30_.php\
    \ on line 23\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n\t$newArray = array();\n\tfor ($i = 0; $i < count($numbers); $i++) {\n\t\t\
    if (!in_array($numbers[$i], $newArray)) {\n\t\t\tarray_push($newArray, $numbers[$i]);\n\
    \t\t}\n\t}\n\treturn $newArray;\n}\n\n$newArray = remove_duplicates(array(1, 2,\
    \ 3, 2, 4));\nprint_r($newArray);\n\necho \"<br>\";\n\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n)\n<br>\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpgdn69tg_.php:28\nStack\
    \ trace:\n#0 /tmp/tmpgdn69tg_.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpgdn69tg_.php\
    \ on line 28\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n\treturn array_values(array_unique($numbers));\n}\n\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvrsh_po7.php:17\n\
    Stack trace:\n#0 /tmp/tmpvrsh_po7.php(20): test()\n#1 {main}\n  thrown in /tmp/tmpvrsh_po7.php\
    \ on line 17\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $unique = array();\n  foreach ($numbers as $number) {\n    if (!in_array($number,\
    \ $unique)) {\n      $unique[] = $number;\n    }\n  }\n  return $unique;\n}\n\n\
    echo '<h2>Remove duplicates</h2>';\necho '<p>';\necho json_encode(remove_duplicates(array(1,\
    \ 2, 3, 2, 4)));\necho '</p>';\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<h2>Remove duplicates</h2><p>[1,2,3,4]</p>\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp9jdy5hfj.php:28\nStack trace:\n#0 /tmp/tmp9jdy5hfj.php(31):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp9jdy5hfj.php on line 28\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $duplicates = array();\n    foreach ($numbers as $number) {\n       \
    \ if (isset($duplicates[$number])) {\n            unset($numbers[$key]);\n   \
    \     } else {\n            $duplicates[$number] = 1;\n        }\n    }\n    return\
    \ $numbers;\n}\n\n$numbers = array(1, 2, 3, 2, 4);\nvar_dump(remove_duplicates($numbers));\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $key in /tmp/tmpdgk_77ep.php on line 10\n\
    array(5) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(2)\n  [2]=>\n  int(3)\n  [3]=>\n\
    \  int(2)\n  [4]=>\n  int(4)\n}\n\nWarning: Undefined variable $key in /tmp/tmpdgk_77ep.php\
    \ on line 10\n\nWarning: Undefined variable $key in /tmp/tmpdgk_77ep.php on line\
    \ 10\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdgk_77ep.php:27\n\
    Stack trace:\n#0 /tmp/tmpdgk_77ep.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpdgk_77ep.php\
    \ on line 27\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $numbers = array_unique($numbers);\n    return $numbers;\n}\n\n$numbers\
    \ = array(1, 2, 3, 2, 4);\necho '<pre>';\nprint_r(remove_duplicates($numbers));\n\
    echo '</pre>';\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [4] => 4\n\
    )\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnrsvnv0z.php:22\n\
    Stack trace:\n#0 /tmp/tmpnrsvnv0z.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpnrsvnv0z.php\
    \ on line 22\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $result = array();\n  $index = 0;\n  for ($i = 0; $i < count($numbers);\
    \ $i++) {\n    $found = false;\n    for ($j = 0; $j < $index; $j++) {\n      if\
    \ ($numbers[$i] == $result[$j]) {\n        $found = true;\n        break;\n  \
    \    }\n    }\n    if (!$found) {\n      $result[$index] = $numbers[$i];\n   \
    \   $index++;\n    }\n  }\n  return $result;\n}\n\n$numbers = array(1, 2, 3, 2,\
    \ 4);\n$result = remove_duplicates($numbers);\nfor ($i = 0; $i < count($result);\
    \ $i++) {\n  print($result[$i] . \" \");\n}\nprint(\"\\n\");\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1 2 3 4 \n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp1gn0stk.php:38\n\
    Stack trace:\n#0 /tmp/tmpp1gn0stk.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpp1gn0stk.php\
    \ on line 38\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  // your code here\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpym5tns6k.php:15\n\
    Stack trace:\n#0 /tmp/tmpym5tns6k.php(20): test()\n#1 {main}\n  thrown in /tmp/tmpym5tns6k.php\
    \ on line 15\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $uniques = array();\n    foreach ($numbers as $number) {\n        if\
    \ (!in_array($number, $uniques)) {\n            $uniques[] = $number;\n      \
    \  }\n    }\n    return $uniques;\n}\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbx0kiu0q.php:22\n\
    Stack trace:\n#0 /tmp/tmpbx0kiu0q.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpbx0kiu0q.php\
    \ on line 22\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $numbers=array_unique($numbers);\n  return $numbers;\n}\n\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyvc142sl.php:18\n\
    Stack trace:\n#0 /tmp/tmpyvc142sl.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpyvc142sl.php\
    \ on line 18\n"
  timestamp: 1659978687
- exit_code: 0
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $result = array();\n    $count = array_count_values($numbers);\n    foreach\
    \ ($numbers as $number) {\n        if ($count[$number] == 1) {\n            $result[]\
    \ = $number;\n        }\n    }\n    return $result;\n}\n\nprint_r(remove_duplicates(array(1,\
    \ 2, 3, 2, 4)));\nprint_r(remove_duplicates(array(1, 1, 2, 3, 2, 4)));\nprint_r(remove_duplicates(array(1,\
    \ 2, 3, 4)));\nprint_r(remove_duplicates(array(1, 1, 1, 1)));\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 3\n    [2] => 4\n)\nArray\n(\n    [0]\
    \ => 3\n    [1] => 4\n)\nArray\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n\
    \    [3] => 4\n)\nArray\n(\n)\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $output = array();\n    foreach ($numbers as $number) {\n        if (!in_array($number,\
    \ $output)) {\n            $output[] = $number;\n        }\n    }\n    return\
    \ $output;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyyll7ddf.php:23\n\
    Stack trace:\n#0 /tmp/tmpyyll7ddf.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpyyll7ddf.php\
    \ on line 23\n"
  timestamp: 1659823541
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n\t$results = array();\n\t$duplicates = array();\n\tforeach ($numbers as $key\
    \ => $value) {\n\t\tif (!in_array($value, $results)) {\n\t\t\t$results[] = $value;\n\
    \t\t} else {\n\t\t\t$duplicates[] = $value;\n\t\t}\n\t}\n\treturn array_diff($results,\
    \ $duplicates);\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpncnmaop9.php:26\n\
    Stack trace:\n#0 /tmp/tmpncnmaop9.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpncnmaop9.php\
    \ on line 26\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $unique_numbers = array();\n  $unique_numbers_indices = array();\n  foreach\
    \ ($numbers as $index => $number) {\n    if (!in_array($number, $unique_numbers))\
    \ {\n      $unique_numbers[] = $number;\n      $unique_numbers_indices[] = $index;\n\
    \    }\n  }\n  return array_intersect_key($numbers, array_flip($unique_numbers_indices));\n\
    }\n$numbers = array(1, 2, 3, 2, 4);\nprint_r(remove_duplicates($numbers));\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [4] => 4\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp0i9ps_4v.php:26\nStack\
    \ trace:\n#0 /tmp/tmp0i9ps_4v.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp0i9ps_4v.php\
    \ on line 26\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n\t$no_dups = array();\n\tforeach ($numbers as $number) {\n\t\tif (!in_array($number,\
    \ $no_dups)) {\n\t\t\t$no_dups[] = $number;\n\t\t}\n\t}\n\treturn $no_dups;\n\
    }\n\nprint_r(remove_duplicates(array(1, 2, 3, 2, 4)));\n\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp9bxfrjsn.php:25\nStack\
    \ trace:\n#0 /tmp/tmp9bxfrjsn.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp9bxfrjsn.php\
    \ on line 25\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  // Fill in your code here\n}\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoidz2cww.php:14\n\
    Stack trace:\n#0 /tmp/tmpoidz2cww.php(19): test()\n#1 {main}\n  thrown in /tmp/tmpoidz2cww.php\
    \ on line 14\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $counts = array_count_values($numbers);\n  $result = array();\n  foreach\
    \ ($numbers as $number) {\n    if ($counts[$number] == 1) {\n      $result[] =\
    \ $number;\n    }\n  }\n  return $result;\n}\n\nclass RemoveDuplicatesTest extends\
    \ PHPUnit_Framework_TestCase {\n  function test_without_duplicates() {\n    $this->assertEquals(array(1,\
    \ 2, 3), remove_duplicates(array(1, 2, 3)));\n  }\n\n  function test_with_duplicates()\
    \ {\n    $this->assertEquals(array(1, 3, 4), remove_duplicates(array(1, 2, 3,\
    \ 2, 4)));\n  }\n}\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Class \"PHPUnit_Framework_TestCase\" not\
    \ found in /tmp/tmp1jvigyfm.php:17\nStack trace:\n#0 {main}\n  thrown in /tmp/tmp1jvigyfm.php\
    \ on line 17\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  // Write your code here\n  $result = [];\n  foreach ($numbers as $key =>\
    \ $number) {\n    if (!in_array($number, $result)) {\n      $result[] = $number;\n\
    \    }\n  }\n  return $result;\n}\n\n$numbers = [1, 2, 3, 2, 4];\nprint_r(remove_duplicates($numbers));\n\
    \nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp13ljnpuu.php:27\nStack\
    \ trace:\n#0 /tmp/tmp13ljnpuu.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp13ljnpuu.php\
    \ on line 27\n"
  timestamp: 1659978687
- exit_code: 0
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $res = array();\n  $seen = array();\n  for ($i = 0; $i < count($numbers);\
    \ $i++) {\n    $el = $numbers[$i];\n    if (array_key_exists($el, $seen)) {\n\
    \      $seen[$el] += 1;\n    } else {\n      $seen[$el] = 1;\n    }\n  }\n  for\
    \ ($i = 0; $i < count($numbers); $i++) {\n    $el = $numbers[$i];\n    if ($seen[$el]\
    \ === 1) {\n      $res[] = $el;\n    }\n  }\n  return $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978687
- exit_code: 0
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $count = array_count_values($numbers);\n  $values = array_unique($numbers);\n\
    \  $unique = array();\n  foreach ($values as $value) {\n    if ($count[$value]\
    \ == 1) {\n      $unique[] = $value;\n    }\n  }\n  return $unique;\n}\n\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n\treturn array_unique($numbers);\n}\n\n$remove_duplicates = remove_duplicates([2,\
    \ 2, 3, 4, 5, 5, 5, 1, 0, 0, 5, 9, 9, 9, 5, 6, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\
    \ 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\
    \ 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\
    \ 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\
    \ 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\
    \ 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\
    \ 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\
    \ 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\
    \ 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\
    \ 8, 8, 8, 8, 8, 8, 8, 8\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "]" in /tmp/tmpidy2dqsi.php
    on line 11

    '
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $newArray = [];\n    $isDuplicate = false;\n    foreach ($numbers as\
    \ $number) {\n        foreach ($newArray as $element) {\n            if ($number\
    \ == $element) {\n                $isDuplicate = true;\n            }\n      \
    \  }\n        if (!$isDuplicate) {\n            $newArray[] = $number;\n     \
    \   }\n        $isDuplicate = false;\n    }\n    return $newArray;\n}\n\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6l2uw0_v.php:30\n\
    Stack trace:\n#0 /tmp/tmp6l2uw0_v.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp6l2uw0_v.php\
    \ on line 30\n"
  timestamp: 1659978687
- exit_code: 0
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $values = array();\n    $result = array();\n    foreach ($numbers as\
    \ $value) {\n        if (!isset($values[$value])) {\n            $values[$value]\
    \ = 0;\n        }\n        $values[$value]++;\n    }\n    foreach ($numbers as\
    \ $value) {\n        if ($values[$value] == 1) {\n            $result[] = $value;\n\
    \        }\n    }\n    return $result;\n}\nvar_dump(remove_duplicates(array(1,\
    \ 2, 3, 2, 4)));\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "array(3) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(3)\n  [2]=>\n  int(4)\n}\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $unique = array();\n  foreach ($numbers as $number) {\n    if (!in_array($number,\
    \ $unique)) {\n      $unique[] = $number;\n    }\n  }\n  return $unique;\n}\n\
    $numbers = array(1, 2, 3, 2, 4);\necho \"<<< remove_duplicates(array(1, 2, 3,\
    \ 2, 4))\\n\";\necho \"array(\" . implode(', ', remove_duplicates($numbers)) .\
    \ \")\\n\";\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<<< remove_duplicates(array(1, 2, 3, 2, 4))\narray(1, 2, 3, 4)\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmp4pbz9jo_.php:26\nStack trace:\n\
    #0 /tmp/tmp4pbz9jo_.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp4pbz9jo_.php\
    \ on line 26\n"
  timestamp: 1659978687
- exit_code: 0
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  // TODO: write this function\n  // Hint: you will need an array of seen\
    \ numbers,\n  // and a new array of the final result\n  $result = array();\n \
    \ $seen = array();\n  foreach ($numbers as $value) {\n    if (array_key_exists($value,\
    \ $seen)) {\n      $seen[$value]++;\n    } else {\n      $seen[$value] = 1;\n\
    \    }\n  }\n  foreach ($numbers as $number) {\n    if ($seen[$number] == 1) {\n\
    \      $result[] = $number;\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  // TODO: Implement remove_duplicates.\n}\n\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8xx8xa10.php:15\n\
    Stack trace:\n#0 /tmp/tmp8xx8xa10.php(20): test()\n#1 {main}\n  thrown in /tmp/tmp8xx8xa10.php\
    \ on line 15\n"
  timestamp: 1659978687
- exit_code: 0
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  // build array of numbers to their counts\n  $number_counts = array();\n\
    \  foreach ($numbers as $number) {\n    if (array_key_exists($number, $number_counts))\
    \ {\n      $number_counts[$number]++;\n    } else {\n      $number_counts[$number]\
    \ = 1;\n    }\n  }\n\n  // build array of numbers to keep\n  $unique_numbers =\
    \ array();\n  foreach ($number_counts as $number => $count) {\n    if ($count\
    \ == 1) {\n      $unique_numbers[] = $number;\n    }\n  }\n\n  return $unique_numbers;\n\
    }\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n\tif (empty($numbers)) {\n\t\treturn null;\n\t}\n\t$new_array = array();\n\
    \tforeach ($numbers as $number) {\n\t\tif (!in_array($number, $new_array)) {\n\
    \t\t\t$new_array[] = $number;\n\t\t}\n\t}\n\treturn $new_array;\n}\n\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsvprofou.php:24\n\
    Stack trace:\n#0 /tmp/tmpsvprofou.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpsvprofou.php\
    \ on line 24\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $result = array();\n    // write your code here\n    $result = array_unique($numbers);\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2btyzddm.php:20\n\
    Stack trace:\n#0 /tmp/tmp2btyzddm.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp2btyzddm.php\
    \ on line 20\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $uniques = array();\n    foreach ($numbers as $num) {\n        if (!in_array($num,\
    \ $uniques)) {\n            $uniques[] = $num;\n        }\n    }\n    return $uniques;\n\
    }\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcf7udsit.php:23\n\
    Stack trace:\n#0 /tmp/tmpcf7udsit.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpcf7udsit.php\
    \ on line 23\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $unique = array();\n  foreach ($numbers as $number) {\n    if (!in_array($number,\
    \ $unique)) {\n      $unique[] = $number;\n    }\n  }\n  return $unique;\n}\n\
    $numbers = array(1, 2, 3, 2, 4);\nprint_r(remove_duplicates($numbers));\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpii6e6p2a.php:24\nStack\
    \ trace:\n#0 /tmp/tmpii6e6p2a.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpii6e6p2a.php\
    \ on line 24\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n\t$result = array();\n\tforeach ($numbers as $number) {\n\t\tif (!in_array($number,\
    \ $result)) {\n\t\t\t$result[] = $number;\n\t\t}\n\t}\n\treturn $result;\n}\n\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2pry_gz_.php:23\n\
    Stack trace:\n#0 /tmp/tmp2pry_gz_.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp2pry_gz_.php\
    \ on line 23\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $result = array();\n  $seen = array();\n  foreach ($numbers as $number)\
    \ {\n    if (!isset($seen[$number])) {\n      $result[] = $number;\n      $seen[$number]\
    \ = 1;\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n \
    \   return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmwqytfve.php:25\n\
    Stack trace:\n#0 /tmp/tmpmwqytfve.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpmwqytfve.php\
    \ on line 25\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $uniques = array();\n  $uniqueSet = array();\n  foreach ($numbers as $number)\
    \ {\n    if (!in_array($number, $uniqueSet)) {\n      $uniqueSet[] = $number;\n\
    \      $uniques[] = $number;\n    }\n  }\n  return $uniques;\n}\n\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpilp1zpn3.php:25\n\
    Stack trace:\n#0 /tmp/tmpilp1zpn3.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpilp1zpn3.php\
    \ on line 25\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $retval = array();\n    $seen = array();\n    foreach ($numbers as $number)\
    \ {\n        if (!in_array($number, $seen)) {\n            $retval[] = $number;\n\
    \            $seen[] = $number;\n        }\n    }\n    return $retval;\n}\n\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp54_0dtc_.php:25\n\
    Stack trace:\n#0 /tmp/tmp54_0dtc_.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp54_0dtc_.php\
    \ on line 25\n"
  timestamp: 1659978687
- exit_code: 0
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $output = array();\n    $i = 0;\n    while ($i < count($numbers)) {\n\
    \        $count = 0;\n        $k = 0;\n        while ($k < count($numbers)) {\n\
    \            if ($numbers[$i] == $numbers[$k]) {\n                $count++;\n\
    \            }\n            $k++;\n        }\n        if ($count == 1) {\n   \
    \         array_push($output, $numbers[$i]);\n        }\n        $i++;\n    }\n\
    \    return $output;\n}\nprint_r(remove_duplicates(array(1, 2, 3, 2, 4)));\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 3\n    [2] => 4\n)\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $unique = array();\n  $last = null;\n  foreach ($numbers as $number) {\n\
    \    if (!in_array($number, $unique) && $number != $last) {\n      $unique[] =\
    \ $number;\n    }\n    $last = $number;\n  }\n  return $unique;\n}\n\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptr7cogiu.php:25\n\
    Stack trace:\n#0 /tmp/tmptr7cogiu.php(28): test()\n#1 {main}\n  thrown in /tmp/tmptr7cogiu.php\
    \ on line 25\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    // Remove duplicates, then use array_values to reset index keys\n   \
    \ return array_values(array_unique($numbers));\n}\n\nprint_r(remove_duplicates(array(1,\
    \ 2, 3, 2, 4)));\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpcslut7rq.php:19\nStack\
    \ trace:\n#0 /tmp/tmpcslut7rq.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpcslut7rq.php\
    \ on line 19\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    return array_unique($numbers);\n}\n\nfunction candidate(...$args) {\n\
    \    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptcl8k4v2.php:17\n\
    Stack trace:\n#0 /tmp/tmptcl8k4v2.php(20): test()\n#1 {main}\n  thrown in /tmp/tmptcl8k4v2.php\
    \ on line 17\n"
  timestamp: 1659978686
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $numbers = array_unique($numbers);\n    return $numbers;\n}\n$numbers\
    \ = array(1, 2, 3, 2, 4);\nprint_r(remove_duplicates($numbers));\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [4] => 4\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpegnfhj3x.php:19\nStack\
    \ trace:\n#0 /tmp/tmpegnfhj3x.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpegnfhj3x.php\
    \ on line 19\n"
  timestamp: 1659978687
- exit_code: 0
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    // $current_number = null;\n    // $duplicate_number = null;\n    //\
    \ $counter = 0;\n    // foreach ($numbers as $index => $number) {\n    //    \
    \ if ($current_number === $number) {\n    //         $duplicate_number = $number;\n\
    \    //         $counter++;\n    //     } else {\n    //         $counter = 0;\n\
    \    //     }\n    //     if ($counter > 1) {\n    //         unset($numbers[$index]);\n\
    \    //     }\n    //     $current_number = $number;\n    // }\n    // return\
    \ $numbers;\n\n    $numbers_hash = array_count_values($numbers);\n    foreach\
    \ ($numbers_hash as $number => $count) {\n        if ($count > 1) {\n        \
    \    unset($numbers_hash[$number]);\n        }\n    }\n    $result = array_keys($numbers_hash);\n\
    \    return $result;\n}\n$numbers = array(1, 2, 3, 2, 4);\n$numbers_result = remove_duplicates($numbers);\n\
    var_dump($numbers_result);\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "array(3) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(3)\n  [2]=>\n  int(4)\n}\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n\t$result = array();\n\t// check for every number if it is also in the result\
    \ array\n\tforeach ($numbers as $number) {\n\t\tif (!in_array($number, $result))\
    \ {\n\t\t\t$result[] = $number;\n\t\t}\n\t}\n\treturn $result;\n}\n\nprint_r(remove_duplicates(array(1,\
    \ 2, 3, 2, 4)));\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp280b0mly.php:25\nStack\
    \ trace:\n#0 /tmp/tmp280b0mly.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp280b0mly.php\
    \ on line 25\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $unique_numbers = array();\n  $unique_number_indices = array();\n  foreach\
    \ ($numbers as $index => $number) {\n    if (!array_key_exists($number, $unique_number_indices))\
    \ {\n      $unique_number_indices[$number] = $index;\n    } else {\n      $duplicate_index\
    \ = $unique_number_indices[$number];\n      unset($unique_numbers[$duplicate_index]);\n\
    \      unset($unique_number_indices[$number]);\n    }\n    $unique_numbers[$index]\
    \ = $number;\n  }\n  return $unique_numbers;\n}\n\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw3gnfgh6.php:29\n\
    Stack trace:\n#0 /tmp/tmpw3gnfgh6.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpw3gnfgh6.php\
    \ on line 29\n"
  timestamp: 1659978687
