language: php
name: HumanEval_26_remove_duplicates
results:
- exit_code: 0
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $length = count($numbers);\n    $result = array();\n    for ($i = 0;\
    \ $i < $length; $i++) {\n        $is_unique = true;\n        for ($j = 0; $j <\
    \ $length; $j++) {\n            if ($i !== $j && $numbers[$i] === $numbers[$j])\
    \ {\n                $is_unique = false;\n                break;\n           \
    \ }\n        }\n        if ($is_unique) {\n            $result[] = $numbers[$i];\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823541
- exit_code: 0
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $unique = array();\n    $unique_elements = array();\n    foreach ($numbers\
    \ as $number) {\n        if (!isset($unique[$number])) {\n            $unique[$number]\
    \ = 0;\n        }\n        $unique[$number]++;\n    }\n    foreach ($unique as\
    \ $number => $occurrences) {\n        if ($occurrences == 1) {\n            $unique_elements[]\
    \ = $number;\n        }\n    }\n    return $unique_elements;\n}\n$result = remove_duplicates(array(1,\
    \ 2, 3, 2, 4));\necho \"$result[0], $result[1], $result[2]\\n\";\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1, 3, 4

    '
  timestamp: 1659823541
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $result = array();\n    foreach ($numbers as $number) {\n        if (!in_array($number,\
    \ $result)) {\n            $result[] = $number;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0clzbs5l.php:23\n\
    Stack trace:\n#0 /tmp/tmp0clzbs5l.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp0clzbs5l.php\
    \ on line 23\n"
  timestamp: 1659823541
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $uniques = array();\n    foreach ($numbers as $number) {\n        if\
    \ (! in_array($number, $uniques)) {\n            $uniques[] = $number;\n     \
    \   }\n    }\n    return $uniques;\n}\n\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvfi9prwl.php:23\n\
    Stack trace:\n#0 /tmp/tmpvfi9prwl.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpvfi9prwl.php\
    \ on line 23\n"
  timestamp: 1659823541
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  // your code here\n  $size = count($numbers);\n  $num_index = 0;\n  $last_num_index\
    \ = 0;\n  $not_dupe = [];\n  $is_dupe = false;\n  while ($num_index < $size) {\n\
    \    $key = $numbers[$num_index];\n    if (!isset($not_dupe[$key])) {\n      $not_dupe[$key]\
    \ = true;\n      $last_num_index = $num_index;\n    } else {\n      $numbers[$num_index]\
    \ = $numbers[$last_num_index];\n      $numbers[$last_num_index] = $key;\n    \
    \  $last_num_index = $last_num_index - 1;\n    }\n    $num_index = $num_index\
    \ + 1;\n  }\n  return array_slice($numbers, 0, $last_num_index + 1);\n}\n\n$numbers\
    \ = [1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n$numbers = remove_duplicates($numbers);\n\
    print_r($numbers);\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprj2nbpyx.php:38\n\
    Stack trace:\n#0 /tmp/tmprj2nbpyx.php(41): test()\n#1 {main}\n  thrown in /tmp/tmprj2nbpyx.php\
    \ on line 38\n"
  timestamp: 1659823541
- exit_code: 0
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n\t$unique_numbers = array();\n\t$numbers_counts = array_count_values($numbers);\n\
    \tforeach ($numbers_counts as $number => $count) {\n\t\tif ($count === 1) {\n\t\
    \t\t$unique_numbers[] = $number;\n\t\t}\n\t}\n\treturn $unique_numbers;\n}\n\n\
    var_dump(remove_duplicates(array(1, 2, 3, 2, 4)));\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "array(3) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(3)\n  [2]=>\n  int(4)\n}\n"
  timestamp: 1659823541
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $out = array();\n    foreach ($numbers as $num) {\n        if (!in_array($num,\
    \ $out)) {\n            $out[] = $num;\n        }\n    }\n    return $out;\n}\n\
    \nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcheip02g.php:23\n\
    Stack trace:\n#0 /tmp/tmpcheip02g.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpcheip02g.php\
    \ on line 23\n"
  timestamp: 1659823541
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $unique = array();\n    $result = array();\n    foreach ($numbers as\
    \ $number) {\n        if (!in_array($number, $unique)) {\n            $unique[]\
    \ = $number;\n            $result[] = $number;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvlllqgwf.php:25\n\
    Stack trace:\n#0 /tmp/tmpvlllqgwf.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpvlllqgwf.php\
    \ on line 25\n"
  timestamp: 1659823541
- exit_code: 0
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    // $results = array();\n    // foreach ($numbers as $number) {\n    //\
    \     if (!isset($count[$number])) {\n    //         $count[$number] = 0;\n  \
    \  //     }\n    //     $count[$number]++;\n    // }\n    // foreach ($count as\
    \ $number => $occurrences) {\n    //     if ($occurrences == 1) {\n    //    \
    \     $results[] = $number;\n    //     }\n    // }\n    // return $results;\n\
    \n    $count = array_count_values($numbers);\n    return array_keys($count, 1);\n\
    }\n\n$res = remove_duplicates(array(1, 2, 3, 2, 4));\nvar_dump($res);\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "array(3) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(3)\n  [2]=>\n  int(4)\n}\n"
  timestamp: 1659823541
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $output = array();\n  $hash = array();\n  foreach ($numbers as $number)\
    \ {\n    if (!array_key_exists($number, $hash)) {\n      $hash[$number] = 1;\n\
    \      $output[] = $number;\n    }\n  }\n  return $output;\n}\n$input = array(1,\
    \ 2, 3, 2, 4);\nvar_dump(remove_duplicates($input));\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(4) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(2)\n  [2]=>\n  int(3)\n \
    \ [3]=>\n  int(4)\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv65rzrqg.php:26\n\
    Stack trace:\n#0 /tmp/tmpv65rzrqg.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpv65rzrqg.php\
    \ on line 26\n"
  timestamp: 1659823541
- exit_code: 0
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n\t$data = [];\n\t$duplicate = [];\n\t$end = count($numbers);\n\tfor ($i =\
    \ 0; $i < $end; $i++) {\n\t\t$index = array_search($numbers[$i], $data);\n\t\t\
    if ($index !== false) {\n\t\t\t$duplicate[] = $numbers[$i];\n\t\t} else {\n\t\t\
    \t$data[] = $numbers[$i];\n\t\t}\n\t}\n\t$temp = [];\n\tforeach ($data as $value)\
    \ {\n\t\tif (!in_array($value, $duplicate)) {\n\t\t\t$temp[] = $value;\n\t\t}\n\
    \t}\n\treturn $temp;\n}\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823541
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $output = array();\n    foreach ($numbers as $number) {\n        if (!in_array($number,\
    \ $output)) {\n            $output[] = $number;\n        }\n    }\n    return\
    \ $output;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyyll7ddf.php:23\n\
    Stack trace:\n#0 /tmp/tmpyyll7ddf.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpyyll7ddf.php\
    \ on line 23\n"
  timestamp: 1659823541
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $temp = array();\n    $result = array();\n    foreach ($numbers as $number)\
    \ {\n        if (in_array($number, $temp)) {\n            if (!in_array($number,\
    \ $result)) {\n                $result[] = $number;\n            }\n        }\
    \ else {\n            $temp[] = $number;\n        }\n    }\n    return $result;\n\
    }\n\n$a = array(1, 2, 3, 2, 4);\nvar_dump(remove_duplicates($a));\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(1) {\n  [0]=>\n  int(2)\n}\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpnief4dsy.php:29\nStack trace:\n#0 /tmp/tmpnief4dsy.php(33):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpnief4dsy.php on line 29\n"
  timestamp: 1659823541
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n\t$count = array_count_values($numbers);\n\treturn array_filter($numbers,\
    \ function($element) use ($count) {\n\t\treturn $count[$element] == 1;\n\t});\n\
    }\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprz4fl_r2.php:20\n\
    Stack trace:\n#0 /tmp/tmprz4fl_r2.php(23): test()\n#1 {main}\n  thrown in /tmp/tmprz4fl_r2.php\
    \ on line 20\n"
  timestamp: 1659823541
- exit_code: 0
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  // TODO: Complete function\n  $newArr = [];\n  $counter = 0;\n  for ($i\
    \ = 0; $i < count($numbers); $i++) {\n    for ($j = 0; $j < count($numbers); $j++)\
    \ {\n      if ($numbers[$i] == $numbers[$j]) {\n        $counter++;\n      }\n\
    \    }\n    if ($counter <= 1) {\n      array_push($newArr, $numbers[$i]);\n \
    \   }\n    $counter = 0;\n  }\n  return $newArr;\n}\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823541
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $unique_numbers = array();\n  foreach ($numbers as $number) {\n    if (!in_array($number,\
    \ $unique_numbers)) {\n      $unique_numbers[] = $number;\n    }\n  }\n  return\
    \ $unique_numbers;\n}\n\nassert_options(ASSERT_BAIL, 1);\nassert(remove_duplicates(array(1,\
    \ 2, 3, 2, 4)) == array(1, 3, 4));\necho \"All tests pass\\n\";\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught AssertionError: assert(remove_duplicates([1, 2,\
    \ 3, 2, 4]) == [1, 3, 4]) in /tmp/tmp6aekrm1h.php:17\nStack trace:\n#0 /tmp/tmp6aekrm1h.php(17):\
    \ assert(false, 'assert(remove_d...')\n#1 {main}\n  thrown in /tmp/tmp6aekrm1h.php\
    \ on line 17\n"
  timestamp: 1659823541
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n\t$counts = array_count_values($numbers);\n\tforeach ($counts as $key =>\
    \ $value) {\n\t\tif ($value > 1) {\n\t\t\tunset($numbers[array_search($key, $numbers)]);\n\
    \t\t}\n\t}\n\treturn $numbers;\n}\n\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprnhkhfv5.php:23\n\
    Stack trace:\n#0 /tmp/tmprnhkhfv5.php(26): test()\n#1 {main}\n  thrown in /tmp/tmprnhkhfv5.php\
    \ on line 23\n"
  timestamp: 1659823541
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $numbers = array_values(array_unique($numbers));\n    return $numbers;\n\
    }\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpogty9lao.php:18\n\
    Stack trace:\n#0 /tmp/tmpogty9lao.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpogty9lao.php\
    \ on line 18\n"
  timestamp: 1659823541
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $array = [];\n  foreach ($numbers as $key => $value) {\n    if (!in_array($value,\
    \ $array)) {\n      $array[] = $value;\n    }\n  }\n  return $array;\n}\n$array\
    \ = [1, 2, 3, 2, 4];\necho '<pre>';\nprint_r(remove_duplicates($array));\necho\
    \ '</pre>';\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n\
    )\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo53mm7zj.php:27\n\
    Stack trace:\n#0 /tmp/tmpo53mm7zj.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpo53mm7zj.php\
    \ on line 27\n"
  timestamp: 1659823541
- exit_code: 0
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $unique_numbers = array();\n    $duplicate_numbers = array();\n    foreach\
    \ ($numbers as $number) {\n        if (array_key_exists($number, $unique_numbers))\
    \ {\n            $duplicate_numbers[$number] = $number;\n        } else {\n  \
    \          $unique_numbers[$number] = $number;\n        }\n    }\n    $output\
    \ = array();\n    foreach ($numbers as $number) {\n        if (!array_key_exists($number,\
    \ $duplicate_numbers)) {\n            $output[] = $number;\n        }\n    }\n\
    \    return $output;\n}\n\necho \"\\n\";\necho \"input: array(1, 2, 3, 2, 4)\\\
    n\";\necho \"output: \\n\";\nprint_r(remove_duplicates(array(1, 2, 3, 2, 4)));\n\
    echo \"\\n\";\necho \"input: array(1, 2, 3, 4, 1, 2, 4, 3)\\n\";\necho \"output:\
    \ \\n\";\nprint_r(remove_duplicates(array(1, 2, 3, 4, 1, 2, 4, 3)));\necho \"\\\
    n\";\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "\ninput: array(1, 2, 3, 2, 4)\noutput: \nArray\n(\n    [0] => 1\n    [1]\
    \ => 3\n    [2] => 4\n)\n\ninput: array(1, 2, 3, 4, 1, 2, 4, 3)\noutput: \nArray\n\
    (\n)\n\n"
  timestamp: 1659823541
