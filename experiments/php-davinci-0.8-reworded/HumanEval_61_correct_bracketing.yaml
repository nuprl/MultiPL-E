name: HumanEval_61_correct_bracketing
language: php
prompt: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if every\
  \ opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
  (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
  (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
  \ {\n"
tests: "function candidate(...$args) {\n    return correct_bracketing(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true)\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
  \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((((\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())())(()\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $len = strlen($brackets);\n    $open = 0;\n    for ($i = 0; $i\
    \ < $len; $i++) {\n        if ($brackets[$i] == \"(\") {\n            $open++;\n\
    \        } else {\n            $open--;\n        }\n        if ($open < 0) {\n\
    \            return false;\n        }\n    }\n    return $open == 0;\n}\n\n$in\
    \ = fopen(\"6_5_input.txt\", \"r\");\nwhile ($line = fgets($in)) {\n    echo correct_bracketing($line)\
    \ ? \"true\\n\" : \"false\\n\";\n}\nfclose($in);", "    $bracket_stack = array();\n\
    \    foreach(str_split($brackets) as $bracket) {\n        if($bracket == \"(\"\
    ) {\n            array_push($bracket_stack, \"(\");\n        } else {\n      \
    \      if(count($bracket_stack) == 0) {\n                return false;\n     \
    \       }\n            array_pop($bracket_stack);\n        }\n    }\n    return\
    \ count($bracket_stack) == 0;\n}\n\necho correct_bracketing(\"(\") . \"\\n\";\n\
    echo correct_bracketing(\"()\") . \"\\n\";\necho correct_bracketing(\"(()())\"\
    ) . \"\\n\";\necho correct_bracketing(\")(()\") . \"\\n\";", "\t$len = strlen($brackets);\n\
    \t$stack = array();\n\t$i = 0;\n\twhile($i < $len) {\n\t\tif($brackets[$i] ==\
    \ \"(\") {\n\t\t\tarray_push($stack, \"(\");\n\t\t} else {\n\t\t\tif(empty($stack))\
    \ {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\t\t\t\
    }\n\t\t}\n\t\t$i++;\n\t}\n\tif(empty($stack)) {\n\t\treturn true;\n\t} else {\n\
    \t\treturn false;\n\t}\n}\n", "  $stack = new SplStack();\n  for ($i = 0; $i <\
    \ strlen($brackets); $i++) {\n    $char = $brackets[$i];\n    if ($char == '(')\
    \ {\n      $stack->push('(');\n    } else {\n      if ($stack->isEmpty()) {\n\
    \        return false;\n      }\n      $stack->pop();\n    }\n  }\n  return $stack->isEmpty();\n\
    }\n", "    $cnt = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n     \
    \   if ($brackets[$i] == \"(\") {\n            $cnt++;\n        } else {\n   \
    \         $cnt--;\n        }\n        if ($cnt < 0) {\n            return false;\n\
    \        }\n    }\n    return $cnt == 0;\n}\n", "\t$stack = new SplStack();\n\t\
    $len = strlen($brackets);\n\tfor ($i = 0; $i < $len; $i++) {\n\t\t$item = $brackets[$i];\n\
    \t\tif ($item == \"(\") {\n\t\t\t$stack->push($item);\n\t\t} else {\n\t\t\tif\
    \ ($stack->isEmpty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t$stack->pop();\n\
    \t\t}\n\t}\n\treturn $stack->isEmpty();\n}\n", "\t$open = 0;\n\tfor ($i = 0; $i\
    \ < strlen($brackets); $i++) {\n\t\tif ($brackets[$i] == \"(\") {\n\t\t\t$open++;\n\
    \t\t} else {\n\t\t\t$open--;\n\t\t}\n\t\tif ($open < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn $open == 0;\n}\n", "  $len = strlen($brackets);\n  $open_bracket_count\
    \ = 0;\n  for ($i = 0; $i < $len; $i++) {\n    $bracket = $brackets[$i];\n   \
    \ if ($bracket == \"(\") {\n      $open_bracket_count++;\n    } else if ($bracket\
    \ == \")\") {\n      $open_bracket_count--;\n    } else {\n      return false;\n\
    \    }\n    if ($open_bracket_count < 0) {\n      return false;\n    }\n  }\n\
    \  return $open_bracket_count == 0;\n}\n", "    $len = strlen($brackets);\n  \
    \  $a = 0;\n    $b = 0;\n    for ($i = 0; $i < $len; $i++) {\n        if ($brackets[$i]\
    \ == \"(\") $a++;\n        else if ($brackets[$i] == \")\") $b++;\n        if\
    \ ($b > $a) return false;\n    }\n    return ($a == $b);\n}\n", "  $open = 0;\n\
    \  $len = strlen($brackets);\n  for ($i = 0; $i < $len; $i++) {\n    if ($brackets[$i]\
    \ == \"(\") {\n      $open++;\n    } else if ($brackets[$i] == \")\") {\n    \
    \  $open--;\n    } else {\n      echo \"non-bracket encountered\\n\";\n      return;\n\
    \    }\n    if ($open < 0) {\n      echo \"too many closing brackets\\n\";\n \
    \     return;\n    }\n  }\n  if ($open == 0) {\n    echo \"true\\n\";\n  } else\
    \ {\n    echo \"false\\n\";\n  }\n}\n\ncorrect_bracketing(\"(\")\ncorrect_bracketing(\"\
    ()\")\ncorrect_bracketing(\"(()())\")\ncorrect_bracketing(\")(()\")\n", "  $arr\
    \ = str_split($brackets);\n  $stack = array();\n  $i = 0;\n  while ($i < count($arr))\
    \ {\n    if ($arr[$i] == \"(\") {\n      array_push($stack, $arr[$i]);\n    }\
    \ else {\n      if (empty($stack)) {\n        return false;\n      } else {\n\
    \        array_pop($stack);\n      }\n    }\n    $i++;\n  }\n  if (empty($stack))\
    \ {\n    return true;\n  } else {\n    return false;\n  }\n}", "\n}", "    $open_count\
    \ = substr_count($brackets, \"(\");\n    $close_count = substr_count($brackets,\
    \ \")\");\n    return $open_count == $close_count;\n}", "    $list = [];\n   \
    \ $count = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i]\
    \ == \"(\") {\n            $list[$count] = 1;\n            $count++;\n       \
    \ } else {\n            if ($count == 0) {\n                return false;\n  \
    \          } else {\n                $count--;\n            }\n        }\n   \
    \ }\n    if ($count != 0) {\n        return false;\n    }\n    return true;\n}",
  "\t$open_brackets = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\tif ($brackets[$i]\
    \ == \"(\") {\n\t\t\t$open_brackets++;\n\t\t} else {\n\t\t\t$open_brackets--;\n\
    \t\t}\n\t\tif ($open_brackets < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn\
    \ $open_brackets == 0;\n}", "    $bracket_pairs = 0;\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == '(') {\n            $bracket_pairs++;\n\
    \        } else {\n            $bracket_pairs--;\n        }\n        if ($bracket_pairs\
    \ < 0) {\n            return false;\n        }\n    }\n    return $bracket_pairs\
    \ == 0;\n}\n", "    $stack = array();\n    $split = str_split($brackets);\n  \
    \  foreach ($split as $char) {\n        if ($char == \"(\") {\n            array_push($stack,\
    \ $char);\n        } else {\n            if (count($stack) > 0) {\n          \
    \      array_pop($stack);\n            } else {\n                return false;\n\
    \            }\n        }\n    }\n    return count($stack) == 0;\n}\n", "\t$expected\
    \ = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\tif ($brackets[$i]\
    \ == \"(\") {\n\t\t\t$expected++;\n\t\t} else if ($brackets[$i] == \")\") {\n\t\
    \t\t$expected--;\n\t\t}\n\t\tif ($expected < 0) {\n\t\t\treturn false;\n\t\t}\n\
    \t}\n\treturn $expected == 0;\n}\n", "  \n}\n", "  // base case\n  if ($brackets\
    \ == '') {\n    return true;\n  }\n\n  // recursive case\n  $first_char = substr($brackets,\
    \ 0, 1);\n  $remaining_brackets = substr($brackets, 1);\n\n  if ($first_char ==\
    \ '(') {\n    $nested_result = correct_bracketing($remaining_brackets);\n    if\
    \ ($nested_result) {\n      $closing_bracket_index = strpos($remaining_brackets,\
    \ ')');\n      if ($closing_bracket_index) {\n        $remaining_brackets = substr($remaining_brackets,\
    \ $closing_bracket_index + 1);\n        return correct_bracketing($remaining_brackets);\n\
    \      }\n    }\n  }\n\n  return false;\n}\n\necho \"correct_bracketing(\\\"(\\\
    \")\\n\";\necho correct_bracketing(\"(\");\necho \"\\n\";\n\necho \"correct_bracketing(\\\
    \"()\\\")\\n\";\necho correct_bracketing(\"()\");\necho \"\\n\";\n\necho \"correct_bracketing(\\\
    \"(()())\\\")\\n\";\necho correct_bracketing(\"(()())\");\necho \"\\n\";\n\necho\
    \ \"correct_bracketing(\\\")(()\\\")\\n\";\necho correct_bracketing(\")(()\");\n\
    echo \"\\n\";\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
