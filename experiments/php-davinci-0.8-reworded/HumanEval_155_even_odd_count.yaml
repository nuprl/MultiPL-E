name: HumanEval_155_even_odd_count
language: php
prompt: "<?php\n// Given an integer. return an array that has the number of even and\
  \ odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// array(1,\
  \ 1)\n// >>> even_odd_count(123)\n// array(1, 2)\nfunction even_odd_count($num)\
  \ {\n"
tests: "function candidate(...$args) {\n    return even_odd_count(...$args);\n}\n\n\
  function test(): void {\n    if (candidate(7) !== array(0, 1)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(-78) !== array(1, 1)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(3452) !== array(2, 2)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(346211) !== array(3, 3)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(-345821) !== array(3, 3)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(-2) !== array(1, 0)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(-45347) !== array(2, 3)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(0) !== array(1, 0)) { throw new Exception(\"\
  Test failed!\"); }\n}\n\ntest();"
completions: ["  // Write your code here\n\n}\n\n$input1 = -12;\nprint_r(even_odd_count($input1));\n\
    \n$input2 = 123;\nprint_r(even_odd_count($input2));\n", "    $num = abs($num);\n\
    \    $even_counter = 0;\n    $odd_counter = 0;\n    $num_as_string = \"$num\"\
    ;\n    for ($i = 0; $i < strlen($num_as_string); $i++) {\n        if ($num_as_string[$i]\
    \ % 2 == 0) {\n            $even_counter++;\n        } else {\n            $odd_counter++;\n\
    \        }\n    }\n    return array($even_counter, $odd_counter);\n}\n\necho \"\
    <pre>\";\necho \"Given the number -12, array(1, 1) should be returned.\\n\";\n\
    print_r(even_odd_count(-12));\necho \"Given the number 123, array(1, 2) should\
    \ be returned.\\n\";\nprint_r(even_odd_count(123));\necho \"</pre>\";", "    if\
    \ ($num >= 0) {\n        $num = (string)$num;\n        $odd = substr_count($num,\
    \ \"1\") + substr_count($num, \"3\") + substr_count($num, \"5\") + substr_count($num,\
    \ \"7\") + substr_count($num, \"9\");\n        $even = substr_count($num, \"0\"\
    ) + substr_count($num, \"2\") + substr_count($num, \"4\") + substr_count($num,\
    \ \"6\") + substr_count($num, \"8\");\n    } else {\n        $num = (string)$num;\n\
    \        $num = substr($num, 1);\n        $odd = substr_count($num, \"1\") + substr_count($num,\
    \ \"3\") + substr_count($num, \"5\") + substr_count($num, \"7\") + substr_count($num,\
    \ \"9\");\n        $even = substr_count($num, \"0\") + substr_count($num, \"2\"\
    ) + substr_count($num, \"4\") + substr_count($num, \"6\") + substr_count($num,\
    \ \"8\");\n    }\n    $res = array($even, $odd);\n    return $res;\n}", "  $digits\
    \ = str_split(abs($num));\n  $even = array_filter($digits, function($num) { return\
    \ $num % 2 == 0; });\n  $odd = array_filter($digits, function($num) { return $num\
    \ % 2 == 1; });\n  return array(count($even), count($odd));\n}\n\necho 'even_odd_count(-12):\
    \ ';\nvar_dump(even_odd_count(-12));\necho 'even_odd_count(123): ';\nvar_dump(even_odd_count(123));\n",
  "  $digits = str_split(abs($num));\n  $even = 0;\n  $odd = 0;\n  foreach ($digits\
    \ as $digit) {\n    if ($digit % 2 == 0) {\n      $even++;\n    } else {\n   \
    \   $odd++;\n    }\n  }\n  return array($even, $odd);\n}", "  $arr = [];\n  if\
    \ ($num < 0) {\n    $num = $num * -1;\n  }\n  $num = strval($num);\n  for ($i\
    \ = 0; $i < strlen($num); $i++) {\n    if ($num[$i] % 2 == 0) {\n      $arr[0]\
    \ += 1;\n    } else {\n      $arr[1] += 1;\n    }\n  }\n  return $arr;\n}\n",
  "  $num = str_split($num);\n  $count = 0;\n  $count2 = 0;\n  for ($i = 0; $i < count($num);\
    \ $i++) {\n    if ($num[$i] % 2 == 0) {\n      $count++;\n    } else {\n     \
    \ $count2++;\n    }\n  }\n  return array($count, $count2);\n}\n", "   $arr = str_split(abs($num));\n\
    \   $even_count = 0;\n   $odd_count = 0;\n   foreach ($arr as $num) {\n      if\
    \ ($num % 2 == 0) {\n         $even_count += 1;\n      } else {\n         $odd_count\
    \ += 1;\n      }\n   }\n   $result = array($even_count, $odd_count);\n   return\
    \ $result;\n}", "\t$digits = str_split(abs($num));\n\t$even = 0;\n\t$odd = 0;\n\
    \tforeach ($digits as $digit) {\n\t\tif ($digit % 2 == 0) {\n\t\t\t$even++;\n\t\
    \t} else {\n\t\t\t$odd++;\n\t\t}\n\t}\n\treturn array($even, $odd);\n}", "\t$array\
    \ = array();\n\t$evenCount = 0;\n\t$oddCount = 0;\n\t$num = strval($num);\n\t\
    for ($i = 0; $i < strlen($num); $i++) {\n\t\tif ($num[$i] % 2 == 0) {\n\t\t\t\
    $evenCount++;\n\t\t} else {\n\t\t\t$oddCount++;\n\t\t}\n\t}\n\tarray_push($array,\
    \ $evenCount, $oddCount);\n\treturn $array;\n}\n\nprint_r(even_odd_count(-12));\n\
    echo \"\\n\";\nprint_r(even_odd_count(123));\necho \"\\n\";", "  $arr = str_split($num);\n\
    \  $evenCount = 0;\n  $oddCount = 0;\n  for ($i = 0; $i < count($arr); $i++) {\n\
    \    if ($arr[$i] % 2 == 0) {\n      $evenCount++;\n    } else {\n      $oddCount++;\n\
    \    }\n  }\n  return array($evenCount, $oddCount);\n}", "\tif (empty($num)) {\n\
    \t\treturn 0;\n\t}\n\tif ($num < 0) {\n\t\t$num = $num * -1;\n\t}\n\t$even = 0;\n\
    \t$odd = 0;\n\t$digits = str_split($num);\n\tforeach ($digits as $digit) {\n\t\
    \tif ($digit % 2 == 0) {\n\t\t\t$even += 1;\n\t\t} else {\n\t\t\t$odd += 1;\n\t\
    \t}\n\t}\n\treturn array($even, $odd);\n}\n", "  $even_count = 0;\n  $odd_count\
    \ = 0;\n  while ($num > 0) {\n    $rem = $num % 10;\n    if ($rem % 2 == 0) {\n\
    \      $even_count++;\n    } else {\n      $odd_count++;\n    }\n    $num = floor($num\
    \ / 10);\n  }\n  return array($even_count, $odd_count);\n}\n\n$num = -12;\n$result\
    \ = even_odd_count($num);\nprint_r($result);\n\n$num = 123;\n$result = even_odd_count($num);\n\
    print_r($result);", "    $even = 0;\n    $odd = 0;\n    for ($i = 0; $i < strlen($num);\
    \ $i++) {\n        if ($num[$i] % 2 == 0) {\n            $even++;\n        } else\
    \ {\n            $odd++;\n        }\n    }\n    return array($even, $odd);\n}\n\
    echo \"even_odd_count(-12) = \";\nprint_r(even_odd_count(-12));\necho \"<br />\"\
    ;\necho \"even_odd_count(123) = \";\nprint_r(even_odd_count(123));", "    $numAbs\
    \ = abs($num);\n    $oddCount = 0;\n    $evenCount = 0;\n    while ($numAbs >\
    \ 0) {\n        $remainder = $numAbs % 10;\n        if ($remainder % 2 == 0) {\n\
    \            $evenCount += 1;\n        } else {\n            $oddCount += 1;\n\
    \        }\n        $numAbs = floor($numAbs / 10);\n    }\n    return array($evenCount,\
    \ $oddCount);\n}\n", "  $even = 0;\n  $odd = 0;\n  $num = str_split(abs($num));\n\
    \  foreach ($num as $digit) {\n    if ($digit % 2 == 0) {\n      $even++;\n  \
    \  } else {\n      $odd++;\n    }\n  }\n  return array($even, $odd);\n}\n", " \
    \   if($num < 0) {\n        $num = -1 * $num;\n    }\n    $digits = str_split($num);\n\
    \    $even = 0;\n    $odd = 0;\n    foreach($digits as $digit) {\n        if($digit\
    \ % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n \
    \       }\n    }\n    return array($even, $odd);\n}\n$even_odd_count = even_odd_count(12356);\n\
    print_r($even_odd_count);", "  $stringNum = (string) $num;\n  $evenCount = 0;\n\
    \  $oddCount = 0;\n  for ($i = 0; $i < strlen($stringNum); $i++) {\n    if ($stringNum[$i]\
    \ % 2 == 0) {\n      $evenCount++;\n    } else {\n      $oddCount++;\n    }\n\
    \  }\n  return array($evenCount, $oddCount);\n}\n\n$evensOdds = even_odd_count(-12);\n\
    print_r($evensOdds);", "  $num = str_split(abs($num));\n  $result = [0, 0];\n\
    \  for ($i = 0; $i < count($num); $i++) {\n    if ($num[$i] % 2 === 0) {\n   \
    \   $result[0]++;\n    } else {\n      $result[1]++;\n    }\n  }\n  return $result;\n\
    }", "    $num = abs($num);\n    $evens = 0;\n    $odds = 0;\n    while ($num >\
    \ 0) {\n        $digit = $num % 10;\n        if ($digit % 2 === 0) {\n       \
    \     $evens++;\n        } else {\n            $odds++;\n        }\n        $num\
    \ = floor($num / 10);\n    }\n    return array($evens, $odds);\n}\n", "\t$even\
    \ = 0;\n\t$odd = 0;\n\twhile ($num != 0) {\n\t\t$r = $num % 10;\n\t\tif ($r %\
    \ 2 == 0) {\n\t\t\t$even += 1;\n\t\t} else {\n\t\t\t$odd += 1;\n\t\t}\n\t\t$num\
    \ = $num / 10;\n\t}\n\treturn [$even, $odd];\n}\nprint_r(even_odd_count(-12));\n\
    print_r(even_odd_count(123));\nprint_r(even_odd_count(45892375));\nprint_r(even_odd_count(789568));\n\
    print_r(even_odd_count(45892));\nprint_r(even_odd_count(0));", "  $len = strlen($num);\n\
    \  $arr = [];\n  for ($i = 0; $i < $len; $i++) {\n    if ($num[$i] % 2 == 0) {\n\
    \      $arr[0]++;\n    } else {\n      $arr[1]++;\n    }\n  }\n  return $arr;\n\
    }\n\n$num = 123;\nprint_r(even_odd_count($num));", "  $count_even = 0;\n  $count_odd\
    \ = 0;\n  $arr = array(\n    $count_even,\n    $count_odd\n  );\n  $digits = str_split(abs($num));\n\
    \  foreach ($digits as $digit) {\n    if ($digit % 2 == 0) {\n      $count_even++;\n\
    \    } else {\n      $count_odd++;\n    }\n  }\n  return $arr;\n}\n\necho even_odd_count(-12);",
  "  $num = abs($num);\n  $evens = 0;\n  $odds = 0;\n  while ($num > 0) {\n    $last_digit\
    \ = $num % 10;\n    if ($last_digit % 2 == 0) {\n      $evens++;\n    } else {\n\
    \      $odds++;\n    }\n    $num = floor($num / 10);\n  }\n  return array($evens,\
    \ $odds);\n}\n", "    $num = abs($num);\n    $evens = 0;\n    $odds = 0;\n   \
    \ while ($num > 0) {\n        $remainder = $num % 10;\n        if ($remainder\
    \ % 2 == 0) {\n            $evens++;\n        } else {\n            $odds++;\n\
    \        }\n        $num = $num / 10;\n    }\n    return array($evens, $odds);\n\
    }\n", "  $result_arr = [];\n  $num_arr = str_split($num);\n  $num_arr = array_map(function($num)\
    \ {\n    return abs($num);\n  }, $num_arr);\n  // echo implode(',', $num_arr);\n\
    \  $even_count = 0;\n  $odd_count = 0;\n  foreach ($num_arr as $key => $value)\
    \ {\n    if ($value % 2 == 0) {\n      $even_count++;\n    } else {\n      $odd_count++;\n\
    \    }\n  }\n  array_push($result_arr, $even_count, $odd_count);\n  return $result_arr;\n\
    }\necho implode(',', even_odd_count(-12));", "    $digits = str_split(abs($num));\n\
    \    return array_reduce($digits, function($carry, $item) {\n        $carry[$item\
    \ % 2]++;\n        return $carry;\n    }, array(0, 0));\n}\n", "    $evens = 0;\n\
    \    $odds = 0;\n    $abs = abs($num);\n    while ($abs > 0) {\n        $remainder\
    \ = $abs % 10;\n        if ($remainder % 2 === 0) {\n            $evens++;\n \
    \       } else {\n            $odds++;\n        }\n        $abs = ($abs - $remainder)\
    \ / 10;\n    }\n    return array($evens, $odds);\n}\nprint_r(even_odd_count(-12));\n\
    print_r(even_odd_count(123));", "\t$arr = [];\n\t$arr[0] = 0;\n\t$arr[1] = 0;\n\
    \t$str = strval($num);\n\tfor ($i = 0; $i < strlen($str); $i++) {\n\t\tif ($str[$i]\
    \ % 2 == 0) {\n\t\t\t$arr[0] += 1;\n\t\t} else {\n\t\t\t$arr[1] += 1;\n\t\t}\n\
    \t}\n\treturn $arr;\n}\n$a = even_odd_count(-12);\nfor ($i = 0; $i < count($a);\
    \ $i++) {\n\techo $a[$i] . ' ';\n}\necho \"<br>\";\n$b = even_odd_count(123);\n\
    for ($i = 0; $i < count($b); $i++) {\n\techo $b[$i] . ' ';\n}\necho \"<br>\";\n",
  "\t$sumEven = 0;\n\t$sumOdd = 0;\n\t$num = abs($num);\n\twhile($num>=1){\n\t\t$digit\
    \ = $num%10;\n\t\tif($digit%2 == 0){\n\t\t\t$sumEven++;\n\t\t}else{\n\t\t\t$sumOdd++;\n\
    \t\t}\n\t\t$num = floor($num/10);\n\t}\n\treturn array($sumEven, $sumOdd);\n}\n\
    $tests = array(\n\t-12,\n\t123,\n\t100\n);\nforeach ($tests as $t) {\n\techo \"\
    $t: \";\n\tprint_r(even_odd_count($t));\n\techo \"\\n\";\n}\n", "    $arr = array();\n\
    \    $even = 0;\n    $odd = 0;\n    if ($num < 0) {\n        $num = abs($num);\n\
    \    }\n    while ($num != 0) {\n        $digit = $num % 10;\n        if ($digit\
    \ % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n \
    \       }\n        $num = (int)($num / 10);\n    }\n    $arr[] = $even;\n    $arr[]\
    \ = $odd;\n    return $arr;\n}\nprint_r(even_odd_count(-123));", "\t$even_count\
    \ = 0;\n\t$odd_count = 0;\n\t$negative = false;\n\tif ($num < 0) {\n\t\t$negative\
    \ = true;\n\t\t$num = $num * -1;\n\t}\n\twhile ($num > 0) {\n\t\t$digit = $num\
    \ % 10;\n\t\tif ($digit % 2 == 0) {\n\t\t\t$even_count += 1;\n\t\t} else {\n\t\
    \t\t$odd_count += 1;\n\t\t}\n\t\t$num = $num / 10;\n\t}\n\tif ($negative) {\n\t\
    \t$odd_count += 1;\n\t}\n\treturn array($even_count, $odd_count);\n}\n", "  $even_count\
    \ = 0;\n  $odd_count = 0;\n  $num = abs($num);\n  while ($num) {\n    $digit =\
    \ $num % 10;\n    if ($digit % 2 == 0) {\n      $even_count++;\n    } else {\n\
    \      $odd_count++;\n    }\n    $num = $num / 10;\n  }\n  return array($even_count,\
    \ $odd_count);\n}\n\nprint_r(even_odd_count(-123));\nprint_r(even_odd_count(123));\n\
    print_r(even_odd_count(0));", "\treturn [substr_count(number_format($num, 0, '',\
    \ ''), '2') + substr_count(number_format($num, 0, '', ''), '4') + substr_count(number_format($num,\
    \ 0, '', ''), '6') + substr_count(number_format($num, 0, '', ''), '8'), substr_count(number_format($num,\
    \ 0, '', ''), '1') + substr_count(number_format($num, 0, '', ''), '3') + substr_count(number_format($num,\
    \ 0, '', ''), '5') + substr_count(number_format($num, 0, '', ''), '7') + substr_count(number_format($num,\
    \ 0, '', ''), '9')];\n}\necho '<pre>';\nprint_r(even_odd_count(-12));\necho '</pre>';\n\
    \necho '<pre>';\nprint_r(even_odd_count(123));\necho '</pre>';\n", "    $num_str\
    \ = strval($num);\n    $even_count = 0;\n    $odd_count = 0;\n    for ($i = 0;\
    \ $i < strlen($num_str); $i++) {\n        if ($num_str[$i] % 2 == 0) {\n     \
    \       $even_count++;\n        } else {\n            $odd_count++;\n        }\n\
    \    }\n    return array($even_count, $odd_count);\n}", "    $even_count = 0;\n\
    \    $odd_count = 0;\n    $num = abs($num);\n    while ($num > 0) {\n        $mod\
    \ = $num % 10;\n        if ($mod % 2 === 0) {\n            $even_count++;\n  \
    \      } else {\n            $odd_count++;\n        }\n        $num = (int)($num\
    \ / 10);\n    }\n    return array($even_count, $odd_count);\n}", "    $split =\
    \ str_split($num);\n    $even = 0;\n    $odd = 0;\n    foreach ($split as $i)\
    \ {\n        if ($i % 2 == 0) {\n            $even++;\n        } else {\n    \
    \        $odd++;\n        }\n    }\n    return array($even, $odd);\n}", "  $num\
    \ = abs($num);\n  $even = 0;\n  $odd = 0;\n  for ($i = 0; $i < strlen((string)$num);\
    \ $i++) {\n    if ($num % 2 == 0) {\n      $even += 1;\n    } else {\n      $odd\
    \ += 1;\n    }\n    $num = $num / 10;\n  }\n  return array($even, $odd);\n}\n\n\
    echo '<pre>';\nvar_dump(even_odd_count(-12));\nvar_dump(even_odd_count(123));\n\
    echo '</pre>';\n", "    $even = 0;\n    $odd = 0;\n    if ($num < 0) {\n     \
    \   $num = -$num;\n    }\n    while ($num > 0) {\n        $digit = $num % 10;\n\
    \        if ($digit % 2 == 0) {\n            $even++;\n        } else {\n    \
    \        $odd++;\n        }\n        $num = (int)($num / 10);\n    }\n    return\
    \ array($even, $odd);\n}\n", "\t$num = abs($num);\n\t$even = 0;\n\t$odd = 0;\n\
    \twhile ($num >= 1) {\n\t\t$lastDigit = $num % 10;\n\t\tif (($lastDigit % 2) ==\
    \ 0) {\n\t\t\t$even++;\n\t\t} else {\n\t\t\t$odd++;\n\t\t}\n\t\t$num = floor($num\
    \ / 10);\n\t}\n\t$arr[0] = $even;\n\t$arr[1] = $odd;\n\treturn $arr;\n}\nprint_r(even_odd_count(-12));\n\
    print_r(even_odd_count(123));", "\t$new_num = str_split(abs($num));\n\t$even =\
    \ 0;\n\t$odd = 0;\n\tforeach ($new_num as $int) {\n\t\tif ($int % 2 == 0) {\n\t\
    \t\t$even += 1;\n\t\t} else {\n\t\t\t$odd += 1;\n\t\t}\n\t}\n\treturn array($even,\
    \ $odd);\n}\n", "  $array = str_split(abs($num));\n  $evenCount = 0;\n  $oddCount\
    \ = 0;\n  foreach ($array as $digit) {\n    if ($digit % 2 == 0) {\n      $evenCount++;\n\
    \    } else {\n      $oddCount++;\n    }\n  }\n  return array($evenCount, $oddCount);\n\
    }\n\n$even_odd_count = even_odd_count(1);\nprint_r($even_odd_count);", "    if($num\
    \ == 0) {\n        return array(0,0);\n    }\n    $str = strval($num);\n    $even\
    \ = 0;\n    $odd = 0;\n    for($i = 0; $i < strlen($str); $i++) {\n        if(abs($str[$i])\
    \ % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n \
    \       }\n    }\n    return array($even, $odd);\n}\n\nprint_r(even_odd_count(-123));",
  "\t// $num = str_split(strval($num));\n\t$odd_count = 0;\n\t$even_count = 0;\n\t\
    $num = str_split(strval($num));\n\t// return $num;\n\tforeach ($num as $value)\
    \ {\n\t\t// var_dump($value);\n\t\t// echo \"<br>\";\n\t\tif ($value % 2 == 0)\
    \ {\n\t\t\t$even_count++;\n\t\t} else {\n\t\t\t$odd_count++;\n\t\t}\n\t}\n\treturn\
    \ array($even_count, $odd_count);\n}\nprint_r(even_odd_count(-12));\necho \"<br>\"\
    ;\nprint_r(even_odd_count(123));", "    $num = abs($num);\n    $odd = 0;\n   \
    \ $even = 0;\n    while ($num > 0) {\n        $num_tail = $num % 10;\n       \
    \ if ($num_tail % 2 == 0) {\n            $even++;\n        } else {\n        \
    \    $odd++;\n        }\n        $num = floor($num / 10);\n    }\n    return array($even,\
    \ $odd);\n}\nprint_r(even_odd_count(-12));", "\t$even_count = 0;\n\t$odd_count\
    \ = 0;\n\t$num = str_split(abs($num));\n\tforeach ($num as $digit) {\n\t\tif ($digit\
    \ % 2 == 0) {\n\t\t\t$even_count++;\n\t\t} else {\n\t\t\t$odd_count++;\n\t\t}\n\
    \t}\n\treturn array($even_count, $odd_count);\n}\n", "   $num = abs($num);\n \
    \  $evens = 0;\n   $odds = 0;\n   $digits = str_split($num);\n   foreach ($digits\
    \ as $digit) {\n      if($digit % 2 == 0) {\n         $evens += 1;\n      } else\
    \ {\n         $odds += 1;\n      }\n   }\n   return array($evens, $odds);\n}",
  "\t$even = 0;\n\t$odd = 0;\n\tfor ($i = 0; $i < strlen($num); $i++) {\n\t\tif (($num[$i]\
    \ % 2) == 0) {\n\t\t\t$even++;\n\t\t} else {\n\t\t\t$odd++;\n\t\t}\n\t}\n\treturn\
    \ [$even, $odd];\n}\n\n$res = even_odd_count(123);\nprint_r($res);", "\t$number_string\
    \ = strval($num);\n\t$even_count = 0;\n\t$odd_count = 0;\n\tfor ($i = 0; $i <\
    \ strlen($number_string); $i++) {\n\t\tif ((intval($number_string[$i]) % 2) ==\
    \ 0) {\n\t\t\t$even_count++;\n\t\t} else {\n\t\t\t$odd_count++;\n\t\t}\n\t}\n\t\
    return array($even_count, $odd_count);\n}\n\necho implode(', ', even_odd_count(-12))\
    \ . \"\\n\";\necho implode(', ', even_odd_count(123)) . \"\\n\";", "\t$even_count\
    \ = 0;\n\t$odd_count = 0;\n\tif ($num < 0) {\n\t\t$num = -$num;\n\t}\n\t$digits\
    \ = str_split($num);\n\tforeach ($digits as $digit) {\n\t\tif ($digit % 2 == 0)\
    \ {\n\t\t\t$even_count += 1;\n\t\t} else {\n\t\t\t$odd_count += 1;\n\t\t}\n\t\
    }\n\treturn array($even_count, $odd_count);\n}\necho \"even_odd_count(-12) = \"\
    ;\nvar_dump(even_odd_count(-12));\necho \"even_odd_count(123) = \";\nvar_dump(even_odd_count(123));",
  "    $even_count = 0;\n    $odd_count = 0;\n    $digits = array();\n    while ($num\
    \ != 0) {\n        array_push($digits, $num % 10);\n        $num = intval($num\
    \ / 10);\n    }\n    foreach ($digits as $digit) {\n        if ($digit % 2 ==\
    \ 0) {\n            $even_count++;\n        } else {\n            $odd_count++;\n\
    \        }\n    }\n    return array($even_count, $odd_count);\n}\n", "    $odd\
    \ = 0;\n    $even = 0;\n    $arr = array();\n    $str = (string)$num;\n    for\
    \ ($i = 0; $i < strlen($str); $i++) {\n        if ((int)$str[$i] % 2 == 0) {\n\
    \            $even++;\n        } else {\n            $odd++;\n        }\n    }\n\
    \    $arr[0] = $even;\n    $arr[1] = $odd;\n    return $arr;\n}", "    $negative\
    \ = false;\n    if ($num < 0) {\n        $negative = true;\n        $num = -$num;\n\
    \    }\n    $even = 0;\n    $odd = 0;\n    while ($num) {\n        $last = $num\
    \ % 10;\n        if ($last % 2) {\n            $odd++;\n        } else {\n   \
    \         $even++;\n        }\n        $num = $num / 10;\n    }\n    if ($negative)\
    \ {\n        $odd++;\n    }\n    return array($even, $odd);\n}\n", "  $even =\
    \ 0;\n  $odd = 0;\n  $num = abs($num);\n  while ($num > 0) {\n    $digit = $num\
    \ % 10;\n    if ($digit % 2 == 0) {\n      $even++;\n    } else {\n      $odd++;\n\
    \    }\n    $num = floor($num / 10);\n  }\n  return array($even, $odd);\n}\n",
  "    $evens = 0;\n    $odds = 0;\n    $num_string = (string)$num;\n    $num_string_len\
    \ = strlen($num_string);\n    for ($i = 0; $i < $num_string_len; $i++) {\n   \
    \     if ($num_string[$i] % 2 == 0) {\n            $evens++;\n        } else {\n\
    \            $odds++;\n        }\n    }\n    return array($evens, $odds);\n}\n\
    echo even_odd_count(-12)[0];\necho even_odd_count(-12)[1];\necho even_odd_count(123)[0];\n\
    echo even_odd_count(123)[1];\n", "  $even = $odd = 0;\n  $num = abs($num);\n \
    \ while ($num > 0) {\n    $digit = $num % 10;\n    if ($digit % 2 == 0) {\n  \
    \    $even++;\n    } else {\n      $odd++;\n    }\n    $num = ($num - $digit)\
    \ / 10;\n  }\n  return array($even, $odd);\n}\n\n$input = '12345';\n$input = (int)\
    \ $input;\n\necho 'input = ' . $input . PHP_EOL;\necho 'even = ' . even_odd_count($input)[0]\
    \ . PHP_EOL;\necho 'odd = ' . even_odd_count($input)[1] . PHP_EOL;", "  $abs_num\
    \ = abs($num);\n  $even = 0;\n  $odd = 0;\n  while ($abs_num > 0) {\n    $curr_digit\
    \ = $abs_num % 10;\n    if ($curr_digit % 2 == 0) {\n      $even++;\n    } else\
    \ {\n      $odd++;\n    }\n    $abs_num = (int)($abs_num / 10);\n  }\n  return\
    \ array($even, $odd);\n}\necho even_odd_count(-12)[0];\necho even_odd_count(-12)[1];\n\
    echo even_odd_count(123)[0];\necho even_odd_count(123)[1];", "\t$num = abs($num);\n\
    \t$even = 0;\n\t$odd = 0;\n\twhile ($num > 0) {\n\t\t$rem = $num % 10;\n\t\tif\
    \ ($rem % 2 == 0) {\n\t\t\t$even += 1;\n\t\t} else {\n\t\t\t$odd += 1;\n\t\t}\n\
    \t\t$num = (int)($num / 10);\n\t}\n\treturn array($even, $odd);\n}\n$num = -12;\n\
    $result = even_odd_count($num);\necho \"The number of even digits in $num are\
    \ $result[0]. The number of odd digits in $num are $result[1].\";", "    $oddCount\
    \ = 0;\n    $evenCount = 0;\n    $num = abs($num);\n    while ($num > 0) {\n \
    \       $lastDigit = $num % 10;\n        if ($lastDigit % 2 == 0) {\n        \
    \    $evenCount++;\n        } else {\n            $oddCount++;\n        }\n  \
    \      $num = floor($num / 10);\n    }\n    return array($evenCount, $oddCount);\n\
    }\n\necho even_odd_count(-12) . PHP_EOL;\necho even_odd_count(123) . PHP_EOL;",
  "\tif($num < 0) {\n\t\t$num = -$num;\n\t}\n\t$even = 0;\n\t$odd = 0;\n\t$num = strval($num);\n\
    \t$num = str_split($num);\n\tfor($i = 0; $i < count($num); $i++) {\n\t\tif($num[$i]\
    \ % 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\t\t\t$odd++;\n\t\t}\n\t}\n\t$array\
    \ = array($even, $odd);\n\treturn $array;\n}\necho even_odd_count(-12);\necho\
    \ even_odd_count(123);", "    $arr = str_split($num);\n    $odd = 0;\n    $even\
    \ = 0;\n    foreach ($arr as $val) {\n        if ($val % 2 == 0) {\n         \
    \   $even++;\n        } else {\n            $odd++;\n        }\n    }\n    return\
    \ array($even, $odd);\n}\n", "  $num = abs($num);\n  $even = 0;\n  $odd = 0;\n\
    \  if ($num < 10 && $num % 2 == 0) {\n    $even++;\n  } else if ($num < 10 &&\
    \ $num % 2 == 1) {\n    $odd++;\n  } else {\n    while ($num > 0) {\n      $digit\
    \ = $num % 10;\n      if ($digit % 2 == 0) {\n        $even++;\n      } else {\n\
    \        $odd++;\n      }\n      $num = floor($num / 10);\n    }\n  }\n  $array\
    \ = array($even, $odd);\n  return $array;\n}", "    $even = 0;\n    $odd = 0;\n\
    \    for ($i = 0; $i < strlen((string) $num); $i++) {\n        if ($num[$i] %\
    \ 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n   \
    \     }\n    }\n    $answer = array($even, $odd);\n    return $answer;\n}", "\t\
    // Your code goes here.\n}\n", "  $num = abs($num);\n  $evens = 0;\n  $odds =\
    \ 0;\n  while ($num > 0) {\n    $digit = $num % 10;\n    if ($digit % 2 == 0)\
    \ {\n      $evens++;\n    } else {\n      $odds++;\n    }\n    $num = $num / 10;\n\
    \  }\n  return array($evens, $odds);\n}\n\n$evens = 0;\n$odds = 0;\n\n$a = even_odd_count(-12);\n\
    print_r($a);\nprint \"$a[0] even digits, $a[1] odd digits.\\n\";\n\n$a = even_odd_count(123);\n\
    print_r($a);\nprint \"$a[0] even digits, $a[1] odd digits.\\n\";\n\n$a = even_odd_count(1203);\n\
    print_r($a);\nprint \"$a[0] even digits, $a[1] odd digits.\\n\";\n\n$a = even_odd_count(1234);\n\
    print_r($a);\nprint \"$a[0] even digits, $a[1] odd digits.\\n\";\n\n$a = even_odd_count(1235);\n\
    print_r($a);\nprint \"$a[0] even digits, $a[1] odd digits.\\n\";\n\n$a = even_odd_count(120);\n\
    print_r($a);\nprint \"$a[0] even digits, $a[1] odd digits.\\n\";\n\n$a = even_odd_count(12);\n\
    print_r($a);\nprint \"$a[0] even digits, $a[1] odd digits.\\n\";\n\n$a = even_odd_count(1);\n\
    print_r($a);\nprint \"$a[0] even digits, $a[1] odd digits.\\n\";\n\n$a = even_odd_count(0);\n\
    print_r($a);\nprint \"$a[0] even digits, $a[1] odd digits.\\n\";\n\n$a = even_odd_count(2);\n\
    print_r($a);\nprint \"$", "\t// Write code here\n\t$is_even = $num % 2 == 0;\n\
    \t$digits = str_split(abs($num));\n\t$odd = array_filter($digits, function($n)\
    \ {\n\t\treturn $n % 2 == 1;\n\t});\n\t$even = array_filter($digits, function($n)\
    \ {\n\t\treturn $n % 2 == 0;\n\t});\n\treturn array(count($even), count($odd));\n\
    }\n", "  if($num < 0) {\n    $num = -1 * $num;\n  }\n  $odd = 0;\n  $even = 0;\n\
    \  while($num != 0) {\n    $digit = $num % 10;\n    if($digit % 2 == 0) {\n  \
    \    $even++;\n    } else {\n      $odd++;\n    }\n    $num = ($num - $digit)\
    \ / 10;\n  }\n  return array($even, $odd);\n}\nprint_r(even_odd_count(-12));\n\
    print_r(even_odd_count(123));", "    $even = 0;\n    $odd = 0;\n    $num = abs($num);\n\
    \    while ($num > 0) {\n        $digit = $num % 10;\n        if ($digit % 2 ==\
    \ 0) {\n            $even += 1;\n        } else {\n            $odd += 1;\n  \
    \      }\n        $num = floor($num / 10);\n    }\n    return array($even, $odd);\n\
    }\n", "    if ($num < 0) {\n        $num = abs($num);\n    }\n    $str = (string)$num;\n\
    \    $even_count = 0;\n    $odd_count = 0;\n    for ($i = 0; $i < strlen($str);\
    \ $i++) {\n        if ((int)$str[$i] % 2 == 0) {\n            $even_count++;\n\
    \        } else {\n            $odd_count++;\n        }\n    }\n    return array($even_count,\
    \ $odd_count);\n}", "    $even = 0;\n    $odd = 0;\n    $num = str_split($num);\n\
    \    foreach ($num as $value) {\n        if ($value % 2 == 0) {\n            $even\
    \ += 1;\n        } else {\n            $odd += 1;\n        }\n    }\n    return\
    \ array($even, $odd);\n}\n", "  $odds = 0;\n  $evens = 0;\n  $nums = str_split($num);\n\
    \  $nums = array_map('intval', $nums);\n  foreach ($nums as $value) {\n    if\
    \ ($value % 2 == 0) {\n      $evens++;\n    } else {\n      $odds++;\n    }\n\
    \  }\n  return array($evens, $odds);\n}\nprint_r(even_odd_count(-12));\nprint_r(even_odd_count(123));",
  "  $digits = str_split($num);\n  $even = 0;\n  $odd = 0;\n  foreach ($digits as\
    \ $digit) {\n    if ($digit % 2 == 0) {\n      $even++;\n    } else {\n      $odd++;\n\
    \    }\n  }\n  return array($even, $odd);\n}\nprint_r(even_odd_count(-12));\n\
    print_r(even_odd_count(123));", "\t$num = abs($num);\n\t$even = 0;\n\t$odd = 0;\n\
    \twhile ($num > 0) {\n\t\t$digit = $num % 10;\n\t\tif ($digit % 2 == 0) {\n\t\t\
    \t$even++;\n\t\t} else {\n\t\t\t$odd++;\n\t\t}\n\t\t$num = $num / 10;\n\t}\n\t\
    $even_odd_count = array($even, $odd);\n\treturn $even_odd_count;\n}\n\n$num =\
    \ -12;\n$even_odd_count = even_odd_count($num);\necho \"[\";\nfor ($i = 0; $i\
    \ < count($even_odd_count); $i++) {\n\techo $even_odd_count[$i];\n\tif ($i + 1\
    \ < count($even_odd_count)) {\n\t\techo \", \";\n\t}\n}\necho \"]\";", "    $num_str\
    \ = (string) $num;\n    $even_cnt = 0;\n    $odd_cnt = 0;\n    for ($i = 0; $i\
    \ < strlen($num_str); $i++) {\n        if ($num_str[$i] % 2 == 0) {\n        \
    \    $even_cnt++;\n        } else {\n            $odd_cnt++;\n        }\n    }\n\
    \    return array($even_cnt, $odd_cnt);\n}\n", "    $num = abs($num);\n    $odd\
    \ = 0;\n    $even = 0;\n    while ($num > 0) {\n        $temp = $num % 10;\n \
    \       if ($temp % 2 == 0) {\n            $even++;\n        } else {\n      \
    \      $odd++;\n        }\n        $num = (int)($num / 10);\n    }\n    return\
    \ array($even, $odd);\n}\n", "\t// get the string of the number, -12 is \"-12\"\
    \n\t$str = strval($num);\n\t// if it is negative, get rid of the \"-\"\n\tif ($str[0]\
    \ == \"-\") {\n\t\t$str = substr($str, 1);\n\t}\n\t// split the string into array\
    \ of chars, \"-12\" is [\"-\", \"1\", \"2\"]\n\t$arr = str_split($str);\n\t//\
    \ loop through the chars in the array\n\t//  if the char is even, increment $even_count\n\
    \t//  if the char is odd, increment $odd_count\n\t$even_count = 0;\n\t$odd_count\
    \ = 0;\n\tforeach ($arr as $char) {\n\t\tif ($char % 2 == 0) {\n\t\t\t$even_count++;\n\
    \t\t} else {\n\t\t\t$odd_count++;\n\t\t}\n\t}\n\t// return array of even and odd\
    \ counts\n\treturn array($even_count, $odd_count);\n}\n\necho \"<pre>\";\nprint_r(even_odd_count(-12));\n\
    print_r(even_odd_count(123));\necho \"</pre>\";", "    $arr = array(0, 0);\n \
    \   $abs = abs($num);\n    while ($abs > 0) {\n        $arr[$abs % 2]++;\n   \
    \     $abs /= 10;\n    }\n    return $arr;\n}\n\necho '<pre>';\nprint_r(even_odd_count(-12));\n\
    print_r(even_odd_count(123));\nprint_r(even_odd_count(0));\nprint_r(even_odd_count(2320));\n\
    print_r(even_odd_count(2333));\nprint_r(even_odd_count(123456789));\nprint_r(even_odd_count(1234567890));\n\
    print_r(even_odd_count(12345678900));\nprint_r(even_odd_count(123456789000));\n\
    print_r(even_odd_count(1234567890000));\nprint_r(even_odd_count(12345678900000));\n\
    print_r(even_odd_count(123456789000000));\nprint_r(even_odd_count(1234567890000000));\n\
    print_r(even_odd_count(12345678900000000));\nprint_r(even_odd_count(123456789000000000));\n\
    print_r(even_odd_count(1234567890000000000));\nprint_r(even_odd_count(12345678900000000000));\n\
    print_r(even_odd_count(123456789000000000000));\nprint_r(even_odd_count(1234567890000000000000));\n\
    print_r(even_odd_count(12345678900000000000000));\nprint_r(even_odd_count(123456789000000000000000));\n\
    print_r(even_odd_count(1234567890000000000000000));\nprint_r(even_odd_count(12345678900000000000000000));\n\
    print_r(even_odd_count(123456789000000000000000000));\nprint_r(even_odd_count(1234567890000000000000000000));\n\
    print_r(even_odd_count(12345678900000000000000000000));\nprint_r(even_odd_count(",
  "    if ($num === 0) {\n        return array(0,0);\n    }\n    else if ($num > 0)\
    \ {\n        $num = strval($num);\n        $result = array(0,0);\n        for\
    \ ($i = 0; $i < strlen($num); $i++) {\n            if ($num[$i] % 2 === 0) {\n\
    \                $result[0]++;\n            }\n            else {\n          \
    \      $result[1]++;\n            }\n        }\n        return $result;\n    }\n\
    \    else {\n        $num = strval($num);\n        $result = array(0,0);\n   \
    \     for ($i = 1; $i < strlen($num); $i++) {\n            if ($num[$i] % 2 ===\
    \ 0) {\n                $result[0]++;\n            }\n            else {\n   \
    \             $result[1]++;\n            }\n        }\n        return $result;\n\
    \    }\n}", "    // your code here\n}\n\nvar_dump(even_odd_count(-12));\nvar_dump(even_odd_count(123));",
  "   $even_digit = 0;\n   $odd_digit = 0;\n   for($i = abs($num); $i > 0; $i = (int)($i\
    \ / 10)) {\n      if(($i % 10) % 2 == 0) {\n         $even_digit++;\n      } else\
    \ {\n         $odd_digit++;\n      }\n   }\n   return array($even_digit, $odd_digit);\n\
    }\n", "    $digits = str_split($num);\n    $count = [0, 0];\n    foreach ($digits\
    \ as $digit) {\n        if ($digit % 2 === 0) {\n            $count[0]++;\n  \
    \      } else {\n            $count[1]++;\n        }\n    }\n    return $count;\n\
    }\n", "    if ($num < 0) $num = -$num;\n    $even = 0;\n    $odd = 0;\n    for\
    \ ($i = 0; $i < strlen($num); $i++) {\n        if ($num[$i] % 2 === 0) {\n   \
    \         $even++;\n        } else {\n            $odd++;\n        }\n    }\n\
    \    $res = array($even, $odd);\n    return $res;\n}\n", "    $numArray = str_split(abs($num));\n\
    \    $evenCount = 0;\n    $oddCount = 0;\n    foreach ($numArray as $value) {\n\
    \        if ($value % 2 == 0) {\n            $evenCount++;\n        } else {\n\
    \            $oddCount++;\n        }\n    }\n    return array($evenCount, $oddCount);\n\
    }\n", "    $evenCount = 0;\n    $oddCount = 0;\n    $number_arr = str_split($num);\n\
    \    foreach ($number_arr as $number) {\n        if ($number % 2 == 0) {\n   \
    \         $evenCount++;\n        } else {\n            $oddCount++;\n        }\n\
    \    }\n    return array($evenCount, $oddCount);\n}\n", "    $evens = 0;\n   \
    \ $odds = 0;\n    $digits = str_split(abs($num));\n    foreach ($digits as $digit)\
    \ {\n        if ($digit % 2 == 0) {\n            $evens++;\n        } else {\n\
    \            $odds++;\n        }\n    }\n    return array($evens, $odds);\n}\n\
    print_r(even_odd_count(-12));", "\t$even_count = 0;\n\t$odd_count = 0;\n\t$array\
    \ = str_split(abs($num));\n\tforeach ($array as $value) {\n\t\tif ($value % 2\
    \ == 0) {\n\t\t\t$even_count++;\n\t\t} else {\n\t\t\t$odd_count++;\n\t\t}\n\t\
    }\n\t$output = array($even_count, $odd_count);\n\treturn $output;\n}\necho \"\
    <pre>\";\nvar_dump(even_odd_count(-123));\necho \"</pre>\";\necho \"<pre>\";\n\
    var_dump(even_odd_count(1232));\necho \"</pre>\";\n", "\t$odd = 0;\n\t$even =\
    \ 0;\n\t$str = strval($num);\n\tfor ($i = 0; $i < strlen($str); $i++) {\n\t\t\
    if ($str[$i] % 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\t\t\t$odd++;\n\t\t}\n\
    \t}\n\t$arr = array($even, $odd);\n\treturn $arr;\n}", "  $result = [];\n  $countOdd\
    \ = 0;\n  $countEven = 0;\n  while ($num > 0) {\n    $lastDigit = $num % 10;\n\
    \    if ($lastDigit % 2 == 0) {\n      $countEven++;\n    } else {\n      $countOdd++;\n\
    \    }\n    $num = ($num - $lastDigit) / 10;\n  }\n  array_push($result, $countEven,\
    \ $countOdd);\n  return $result;\n}\n\necho \"<pre>\";\nprint_r(even_odd_count(-12));\n\
    echo \"</pre>\";", "    $even = 0;\n    $odd = 0;\n    while ($num) {\n      \
    \  $last_digit = $num % 10;\n        if ($last_digit % 2 == 0) {\n           \
    \ $even++;\n        } else {\n            $odd++;\n        }\n        $num = (int)($num\
    \ / 10);\n    }\n    return array($even, $odd);\n}\n\necho \"<pre>\";\nprint_r(even_odd_count(-12));\n\
    echo \"</pre>\";\necho \"<pre>\";\nprint_r(even_odd_count(123));\necho \"</pre>\"\
    ;\n", "  if ($num > 0) {\n    $num = str_split($num);\n    $result = [0, 0];\n\
    \    foreach ($num as $value) {\n      if ($value % 2 == 0) {\n        $result[0]\
    \ += 1;\n      } else {\n        $result[1] += 1;\n      }\n    }\n    return\
    \ $result;\n  } else {\n    return \"Not a valid input\";\n  }\n}\n", "  \n  $evens\
    \ = 0;\n  $odds = 0;\n  $counter = 0;\n  $num = abs($num);\n\n  while ($num >\
    \ 0) {\n    $remainder = $num % 10;\n    if ($remainder % 2 == 0) {\n      $evens++;\n\
    \    } else {\n      $odds++;\n    }\n    $num = floor($num / 10);\n  }\n  return\
    \ [$evens, $odds];\n}\n\nprint_r(even_odd_count(-12));\nprint_r(even_odd_count(123));",
  "\t$num = (string)$num;\n\t$string_arr = str_split($num);\n\t$even = array();\n\t\
    $odd = array();\n\tfor ($i=0; $i < count($string_arr); $i++) { \n\t\tif($string_arr[$i]\
    \ % 2 == 0) {\n\t\t\tarray_push($even, $string_arr[$i]);\n\t\t} else {\n\t\t\t\
    array_push($odd, $string_arr[$i]);\n\t\t}\n\t}\n\tprint_r($even);\n\tprint_r($odd);\n\
    }\neven_odd_count(-12);", "\t$count = strlen(strval($num));\n\t$array = str_split($num);\n\
    \t$even = 0;\n\t$odd = 0;\n\tfor ($i = 0; $i < $count; $i++) {\n\t\tif ($array[$i]\
    \ % 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\t\t\t$odd++;\n\t\t}\n\t}\n\techo\
    \ \"array(\", $even, \", \", $odd, \")\", PHP_EOL;\n}\neven_odd_count(-12);\n\
    even_odd_count(123);", "    $arr = str_split(abs($num));\n    $odd = 0;\n    $even\
    \ = 0;\n    foreach ($arr as $num) {\n        if ($num % 2 == 0) {\n         \
    \   $even++;\n        } else {\n            $odd++;\n        }\n    }\n    return\
    \ [$even, $odd];\n}", "    $even_count = 0;\n    $odd_count = 0;\n    $arr = array();\n\
    \    $str = strval($num);\n    if ($num > 0) {\n        for ($i = 0; $i < strlen($str);\
    \ $i++) {\n            if ($str[$i] % 2 == 0) {\n                $even_count++;\n\
    \            } else {\n                $odd_count++;\n            }\n        }\n\
    \    } else {\n        $str = substr($str, 1);\n        for ($i = 0; $i < strlen($str);\
    \ $i++) {\n            if ($str[$i] % 2 == 0) {\n                $even_count++;\n\
    \            } else {\n                $odd_count++;\n            }\n        }\n\
    \    }\n    array_push($arr, $even_count, $odd_count);\n    return $arr;\n}",
  "    $even = 0;\n    $odd = 0;\n    if ($num < 0) {\n        $num = 0 - $num;\n\
    \    }\n    while ($num != 0) {\n        $dig = $num % 10;\n        if ($dig %\
    \ 2 == 0) {\n            $even += 1;\n        } else {\n            $odd += 1;\n\
    \        }\n        $num = intval($num / 10);\n    }\n    return array($even,\
    \ $odd);\n}", "    $split = str_split($num);\n    $even = 0;\n    $odd = 0;\n\
    \    foreach ($split as $number) {\n        if ($number % 2 == 0) {\n        \
    \    $even++;\n        } else {\n            $odd++;\n        }\n    }\n    return\
    \ array($even, $odd);\n}\necho \"Given an integer. return an array that has the\
    \ number of even and odd digits respectively.\\n\";\necho \"Example:\\n\";\necho\
    \ \">>> even_odd_count(-12)\\n\";\nprint_r(even_odd_count(-12));\necho \">>> even_odd_count(123)\\\
    n\";\nprint_r(even_odd_count(123));\n", "    $odd = 0;\n    $even = 0;\n    while\
    \ ($num != 0) {\n        $last_digit = $num % 10;\n        if ($last_digit % 2\
    \ == 0) {\n            $even++;\n        } else {\n            $odd++;\n     \
    \   }\n        $num = intval($num / 10);\n    }\n    return array($even, $odd);\n\
    }\nprint_r(even_odd_count(-12));\nprint_r(even_odd_count(123));", "\t$num = abs($num);\n\
    \t$odd = 0;\n\t$even = 0;\n\tfor ($i = 0; $i < strlen($num); $i++) {\n\t\tif ($num[$i]\
    \ % 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\t\t\t$odd++;\n\t\t}\n\t}\n\treturn\
    \ array($even, $odd);\n}\n", "    $numArr = str_split($num);\n    $evenCount =\
    \ 0;\n    $oddCount = 0;\n    for ($i = 0; $i < count($numArr); $i++) {\n    \
    \    if ($numArr[$i] % 2 == 0) {\n            $evenCount++;\n        } else {\n\
    \            $oddCount++;\n        }\n    }\n    return array($evenCount, $oddCount);\n\
    }\n$result = even_odd_count(-12);\necho $result[0] . ' ' . $result[1];\necho \"\
    \\n\";\n$result = even_odd_count(123);\necho $result[0] . ' ' . $result[1];\n\
    echo \"\\n\";", "  $even = 0;\n  $odd = 0;\n  if ($num < 0) {\n    $num = $num\
    \ * -1;\n  }\n  while ($num > 0) {\n    $int = $num % 10;\n    if ($int % 2 ==\
    \ 0) {\n      $even++;\n    } else {\n      $odd++;\n    }\n    $num = ($num -\
    \ $int) / 10;\n  }\n  $ans = array($even, $odd);\n  return $ans;\n}", "  $n_string\
    \ = (string)$num;\n  $n_string = str_replace('-', '', $n_string);\n  $even_count\
    \ = 0;\n  $odd_count = 0;\n  for ($i = 0; $i < strlen($n_string); $i++) {\n  \
    \  if ((int)$n_string[$i] % 2 == 0) {\n      $even_count++;\n    } else {\n  \
    \    $odd_count++;\n    }\n  }\n  return array($even_count, $odd_count);\n}\n",
  "\n}", "    $even = 0;\n    $odd = 0;\n    $arr = str_split($num);\n    foreach\
    \ ($arr as $value) {\n        if ($value % 2 == 0) {\n            $even++;\n \
    \       } else {\n            $odd++;\n        }\n    }\n    return array($even,\
    \ $odd);\n}", "    $even_count = 0;\n    $odd_count = 0;\n    for ($i = 0; $i\
    \ < strlen($num); $i++) {\n        if ($num[$i] % 2 == 0) {\n            $even_count++;\n\
    \        } else {\n            $odd_count++;\n        }\n    }\n    $even_odd_count\
    \ = array($even_count, $odd_count);\n    return $even_odd_count;\n}\nprint_r(even_odd_count(123));",
  "\t$even = 0;\n\t$odd = 0;\n\tfor ($i = 0; $i < strlen((string)$num); $i++) {\n\t\
    \tif (abs($num % 10) % 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\t\t\t$odd++;\n\
    \t\t}\n\t\t$num = $num / 10;\n\t}\n\treturn array($even, $odd);\n}\n\necho even_odd_count(-12)[0];\n\
    echo even_odd_count(-12)[1];\necho even_odd_count(123)[0];\necho even_odd_count(123)[1];",
  "    $even = 0;\n    $odd = 0;\n    $abs_num = abs($num);\n    while ($abs_num >\
    \ 0) {\n        $digit = $abs_num % 10;\n        if ($digit % 2 == 0) {\n    \
    \        $even++;\n        } else {\n            $odd++;\n        }\n        $abs_num\
    \ = floor($abs_num / 10);\n    }\n    return array($even, $odd);\n}\n\necho even_odd_count(-12)[0]\
    \ . PHP_EOL;\necho even_odd_count(-12)[1] . PHP_EOL;\necho even_odd_count(123)[0]\
    \ . PHP_EOL;\necho even_odd_count(123)[1] . PHP_EOL;", "  $even_count = 0;\n \
    \ $odd_count = 0;\n  $num = abs($num);\n  while ($num >= 1) {\n    $digit = $num\
    \ % 10;\n    if ($digit % 2 == 0) {\n      $even_count++;\n    } else {\n    \
    \  $odd_count++;\n    }\n    $num = ($num - $digit) / 10;\n  }\n  return array($even_count,\
    \ $odd_count);\n}\n", "    $arr = [];\n    $evens = 0;\n    $odds = 0;\n    if\
    \ ($num < 0) {\n        $num = -$num;\n    }\n    while ($num != 0) {\n      \
    \  $digit = $num % 10;\n        if ($digit % 2 == 0) {\n            $evens++;\n\
    \        } else {\n            $odds++;\n        }\n        $num = floor($num\
    \ / 10);\n    }\n    $arr[0] = $evens;\n    $arr[1] = $odds;\n    return $arr;\n\
    }\n", "    $num_abs = abs($num);\n    $even_count = 0;\n    $odd_count = 0;\n\
    \    while ($num_abs != 0) {\n        $last_digit = $num_abs % 10;\n        if\
    \ ($last_digit % 2 == 0) {\n            $even_count++;\n        } else {\n   \
    \         $odd_count++;\n        }\n        $num_abs = floor($num_abs / 10);\n\
    \    }\n    return array($even_count, $odd_count);\n}\n\nprint_r(even_odd_count(-12));\n\
    print_r(even_odd_count(123));\n", "  $evens = 0;\n  $odds = 0;\n  $arr = str_split($num);\n\
    \  foreach ($arr as $x) {\n    if ($x % 2 === 0) {\n      $evens++;\n    } else\
    \ {\n      $odds++;\n    }\n  }\n  return array($evens, $odds);\n}\n\necho 'even_odd_count(-12):\
    \ ';\nvar_dump(even_odd_count(-12));\necho 'even_odd_count(123): ';\nvar_dump(even_odd_count(123));",
  "  if ($num < 0) {\n    $num = abs($num);\n  }\n  $odds = 0;\n  $evens = 0;\n  for\
    \ ($i = 0; $i < strlen($num); $i++) {\n    if ($num[$i] % 2 == 0) {\n      $evens\
    \ += 1;\n    } else {\n      $odds += 1;\n    }\n  }\n  return array($evens, $odds);\n\
    }", "  $even = 0;\n  $odd = 0;\n  while ($num != 0) {\n    $remainder = $num %\
    \ 10;\n    if ($remainder % 2 == 0) {\n      $even++;\n    } else {\n      $odd++;\n\
    \    }\n    $num = floor($num / 10);\n  }\n  return array($even, $odd);\n}\n",
  "\t$num = abs($num);\n\t$even_count = 0;\n\t$odd_count = 0;\n\twhile ($num != 0)\
    \ {\n\t\t$digit = $num % 10;\n\t\tif ($digit % 2 == 0) {\n\t\t\t$even_count++;\n\
    \t\t} else {\n\t\t\t$odd_count++;\n\t\t}\n\t\t$num = (int)($num / 10);\n\t}\n\t\
    return array($even_count, $odd_count);\n}\n\necho \"even_odd_count(-12) \";\n\
    var_dump(even_odd_count(-12));\necho \"even_odd_count(123) \";\nvar_dump(even_odd_count(123));\n",
  "  $n = abs($num);\n  $even = 0;\n  $odd = 0;\n  while ($n > 0) {\n    $rem = $n\
    \ % 10;\n    if ($rem % 2 == 0) {\n      $even++;\n    } else {\n      $odd++;\n\
    \    }\n    $n = $n / 10;\n  }\n  return array($even, $odd);\n}\n\nprint_r(even_odd_count(-12));\n\
    print_r(even_odd_count(123));\nprint_r(even_odd_count(3125));", "    $num = abs($num);\n\
    \    $num = str_split($num);\n    $even = $odd = 0;\n    foreach ($num as $item)\
    \ {\n        if ($item % 2 == 0) {\n            $even++;\n        } else {\n \
    \           $odd++;\n        }\n    }\n    return array($even, $odd);\n}\necho\
    \ even_odd_count(-12)[0].\" \".even_odd_count(-12)[1].\"\\n\";\necho even_odd_count(123)[0].\"\
    \ \".even_odd_count(123)[1].\"\\n\";\n", "    $evens = 0;\n    $odds = 0;\n  \
    \  $num = abs($num);\n    while ($num > 0) {\n        $remainder = $num % 10;\n\
    \        if ($remainder % 2 == 0) {\n            $evens++;\n        } else {\n\
    \            $odds++;\n        }\n        $num = $num / 10;\n    }\n    return\
    \ array($evens, $odds);\n}", "    $even = 0;\n    $odd = 0;\n    while ($num !=\
    \ 0) {\n        $digit = $num % 10;\n        if ($digit % 2 == 0) {\n        \
    \    $even++;\n        } else {\n            $odd++;\n        }\n        $num\
    \ = (int)($num / 10);\n    }\n    return array($even, $odd);\n}\n\n$test_num =\
    \ 123;\n$test_result = even_odd_count($test_num);\n$expected_result = array(1,\
    \ 2);\nassert(\n    $test_result === $expected_result,\n    \"even_odd_count({$test_num})\
    \ = {$test_result}, expected {$expected_result}\"\n);\n\n$test_num = -12;\n$test_result\
    \ = even_odd_count($test_num);\n$expected_result = array(1, 1);\nassert(\n   \
    \ $test_result === $expected_result,\n    \"even_odd_count({$test_num}) = {$test_result},\
    \ expected {$expected_result}\"\n);\n\n$test_num = -2;\n$test_result = even_odd_count($test_num);\n\
    $expected_result = array(1, 0);\nassert(\n    $test_result === $expected_result,\n\
    \    \"even_odd_count({$test_num}) = {$test_result}, expected {$expected_result}\"\
    \n);\n\n$test_num = 12;\n$test_result = even_odd_count($test_num);\n$expected_result\
    \ = array(2, 0);\nassert(\n    $test_result === $expected_result,\n    \"even_odd_count({$test_num})\
    \ = {$test_result}, expected {$expected_result}\"\n);\n\n$test_num = 0;\n$test_result\
    \ = even_odd_count($test_num);\n$expected_result = array(0, 0);\nassert(\n   \
    \ $test_result === $expected_result,\n    \"even_odd_count({$test_num}) = {$test_result},\
    \ expected {$expected_result}\"\n);\n\n$test_num = 1;\n", "  // TODO: Implement\
    \ me!\n  $odd_digits = 0;\n  $even_digits = 0;\n  $string_number = strval($num);\n\
    \  $length = strlen($string_number);\n  for ($i = 0; $i < $length; $i++) {\n \
    \   if (substr($string_number, $i, 1) % 2 == 0) {\n      $even_digits++;\n   \
    \ } else {\n      $odd_digits++;\n    }\n  }\n  return array($even_digits, $odd_digits);\n\
    }", "\t$evenCount = 0;\n\t$oddCount = 0;\n\t$length = strlen($num);\n\tfor ($i\
    \ = 0; $i < $length; $i++) {\n\t\tif (intval($num[$i]) % 2 == 0) {\n\t\t\t$evenCount++;\n\
    \t\t} else {\n\t\t\t$oddCount++;\n\t\t}\n\t}\n\treturn array($evenCount, $oddCount);\n\
    }\n\necho \"<pre>\";\nprint_r(even_odd_count(-12));\necho \"</pre>\";\n\necho\
    \ \"<pre>\";\nprint_r(even_odd_count(123));\necho \"</pre>\";", "    $even = 0;\n\
    \    $odd = 0;\n    $num = abs($num);\n    while ($num > 0) {\n        $digit\
    \ = $num % 10;\n        if ($digit % 2 == 0) {\n            $even++;\n       \
    \ } else {\n            $odd++;\n        }\n        $num = ($num - $digit) / 10;\n\
    \    }\n    return array($even, $odd);\n}\nprint even_odd_count(-12);\nprint even_odd_count(123);",
  "\t$num = str_split(abs($num));\n\t$num2 = array(0, 0);\n\tforeach ($num as $digit)\
    \ {\n\t\tif ($digit % 2 == 0) {\n\t\t\t$num2[0] = $num2[0] + 1;\n\t\t} else {\n\
    \t\t\t$num2[1] = $num2[1] + 1;\n\t\t}\n\t}\n\treturn $num2;\n}\n", "    $even\
    \ = 0;\n    $odd = 0;\n    $num = abs($num);\n    while ($num > 0) {\n       \
    \ $digit = $num % 10;\n        if ($digit % 2 == 0) {\n            $even += 1;\n\
    \        } else {\n            $odd += 1;\n        }\n        $num = floor($num\
    \ / 10);\n    }\n    return array($even, $odd);\n}", "    if ($num < 0) {\n  \
    \      $num = -$num;\n    }\n    $num = (string)$num;\n    $even = 0;\n    $odd\
    \ = 0;\n    for ($i = 0; $i < strlen($num); $i++) {\n        if ($num[$i] % 2\
    \ === 0) {\n            $even++;\n        } else {\n            $odd++;\n    \
    \    }\n    }\n    return array($even, $odd);\n}\n\necho json_encode(even_odd_count(-12));\n\
    echo PHP_EOL;\necho json_encode(even_odd_count(123));\necho PHP_EOL;", "\t$odd\
    \ = 0;\n\t$even = 0;\n\t$num_str = strval($num);\n\tfor ($i = 0; $i < strlen($num_str);\
    \ $i++) {\n\t\tif ($num_str[$i] % 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\t\t\
    \t$odd++;\n\t\t}\n\t}\n\treturn array($even, $odd);\n}\n\n$n = even_odd_count(-123);\n\
    print_r($n);\necho $n[0] . \" \" . $n[1];\n", "  $total_even = 0;\n  $total_odd\
    \ = 0;\n  $arr = str_split($num);\n  foreach ($arr as $num) {\n    if ($num %\
    \ 2 == 0) {\n      $total_even++;\n    } else {\n      $total_odd++;\n    }\n\
    \  }\n  return array($total_even, $total_odd);\n}", "  $numString = strval($num);\n\
    \  $evenCount = 0;\n  $oddCount = 0;\n  for ($i = 0; $i < strlen($numString);\
    \ $i++) {\n    if ($numString[$i] % 2 == 0) {\n      $evenCount++;\n    } else\
    \ {\n      $oddCount++;\n    }\n  }\n  return array($evenCount, $oddCount);\n\
    }\n\nvar_dump(even_odd_count(-12));\nvar_dump(even_odd_count(123));", "    $even\
    \ = 0;\n    $odd = 0;\n    while ($num > 0) {\n        $digit = $num % 10;\n \
    \       if ($digit % 2 == 0) {\n            $even++;\n        } else {\n     \
    \       $odd++;\n        }\n        $num = (int)($num / 10);\n    }\n    return\
    \ array($even, $odd);\n}", "\t$even_count = 0;\n\t$odd_count = 0;\n\t$digits =\
    \ [];\n\tif($num == 0) {\n\t\treturn $digits;\n\t}\n\tif($num < 0) {\n\t\t$num\
    \ = $num * -1;\n\t}\n\t$digits = array_map(function($val) {\n\t\treturn $val;\n\
    \t}, str_split($num));\n\tforeach($digits as $digit) {\n\t\tif($digit % 2 == 0)\
    \ {\n\t\t\t$even_count += 1;\n\t\t} else {\n\t\t\t$odd_count += 1;\n\t\t}\n\t\
    }\n\treturn [$even_count, $odd_count];\n}\nprint_r(even_odd_count(-12));", " \
    \ $digits = array_map('intval', str_split($num));\n  $even_count = array_reduce($digits,\
    \ function($carry, $item) {\n    return ($item % 2 == 0) ? $carry + 1 : $carry;\n\
    \  }, 0);\n  $odd_count = count($digits) - $even_count;\n  return array($even_count,\
    \ $odd_count);\n}\n", "  $even = 0;\n  $odd = 0;\n  $num = str_split($num);\n\
    \  foreach ($num as $number) {\n    if ($number % 2 === 0) {\n      $even++;\n\
    \    } else {\n      $odd++;\n    }\n  }\n  return array($even, $odd);\n}\n\n\
    var_dump(even_odd_count(-12));\nvar_dump(even_odd_count(123));", "\tif ($num <\
    \ 0) {\n\t\t$num = $num * -1;\n\t}\n\t$finalArr = array();\n\t$even = 0;\n\t$odd\
    \ = 0;\n\t$num = strval($num);\n\tfor ($i = 0; $i < strlen($num); $i++) {\n\t\t\
    if ($num[$i] % 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\t\t\t$odd++;\n\t\t}\n\
    \t}\n\tarray_push($finalArr, $even, $odd);\n\treturn $finalArr;\n}\n$test = even_odd_count(-543219);\n\
    var_dump($test);", "  $digits = str_split($num);\n  $even_digits = array_filter($digits,\
    \ function($v) {\n    return $v % 2 == 0;\n  });\n  $odd_digits = array_filter($digits,\
    \ function($v) {\n    return $v % 2 == 1;\n  });\n  return array(sizeof($even_digits),\
    \ sizeof($odd_digits));\n}", "\t$num = abs($num);\n\t$evenCount = 0;\n\t$oddCount\
    \ = 0;\n\twhile ($num > 0) {\n\t\t$digit = $num % 10;\n\t\tif ($digit % 2 == 0)\
    \ {\n\t\t\t$evenCount++;\n\t\t} else {\n\t\t\t$oddCount++;\n\t\t}\n\t\t$num =\
    \ floor($num / 10);\n\t}\n\treturn array($evenCount, $oddCount);\n}\n\nprint_r(even_odd_count(-12));\n\
    print_r(even_odd_count(123));\n", "  $array = array();\n  $num = abs($num);\n\
    \  if ($num == 0) {\n    array_push($array, 1, 0);\n  } else {\n    $even = 0;\n\
    \    $odd = 0;\n    while ($num != 0) {\n      $num = floor($num / 10);\n    \
    \  if (($num % 10) % 2 == 0) {\n        $even++;\n      } else {\n        $odd++;\n\
    \      }\n    }\n    array_push($array, $even, $odd);\n  }\n  return $array;\n\
    }\n", "  $count_odd=0;\n  $count_even=0;\n  while($num>0){\n    $rem=$num%10;\n\
    \    if($rem%2==0){\n      $count_even++;\n    }\n    else{\n      $count_odd++;\n\
    \    }\n    $num=floor($num/10);\n  }\n  return array($count_even,$count_odd);\n\
    }\n", "  $evens = 0;\n  $odds = 0;\n  $i = 1;\n  while ($i <= $num) {\n    if\
    \ ($i % 2 === 0) {\n      $evens += 1;\n    } else {\n      $odds += 1;\n    }\n\
    \    $i += 1;\n  }\n  return array($evens, $odds);\n}\n", "    $total = 0;\n \
    \   $evens = 0;\n    $odds = 0;\n    $is_neg = False;\n    if ($num < 0) {\n \
    \       $num = -$num;\n        $is_neg = True;\n    }\n    while ($num > 0) {\n\
    \        $digit = $num % 10;\n        if ($digit % 2 == 0) {\n            $evens\
    \ += 1;\n        } else {\n            $odds += 1;\n        }\n        $num /=\
    \ 10;\n    }\n    if ($is_neg) {\n        $evens += 1;\n    }\n    return array($evens,\
    \ $odds);\n}\n", "    $even_count = 0;\n    $odd_count = 0;\n    $num = str_split(abs($num));\n\
    \    foreach ($num as $digit) {\n        $digit % 2 === 0 ? $even_count++ : $odd_count++;\n\
    \    }\n    return array($even_count, $odd_count);\n}\n$num = readline('Enter\
    \ the number you would like to check: ');\necho \"There are \" . even_odd_count($num)[0]\
    \ . \" even digits and \" . even_odd_count($num)[1] . \" odd digits.\\n\";", " \
    \ $newnum = 0;\n  $check = 0;\n  $even = 0;\n  $odd = 0;\n  $newarray = array();\n\
    \  if ($num == 0) {\n    $newarray = array(0,0);\n  }\n  elseif ($num < 0) {\n\
    \    $newnum = $num * -1;\n    while ($newnum > 0) {\n      $check = $newnum %\
    \ 10;\n      if ($check % 2 == 0) {\n        $even = $even + 1;\n      }\n   \
    \   else {\n        $odd = $odd + 1;\n      }\n      $newnum = $newnum / 10;\n\
    \    }\n    $newarray = array($even, $odd);\n  }\n  else {\n    while ($num >\
    \ 0) {\n      $check = $num % 10;\n      if ($check % 2 == 0) {\n        $even\
    \ = $even + 1;\n      }\n      else {\n        $odd = $odd + 1;\n      }\n   \
    \   $num = $num / 10;\n    }\n    $newarray = array($even, $odd);\n  }\n  return\
    \ $newarray;\n}", "    // ToDo:\n    // your code here\n}", "    $evens = 0;\n\
    \    $odds = 0;\n    $num = (string)$num;\n    for ($i = 0; $i < strlen($num);\
    \ $i++) {\n        if ($num[$i] % 2 === 0) {\n            $evens++;\n        }\
    \ else {\n            $odds++;\n        }\n    }\n    return array($evens, $odds);\n\
    }\nprint_r(even_odd_count(-12));\nprint_r(even_odd_count(123));", "  if ($num\
    \ === 0) {\n    return array(0, 0);\n  }\n  $digits = array();\n  while ($num\
    \ != 0) {\n    $digits[] = $num % 10;\n    $num = (int)($num / 10);\n  }\n  $num_of_evens\
    \ = 0;\n  $num_of_odds = 0;\n  foreach ($digits as $digit) {\n    if ($digit %\
    \ 2 === 0) {\n      $num_of_evens++;\n    } else {\n      $num_of_odds++;\n  \
    \  }\n  }\n  return array($num_of_evens, $num_of_odds);\n}\n", "\t$count = [0,\
    \ 0];\n\t$str = strval($num);\n\tfor ($i = 0; $i < strlen($str); $i++) {\n\t\t\
    if ($str[$i] % 2 === 0) {\n\t\t\t$count[0]++;\n\t\t} else {\n\t\t\t$count[1]++;\n\
    \t\t}\n\t}\n\treturn $count;\n}", "    $evens = 0;\n    $odds = 0;\n    if($num\
    \ < 0) {\n        $num = -1 * $num;\n    }\n    for($i = 0; $i < strlen($num);\
    \ $i++) {\n        if($num[$i] % 2 == 0) {\n            $evens++;\n        } else\
    \ {\n            $odds++;\n        }\n    }\n    return array($evens, $odds);\n\
    }\nprint_r(even_odd_count(-12345));\n", "\t$evens = 0;\n\t$odds = 0;\n\tforeach\
    \ (str_split($num) as $i) {\n\t\tif (is_numeric($i)) {\n\t\t\tif ($i % 2 == 0)\
    \ {\n\t\t\t\t$evens++;\n\t\t\t} else {\n\t\t\t\t$odds++;\n\t\t\t}\n\t\t}\n\t}\n\
    \treturn array($evens, $odds);\n}\n", "    $evens = 0;\n    $odds = 0;\n    foreach\
    \ (str_split($num) as $value) {\n        if ($value % 2 == 0) {\n            $evens++;\n\
    \        } else {\n            $odds++;\n        }\n    }\n    return array($evens,\
    \ $odds);\n}\necho even_odd_count(-12);\necho \"\\n\";\necho even_odd_count(123);\n\
    echo \"\\n\";", "    $count = str_split(abs($num));\n    $result = [0, 0];\n \
    \   foreach ($count as $value) {\n        if ($value % 2 === 0) {\n          \
    \  $result[0]++;\n        } else {\n            $result[1]++;\n        }\n   \
    \ }\n    return $result;\n}\n\nprint_r(even_odd_count(-12));\necho '<br/>';\n\
    print_r(even_odd_count(123));", "\t$output = array(0, 0);\n\t$num_abs = abs($num);\n\
    \twhile ($num_abs > 0) {\n\t\t$remainder = $num_abs % 10;\n\t\tif ($remainder\
    \ % 2 === 0) {\n\t\t\t$output[0]++;\n\t\t} else {\n\t\t\t$output[1]++;\n\t\t}\n\
    \t\t$num_abs = floor($num_abs / 10);\n\t}\n\treturn $output;\n}\n", "    $num=abs($num);\n\
    \    $count=0;\n    $count2=0;\n    $new_num= (string)$num;\n    for($i=0;$i<strlen($new_num);$i++){\n\
    \        if($new_num[$i]%2==0){\n            $count++;\n        }\n        else{\n\
    \            $count2++;\n        }\n    }\n    return array($count,$count2);\n\
    }", "    $even = 0;\n    $odd = 0;\n    $arr = array();\n    for ($i = 0; $i <\
    \ strlen($num); $i++) {\n        if ($num[$i] % 2 == 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n    }\n    array_push($arr,\
    \ $even, $odd);\n    return $arr;\n}", "  $num = abs($num);\n  $evens = 0;\n \
    \ $odds = 0;\n  for ($i = 0; $i < strlen($num); $i++) {\n    if ($num[$i] % 2\
    \ == 0) {\n      $evens++;\n    } else {\n      $odds++;\n    }\n  }\n  return\
    \ array($evens, $odds);\n}\n\n$arr = array(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13, 14, 15, 16, 17, 18, 19, 20);\nfor ($i = 0; $i < count($arr); $i++) {\n \
    \ echo even_odd_count($arr[$i])[0] . \" evens and \" . even_odd_count($arr[$i])[1]\
    \ . \" odds\";\n  echo \"<br>\";\n}", "    $even = 0;\n    $odd = 0;\n    $str\
    \ = (string)$num;\n    $str_array = str_split($str);\n    foreach ($str_array\
    \ as $i) {\n        if ($i % 2 === 0) {\n            $even++;\n        } else\
    \ {\n            $odd++;\n        }\n    }\n    $result = [$even, $odd];\n   \
    \ return $result;\n}", "\t$num = abs($num);\n\t$odd = 0;\n\t$even = 0;\n\twhile\
    \ ($num > 0) {\n\t\t$digit = $num % 10;\n\t\tif ($digit % 2 == 0) {\n\t\t\t$even\
    \ += 1;\n\t\t} else {\n\t\t\t$odd += 1;\n\t\t}\n\t\t$num = floor($num / 10);\n\
    \t}\n\treturn array($even, $odd);\n}\necho even_odd_count(-12);\necho even_odd_count(123);\n",
  "  $digits = array();\n  $digits[] = $num;\n  return $digits;\n}\n", "  $even =\
    \ 0;\n  $odd = 0;\n  if ($num < 0) {\n    $num = abs($num);\n  }\n  while ($num\
    \ != 0) {\n    $digit = $num % 10;\n    if ($digit % 2 == 0) {\n      $even++;\n\
    \    } else {\n      $odd++;\n    }\n    $num = floor($num / 10);\n  }\n  return\
    \ array($even, $odd);\n}\n$array = even_odd_count(-12);\necho $array[0] . ' '\
    \ . $array[1];", "    $even_count = 0;\n    $odd_count = 0;\n    $num = abs($num);\n\
    \    while ($num > 0) {\n        $digit = $num % 10;\n        if ($digit % 2 ===\
    \ 0) {\n            $even_count += 1;\n        } else {\n            $odd_count\
    \ += 1;\n        }\n        $num = (int)($num / 10);\n    }\n    return array($even_count,\
    \ $odd_count);\n}\n", "\t$str = strval($num);\n\t$even = 0;\n\t$odd = 0;\n\tfor\
    \ ($i = 0; $i < strlen($str); $i++) {\n\t\tif ($str[$i] % 2 == 0) {\n\t\t\t$even++;\n\
    \t\t} else {\n\t\t\t$odd++;\n\t\t}\n\t}\n\treturn array($even, $odd);\n}", " \
    \   $evens = 0;\n    $odds = 0;\n    $i = 0;\n    while ($num > 0) {\n       \
    \ $remainder = $num % 10;\n        if ($remainder % 2 == 0) {\n            $evens++;\n\
    \        } else {\n            $odds++;\n        }\n        $num = $num / 10;\n\
    \    }\n    return array($evens, $odds);\n}\n", "    $arr = array();\n    $odd\
    \ = 0;\n    $even = 0;\n    $num_str = strval($num);\n    for ($i = 0; $i < strlen($num_str);\
    \ $i++) {\n        if ($num_str[$i] % 2 === 0) {\n            $even++;\n     \
    \   } else {\n            $odd++;\n        }\n    }\n    array_push($arr, $even,\
    \ $odd);\n    return $arr;\n}\n", "\t$absNum = abs($num);\n\t$evenCount = 0;\n\
    \t$oddCount = 0;\n\twhile($absNum > 0) {\n\t\t$lastDigit = $absNum % 10;\n\t\t\
    if($lastDigit % 2 == 0) {\n\t\t\t$evenCount++;\n\t\t} else {\n\t\t\t$oddCount++;\n\
    \t\t}\n\t\t$absNum = ($absNum - $lastDigit) / 10;\n\t}\n\treturn array($evenCount,\
    \ $oddCount);\n}\necho \"<pre>\";\nprint_r(even_odd_count(-12));\nprint_r(even_odd_count(123));\n\
    echo \"</pre>\";\n", "\t$even = 0;\n\t$odd = 0;\n\t$num = (string) $num;\n\tfor\
    \ ($i = 0; $i < strlen($num); $i++) {\n\t\tif (($num[$i] % 2) == 0) {\n\t\t\t\
    $even++;\n\t\t} else {\n\t\t\t$odd++;\n\t\t}\n\t}\n\treturn array($even, $odd);\n\
    }\n\necho \"The number of even/odd digits are \" . print_r(even_odd_count(-12));\n\
    echo \"<br/>\";\necho \"The number of even/odd digits are \" . print_r(even_odd_count(123));\n\
    echo \"<br/>\";\necho \"The number of even/odd digits are \" . print_r(even_odd_count(123546));\n\
    echo \"<br/>\";\necho \"The number of even/odd digits are \" . print_r(even_odd_count(85729));\n\
    echo \"<br/>\";\necho \"The number of even/odd digits are \" . print_r(even_odd_count(0));\n\
    echo \"<br/>\";\necho \"The number of even/odd digits are \" . print_r(even_odd_count(3));\n\
    echo \"<br/>\";\necho \"The number of even/odd digits are \" . print_r(even_odd_count(8));\n\
    echo \"<br/>\";\necho \"The number of even/odd digits are \" . print_r(even_odd_count(100));\n\
    echo \"<br/>\";\necho \"The number of even/odd digits are \" . print_r(even_odd_count(1000000));\n\
    echo \"<br/>\";\necho \"The number of even/odd digits are \" . print_r(even_odd_count(999999));\n\
    echo \"<br/>\";", "  $even = 0;\n  $odd = 0;\n  while($num) {\n    $n = $num %\
    \ 10;\n    if ($n % 2 == 0) {\n      $even += 1;\n    } else {\n      $odd +=\
    \ 1;\n    }\n    $num = (int)($num / 10);\n  }\n  return array($even, $odd);\n\
    }\n\nassert(even_odd_count(-12) == array(1, 1));\nassert(even_odd_count(123) ==\
    \ array(1, 2));\nassert(even_odd_count(0) == array(1, 0));", "    $n = (string)$num;\n\
    \    $arr = str_split($n);\n    $even_cnt = 0;\n    $odd_cnt = 0;\n    foreach\
    \ ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n            $even_cnt++;\n\
    \        } else {\n            $odd_cnt++;\n        }\n    }\n    return array($even_cnt,\
    \ $odd_cnt);\n}\n\n$num = -12;\n$test = even_odd_count($num);\necho \"even : \"\
    .$test[0].\" odd : \".$test[1];", "\t$evenCount = 0;\n\t$oddCount = 0;\n\tif ($num\
    \ >= 0) {\n\t\t$numArray = str_split($num);\n\t\tfor ($i = 0; $i < count($numArray);\
    \ $i++) {\n\t\t\tif ($numArray[$i] % 2 == 0) {\n\t\t\t\t$evenCount++;\n\t\t\t\
    } else {\n\t\t\t\t$oddCount++;\n\t\t\t}\n\t\t}\n\t} else {\n\t\t$num = (abs($num));\n\
    \t\t$numArray = str_split($num);\n\t\tfor ($i = 0; $i < count($numArray); $i++)\
    \ {\n\t\t\tif ($numArray[$i] % 2 == 0) {\n\t\t\t\t$evenCount++;\n\t\t\t} else\
    \ {\n\t\t\t\t$oddCount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn array($evenCount, $oddCount);\n\
    }\nprint_r(even_odd_count(-12));\necho '<br>';\nprint_r(even_odd_count(123));\n\
    echo '<br>';\nprint_r(even_odd_count(222));\necho '<br>';\nprint_r(even_odd_count(0));\n\
    echo '<br>';\nprint_r(even_odd_count(12345));\necho '<br>';\nprint_r(even_odd_count(-12345));\n\
    echo '<br>';\nprint_r(even_odd_count(1000000));\necho '<br>';", "\t$even = 0;\n\
    \t$odd = 0;\n\t$neg = False;\n\tif ($num < 0) {\n\t\t$neg = True;\n\t\t$num =\
    \ -$num;\n\t}\n\twhile ($num > 0) {\n\t\t$dig = $num % 10;\n\t\tif ($dig % 2)\n\
    \t\t\t$odd++;\n\t\telse\n\t\t\t$even++;\n\t\t$num = intval($num / 10);\n\t}\n\t\
    if ($neg)\n\t\t$odd++;\n\treturn array($even, $odd);\n}\n\nprint_r(even_odd_count(-12));\n\
    echo \"\\n\";\nprint_r(even_odd_count(123));\necho \"\\n\";\n", "    $odd_counter\
    \ = 0;\n    $even_counter = 0;\n    if ($num < 0) {\n        $num = abs($num);\n\
    \    }\n    $digits = str_split($num);\n    foreach ($digits as $digit) {\n  \
    \      if ($digit % 2 === 0) {\n            $even_counter++;\n        } else {\n\
    \            $odd_counter++;\n        }\n    }\n    return array($even_counter,\
    \ $odd_counter);\n}\n\necho \"even_odd_count(123): \";\nvar_dump(even_odd_count(123));\n\
    echo \"even_odd_count(-12): \";\nvar_dump(even_odd_count(-12));\necho \"even_odd_count(8):\
    \ \";\nvar_dump(even_odd_count(8));\necho \"even_odd_count(11): \";\nvar_dump(even_odd_count(11));\n\
    echo \"even_odd_count(10): \";\nvar_dump(even_odd_count(10));\necho \"even_odd_count(6):\
    \ \";\nvar_dump(even_odd_count(6));\necho \"even_odd_count(5): \";\nvar_dump(even_odd_count(5));\n\
    echo \"even_odd_count(4): \";\nvar_dump(even_odd_count(4));\necho \"even_odd_count(3):\
    \ \";\nvar_dump(even_odd_count(3));\necho \"even_odd_count(2): \";\nvar_dump(even_odd_count(2));\n\
    echo \"even_odd_count(1): \";\nvar_dump(even_odd_count(1));\necho \"even_odd_count(0):\
    \ \";\nvar_dump(even_odd_count(0));", "    $even = 0;\n    $odd = 0;\n    while($num\
    \ != 0) {\n        $r = $num % 10;\n        if($r % 2 == 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n        $num = (int)($num /\
    \ 10);\n    }\n    $even_odd_count = array($even, $odd);\n    return $even_odd_count;\n\
    }\n", "  // Your code here\n}\n", "    $num = (string)$num;\n    $even = 0;\n\
    \    $odd = 0;\n    for ($i = 0; $i < strlen($num); $i++) {\n        if ($num[$i]\
    \ % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n \
    \       }\n    }\n    return array($even, $odd);\n}\n\nvar_dump(even_odd_count(-12));\n\
    var_dump(even_odd_count(123));", "    $even = 0;\n    $odd = 0;\n    for ($i =\
    \ 0; $i < strlen($num); $i++) {\n        if (is_numeric($num[$i])) {\n       \
    \     if ($num[$i] % 2 === 0) {\n                $even++;\n            } else\
    \ {\n                $odd++;\n            }\n        }\n    }\n    $arr = array($even,\
    \ $odd);\n    return $arr;\n}\n", "    if ($num === 0) {\n        return array(0,\
    \ 0);\n    }\n    $result = array(0, 0);\n    while ($num != 0) {\n        $digit\
    \ = $num % 10;\n        if ($digit % 2 === 0) {\n            $result[0]++;\n \
    \       } else {\n            $result[1]++;\n        }\n        $num = ($num -\
    \ $digit) / 10;\n    }\n    return $result;\n}\n", "  $evens = 0;\n  $odds = 0;\n\
    \  if ($num < 0) {\n    $num = -$num;\n  }\n  $digit_array = str_split($num);\n\
    \  foreach ($digit_array as $digit) {\n    if ($digit % 2 === 0) {\n      $evens++;\n\
    \    } else {\n      $odds++;\n    }\n  }\n  return array($evens, $odds);\n}\n\
    \n$my_num = -12;\nvar_dump(even_odd_count($my_num));\n$my_num = 123;\nvar_dump(even_odd_count($my_num));",
  "    // Convert the number to a string.\n    $str = (string) abs($num);\n    //\
    \ Initialize an array to return even and odd digits.\n    $return_array = array(0,\
    \ 0);\n    // Get the length of the string\n    $str_length = strlen($str);\n\
    \    // Iterate through the string\n    for ($i = 0; $i < $str_length; $i++) {\n\
    \        // If the integer is even, increase the count by 1.\n        if ((int)\
    \ $str[$i] % 2 == 0) {\n            $return_array[0]++;\n        }\n        //\
    \ If the integer is odd, increase the count by 1.\n        else {\n          \
    \  $return_array[1]++;\n        }\n    }\n    // Return the array with even and\
    \ odd count.\n    return $return_array;\n}\necho \"Input: -12\\n\";\necho \"Output:\
    \ \";\nprint_r(even_odd_count(-12));\necho \"\\n\\n\";\necho \"Input: 123\\n\"\
    ;\necho \"Output: \";\nprint_r(even_odd_count(123));", "    $arr = [];\n    while\
    \ ($num) {\n        if (!($num % 10 % 2))\n            $arr[0]++;\n        else\n\
    \            $arr[1]++;\n        $num /= 10;\n    }\n    return $arr;\n}", " \
    \   $str = strval($num);\n    $even = 0;\n    $odd = 0;\n    $len = strlen($str);\n\
    \    for ($i = 0; $i < $len; $i++) {\n        if (intval($str[$i]) % 2 == 0) {\n\
    \            $even++;\n        } else {\n            $odd++;\n        }\n    }\n\
    \    return array($even, $odd);\n}\n\necho \"<pre>\";\nprint_r(even_odd_count(-12));\n\
    echo \"</pre>\";\n\necho \"<pre>\";\nprint_r(even_odd_count(123));\necho \"</pre>\"\
    ;", "\t$positive_num = abs($num);\n\t$str_num = strval($positive_num);\n\t$count\
    \ = 0;\n\t$count2 = 0;\n\tfor ($i = 0; $i < strlen($str_num); $i++) {\n\t\tif\
    \ ($str_num[$i] % 2 == 0) {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$count2++;\n\
    \t\t}\n\t}\n\treturn array($count, $count2);\n}", "\t$arr = array(0, 0);\n\tif\
    \ ($num < 0) {\n\t\t$num = -$num;\n\t}\n\t$str = (string)$num;\n\tfor ($i = 0;\
    \ $i < strlen($str); $i++) {\n\t\tif ($str[$i] % 2 == 0) {\n\t\t\t$arr[0]++;\n\
    \t\t} else {\n\t\t\t$arr[1]++;\n\t\t}\n\t}\n\treturn $arr;\n}\n\necho \"<pre>\"\
    ;\nprint_r(even_odd_count(-12));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(even_odd_count(123));\n\
    echo \"</pre>\";\n", "\t// Your code here\n}", "  if($num < 0) {\n    $num = -$num;\n\
    \  }\n  $digits = array();\n  while($num > 0) {\n    $digits[] = $num % 10;\n\
    \    $num = floor($num / 10);\n  }\n  $even = 0;\n  $odd = 0;\n  foreach($digits\
    \ as $digit) {\n    if($digit % 2 == 0) {\n      $even++;\n    } else {\n    \
    \  $odd++;\n    }\n  }\n  return array($even, $odd);\n}", "    // TODO: write\
    \ code here\n}\n", "\t$stringNum = (string) $num;\n\t$numArray = str_split($stringNum);\n\
    \t$even = 0;\n\t$odd = 0;\n\tforeach ($numArray as $value) {\n\t\tif ($value %\
    \ 2 == 0) {\n\t\t\t$even += 1;\n\t\t} else {\n\t\t\t$odd += 1;\n\t\t}\n\t}\n\t\
    return [$even, $odd];\n}\n\n$result = even_odd_count(-12);\nprint_r($result);",
  "    $ret = array(0, 0);\n    while ($num != 0) {\n        $ret[$num % 2]++;\n \
    \       $num /= 10;\n    }\n    return $ret;\n}\n$nums = array(-12, 123, 1, -1,\
    \ 20, 11, 22, 9, -10, 3, -4, -7, -8, -9, -9, -9, -9, -9, -9, -9, -10, -20, -30,\
    \ -45, -5, -6, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5,\
    \ -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5,\
    \ -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5,\
    \ -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5,\
    \ -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5,\
    \ -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5,\
    \ -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -", "  $even\
    \ = 0;\n  $odd = 0;\n  $nums = array();\n  $result = array();\n  if ($num < 0)\
    \ {\n    $num = abs($num);\n  }\n  $nums = str_split($num);\n  foreach ($nums\
    \ as $num) {\n    if ($num % 2 == 0) {\n      $even++;\n    } else {\n      $odd++;\n\
    \    }\n  }\n  array_push($result, $even, $odd);\n  return $result;\n}\n", "\t\
    $num = str_split($num);\n\t$even_odd = array(0, 0);\n\tfor ($i = 0; $i < count($num);\
    \ $i++) {\n\t\tif ($num[$i] % 2 == 0) {\n\t\t\t$even_odd[0] += 1;\n\t\t} else\
    \ {\n\t\t\t$even_odd[1] += 1;\n\t\t}\n\t}\n\treturn $even_odd;\n}\n", "    $num\
    \ = abs($num);\n    $evens = [];\n    $odds = [];\n    $num_str = strval($num);\n\
    \    $num_str_arr = str_split($num_str);\n    foreach ($num_str_arr as $num) {\n\
    \        if ($num % 2 == 0) {\n            array_push($evens, $num);\n       \
    \ } else {\n            array_push($odds, $num);\n        }\n    }\n    return\
    \ array(count($evens), count($odds));\n}\n\necho \"<pre>\";\nprint_r(even_odd_count(-12));\n\
    echo \"</pre>\";\n\necho \"<pre>\";\nprint_r(even_odd_count(123));\necho \"</pre>\"\
    ;\n", "    $num_abs = abs($num);\n    $num_str = (string)$num_abs;\n    $num_array\
    \ = str_split($num_str);\n    $even = 0;\n    $odd = 0;\n    foreach ($num_array\
    \ as $i) {\n        if ($i % 2 === 0) {\n            $even++;\n        } else\
    \ {\n            $odd++;\n        }\n    }\n    return array($even, $odd);\n}\n",
  "  \n}", "\t$num = str_split(abs($num));\n\t$num_length = count($num);\n\t$even\
    \ = 0;\n\t$odd = 0;\n\tfor ($i = 0; $i < $num_length; $i++) {\n\t\tif ($num[$i]\
    \ % 2 == 0) {\n\t\t\t$even += 1;\n\t\t} else {\n\t\t\t$odd += 1;\n\t\t}\n\t}\n\
    \treturn array($even, $odd);\n}\n\n$num = -12;\nprint_r(even_odd_count($num));",
  "  $num = abs($num);\n  $array = str_split($num);\n  $even = 0;\n  $odd = 0;\n \
    \ foreach ($array as $digit) {\n    if ($digit % 2 == 0) {\n      $even += 1;\n\
    \    } else {\n      $odd += 1;\n    }\n  }\n  return array($even, $odd);\n}\n\
    echo 'Even/Odd Count: ';\nprint_r(even_odd_count(-12));\nprint_r(even_odd_count(123));\n\
    print_r(even_odd_count(423434));", "  $even = 0;\n  $odd = 0;\n  $abs = abs($num);\n\
    \  while ($abs > 0) {\n    $remainder = $abs % 10;\n    if ($remainder % 2 ==\
    \ 0) {\n      $even++;\n    } else {\n      $odd++;\n    }\n    $abs = floor($abs\
    \ / 10);\n  }\n  return array($even, $odd);\n}\n", "   $ans = array(0, 0);\n \
    \  if($num < 0) $num = -$num;\n   while($num != 0) {\n      $rem = $num % 10;\n\
    \      if($rem % 2 == 0) {\n         $ans[0]++;\n      } else {\n         $ans[1]++;\n\
    \      }\n      $num = intval($num / 10);\n   }\n   return $ans;\n}\n", "    //\
    \ your code here\n    $number = [];\n    $num = abs($num);\n    $i = 0;\n    $j\
    \ = 0;\n    while($num>0){\n        $remainder = $num%10;\n        if($remainder%2\
    \ == 0){\n            $number[$i] = 1;\n            $i++;\n        }\n       \
    \ else{\n            $number[$j] = 0;\n            $j++;\n        }\n        $num\
    \ = intval($num/10);\n    }\n    return $number;\n}\necho(even_odd_count(-12));",
  "    $result = array(0, 0);\n    $num = abs($num);\n    $length = strlen($num);\n\
    \    for ($i = 0; $i < $length; $i++) {\n        $digit = $num % 10;\n       \
    \ if ($digit % 2 === 0) {\n            $result[0]++;\n        } else {\n     \
    \       $result[1]++;\n        }\n        $num = floor($num / 10);\n    }\n  \
    \  return $result;\n}\n\necho \"<pre>\";\nvar_dump(even_odd_count(-12));\nvar_dump(even_odd_count(123));\n\
    echo \"</pre>\";\n", "    $even = 0;\n    $odd = 0;\n    $num = abs($num);\n \
    \   while ($num > 0) {\n        $digit = $num % 10;\n        if ($digit % 2 ===\
    \ 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n\
    \        $num = floor($num / 10);\n    }\n    return array($even, $odd);\n}\n",
  "\t$str = (string) abs($num);\n\t$even = 0;\n\t$odd = 0;\n\tfor ($i = 0; $i < strlen($str);\
    \ $i++) {\n\t\tif ($str[$i] % 2 == 0)\n\t\t\t$even++;\n\t\telse\n\t\t\t$odd++;\n\
    \t}\n\treturn array($even, $odd);\n}\n", "    $even_count = 0;\n    $odd_count\
    \ = 0;\n    if($num < 0) {\n        $num = abs($num);\n    }\n    $digits = str_split($num);\n\
    \    foreach($digits as $digit) {\n        if($digit % 2 == 0) {\n           \
    \ $even_count += 1;\n        }\n        else {\n            $odd_count += 1;\n\
    \        }\n    }\n    return array($even_count, $odd_count);\n}\nprint_r(even_odd_count(-12));\n\
    print_r(even_odd_count(123));\nprint_r(even_odd_count(0));\n", "\t$even = 0;\n\
    \t$odd = 0;\n\t$arr = str_split($num);\n\tforeach ($arr as $value) {\n\t\tif ($value\
    \ % 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\t\t\t$odd++;\n\t\t}\n\t}\n\t$result\
    \ = array($even, $odd);\n\treturn $result;\n}\n", "  $num = abs($num);\n  $even\
    \ = 0;\n  $odd = 0;\n  while ($num > 0) {\n    $digit = $num % 10;\n    if ($digit\
    \ % 2 == 0) {\n      $even++;\n    } else {\n      $odd++;\n    }\n    $num =\
    \ (int)($num / 10);\n  }\n  return array($even, $odd);\n}\n\necho even_odd_count(-12)[0];\n\
    echo even_odd_count(-12)[1];\necho even_odd_count(123)[0];\necho even_odd_count(123)[1];\n",
  "  $output = [];\n  $even = 0;\n  $odd = 0;\n  $int = abs($num);\n  while ($int\
    \ > 0) {\n    $remainder = $int % 10;\n    if ($remainder % 2 == 0) {\n      $even++;\n\
    \    } else {\n      $odd++;\n    }\n    $int = floor($int / 10);\n  }\n  array_push($output,\
    \ $even, $odd);\n  return $output;\n}\n\n$result = even_odd_count(-12);\necho\
    \ \" even number: $result[0] odd number: $result[1]\";\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
