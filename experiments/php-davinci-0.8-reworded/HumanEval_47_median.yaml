name: HumanEval_47_median
language: php
prompt: "<?php\n// Return median of elements in the array l.\n// >>> median(array(3,\
  \ 1, 2, 4, 5))\n// 3\n// >>> median(array(-10, 4, 6, 1000, 10, 20))\n// 15.0\nfunction\
  \ median($l) {\n"
tests: "function candidate(...$args) {\n    return median(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0) {\
  \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== 5) {\
  \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5)) !== 5.5)\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8, 1, 3, 9,\
  \ 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $c = count($l);\n    $low = floor($c / 2);\n    $high = ceil($c\
    \ / 2);\n    if ($c == 0) {\n        return 0;\n    } else if ($c == 1) {\n  \
    \      return $l[0];\n    } else if ($c % 2 == 0) {\n        return ($l[$low]\
    \ + $l[$high]) / 2;\n    } else {\n        return $l[$low];\n    }\n}\n", "\t\
    if (empty($l)) {\n\t\treturn -1;\n\t}\n\t$s = $l;\n\tsort($s);\n\t$half = (int)(count($s)\
    \ / 2);\n\tif (count($s) % 2 == 0) {\n\t\treturn ($s[$half] + $s[$half-1]) / 2;\n\
    \t} else {\n\t\treturn $s[$half];\n\t}\n}\n\n$ar = array(3, 1, 2, 4, 5);\n$ar\
    \ = array(-10, 4, 6, 1000, 10, 20);\n\n$m = median($ar);\nvar_dump($m);\n", " \
    \   sort($l);\n    $c = count($l);\n    if ($c % 2 == 0) {\n        return ($l[$c\
    \ / 2] + $l[$c / 2 - 1]) / 2;\n    } else {\n        return $l[$c / 2];\n    }\n\
    }", "    sort($l);\n    $i = 0;\n    $j = count($l) - 1;\n    $k = count($l) /\
    \ 2;\n    $m = $l[$k];\n    while ($i < $j) {\n        if ($l[$i] >= $m) {\n \
    \           $l[$j] = $l[$i];\n            $j--;\n        } else {\n          \
    \  $i++;\n        }\n    }\n    $l[$i] = $m;\n    if (count($l) % 2) {\n     \
    \   return $l[$k];\n    } else {\n        return ($l[$k - 1] + $l[$k]) / 2;\n\
    \    }\n}\n", "    $r = array_values($l);\n    sort($r);\n    $n = count($r);\n\
    \    if ($n % 2 == 0) {\n        return ($r[$n / 2] + $r[$n / 2 - 1]) / 2;\n \
    \   } else {\n        return $r[$n / 2];\n    }\n}\n\n$l = array(3, 1, 2, 4, 5);\n\
    print(\"Median of [\".join(\", \", $l).\"] is \".median($l).\"\\n\");\n\n$l =\
    \ array(-10, 4, 6, 1000, 10, 20);\nprint(\"Median of [\".join(\", \", $l).\"]\
    \ is \".median($l).\"\\n\");", "    $n = count($l);\n    $c = $n / 2;\n    if\
    \ ($n % 2 == 0) {\n        return ($l[$c] + $l[$c - 1]) / 2;\n    } else {\n \
    \       return $l[$c];\n    }\n}\n", "\t$m = count($l) / 2;\n\t$m = floor($m);\n\
    \tif (count($l)%2)\n\t\treturn $l[$m];\n\telse\n\t\treturn ($l[$m-1] + $l[$m])\
    \ / 2;\n}\n", "    $temp = $l;\n    sort($temp);\n    $n = count($temp);\n   \
    \ if ($n % 2 == 0) {\n        $f = $temp[$n / 2];\n        $s = $temp[$n / 2 -\
    \ 1];\n        return ($f + $s) / 2;\n    } else {\n        return $temp[($n -\
    \ 1) / 2];\n    }\n}\n\n$l = array(3, 1, 2, 4, 5);\necho \"midian of \" . json_encode($l)\
    \ . \" is \" . median($l) . PHP_EOL;\n$l = array(-10, 4, 6, 1000, 10, 20);\necho\
    \ \"midian of \" . json_encode($l) . \" is \" . median($l) . PHP_EOL;", "\t$count\
    \ = count($l);\n\tif ($count == 0) return 0;\n\tsort($l);\n\t$middle = $count\
    \ / 2;\n\tif ($count % 2 == 0) {\n\t\treturn ($l[$middle - 1] + $l[$middle]) /\
    \ 2;\n\t} else {\n\t\treturn $l[$middle];\n\t}\n}\n", "\tif (count($l) == 0) return\
    \ 0;\n\t$l = sorted($l);\n\t$len = count($l);\n\t$mid = (int)($len / 2);\n\treturn\
    \ $len % 2 == 0 ? ($l[$mid] + $l[$mid - 1]) / 2 : $l[$mid];\n}", "    sort($l);\n\
    \    $c = count($l);\n    if($c == 0) return null;\n    if($c % 2 == 0) {\n  \
    \      return ($l[$c / 2] + $l[$c / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[$c / 2];\n    }\n}\n", "    $n = count($l);\n    if ($n == 0) {\n       \
    \ return 0;\n    }\n    sort($l);\n    $i = floor($n / 2);\n    if ($n % 2 ==\
    \ 0) {\n        return ($l[$i - 1] + $l[$i]) / 2;\n    } else {\n        return\
    \ $l[$i];\n    }\n}", "  $len = count($l);\n  if ($len == 0) return 0;\n  sort($l);\n\
    \  $idx = $len / 2;\n  if ($len % 2 == 0)\n    return ($l[$idx] + $l[$idx - 1])\
    \ / 2;\n  else\n    return $l[$idx];\n}\n", "    sort($l);\n    $n = count($l);\n\
    \    $m = (int)($n / 2);\n    if ($n % 2 == 0) {\n        return ($l[$m - 1] +\
    \ $l[$m]) / 2;\n    } else {\n        return $l[$m];\n    }\n}\n", "    $n = count($l);\n\
    \    if ($n % 2 == 0) {\n        $m1 = $l[($n/2)-1];\n        $m2 = $l[$n/2];\n\
    \        return ($m1 + $m2) / 2;\n    } else {\n        return $l[$n/2];\n   \
    \ }\n}\n", "    sort($l);\n    $middle = count($l) / 2;\n    if (is_int($middle))\
    \ {\n        return $l[$middle];\n    } else {\n        return ($l[floor($middle)]\
    \ + $l[ceil($middle)]) / 2;\n    }\n}\n", "    if (count($l) % 2 == 0) {\n   \
    \     $lo = (count($l) / 2) - 1;\n        $hi = $lo + 1;\n        return ($l[$lo]\
    \ + $l[$hi]) / 2;\n    } else {\n        return $l[(count($l) - 1) / 2];\n   \
    \ }\n}", "    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n       \
    \ return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return $l[floor($n\
    \ / 2)];\n    }\n}\n", "    $m = count($l);\n    sort($l);\n    if ($m % 2 ==\
    \ 0) {\n        return ($l[$m / 2] + $l[$m / 2 - 1]) / 2;\n    } else {\n    \
    \    return $l[floor($m / 2)];\n    }\n}\n", "    // sort the array in increasing\
    \ order\n    sort($l);\n    // number of elements\n    $n = count($l);\n    //\
    \ odd number\n    if ($n % 2 == 1) {\n        // find the index of middle element\n\
    \        $middle = floor($n / 2);\n        // middle element\n        return $l[$middle];\n\
    \    }\n    // even number\n    else {\n        // find the indices of the two\
    \ middle elements\n        $middle1 = $n / 2 - 1;\n        $middle2 = $n / 2;\n\
    \        // find average of these two elements\n        return ($l[$middle1] +\
    \ $l[$middle2]) / 2;\n    }\n}"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
