name: HumanEval_47_median
language: php
prompt: "<?php\n// Return median of elements in the array l.\n// >>> median(array(3,\
  \ 1, 2, 4, 5))\n// 3\n// >>> median(array(-10, 4, 6, 1000, 10, 20))\n// 15.0\nfunction\
  \ median($l) {\n"
tests: "function candidate(...$args) {\n    return median(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0) {\
  \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== 5) {\
  \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5)) !== 5.5)\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8, 1, 3, 9,\
  \ 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $c = count($l);\n    $low = floor($c / 2);\n    $high = ceil($c\
    \ / 2);\n    if ($c == 0) {\n        return 0;\n    } else if ($c == 1) {\n  \
    \      return $l[0];\n    } else if ($c % 2 == 0) {\n        return ($l[$low]\
    \ + $l[$high]) / 2;\n    } else {\n        return $l[$low];\n    }\n}\n", "\t\
    if (empty($l)) {\n\t\treturn -1;\n\t}\n\t$s = $l;\n\tsort($s);\n\t$half = (int)(count($s)\
    \ / 2);\n\tif (count($s) % 2 == 0) {\n\t\treturn ($s[$half] + $s[$half-1]) / 2;\n\
    \t} else {\n\t\treturn $s[$half];\n\t}\n}\n\n$ar = array(3, 1, 2, 4, 5);\n$ar\
    \ = array(-10, 4, 6, 1000, 10, 20);\n\n$m = median($ar);\nvar_dump($m);\n", " \
    \   sort($l);\n    $c = count($l);\n    if ($c % 2 == 0) {\n        return ($l[$c\
    \ / 2] + $l[$c / 2 - 1]) / 2;\n    } else {\n        return $l[$c / 2];\n    }\n\
    }", "    sort($l);\n    $i = 0;\n    $j = count($l) - 1;\n    $k = count($l) /\
    \ 2;\n    $m = $l[$k];\n    while ($i < $j) {\n        if ($l[$i] >= $m) {\n \
    \           $l[$j] = $l[$i];\n            $j--;\n        } else {\n          \
    \  $i++;\n        }\n    }\n    $l[$i] = $m;\n    if (count($l) % 2) {\n     \
    \   return $l[$k];\n    } else {\n        return ($l[$k - 1] + $l[$k]) / 2;\n\
    \    }\n}\n", "    $r = array_values($l);\n    sort($r);\n    $n = count($r);\n\
    \    if ($n % 2 == 0) {\n        return ($r[$n / 2] + $r[$n / 2 - 1]) / 2;\n \
    \   } else {\n        return $r[$n / 2];\n    }\n}\n\n$l = array(3, 1, 2, 4, 5);\n\
    print(\"Median of [\".join(\", \", $l).\"] is \".median($l).\"\\n\");\n\n$l =\
    \ array(-10, 4, 6, 1000, 10, 20);\nprint(\"Median of [\".join(\", \", $l).\"]\
    \ is \".median($l).\"\\n\");", "    $n = count($l);\n    $c = $n / 2;\n    if\
    \ ($n % 2 == 0) {\n        return ($l[$c] + $l[$c - 1]) / 2;\n    } else {\n \
    \       return $l[$c];\n    }\n}\n", "\t$m = count($l) / 2;\n\t$m = floor($m);\n\
    \tif (count($l)%2)\n\t\treturn $l[$m];\n\telse\n\t\treturn ($l[$m-1] + $l[$m])\
    \ / 2;\n}\n", "    $temp = $l;\n    sort($temp);\n    $n = count($temp);\n   \
    \ if ($n % 2 == 0) {\n        $f = $temp[$n / 2];\n        $s = $temp[$n / 2 -\
    \ 1];\n        return ($f + $s) / 2;\n    } else {\n        return $temp[($n -\
    \ 1) / 2];\n    }\n}\n\n$l = array(3, 1, 2, 4, 5);\necho \"midian of \" . json_encode($l)\
    \ . \" is \" . median($l) . PHP_EOL;\n$l = array(-10, 4, 6, 1000, 10, 20);\necho\
    \ \"midian of \" . json_encode($l) . \" is \" . median($l) . PHP_EOL;", "\t$count\
    \ = count($l);\n\tif ($count == 0) return 0;\n\tsort($l);\n\t$middle = $count\
    \ / 2;\n\tif ($count % 2 == 0) {\n\t\treturn ($l[$middle - 1] + $l[$middle]) /\
    \ 2;\n\t} else {\n\t\treturn $l[$middle];\n\t}\n}\n", "\tif (count($l) == 0) return\
    \ 0;\n\t$l = sorted($l);\n\t$len = count($l);\n\t$mid = (int)($len / 2);\n\treturn\
    \ $len % 2 == 0 ? ($l[$mid] + $l[$mid - 1]) / 2 : $l[$mid];\n}", "    sort($l);\n\
    \    $c = count($l);\n    if($c == 0) return null;\n    if($c % 2 == 0) {\n  \
    \      return ($l[$c / 2] + $l[$c / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[$c / 2];\n    }\n}\n", "    $n = count($l);\n    if ($n == 0) {\n       \
    \ return 0;\n    }\n    sort($l);\n    $i = floor($n / 2);\n    if ($n % 2 ==\
    \ 0) {\n        return ($l[$i - 1] + $l[$i]) / 2;\n    } else {\n        return\
    \ $l[$i];\n    }\n}", "  $len = count($l);\n  if ($len == 0) return 0;\n  sort($l);\n\
    \  $idx = $len / 2;\n  if ($len % 2 == 0)\n    return ($l[$idx] + $l[$idx - 1])\
    \ / 2;\n  else\n    return $l[$idx];\n}\n", "    sort($l);\n    $n = count($l);\n\
    \    $m = (int)($n / 2);\n    if ($n % 2 == 0) {\n        return ($l[$m - 1] +\
    \ $l[$m]) / 2;\n    } else {\n        return $l[$m];\n    }\n}\n", "    $n = count($l);\n\
    \    if ($n % 2 == 0) {\n        $m1 = $l[($n/2)-1];\n        $m2 = $l[$n/2];\n\
    \        return ($m1 + $m2) / 2;\n    } else {\n        return $l[$n/2];\n   \
    \ }\n}\n", "    sort($l);\n    $middle = count($l) / 2;\n    if (is_int($middle))\
    \ {\n        return $l[$middle];\n    } else {\n        return ($l[floor($middle)]\
    \ + $l[ceil($middle)]) / 2;\n    }\n}\n", "    if (count($l) % 2 == 0) {\n   \
    \     $lo = (count($l) / 2) - 1;\n        $hi = $lo + 1;\n        return ($l[$lo]\
    \ + $l[$hi]) / 2;\n    } else {\n        return $l[(count($l) - 1) / 2];\n   \
    \ }\n}", "    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n       \
    \ return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return $l[floor($n\
    \ / 2)];\n    }\n}\n", "    $m = count($l);\n    sort($l);\n    if ($m % 2 ==\
    \ 0) {\n        return ($l[$m / 2] + $l[$m / 2 - 1]) / 2;\n    } else {\n    \
    \    return $l[floor($m / 2)];\n    }\n}\n", "    // sort the array in increasing\
    \ order\n    sort($l);\n    // number of elements\n    $n = count($l);\n    //\
    \ odd number\n    if ($n % 2 == 1) {\n        // find the index of middle element\n\
    \        $middle = floor($n / 2);\n        // middle element\n        return $l[$middle];\n\
    \    }\n    // even number\n    else {\n        // find the indices of the two\
    \ middle elements\n        $middle1 = $n / 2 - 1;\n        $middle2 = $n / 2;\n\
    \        // find average of these two elements\n        return ($l[$middle1] +\
    \ $l[$middle2]) / 2;\n    }\n}", "  if (count($l) % 2 == 0) {\n    return ( $l[(count($l)/2)\
    \ - 1] + $l[count($l)/2] ) / 2;\n  } else {\n    return $l[(count($l) - 1) / 2];\n\
    \  }\n}\n", "\t$n = count($l);\n\tif ($n == 0) {\n\t\treturn null;\n\t}\n\tsort($l);\n\
    \tif ($n % 2 == 0) {\n\t\treturn ($l[$n / 2 - 1] + $l[$n / 2]) / 2;\n\t} else\
    \ {\n\t\treturn $l[$n / 2];\n\t}\n}\n", "    sort($l);\n    $n = count($l);\n\
    \    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n \
    \   } else {\n        return $l[$n / 2];\n    }\n}\n", "\t$c = count($l);\n\t\
    if($c == 0) {\n\t\treturn \"N/A\";\n\t} else if($c % 2 == 0) {\n\t\treturn ($l[$c\
    \ / 2] + $l[$c / 2 - 1]) / 2;\n\t} else {\n\t\treturn $l[($c - 1) / 2];\n\t}\n\
    }\n", "    $ll = count($l);\n    $l2 = $l;\n    sort($l2);\n    if ($ll % 2 ==\
    \ 0) {\n        return ($l2[$ll / 2 - 1] + $l2[$ll / 2]) / 2;\n    } else {\n\
    \        return $l2[(int) ($ll / 2)];\n    }\n}\n", "    $n = count($l);\n   \
    \ $m = $n / 2;\n    if ($n % 2 != 0) {\n        // We have an odd number of elements.\n\
    \        return $l[$m];\n    } else {\n        // We have an even number of elements.\n\
    \        return ($l[$m] + $l[$m - 1]) / 2;\n    }\n}\n", "    $n = count($l);\n\
    \    $s = $n % 2 == 0 ? ($l[$n / 2] + $l[$n / 2 - 1]) / 2 : $l[($n - 1) / 2];\n\
    \    return $s;\n}\n", "  if (!is_array($l)) {\n    return null;\n  }\n  sort($l);\n\
    \  $length = count($l);\n  if ($length % 2 == 0) {\n    return (($l[($length/2)-1]\
    \ + $l[$length/2]) / 2);\n  } else {\n    return $l[intval($length/2)];\n  }\n\
    }\n", "    $c = count($l);\n    if ($c % 2 == 0) {\n        return ($l[$c / 2]\
    \ + $l[$c / 2 - 1]) / 2;\n    } else {\n        return $l[$c / 2];\n    }\n}\n",
  "    $l = sort($l);\n    $n = count($l);\n    if ($n%2 == 0) {\n        $n = $n/2;\n\
    \        return ($l[$n]+$l[$n-1])/2;\n    } else {\n        $n = ($n-1)/2;\n \
    \       return $l[$n];\n    }\n}", "\t$l = sort($l);\n\t$c = count($l);\n\treturn\
    \ $c % 2 ? $l[$c / 2] : ($l[$c / 2] + $l[$c / 2 - 1]) / 2;\n}\n", "    sort($l);\n\
    \    $n = count($l);\n    if ($n % 2) {\n        return $l[floor($n / 2)];\n \
    \   } else {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    }\n}\n",
  "    sort($l);\n    $i = count($l);\n    if ($i % 2 == 0) {\n        return ($l[$i\
    \ / 2] + $l[$i / 2 - 1]) / 2;\n    } else {\n        return $l[floor($i / 2)];\n\
    \    }\n}\n", "    sort($l);\n    $s = sizeof($l);\n    $m = (int)($s / 2);\n\
    \    if ($s % 2) {\n        return $l[$m];\n    } else {\n        return ($l[$m]\
    \ + $l[$m - 1]) / 2;\n    }\n}\n", "\tsort($l);\n\t$len = count($l);\n\tif ($len\
    \ % 2) {\n\t\treturn $l[($len-1)/2];\n\t} else {\n\t\treturn ($l[$len/2-1] + $l[$len/2])\
    \ / 2;\n\t}\n}\n", "    $n = count($l);\n    if ($n % 2) { // odd\n        $a\
    \ = $l[floor($n / 2)];\n    } else { // even\n        $a = ($l[floor($n / 2) -\
    \ 1] + $l[floor($n / 2)]) / 2;\n    }\n    return $a;\n}\n", "    sort($l);\n\
    \    $n = count($l);\n    if (($n % 2) == 0) {\n        return ($l[$n / 2] + $l[($n\
    \ / 2) - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n}", "\tsort($l);\n\
    \t$count = count($l);\n\t$middle = floor($count / 2);\n\tif ($count % 2 == 0)\
    \ {\n\t\t$median = ($l[$middle - 1] + $l[$middle]) / 2;\n\t} else {\n\t\t$median\
    \ = $l[$middle];\n\t}\n\treturn $median;\n}", "  $c = count($l);\n  if ($c ==\
    \ 0) return 0;\n  sort($l);\n  if ($c % 2 == 0) return ($l[$c / 2] + $l[$c / 2\
    \ - 1]) / 2;\n  return $l[$c / 2];\n}\n", "    sort($l);\n    $n = count($l);\n\
    \    if ($n % 2 == 0) {\n        return (($l[$n / 2] + $l[$n / 2 - 1]) / 2);\n\
    \    } else {\n        return $l[($n - 1) / 2];\n    }\n}\n", "    sort($l);\n\
    \    $mid = (count($l) - 1) / 2;\n    return (is_int($mid)) ? $l[$mid] : ($l[floor($mid)]\
    \ + $l[ceil($mid)]) / 2;\n}\n\n$l = array(3, 1, 2, 4, 5);\nprintf(\"Median of\
    \ %s is %s\\n\", implode(', ', $l), median($l));\n\n$l = array(-10, 4, 6, 1000,\
    \ 10, 20);\nprintf(\"Median of %s is %s\\n\", implode(', ', $l), median($l));",
  "\tif(count($l) == 0) return 0;\n\tsort($l);\n\tif(count($l) % 2 == 0) {\n\t\treturn\
    \ (($l[count($l)/2] + $l[count($l)/2 - 1]) / 2);\n\t} else {\n\t\treturn $l[(count($l)\
    \ - 1) / 2];\n\t}\n}\n", "    $n = count($l);\n    if ($n == 0) {\n        return\
    \ null;\n    }\n    sort($l);\n    if ($n % 2 == 0) {\n        return ($l[intval($n\
    \ / 2) - 1] + $l[intval($n / 2)]) / 2;\n    } else {\n        return $l[intval($n\
    \ / 2)];\n    }\n}", "  $c = count($l);\n  sort($l);\n  if($c % 2 == 0) {\n  \
    \  return ($l[$c / 2] + $l[$c / 2 - 1]) / 2;\n  } else {\n    return $l[floor($c\
    \ / 2)];\n  }\n}", "    $count = count($l);\n    if ($count % 2 == 0) {\n    \
    \    $mid = $count / 2;\n        return ($l[$mid] + $l[$mid - 1]) / 2;\n    }\
    \ else {\n        $mid = floor($count / 2);\n        return $l[$mid];\n    }\n\
    }\n", "    //return null;\n    $middle = count($l) / 2;\n    sort($l);\n    if\
    \ (count($l) % 2 == 0) {\n        return (($l[$middle - 1] + $l[$middle]) / 2);\n\
    \    } else {\n        return $l[$middle];\n    }\n}\n", "  $c = count($l);\n\
    \  if ($c === 0) {\n    return 0;\n  }\n  sort($l);\n  if ($c % 2 === 0) {\n \
    \   return ($l[floor($c / 2)] + $l[floor($c / 2) - 1]) / 2;\n  } else {\n    return\
    \ $l[floor($c / 2)];\n  }\n}\n\n$argv = $_SERVER['argv'];\n$file = $argv[1];\n\
    \n$input = explode(\"\\n\", file_get_contents($file));\n\n$n = 0;\n$cases = [];\n\
    \nwhile ($input[$n] !== '') {\n  $lines = (int) $input[$n];\n  $linesOfCode =\
    \ [];\n  for ($i = 0; $i < $lines; $i++) {\n    $linesOfCode[] = (int) $input[$n\
    \ + $i + 1];\n  }\n  $cases[] = $linesOfCode;\n  $n += $lines + 1;\n}\n\n$n =\
    \ 0;\nforeach ($cases as $l) {\n  $n++;\n  $c = median($l);\n  $a = array_map(function\
    \ ($x) use ($c) {\n    return abs($x - $c);\n  }, $l);\n  $median = median($a);\n\
    \  echo \"Case #$n: $median\\n\";\n}", "    $s = $l;\n    sort($s);\n    $len\
    \ = count($s);\n    $half = intval($len / 2);\n    if ($len % 2 == 0) {\n    \
    \    return (($s[$half - 1] + $s[$half]) / 2);\n    } else {\n        return $s[$half];\n\
    \    }\n}\n", "    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[($len - 1) / 2];\n    }\n}\n", "    sort($l);\n    $n = count($l);\n\
    \    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n \
    \   } else {\n        return $l[($n - 1) / 2];\n    }\n}", "    $arr = array();\n\
    \    foreach ($l as $key => $value) {\n        $arr[$key] = $value;\n    }\n \
    \   sort($arr);\n    $n = count($arr);\n    if ($n == 0) {\n        return 0;\n\
    \    }\n    if ($n % 2 == 0) {\n        return ($arr[$n / 2] + $arr[$n / 2 - 1])\
    \ / 2;\n    } else {\n        return $arr[(int) ($n / 2)];\n    }\n}\n", "  $n\
    \ = count($l);\n  if ($n % 2 == 0) {\n    return (($l[$n / 2] + $l[$n / 2 - 1])\
    \ / 2);\n  } else {\n    return $l[floor($n / 2)];\n  }\n}\n", "    $l = sort($l);\n\
    \    $i = count($l) - 1;\n    if ($i & 1) {\n        return $l[$i / 2];\n    }\
    \ else {\n        return ($l[$i / 2] + $l[$i / 2 + 1]) / 2;\n    }\n}", "\tsort($l);\
    \ //$l is reference to array\n\t// array_sum() returns sum of values in array\n\
    \t// (index 0 + $index($end - 1)) / 2\n\t$midpoint = array_sum(array(0, count($l)\
    \ - 1)) / 2;\n\t\n\t// if total elements in array is odd\n\tif (count($l) % 2\
    \ == 1) {\n\t\treturn $l[$midpoint];\n\t} else {\n\t\treturn array_sum(array($l[$midpoint],\
    \ $l[$midpoint - 1])) / 2;\n\t}\n}\n", "    $l = array_values($l);\n    sort($l);\n\
    \    $len = count($l);\n    if ($len % 2 == 0) {\n        return ($l[intval($len\
    \ / 2) - 1] + $l[intval($len / 2)]) / 2;\n    } else {\n        return $l[intval($len\
    \ / 2)];\n    }\n}\n", "\tif(count($l) % 2 == 0) {\n\t\t// Even number of elements.\n\
    \t\t$i = count($l) / 2;\n\t\t$j = $i + 1;\n\t\treturn ($l[$i] + $l[$j]) / 2;\n\
    \t} else {\n\t\t// Odd number of elements.\n\t\t$i = intval(floor(count($l) /\
    \ 2));\n\t\treturn $l[$i];\n\t}\n}\n", "    $s = $l;\n    sort($s);\n    $n =\
    \ count($s);\n    if ($n % 2 == 0) {\n        return ($s[$n / 2] + $s[$n / 2 -\
    \ 1]) / 2;\n    } else {\n        return $s[$n / 2];\n    }\n}", "    sort($l);\n\
    \    $length = count($l);\n    if ($length % 2 == 0) {\n        return ($l[($length\
    \ - 1) / 2] + $l[$length / 2]) / 2;\n    } else {\n        return $l[$length /\
    \ 2];\n    }\n}\n$data = array(3, 1, 2, 4, 5);\necho median($data);", "\t$m =\
    \ count($l);\n\tif ($m % 2) {\n\t\t// Count is odd.\n\t\treturn $l[(int)($m /\
    \ 2)];\n\t} else {\n\t\t// Count is even.\n\t\treturn ($l[$m / 2] + $l[$m / 2\
    \ - 1]) / 2;\n\t}\n}\n", "    sort($l);\n    $n = count($l);\n    if ($n == 0)\
    \ {\n        return 0;\n    }\n    $m = floor($n / 2);\n    if ($n % 2 == 0) {\n\
    \        return ($l[$m - 1] + $l[$m]) / 2;\n    } else {\n        return $l[$m];\n\
    \    }\n}\n", "\tif(!is_array($l)) {\n\t\treturn null;\n\t}\n\tsort($l);\n\t$len\
    \ = count($l);\n\tif(is_odd($len)) {\n\t\t$mid = floor($len / 2);\n\t\treturn\
    \ $l[$mid];\n\t} else {\n\t\t$mid = $len / 2;\n\t\treturn ($l[$mid] + $l[$mid\
    \ - 1]) / 2;\n\t}\n}\n", "    sort($l);\n    $n = count($l);\n    if ($n % 2 ==\
    \ 0) {\n        return (double)($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else\
    \ {\n        return $l[($n - 1) / 2];\n    }\n}\n", "    // sort the array in\
    \ ascending order.\n    $sorted = $l;\n    sort($sorted);\n    // Let k = (n +\
    \ 1) / 2; where n is the length of the array and / is division\n    // operator.\n\
    \    $k = (count($sorted) + 1) / 2;\n    // If k is an integer, return the element\
    \ in the k-th position of sorted\n    // array.\n    if (is_int($k)) {\n     \
    \   return $sorted[$k - 1];\n    }\n    // If k is not an integer, return the\
    \ average of the elements in the\n    // (k-0.5)-th and k-th positions of sorted\
    \ array.\n    else {\n        return ($sorted[$k - 0.5 - 1] + $sorted[$k - 1])\
    \ / 2;\n    }\n}\n", "\tsort($l);\n\t$n = count($l);\n\tif ($n % 2 == 0) {\n\t\
    \treturn ( $l[$n / 2] + $l[$n / 2 - 1] ) / 2;\n\t} else {\n\t\treturn $l[floor($n\
    \ / 2)];\n\t}\n}\n", "\t// Your code here.\n\treturn 0;\n}\n", "    // BEGIN (write\
    \ your solution here)\n    $size_l = count($l);\n    if ($size_l % 2 === 0) {\n\
    \        $middle_index = $size_l / 2;\n        return ($l[$middle_index] + $l[$middle_index\
    \ - 1]) / 2;\n    } else {\n        $middle_index = floor($size_l / 2);\n    \
    \    return $l[$middle_index];\n    }\n    // END\n}\n", "  $l = sort($l);\n \
    \ $size = count($l);\n  if ($size % 2 == 0) {\n    return ($l[$size / 2] + $l[$size\
    \ / 2 - 1]) / 2;\n  } else {\n    return $l[$size / 2];\n  }\n}\n", "    $n =\
    \ count($l);\n    if ($n == 0) {\n        return null;\n    }\n    if ($n % 2\
    \ == 0) {\n        $i = $n / 2;\n        return ($l[$i - 1] + $l[$i]) / 2;\n \
    \   } else {\n        $i = ($n - 1) / 2;\n        return $l[$i];\n    }\n}\n",
  "    $sorted = $l;\n    rsort($sorted);\n    $length = count($sorted);\n    $middle\
    \ = floor($length / 2);\n    if($length % 2) {\n        $median = $sorted[$middle];\n\
    \    } else {\n        $low = $sorted[$middle];\n        $high = $sorted[$middle\
    \ + 1];\n        $median = (($low + $high) / 2);\n    }\n    return $median;\n\
    }\n", "  $n = count($l);\n  if ($n == 0) {\n    return NULL;\n  }\n  if ($n %\
    \ 2 == 0) {\n    return ($l[floor($n / 2) - 1] + $l[floor($n / 2)]) / 2;\n  }\
    \ else {\n    return $l[floor($n / 2)];\n  }\n}\n\n$l = [3, 1, 2, 4, 5];\necho\
    \ median($l);\necho \"\\n\";\n\n$l = [-10, 4, 6, 1000, 10, 20];\necho median($l);\n\
    echo \"\\n\";", "    $l_copy = $l;\n    // Sort the array.\n    rsort($l_copy);\n\
    \    $n = count($l_copy);\n    // Compute median.\n    if ($n % 2 == 0) {\n  \
    \      return ($l_copy[($n / 2) - 1] + $l_copy[$n / 2]) / 2;\n    } else {\n \
    \       return $l_copy[($n - 1) / 2];\n    }\n}\n", "  $n = count($l);\n  if ($n\
    \ == 0) {\n    return null;\n  }\n  sort($l);\n  if ($n % 2 == 0) {\n    return\
    \ ($l[$n / 2 - 1] + $l[$n / 2]) / 2;\n  } else {\n    return $l[$n / 2];\n  }\n\
    }\n", "    $n = count($l);\n    $n2 = floor($n / 2);\n    if ($n % 2 == 0) {\n\
    \        return ($l[$n2 - 1] + $l[$n2]) / 2;\n    } else {\n        return $l[$n2];\n\
    \    }\n}", "    sort($l);\n    $count = count($l);\n    if ($count % 2 == 0)\
    \ {\n        return ($l[$count / 2] + $l[$count / 2 - 1]) / 2;\n    } else {\n\
    \        return $l[($count - 1) / 2];\n    }\n}", "  sort($l);\n  $n = count($l);\n\
    \  if ($n % 2 == 0) {\n    return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n  } else\
    \ {\n    return $l[($n - 1) / 2];\n  }\n}\n", "    $c = count($l);\n    if ($c\
    \ == 0) {\n        return null;\n    }\n    $m = floor($c / 2);\n    if ($c %\
    \ 2 == 0) {\n        return ($l[$m - 1] + $l[$m]) / 2;\n    } else {\n       \
    \ return $l[$m];\n    }\n}\n", "    sort($l);\n    $count = count($l);\n    $middle\
    \ = floor($count / 2);\n    if ($count % 2) {\n        return $l[$middle];\n \
    \   } else {\n        return ($l[$middle - 1] + $l[$middle]) / 2;\n    }\n}\n",
  "    $arr = $l;\n    sort($arr);\n    $n = count($arr);\n    if ($n % 2 == 0) {\n\
    \        return ($arr[$n / 2] + $arr[$n / 2 - 1]) / 2;\n    } else {\n       \
    \ return $arr[($n - 1) / 2];\n    }\n}", "\t$l = array_values($l);\n\t$l = sortArray($l);\n\
    \treturn $l[count($l) / 2];\n}\n", "\t$l = sort($l);\n\t$half = floor(count($l)\
    \ / 2);\n\treturn count($l) % 2 ? $l[$half] : ($l[$half - 1] + $l[$half]) / 2;\n\
    }\n", "    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n      \
    \  return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[($len - 1) / 2];\n    }\n}", "\t$c = count($l);\n\t$m = floor($c / 2);\n\t\
    if ($c % 2 == 0) {\n\t\treturn ($l[$m] + $l[$m - 1]) / 2;\n\t} else {\n\t\treturn\
    \ $l[$m];\n\t}\n}\n", "    $len = count($l);\n    if ($len < 1) {\n        return\
    \ null;\n    }\n    elseif ($len < 2) {\n        return $l[0];\n    }\n    else\
    \ {\n        sort($l);\n        if (($len % 2) == 0) {\n            return (($l[($len\
    \ / 2) - 1] + $l[$len / 2]) / 2);\n        }\n        else {\n            return\
    \ $l[(int)($len / 2)];\n        }\n    }\n}\n", "    sort($l);\n    $half = intval(count($l)\
    \ / 2);\n    return (count($l) % 2) ? $l[$half] : ($l[$half - 1] + $l[$half])\
    \ / 2;\n}\n", "  $n = count($l);\n  $tmp = $l;\n  sort($tmp);\n  if ($n % 2 ==\
    \ 0) {\n    $m = ($tmp[$n / 2] + $tmp[$n / 2 - 1]) / 2;\n  } else {\n    $m =\
    \ $tmp[$n / 2];\n  }\n  return $m;\n}\n", "  $l = bubble_sort($l);\n  $i = floor(count($l)\
    \ / 2);\n  if (count($l) % 2 == 0) {\n    return ($l[$i] + $l[$i - 1]) / 2;\n\
    \  } else {\n    return $l[$i];\n  }\n}\n", "  $count = count($l);\n  sort($l);\n\
    \  $m = $count/2;\n  if($count%2 == 0) {\n    $m1 = $l[$m-1];\n    $m2 = $l[$m];\n\
    \    return ($m1+$m2)/2;\n  } else {\n    return $l[$m];\n  }\n}\n", "    $ll\
    \ = sort($l);\n    $n = count($ll);\n    if ($n % 2 == 0) {\n        return ($ll[$n\
    \ / 2] + $ll[$n / 2 - 1]) / 2;\n    } else {\n        return $ll[($n - 1) / 2];\n\
    \    }\n}\n", "    $c = count($l);\n    sort($l);\n    $m = $c/2;\n    if($c%2\
    \ == 0) {\n        return ($l[$m-1] + $l[$m])/2;\n    } else {\n        return\
    \ $l[$m];\n    }\n}\n", "    $n = count($l);\n    $l = $l + $l;\n    $l = mergeSort($l);\n\
    \    $median = $l[$n / 2];\n    if ($n % 2 == 0)\n        $median += $l[$n / 2\
    \ - 1];\n    return $median / 2;\n}\n", "    $l = array_values($l);\n    $n =\
    \ count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2 - 1] + $l[$n /\
    \ 2]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n}", "    sort($l);\n\
    \    $i = count($l);\n    $median = ($i % 2 != 0) ? $l[$i / 2] :\n        ($l[$i\
    \ / 2] + $l[$i / 2 - 1]) / 2;\n    return $median;\n}", "  $n = count($l);\n \
    \ sort($l);\n  if ($n % 2 == 0) {\n    $a = $l[floor($n / 2)];\n    $b = $l[floor($n\
    \ / 2) - 1];\n    return ($a + $b) / 2;\n  } else {\n    return $l[floor($n /\
    \ 2)];\n  }\n}\n", "    if (!is_array($l))\n        return NULL;\n    if (count($l)\
    \ == 0)\n        return NULL;\n    if (count($l) == 1)\n        return $l[0];\n\
    \    $c = count($l);\n    sort($l);\n    if ($c % 2 == 0)\n        return ($l[$c\
    \ / 2] + $l[$c / 2 - 1]) / 2;\n    else\n        return $l[($c - 1) / 2];\n}\n\
    \n$l = array(3, 1, 2, 4, 5);\necho 'Median of array(3, 1, 2, 4, 5) is ' . median($l)\
    \ . \"\\n\";\n$l = array(-10, 4, 6, 1000, 10, 20);\necho 'Median of array(-10,\
    \ 4, 6, 1000, 10, 20) is ' . median($l) . \"\\n\";\n", "\tsort($l);\n\t$l = array_values($l);\n\
    \t$n = count($l);\n\tif($n == 0) return 0;\n\tif($n % 2 == 0) {\n\t\treturn ($l[$n/2]\
    \ + $l[$n/2-1]) / 2;\n\t} else {\n\t\treturn $l[$n/2];\n\t}\n}\n", "    sort($l);\n\
    \    $n = count($l);\n    if ($n == 0) return 0;\n    if ($n % 2 == 0) {\n   \
    \     return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[$n / 2];\n    }\n}\n", "\tsort($l);\n\t$mid = count($l) / 2;\n\tif (count($l)\
    \ % 2) {\n\t\treturn $l[$mid];\n\t} else {\n\t\treturn ($l[$mid] + $l[$mid - 1])\
    \ / 2;\n\t}\n}\n", "\t$count = count($l);\n\tif ($count == 0) {\n\t\tthrow new\
    \ Exception(\"Input array is empty\");\n\t}\n\tif ($count % 2 == 0) {\n\t\treturn\
    \ ($l[$count / 2] + $l[$count / 2 - 1]) / 2;\n\t} else {\n\t\treturn $l[$count\
    \ / 2];\n\t}\n}\n", "\t$median = 0;\n\t$count = count($l);\n\tif($count % 2 ==\
    \ 0) {\n\t\t$median = ($l[$count/2] + $l[$count/2-1]) / 2;\n\t} else {\n\t\t$median\
    \ = $l[ceil($count/2)];\n\t}\n\treturn $median;\n}\n", "    $n = count($l);\n\
    \    $m = floor($n / 2);\n    if ($n % 2 == 0) {\n        return ($l[$m] + $l[$m\
    \ - 1]) / 2;\n    } else {\n        return $l[$m];\n    }\n}", "    // Sort the\
    \ elements.\n    sort($l);\n    // Get the middle element.\n    if (count($l)\
    \ % 2 == 0) {\n        $m = count($l) / 2;\n        return ($l[$m] + $l[$m - 1])\
    \ / 2;\n    } else {\n        return $l[(count($l) - 1) / 2];\n    }\n}\n", "\t\
    rsort($l);\n\t$mid = floor(count($l) / 2);\n\tif (count($l) % 2 == 0) {\n\t\t\
    return ($l[$mid - 1] + $l[$mid]) / 2;\n\t} else {\n\t\treturn $l[$mid];\n\t}\n\
    }", "\t$s = sort($l);\n\t$n = count($l);\n\t$m = floor($n / 2);\n\tif ($n % 2)\
    \ {\n\t\treturn $l[$m];\n\t} else {\n\t\treturn ($l[$m - 1] + $l[$m]) / 2;\n\t\
    }\n}\n", "    $v = $l;\n    sort($v);\n    $c = count($v);\n    if ($c % 2 ==\
    \ 0) {\n        return ($v[$c / 2] + $v[$c / 2 - 1]) / 2;\n    } else {\n    \
    \    return $v[$c / 2];\n    }\n}\n", "\tif (sizeof($l) == 0) {\n\t\treturn -1;\n\
    \t}\n\t// Sort the elements of the array.\n\tasort($l);\n\t$n = sizeof($l);\n\t\
    if (floor($n/2) == ($n/2)) {\n\t\t// Array has even number of elements.\n\t\t\
    return (float)($l[$n/2] + $l[$n/2-1])/2;\n\t} else {\n\t\t// Array has odd number\
    \ of elements.\n\t\treturn $l[$n/2];\n\t}\n}\n", "    $n = count($l);\n    $s\
    \ = $n % 2 ? $l[floor($n / 2)] : ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    return\
    \ $s;\n}\n\n$a = array(1, 2, 3, 4, 5);\n$m = median($a);\n$a = array(-1, -2, -3,\
    \ -4, -5);\n$m = median($a);\n", "  $l = sort($l);\n  $n = count($l);\n  if ($n\
    \ % 2 == 0) {\n    return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n  } else {\n   \
    \ return $l[$n / 2];\n  }\n}", "    sort($l);\n    $n = count($l);\n    if($n\
    \ % 2) {\n        return $l[($n - 1) / 2];\n    } else {\n        return ($l[$n\
    \ / 2] + $l[$n / 2 - 1]) / 2;\n    }\n}\n", "  $e = count($l);\n  if ($e == 0)\
    \ {\n    return;\n  }\n  $f = intval($e / 2);\n  sort($l);\n  if ($e % 2 == 0)\
    \ {\n    return ($l[$f - 1] + $l[$f]) / 2;\n  } else {\n    return $l[$f];\n \
    \ }\n}\n", "    if (count($l) === 0) {\n        return null;\n    }\n    $n =\
    \ count($l);\n    $s = sort($l);\n    if ($n % 2 === 0) {\n        $i = $n / 2;\n\
    \        return ($l[$i] + $l[$i - 1]) / 2;\n    } else {\n        $i = intval($n\
    \ / 2);\n        return $l[$i];\n    }\n}\n", "    sort($l);\n    if (count($l)\
    \ % 2 == 0) {\n        return ($l[count($l) / 2] + $l[count($l) / 2 - 1]) / 2;\n\
    \    } else {\n        return $l[(count($l) - 1) / 2];\n    }\n}\n\n$test_median\
    \ = function ($f, $n) {\n    for ($i = 0; $i < $n; $i++) {\n        $list = range(1,\
    \ rand(2, 1000));\n        shuffle($list);\n        $expected = median($list);\n\
    \        $actual = $f($list);\n        if ($expected != $actual) {\n         \
    \   echo 'Error: ' . implode(', ', $list) . ': ';\n            echo 'expected\
    \ ' . $expected . ', got ' . $actual . PHP_EOL;\n            return false;\n \
    \       }\n    }\n    return true;\n};\n\n$test_median(function ($l) {\n    $s\
    \ = (int) count($l) / 2;\n    $e = $s + 1;\n    $p = $s + ($e - $s) / 2;\n   \
    \ $q = $s - ($e - $s) / 2;\n    return $p > $q ? ($l[$p] + $l[$q]) / 2 : $l[$p];\n\
    }, 1000);\n", "    $size = count($l);\n    if ($size % 2 == 0) {\n        return\
    \ ($l[$size / 2] + $l[$size / 2 - 1]) / 2;\n    } else {\n        return $l[($size\
    \ - 1) / 2];\n    }\n}\n", "\tsort($l);\n\t$c = count($l);\n\tif ($c % 2 == 0)\
    \ {\n\t\treturn ($l[$c / 2] + $l[$c / 2 - 1]) / 2;\n\t} else {\n\t\treturn $l[$c\
    \ / 2];\n\t}\n}\n", "    $list_copy = $l;\n    sort($list_copy);\n    $len = count($list_copy);\n\
    \    $middle = $len / 2;\n    if ($len % 2 == 0) {\n        return ($list_copy[$middle\
    \ - 1] + $list_copy[$middle]) / 2;\n    } else {\n        return $list_copy[$middle];\n\
    \    }\n}\n", "  $x = $l;\n  sort($x);\n  $mid = count($x) / 2;\n  if (count($x)\
    \ % 2 == 0) {\n    return ($x[$mid - 1] + $x[$mid]) / 2;\n  } else {\n    return\
    \ $x[$mid];\n  }\n}\n", "    $n = count($l);\n    sort($l);\n    if ($n % 2 ==\
    \ 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n    \
    \    return $l[($n - 1) / 2];\n    }\n}", "    // Return median of elements in\
    \ the array l.\n    // >>> median(array(3, 1, 2, 4, 5))\n    // 3\n    // >>>\
    \ median(array(-10, 4, 6, 1000, 10, 20))\n    // 15.0\n    $n = count($l);\n \
    \   if ($n == 0) {\n        throw new \\Exception('median() arg is an empty sequence');\n\
    \    }\n    $s = sort($l);\n    $mid = $n // 2;\n    if ($n % 2 == 1) {\n    \
    \    return $l[$mid];\n    } else {\n        return ($l[$mid - 1] + $l[$mid])\
    \ / 2;\n    }\n}\n", "    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0)\
    \ {\n        $m = ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        $m\
    \ = $l[$n / 2];\n    }\n    return $m;\n}\n", "    // *** YOUR CODE HERE ***\n\
    \    sort($l);\n    if (count($l) % 2 == 0) {\n        return $l[count($l) / 2]\
    \ + $l[count($l) / 2 - 1] / 2;\n    } else {\n        return $l[count($l) / 2];\n\
    \    }\n}\n", "\t$n = count($l);\n\t$s = sort($l);\n\tif ($n % 2 == 0) {\n\t\t\
    return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n\t} else {\n\t\treturn $l[$n / 2];\n\
    \t}\n}\n", "    $x = $l;\n    sort($x);\n    $n = count($x);\n    if ($n % 2 ==\
    \ 0) {\n        return ($x[$n / 2] + $x[$n / 2 - 1]) / 2;\n    } else {\n    \
    \    return $x[$n / 2];\n    }\n}", "  sort($l);\n  $a = floor(count($l) / 2);\n\
    \  if (count($l) % 2 == 0) {\n    return ($l[$a - 1] + $l[$a]) / 2;\n  } else\
    \ {\n    return $l[$a];\n  }\n}\n", "    sort($l);\n    $len = count($l);\n  \
    \  $median = 0;\n    if ($len % 2 == 0) {\n        $median = ($l[$len / 2] + $l[$len\
    \ / 2 - 1]) / 2;\n    } else {\n        $median = $l[($len - 1) / 2];\n    }\n\
    \    return $median;\n}\n", "    sort($l);\n    if (count($l) % 2 == 0) {\n  \
    \      return ($l[count($l) / 2] + $l[count($l) / 2 - 1]) / 2;\n    } else {\n\
    \        return $l[floor(count($l) / 2)];\n    }\n}\n", "    $n = count($l);\n\
    \    if ($n == 0) {\n        return false;\n    } else if ($n % 2 == 0) {\n  \
    \      return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[floor($n / 2)];\n    }\n}", "    sort($l);\n    if (count($l) % 2) { // number\
    \ of elements is odd\n        return $l[count($l) / 2];\n    } else {\n      \
    \  return ($l[count($l) / 2] + $l[count($l) / 2 - 1]) / 2;\n    }\n}", "    sort($l);\n\
    \    $n = count($l);\n    if ($n == 0) {\n        throw new Exception(\"Can't\
    \ get the median of an empty list\");\n    }\n    $m = (int) ($n / 2);\n    if\
    \ ($n % 2 == 0) {\n        return ($l[$m - 1] + $l[$m]) / 2;\n    } else {\n \
    \       return $l[$m];\n    }\n}\n", "    $n = count($l);\n    $m = ($n - 1) /\
    \ 2;\n    if ($n % 2) {\n        // Odd\n        return kth_smallest($l, $m);\n\
    \    } else {\n        // Even\n        return (kth_smallest($l, $m) + kth_smallest($l,\
    \ $m + 1)) / 2;\n    }\n}\n", "  $count = count($l);\n  if ($count === 0) {\n\
    \    return null;\n  }\n  sort($l);\n  if ($count % 2 === 0) {\n    return ($l[$count\
    \ / 2] + $l[$count / 2 - 1]) / 2;\n  } else {\n    return $l[floor($count / 2)];\n\
    \  }\n}\n", "    $len = count($l);\n    if ($len == 0) {\n        throw new Exception(\"\
    Empty array.\");\n    }\n    // Sort the array.\n    sort($l);\n    // If the\
    \ length is odd, return the middle element.\n    if ($len % 2) {\n        return\
    \ $l[floor($len / 2)];\n    }\n    // If the length is even, return the average\
    \ of the two middle elements.\n    return ($l[$len / 2] + $l[$len / 2 - 1]) /\
    \ 2;\n}\n", "    sort($l);\n    $middle = floor(count($l) / 2);\n    if (count($l)\
    \ % 2) {\n        return $l[$middle];\n    } else {\n        return ($l[$middle]\
    \ + $l[$middle - 1]) / 2;\n    }\n}\n\n$tests = array(\n    array(3, 1, 2, 4,\
    \ 5),\n    array(-10, 4, 6, 1000, 10, 20),\n);\nforeach ($tests as $test) {\n\
    \    printf(\"Test: %s => %s\\n\", implode(', ', $test), median($test));\n}",
  "  sort($l);\n  if ((count($l) % 2) == 0) {\n    return ($l[count($l) / 2] + $l[(count($l)\
    \ / 2) - 1]) / 2;\n  } else {\n    return $l[floor(count($l) / 2)];\n  }\n}",
  "    sort($l);\n    if (count($l) % 2) {\n        $l = array_slice($l, 0, (count($l)\
    \ / 2) + 1);\n        return median($l);\n    } else {\n        $lower = (count($l)\
    \ / 2) - 1;\n        $upper = $lower + 1;\n        return ($l[$lower] + $l[$upper])\
    \ / 2;\n    }\n}\n", "    if(count($l) == 0) {\n        return 0;\n    }\n   \
    \ sort($l);\n    $middle = (int)(count($l) / 2);\n    if(count($l) % 2 == 0) {\n\
    \        $middle -= 1;\n    }\n    return $l[$middle];\n}\n", "    $count = count($l);\n\
    \    sort($l);\n    if ($count % 2 == 0) {\n        $a = floor($count / 2);\n\
    \        $b = ceil($count / 2);\n        return ($l[$a - 1] + $l[$b - 1]) / 2;\n\
    \    } else {\n        return $l[floor($count / 2)];\n    }\n}\n", "    if (count($l)\
    \ % 2 == 0) {\n        return ($l[(count($l) / 2) - 1] + $l[count($l) / 2]) /\
    \ 2;\n    } else {\n        return $l[(count($l) - 1) / 2];\n    }\n}", "    $n\
    \ = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2\
    \ - 1]) / 2;\n    } else {\n        return $l[($n - 1) / 2];\n    }\n}\n", " \
    \   sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n\
    \ / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n\
    }\n", "  $n = count($l);\n  $m = ($n + 1) / 2;\n  if (is_int($m)) {\n    // even\
    \ number of elements\n    return ($l[$m - 1] + $l[$m]) / 2;\n  } else {\n    //\
    \ odd number of elements\n    return $l[floor($m) - 1];\n  }\n}\n", "    $ln =\
    \ count($l);\n    $l = asort($l);\n    return ($ln % 2) ? $l[floor($ln / 2)] :\
    \ ($l[floor($ln / 2)] + $l[floor($ln / 2 - 1)]) / 2;\n}\n", "    // Sort the array\
    \ first.\n    sort($l);\n    $len = count($l);\n    // If odd, the median is the\
    \ middle element.\n    if ($len % 2 == 1) {\n        return $l[($len - 1) / 2];\n\
    \    }\n    // If even, the median is the average of the two middle elements.\n\
    \    return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n}\n", "    $m = count($l);\n\
    \    $n = $m / 2;\n    if ($m % 2 == 0) {\n        return ($l[$n] + $l[$n - 1])\
    \ / 2;\n    } else {\n        return $l[$n];\n    }\n}\n", "    $values = $l;\n\
    \    sort($values);\n    $n = count($values);\n    $h = intval($n / 2);\n    if($n\
    \ % 2 == 0) {\n        $median = ($values[$h] + $values[$h-1]) / 2;\n    } else\
    \ {\n        $median = $values[$h];\n    }\n    return $median;\n}\n", "    $c\
    \ = count($l);\n    if ($c == 0) return NULL;\n    $l = array_values($l);\n  \
    \  sort($l);\n    if ($c % 2 == 0)\n        return ($l[($c / 2) - 1] + $l[$c /\
    \ 2]) / 2;\n    else\n        return $l[$c / 2];\n}\n", "\tsort($l);\n\t$half\
    \ = count($l) / 2;\n\treturn (count($l) % 2) ? $l[$half] : ($l[$half - 1] + $l[$half])\
    \ / 2;\n}\n", "  sort($l); // sort elements from low to high\n  $c = count($l);\
    \ // count number of elements\n  $m = $c/2; // find middle\n  if ($c % 2 == 0)\
    \ { // is even\n    $m = ($l[floor($m)-1] + $l[floor($m)])/2;\n  } else { // is\
    \ odd\n    $m = $l[floor($m)];\n  }\n  return $m;\n}\n", "    $count = count($l);\n\
    \    $mid = floor($count / 2);\n    sort($l);\n    if ($count % 2 === 0) {\n \
    \       return ($l[$mid] + $l[$mid - 1]) / 2;\n    } else {\n        return $l[$mid];\n\
    \    }\n}", "  sort($l);\n  $i = (int)(count($l) / 2);\n  if (count($l) % 2 ==\
    \ 0) {\n    $x = $l[$i - 1];\n    $y = $l[$i];\n    return ($x + $y) / 2;\n  }\
    \ else {\n    return $l[$i];\n  }\n}\n", "\tsort($l);\n\t$len = count($l);\n\t\
    $s = floor($len / 2);\n\tif ($len % 2 == 0) {\n\t\treturn ($l[$s - 1] + $l[$s])\
    \ / 2;\n\t} else {\n\t\treturn $l[$s];\n\t}\n}\n", "  sort($l);\n  if (count($l)\
    \ % 2 == 0) {\n    return ($l[count($l) / 2] + $l[count($l) / 2 - 1]) / 2;\n \
    \ } else {\n    return $l[(count($l) - 1) / 2];\n  }\n}\n", "\t$l = sort($l);\n\
    \t$n = count($l);\n\tif ($n % 2 == 0) {\n\t\t$m = ( $l[$n / 2] + $l[$n / 2 - 1]\
    \ ) / 2;\n\t} else {\n\t\t$m = $l[(int) ($n / 2)];\n\t}\n\treturn $m;\n}\n", " \
    \ $n = count($l);\n  if ($n == 0) return null;\n  sort($l);\n  $m = $n / 2;\n\
    \  if (is_int($m)) return $l[$m];\n  return ($l[$m - 0.5] + $l[$m + 0.5]) / 2;\n\
    }\n", "\tsort($l);\n\t$n = count($l);\n\treturn ($n % 2) ? $l[$n / 2] : ($l[$n\
    \ / 2 - 1] + $l[$n / 2]) / 2;\n}\n", "    if (count($l) % 2 == 0) {\n        $v1\
    \ = $l[count($l) / 2 - 1];\n        $v2 = $l[count($l) / 2];\n        return ($v1\
    \ + $v2) / 2;\n    } else {\n        return $l[count($l) / 2];\n    }\n}\n", " \
    \   $n = count($l);\n    if ($n == 0) {\n        return null;\n    }\n    sort($l);\n\
    \    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n \
    \   } else {\n        return $l[$n / 2];\n    }\n}\n", "    sort($l);\n    $n\
    \ = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2\
    \ - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n}\n", "  $l = merge_sort($l);\n\
    \  $size = count($l);\n  if ($size % 2 == 0) {\n    return ($l[$size / 2] + $l[$size\
    \ / 2 - 1]) / 2;\n  } else {\n    return $l[$size / 2];\n  }\n}\n", "    sort($l);\n\
    \    if (count($l) % 2 == 0) {\n        $m = (count($l) / 2) - 1;\n        return\
    \ ($l[$m] + $l[$m + 1]) / 2;\n    } else {\n        return $l[count($l) / 2];\n\
    \    }\n}\n", "    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n  \
    \      return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[($n - 1) / 2];\n    }\n}\n", "  $n = count($l);\n  if ($n == 0) return false;\n\
    \  sort($l);\n  $m = $n / 2;\n  return $n % 2 ? $l[$m] : ($l[$m-1] + $l[$m]) /\
    \ 2;\n}\n", "    sort($l);\n    $length = count($l);\n    if ($length == 0) return\
    \ \"No data\";\n    if ($length % 2 == 0) {\n        return ($l[$length / 2] +\
    \ $l[$length / 2 - 1]) / 2;\n    } else {\n        return $l[($length - 1) / 2];\n\
    \    }\n}\n", "    sort($l);\n    $count = count($l);\n    $mid = floor($count\
    \ / 2);\n    if ($count % 2 == 0) {\n        return ($l[$mid] + $l[$mid-1]) /\
    \ 2;\n    } else {\n        return $l[$mid];\n    }\n}\n", "\tsort($l);\n\t$c\
    \ = count($l);\n\tif ($c%2 == 0) {\n\t\t$mid = $c/2;\n\t\treturn ($l[$mid] + $l[$mid\
    \ - 1])/2;\n\t} else {\n\t\t$mid = (int)($c/2);\n\t\treturn $l[$mid];\n\t}\n}\n",
  "\tsort($l);\n\treturn (count($l) % 2 ? $l[count($l) / 2] :\n\t\t($l[count($l) /\
    \ 2] + $l[count($l) / 2 - 1]) / 2);\n}\n", "    sort($l);\n    $len = count($l);\n\
    \    if ($len == 0) {\n        return 0;\n    }\n    $median = $l[$len / 2];\n\
    \    if ($len % 2 == 0) {\n        $median = ($median + $l[$len / 2 - 1]) / 2;\n\
    \    }\n    return $median;\n}\n", "\t$n = count($l);\n\t$m = floor($n / 2);\n\
    \tif ($n % 2 == 0) {\n\t\t$median = ($l[$m] + $l[$m-1]) / 2;\n\t} else {\n\t\t\
    $median = $l[$m];\n\t}\n\treturn $median;\n}\n", "  $d = count($l);\n  $m = floor($d\
    \ / 2);\n  if (0 == $d % 2) {\n    return ($l[$m - 1] + $l[$m]) / 2;\n  } else\
    \ {\n    return $l[$m];\n  }\n}\n", "  $m = count($l) / 2;\n  sort($l);\n  if\
    \ (count($l) % 2 == 0) {\n    return ($l[$m - 1] + $l[$m]) / 2;\n  } else {\n\
    \    return $l[$m];\n  }\n}\n", "    $count = count($l);\n    if ($count % 2 ==\
    \ 0) {\n        $middle = floor($count / 2);\n        return ($l[$middle - 1]\
    \ + $l[$middle]) / 2;\n    } else {\n        return $l[floor($count / 2)];\n \
    \   }\n}", "  // Count the size of array $l.\n  $size = count($l);\n  // Sort\
    \ the array $l.\n  sort($l);\n  // Return the median if array $l has an odd number\
    \ of elements.\n  if($size%2 != 0) {\n    return $l[$size/2];\n  }\n  // Calculate\
    \ the median if array $l has an even number of elements.\n  else {\n    return\
    \ ($l[$size/2] + $l[$size/2 - 1])/2;\n  }\n}\n", "  sort($l);\n  $s = count($l);\n\
    \  $p = $s / 2;\n  if ($s % 2 == 0) {\n    return ($l[$p] + $l[$p - 1]) / 2;\n\
    \  } else {\n    return $l[$p];\n  }\n}\n", "    $size = count($l);\n    if($size\
    \ % 2 == 0) {\n        return ($l[floor($size / 2)] + $l[floor($size / 2) - 1])\
    \ / 2;\n    } else {\n        return $l[floor($size / 2)];\n    }\n}\n", "   \
    \ $n = count($l);\n    $m = $n / 2;\n    if ($n % 2 == 0) {\n        return ($l[floor($m)]\
    \ + $l[ceil($m)]) / 2;\n    } else {\n        return $l[$m];\n    }\n}\n", " \
    \ // return l;\n  sort($l);\n  $mid_index = count($l) / 2;\n  $mid_index = floor($mid_index);\n\
    \  if (count($l) % 2 == 0) {\n    return ($l[$mid_index] + $l[$mid_index + 1])\
    \ / 2;\n  } else {\n    return $l[$mid_index];\n  }\n}\n", "\t$r = array();\n\t\
    $n = count($l);\n\tfor ($i = 0; $i < $n; $i++) {\n\t\tfor ($j = $i + 1; $j < $n;\
    \ $j++) {\n\t\t\tif ($l[$i] > $l[$j]) {\n\t\t\t\t$t = $l[$i];\n\t\t\t\t$l[$i]\
    \ = $l[$j];\n\t\t\t\t$l[$j] = $t;\n\t\t\t}\n\t\t}\n\t}\n\t$n = count($l);\n\t\
    if ($n % 2 == 0) {\n\t\t$m = ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n\t} else {\n\t\
    \t$m = $l[floor($n / 2)];\n\t}\n\treturn $m;\n}", "    if (!count($l)) {\n   \
    \     return null;\n    }\n    sort($l);\n    $c = count($l);\n    if (($c % 2)\
    \ == 0) {\n        return ($l[$c / 2] + $l[($c / 2) - 1]) / 2;\n    } else {\n\
    \        return $l[($c - 1) / 2];\n    }\n}", "    sort($l);\n    $n = count($l);\n\
    \    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n \
    \   } else {\n        return $l[$n / 2];\n    }\n}", "    sort($l);\n    $length\
    \ = count($l);\n    if ($length % 2 == 0) {\n        return ($l[$length / 2] +\
    \ $l[$length / 2 - 1]) / 2;\n    } else {\n        return $l[$length / 2];\n \
    \   }\n}\n", "    $m = count($l);\n    if ($m === 0) {\n        return null;\n\
    \    }\n    sort($l);\n    $p = intval($m / 2);\n    if ($m % 2 === 0) {\n   \
    \     return floatval(($l[$p - 1] + $l[$p]) / 2);\n    } else {\n        return\
    \ floatval($l[$p]);\n    }\n}", "  $l = merge_sort($l);\n  $c = count($l);\n \
    \ if ($c % 2 == 0) {\n    return ($l[$c / 2] + $l[$c / 2 - 1]) / 2;\n  } else\
    \ {\n    return $l[$c / 2];\n  }\n}\n", "    sort($l);\n    $len = count($l);\n\
    \    $i = $len / 2;\n    if ($len % 2 == 0) {\n        return ($l[$i - 1] + $l[$i])\
    \ / 2;\n    } else {\n        return $l[$i];\n    }\n}\n", "    $l = sort($l);\n\
    \    $len = count($l);\n    if ($len % 2) {\n        return $l[floor($len / 2)];\n\
    \    } else {\n        return ($l[floor($len / 2)] + $l[floor($len / 2 - 1)])\
    \ / 2;\n    }\n}\n", "  return array_reduce($l, function($a, $b) {\n    return\
    \ $a + $b;\n  }) / count($l);\n}\n", "    sort($l);\n    $len = count($l);\n \
    \   if ($len % 2 == 0) {\n        return ($l[intval($len / 2) - 1] + $l[intval($len\
    \ / 2)]) / 2;\n    } else {\n        return $l[intval($len / 2)];\n    }\n}",
  "\t$a = $l;\n\tsort($a);\n\t$n = count($a);\n\tif ($n%2==0) {\n\t\treturn ($a[intval($n/2)]\
    \ + $a[intval($n/2)-1])/2;\n\t} else {\n\t\treturn $a[intval($n/2)];\n\t}\n}\n",
  "    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n        $m = ($l[$n\
    \ / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        $m = $l[($n - 1) / 2];\n\
    \    }\n    return $m;\n}", "\tsort($l);\n\t$n = count($l);\n\t$m = $n / 2;\n\t\
    return ($n % 2 == 0) ? ($l[$m - 1] + $l[$m]) / 2 : $l[$m];\n}", "    sort($l);\n\
    \    $len = count($l);\n    if ($len % 2 == 0) {\n        $median = ($l[intval($len\
    \ / 2)] + $l[intval($len / 2) - 1]) / 2;\n    } else {\n        $median = $l[intval($len\
    \ / 2)];\n    }\n    return $median;\n}\n", "    sort($l);\n    $n = count($l);\n\
    \    if ($n % 2 == 0) {\n        return $l[$n / 2] + $l[$n / 2 - 1] / 2;\n   \
    \ } else {\n        return $l[($n - 1) / 2];\n    }\n}", "\tsort($l);\n\t$l_count\
    \ = count($l);\n\tif($l_count == 0) return 0;\n\tif($l_count % 2) return $l[(int)($l_count\
    \ / 2)];\n\treturn (($l[$l_count / 2] + $l[$l_count / 2 - 1]) / 2);\n}\n", " \
    \   $s = sort($l);\n    $n = count($l);\n    $f = intval($n / 2);\n    if ($n\
    \ % 2 == 0) {\n        return ($l[$f - 1] + $l[$f]) / 2;\n    } else {\n     \
    \   return $l[$f];\n    }\n}\n", "\tsort($l);\n\t$len = count($l);\n\tif ($len\
    \ % 2 == 0) {\n\t\t$i = $len / 2;\n\t\treturn ($l[$i] + $l[$i - 1]) / 2;\n\t}\
    \ else {\n\t\t$i = ($len - 1) / 2;\n\t\treturn $l[$i];\n\t}\n}\n", "    // Sort\
    \ array.\n    sort($l);\n    $n = count($l);\n    // Find median.\n    if (($n\
    \ % 2) == 0) {\n        $median = ($l[$n / 2] + $l[($n / 2) - 1]) / 2;\n    }\
    \ else {\n        $median = $l[$n / 2];\n    }\n    return $median;\n}\n", " \
    \   // Sort input list in numerical order\n    sort($l, SORT_NUMERIC);\n    $n\
    \ = count($l);\n    if ($n % 2) { // if number of elements is odd\n        return\
    \ $l[$n / 2];\n    } else { // if number of elements is even\n        return ($l[$n\
    \ / 2 - 1] + $l[$n / 2]) / 2;\n    }\n}\n", "    $s = sizeof($l);\n    if ($s\
    \ % 2 == 0) {\n        return (float)($l[($s - 1) / 2] + $l[$s / 2]) / 2;\n  \
    \  } else {\n        return $l[(int)($s / 2)];\n    }\n}\n", "  $n = count($l);\n\
    \  if ($n == 0) {\n    return 0;\n  }\n  sort($l);\n  $m = intval($n / 2);\n \
    \ if ($n % 2 == 0) {\n    return ($l[$m - 1] + $l[$m]) / 2;\n  } else {\n    return\
    \ $l[$m];\n  }\n}\n", "    $ll = sort($l);\n    $n = count($ll);\n    if($n%2\
    \ == 0) {\n        $m = ($ll[$n/2] + $ll[$n/2 - 1]) / 2;\n    } else {\n     \
    \   $m = $ll[$n/2];\n    }\n    return $m;\n}\n", "    $m = count($l) / 2;\n \
    \   $s = sort($l);\n    if ($m % 2 == 0) {\n        return ($l[$m] + $l[$m - 1])\
    \ / 2;\n    } else {\n        return $l[$m];\n    }\n}\n", "  sort($l); // $l\
    \ is sorted in place by reference.\n  $n = count($l);\n  if ($n % 2 == 0) {\n\
    \    // There are even number of elements in the array.\n    $i = $n / 2;\n  \
    \  return ($l[$i - 1] + $l[$i]) / 2;\n  } else {\n    // There are odd number\
    \ of elements in the array.\n    $i = ($n - 1) / 2;\n    return $l[$i];\n  }\n\
    }\n", "\tsort($l);\n\t$m = count($l) / 2;\n\t$v = $l[$m];\n\tif (count($l) % 2\
    \ == 0) {\n\t\t$v = ($v + $l[$m-1]) / 2;\n\t}\n\treturn $v;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
