name: HumanEval_153_Strongest_Extension
language: php
prompt: "<?php\n// You will be given the name of a class (a string) and an array of\
  \ extensions.\n// The extensions are to be used to load additional classes to the\
  \ class. The\n// strength of the extension is as follows: Let CAP be the number\
  \ of the uppercase\n// letters in the extension's name, and let SM be the number\
  \ of lowercase letters \n// in the extension's name, the strength is given by the\
  \ fraction CAP - SM. \n// You should find the strongest extension and return a string\
  \ in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or\
  \ more extensions with the same strength, you should\n// choose the one that comes\
  \ first in the array.\n// For example, if you are given \"Slices\" as the class\
  \ and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then\
  \ you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest\
  \ extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
  my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name,\
  \ $extensions) {\n"
tests: "function candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\"\
  , \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
  , \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"\
  zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\"\
  , \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\"\
  )) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
  YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !==\
  \ \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
  finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\"\
  ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"\
  Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n   \
  \ if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new\
  \ Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    // ...\n    $array_length = count($extensions);\n    $strongest_extension\
    \ = '';\n    $strongest_extension_strength = 0;\n    $temp_strength = 0;\n   \
    \ for ($i = 0; $i < $array_length; $i++) {\n        $num_of_upper_case = 0;\n\
    \        $num_of_lower_case = 0;\n        $extension_length = strlen($extensions[$i]);\n\
    \        for ($j = 0; $j < $extension_length; $j++) {\n            if (ctype_upper($extensions[$i][$j]))\
    \ {\n                $num_of_upper_case++;\n            } else {\n           \
    \     $num_of_lower_case++;\n            }\n        }\n        $temp_strength\
    \ = $num_of_upper_case - $num_of_lower_case;\n        if ($temp_strength > $strongest_extension_strength)\
    \ {\n            $strongest_extension_strength = $temp_strength;\n           \
    \ $strongest_extension = $extensions[$i];\n        }\n    }\n    return $class_name\
    \ . '.' . $strongest_extension;\n}\n\nprint_r(Strongest_Extension(\"my_class\"\
    , array(\"AA\", \"Be\", \"CC\")));", "  $strongest_extension = \"\";\n  $best_strength\
    \ = 0;\n  foreach ($extensions as $extension) {\n    $CAP_count = preg_match_all(\"\
    /[A-Z]/\", $extension);\n    $SM_count = preg_match_all(\"/[a-z]/\", $extension);\n\
    \    $current_strength = $CAP_count - $SM_count;\n    if ($current_strength >\
    \ $best_strength) {\n      $best_strength = $current_strength;\n      $strongest_extension\
    \ = $extension;\n    }\n  }\n  return $class_name . \".\" . $strongest_extension;\n\
    }", "    $strongest_extension = \"\";\n    $max_strength = 0;\n    foreach ($extensions\
    \ as $extension) {\n        $strength = 0;\n        for ($i = 0; $i < strlen($extension);\
    \ $i++) {\n            if (ctype_upper($extension[$i])) {\n                $strength++;\n\
    \            } else if (ctype_lower($extension[$i])) {\n                $strength--;\n\
    \            }\n        }\n        if ($strength > $max_strength) {\n        \
    \    $max_strength = $strength;\n            $strongest_extension = $extension;\n\
    \        }\n    }\n    return $class_name . \".\" . $strongest_extension;\n}",
  "    $max_strength = 0;\n    $max_strength_index = -1;\n    foreach ($extensions\
    \ as $index => $extension) {\n        $strength = 0;\n        for ($i = 0; $i\
    \ < strlen($extension); $i++) {\n            if (ord($extension[$i]) >= ord('A')\
    \ && ord($extension[$i]) <= ord('Z')) {\n                $strength++;\n      \
    \      } else {\n                $strength--;\n            }\n        }\n    \
    \    if ($strength >= $max_strength) {\n            $max_strength = $strength;\n\
    \            $max_strength_index = $index;\n        }\n    }\n    return $class_name\
    \ . \".\" . $extensions[$max_strength_index];\n}\n", "\t$strongest = 0;\n\t$strongest_index\
    \ = 0;\n\tfor ($i = 0; $i < count($extensions); $i++) {\n\t\t$strength = calculate_strength($extensions[$i]);\n\
    \t\tif ($strength < $strongest) {\n\t\t\t$strongest = $strength;\n\t\t\t$strongest_index\
    \ = $i;\n\t\t}\n\t}\n\treturn $class_name . \".\" . $extensions[$strongest_index];\n\
    }\n", "  // Your code here\n  if(empty($extensions)){\n    return $class_name;\n\
    \  }\n  $class_name = ucfirst($class_name);\n  $number_of_extensions = count($extensions);\n\
    \  $extensions_strengths = array();\n  for($i = 0; $i < $number_of_extensions;\
    \ $i++){\n    $extensions_strengths[$i] = Calculate_Strength($extensions[$i]);\n\
    \  }\n  $max_index = array_search(max($extensions_strengths), $extensions_strengths);\n\
    \  return \"$class_name.$extensions[$max_index]\";\n}\n", "    $strongest_extension\
    \ = '';\n    $strongest_extension_strength = 0;\n    $class_extension = $class_name\
    \ . '.';\n    foreach ($extensions as $extension) {\n        $upper_case_count\
    \ = preg_match_all('/[A-Z]/', $extension);\n        $lower_case_count = preg_match_all('/[a-z]/',\
    \ $extension);\n        $extension_strength = $upper_case_count - $lower_case_count;\n\
    \        if ($extension_strength > $strongest_extension_strength) {\n        \
    \    $strongest_extension = $extension;\n            $strongest_extension_strength\
    \ = $extension_strength;\n        }\n    }\n    return $class_extension . $strongest_extension;\n\
    }", "\t$strongest_extension = '';\n\t$strongest_strength = -1000000;\n\tforeach\
    \ ($extensions as $extension) {\n\t\t$strength = Strength_Of_Extension($extension);\n\
    \t\tif ($strength > $strongest_strength) {\n\t\t\t$strongest_strength = $strength;\n\
    \t\t\t$strongest_extension = $extension;\n\t\t}\n\t}\n\treturn $class_name . '.'\
    \ . $strongest_extension;\n}", "\t$numExt = count($extensions);\n\t$count = 0;\n\
    \t$newArray = array();\n\t$tempArray = array();\n\t\n\tforeach($extensions as\
    \ $ext) {\n\t\t$upper = preg_match_all('/[A-Z]/', $ext, $Umatches);\n\t\t$lower\
    \ = preg_match_all('/[a-z]/', $ext, $Lmatches);\n\t\t$strength = $upper - $lower;\n\
    \t\t$newArray[$ext] = $strength;\n\t}\n\t\n\tasort($newArray);\n\t$keys = array_keys($newArray);\n\
    \t$first_key = $keys[0];\n\treturn($class_name.\".\".$first_key);\n}\n\n$class_name\
    \ = \"Slices\";\n$extensions = array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    );\necho Strongest_Extension($class_name, $extensions);", "  \n}\n", "    $max_strength\
    \ = -INF;\n    $max_strength_extension = '';\n    foreach ($extensions as $extension)\
    \ {\n        $uppercase_letters = preg_match_all('/[A-Z]/', $extension);\n   \
    \     $lowercase_letters = preg_match_all('/[a-z]/', $extension);\n        $strength\
    \ = $uppercase_letters - $lowercase_letters;\n        if ($strength > $max_strength)\
    \ {\n            $max_strength = $strength;\n            $max_strength_extension\
    \ = $extension;\n        }\n    }\n    return \"$class_name.$max_strength_extension\"\
    ;\n}", "  $ext_strength = array();\n  foreach ($extensions as $ext) {\n    $upper\
    \ = preg_match_all('/[A-Z]/', $ext, $result);\n    $lower = preg_match_all('/[a-z]/',\
    \ $ext, $result);\n    if ($upper > 0) {\n      $ext_strength[$ext] = $upper -\
    \ $lower;\n    }\n  }\n  if (count($ext_strength) > 0) {\n    $max_strength =\
    \ max($ext_strength);\n    $max_ext = array_search($max_strength, $ext_strength);\n\
    \    return $class_name . \".\" . $max_ext;\n  }\n  return \"no extension found\"\
    ;\n}\n", "    // Your code here\n}\n", "\t$strength = 0;\n\t$return_string = $class_name;\n\
    \tforeach ($extensions as $extension) {\n\t\t$cap = 0;\n\t\t$sm = 0;\n\t\tfor\
    \ ($i = 0; $i < strlen($extension); $i++) {\n\t\t\tif (ctype_upper($extension[$i]))\
    \ {\n\t\t\t\t$cap++;\n\t\t\t} else {\n\t\t\t\t$sm++;\n\t\t\t}\n\t\t}\n\t\t$current_strength\
    \ = $cap - $sm;\n\t\tif ($current_strength > $strength) {\n\t\t\t$strength = $current_strength;\n\
    \t\t\t$return_string = $class_name . \".\" . $extension;\n\t\t}\n\t}\n\treturn\
    \ $return_string;\n}\n", "  $strength = -1000;\n  $strongest = '';\n  foreach\
    \ ($extensions as $extension) {\n    $cap = 0;\n    $sm = 0;\n    $s = 0;\n  \
    \  for ($i = 0; $i < strlen($extension); $i++) {\n      if (ctype_upper($extension[$i]))\
    \ {\n        $cap++;\n      } else {\n        $sm++;\n      }\n    }\n    $s =\
    \ $cap - $sm;\n    if ($s > $strength) {\n      $strength = $s;\n      $strongest\
    \ = $extension;\n    }\n  }\n  return $class_name . '.' . $strongest;\n}", " \
    \   // Write your code here\n    // To print results to the standard output you\
    \ can use print\n    // Example:\n    // print \"Hello world!\";\n}", "  $best_class\
    \ = $class_name . \".\" . $extensions[0];\n  $best_strength = get_strength($extensions[0]);\n\
    \  foreach ($extensions as $extension) {\n    $strength = get_strength($extension);\n\
    \    if ($strength > $best_strength) {\n      $best_class = $class_name . \".\"\
    \ . $extension;\n      $best_strength = $strength;\n    }\n  }\n  return $best_class;\n\
    }\n", "    $best_strength = -1;\n    $best_extension = \"\";\n    foreach ($extensions\
    \ as $extension) {\n        $CAP = preg_match_all(\"/[A-Z]/\", $extension);\n\
    \        $SM = preg_match_all(\"/[a-z]/\", $extension);\n        $strength = $CAP\
    \ - $SM;\n        if ($strength > $best_strength) {\n            $best_strength\
    \ = $strength;\n            $best_extension = $extension;\n        }\n    }\n\
    \    return \"$class_name.$best_extension\";\n}\necho Strongest_Extension(\"my_class\"\
    , array(\"AA\", \"Be\", \"CC\"));", "    $ret = \"\";\n    $len = count($extensions);\n\
    \    if ($len == 0) {\n        return $class_name;\n    }\n    $max_strength =\
    \ 0;\n    $max_index = 0;\n    for ($i = 0; $i < $len; $i++) {\n        $tmp =\
    \ strength($extensions[$i]);\n        if ($tmp > $max_strength) {\n          \
    \  $max_strength = $tmp;\n            $max_index = $i;\n        }\n    }\n   \
    \ $ret = $class_name . \".\" . $extensions[$max_index];\n    return $ret;\n}\n",
  "    $strength = 0;\n    $strongest_extension = '';\n    foreach ($extensions as\
    \ $extension) {\n        $cap_letters = preg_match_all('/[A-Z]/', $extension);\n\
    \        $small_letters = preg_match_all('/[a-z]/', $extension);\n        $current_strength\
    \ = $cap_letters - $small_letters;\n        if ($current_strength > $strength)\
    \ {\n            $strength = $current_strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return $class_name . '.' . $strongest_extension;\n\
    }\necho Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"\
    StuFfed\"));"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
