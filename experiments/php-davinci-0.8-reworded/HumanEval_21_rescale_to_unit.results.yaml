language: php
name: HumanEval_21_rescale_to_unit
results:
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $numbers = array_map(function($x) { return floatval($x); }, $numbers);\n\
    \  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function($x)\
    \ use ($min, $max) { return ($x - $min) / ($max - $min); }, $numbers);\n}\n\n\
    function candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822393
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $numbers = array_values($numbers);\n    $max = max($numbers);\n    $min\
    \ = min($numbers);\n    if ($max - $min == 0) {\n        return array_fill(0,\
    \ count($numbers), 0);\n    }\n    $result = array();\n    foreach ($numbers as\
    \ $number) {\n        $result[] = ($number - $min) / ($max - $min);\n    }\n \
    \   return $result;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822393
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function($number)\
    \ use ($min, $max) {\n    return ($number - $min) / ($max - $min);\n  }, $numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822393
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    // find min and max in array\n    $min = min($numbers);\n    $max = max($numbers);\n\
    \    // apply linear transform with return of abs min and max\n    $return = [];\n\
    \    foreach ($numbers as $number) {\n        $return[] = ($number - $min) / ($max\
    \ - $min);\n    }\n    return $return;\n}\n\nfunction candidate(...$args) {\n\
    \    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822393
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $span = $max -\
    \ $min;\n    $res = array();\n    foreach ($numbers as $value) {\n        $res[]\
    \ = ($value - $min) / $span;\n    }\n    return $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822393
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  if ($min == $max) return\
    \ $numbers;\n  foreach ($numbers as $i => $number) {\n    $numbers[$i] = ($number\
    \ - $min) / ($max - $min);\n  }\n  return $numbers;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822393
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $delta = $max - $min;\n\
    \  $transform = function($x) use ($min, $delta) {\n    return ($x - $min) / $delta;\n\
    \  };\n  return array_map($transform, $numbers);\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822393
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    // Just in case...\n    if (count($numbers) < 2) {\n        return $numbers;\n\
    \    }\n\n    // Find min and max\n    $min = $numbers[0];\n    $max = $numbers[0];\n\
    \    foreach ($numbers as $value) {\n        if ($value < $min) {\n          \
    \  $min = $value;\n        }\n        if ($value > $max) {\n            $max =\
    \ $value;\n        }\n    }\n\n    // Apply transform to numbers\n    $result\
    \ = array();\n    $range = $max - $min;\n    foreach ($numbers as $value) {\n\
    \        $new_value = ($value - $min) / $range;\n        $result[] = $new_value;\n\
    \    }\n\n    return $result;\n}\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822393
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $count = count($numbers);\n    $min = min($numbers);\n    $max = max($numbers);\n\
    \    for ($i = 0; $i < $count; $i++) {\n        $numbers[$i] = ($numbers[$i] -\
    \ $min) / ($max - $min);\n    }\n    return $numbers;\n}\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822393
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    if (!is_array($numbers)) {\n        throw new InvalidArgumentException('The\
    \ argument must be an array');\n    }\n    if (count($numbers) < 2) {\n      \
    \  throw new InvalidArgumentException('The argument must contain at least two\
    \ elements');\n    }\n    $min = null;\n    $max = null;\n    foreach ($numbers\
    \ as $number) {\n        if ($min === null || $number < $min) {\n            $min\
    \ = $number;\n        }\n        if ($max === null || $number > $max) {\n    \
    \        $max = $number;\n        }\n    }\n    if ($min == $max) {\n        return\
    \ $numbers;\n    }\n    $range = $max - $min;\n    $output = array();\n    foreach\
    \ ($numbers as $number) {\n        $output[] = ($number - $min) / $range;\n  \
    \  }\n    return $output;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822393
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $multiplier = 1\
    \ / ($max - $min);\n    foreach ($numbers as $key => $value) {\n        $numbers[$key]\
    \ = ($value - $min) * $multiplier;\n    }\n    return $numbers;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822393
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $rescaled = array();\n    foreach ($numbers as $number) {\n     \
    \   $rescaled[] = ($number - $min) / $range;\n    }\n    return $rescaled;\n}\n\
    \nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9))\
    \ !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822393
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $max = max($numbers);\n  $min = min($numbers);\n  $delta = $max - $min;\n\
    \  $result = array();\n  foreach ($numbers as $number) {\n    $result[] = ($number\
    \ - $min) / $delta;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822393
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $range = $max - $min;\n\
    \  $scaled = array();\n  foreach ($numbers as $number) {\n    $scaled[] = ($number\
    \ - $min) / $range;\n  }\n  return $scaled;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822393
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $result = array();\n    $min = min($numbers);\n    $max = max($numbers);\n\
    \    foreach ($numbers as $value) {\n        $result[] = ($value - $min) / ($max\
    \ - $min);\n    }\n    return $result;\n}\nfunction candidate(...$args) {\n  \
    \  return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822393
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  // TODO : Rescale to unit\n}\nfunction candidate(...$args) {\n    return\
    \ rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdi2ffgu7.php:14\n\
    Stack trace:\n#0 /tmp/tmpdi2ffgu7.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpdi2ffgu7.php\
    \ on line 14\n"
  timestamp: 1659822393
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    // if the length of the array is 1, throw an exception\n    if (count($numbers)\
    \ == 1) {\n        throw new Exception('Array length cannot be 1');\n    }\n\n\
    \    // get the smallest and largest number in the array\n    $min = min($numbers);\n\
    \    $max = max($numbers);\n\n    // perform linear scaling for each number in\
    \ the array\n    for ($i = 0; $i < count($numbers); $i++) {\n        $numbers[$i]\
    \ = ($numbers[$i] - $min) / ($max - $min);\n    }\n\n    return $numbers;\n}\n\
    \necho \"<pre>\";\nprint_r(rescale_to_unit(array(0.0, -4.0, 5.0, -1.0, 2.0)));\n\
    echo \"</pre>\";\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => 0.44444444444444\n    [1] => 0\n    [2] => 1\n\
    \    [3] => 0.33333333333333\n    [4] => 0.66666666666667\n)\n</pre>"
  timestamp: 1659822393
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    return array_map(function($i)\
    \ use ($min, $max) {\n        return ($i - $min) / ($max - $min);\n    }, $numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822393
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function($a)\
    \ use ($min, $max) {\n    return ($a - $min) / ($max - $min);\n  }, $numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822393
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $scale = $max -\
    \ $min;\n    $return = array();\n    foreach ($numbers as $n) {\n        $return[]\
    \ = ($n - $min) / $scale;\n    }\n    return $return;\n}\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822393
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $scaled = array();\n\
    \  foreach ($numbers as $number) {\n    $scaled[] = ($number - $min) / ($max -\
    \ $min);\n  }\n  return $scaled;\n}\n\nfunction candidate(...$args) {\n    return\
    \ rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012069
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $max = max($numbers);\n  $min = min($numbers);\n  foreach ($numbers as\
    \ $n) {\n    $num = (($n - $min) / ($max - $min));\n    array_push($output, $num);\n\
    \  }\n  return $output;\n}\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: array_push(): Argument #1 ($array) must\
    \ be of type array, null given in /tmp/tmps7rfgtv6.php:11\nStack trace:\n#0 /tmp/tmps7rfgtv6.php(11):\
    \ array_push(NULL, 0.0)\n#1 /tmp/tmps7rfgtv6.php(16): rescale_to_unit(Array)\n\
    #2 /tmp/tmps7rfgtv6.php(20): candidate(Array)\n#3 /tmp/tmps7rfgtv6.php(27): test()\n\
    #4 {main}\n  thrown in /tmp/tmps7rfgtv6.php on line 11\n"
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $max = max($numbers);\n    $min = min($numbers);\n    return array_map(function($n)\
    \ use ($max, $min) {\n        return ($n - $min) / ($max - $min);\n    }, $numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    if ($min == $max)\
    \ {\n        return array_fill(0, count($numbers), 0.5);\n    }\n    $scale =\
    \ 1 / ($max - $min);\n    return array_map(function($n) use ($min, $scale) {\n\
    \        return ($n - $min) * $scale;\n    }, $numbers);\n}\n\n$numbers = array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0);\n$rescaled = rescale_to_unit($numbers);\nprint_r($rescaled);\n\
    function candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 0\n    [1] => 0.25\n    [2] => 0.5\n    [3] => 0.75\n\
    \    [4] => 1\n)\n"
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    // Find the minimum and maximum number in the array\n    $numbers_max\
    \ = max($numbers);\n    $numbers_min = min($numbers);\n    // Find the difference\
    \ between them\n    $numbers_range = $numbers_max - $numbers_min;\n    // Divide\
    \ each number by the difference (so, if the difference was 30 and each number\
    \ was\n    // 30, 30, 30, 30, 30, you would end up with 0, 0, 0, 0, 0, because\
    \ 30/30 = 1 and 1 - 1 = 0).\n    // The loop below will also add the $numbers_min\
    \ value to the result, so in the above example\n    // you would get 30, 30, 30,\
    \ 30, 30, instead of 0, 0, 0, 0, 0.\n    foreach ($numbers as $number) {\n   \
    \     $rescaled_numbers[] = ($number - $numbers_min) / $numbers_range;\n    }\n\
    \    return $rescaled_numbers;\n}\n\nfunction candidate(...$args) {\n    return\
    \ rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $len = count($numbers);\n\
    \    for ($i = 0; $i < $len; $i++) {\n        $numbers[$i] = ($numbers[$i] - $min)\
    \ / ($max - $min);\n    }\n    return $numbers;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $scaled = array();\n\
    \    foreach ($numbers as $number) {\n        $scaled[] = ($number - $min) / ($max\
    \ - $min);\n    }\n    return $scaled;\n}\nfunction candidate(...$args) {\n  \
    \  return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  // >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0, 5.0))\n  // array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)\n  $min = min($numbers);\n  $max = max($numbers);\n  $range\
    \ = $max - $min;\n  $scaled = array();\n  foreach ($numbers as $number) {\n  \
    \  $scaled[] = ($number - $min) / $range;\n  }\n  return $scaled;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    // Compute the range of numbers\n    $min = $numbers[0];\n    $max =\
    \ $numbers[0];\n    foreach ($numbers as $number) {\n        if ($number < $min)\
    \ $min = $number;\n        if ($number > $max) $max = $number;\n    }\n    $range\
    \ = $max - $min;\n    // Compute the rescaled numbers\n    $rescaled = array();\n\
    \    foreach ($numbers as $number) {\n        $rescaled[] = ($number - $min) /\
    \ $range;\n    }\n    return $rescaled;\n}\n\nfunction candidate(...$args) {\n\
    \    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $numbers_min = min($numbers);\n    $numbers_max = max($numbers);\n  \
    \  $numbers_range = $numbers_max - $numbers_min;\n    return array_map(function($num)\
    \ use ($numbers_min, $numbers_range) {\n        return ($num - $numbers_min) /\
    \ $numbers_range;\n    }, $numbers);\n}\n\nfunction candidate(...$args) {\n  \
    \  return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $minmax = $max - $min;\n\
    \  if ($minmax == 0) {\n    $retval = $numbers;\n  } else {\n    $retval = array();\n\
    \    foreach ($numbers as $number) {\n      $retval[] = ($number - $min) / $minmax;\n\
    \    }\n  }\n  return $retval;\n}\nfunction candidate(...$args) {\n    return\
    \ rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function($x)\
    \ use ($min, $max) {\n    return ($x - $min) / ($max - $min);\n  }, $numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $min_max_diff =\
    \ $max - $min;\n    $result = array();\n    foreach ($numbers as $i => $number)\
    \ {\n        $result[$i] = $number - $min;\n        if ($min_max_diff !== 0) {\n\
    \            $result[$i] /= $min_max_diff;\n        }\n    }\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9))\
    \ !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    if (count($numbers) <= 1) return $numbers;\n    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $interval = $max - $min;\n    if ($interval <=\
    \ 0) return $numbers;\n    $results = array();\n    foreach ($numbers as $n) {\n\
    \        $results[] = ($n - $min) / $interval;\n    }\n    return $results;\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $numbers = array_unique($numbers);\n  // if no numbers, return an empty\
    \ array\n  if (empty($numbers)) {\n    return array();\n  }\n  // find min and\
    \ max\n  $min = min($numbers);\n  $max = max($numbers);\n  // if min and max are\
    \ the same, return an array of 1s\n  if ($min == $max) {\n    return array_fill(0,\
    \ count($numbers), 1);\n  }\n  // avoid division by zero by adding a very small\
    \ number to the denominator\n  $eps = 1e-6;\n  // calculate the transformation\
    \ function\n  $transform = function($x) use ($min, $max, $eps) {\n    return ($x\
    \ - $min) / ($max - $min + $eps);\n  };\n  // apply the transformation to each\
    \ number in the array\n  return array_map($transform, $numbers);\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw__hf_zp.php:34\n\
    Stack trace:\n#0 /tmp/tmpw__hf_zp.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpw__hf_zp.php\
    \ on line 34\n"
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $span = $max - $min;\n\
    \  return array_map(function($value) use ($min, $span) {\n    return ($value -\
    \ $min) / $span;\n  }, $numbers);\n}\n\nfunction candidate(...$args) {\n    return\
    \ rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $scale = $max - $min;\n\
    \  $rescaled = array();\n  foreach ($numbers as $n) {\n    $rescaled[] = ($n -\
    \ $min) / $scale;\n  }\n  return $rescaled;\n}\nfunction candidate(...$args) {\n\
    \    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  if ($min == $max) {\n\
    \    return array_fill(0, count($numbers), 0.5);\n  }\n  $diff = $max - $min;\n\
    \  return array_map(function($n) use ($min, $diff) {\n    return ($n - $min) /\
    \ $diff;\n  }, $numbers);\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $scale = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $n) {\n        $result[]\
    \ = ($n - $min) / $scale;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $spread = $max\
    \ - $min;\n    $rescaled = array();\n    foreach ($numbers as $number) {\n   \
    \     $rescaled[] = ($number - $min) / $spread;\n    }\n    return $rescaled;\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $scaled = array();\n\
    \    foreach ($numbers as $number) {\n        $scaled[] = ($number - $min) / ($max\
    \ - $min);\n    }\n    return $scaled;\n}\n\nfunction candidate(...$args) {\n\
    \    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  if (count($numbers) > 1) {\n    $numbers = array_combine(array_keys($numbers),\
    \ array_map('floatval', $numbers));\n\n    $min = min($numbers);\n    $max = max($numbers);\n\
    \n    foreach ($numbers as $key => $number) {\n      $numbers[$key] = ($number\
    \ - $min) / ($max - $min);\n    }\n  }\n  return $numbers;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $scaled = array();\n\
    \    foreach ($numbers as $number) {\n        $scaled[] = ($number - $min) / ($max\
    \ - $min);\n    }\n    return $scaled;\n}\n$numbers = array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0);\nvar_dump(rescale_to_unit($numbers));\nfunction candidate(...$args) {\n\
    \    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "array(5) {\n  [0]=>\n  float(0)\n  [1]=>\n  float(0.25)\n  [2]=>\n  float(0.5)\n\
    \  [3]=>\n  float(0.75)\n  [4]=>\n  float(1)\n}\n"
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    if ($min != $max)\
    \ {\n        $scale = 1.0 / ($max - $min);\n        foreach ($numbers as $i =>\
    \ $number) {\n            $numbers[$i] = ($number - $min) * $scale;\n        }\n\
    \    }\n    return $numbers;\n}\n\nfunction candidate(...$args) {\n    return\
    \ rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $domain = $max - $min;\n\
    \  $result = array();\n  foreach ($numbers as $n) {\n    $result[] = ($n - $min)\
    \ / $domain;\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n  \
    \  return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function($n)\
    \ use ($min, $max) {\n    return ($n - $min) / ($max - $min);\n  }, $numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    if ($min == $max)\
    \ {\n        return;\n    }\n    $rescaled = array();\n    foreach ($numbers as\
    \ $number) {\n        $rescaled[] = ($number - $min) / ($max - $min);\n    }\n\
    \    return $rescaled;\n}\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $range = $max - $min;\n\
    \  $result = array();\n  foreach ($numbers as $number) {\n    $result[] = ($number\
    \ - $min) / $range;\n  }\n  return $result;\n}\nfunction candidate(...$args) {\n\
    \    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $rescaled = array();\n\
    \    foreach ($numbers as $number) {\n        $rescaled[] = ($number - $min) /\
    \ ($max - $min);\n    }\n    return $rescaled;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $denom = $max - $min;\n\
    \  $res = array();\n  foreach ($numbers as $n) {\n    $res[] = ($n - $min) / $denom;\n\
    \  }\n  return $res;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $max = max($numbers);\n    $min = min($numbers);\n    $range = $max -\
    \ $min;\n    $new_numbers = array();\n    foreach ($numbers as $number) {\n  \
    \      $new_numbers[] = ($number - $min) / $range;\n    }\n    return $new_numbers;\n\
    }\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9))\
    \ !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    if (count($numbers) <= 1) return;\n    $min = min($numbers);\n    $max\
    \ = max($numbers);\n    $range = $max - $min;\n    $rescaled = array();\n    foreach\
    \ ($numbers as $n) {\n        $rescaled[] = ($n - $min) / $range;\n    }\n   \
    \ return $rescaled;\n}\n\n/**\n * Computes the centroid for an array of coordinates.\n\
    \ *\n * @param {Array} coords\n * @return {Centroid}\n */\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    return array_map(function($value)\
    \ use ($min, $max) {\n        return ($value - $min) / ($max - $min);\n    },\
    \ $numbers);\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = null;\n    $max = null;\n    foreach ($numbers as $number) {\n\
    \        if ($number < $min || $min === null) {\n            $min = $number;\n\
    \        }\n        if ($number > $max || $max === null) {\n            $max =\
    \ $number;\n        }\n    }\n    if ($min == $max) {\n        return array_fill(0,\
    \ count($numbers), 0.5);\n    }\n    $scaled = array();\n    foreach ($numbers\
    \ as $number) {\n        $scaled[] = ($number - $min) / ($max - $min);\n    }\n\
    \    return $scaled;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $ret = array();\n  foreach\
    \ ($numbers as $number) {\n    $ret[] = ($number - $min) / ($max - $min);\n  }\n\
    \  return $ret;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  // Start with an array filled with zeros\n  $output = array_fill(0, count($numbers),\
    \ 0);\n  // Determine the min and max values from the input\n  $min = min($numbers);\n\
    \  $max = max($numbers);\n  // No need to rescale if all values are the same\n\
    \  if ($min === $max) {\n    return $output;\n  }\n  // Calculate the difference\
    \ between the minimum and maximum\n  $diff = $max - $min;\n  // Iterate over the\
    \ input, transforming each input value\n  foreach ($numbers as $index => $value)\
    \ {\n    $output[$index] = ($value - $min) / $diff;\n  }\n  return $output;\n\
    }\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9))\
    \ !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  // get the min/max values from the data\n  $min = min($numbers);\n  $max\
    \ = max($numbers);\n  // loop over each value in the array and scale it to be\
    \ between 0 and 1\n  $scaled = array();\n  foreach ($numbers as $n) {\n    $scaled[]\
    \ = ($n - $min) / ($max - $min);\n  }\n  return $scaled;\n}\n\n/**\n * Returns\
    \ a number in the range [min, max).\n *\n * @param $numbers\n * @param float $min\n\
    \ * @param float $max\n * @return float\n */\nfunction candidate(...$args) {\n\
    \    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $count = count($numbers);\n    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $out = array();\n    for ($i = 0; $i < $count; $i++) {\n        $out[$i]\
    \ = (float)($numbers[$i] - $min) / ($max - $min);\n    }\n    return $out;\n}\n\
    \nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9))\
    \ !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $numbers_min = min($numbers);\n    $numbers_max = max($numbers);\n  \
    \  $numbers_range = $numbers_max - $numbers_min;\n    return array_map(function($n)\
    \ use ($numbers_min, $numbers_range) {\n        return ($n - $numbers_min) / $numbers_range;\n\
    \    }, $numbers);\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $rescaled = array();\n  $max = max($numbers);\n  $min = min($numbers);\n\
    \  foreach ($numbers as $number) {\n    $rescaled[] = ($number - $min) / ($max\
    \ - $min);\n  }\n  return $rescaled;\n}\nfunction candidate(...$args) {\n    return\
    \ rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $numbers = array_unique($numbers);\n    sort($numbers);\n    $min = $numbers[0];\n\
    \    $max = $numbers[count($numbers) - 1];\n    foreach ($numbers as $n) {\n \
    \       $res[$n] = ($n - $min) / ($max - $min);\n    }\n    return $res;\n}\n\n\
    function candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nDeprecated: Implicit conversion from float 49.9 to int loses precision\
    \ in /tmp/tmp9lsqpi1c.php on line 12\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp9lsqpi1c.php:22\nStack trace:\n#0 /tmp/tmp9lsqpi1c.php(29):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp9lsqpi1c.php on line 22\n"
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $scaled = array();\n\
    \    foreach ($numbers as $val) {\n        $scaled[] = ($val - $min) / ($max -\
    \ $min);\n    }\n    return $scaled;\n}\n\nfunction candidate(...$args) {\n  \
    \  return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    sort($numbers);\n    $min = $numbers[0];\n    $max = $numbers[count($numbers)\
    \ - 1];\n    $scaled = array();\n    foreach ($numbers as $number) {\n       \
    \ $scaled[] = ($number - $min) / ($max - $min);\n    }\n    return $scaled;\n\
    }\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9))\
    \ !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpum4bxv67.php:22\n\
    Stack trace:\n#0 /tmp/tmpum4bxv67.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpum4bxv67.php\
    \ on line 22\n"
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    // Calculate lowest and highest values\n    $min = min($numbers);\n \
    \   $max = max($numbers);\n    // Initialize output\n    $output = array();\n\
    \    // Iterate through numbers and rescale each one\n    foreach ($numbers as\
    \ $num) {\n        $output[] = ($num - $min) / ($max - $min);\n    }\n    return\
    \ $output;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    return array_map(function($n) use ($min, $range) {\n        return\
    \ ($n - $min) / $range;\n    }, $numbers);\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  if ($min == $max) {\n\
    \    return array();\n  }\n  $new_numbers = array();\n  foreach ($numbers as $number)\
    \ {\n    $new_numbers[] = ($number - $min) / ($max - $min);\n  }\n  return $new_numbers;\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $original_minimum = min($numbers);\n    $original_maximum = max($numbers);\n\
    \    $original_range = $original_maximum - $original_minimum;\n    if($original_range\
    \ == 0) {\n        return $numbers;\n    }\n    return array_map(function($number)\
    \ use ($original_minimum, $original_maximum, $original_range) {\n        return\
    \ ($number - $original_minimum) / $original_range;\n    }, $numbers);\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = null;\n    $max = null;\n    foreach ($numbers as $number) {\n\
    \        if ($min === null) {\n            $min = $number;\n            $max =\
    \ $number;\n        } else {\n            if ($number < $min) {\n            \
    \    $min = $number;\n            }\n            if ($number > $max) {\n     \
    \           $max = $number;\n            }\n        }\n    }\n    $result = array();\n\
    \    foreach ($numbers as $number) {\n        $result[] = ($number - $min) / ($max\
    \ - $min);\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    foreach ($numbers\
    \ as $number) {\n        $range = $max - $min;\n        if ($range != 0) {\n \
    \           $normalized = ($number - $min) / $range;\n        } else {\n     \
    \       $normalized = 0;\n        }\n        $unit[] = $normalized;\n    }\n \
    \   return $unit;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    // your code goes here\n}\n\nfunction candidate(...$args) {\n    return\
    \ rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj642clgd.php:15\n\
    Stack trace:\n#0 /tmp/tmpj642clgd.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpj642clgd.php\
    \ on line 15\n"
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $scaled = array();\n\
    \  foreach ($numbers as $num) {\n    $scaled[] = ($num - $min) / ($max - $min);\n\
    \  }\n  return $scaled;\n}\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  if (count($numbers) == 0) {\n    return $numbers;\n  }\n\n  $min = $numbers[0];\n\
    \  $max = $numbers[0];\n  for ($i = 1; $i < count($numbers); $i++) {\n    $min\
    \ = min($min, $numbers[$i]);\n    $max = max($max, $numbers[$i]);\n  }\n\n  $results\
    \ = array();\n  for ($i = 0; $i < count($numbers); $i++) {\n    $results[] = ($numbers[$i]\
    \ - $min) / ($max - $min);\n  }\n\n  return $results;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $max = max($numbers);\n    $min = min($numbers);\n    $range = $max -\
    \ $min;\n    return array_map(function($n) use ($min, $range) {\n        return\
    \ ($n - $min) / $range;\n    }, $numbers);\n}\nfunction candidate(...$args) {\n\
    \    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $delta = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $delta;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $range = $max - $min;\n\
    \  $result = array();\n  foreach ($numbers as $number) {\n    $result[] = ($number\
    \ - $min) / $range;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $units = [];\n\
    \    foreach ($numbers as $number) {\n        $units[] = ($number - $min) / ($max\
    \ - $min);\n    }\n    return $units;\n}\nfunction candidate(...$args) {\n   \
    \ return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $max = max($numbers);\n  $min = min($numbers);\n  foreach ($numbers as\
    \ $index => $n) {\n    $numbers[$index] = ($n - $min) / ($max - $min);\n  }\n\
    \  return $numbers;\n}\n\n$numbers = array(1.0, 2.0, 3.0, 4.0, 5.0);\n$expected\
    \ = array(0.0, 0.25, 0.5, 0.75, 1.0);\nassert(array_values(rescale_to_unit($numbers))\
    \ == $expected);\nassert(array_values(rescale_to_unit(array(1, 2, 3, 4, 5))) ==\
    \ $expected);\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $spread = $max\
    \ - $min;\n    $rescaled = array();\n    foreach ($numbers as $number) {\n   \
    \     $rescaled[] = ($number - $min) / $spread;\n    }\n    return $rescaled;\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $result = array();\n\
    \    foreach ($numbers as $n) {\n        $result[] = ($n - $min) / ($max - $min);\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $numbers = array_values($numbers);\n  $min = min($numbers);\n  $max = max($numbers);\n\
    \  if ($min == $max) {\n    // Everything's the same, return constant array\n\
    \    return array_fill(0, count($numbers), 1);\n  } else {\n    $delta = ($max\
    \ - $min);\n    $result = array();\n    foreach ($numbers as $n) {\n      $result[]\
    \ = ($n - $min) / $delta;\n    }\n    return $result;\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  // Calculate size of array\n  $length = count($numbers);\n  // Convert\
    \ each value to a float so we can apply operations to them\n  $floats = array_map(function($value)\
    \ {\n    return (float)$value;\n  }, $numbers);\n  // Sort $floats from smallest\
    \ to largest\n  $sorted = insertion_sort($floats);\n  // Calculate the minimum\
    \ value\n  $min = $sorted[0];\n  // Calculate the difference between the maximum\
    \ and minimum values\n  $range = $sorted[$length - 1] - $min;\n  // Get the factor\
    \ for how much each value should be multiplied by\n  $factor = 1 / $range;\n \
    \ // Transform the array by adding the minimum value to each element,\n  // and\
    \ then multiplying each element by $factor\n  $transformed = array_map(function($value)\
    \ use ($min, $factor) {\n    return ($value + $min) * $factor;\n  }, $numbers);\n\
    \  // Return the transformed array\n  return $transformed;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function insertion_sort()\
    \ in /tmp/tmpkqdyw711.php:14\nStack trace:\n#0 /tmp/tmpkqdyw711.php(31): rescale_to_unit(Array)\n\
    #1 /tmp/tmpkqdyw711.php(35): candidate(Array)\n#2 /tmp/tmpkqdyw711.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmpkqdyw711.php on line 14\n"
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $new_numbers =\
    \ array();\n    foreach ($numbers as $number) {\n        $new_numbers[] = ($number\
    \ - $min) / ($max - $min);\n    }\n    return $new_numbers;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    // Compute min/max from $numbers\n    $min = min($numbers);\n    $max\
    \ = max($numbers);\n    // Find difference between min/max: $diff\n    $diff =\
    \ $max - $min;\n    // Initialize array for transformed numbers: $scaled\n   \
    \ $scaled = array();\n    // Loop over all numbers\n    foreach ($numbers as $value)\
    \ {\n        // Compute scaled number by subtracting min, dividing by $diff, and\
    \ multiplying by 1\n        $scaled[] = ($value - $min) / $diff * 1;\n    }\n\
    \    // return $scaled\n    return $scaled;\n}\n$test_array = array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0);\nprint_r(rescale_to_unit($test_array));\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 0\n    [1] => 0.25\n    [2] => 0.5\n    [3] => 0.75\n\
    \    [4] => 1\n)\n"
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    if (empty($numbers)) {\n        throw new Exception('array cannot be\
    \ empty');\n    }\n\n    if (count($numbers) == 1) {\n        throw new Exception('array\
    \ cannot have just one element');\n    }\n\n    $min = min($numbers);\n    $max\
    \ = max($numbers);\n\n    return array_map(function($val) use ($min, $max) {\n\
    \        return ($val - $min) / ($max - $min);\n    }, $numbers);\n}\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $zero_to_one = array();\n    foreach ($numbers as $number) {\n  \
    \      $zero_to_one[] = ($number - $min) / $range;\n    }\n    return $zero_to_one;\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $minimum = min($numbers);\n    $maximum = max($numbers);\n    $range\
    \ = $maximum - $minimum;\n    foreach ($numbers as $i => $num) {\n        $numbers[$i]\
    \ = ($num - $minimum) / $range;\n    }\n    return $numbers;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    // get limits\n    $min = min($numbers);\n    $max = max($numbers);\n\
    \    // calculate scaling factor\n    $scale = $max - $min;\n    // perform transformation\n\
    \    $result = array();\n    foreach ($numbers as $v) {\n        $result[] = ($v\
    \ - $min) / $scale;\n    }\n    return $result;\n}\n\n/**\n * Creates a thumbnail\
    \ image out of the supplied image, by resizing it and cropping in the center if\
    \ needed\n *\n * @param string $imagePath path to source image\n * @param string\
    \ $imageTargetPath path to destination image\n * @param int $thumbWidth maximum\
    \ width of the thumbnail\n * @param int $thumbHeight maximum height of the thumbnail\n\
    \ * @param bool $maintainRatio whether the thumbnail should maintain the image\
    \ ratio or not\n * @param bool $crop whether the thumbnail should be cropped or\
    \ not\n * @param bool $jpegOutput whether the output should be JPEG or PNG\n *\
    \ @return bool|string true if the thumbnail was successfully created or the error\
    \ message if it couldn't\n */\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    return array_map(function($n)\
    \ use ($min, $max) { return ($n - $min) / ($max - $min); }, $numbers);\n}\n\n\
    function candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = $numbers[0];\n    $max = $numbers[0];\n    for ($i = 1; $i < count($numbers);\
    \ $i++) {\n        if ($numbers[$i] < $min) {\n            $min = $numbers[$i];\n\
    \        }\n        if ($numbers[$i] > $max) {\n            $max = $numbers[$i];\n\
    \        }\n    }\n    $min_diff = $max - $min;\n    if ($min_diff == 0) {\n \
    \       return $numbers;\n    }\n    $res = array();\n    for ($i = 0; $i < count($numbers);\
    \ $i++) {\n        $res[$i] = ($numbers[$i] - $min) / $min_diff;\n    }\n    return\
    \ $res;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    // YOUR CODE HERE\n    $min = min($numbers);\n    $max = max($numbers);\n\
    \    foreach ($numbers as $key => $number) {\n        $numbers[$key] = ($number\
    \ - $min) / ($max - $min);\n    }\n    return $numbers;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $scaled = array();\n\
    \    foreach ($numbers as $number) {\n        if ($max == $min) {\n          \
    \  $scaled[] = 0;\n        } else {\n            $scaled[] = ($number - $min)\
    \ / ($max - $min);\n        }\n    }\n    return $scaled;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $a = min($numbers);\n    $b = max($numbers);\n    $scaled = array();\n\
    \    foreach ($numbers as $number) {\n        $scaled[] = ($number - $a) / ($b\
    \ - $a);\n    }\n    return $scaled;\n}\n\nfunction candidate(...$args) {\n  \
    \  return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $new_numbers = array();\n    foreach ($numbers as $number) {\n  \
    \      $new_numbers[] = ($number - $min) / $range;\n    }\n    return $new_numbers;\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $number_count =\
    \ count($numbers);\n    for ($i = 0; $i < $number_count; $i++) {\n        $numbers[$i]\
    \ = ($numbers[$i] - $min) / ($max - $min);\n    }\n    return $numbers;\n}\n\n\
    function candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $max = max($numbers);\n    $min = min($numbers);\n    foreach ($numbers\
    \ as $i => $n) {\n        $numbers[$i] = ($n - $min) / ($max - $min);\n    }\n\
    \    return $numbers;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    // find the largest number\n    $largest = max($numbers);\n    // find\
    \ the smallest number\n    $smallest = min($numbers);\n    // compute the difference\
    \ between the largest and smallest numbers\n    $difference = $largest - $smallest;\n\
    \    // build a new array\n    $rescaled = array();\n    // iterate over the original\
    \ array\n    foreach ($numbers as $number) {\n        // for each value, add (number-smallest)/difference\
    \ to the new array\n        $rescaled[] = ($number - $smallest) / $difference;\n\
    \    }\n    // return the new array\n    return $rescaled;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = $numbers[0];\n    $max = $numbers[0];\n    foreach ($numbers as\
    \ $number) {\n        if ($number < $min) {\n            $min = $number;\n   \
    \     }\n        if ($number > $max) {\n            $max = $number;\n        }\n\
    \    }\n    $range = $max - $min;\n    $result = array();\n    foreach ($numbers\
    \ as $number) {\n        $result[] = ($number - $min) / $range;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $max = max($numbers);\n    $min = min($numbers);\n    return array_map(function($n)\
    \ use ($max, $min) {\n        return ($n - $min) / ($max - $min);\n    }, $numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $numbers = array_values($numbers);\n    $max = max($numbers);\n    $min\
    \ = min($numbers);\n    if ($max == $min) {\n        return array_fill(0, count($numbers),\
    \ 0.5);\n    }\n    $span = $max - $min;\n    return array_map(function($x) use\
    \ ($min, $span) {\n        return ($x - $min) / $span;\n    }, $numbers);\n}\n\
    \nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9))\
    \ !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $max = max($numbers);\n    $min = min($numbers);\n    if ($max == $min)\
    \ {\n        $min = 0;\n    }\n    return array_map(function($n) use ($max, $min)\
    \ {\n        return (($n - $min) / ($max - $min));\n    }, $numbers);\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function($x)\
    \ use ($min, $max) {\n    return ($x - $min) / ($max - $min);\n  }, $numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $numbers = array_map(function($x) { return (float)$x; }, $numbers);\n\
    \    $min = min($numbers);\n    $max = max($numbers);\n    $span = $max - $min;\n\
    \    return array_map(function($x) use ($min, $span) { return ($x - $min) / $span;\
    \ }, $numbers);\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $scale = $max - $min;\n\
    \  return array_map(function($n) use ($min, $scale) {\n    return ($n - $min)\
    \ / $scale;\n  }, $numbers);\n}\n\nfunction candidate(...$args) {\n    return\
    \ rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $scaled = array();\n\
    \  foreach ($numbers as $number) {\n    $scaled[] = ($number - $min) / ($max -\
    \ $min);\n  }\n  return $scaled;\n}\n\nfunction candidate(...$args) {\n    return\
    \ rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012069
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $max = array_reduce($numbers, function($r, $n) { return $r > $n ? $r\
    \ : $n; }, 0);\n    $min = array_reduce($numbers, function($r, $n) { return $r\
    \ < $n ? $r : $n; }, 0);\n    $denom = $max - $min;\n    return array_map(function($n)\
    \ use ($min, $denom) { return ($n - $min) / $denom; }, $numbers);\n}\n\n$names\
    \ = array(\"Anne\", \"Beth\", \"Christine\", \"Diana\", \"Emma\", \"Fabiana\"\
    , \"Gertrude\", \"Heidi\", \"Ida\", \"Jane\");\n$weights = array(19, 18, 16, 12,\
    \ 10, 9, 8, 7, 6, 5);\n\n$names = array(\"Adam\", \"Bob\", \"Carol\", \"David\"\
    , \"Emma\", \"Fabiana\", \"Gabriel\", \"Heidi\", \"Isabella\", \"Jarell\");\n\
    $weights = array(12, 8, 6, 3, 3, 3, 2, 2, 2, 1);\n\n$names = array(\"Adam\", \"\
    Bob\", \"Carol\", \"David\", \"Emma\", \"Fabiana\", \"Gabriel\", \"Heidi\", \"\
    Isabella\", \"Jarell\");\n$weights = array(4, 3, 3, 2, 2, 2, 1, 1, 1, 1);\n\n\
    $names = array(\"Adam\", \"Bob\", \"Carol\", \"David\", \"Emma\", \"Fabiana\"\
    , \"Gabriel\", \"Heidi\", \"Isabella\", \"Jarell\");\n$weights = array(11, 8,\
    \ 6, 5, 4, 3, 2, 1, 1, 1);\n\n$names = array(\"Adam\", \"Bob\", \"Carol\", \"\
    David\", \"Emma\", \"Fabiana\", \"Gabriel\", \"Heidi\", \"Isabella\", \"Jarell\"\
    );\n$weights = array(10, 7, 6, 5, 4, 3, 2, 1, 1, 1);\n\n$names = array(\"Adam\"\
    , \"Bob\", \"Carol\", \"David\", \"Emma\", \"Fabiana\", \"Gabriel\", \"Heidi\"\
    ,\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9))\
    \ !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmphpfdjg54.php on line 29

    '
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $numbers = (array) $numbers;\n    sort($numbers);\n    $min = $numbers[0];\n\
    \    $max = $numbers[count($numbers) - 1];\n    $range = $max - $min;\n    foreach\
    \ ($numbers as $k => $v) {\n        $numbers[$k] = ($v - $min) / $range;\n   \
    \ }\n    return $numbers;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkq1imwnl.php:24\n\
    Stack trace:\n#0 /tmp/tmpkq1imwnl.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpkq1imwnl.php\
    \ on line 24\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    sort($numbers);\n\n    $min = $numbers[0];\n    $max = end($numbers);\n\
    \n    $scaled = array();\n    foreach ($numbers as $n) {\n        array_push($scaled,\
    \ ($n - $min) / ($max - $min));\n    }\n\n    return $scaled;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppz19usm9.php:26\n\
    Stack trace:\n#0 /tmp/tmppz19usm9.php(32): test()\n#1 {main}\n  thrown in /tmp/tmppz19usm9.php\
    \ on line 26\n"
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $max = max($numbers);\n    $min = min($numbers);\n    $d = $max - $min;\n\
    \    $result = array();\n    foreach ($numbers as $number) {\n        $result[]\
    \ = ($number - $min) / $d;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $delta = $max -\
    \ $min;\n    $rescaled = array();\n    foreach ($numbers as $n) {\n        $rescaled[]\
    \ = ($n - $min) / $delta;\n    }\n    return $rescaled;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $max = max($numbers);\n    $min = min($numbers);\n    $diff = $max -\
    \ $min;\n    $scale = 1 / $diff;\n    $result = array();\n    foreach ($numbers\
    \ as $number) {\n        $result[] = ($number - $min) * $scale;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $max = max($numbers);\n    $min = min($numbers);\n    $range = $max -\
    \ $min;\n    $rescaled = array();\n    foreach ($numbers as $number) {\n     \
    \   $rescaled[] = ($number - $min) / $range;\n    }\n    return $rescaled;\n}\n\
    function candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  if (count($numbers) < 2) {\n    return;\n  }\n  $min = min($numbers);\n\
    \  $max = max($numbers);\n  if ($min == $max) {\n    return;\n  }\n  $diff = $max\
    \ - $min;\n  foreach ($numbers as $i => $number) {\n    $numbers[$i] = ($number\
    \ - $min) / $diff;\n  }\n  return $numbers;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $rescaled = array();\n\
    \    foreach ($numbers as $num) {\n        $rescaled[] = ($num - $min) / ($max\
    \ - $min);\n    }\n    return $rescaled;\n}\nfunction candidate(...$args) {\n\
    \    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $range = max($numbers) - $min;\n    return\
    \ array_map(function($n) use ($min, $range) {\n        return ($n - $min) / $range;\n\
    \    }, $numbers);\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $scale = $max -\
    \ $min;\n    $new_numbers = array();\n    foreach ($numbers as $number) {\n  \
    \      $new_numbers[] = ($number - $min) / $scale;\n    }\n    return $new_numbers;\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $numbers = array_values($numbers);\n    $min = min($numbers);\n    $max\
    \ = max($numbers);\n    $range = $max - $min;\n    return array_map(function($n)\
    \ use ($min, $range) {\n        return ($n - $min) / $range;\n    }, $numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $max = max($numbers);\n  $min = min($numbers);\n  $scaled = array();\n\
    \  foreach ($numbers as $value) {\n    $scaled[] = ($value - $min) / ($max - $min);\n\
    \  }\n  return $scaled;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $numbers = array_map(function($value)\
    \ use ($min, $max) {\n        return ($value - $min) / ($max - $min);\n    },\
    \ $numbers);\n    return $numbers;\n}\n\nfunction candidate(...$args) {\n    return\
    \ rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    // Write your code here\n    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $result = [];\n    foreach ($numbers as $number) {\n        $result[] = ($number\
    \ - $min) / ($max - $min);\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $output = array();\n\
    \    foreach ($numbers as $n) {\n        $output[] = ($n - $min) / ($max - $min);\n\
    \    }\n    return $output;\n}\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $scaled = array();\n\
    \    foreach ($numbers as $n) {\n        $scaled[] = ($n - $min) / ($max - $min);\n\
    \    }\n    return $scaled;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $output = array();\n\
    \  foreach ($numbers as $number) {\n    $output[] = ($number - $min) / ($max -\
    \ $min);\n  }\n  return $output;\n}\n\nfunction candidate(...$args) {\n    return\
    \ rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    foreach ($numbers as $k => $v) {\n        $numbers[$k] = ($v - $min)\
    \ / $range;\n    }\n    return $numbers;\n}\nfunction candidate(...$args) {\n\
    \    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $diff = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $n) {\n        $result[]\
    \ = ($n - $min) / $diff;\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    if (count($numbers) <= 1) {\n        return array();\n    }\n\n    $new_numbers\
    \ = array();\n    $max = max($numbers);\n    $min = min($numbers);\n    foreach\
    \ ($numbers as $number) {\n        $new_numbers[] = ($number - $min) / ($max -\
    \ $min);\n    }\n    return $new_numbers;\n}\n\nfunction candidate(...$args) {\n\
    \    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = $numbers[0];\n  $max = $numbers[0];\n  foreach ($numbers as $number)\
    \ {\n    if ($number < $min) $min = $number;\n    if ($number > $max) $max = $number;\n\
    \  }\n  $range = $max - $min;\n  $unit_numbers = array();\n  foreach ($numbers\
    \ as $number) {\n    $unit_numbers[] = ($number - $min) / $range;\n  }\n  return\
    \ $unit_numbers;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $max = max($numbers);\n    $min = min($numbers);\n    $diff = $max -\
    \ $min;\n    $scaled = array();\n    foreach ($numbers as $num) {\n        $scaled[]\
    \ = ($num - $min) / $diff;\n    }\n    return $scaled;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  if (count($numbers) > 1) {\n    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $ret = array();\n    foreach ($numbers as $number) {\n      $ret[] = ($number\
    \ - $min) / ($max - $min);\n    }\n    return $ret;\n  } else {\n    return $numbers;\n\
    \  }\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $max = max($numbers);\n  $min = min($numbers);\n  $diff = $max - $min;\n\
    \  return array_map(function($n) use ($max, $min, $diff) {\n    return ($n - $min)\
    \ / $diff;\n  }, $numbers);\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $minmaxDiff = $max -\
    \ $min;\n  $result = array();\n  foreach ($numbers as $value) {\n    $result[]\
    \ = ($value - $min) / $minmaxDiff;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $smallest = min($numbers);\n    $largest = max($numbers);\n    $range\
    \ = $largest - $smallest;\n    $arraySize = count($numbers);\n    for ($i = 0;\
    \ $i < $arraySize; $i++) {\n        $numbers[$i] = ($numbers[$i] - $smallest)\
    \ / $range;\n    }\n    return $numbers;\n}\nfunction candidate(...$args) {\n\
    \    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $unit_range = $max\
    \ - $min;\n    $rescaled = array();\n    foreach ($numbers as $number) {\n   \
    \     $rescaled[] = ($number - $min) / $unit_range;\n    }\n    return $rescaled;\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $diff = $max - $min;\n\
    \  return array_map(function($number) use ($min, $diff) {\n    return ($number\
    \ - $min) / $diff;\n  }, $numbers);\n}\n\necho implode(', ', rescale_to_unit(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)));\necho \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: '0, 0.25, 0.5, 0.75, 1

    '
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $offset = $min;\n\
    \    $scale = $max - $min;\n    return array_map(function($number) use ($offset,\
    \ $scale) {\n        return ($number - $offset) / $scale;\n    }, $numbers);\n\
    }\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9))\
    \ !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $rescaled = array();\n\
    \    foreach ($numbers as $number) {\n        $rescaled[] = ($number - $min) /\
    \ ($max - $min);\n    }\n    return $rescaled;\n}\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = $numbers[0];\n  $max = $numbers[0];\n  for ($i = 1; $i < count($numbers);\
    \ $i++) {\n    if ($numbers[$i] < $min) $min = $numbers[$i];\n    if ($numbers[$i]\
    \ > $max) $max = $numbers[$i];\n  }\n  $scale = $max - $min;\n  $rescaled = array();\n\
    \  for ($i = 0; $i < count($numbers); $i++) {\n    $rescaled[$i] = ($numbers[$i]\
    \ - $min) / $scale;\n  }\n  return $rescaled;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $n = count($numbers);\n    $min = min($numbers);\n    $max = max($numbers);\n\
    \    if ($min == $max) return $numbers;\n    for ($i = 0; $i < $n; $i++) {\n \
    \       $numbers[$i] = ($numbers[$i] - $min) / ($max - $min);\n    }\n    return\
    \ $numbers;\n}\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    // $min is the smallest number\n    $min = min($numbers);\n    // $max\
    \ is the largest number\n    $max = max($numbers);\n    // $a is the difference\
    \ between $max and $min\n    $a = $max - $min;\n    // $numbers_unit_interval\
    \ is the result of applying the linear transform\n    $numbers_unit_interval =\
    \ array();\n    // For each number $number in $numbers\n    foreach ($numbers\
    \ as $number) {\n        // $numbers_unit_interval gets the current number ($number\
    \ - $min) / $a\n        array_push($numbers_unit_interval, ($number - $min) /\
    \ $a);\n    }\n    // We return the result of applying the linear transform\n\
    \    return $numbers_unit_interval;\n}\n\nfunction candidate(...$args) {\n   \
    \ return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $scale = max($numbers) - min($numbers);\n    $scaled = array();\n   \
    \ for ($i = 0; $i < count($numbers); $i++) {\n        $scaled[$i] = ($numbers[$i]\
    \ - min($numbers)) / $scale;\n    }\n    return $scaled;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $max = max($numbers);\n    $min = min($numbers);\n    return array_map(function($n)\
    \ use ($max, $min) {\n        return ($n - $min) / ($max - $min);\n    }, $numbers);\n\
    }\n\n$tests = array(\n    array(1.0, 2.0, 3.0, 4.0, 5.0),\n    array(5.0, 4.0,\
    \ 3.0, 2.0, 1.0),\n    array(5.0, -5.0, 0.0),\n    array(5.0, -5.0, -5.0, 0.0,\
    \ 5.0),\n    array(5.0, 5.0, 5.0, 5.0, 5.0),\n    array(1.0, 2.0, 1.0, 2.0, 1.0),\n\
    \    array(1.0, 1.0, 1.0, 1.0, 1.0),\n    array(0.0, 0.0, 0.0, 0.0, 0.0),\n  \
    \  array(1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0),\n    array(10.0,\
    \ 9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0, 2.0, 1.0),\n    array(10.0, -10.0, 0.0),\n\
    \    array(10.0, -10.0, -10.0, 0.0, 10.0),\n    array(10.0, 10.0, 10.0, 10.0,\
    \ 10.0),\n    array(1.0, 2.0, 1.0, 2.0, 1.0),\n    array(1.0, 1.0, 1.0, 1.0, 1.0),\n\
    \    array(0.0, 0.0, 0.0, 0.0, 0.0),\n);\n\nforeach ($tests as $numbers) {\n \
    \   echo \"Rescaling \" . implode($n\nfunction candidate(...$args) {\n    return\
    \ rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmpjgxf10ni.php
    on line 35

    '
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $range = $max - $min;\n\
    \  if ($range == 0) return $numbers;\n  $unit = [];\n  foreach ($numbers as $number)\
    \ {\n    $unit[] = ($number - $min) / $range;\n  }\n  return $unit;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $diff = $max - $min;\n\
    \  if ($diff == 0) {\n    return array();\n  }\n  foreach ($numbers as $n) {\n\
    \    $result[] = ($n - $min) / $diff;\n  }\n  return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    foreach ($numbers\
    \ as $key => $value) {\n        $numbers[$key] = ($value - $min) / ($max - $min);\n\
    \    }\n    return $numbers;\n}\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  // find min and max\n  $max = max($numbers);\n  $min = min($numbers);\n\
    \  // perform the rescaling\n  $n = array();\n  foreach ($numbers as $number)\
    \ {\n    $n[] = ($number - $min) / ($max - $min);\n  }\n  return $n;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $range = $max - $min;\n\
    \  $rescaled = array();\n  foreach ($numbers as $number) {\n    $rescaled[] =\
    \ ($number - $min) / $range;\n  }\n  return $rescaled;\n}\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $number_range = array_max($numbers) - array_min($numbers);\n  $unit_numbers\
    \ = array();\n  for ($i = 0; $i < count($numbers); $i++) {\n    $unit_numbers[$i]\
    \ = ($numbers[$i] - array_min($numbers)) / $number_range;\n  }\n  return $unit_numbers;\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function array_max() in\
    \ /tmp/tmp5orelvqx.php:7\nStack trace:\n#0 /tmp/tmp5orelvqx.php(16): rescale_to_unit(Array)\n\
    #1 /tmp/tmp5orelvqx.php(20): candidate(Array)\n#2 /tmp/tmp5orelvqx.php(27): test()\n\
    #3 {main}\n  thrown in /tmp/tmp5orelvqx.php on line 7\n"
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    // Find the minimum and maximum values\n    $min = $numbers[0];\n   \
    \ $max = $numbers[0];\n    foreach ($numbers as $n) {\n        if ($n < $min)\
    \ {\n            $min = $n;\n        }\n        if ($n > $max) {\n           \
    \ $max = $n;\n        }\n    }\n    // Rescale\n    $delta = $max - $min;\n  \
    \  foreach ($numbers as $i => $n) {\n        $numbers[$i] = ($n - $min) / $delta;\n\
    \    }\n    return $numbers;\n}\n\nfunction candidate(...$args) {\n    return\
    \ rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $denom = $max -\
    \ $min;\n    $out = array();\n    foreach ($numbers as $x) {\n        $out[] =\
    \ ($x - $min) / $denom;\n    }\n    return $out;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    foreach ($numbers as $key => $number) {\n        $numbers[$key] =\
    \ ($number - $min) / $range;\n    }\n    return $numbers;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $old_min = min($numbers);\n  $old_max = max($numbers);\n  $old_range =\
    \ $old_max - $old_min;\n  $new_min = 0;\n  $new_max = 1;\n  $new_range = $new_max\
    \ - $new_min;\n  $numbers_rescaled = array();\n  foreach ($numbers as $number)\
    \ {\n    $number_new = (($number - $old_min) * $new_range) / $old_range + $new_min;\n\
    \    $numbers_rescaled[] = $number_new;\n  }\n  return $numbers_rescaled;\n}\n\
    function candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $result = array();\n  $from = min($numbers);\n  $to = max($numbers);\n\
    \  foreach ($numbers as $number) {\n    $result[] = ($number - $from) / ($to -\
    \ $from);\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $x = min($numbers);\n    $y = max($numbers);\n    $z = $y - $x;\n   \
    \ $unit_numbers = array();\n    foreach ($numbers as $number) {\n        $unit_numbers[]\
    \ = ($number - $x) / $z;\n    }\n    return $unit_numbers;\n}\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $scaled = array();\n\
    \  foreach ($numbers as $n) {\n    $scaled[] = ($n - $min) / ($max - $min);\n\
    \  }\n  return $scaled;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $out = array();\n\
    \    for ($i = 0; $i < count($numbers); $i++) {\n        $out[$i] = ($numbers[$i]\
    \ - $min) / ($max - $min);\n    }\n    return $out;\n}\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = $numbers[0];\n  $max = $numbers[0];\n  foreach ($numbers as $n)\
    \ {\n    if ($n < $min) {\n      $min = $n;\n    }\n    if ($n > $max) {\n   \
    \   $max = $n;\n    }\n  }\n  if ($min == $max) {\n    return array_fill(0, count($numbers),\
    \ 0.5);\n  }\n  $scale = 1.0 / ($max - $min);\n  $transformed = array();\n  foreach\
    \ ($numbers as $n) {\n    $transformed[] = ($n - $min) * $scale;\n  }\n  return\
    \ $transformed;\n}\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    // set min and max to the first element of $numbers\n    $min = $numbers[0];\n\
    \    $max = $numbers[0];\n    // determine min and max using a foreach loop\n\
    \    foreach ($numbers as $num) {\n        if ($num < $min) {\n            $min\
    \ = $num;\n        }\n        if ($num > $max) {\n            $max = $num;\n \
    \       }\n    }\n    // create a new array to hold the rescaled $numbers\n  \
    \  $scaled = array();\n    // for each element of $numbers, rescale it to between\
    \ 0 and 1\n    foreach ($numbers as $num) {\n        $scaled[] = ($num - $min)\
    \ / ($max - $min);\n    }\n    // return $scaled\n    return $scaled;\n}\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $numbers_count = count($numbers);\n    if ($numbers_count < 2) {\n  \
    \      return $numbers;\n    }\n    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $span = $max - $min;\n    $scaled_numbers = array();\n    for ($i = 0; $i\
    \ < $numbers_count; $i++) {\n        $scaled_numbers[$i] = ($numbers[$i] - $min)\
    \ / $span;\n    }\n    return $scaled_numbers;\n}\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    // find the minimum and maximum numbers in the array\n    $min = min($numbers);\n\
    \    $max = max($numbers);\n    // get the difference between them\n    $diff\
    \ = $max - $min;\n    // for each number in the array, rescale to unit using the\
    \ following formula:\n    // (x - min) / (max - min)\n    foreach ($numbers as\
    \ $i => $number) {\n        $numbers[$i] = ($number - $min) / $diff;\n    }\n\
    \    return $numbers;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function($num)\
    \ use ($min, $max) {\n    return ($num - $min) / ($max - $min);\n  }, $numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $diff = $max - $min;\n\
    \  $scale = ($max === $min) ? 1 : 1 / $diff;\n  return array_map(function($number)\
    \ use ($scale, $min) {\n    return ($number - $min) * $scale;\n  }, $numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $smallest = min($numbers);\n    $largest = max($numbers);\n    $result\
    \ = array();\n    foreach ($numbers as $number) {\n        $result[] = ($number\
    \ - $smallest) / ($largest - $smallest);\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $smallest = min($numbers);\n    $largest = max($numbers);\n    $result\
    \ = array();\n    foreach ($numbers as $n) {\n        if ($smallest == $largest)\
    \ {\n            $result[] = 1.0;\n        } else {\n            $result[] = ($n\
    \ - $smallest) / ($largest - $smallest);\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    return array_map(function($n) use ($min, $range) { return ($n - $min)\
    \ / $range; }, $numbers);\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $normalized = array();\n    foreach ($numbers as $number) {\n   \
    \     $normalized[] = ($number - $min) / $range;\n    }\n    return $normalized;\n\
    }\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9))\
    \ !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    // TODO: implement your rescale_to_unit function\n    $return = array();\n\
    \    $numbers_count = count($numbers);\n    $min = min($numbers);\n    $max =\
    \ max($numbers);\n    $diff = $max - $min;\n    foreach ($numbers as $key => $value)\
    \ {\n        $return[$key] = ($value - $min) / $diff;\n    }\n    return $return;\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $scaled = array();\n\
    \    foreach ($numbers as $number) {\n        if ($max == $min) {\n          \
    \  $scaled[] = 0;\n        } else {\n            $scaled[] = ($number - $min)\
    \ / ($max - $min);\n        }\n    }\n    return $scaled;\n}\n\n$a = rescale_to_unit(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0));\nprint_r($a);\n\n$b = rescale_to_unit(array(1.0, 0.0,\
    \ 3.0, 4.0, 5.0));\nprint_r($b);\n\n$c = rescale_to_unit(array(1.0, 1.0, 1.0,\
    \ 1.0, 1.0));\nprint_r($c);\n\n$d = rescale_to_unit(array(5.0, 4.0, 3.0, 2.0,\
    \ 1.0));\nprint_r($d);\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 0\n    [1] => 0.25\n    [2] => 0.5\n    [3] => 0.75\n\
    \    [4] => 1\n)\nArray\n(\n    [0] => 0.2\n    [1] => 0\n    [2] => 0.6\n   \
    \ [3] => 0.8\n    [4] => 1\n)\nArray\n(\n    [0] => 0\n    [1] => 0\n    [2] =>\
    \ 0\n    [3] => 0\n    [4] => 0\n)\nArray\n(\n    [0] => 1\n    [1] => 0.75\n\
    \    [2] => 0.5\n    [3] => 0.25\n    [4] => 0\n)\n"
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $m = min($numbers);\n    $r = max($numbers) - $m;\n    return array_map(function($x)\
    \ use ($m, $r) {\n        return ($x - $m) / $r;\n    }, $numbers);\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $ranges = $max\
    \ - $min;\n    $res = array();\n    foreach ($numbers as $number) {\n        $res[]\
    \ = ($number - $min) / $ranges;\n    }\n    return $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function($n)\
    \ use ($min, $max) {\n    return ($n - $min) / ($max - $min);\n  }, $numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $n = count($numbers);\n  $min = PHP_INT_MAX;\n  $max = PHP_INT_MIN;\n \
    \ for ($i = 0; $i < $n; $i++) {\n    $num = $numbers[$i];\n    if ($num < $min)\
    \ {\n      $min = $num;\n    }\n    if ($num > $max) {\n      $max = $num;\n \
    \   }\n  }\n  $result = array();\n  for ($i = 0; $i < $n; $i++) {\n    $result[$i]\
    \ = (1.0 / ($max - $min)) * ($numbers[$i] - $min);\n  }\n  return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9))\
    \ !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $n) {\n        $result[]\
    \ = ($n - $min) / $range;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $n) {\n        $result[]\
    \ = ($n - $min) / $range;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $max = max($numbers);\n    $min = min($numbers);\n    foreach ($numbers\
    \ as $index => $number) {\n        $numbers[$index] = ($number - $min) / ($max\
    \ - $min);\n    }\n    return $numbers;\n}\n\necho \"<pre>\";\nvar_dump(rescale_to_unit(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)));\necho \"</pre>\";\nfunction candidate(...$args) {\n \
    \   return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>array(5) {\n  [0]=>\n  float(0)\n  [1]=>\n  float(0.25)\n  [2]=>\n\
    \  float(0.5)\n  [3]=>\n  float(0.75)\n  [4]=>\n  float(1)\n}\n</pre>"
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $a = min($numbers);\n    $b = max($numbers);\n    $denom = $b - $a;\n\
    \    if ($denom === 0) {\n        return array_fill(0, count($numbers), 1);\n\
    \    } else {\n        return array_map(function($n) use ($a, $b) {\n        \
    \    return ($n - $a) / ($b - $a);\n        }, $numbers);\n    }\n}\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $max = max($numbers);\n    $min = min($numbers);\n    $scaled = array();\n\
    \    foreach ($numbers as $number) {\n        $scaled[] = ($number - $min) / ($max\
    \ - $min);\n    }\n    return $scaled;\n}\n\nfunction candidate(...$args) {\n\
    \    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $nums = array();\n    foreach ($numbers as $number) {\n        $nums[]\
    \ = ($number - $min) / $range;\n    }\n    return $nums;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $results = array();\n\
    \    foreach ($numbers as $number) {\n        $results[] = ($number - $min) /\
    \ ($max - $min);\n    }\n    return $results;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    // Find minimum and maximum values in $numbers\n    $min = min($numbers);\n\
    \    $max = max($numbers);\n    // Calculate range of values\n    $range = $max\
    \ - $min;\n    if ($range == 0) {\n        // If $range is 0, we can't divide\
    \ by it (we'd get a division by zero error).\n        // So, we'll divide by a\
    \ very small number instead.\n        $range = 0.00000000000001;\n    }\n    //\
    \ Apply the linear transformation to each number\n    foreach ($numbers as $i\
    \ => $number) {\n        $numbers[$i] = ($number - $min) / $range;\n    }\n  \
    \  return $numbers;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $max = max($numbers);\n  $min = min($numbers);\n  $length = $max - $min;\n\
    \  foreach ($numbers as $key => $number) {\n    $numbers[$key] = ($number - $min)\
    \ / $length;\n  }\n  return $numbers;\n}\n\nfunction candidate(...$args) {\n \
    \   return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $newNumbers = array();\n    $min = $numbers[0];\n    $max = $numbers[0];\n\
    \    for ($i = 0; $i < count($numbers); $i++) {\n        if ($numbers[$i] < $min)\
    \ {\n            $min = $numbers[$i];\n        }\n        if ($numbers[$i] > $max)\
    \ {\n            $max = $numbers[$i];\n        }\n    }\n    for ($i = 0; $i <\
    \ count($numbers); $i++) {\n        $newNumbers[$i] = ($numbers[$i] - $min) /\
    \ ($max - $min);\n    }\n    return $newNumbers;\n}\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $max = max($numbers);\n  $min = min($numbers);\n  $newmax = 1;\n  $newmin\
    \ = 0;\n  $output = array();\n  foreach ($numbers as $key => $number) {\n    $output[$key]\
    \ = ($number - $min) * ($newmax - $newmin) / ($max - $min) + $newmin;\n  }\n \
    \ return $output;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $x = array();\n  foreach\
    \ ($numbers as $i) {\n    array_push($x, ($i - $min) / ($max - $min));\n  }\n\
    \  return $x;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    return array_map(function($num)\
    \ use ($min, $max) {\n        return ($num - $min) / ($max - $min);\n    }, $numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  // TODO\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkq3s3ffy.php:15\n\
    Stack trace:\n#0 /tmp/tmpkq3s3ffy.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpkq3s3ffy.php\
    \ on line 15\n"
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  foreach ($numbers as\
    \ $i => $number) {\n    $numbers[$i] = ($number - $min) / ($max - $min);\n  }\n\
    \  return $numbers;\n}\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $max = max($numbers);\n    $min = min($numbers);\n    $size = count($numbers);\n\
    \    for ($i = 0; $i < $size; $i++) {\n        $numbers[$i] = ($numbers[$i] -\
    \ $min) / ($max - $min);\n    }\n    return $numbers;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $d = $max - $min;\n\
    \    return array_map(function($n) use ($min, $d) {\n        return ($n - $min)\
    \ / $d;\n    }, $numbers);\n}\n\n$transformed = rescale_to_unit(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0));\n\necho '<pre>';\nprint_r($transformed);\necho '</pre>';\n\
    function candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => 0\n    [1] => 0.25\n    [2] => 0.5\n    [3] =>\
    \ 0.75\n    [4] => 1\n)\n</pre>"
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $result = array();\n\
    \    $denom = $max - $min;\n    foreach ($numbers as $number) {\n        $result[]\
    \ = ($number - $min) / $denom;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $max = $numbers[0];\n    $min = $numbers[0];\n    foreach ($numbers as\
    \ $number) {\n        if ($number > $max) {\n            $max = $number;\n   \
    \     }\n        if ($number < $min) {\n            $min = $number;\n        }\n\
    \    }\n    $scale = $max - $min;\n    $transformed = array();\n    foreach ($numbers\
    \ as $number) {\n        $transformed[] = ($number - $min) / $scale;\n    }\n\
    \    return $transformed;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $width = $max -\
    \ $min;\n    $new_numbers = array();\n    foreach ($numbers as $num) {\n     \
    \   $new_numbers[] = ($num - $min) / $width;\n    }\n    return $new_numbers;\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $range = $max - $min;\n\
    \  foreach ($numbers as $number) {\n    $scaled[] = ($number - $min) / $range;\n\
    \  }\n  return $scaled;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    // --- Your code goes here ---\n    // set min and max variables to the\
    \ first number\n    $min = $numbers[0];\n    $max = $numbers[0];\n    // loop\
    \ through the numbers array\n    for ($i = 0; $i < count($numbers); $i++) {\n\
    \        // if the number is less than min, set min to the number\n        if\
    \ ($numbers[$i] < $min) {\n            $min = $numbers[$i];\n        }\n     \
    \   // if the number is more than max, set max to the number\n        if ($numbers[$i]\
    \ > $max) {\n            $max = $numbers[$i];\n        }\n    }\n    // loop through\
    \ numbers again\n    for ($i = 0; $i < count($numbers); $i++) {\n        // set\
    \ the number to the difference between the number and min\n        // divided\
    \ by the difference between max and min\n        $numbers[$i] = ($numbers[$i]\
    \ - $min) / ($max - $min);\n    }\n    // return the array\n    return $numbers;\n\
    }\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9))\
    \ !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $scaled = array();\n\
    \    foreach ($numbers as $val) {\n        $scaled[] = ($val - $min) / ($max -\
    \ $min);\n    }\n    return $scaled;\n}\n\nfunction candidate(...$args) {\n  \
    \  return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $range = $max - $min;\n\
    \  $result = array();\n  foreach ($numbers as $number) {\n    $result[] = ($number\
    \ - $min) / $range;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $range = $max - $min;\n\
    \  return array_map(function($n) use ($min, $range) {\n    return ($n - $min)\
    \ / $range;\n  }, $numbers);\n}\n\nfunction candidate(...$args) {\n    return\
    \ rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $denom = $max - $min;\n\
    \  $nums = array();\n  foreach ($numbers as $number) {\n    $nums[] = ($number\
    \ - $min) / $denom;\n  }\n  return $nums;\n}\nfunction candidate(...$args) {\n\
    \    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $numbers_rescaled = array();\n    $max = max($numbers);\n    $min = min($numbers);\n\
    \    foreach ($numbers as $number) {\n        $numbers_rescaled[] = ($number -\
    \ $min) / ($max - $min);\n    }\n    return $numbers_rescaled;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $i => $value) {\n  \
    \      $result[$i] = ($value - $min) / $range;\n    }\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9))\
    \ !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  // Find min and max of numbers\n  $min = min($numbers);\n  $max = max($numbers);\n\
    \  // Map each number to its position on the interval [0, 1]\n  return array_map(function($value)\
    \ use ($min, $max) {\n    return ($value - $min) / ($max - $min);\n  }, $numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
