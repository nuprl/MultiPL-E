name: HumanEval_57_monotonic
language: php
prompt: "<?php\n// Return true is array elements are monotonically increasing or decreasing.\n\
  // >>> monotonic(array(1, 2, 4, 20))\n// true\n// >>> monotonic(array(1, 20, 4,\
  \ 10))\n// false\n// >>> monotonic(array(4, 1, 0, -10))\n// true\nfunction monotonic($l)\
  \ {\n"
tests: "function candidate(...$args) {\n    return monotonic(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(1, 2, 4, 10)) !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(1, 2, 4, 20)) !== true) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 20, 4, 10)) !== false)\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 1, 0, -10))\
  \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
  \ 1, 1, 0)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
  \ 2, 3, 2, 5, 60)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(array(1, 2, 3, 4, 5, 60)) !== true) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(9, 9, 9, 9)) !== true) { throw new Exception(\"Test\
  \ failed!\"); }\n}\n\ntest();"
completions: ["    if (sizeof($l) == 1) {\n        return true;\n    }\n    $t = $l[0]\
    \ < $l[1];\n    for ($i = 1; $i < sizeof($l); $i++) {\n        if ($t != ($l[$i-1]\
    \ < $l[$i])) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\nif (count($argv) != 2) {\n    exit('Please specify 1 input file!' . PHP_EOL);\n\
    }\n\n$file = $argv[1];\nif (!is_readable($file)) {\n    exit('The file is not\
    \ readable!' . PHP_EOL);\n}\n\n$lines = explode(PHP_EOL, file_get_contents($file));\n\
    $linecount = count($lines);\n\n$input = [];\nforeach ($lines as $line) {\n   \
    \ $input[] = explode(' ', $line);\n}\n\n$valid = 0;\nforeach ($input as $l) {\n\
    \    if (monotonic($l)) {\n        $valid++;\n    }\n}\n\necho \"Valid passphrase\
    \ count: {$valid}.\" . PHP_EOL;", "    if (count($l) <= 1) {\n        return true;\n\
    \    }\n    $mono = [];\n    $signs = [];\n    for ($i = 0; $i < count($l); $i++)\
    \ {\n        $mono[$i] = $l[$i] - $l[$i - 1];\n        $signs[$i] = $mono[$i]\
    \ >= 0;\n    }\n    return count(array_unique($signs)) == 1;\n}\n", "\t$order\
    \ = NULL;\n\t$last = NULL;\n\tforeach ($l as $v) {\n\t\tif ($last != NULL) {\n\
    \t\t\tif ($v > $last) {\n\t\t\t\tif ($order != NULL && $order != 1)\n\t\t\t\t\t\
    return false;\n\t\t\t\t$order = 1;\n\t\t\t} else if ($v < $last) {\n\t\t\t\tif\
    \ ($order != NULL && $order != -1)\n\t\t\t\t\treturn false;\n\t\t\t\t$order =\
    \ -1;\n\t\t\t}\n\t\t}\n\t\t$last = $v;\n\t}\n\treturn true;\n}\n", "    $check\
    \ = \"\";\n    foreach ($l as $i) {\n        if ($check == \"increasing\") {\n\
    \            if ($i > $last) {\n                $last = $i;\n            } else\
    \ {\n                return false;\n            }\n        } elseif ($check ==\
    \ \"decreasing\") {\n            if ($i < $last) {\n                $last = $i;\n\
    \            } else {\n                return false;\n            }\n        }\
    \ else {\n            $last = $i;\n            if ($i > $last) {\n           \
    \     $check = \"increasing\";\n            } elseif ($i < $last) {\n        \
    \        $check = \"decreasing\";\n            }\n        }\n    }\n    return\
    \ true;\n}\necho monotonic(array(4, 1, 0, -10));", "    $result = true;\n    for\
    \ ($i = 0; $i < count($l) - 1; $i++) {\n        if ($l[$i] > $l[$i + 1]) {\n \
    \           $result = $result && ($l[$i] - $l[$i + 1] >= 0);\n        } else {\n\
    \            $result = $result && ($l[$i + 1] - $l[$i] >= 0);\n        }\n   \
    \ }\n    return $result;\n}\n\nif (monotonic(array(1, 2, 4, 20))) {\n    echo\
    \ \"true\\n\";\n} else {\n    echo \"false\\n\";\n}\n\nif (monotonic(array(1,\
    \ 20, 4, 10))) {\n    echo \"true\\n\";\n} else {\n    echo \"false\\n\";\n}\n\
    \nif (monotonic(array(4, 1, 0, -10))) {\n    echo \"true\\n\";\n} else {\n   \
    \ echo \"false\\n\";\n}", "    $sign = null;\n    for ($i = 0; $i < count($l)\
    \ - 1; $i++) {\n        $sign2 = $l[$i + 1] - $l[$i];\n        if ($sign2 == 0)\
    \ continue;\n        if ($sign === null) {\n            $sign = $sign2;\n    \
    \    } else if ($sign * $sign2 < 0) {\n            return false;\n        }\n\
    \    }\n    return true;\n}\n", "\tif(count($l) <= 1) return true;\n\tif($l[0]\
    \ == $l[1]) return monotonic(array_slice($l, 1));\n\t$diff = $l[0] - $l[1];\n\t\
    for($i = 1; $i < count($l) - 1; $i++) {\n\t\tif($diff != $l[$i] - $l[$i + 1])\
    \ return false;\n\t}\n\treturn true;\n}", "    $increasing = NULL;\n    foreach\
    \ ($l as $i => $v) {\n        if ($i > 0) {\n            if (is_null($increasing))\
    \ {\n                $increasing = $v > $l[$i - 1];\n            } else {\n  \
    \              if (($increasing && $v < $l[$i - 1]) || (!$increasing && $v > $l[$i\
    \ - 1])) {\n                    return false;\n                }\n           \
    \ }\n        }\n    }\n    return true;\n}\n", "  $isDecreasing = true;\n  $isIncreasing\
    \ = true;\n  $curr = NULL;\n  foreach ($l as $i) {\n    if ($curr === NULL) {\n\
    \      $curr = $i;\n      continue;\n    }\n    if ($curr > $i) {\n      $isIncreasing\
    \ = false;\n    }\n    if ($curr < $i) {\n      $isDecreasing = false;\n    }\n\
    \    if (!$isIncreasing && !$isDecreasing) {\n      return false;\n    }\n   \
    \ $curr = $i;\n  }\n  return true;\n}\n\nvar_dump(monotonic(array(1, 2, 4, 20)));\n\
    var_dump(monotonic(array(1, 20, 4, 10)));\nvar_dump(monotonic(array(4, 1, 0, -10)));",
  "    if (is_array($l)) {\n        $len = count($l);\n        $k = 0;\n        for\
    \ ($i = 0; $i < $len - 1; $i++) {\n            if ($l[$i + 1] > $l[$i]) {\n  \
    \              $k++;\n            }\n        }\n        for ($i = 0; $i < $len\
    \ - 1; $i++) {\n            if ($l[$i + 1] < $l[$i]) {\n                $k++;\n\
    \            }\n        }\n        if ($k === 0) {\n            return true;\n\
    \        } else {\n            return false;\n        }\n    } else {\n      \
    \  return false;\n    }\n}\n", "  $order = null;\n  for ($i = 0; $i < count($l)\
    \ - 1; $i++) {\n    if ($l[$i] < $l[$i + 1]) {\n      if ($order != null && $order\
    \ != -1) {\n        return false;\n      }\n      $order = 1;\n    } else if ($l[$i]\
    \ > $l[$i + 1]) {\n      if ($order != null && $order != 1) {\n        return\
    \ false;\n      }\n      $order = -1;\n    }\n  }\n  return true;\n}\n", "   \
    \ return checkOrder($l, function($a, $b) {\n        return $a < $b;\n    }) ||\
    \ checkOrder($l, function($a, $b) {\n        return $a > $b;\n    });\n}\n", "\t\
    for ($i = 1; $i < count($l); $i++) {\n\t\tif (($l[$i] - $l[$i - 1]) > 0) {\n\t\
    \t\t$sign = 1;\n\t\t\tbreak;\n\t\t} else if (($l[$i] - $l[$i - 1]) < 0) {\n\t\t\
    \t$sign = -1;\n\t\t\tbreak;\n\t\t}\n\t}\n\tfor ($i = 1; $i < count($l); $i++)\
    \ {\n\t\tif ($sign > 0 && ($l[$i] - $l[$i - 1]) < 0) {\n\t\t\treturn false;\n\t\
    \t} else if ($sign < 0 && ($l[$i] - $l[$i - 1]) > 0) {\n\t\t\treturn false;\n\t\
    \t}\n\t}\n\treturn true;\n}\n", "  $a = true;\n  $b = true;\n  for ($i = 1; $i\
    \ < count($l); $i++) {\n    if ($l[$i] < $l[$i - 1]) {\n      $a = false;\n  \
    \  }\n    if ($l[$i] > $l[$i - 1]) {\n      $b = false;\n    }\n  }\n  return\
    \ $a || $b;\n}\n", "  if (count($l) <= 1) return true;\n  return array_reduce(\n\
    \    array_slice($l, 1),\n    function($acc, $elem) use ($l) {\n      return $acc\
    \ && $elem === (array_values($l)[0] + count($l) - 1) ||\n        $elem === (array_values($l)[0]\
    \ - count($l) + 1);\n    },\n    true\n  );\n}\n", "    $increasing = null;\n\
    \    $last_el = null;\n    for ($i = 0; $i < count($l); $i++) {\n        if ($i\
    \ == 0) {\n            $last_el = $l[$i];\n            continue;\n        }\n\
    \        if ($increasing == null) {\n            if ($l[$i] > $last_el) {\n  \
    \              $increasing = true;\n            } elseif ($l[$i] < $last_el) {\n\
    \                $increasing = false;\n            }\n        } else {\n     \
    \       if ($increasing) {\n                if ($l[$i] < $last_el) {\n       \
    \             return false;\n                }\n            } else {\n       \
    \         if ($l[$i] > $last_el) {\n                    return false;\n      \
    \          }\n            }\n        }\n        $last_el = $l[$i];\n    }\n  \
    \  return true;\n}\n", "  $n = count($l);\n  if($n <= 1) {\n    return true;\n\
    \  }\n  $dec = $l[0] > $l[1];\n  for($i = 1; $i < $n - 1; $i++) {\n    if($dec)\
    \ {\n      if($l[$i] < $l[$i + 1]) {\n        return false;\n      }\n    } else\
    \ {\n      if($l[$i] > $l[$i + 1]) {\n        return false;\n      }\n    }\n\
    \  }\n  return true;\n}\n", "    $isIncreasing = false;\n    $isDecreasing = false;\n\
    \    for ($i = 0; $i < sizeof($l) - 1; $i++) {\n        if ($l[$i] < $l[$i + 1])\
    \ {\n            $isIncreasing = true;\n        } else if ($l[$i] > $l[$i + 1])\
    \ {\n            $isDecreasing = true;\n        }\n    }\n    return ($isIncreasing\
    \ && !$isDecreasing) || (!$isIncreasing && $isDecreasing);\n}", "    $inc = $dec\
    \ = true;\n    $n = count($l);\n    for ($i = 1; $i < $n; $i++) {\n        if\
    \ ($l[$i] > $l[$i - 1]) {\n            $dec = false;\n        } else if ($l[$i]\
    \ < $l[$i - 1]) {\n            $inc = false;\n        }\n    }\n    return $inc\
    \ || $dec;\n}\n", "\t$v = $l[0];\n\t$i = 1;\n\t$inc = 0;\n\t$dec = 0;\n\twhile\
    \ ($v == $l[$i]) {\n\t\t$i++;\n\t}\n\tif ($v < $l[$i]) {\n\t\t$inc = 1;\n\t} else\
    \ {\n\t\t$dec = 1;\n\t}\n\twhile ($i < count($l)) {\n\t\tif ($inc) {\n\t\t\tif\
    \ ($l[$i] >= $v) {\n\t\t\t\t$v = $l[$i];\n\t\t\t} else {\n\t\t\t\treturn false;\n\
    \t\t\t}\n\t\t} else {\n\t\t\tif ($l[$i] <= $v) {\n\t\t\t\t$v = $l[$i];\n\t\t\t\
    } else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\t$i++;\n\t}\n\treturn true;\n\
    }"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
