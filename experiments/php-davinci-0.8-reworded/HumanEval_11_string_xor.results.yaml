language: php
name: HumanEval_11_string_xor
results:
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \t// $a, $b are both binary strings\n\t// convert them to decimal integers\n\t\
    $a_dec = bindec($a);\n\t$b_dec = bindec($b);\n\t// perform binary xor on the decimals\n\
    \t$result_dec = $a_dec ^ $b_dec;\n\t// convert result back to binary string\n\t\
    $result = decbin($result_dec);\n\treturn $result;\n}\n\necho string_xor(\"010\"\
    , \"110\");\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "100\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprin5eo14.php:24\n\
    Stack trace:\n#0 /tmp/tmprin5eo14.php(29): test()\n#1 {main}\n  thrown in /tmp/tmprin5eo14.php\
    \ on line 24\n"
  timestamp: 1659823299
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \t$result = \"\";\n\t$len = strlen($a);\n\tfor ($i = 0; $i < $len; $i++) {\n\t\
    \t$result .= $a[$i] ^ $b[$i];\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcr3wesmq.php:20\n\
    Stack trace:\n#0 /tmp/tmpcr3wesmq.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpcr3wesmq.php\
    \ on line 20\n"
  timestamp: 1659823299
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  // Your code here\n}\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpypookq_g.php:14\n\
    Stack trace:\n#0 /tmp/tmpypookq_g.php(19): test()\n#1 {main}\n  thrown in /tmp/tmpypookq_g.php\
    \ on line 14\n"
  timestamp: 1659823299
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $xor_string = \"\";\n  for ($i = 0; $i < strlen($a); $i++) {\n    $xor_string\
    \ .= $a[$i] ^ $b[$i];\n  }\n  return $xor_string;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx3l9uuqv.php:19\n\
    Stack trace:\n#0 /tmp/tmpx3l9uuqv.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpx3l9uuqv.php\
    \ on line 19\n"
  timestamp: 1659823299
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \    $lena = strlen($a);\n    $lenb = strlen($b);\n    if ($lena != $lenb) {\n\
    \        return \"\";\n    }\n    $ret = \"\";\n    for ($i = 0; $i < $lena; $i++)\
    \ {\n        $ret .= $a[$i] ^ $b[$i];\n    }\n    return $ret;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0rj_vqxq.php:24\n\
    Stack trace:\n#0 /tmp/tmp0rj_vqxq.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp0rj_vqxq.php\
    \ on line 24\n"
  timestamp: 1659823299
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $a_len = strlen($a);\n  $b_len = strlen($b);\n  $length = max($a_len, $b_len);\n\
    \  $a = str_pad($a, $length, '0', STR_PAD_LEFT);\n  $b = str_pad($b, $length,\
    \ '0', STR_PAD_LEFT);\n  $xor = '';\n  for ($i = 0; $i < $length; $i++) {\n  \
    \  $a_bit = (int) $a[$i];\n    $b_bit = (int) $b[$i];\n    $bit = $a_bit ^ $b_bit;\n\
    \    $xor .= (string) $bit;\n  }\n  return $xor;\n}\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823299
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $c = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $c .= $a[$i] xor $b[$i];\n\
    \  }\n  return $c;\n}\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2_vtzxhq.php:18\n\
    Stack trace:\n#0 /tmp/tmp2_vtzxhq.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp2_vtzxhq.php\
    \ on line 18\n"
  timestamp: 1659823299
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $result = \"\";\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= intval($a[$i])\
    \ ^ intval($b[$i]);\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823299
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  // Your code here\n  // $a = convertToBin($a);\n  // $b = convertToBin($b);\n\
    \  return decbin(bindec($a) ^ bindec($b));\n  // return bin2hex(bindec($a) ^ bindec($b));\n\
    }\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkq7liems.php:19\n\
    Stack trace:\n#0 /tmp/tmpkq7liems.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpkq7liems.php\
    \ on line 19\n"
  timestamp: 1659823299
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  if (strlen($a) != strlen($b)) {\n    return \"Length mismatch\";\n  }\n  $out\
    \ = \"\";\n  for ($i = 0; $i < strlen($a); $i++) {\n    $out .= ($a[$i] ^ $b[$i]);\n\
    \  }\n  return $out;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpif_qta5v.php:22\n\
    Stack trace:\n#0 /tmp/tmpif_qta5v.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpif_qta5v.php\
    \ on line 22\n"
  timestamp: 1659823299
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $result = \"\";\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= ($a[$i]\
    \ ^ $b[$i]);\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n  \
    \  return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsqy0a76n.php:19\n\
    Stack trace:\n#0 /tmp/tmpsqy0a76n.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpsqy0a76n.php\
    \ on line 19\n"
  timestamp: 1659823299
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $result = array();\n  $a = str_split($a);\n  $b = str_split($b);\n  $size =\
    \ count($a);\n  for ($i = 0; $i < $size; $i++) {\n    $result[] = (int) $a[$i]\
    \ ^ (int) $b[$i];\n  }\n  return implode($result);\n}\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823299
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $result = \"\";\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i]\
    \ ^ $b[$i];\n  }\n  return $result;\n}\nfunction candidate(...$args) {\n    return\
    \ string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\"\
    , \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp78tk4boe.php:18\n\
    Stack trace:\n#0 /tmp/tmp78tk4boe.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp78tk4boe.php\
    \ on line 18\n"
  timestamp: 1659823299
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \    return decbin(bindec($a) ^ bindec($b));\n}\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpss6v43iy.php:14\n\
    Stack trace:\n#0 /tmp/tmpss6v43iy.php(19): test()\n#1 {main}\n  thrown in /tmp/tmpss6v43iy.php\
    \ on line 14\n"
  timestamp: 1659823299
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \treturn strval(bindec($a) ^ bindec($b));\n}\n\nfunction candidate(...$args) {\n\
    \    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppodegep3.php:15\n\
    Stack trace:\n#0 /tmp/tmppodegep3.php(20): test()\n#1 {main}\n  thrown in /tmp/tmppodegep3.php\
    \ on line 15\n"
  timestamp: 1659823299
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \    $num1 = (int)$a;\n    $num2 = (int)$b;\n    $res = decbin($num1 ^ $num2);\n\
    \    return $res;\n}\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0stafg0g.php:17\n\
    Stack trace:\n#0 /tmp/tmp0stafg0g.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp0stafg0g.php\
    \ on line 17\n"
  timestamp: 1659823299
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $length = max(strlen($a), strlen($b));\n  $result = \"\";\n  for ($i = 0; $i\
    \ < $length; $i++) {\n    $x = ($i < strlen($a)) ? (int)$a[$i] : 0;\n    $y =\
    \ ($i < strlen($b)) ? (int)$b[$i] : 0;\n    $result .= ($x ^ $y);\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823299
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \    // Convert hex string to binary string\n    $aBin = hex2bin($a);\n    $bBin\
    \ = hex2bin($b);\n    $aBin = str_split($aBin);\n    $bBin = str_split($bBin);\n\
    \    $result = \"\";\n    // XOR strings by iterating through them\n    foreach($aBin\
    \ as $key => $val) {\n        if ($val == $bBin[$key]) {\n            $result\
    \ .= \"0\";\n        } else {\n            $result .= \"1\";\n        }\n    }\n\
    \    // Return result as hex string\n    return bin2hex($result);\n}\n\necho string_xor(\"\
    010\", \"110\");\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: hex2bin(): Hexadecimal input string must have an even length\
    \ in /tmp/tmpy0elebtw.php on line 8\n\nWarning: hex2bin(): Hexadecimal input string\
    \ must have an even length in /tmp/tmpy0elebtw.php on line 9\n30\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpy0elebtw.php:32\nStack trace:\n\
    #0 /tmp/tmpy0elebtw.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpy0elebtw.php\
    \ on line 32\n"
  timestamp: 1659823299
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \    $res = \"\";\n    for ($i = 0; $i < strlen($a); $i++) {\n        $res .=\
    \ intval($a[$i]) ^ intval($b[$i]);\n    }\n    return $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823299
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \    $a = str_split($a);\n    $b = str_split($b);\n    $len = count($a);\n   \
    \ $result = [];\n    for ($i = 0; $i < $len; $i++) {\n        $result[] = ($a[$i]\
    \ == $b[$i]) ? 0 : 1;\n    }\n    return implode($result);\n}\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823299
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $stringLength = strlen($a);\n  $result = '';\n  for ($i = 0; $i < $stringLength;\
    \ $i++) {\n    $aBit = substr($a, $i, 1);\n    $bBit = substr($b, $i, 1);\n  \
    \  if ($aBit == $bBit) {\n      $result .= '0';\n    } else {\n      $result .=\
    \ '1';\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n \
    \   return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $nA = strlen($a);\n  $nB = strlen($b);\n  $nMax = max($nA, $nB);\n  $a = str_pad($a,\
    \ $nMax, '0', STR_PAD_LEFT);\n  $b = str_pad($b, $nMax, '0', STR_PAD_LEFT);\n\
    \  for ($i = 0; $i < $nMax; $i++) {\n    $res[$i] = $a[$i] ^ $b[$i];\n  }\n  return\
    \ implode('', $res);\n}\n$res = string_xor(\"010\", \"110\");\nprint_r($res);\n\
    function candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\x01\0\0\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl6710yx6.php:24\n\
    Stack trace:\n#0 /tmp/tmpl6710yx6.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpl6710yx6.php\
    \ on line 24\n"
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  \n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\")\
    \ !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppbbm939k.php:15\n\
    Stack trace:\n#0 /tmp/tmppbbm939k.php(20): test()\n#1 {main}\n  thrown in /tmp/tmppbbm939k.php\
    \ on line 15\n"
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $result = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i]\
    \ ^ $b[$i];\n  }\n  return $result;\n}\nfunction candidate(...$args) {\n    return\
    \ string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\"\
    , \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpetouehbu.php:18\n\
    Stack trace:\n#0 /tmp/tmpetouehbu.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpetouehbu.php\
    \ on line 18\n"
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  // your code here\n}\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg7jpvi64.php:14\n\
    Stack trace:\n#0 /tmp/tmpg7jpvi64.php(19): test()\n#1 {main}\n  thrown in /tmp/tmpg7jpvi64.php\
    \ on line 14\n"
  timestamp: 1659977959
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \tif (strlen($a) == strlen($b)) {\n\t\t$result = \"\";\n\t\tfor ($i = 0; $i <\
    \ strlen($a); $i++) {\n\t\t\tif ($a[$i] == $b[$i]) {\n\t\t\t\t$result .= \"0\"\
    ;\n\t\t\t} else {\n\t\t\t\t$result .= \"1\";\n\t\t\t}\n\t\t}\n\t\treturn $result;\n\
    \t} else {\n\t\treturn false;\n\t}\n}\necho string_xor(\"010\", \"110\") . \"\\\
    n\";\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\")\
    \ !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: '100

    '
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \    $xor = [];\n    $a_len = strlen($a);\n    $b_len = strlen($b);\n    $len\
    \ = max($a_len, $b_len);\n    for ($i = 0; $i < $len; $i++) {\n        $xor[]\
    \ = ($a[$i] ?? '0') ^ ($b[$i] ?? '0');\n    }\n    return implode('', $xor);\n\
    }\n\necho string_xor(\"001\", \"110\");\nfunction candidate(...$args) {\n    return\
    \ string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\"\
    , \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\x01\x01\x01\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqvb7869w.php:23\n\
    Stack trace:\n#0 /tmp/tmpqvb7869w.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpqvb7869w.php\
    \ on line 23\n"
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \    $xor = $a ^ $b;\n    $bin = decbin($xor);\n    return str_pad($bin, strlen($a),\
    \ '0', STR_PAD_LEFT);\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: decbin(): Argument #1 ($num) must be\
    \ of type int, string given in /tmp/tmpgwlqk8vt.php:8\nStack trace:\n#0 /tmp/tmpgwlqk8vt.php(8):\
    \ decbin('\\x00\\x01\\x00\\x00\\x01\\x00')\n#1 /tmp/tmpgwlqk8vt.php(13): string_xor('111000',\
    \ '101010')\n#2 /tmp/tmpgwlqk8vt.php(17): candidate('111000', '101010')\n#3 /tmp/tmpgwlqk8vt.php(22):\
    \ test()\n#4 {main}\n  thrown in /tmp/tmpgwlqk8vt.php on line 8\n"
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $a_bin = str_split($a);\n  $b_bin = str_split($b);\n  $result = '';\n  for\
    \ ($i = 0; $i < count($a_bin); $i++) {\n    $result .= $a_bin[$i] ^ $b_bin[$i];\n\
    \  }\n  return $result;\n}\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvc1_1zxp.php:20\n\
    Stack trace:\n#0 /tmp/tmpvc1_1zxp.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpvc1_1zxp.php\
    \ on line 20\n"
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \    // First, ensure that the two strings are the same length.\n    $a_len =\
    \ strlen($a);\n    $b_len = strlen($b);\n    if ($a_len !== $b_len) {\n      \
    \  $min = min($a_len, $b_len);\n        $max = max($a_len, $b_len);\n        $diff\
    \ = $max - $min;\n        if ($a_len === $max) {\n            $a = str_pad($a,\
    \ $max, '0', STR_PAD_LEFT);\n        } else {\n            $b = str_pad($b, $max,\
    \ '0', STR_PAD_LEFT);\n        }\n    }\n    // XOR the two strings.\n    $result\
    \ = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result .= $a[$i]\
    \ ^ $b[$i];\n    }\n    return $result;\n}\nfunction candidate(...$args) {\n \
    \   return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuefoimsz.php:32\n\
    Stack trace:\n#0 /tmp/tmpuefoimsz.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpuefoimsz.php\
    \ on line 32\n"
  timestamp: 1659977959
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \t$aLen = strlen($a);\n\t$bLen = strlen($b);\n\tif ($aLen != $bLen) {\n\t\tthrow\
    \ new Exception(\"Strings not of equal length\");\n\t}\n\t$result = \"\";\n\t\
    for ($i = 0; $i < $aLen; $i++) {\n\t\t$aChr = substr($a, $i, 1);\n\t\t$bChr =\
    \ substr($b, $i, 1);\n\t\tif ($aChr == $bChr) {\n\t\t\t$result .= \"0\";\n\t\t\
    } else {\n\t\t\t$result .= \"1\";\n\t\t}\n\t}\n\treturn $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977959
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \t$i = 0;\n\t$str = \"\";\n\twhile($i < strlen($a)) {\n\t\tif($a[$i] == $b[$i])\
    \ {\n\t\t\t$str .= \"0\";\n\t\t} else {\n\t\t\t$str .= \"1\";\n\t\t}\n\t\t$i++;\n\
    \t}\n\treturn $str;\n}\n\n$a = \"01001010101\";\n$b = \"010010101010\";\necho\
    \ string_xor($a, $b);\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: '00000000000'
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  // your code\n}\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpytjdmrgs.php:14\n\
    Stack trace:\n#0 /tmp/tmpytjdmrgs.php(19): test()\n#1 {main}\n  thrown in /tmp/tmpytjdmrgs.php\
    \ on line 14\n"
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $str_xor = '';\n  $len = strlen($a);\n  for ($i = 0; $i < $len; $i++) {\n \
    \   $a_digit = substr($a, $i, 1);\n    $b_digit = substr($b, $i, 1);\n    $xor_result\
    \ = $a_digit ^ $b_digit;\n    $str_xor .= $xor_result;\n  }\n  return $str_xor;\n\
    }\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjtuov3vh.php:22\n\
    Stack trace:\n#0 /tmp/tmpjtuov3vh.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpjtuov3vh.php\
    \ on line 22\n"
  timestamp: 1659977959
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $strlen = strlen($a);\n  $result = \"\";\n  for ($i = 0; $i < $strlen; $i++)\
    \ {\n    $result .= ((int)$a[$i] ^ (int)$b[$i]);\n  }\n  return $result;\n}\n\n\
    function candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $result = \"\";\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i]\
    \ ^ $b[$i];\n  }\n  return $result;\n}\nfunction candidate(...$args) {\n    return\
    \ string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\"\
    , \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp78tk4boe.php:18\n\
    Stack trace:\n#0 /tmp/tmp78tk4boe.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp78tk4boe.php\
    \ on line 18\n"
  timestamp: 1659823299
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  if (strlen($a) !== strlen($b)) {\n    return \"\";\n  }\n  $length = strlen($a);\n\
    \  $result = \"\";\n  for ($i = 0; $i < $length; $i++) {\n    $result .= $a[$i]\
    \ ^ $b[$i];\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n   \
    \ return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpocnsp_3x.php:23\n\
    Stack trace:\n#0 /tmp/tmpocnsp_3x.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpocnsp_3x.php\
    \ on line 23\n"
  timestamp: 1659977959
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $result = \"\";\n  $number = strlen($a);\n  for ($i = 0; $i < $number; $i++)\
    \ {\n    if ($a[$i] == $b[$i]) {\n      $result .= \"0\";\n    } else {\n    \
    \  $result .= \"1\";\n    }\n  }\n  return $result;\n}\n\necho string_xor(\"010\"\
    , \"110\") . \"\\n\";\necho string_xor(\"010\", \"000\") . \"\\n\";\necho string_xor(\"\
    111\", \"000\") . \"\\n\";\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: '100

    010

    111

    '
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $strlen = strlen($a);\n  $c = \"\";\n  for ($i = 0; $i < $strlen; $i++) {\n\
    \    $c .= ($a[$i] ^ $b[$i]) ? \"1\" : \"0\";\n  }\n  return $c;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp33s0kgjn.php:20\n\
    Stack trace:\n#0 /tmp/tmp33s0kgjn.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp33s0kgjn.php\
    \ on line 20\n"
  timestamp: 1659977959
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \    $str1 = $a;\n    $str2 = $b;\n    $bin_str1 = str_split($str1);\n    $bin_str2\
    \ = str_split($str2);\n    $result = [];\n    for ($i = 0; $i < strlen($str1);\
    \ $i++) {\n        if ($bin_str1[$i] == $bin_str2[$i]) {\n            $result[]\
    \ = '0';\n        } else {\n            $result[] = '1';\n        }\n    }\n \
    \   return implode('', $result);\n}\n\nfunction candidate(...$args) {\n    return\
    \ string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\"\
    , \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \    $a = str_split($a);\n    $b = str_split($b);\n    $r = [];\n    for ($i =\
    \ 0; $i < count($a); $i++) {\n        $r[] = (int)$a[$i] xor (int)$b[$i];\n  \
    \  }\n    return implode($r);\n}\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0uxd0kob.php:20\n\
    Stack trace:\n#0 /tmp/tmp0uxd0kob.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp0uxd0kob.php\
    \ on line 20\n"
  timestamp: 1659977959
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $xor .= (intval($a[$i])\
    \ + intval($b[$i])) % 2;\n  }\n  return $xor;\n}\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977959
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $len = max(strlen($a), strlen($b));\n  $a = str_pad($a, $len, \"0\", STR_PAD_LEFT);\n\
    \  $b = str_pad($b, $len, \"0\", STR_PAD_LEFT);\n  $result = '';\n  for ($i =\
    \ 0; $i < $len; $i++) {\n    $result .= $a[$i] === $b[$i] ? \"0\" : \"1\";\n \
    \ }\n  return $result;\n}\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \    $out = \"\";\n    for($i = 0; $i < strlen($a); $i++) {\n        $out .= $a[$i]\
    \ ^ $b[$i];\n    }\n    return $out;\n}\n\n/*\n     * Decrypt the AES encrypted\
    \ $encrypted with $password\n     *\n     * Note that the initialization vector\
    \ (iv) must be the same as the one\n     * used to encrypt the data.\n     *\n\
    \     * @param string $encrypted Hexadecimal encrypted data.\n     * @param string\
    \ $password  The plaintext password\n     * @param string $iv        Hexadecimal\
    \ initialization vector.\n     *\n     * @return string Decrypted data\n     */\n\
    function candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ow4yawe.php:31\n\
    Stack trace:\n#0 /tmp/tmp2ow4yawe.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp2ow4yawe.php\
    \ on line 31\n"
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  return decbin(bindec($a) ^ bindec($b));\n}\nfunction candidate(...$args) {\n\
    \    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi23w3blf.php:14\n\
    Stack trace:\n#0 /tmp/tmpi23w3blf.php(19): test()\n#1 {main}\n  thrown in /tmp/tmpi23w3blf.php\
    \ on line 14\n"
  timestamp: 1659977959
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $out = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $out .= (int)$a[$i]\
    \ ^ (int)$b[$i];\n  }\n  return $out;\n}\necho string_xor(\"010\", \"110\");\n\
    function candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '100'
  timestamp: 1659977959
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \    $arr_a = str_split($a);\n    $arr_b = str_split($b);\n    $len = count($arr_a);\n\
    \    $result = [];\n    for ($i = 0; $i < $len; $i++) {\n        $result[] = (int)$arr_a[$i]\
    \ ^ (int)$arr_b[$i];\n    }\n    return implode($result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \    return decbin(bindec($a) ^ bindec($b));\n}\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpss6v43iy.php:14\n\
    Stack trace:\n#0 /tmp/tmpss6v43iy.php(19): test()\n#1 {main}\n  thrown in /tmp/tmpss6v43iy.php\
    \ on line 14\n"
  timestamp: 1659823299
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $answer = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $answer .= (int)$a[$i]\
    \ ^ (int)$b[$i];\n  }\n  return $answer;\n}\nfunction candidate(...$args) {\n\
    \    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977959
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \    $result = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result\
    \ .= $a[$i] != $b[$i] ? '1' : '0';\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  // Your code here\n}\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpypookq_g.php:14\n\
    Stack trace:\n#0 /tmp/tmpypookq_g.php(19): test()\n#1 {main}\n  thrown in /tmp/tmpypookq_g.php\
    \ on line 14\n"
  timestamp: 1659823299
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  return implode('', array_map(function($i, $j) {\n    return $i ^ $j;\n  },\
    \ str_split($a), str_split($b)));\n}\n\nfunction candidate(...$args) {\n    return\
    \ string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\"\
    , \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc0ojsgat.php:17\n\
    Stack trace:\n#0 /tmp/tmpc0ojsgat.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpc0ojsgat.php\
    \ on line 17\n"
  timestamp: 1659977959
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $result = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= intval($a[$i])^intval($b[$i]);\n\
    \  }\n  return $result;\n}\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \n}\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3fez378h.php:14\n\
    Stack trace:\n#0 /tmp/tmp3fez378h.php(19): test()\n#1 {main}\n  thrown in /tmp/tmp3fez378h.php\
    \ on line 14\n"
  timestamp: 1659977959
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  // your code here\n  return str_pad(decbin(bindec($a) ^ bindec($b)), strlen($a),\
    \ '0', STR_PAD_LEFT);\n}\n\nvar_dump(string_xor(\"010\", \"110\"));\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'string(3) "100"

    '
  timestamp: 1659977959
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $str = '';\n  $length = strlen($a);\n  for ($i = 0; $i < $length; $i++) {\n\
    \    $str .= $a[$i] == $b[$i] ? 0 : 1;\n  }\n  return $str;\n}\n\necho string_xor(\"\
    010\", \"110\");\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: '100'
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $res = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $res .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $res;\n}\n\necho string_xor(\"010\", \"110\") . \"\\n\";\necho\
    \ string_xor(\"100\", \"100\") . \"\\n\";\necho string_xor(\"101\", \"001\") .\
    \ \"\\n\";\necho string_xor(\"101\", \"101\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\x01\0\0\n\0\0\0\n\x01\0\0\n\0\0\0\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpjqmkxllu.php:23\nStack trace:\n#0 /tmp/tmpjqmkxllu.php(28):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpjqmkxllu.php on line 23\n"
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \t$ar = str_split($a);\n\t$br = str_split($b);\n\t$ret = '';\n\tfor ($i = 0; $i\
    \ < count($ar); $i++) {\n\t\t$ret .= ($ar[$i] == $br[$i]) ? '0' : '1';\n\t}\n\t\
    return $ret;\n}\n\n$fh = fopen($argv[1], \"r\");\nwhile (!feof($fh)) {\n\t$val\
    \ = fgets($fh);\n\tif ($val != \"\") {\n\t\tlist($a, $b) = explode(' ', $val);\n\
    \t\techo string_xor($a, $b) . PHP_EOL;\n\t}\n}\nfclose($fh);\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 1 in /tmp/tmp4ygo8e9q.php on line 16\n\n\
    Deprecated: fopen(): Passing null to parameter #1 ($filename) of type string is\
    \ deprecated in /tmp/tmp4ygo8e9q.php on line 16\n\nFatal error: Uncaught ValueError:\
    \ Path cannot be empty in /tmp/tmp4ygo8e9q.php:16\nStack trace:\n#0 /tmp/tmp4ygo8e9q.php(16):\
    \ fopen('', 'r')\n#1 {main}\n  thrown in /tmp/tmp4ygo8e9q.php on line 16\n"
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \    return implode(array_map(function($x, $y) {\n        return $x ^ $y;\n  \
    \  }, str_split($a), str_split($b)));\n}\n\nfunction candidate(...$args) {\n \
    \   return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp6q_j4ke.php:17\n\
    Stack trace:\n#0 /tmp/tmpp6q_j4ke.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpp6q_j4ke.php\
    \ on line 17\n"
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $r = \"\";\n  for ($i = 0; $i < strlen($a); $i++) {\n    $r .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $r;\n}\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwvsmzg3m.php:18\n\
    Stack trace:\n#0 /tmp/tmpwvsmzg3m.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpwvsmzg3m.php\
    \ on line 18\n"
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  \n}\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\")\
    \ !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3un8woka.php:14\n\
    Stack trace:\n#0 /tmp/tmp3un8woka.php(19): test()\n#1 {main}\n  thrown in /tmp/tmp3un8woka.php\
    \ on line 14\n"
  timestamp: 1659977959
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \t$xor = '';\n\t$a_arr = str_split($a);\n\t$b_arr = str_split($b);\n\tfor ($i\
    \ = 0; $i < count($a_arr); $i++) {\n\t\t$xor .= $a_arr[$i] === $b_arr[$i] ? 0\
    \ : 1;\n\t}\n\treturn $xor;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977959
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \    $result = \"\";\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result\
    \ .= (int)$a[$i] ^ (int)$b[$i];\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  return (string) (\n    (int) $a\n      ^ (int) $b\n  );\n}\n\necho string_xor(\"\
    010\", \"110\");\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "100\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvsrjx4wm.php:19\n\
    Stack trace:\n#0 /tmp/tmpvsrjx4wm.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpvsrjx4wm.php\
    \ on line 19\n"
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $len = strlen($a);\n  $ret = \"\";\n  for ($i = 0; $i < $len; $i++) {\n   \
    \ $ret .= $a[$i] ^ $b[$i];\n  }\n  return $ret;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsnjcopq1.php:20\n\
    Stack trace:\n#0 /tmp/tmpsnjcopq1.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpsnjcopq1.php\
    \ on line 20\n"
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \t$c = '';\n\tfor ($i = 0; $i < strlen($a); $i++) {\n\t\t$c .= $a[$i] ^ $b[$i];\n\
    \t}\n\treturn $c;\n}\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7d5bxl_l.php:18\n\
    Stack trace:\n#0 /tmp/tmp7d5bxl_l.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp7d5bxl_l.php\
    \ on line 18\n"
  timestamp: 1659977959
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $result = '';\n  $max = max(strlen($a), strlen($b));\n  for ($i = 0; $i < $max;\
    \ $i++) {\n    $result .= ((int) $a[$i % strlen($a)] ^ (int) $b[$i % strlen($b)])\n\
    \        ? '1' : '0';\n  }\n  return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977959
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  return implode(array_map(function($a, $b) { return ($a != $b) ? \"1\" : \"\
    0\"; }, str_split($a), str_split($b)));\n}\nfunction candidate(...$args) {\n \
    \   return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \treturn implode('', array_map(function($a, $b) { return $a ^ $b; }, str_split($a),\
    \ str_split($b)));\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1vgswa93.php:15\n\
    Stack trace:\n#0 /tmp/tmp1vgswa93.php(20): test()\n#1 {main}\n  thrown in /tmp/tmp1vgswa93.php\
    \ on line 15\n"
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  return decbin(bindec($a) ^ bindec($b));\n}\nfunction candidate(...$args) {\n\
    \    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi23w3blf.php:14\n\
    Stack trace:\n#0 /tmp/tmpi23w3blf.php(19): test()\n#1 {main}\n  thrown in /tmp/tmpi23w3blf.php\
    \ on line 14\n"
  timestamp: 1659977959
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $ret = \"\";\n  for ($i = 0; $i < strlen($a); $i++) {\n    $ret .= (strval($a[$i])\
    \ != strval($b[$i])) ? \"1\" : \"0\";\n  }\n  return $ret;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $result = \"\";\n  $longer = strlen($a) >= strlen($b) ? $a : $b;\n  $short\
    \ = strlen($a) < strlen($b) ? $a : $b;\n  for ($i = 0; $i < strlen($longer); $i++)\
    \ {\n    $result .= $i < strlen($short) ? (($longer[$i] ^ $short[$i]) ? \"1\"\
    \ : \"0\") : $longer[$i];\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxf97jnnu.php:21\n\
    Stack trace:\n#0 /tmp/tmpxf97jnnu.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpxf97jnnu.php\
    \ on line 21\n"
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \    $result = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result\
    \ .= $a[$i] ^ $b[$i];\n    }\n    return $result;\n}\n\nvar_dump(string_xor(\"\
    010\", \"110\"));\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "string(3) \"\x01\0\0\"\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpqrrnzw8u.php:21\nStack trace:\n#0 /tmp/tmpqrrnzw8u.php(26): test()\n\
    #1 {main}\n  thrown in /tmp/tmpqrrnzw8u.php on line 21\n"
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \t$result = array();\n\t$a = str_split($a);\n\t$b = str_split($b);\n\tfor ($i\
    \ = 0; $i < count($a); $i++) {\n\t\t$result[] = $a[$i] ^ $b[$i];\n\t}\n\treturn\
    \ implode($result);\n}\necho string_xor(\"010\", \"110\") . PHP_EOL;\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\x01\0\0\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptyvmeesh.php:21\n\
    Stack trace:\n#0 /tmp/tmptyvmeesh.php(26): test()\n#1 {main}\n  thrown in /tmp/tmptyvmeesh.php\
    \ on line 21\n"
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $result = \"\";\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i]\
    \ ^ $b[$i];\n  }\n  return $result;\n}\n\n$string_xor_tests = array(\n  array(\n\
    \    \"name\" => \"only true\",\n    \"a\" => \"1111\",\n    \"b\" => \"1111\"\
    ,\n    \"expected\" => \"0000\"\n  ),\n  array(\n    \"name\" => \"only false\"\
    ,\n    \"a\" => \"0000\",\n    \"b\" => \"0000\",\n    \"expected\" => \"0000\"\
    \n  ),\n  array(\n    \"name\" => \"mixed\",\n    \"a\" => \"1100\",\n    \"b\"\
    \ => \"0011\",\n    \"expected\" => \"1111\"\n  ),\n  array(\n    \"name\" =>\
    \ \"mixed 2\",\n    \"a\" => \"0110\",\n    \"b\" => \"1001\",\n    \"expected\"\
    \ => \"1101\"\n  ),\n  array(\n    \"name\" => \"mixed 3\",\n    \"a\" => \"0110\"\
    ,\n    \"b\" => \"1101\",\n    \"expected\" => \"1001\"\n  ),\n  array(\n    \"\
    name\" => \"mixed 4\",\n    \"a\" => \"0110\",\n    \"b\" => \"1111\",\n    \"\
    expected\" => \"1001\"\n  ),\n  array(\n    \"name\" => \"a is longer\",\n   \
    \ \"a\" => \"1110\",\n    \"b\" => \"1111\",\n    \"expected\" => \"0001\"\n \
    \ ),\n  array(\n    \"name\" => \"b is longer\",\n    \"a\" => \"1111\",\n   \
    \ \"b\" => \"1110\",\n    \"expected\" => \"0001\"\n  ),\n  array(\n    \"name\"\
    \ => \"a and b are different lengths\",\n    \"a\" => \"1111\",\n    \"b\" =>\
    \ \"11100\",\n    \"expected\" => \"00001\"\n  ),\n);\n\nrun_tests($string_xor_tests,\
    \ \"string_xor\");\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function run_tests() in\
    \ /tmp/tmpjn45iyi6.php:71\nStack trace:\n#0 {main}\n  thrown in /tmp/tmpjn45iyi6.php\
    \ on line 71\n"
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \    $result = \"\";\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result\
    \ .= $a[$i] ^ $b[$i];\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdw6zot0d.php:19\n\
    Stack trace:\n#0 /tmp/tmpdw6zot0d.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpdw6zot0d.php\
    \ on line 19\n"
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $result = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i]\
    \ ^ $b[$i];\n  }\n  return $result;\n}\nfunction candidate(...$args) {\n    return\
    \ string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\"\
    , \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpetouehbu.php:18\n\
    Stack trace:\n#0 /tmp/tmpetouehbu.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpetouehbu.php\
    \ on line 18\n"
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  \n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\")\
    \ !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppbbm939k.php:15\n\
    Stack trace:\n#0 /tmp/tmppbbm939k.php(20): test()\n#1 {main}\n  thrown in /tmp/tmppbbm939k.php\
    \ on line 15\n"
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $result = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i]\
    \ ^ $b[$i];\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n   \
    \ return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpidg78hrs.php:19\n\
    Stack trace:\n#0 /tmp/tmpidg78hrs.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpidg78hrs.php\
    \ on line 19\n"
  timestamp: 1659977959
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $result = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= (int)$a[$i]\
    \ ^ (int)$b[$i];\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $result = \"\";\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i]\
    \ ^ $b[$i];\n  }\n  return $result;\n}\n\n$key = \"100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100\n\
    function candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected integer "111000" in /tmp/tmp6d7d874m.php
    on line 20

    '
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \    $result = '';\n    $a = str_split($a);\n    $b = str_split($b);\n    for\
    \ ($i = 0; $i < count($a); $i++) {\n        $result .= ($a[$i] ^ $b[$i]);\n  \
    \  }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_tfxvt87.php:21\n\
    Stack trace:\n#0 /tmp/tmp_tfxvt87.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp_tfxvt87.php\
    \ on line 21\n"
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \    $a_bin = toBinary($a);\n    $b_bin = toBinary($b);\n    $xor = $a_bin ^ $b_bin;\n\
    \    return toString($xor);\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function toBinary() in\
    \ /tmp/tmptiwuirc3.php:7\nStack trace:\n#0 /tmp/tmptiwuirc3.php(14): string_xor('111000',\
    \ '101010')\n#1 /tmp/tmptiwuirc3.php(18): candidate('111000', '101010')\n#2 /tmp/tmptiwuirc3.php(23):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmptiwuirc3.php on line 7\n"
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \    $result = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result\
    \ .= $a[$i] ^ $b[$i];\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwa72zpu.php:19\n\
    Stack trace:\n#0 /tmp/tmpuwa72zpu.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpuwa72zpu.php\
    \ on line 19\n"
  timestamp: 1659977959
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \    $result = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result\
    \ .= ($a[$i] == $b[$i]) ? '0' : '1';\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977959
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \    $aBin = str_split($a);\n    $bBin = str_split($b);\n    $result = \"\";\n\
    \    foreach ($aBin as $key => $value) {\n        if ($value == $bBin[$key]) {\n\
    \            $result .= \"0\";\n        } else {\n            $result .= \"1\"\
    ;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977959
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $result = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= (int)\
    \ $a[$i] ^ (int) $b[$i];\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977959
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $xorString = \"\";\n  for ($i = 0; $i < strlen($a); $i++) {\n    $xorString\
    \ .= ($a[$i] != $b[$i]) ? \"1\" : \"0\";\n  }\n  return $xorString;\n}\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $lena = strlen($a);\n  $lenb = strlen($b);\n  $len = max($lena, $lenb);\n \
    \ $output = '';\n  for ($i = 0; $i < $len; $i++) {\n    $a_bit = 0;\n    $b_bit\
    \ = 0;\n    if ($i < $lena) {\n      $a_bit = $a[$lena - $i - 1];\n    }\n   \
    \ if ($i < $lenb) {\n      $b_bit = $b[$lenb - $i - 1];\n    }\n    $output =\
    \ ($a_bit xor $b_bit) . $output;\n  }\n  return $output;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnmfbwr9j.php:30\n\
    Stack trace:\n#0 /tmp/tmpnmfbwr9j.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpnmfbwr9j.php\
    \ on line 30\n"
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $result = '';\n  $m = max(strlen($a), strlen($b));\n  for ($i = 0; $i < $m;\
    \ $i++) {\n    $result .= $a[$i] ^ $b[$i];\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpafc2bnu_.php:20\n\
    Stack trace:\n#0 /tmp/tmpafc2bnu_.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpafc2bnu_.php\
    \ on line 20\n"
  timestamp: 1659977959
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $a = str_split($a);\n  $b = str_split($b);\n  $out = [];\n  foreach ($a as\
    \ $key => $value) {\n    if ($value === $b[$key]) {\n      $out[] = 0;\n    }\
    \ else {\n      $out[] = 1;\n    }\n  }\n  return implode($out);\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \    $str_final = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $str_final\
    \ .= $a[$i] ^ $b[$i];\n    }\n    return $str_final;\n}\n\necho string_xor(\"\
    010\", \"110\") . PHP_EOL;\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\x01\0\0\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxfae2kx4.php:20\n\
    Stack trace:\n#0 /tmp/tmpxfae2kx4.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpxfae2kx4.php\
    \ on line 20\n"
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $aBin = bindec($a);\n  $bBin = bindec($b);\n  $answer = decbin($aBin ^ $bBin);\n\
    \  return $answer;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpulj5jdvf.php:18\n\
    Stack trace:\n#0 /tmp/tmpulj5jdvf.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpulj5jdvf.php\
    \ on line 18\n"
  timestamp: 1659977959
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \    $a = str_split($a);\n    $b = str_split($b);\n    $res = [];\n    for ($i\
    \ = 0; $i < count($a); $i++) {\n        if ($a[$i] == $b[$i]) {\n            $res[]\
    \ = '0';\n        } else {\n            $res[] = '1';\n        }\n    }\n    return\
    \ implode('', $res);\n}\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977959
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  // convert strings to arrays\n  $a = str_split($a);\n  $b = str_split($b);\n\
    \  // check if the two arrays are of the same length\n  if (count($a) !== count($b))\
    \ {\n    trigger_error('String length must be equal', E_USER_WARNING);\n    return\
    \ false;\n  }\n  $result = [];\n  // iterate through the arrays\n  for ($i = 0;\
    \ $i < count($a); $i++) {\n    // if they match, write 0 to $result\n    if ($a[$i]\
    \ == $b[$i]) {\n      $result[$i] = 0;\n    }\n    // if they don't match, write\
    \ 1 to $result\n    else {\n      $result[$i] = 1;\n    }\n  }\n  // convert $result\
    \ back to string and return it\n  return implode($result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977959
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \    $output = \"\";\n    $len_a = strlen($a);\n    $len_b = strlen($b);\n   \
    \ if ($len_a !== $len_b) {\n        throw new Exception(\"Strings are not equal\
    \ lengths!\");\n    }\n    for ($i = 0; $i < $len_a; $i++) {\n        $char_a\
    \ = $a[$i];\n        $char_b = $b[$i];\n        if ($char_a === $char_b) {\n \
    \           $output .= \"0\";\n        } else {\n            $output .= \"1\"\
    ;\n        }\n    }\n    return $output;\n}\nfunction candidate(...$args) {\n\
    \    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977959
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \    $res = \"\";\n    for ($i = 0; $i < strlen($a); $i++) {\n        $a_bit =\
    \ $a[$i];\n        $b_bit = $b[$i];\n        $res .= ($a_bit != $b_bit) ? \"1\"\
    \ : \"0\";\n    }\n    return $res;\n}\nfunction candidate(...$args) {\n    return\
    \ string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\"\
    , \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \t$xor = '';\n\t$l = strlen($a);\n\tfor ($i = 0; $i < $l; $i++) {\n\t\t$xor .=\
    \ $a[$i] ^ $b[$i];\n\t}\n\treturn $xor;\n}\n\nfunction candidate(...$args) {\n\
    \    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuc0lhh_4.php:20\n\
    Stack trace:\n#0 /tmp/tmpuc0lhh_4.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpuc0lhh_4.php\
    \ on line 20\n"
  timestamp: 1659977959
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $result = \"\";\n  for ($i = 0; $i < strlen($a); $i++) {\n    $a_char = substr($a,\
    \ $i, 1);\n    $b_char = substr($b, $i, 1);\n    if ($a_char == $b_char) {\n \
    \     $result .= \"0\";\n    } else {\n      $result .= \"1\";\n    }\n  }\n \
    \ return $result;\n}\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $result = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i]\
    \ ^ $b[$i];\n  }\n  return $result;\n}\necho \"string_xor(010, 110) = \" . string_xor(\"\
    010\", \"110\") . \"\\n\";\necho \"string_xor(101, 010) = \" . string_xor(\"101\"\
    , \"010\") . \"\\n\";\necho \"string_xor(000, 111) = \" . string_xor(\"000\",\
    \ \"111\") . \"\\n\";\necho \"string_xor(111, 000) = \" . string_xor(\"111\",\
    \ \"000\") . \"\\n\";\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "string_xor(010, 110) = \x01\0\0\nstring_xor(101, 010) = \x01\x01\x01\n\
    string_xor(000, 111) = \x01\x01\x01\nstring_xor(111, 000) = \x01\x01\x01\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmpp2kp83m3.php:22\nStack trace:\n\
    #0 /tmp/tmpp2kp83m3.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp2kp83m3.php\
    \ on line 22\n"
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $res = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $res .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $res;\n}\n\n$fptr = fopen(getenv(\"OUTPUT_PATH\"), \"w\");\n\n\
    $__fp = fopen(\"php://stdin\", \"r\");\n\nfscanf($__fp, \"%d\", $testCases);\n\
    \nfor ($testCasesItr = 0; $testCasesItr < $testCases; $testCasesItr++) {\n   \
    \ fscanf($__fp, \"%[^\\n]\", $a);\n\n    fscanf($__fp, \"%[^\\n]\", $b);\n\n \
    \   $result = string_xor($a, $b);\n\n    fwrite($fptr, $result . \"\\n\");\n}\n\
    \nfclose($__fp);\nfclose($fptr);\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught ValueError: Path cannot be empty in /tmp/tmp1hzr7fgf.php:14\n\
    Stack trace:\n#0 /tmp/tmp1hzr7fgf.php(14): fopen('', 'w')\n#1 {main}\n  thrown\
    \ in /tmp/tmp1hzr7fgf.php on line 14\n"
  timestamp: 1659977959
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $xor = function($a, $b) {\n    return $a xor $b;\n  };\n  $xor_string = function($a,\
    \ $b) use ($xor) {\n    return array_map($xor, str_split($a), str_split($b));\n\
    \  };\n  return implode(\"\", array_map(\"intval\", $xor_string($a, $b)));\n}\n\
    \nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977959
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \    $result = array();\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result[]\
    \ = $a[$i] == $b[$i] ? 0 : 1;\n    }\n    return implode('', $result);\n}\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $result = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i]\
    \ ^ $b[$i];\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n   \
    \ return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpidg78hrs.php:19\n\
    Stack trace:\n#0 /tmp/tmpidg78hrs.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpidg78hrs.php\
    \ on line 19\n"
  timestamp: 1659977959
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \    $len = strlen($a);\n    $bin = '';\n    for ($i = 0; $i < $len; $i++) {\n\
    \        $bin .= ($a[$i] xor $b[$i]) ? '1' : '0';\n    }\n    return $bin;\n}\n\
    \nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \    // your code\n}\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp628dvg46.php:14\n\
    Stack trace:\n#0 /tmp/tmp628dvg46.php(19): test()\n#1 {main}\n  thrown in /tmp/tmp628dvg46.php\
    \ on line 14\n"
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  // Split the strings into an array of 1's and 0's\n  $a = str_split($a);\n\
    \  $b = str_split($b);\n  // Initialize the result\n  $res = [];\n  for ($i =\
    \ 0; $i < count($a); $i++) {\n    // XOR each of the digits. If they're the same,\
    \ 0^0=0 and 1^1=0.\n    // If they're different, 0^1=1 and 1^0=1.\n    $res[$i]\
    \ = $a[$i] ^ $b[$i];\n  }\n  // Put our result back into a string and return it\n\
    \  return implode($res);\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph8c2o97c.php:26\n\
    Stack trace:\n#0 /tmp/tmph8c2o97c.php(31): test()\n#1 {main}\n  thrown in /tmp/tmph8c2o97c.php\
    \ on line 26\n"
  timestamp: 1659977959
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \    // Your code here!\n    $aBin = str_split($a);\n    $bBin = str_split($b);\n\
    \    $cBin = [];\n    for ($i = 0; $i < sizeof($aBin); $i++) {\n        if ($aBin[$i]\
    \ == $bBin[$i]) {\n            $cBin[$i] = 0;\n        } else {\n            $cBin[$i]\
    \ = 1;\n        }\n    }\n    return implode($cBin);\n}\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $out = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $out .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $out;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6w9nky4n.php:19\n\
    Stack trace:\n#0 /tmp/tmp6w9nky4n.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp6w9nky4n.php\
    \ on line 19\n"
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \t//invalid input\n\tif(!is_string($a) || !is_string($b))\n\t\treturn false;\n\
    \t\n\t//inputs are not of equal length\n\tif(strlen($a) != strlen($b))\n\t\treturn\
    \ false;\n\t\n\t//compute the xor\n\t$c = '';\n\tfor($i = 0; $i < strlen($a);\
    \ $i++)\n\t\t$c .= ($a[$i] ^ $b[$i]);\n\treturn $c;\n}\n\necho string_xor(\"010\"\
    , \"110\");\necho string_xor(\"0\", \"0\");\necho string_xor(\"1\", \"0\");\n\
    echo string_xor(\"0\", \"1\");\necho string_xor(\"1\", \"1\");\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\x01\0\0\0\x01\x01\0\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpkbq1iob5.php:32\nStack trace:\n#0 /tmp/tmpkbq1iob5.php(37): test()\n\
    #1 {main}\n  thrown in /tmp/tmpkbq1iob5.php on line 32\n"
  timestamp: 1659977959
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \    $xor = array();\n    for ($i = 0; $i < strlen($a); $i++) {\n        $xor[]\
    \ = ((int)$a[$i] ^ (int)$b[$i]);\n    }\n    return implode('', $xor);\n}\n\n\
    var_dump(string_xor(\"010\", \"110\"));\nfunction candidate(...$args) {\n    return\
    \ string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\"\
    , \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'string(3) "100"

    '
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $r = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $r .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $r;\n}\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp07q2e2r9.php:18\n\
    Stack trace:\n#0 /tmp/tmp07q2e2r9.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp07q2e2r9.php\
    \ on line 18\n"
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  // Your code here\n}\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpypookq_g.php:14\n\
    Stack trace:\n#0 /tmp/tmpypookq_g.php(19): test()\n#1 {main}\n  thrown in /tmp/tmpypookq_g.php\
    \ on line 14\n"
  timestamp: 1659823299
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $a = str_split($a);\n  $b = str_split($b);\n  $res = [];\n  for ($i = 0; $i\
    \ < count($a); $i++) {\n    $res[] = $a[$i] ^ $b[$i];\n  }\n  return implode($res);\n\
    }\n\necho string_xor(\"010\", \"110\") . \"\\n\";\n\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\x01\0\0\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjo8cmrg2.php:23\n\
    Stack trace:\n#0 /tmp/tmpjo8cmrg2.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpjo8cmrg2.php\
    \ on line 23\n"
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $result = \"\";\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= ($a[$i]\
    \ ^ $b[$i]);\n  }\n  return $result;\n}\nfunction candidate(...$args) {\n    return\
    \ string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\"\
    , \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi_16ff4e.php:18\n\
    Stack trace:\n#0 /tmp/tmpi_16ff4e.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpi_16ff4e.php\
    \ on line 18\n"
  timestamp: 1659977959
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $result = '';\n  for ($i = 0; $i < strlen($a); $i++){\n    $result = $result.(int)($a[$i]\
    \ != $b[$i]);\n  }\n  return $result;\n}\nfunction candidate(...$args) {\n   \
    \ return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977959
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $len = strlen($a);\n  $result = '';\n  for ($i = 0; $i < $len; $i++) {\n  \
    \  $result .= ($a[$i] == $b[$i]) ? '0' : '1';\n  }\n  return $result;\n}\necho\
    \ string_xor(\"010\", \"110\");\necho \"<br>\";\necho string_xor(\"111\", \"000\"\
    );\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 100<br>111
  timestamp: 1659977959
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \   $result = \"\";\n   for($i=0; $i<strlen($a); $i++) {\n     $result .= (int)$a[$i]\
    \ ^ (int)$b[$i];\n   }\n   return $result;\n}\nfunction candidate(...$args) {\n\
    \    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \    $a = str_split($a);\n    $b = str_split($b);\n    $result = '';\n    for\
    \ ($i = 0; $i < strlen($a); $i++) {\n        $result .= ($a[$i] + $b[$i]) % 2;\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: strlen(): Argument #1 ($str) must be\
    \ of type string, array given in /tmp/tmpz7jwqii0.php:10\nStack trace:\n#0 /tmp/tmpz7jwqii0.php(17):\
    \ string_xor(Array, Array)\n#1 /tmp/tmpz7jwqii0.php(21): candidate('111000', '101010')\n\
    #2 /tmp/tmpz7jwqii0.php(26): test()\n#3 {main}\n  thrown in /tmp/tmpz7jwqii0.php\
    \ on line 10\n"
  timestamp: 1659977959
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $result = \"\";\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= (int)\
    \ $a[$i] ^ (int) $b[$i];\n  }\n  return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977959
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \t$xor = \"\";\n\tfor ($i = 0; $i < strlen($a); $i++) {\n\t\t$xor .= (intval($a[$i])\
    \ != intval($b[$i])) ? \"1\" : \"0\";\n\t}\n\treturn $xor;\n}\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $ans = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $ans .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $ans;\n}\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc7pldeim.php:18\n\
    Stack trace:\n#0 /tmp/tmpc7pldeim.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpc7pldeim.php\
    \ on line 18\n"
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  // Your code here\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9pvi5cf_.php:15\n\
    Stack trace:\n#0 /tmp/tmp9pvi5cf_.php(20): test()\n#1 {main}\n  thrown in /tmp/tmp9pvi5cf_.php\
    \ on line 15\n"
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \t$r = '';\n\tfor ($i = 0; $i < strlen($a); $i++) {\n\t\t$r .= $a[$i] ^ $b[$i];\n\
    \t}\n\treturn $r;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn3rpqu_t.php:19\n\
    Stack trace:\n#0 /tmp/tmpn3rpqu_t.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpn3rpqu_t.php\
    \ on line 19\n"
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \   $result = \"\";\n\n   for ($i = 0; $i < strlen($a); $i++) {\n      $result\
    \ .= $a[$i] ^ $b[$i];\n   }\n\n   return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuda1ucz0.php:21\n\
    Stack trace:\n#0 /tmp/tmpuda1ucz0.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpuda1ucz0.php\
    \ on line 21\n"
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \    $xor = [];\n    for ($i = 0; $i < strlen($a); $i++) {\n        $xor[] = ((int)$a[$i]\
    \ xor (int)$b[$i]);\n    }\n    return implode('', $xor);\n}\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps8zzzjpz.php:18\n\
    Stack trace:\n#0 /tmp/tmps8zzzjpz.php(23): test()\n#1 {main}\n  thrown in /tmp/tmps8zzzjpz.php\
    \ on line 18\n"
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \    $a = str_split($a);\n    $b = str_split($b);\n    $string = '';\n    foreach\
    \ ($a as $i => $char) {\n        $string .= $char == $b[$i] ? '0' : '1';\n   \
    \ }\n    return $string;\n}\n\n/*\nfunction candidate(...$args) {\n    return\
    \ string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\"\
    , \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 16 in /tmp/tmpsf2d_1s5.php on
    line 16

    '
  timestamp: 1659977959
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $ans = \"\";\n  for ($i = 0; $i < strlen($a); $i++) {\n    $ans .= ($a[$i]\
    \ == $b[$i]) ? \"0\" : \"1\";\n  }\n  return $ans;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977959
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \    $a = str_split($a);\n    $b = str_split($b);\n    $str = \"\";\n    for ($i\
    \ = 0; $i < count($a); $i++) {\n        if ($a[$i] != $b[$i]) {\n            $str\
    \ .= \"1\";\n        } else {\n            $str .= \"0\";\n        }\n    }\n\
    \    return $str;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977959
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \    $count = max(strlen($a), strlen($b));\n    $result = '';\n    for ($i = 0;\
    \ $i < $count; $i++) {\n        $result .= $a[$i] != $b[$i] ? '1' : '0';\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $aLen = strlen($a);\n  $bLen = strlen($b);\n  $result = \"\";\n  $aIndex =\
    \ 0;\n  $bIndex = 0;\n  while($aIndex < $aLen || $bIndex < $bLen) {\n    if($aIndex\
    \ < $aLen && $bIndex < $bLen) {\n      $result .= $a[$aIndex] ^ $b[$bIndex];\n\
    \      $aIndex++;\n      $bIndex++;\n    } else if($aIndex < $aLen) {\n      $result\
    \ .= $a[$aIndex];\n      $aIndex++;\n    } else {\n      $result .= $b[$bIndex];\n\
    \      $bIndex++;\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcxzrrbzb.php:33\n\
    Stack trace:\n#0 /tmp/tmpcxzrrbzb.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpcxzrrbzb.php\
    \ on line 33\n"
  timestamp: 1659977959
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \    $c = \"\";\n    for ($i = 0; $i < strlen($a); $i++) {\n        $c .= ($a[$i]\
    \ == $b[$i]) ? '0' : '1';\n    }\n    return $c;\n}\necho string_xor(\"01\", \"\
    11\");\necho string_xor(\"01\", \"10\");\necho string_xor(\"00\", \"10\");\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '101110'
  timestamp: 1659977959
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $res = \"\";\n  for ($i = 0; $i < strlen($a); $i++) {\n    $res .= $a[$i] ==\
    \ $b[$i] ? \"0\" : \"1\";\n  }\n  return $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977959
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \    $r = \"\";\n    for ($i = 0; $i < strlen($a); $i++) {\n        $r .= ((int)$a[$i]\
    \ ^ (int)$b[$i]) ? \"1\" : \"0\";\n    }\n    return $r;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977959
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $output = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $output .= (intval($a[$i])\
    \ ^ intval($b[$i])) ? '1' : '0';\n  }\n  return $output;\n}\n\necho string_xor(\"\
    010\", \"110\");\necho \"\\n\";\n\nfunction candidate(...$args) {\n    return\
    \ string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\"\
    , \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '100

    '
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \    // Your code here\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp57k743u4.php:15\n\
    Stack trace:\n#0 /tmp/tmp57k743u4.php(20): test()\n#1 {main}\n  thrown in /tmp/tmp57k743u4.php\
    \ on line 15\n"
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  // Your code here!\n}\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyxwdnu10.php:14\n\
    Stack trace:\n#0 /tmp/tmpyxwdnu10.php(19): test()\n#1 {main}\n  thrown in /tmp/tmpyxwdnu10.php\
    \ on line 14\n"
  timestamp: 1659977959
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $result = \"\";\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= ((int)$a[$i]\
    \ ^ (int)$b[$i]);\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \    $c = \"\";\n    for ($i = 0; $i < strlen($a); $i++) {\n        $c .= ($a[$i]\
    \ ^ $b[$i]);\n    }\n    return $c;\n}\nfunction candidate(...$args) {\n    return\
    \ string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\"\
    , \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8sx17yrz.php:18\n\
    Stack trace:\n#0 /tmp/tmp8sx17yrz.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp8sx17yrz.php\
    \ on line 18\n"
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \    $str = \"\";\n    for ($i = 0; $i < strlen($a); $i++) {\n        $str .=\
    \ $a[$i] ^ $b[$i];\n    }\n    return $str;\n}\nfunction candidate(...$args) {\n\
    \    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1ta8opah.php:18\n\
    Stack trace:\n#0 /tmp/tmp1ta8opah.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp1ta8opah.php\
    \ on line 18\n"
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \t$result = '';\n\tfor ($i = 0; $i < strlen($a); $i++) {\n\t\t$result .= ($a[$i]\
    \ ^ $b[$i]) ? \"1\" : \"0\";\n\t}\n\treturn $result;\n}\n\necho string_xor(\"\
    010\", \"110\");\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "111\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpld4mwf92.php:20\n\
    Stack trace:\n#0 /tmp/tmpld4mwf92.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpld4mwf92.php\
    \ on line 20\n"
  timestamp: 1659977959
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \t$result = '';\n\tfor ($i = 0; $i < strlen($a); $i++) {\n\t\t$result .= $a[$i]\
    \ == $b[$i] ? '0' : '1';\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977959
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \    $str1 = str_split($a);\n    $str2 = str_split($b);\n    $res = '';\n    for\
    \ ($i = 0; $i < count($str1); $i++) {\n        if ($str1[$i] == $str2[$i]) {\n\
    \            $res .= '0';\n        } else {\n            $res .= '1';\n      \
    \  }\n    }\n    return $res;\n}\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977959
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \    $r = [];\n    $c = '';\n    $la = strlen($a);\n    $lb = strlen($b);\n  \
    \  $l = max($la, $lb);\n    for ($i = 0; $i < $l; $i++) {\n        $r[] = ($a[$la\
    \ - $i - 1] xor $b[$lb - $i - 1]) ? '1' : '0';\n    }\n    while (strlen($c) !=\
    \ $l) {\n        $c .= array_pop($r);\n    }\n    return $c;\n}\n\necho string_xor(\"\
    010\", \"110\");\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: '100'
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  return decbin(bindec($a) ^ bindec($b));\n}\nfunction candidate(...$args) {\n\
    \    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi23w3blf.php:14\n\
    Stack trace:\n#0 /tmp/tmpi23w3blf.php(19): test()\n#1 {main}\n  thrown in /tmp/tmpi23w3blf.php\
    \ on line 14\n"
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \    // Split the strings into arrays of 8-bit binary numbers\n    $a = str_split(str_pad(base_convert($a,\
    \ 2, 10), strlen($a) + strlen($a) % 8, '0', STR_PAD_LEFT), 8);\n    $b = str_split(str_pad(base_convert($b,\
    \ 2, 10), strlen($b) + strlen($b) % 8, '0', STR_PAD_LEFT), 8);\n    // Convert\
    \ the arrays into decimal numbers\n    $a = array_map('base_convert', $a, array_fill(0,\
    \ count($a), 10), array_fill(0, count($a), 2));\n    $b = array_map('base_convert',\
    \ $b, array_fill(0, count($b), 10), array_fill(0, count($b), 2));\n    // XOR\
    \ the arrays and convert back to binary\n    $c = array_map('base_convert', array_map('^',\
    \ $a, $b), array_fill(0, count($a), 2), array_fill(0, count($a), 10));\n    //\
    \ Convert the array of decimal numbers back into binary\n    return implode('',\
    \ $c);\n}\n\nprint_r(string_xor(\"010\", \"110\"));\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: array_map(): Argument #1 ($callback)\
    \ must be a valid callback or null, function \"^\" not found or invalid function\
    \ name in /tmp/tmpcisa2zeb.php:14\nStack trace:\n#0 /tmp/tmpcisa2zeb.php(14):\
    \ array_map('^', Array, Array)\n#1 /tmp/tmpcisa2zeb.php(19): string_xor(Array,\
    \ Array)\n#2 {main}\n  thrown in /tmp/tmpcisa2zeb.php on line 14\n"
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $result = \"\";\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= intval($a[$i])\
    \ ^ intval($b[$i]);\n  }\n  return $result;\n}\n\n$test_input = array(\n  array(\"\
    010\", \"110\"),\n  array(\"0\", \"0\"),\n  array(\"00\", \"11\"),\n  array(\"\
    000\", \"111\"),\n  array(\"00110\", \"01001\"),\n  array(\"0\", \"1\"),\n  array(\"\
    10\", \"11\"),\n  array(\"101\", \"010\"),\n  array(\"000\", \"001\"),\n  array(\"\
    10101\", \"01010\"),\n  array(\"001001101010010011101100111010110010010011100100100100\"\
    , \"111110010010010011000100110101001110010010010010010011\"),\n  array(\"11010001110101010111110101000011010111010101001001101\"\
    , \"110101110101000111111010111010101110010101010101011110\"),\n  array(\"111011010101001010101101101110110100100011011010101101\"\
    , \"0110111101011011011010011010010110111101101001001001100\"),\n  array(\"001000001100100100100111001000111111001001110010010011\"\
    , \"1101110111010111010100011101011101110101110101111101110\"),\n  array(\"110101010001000110101110100110111010101010011010111010\"\
    , \"1011010101101101010100101010110110101101011010101010010\"),\n  array(\"000010110101011110101011110101011011010111011101010110\"\
    , \"1110111010111010101010101011101010101010101010101110010\"),\n  array(\"000110010010010011100100100100100100100100100100100100\"\
    , \"1111111111111111111111111111111111111111111111111111111\"),\n \nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpfp394pr_.php on line 33

    '
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $a = str_split($a);\n  $b = str_split($b);\n  $result = [];\n  for ($i = 0;\
    \ $i < strlen($a); $i++) {\n    if ($a[$i] == $b[$i]) {\n      $result[] = 0;\n\
    \    } else {\n      $result[] = 1;\n    }\n  }\n  return implode($result);\n\
    }\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: strlen(): Argument #1 ($str) must be\
    \ of type string, array given in /tmp/tmpqqbvkwjy.php:10\nStack trace:\n#0 /tmp/tmpqqbvkwjy.php(20):\
    \ string_xor(Array, Array)\n#1 /tmp/tmpqqbvkwjy.php(24): candidate('111000', '101010')\n\
    #2 /tmp/tmpqqbvkwjy.php(29): test()\n#3 {main}\n  thrown in /tmp/tmpqqbvkwjy.php\
    \ on line 10\n"
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $ret = \"\";\n  $len = max(strlen($a), strlen($b));\n  for ($i = 0; $i < $len;\
    \ $i++) {\n    $ret .= ($a[$i] ^ $b[$i]) ? \"1\" : \"0\";\n  }\n  return $ret;\n\
    }\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt0k7u6sv.php:20\n\
    Stack trace:\n#0 /tmp/tmpt0k7u6sv.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpt0k7u6sv.php\
    \ on line 20\n"
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \    $res = \"\";\n    for ($i = 0; $i < strlen($a); $i++) {\n        $res .=\
    \ $a[$i] ^ $b[$i];\n    }\n    return $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpibm07t7g.php:19\n\
    Stack trace:\n#0 /tmp/tmpibm07t7g.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpibm07t7g.php\
    \ on line 19\n"
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \    $out = \"\";\n    for($i = 0; $i < strlen($a); $i++) {\n        $out .= ($a[$i]\
    \ ^ $b[$i]);\n    }\n    return $out;\n}\n\nfunction candidate(...$args) {\n \
    \   return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv8s64dll.php:19\n\
    Stack trace:\n#0 /tmp/tmpv8s64dll.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpv8s64dll.php\
    \ on line 19\n"
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  if (strlen($a) !== strlen($b))\n    return \"00\";\n  $result = \"\";\n  for\
    \ ($i = 0; $i < strlen($a); $i++) {\n    $result .= (string)($a[$i] ^ $b[$i]);\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpev2x0x38.php:21\n\
    Stack trace:\n#0 /tmp/tmpev2x0x38.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpev2x0x38.php\
    \ on line 21\n"
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  return array_reduce(range(0, strlen($a) - 1), function($carry, $i) use ($a,\
    \ $b) {\n    $carry .= ($a[$i] ^ $b[$i]) ? \"1\" : \"0\";\n    return $carry;\n\
    \  }, \"\");\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpckvxhg37.php:18\n\
    Stack trace:\n#0 /tmp/tmpckvxhg37.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpckvxhg37.php\
    \ on line 18\n"
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $c = \"\";\n  for ($i = 0; $i < strlen($a); $i++) {\n    $c .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn6jt9dr6.php:19\n\
    Stack trace:\n#0 /tmp/tmpn6jt9dr6.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpn6jt9dr6.php\
    \ on line 19\n"
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \t$lena = strlen($a);\n\t$lenb = strlen($b);\n\t$len = $lena > $lenb ? $lena :\
    \ $lenb;\n\t$xor = [];\n\tfor ($i = 0; $i < $len; $i++) {\n\t\t$ai = strlen($a)\
    \ - $i - 1;\n\t\t$bi = strlen($b) - $i - 1;\n\t\t$xor[] = isset($a[$ai]) && $a[$ai]\
    \ === '1'\n\t\t\t^ isset($b[$bi]) && $b[$bi] === '1'\n\t\t\t? '1' : '0';\n\t}\n\
    \treturn implode(array_reverse($xor));\n}\n\nfunction candidate(...$args) {\n\
    \    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq5odq449.php:26\n\
    Stack trace:\n#0 /tmp/tmpq5odq449.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpq5odq449.php\
    \ on line 26\n"
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  return array_reduce(str_split($a), function($r, $a) use ($b) {\n    $r .= $a\
    \ ^ $b[strlen($r)];\n    return $r;\n  }, '');\n}\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc33f9tpj.php:17\n\
    Stack trace:\n#0 /tmp/tmpc33f9tpj.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpc33f9tpj.php\
    \ on line 17\n"
  timestamp: 1659977959
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $a = trim($a);\n  $b = trim($b);\n  if(strlen($a) > strlen($b)) {\n    $longStr\
    \ = $a;\n    $shortStr = $b;\n  } else {\n    $longStr = $b;\n    $shortStr =\
    \ $a;\n  }\n  $longStrLen = strlen($longStr);\n  $shortStrLen = strlen($shortStr);\n\
    \  $diffLen = $longStrLen - $shortStrLen;\n  $shortStr = str_pad($shortStr, $longStrLen,\
    \ '0', STR_PAD_LEFT);\n  $result = '';\n  for($i = 0; $i < $longStrLen; $i++)\
    \ {\n    if($longStr[$i] == $shortStr[$i]) {\n      $result .= '0';\n    } else\
    \ {\n      $result .= '1';\n    }\n  }\n  return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977959
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  return join(\"\", array_map(function($x, $y) { return ($x==$y) ? 0 : 1; },\
    \ str_split($a), str_split($b)));\n}\n\nfunction candidate(...$args) {\n    return\
    \ string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\"\
    , \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977959
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \    $a = str_split($a);\n    $b = str_split($b);\n    $result = [];\n    foreach\
    \ ($a as $key => $value) {\n        if ($value == $b[$key]) {\n            $result[]\
    \ = '0';\n        } else {\n            $result[] = '1';\n        }\n    }\n \
    \   return implode($result);\n}\n\nprint string_xor(\"010\", \"110\");\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '100'
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $result = \"\";\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i]\
    \ ^ $b[$i];\n  }\n  return $result;\n}\nfunction candidate(...$args) {\n    return\
    \ string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\"\
    , \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp78tk4boe.php:18\n\
    Stack trace:\n#0 /tmp/tmp78tk4boe.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp78tk4boe.php\
    \ on line 18\n"
  timestamp: 1659823299
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $result = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i]\
    \ == $b[$i] ? '0' : '1';\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977959
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \    $aBits = str_split($a);\n    $bBits = str_split($b);\n    $xorBits = [];\n\
    \    for ($i = 0; $i < count($aBits); $i++) {\n        $xorBits[] = $aBits[$i]\
    \ == $bBits[$i] ? '0' : '1';\n    }\n    return implode($xorBits);\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977959
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $result = \"\";\n  for ($i = 0; $i < strlen($a); $i++) {\n    $a_char = substr($a,\
    \ $i, 1);\n    $b_char = substr($b, $i, 1);\n    if ($a_char != $b_char) {\n \
    \     $result .= \"1\";\n    } else {\n      $result .= \"0\";\n    }\n  }\n \
    \ return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977959
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \    $xor = array();\n    for ($i = 0; $i < strlen($a); $i++) {\n        $xor[]\
    \ = ($a[$i] != $b[$i]) ? 1 : 0;\n    }\n    return implode('', $xor);\n}\n$result\
    \ = string_xor(\"010\", \"110\");\nprint($result);\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '100'
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $r = \"\";\n  for ($i = 0; $i < strlen($a); $i++) {\n    $r .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $r;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4os_k8gd.php:19\n\
    Stack trace:\n#0 /tmp/tmp4os_k8gd.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp4os_k8gd.php\
    \ on line 19\n"
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \    return array_reduce(str_split($a), function($x, $y) use ($b) {\n        return\
    \ ($x ^ $b[0] ^ $y);\n    });\n}\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8mzx95gf.php:16\n\
    Stack trace:\n#0 /tmp/tmp8mzx95gf.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp8mzx95gf.php\
    \ on line 16\n"
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\")\
    \ !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxpdworot.php:15\n\
    Stack trace:\n#0 /tmp/tmpxpdworot.php(20): test()\n#1 {main}\n  thrown in /tmp/tmpxpdworot.php\
    \ on line 15\n"
  timestamp: 1659977959
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $result = \"\";\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= ((int)$a[$i]\
    \ ^ (int)$b[$i]);\n  }\n  return $result;\n}\nfunction candidate(...$args) {\n\
    \    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977959
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \t$result = \"\";\n\tfor ($i = 0; $i < strlen($a); $i++) {\n\t\t$result .= intval($a[$i])\
    \ ^ intval($b[$i]);\n\t}\n\treturn $result;\n}\nfunction candidate(...$args) {\n\
    \    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977959
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \    $arr1 = str_split($a);\n    $arr2 = str_split($b);\n    $output = \"\";\n\
    \    for ($i = 0; $i < sizeof($arr1); $i++) {\n        if ($arr1[$i] == $arr2[$i])\
    \ {\n            $output .= \"0\";\n        } else {\n            $output .= \"\
    1\";\n        }\n    }\n    return $output;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977959
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $c = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $c .= ($a[$i] xor $b[$i])\
    \ ? '1' : '0';\n  }\n  return $c;\n}\n\nfunction candidate(...$args) {\n    return\
    \ string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\"\
    , \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977959
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \    $xor = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $xor .= $a[$i]\
    \ === $b[$i] ? '0' : '1';\n    }\n    return $xor;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977959
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $a = str_split($a);\n  $b = str_split($b);\n  $res = [];\n  for ($i = 0; $i\
    \ < count($a); $i++) {\n    if ($a[$i] == $b[$i]) {\n      $res[] = 0;\n    }\
    \ else {\n      $res[] = 1;\n    }\n  }\n  return implode('', $res);\n}\n\necho\
    \ string_xor(\"010\", \"110\");\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: '100'
  timestamp: 1659977959
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \t$a = str_split($a);\n\t$b = str_split($b);\n\tforeach ($a as $i => $val) {\n\
    \t\tif ($a[$i] == $b[$i]) {\n\t\t\t$a[$i] = 0;\n\t\t} else {\n\t\t\t$a[$i] = 1;\n\
    \t\t}\n\t}\n\treturn implode($a);\n}\nfunction candidate(...$args) {\n    return\
    \ string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\"\
    , \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977959
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \t$aBits = str_split($a);\n\t$bBits = str_split($b);\n\t$results = [];\n\tforeach\
    \ ($aBits as $index => $bit) {\n\t\t$results[] = (int)$bit ^ (int)$bBits[$index];\n\
    \t}\n\treturn implode($results);\n}\n\nfunction candidate(...$args) {\n    return\
    \ string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\"\
    , \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $a = str_split($a);\n  $b = str_split($b);\n  $x = \"\";\n  for ($i = 0; $i\
    \ < count($a); $i++) {\n    $x .= $a[$i]^$b[$i];\n  }\n  return $x;\n}\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7e8t1xti.php:20\n\
    Stack trace:\n#0 /tmp/tmp7e8t1xti.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp7e8t1xti.php\
    \ on line 20\n"
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \    $a_bits = str_split($a);\n    $b_bits = str_split($b);\n    if (count($a_bits)\
    \ != count($b_bits)) {\n        throw new Exception(\"String lengths are not equal\"\
    );\n    }\n    $result = \"\";\n    for ($i = 0; $i < count($a_bits); $i++) {\n\
    \        $result .= $a_bits[$i] ^ $b_bits[$i];\n    }\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp9ggjfsk.php:24\n\
    Stack trace:\n#0 /tmp/tmpp9ggjfsk.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpp9ggjfsk.php\
    \ on line 24\n"
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  // your code\n}\n```\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "`" in /tmp/tmp15x3f3xj.php on line
    9

    '
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \    // Your code here.\n    $res='';\n    for($i=0;$i<strlen($a);$i++){\n   \
    \     if($a[$i]==$b[$i])\n            $res.='0';\n        else\n            $res.='1';\n\
    \    }\n    return $res;\n}\n\n/**\n * TEST\n */\nassert_options(ASSERT_EXCEPTION,\
    \ 1);\nassert(string_xor(\"010\", \"110\") == \"100\");\nassert(string_xor(\"\
    1010\", \"101\") == \"1111\");\n\n$a = 0b0101;\n$b = 0b0100;\n$c = 0b0011;\n\n\
    assert(string_xor($a, $b) == $c);\n\necho 'Success';\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Uninitialized string offset 3 in /tmp/tmpgko8qwo7.php on line\
    \ 10\n\nFatal error: Uncaught AssertionError: assert(string_xor('1010', '101')\
    \ == '1111') in /tmp/tmpgko8qwo7.php:23\nStack trace:\n#0 /tmp/tmpgko8qwo7.php(23):\
    \ assert(false, 'assert(string_x...')\n#1 {main}\n  thrown in /tmp/tmpgko8qwo7.php\
    \ on line 23\n"
  timestamp: 1659977959
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \    $r = \"\";\n    for ($i = 0; $i < strlen($a); $i++) {\n        $r .= ($a[$i]\
    \ == $b[$i]) ? '0' : '1';\n    }\n    return $r;\n}\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977959
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \t$result = \"\";\n\tfor ($i = 0; $i < strlen($a); $i++) {\n\t\t$result .= $a[$i]\
    \ == $b[$i] ? \"0\" : \"1\";\n\t}\n\treturn $result;\n}\n\necho string_xor(\"\
    010\", \"110\") . \"\\n\";\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: '100

    '
  timestamp: 1659977959
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $output='';\n  for($i=0;$i<strlen($a);$i++){\n    $output.=(int)$a[$i]^(int)$b[$i];\n\
    \  }\n  return $output;\n}\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977959
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \    $length = max(strlen($a), strlen($b));\n    $result = '';\n    for ($i =\
    \ 0; $i < $length; $i++) {\n        $result .= $a[$i] == $b[$i] ? '0' : '1';\n\
    \    }\n    return $result;\n}\n\necho string_xor(\"010\", \"110\");\necho \"\
    <br />\";\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: 100<br />
  timestamp: 1659977959
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $output = \"\";\n  for ($i = 0; $i < strlen($a); $i++) {\n    $output .= ((int)$a[$i]\
    \ ^ (int)$b[$i]);\n  }\n  return $output;\n}\n\n$a = \"010\";\n$b = \"110\";\n\
    echo string_xor($a, $b);\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: '100'
  timestamp: 1659977959
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $a = str_split($a);\n  $b = str_split($b);\n  $result = [];\n  for ($i = 0;\
    \ $i < count($a); $i++) {\n    if ($a[$i] === $b[$i]) {\n      $result[] = 0;\n\
    \    } else {\n      $result[] = 1;\n    }\n  }\n  return implode('', $result);\n\
    }\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977959
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $ret = \"\";\n  for ($i = 0; $i < strlen($a); $i++) {\n    $ret .= (($a[$i]==\"\
    1\") xor ($b[$i]==\"1\")) ? \"1\" : \"0\";\n  }\n  return $ret;\n}\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \    // Your code here\n    //$a = str_split($a);\n    //$b = str_split($b);\n\
    \    //$res = \"\";\n    //for($i = 0; $i < count($a); $i++){\n    //    $res\
    \ .= $a[$i] ^ $b[$i];\n    //}\n    //return $res;\n    \n    $a = str_split($a);\n\
    \    $b = str_split($b);\n    $res = \"\";\n    foreach ($a as $key => $value)\
    \ {\n        $res .= $value ^ $b[$key];\n    }\n    return $res;\n}\n\necho string_xor(\"\
    010\", \"110\") . \"\\n\";\necho string_xor(\"111\", \"010\") . \"\\n\";\necho\
    \ string_xor(\"1010\", \"1111\") . \"\\n\";\necho string_xor(\"1111\", \"1010\"\
    ) . \"\\n\";\necho string_xor(\"001011011010101101101010111111\", \"101011011010101101101010111111\"\
    ) . \"\\n\";\necho string_xor(\"001011011010101101101010111111\", \"111111111111111111111111110111\"\
    ) . \"\\n\";\necho string_xor(\"001011011010101101101010111111\", \"01011011010101101101010111111\"\
    ) . \"\\n\";\necho string_xor(\"001011011010101101101010111111\", \"001011011010101101101010111111\"\
    ) . \"\\n\";\necho string_xor(\"001011011010101101101010111111\", \"101011011010101101101010111111\"\
    ) . \"\\n\";\necho string_xor(\"001011011010101101101010111111\", \"001011011010101101101010111111\"\
    ) . \"\\n\";\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\x01\0\0\n\x01\0\x01\n\0\x01\0\x01\n\0\x01\0\x01\n\x01\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\n\x01\x01\0\x01\0\0\x01\0\0\x01\0\x01\
    \0\x01\0\0\x01\0\0\x01\0\x01\0\x01\0\0\x01\0\0\0\n\nWarning: Undefined array key\
    \ 29 in /tmp/tmpo4jqh1ix.php on line 20\n\0\x01\x01\x01\0\x01\x01\0\x01\x01\x01\
    \x01\x01\x01\0\x01\x01\0\x01\x01\x01\x01\x01\x01\0\0\0\0\01\n\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\n\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo4jqh1ix.php:41\n\
    Stack trace:\n#0 /tmp/tmpo4jqh1ix.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpo4jqh1ix.php\
    \ on line 41\n"
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  // Your code here\n}\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpypookq_g.php:14\n\
    Stack trace:\n#0 /tmp/tmpypookq_g.php(19): test()\n#1 {main}\n  thrown in /tmp/tmpypookq_g.php\
    \ on line 14\n"
  timestamp: 1659823299
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \    return strtr(bin2hex($a ^ $b), '0123456789abcdef', '0123456789');\n}\n\n\
    function candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpom6vumao.php:15\n\
    Stack trace:\n#0 /tmp/tmpom6vumao.php(20): test()\n#1 {main}\n  thrown in /tmp/tmpom6vumao.php\
    \ on line 15\n"
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $result = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i]\
    \ ^ $b[$i];\n  }\n  return $result;\n}\necho string_xor(\"010\", \"110\");\n\n\
    function candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\x01\0\0\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjthztpsw.php:20\n\
    Stack trace:\n#0 /tmp/tmpjthztpsw.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpjthztpsw.php\
    \ on line 20\n"
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \    $a = str_split($a);\n    $b = str_split($b);\n    $result = [];\n    for\
    \ ($i = 0; $i < count($a); $i++) {\n        $result[] = $a[$i] ^ $b[$i];\n   \
    \ }\n    return implode('', $result);\n}\n\nfunction candidate(...$args) {\n \
    \   return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpspon90uk.php:21\n\
    Stack trace:\n#0 /tmp/tmpspon90uk.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpspon90uk.php\
    \ on line 21\n"
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \    $out = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $out .= ($a[$i]\
    \ ^ $b[$i]);\n    }\n    return $out;\n}\n\n$tests = array(\n    \"string_xor('010',\
    \ '110')\" => '100',\n    \"string_xor('1010', '1011')\" => '0001',\n    \"string_xor('00111010010101',\
    \ '11110110111010')\" => '11000100110001',\n    \"string_xor('00111010010101',\
    \ '11110110111010')\" => '11000100110001',\n    \"string_xor('10', '111')\" =>\
    \ '\"Equal length strings expected\"',\n    \"string_xor('', '111')\" => '\"Equal\
    \ length strings expected\"',\n    \"string_xor('10', '')\" => '\"Equal length\
    \ strings expected\"',\n    \"string_xor('0010101', '0101010')\" => '\"0111111\"\
    ',\n    \"string_xor('00101010100110', '01010101010010')\" => '\"01111110000100\"\
    ',\n    \"string_xor('0000000111111111', '111111100100100100100')\" => '\"111111101101101101101\"\
    ',\n    \"string_xor('1010101010101', '0101010101010')\" => '\"1111111111111\"\
    ',\n    \"string_xor('00101010100110', '01010101010010')\" => '\"01111110000100\"\
    ',\n    \"string_xor('0000000111111111', '111111100100100100100')\" => '\"111111101101101101101\"\
    ',\n    \"string_xor('1010101010101', '0101010101010')\" => '\"1111111111111\"\
    ',\n    \"string_xor('10', '10')\" => '\"0\"',\n    \"string_xor('10', '11')\"\
    \ => '\"1\"',\n    \"string_xor('111\nfunction candidate(...$args) {\n    return\
    \ string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\"\
    , \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected integer "111000", expecting ")" in /tmp/tmp_ck64kn6.php
    on line 37

    '
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \    $length=strlen($a);\n    $result='';\n    for($i=0;$i<$length;$i++){\n  \
    \      $result.=($a[$i]^$b[$i]);\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1u7cgi9d.php:19\n\
    Stack trace:\n#0 /tmp/tmp1u7cgi9d.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp1u7cgi9d.php\
    \ on line 19\n"
  timestamp: 1659977959
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \    $output = \"\";\n    if(strlen($a) == strlen($b)){\n        for($i = 0; $i\
    \ < strlen($a); $i++){\n            if($a[$i] == $b[$i]){\n                $output\
    \ .= \"0\";\n            } else {\n                $output .= \"1\";\n       \
    \     }\n        }\n    }\n    return $output;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \    $xor = \"\";\n    for ($i = 0; $i < strlen($a); $i++) {\n        $xor .=\
    \ $a[$i] ^ $b[$i];\n    }\n    return $xor;\n}\nfunction candidate(...$args) {\n\
    \    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk9jsi4w6.php:18\n\
    Stack trace:\n#0 /tmp/tmpk9jsi4w6.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpk9jsi4w6.php\
    \ on line 18\n"
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \    $output = '';\n    $a_len = strlen($a);\n    $b_len = strlen($b);\n    if\
    \ ($a_len == $b_len) {\n        for ($i = 0; $i < $a_len; $i++) {\n          \
    \  $output .= $a[$i] ^ $b[$i];\n        }\n    }\n    return $output;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxgz1um3l.php:23\n\
    Stack trace:\n#0 /tmp/tmpxgz1um3l.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpxgz1um3l.php\
    \ on line 23\n"
  timestamp: 1659977959
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \    $str = \"\";\n    for ($i = 0; $i < strlen($a); $i++) {\n        $str .=\
    \ $a[$i] == $b[$i] ? \"0\" : \"1\";\n    }\n    return $str;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977959
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $result = \"\";\n  $binary = array(\"0\",\"1\");\n  for ($i=0; $i<strlen($a);\
    \ $i++) {\n    $result .= in_array($a[$i], $binary) && in_array($b[$i], $binary)\
    \ && $a[$i] == $b[$i] ? \"0\" : \"1\";\n  }\n  return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977959
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \t$result = '';\n\t$len = max(strlen($a), strlen($b));\n\tfor ($i = 0; $i < $len;\
    \ $i++) {\n\t\t$v1 = $i < strlen($a) ? (int) $a[$i] : 0;\n\t\t$v2 = $i < strlen($b)\
    \ ? (int) $b[$i] : 0;\n\t\t$result .= (int) ($v1 xor $v2);\n\t}\n\treturn $result;\n\
    }\n\nprint string_xor(\"010\", \"110\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '100

    '
  timestamp: 1659977959
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \    $out = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $out .= $a[$i]\
    \ ^ $b[$i];\n    }\n    return $out;\n}\nfunction candidate(...$args) {\n    return\
    \ string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\"\
    , \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp56d_gzb5.php:18\n\
    Stack trace:\n#0 /tmp/tmp56d_gzb5.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp56d_gzb5.php\
    \ on line 18\n"
  timestamp: 1659977959
