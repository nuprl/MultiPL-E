language: php
name: HumanEval_11_string_xor
results:
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \t// $a, $b are both binary strings\n\t// convert them to decimal integers\n\t\
    $a_dec = bindec($a);\n\t$b_dec = bindec($b);\n\t// perform binary xor on the decimals\n\
    \t$result_dec = $a_dec ^ $b_dec;\n\t// convert result back to binary string\n\t\
    $result = decbin($result_dec);\n\treturn $result;\n}\n\necho string_xor(\"010\"\
    , \"110\");\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "100\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprin5eo14.php:24\n\
    Stack trace:\n#0 /tmp/tmprin5eo14.php(29): test()\n#1 {main}\n  thrown in /tmp/tmprin5eo14.php\
    \ on line 24\n"
  timestamp: 1659823299
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \t$result = \"\";\n\t$len = strlen($a);\n\tfor ($i = 0; $i < $len; $i++) {\n\t\
    \t$result .= $a[$i] ^ $b[$i];\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcr3wesmq.php:20\n\
    Stack trace:\n#0 /tmp/tmpcr3wesmq.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpcr3wesmq.php\
    \ on line 20\n"
  timestamp: 1659823299
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  // Your code here\n}\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpypookq_g.php:14\n\
    Stack trace:\n#0 /tmp/tmpypookq_g.php(19): test()\n#1 {main}\n  thrown in /tmp/tmpypookq_g.php\
    \ on line 14\n"
  timestamp: 1659823299
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $xor_string = \"\";\n  for ($i = 0; $i < strlen($a); $i++) {\n    $xor_string\
    \ .= $a[$i] ^ $b[$i];\n  }\n  return $xor_string;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx3l9uuqv.php:19\n\
    Stack trace:\n#0 /tmp/tmpx3l9uuqv.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpx3l9uuqv.php\
    \ on line 19\n"
  timestamp: 1659823299
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \    $lena = strlen($a);\n    $lenb = strlen($b);\n    if ($lena != $lenb) {\n\
    \        return \"\";\n    }\n    $ret = \"\";\n    for ($i = 0; $i < $lena; $i++)\
    \ {\n        $ret .= $a[$i] ^ $b[$i];\n    }\n    return $ret;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0rj_vqxq.php:24\n\
    Stack trace:\n#0 /tmp/tmp0rj_vqxq.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp0rj_vqxq.php\
    \ on line 24\n"
  timestamp: 1659823299
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $a_len = strlen($a);\n  $b_len = strlen($b);\n  $length = max($a_len, $b_len);\n\
    \  $a = str_pad($a, $length, '0', STR_PAD_LEFT);\n  $b = str_pad($b, $length,\
    \ '0', STR_PAD_LEFT);\n  $xor = '';\n  for ($i = 0; $i < $length; $i++) {\n  \
    \  $a_bit = (int) $a[$i];\n    $b_bit = (int) $b[$i];\n    $bit = $a_bit ^ $b_bit;\n\
    \    $xor .= (string) $bit;\n  }\n  return $xor;\n}\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823299
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $c = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $c .= $a[$i] xor $b[$i];\n\
    \  }\n  return $c;\n}\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2_vtzxhq.php:18\n\
    Stack trace:\n#0 /tmp/tmp2_vtzxhq.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp2_vtzxhq.php\
    \ on line 18\n"
  timestamp: 1659823299
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $result = \"\";\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= intval($a[$i])\
    \ ^ intval($b[$i]);\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823299
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  // Your code here\n  // $a = convertToBin($a);\n  // $b = convertToBin($b);\n\
    \  return decbin(bindec($a) ^ bindec($b));\n  // return bin2hex(bindec($a) ^ bindec($b));\n\
    }\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkq7liems.php:19\n\
    Stack trace:\n#0 /tmp/tmpkq7liems.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpkq7liems.php\
    \ on line 19\n"
  timestamp: 1659823299
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  if (strlen($a) != strlen($b)) {\n    return \"Length mismatch\";\n  }\n  $out\
    \ = \"\";\n  for ($i = 0; $i < strlen($a); $i++) {\n    $out .= ($a[$i] ^ $b[$i]);\n\
    \  }\n  return $out;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpif_qta5v.php:22\n\
    Stack trace:\n#0 /tmp/tmpif_qta5v.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpif_qta5v.php\
    \ on line 22\n"
  timestamp: 1659823299
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $result = \"\";\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= ($a[$i]\
    \ ^ $b[$i]);\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n  \
    \  return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsqy0a76n.php:19\n\
    Stack trace:\n#0 /tmp/tmpsqy0a76n.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpsqy0a76n.php\
    \ on line 19\n"
  timestamp: 1659823299
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $result = array();\n  $a = str_split($a);\n  $b = str_split($b);\n  $size =\
    \ count($a);\n  for ($i = 0; $i < $size; $i++) {\n    $result[] = (int) $a[$i]\
    \ ^ (int) $b[$i];\n  }\n  return implode($result);\n}\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823299
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $result = \"\";\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i]\
    \ ^ $b[$i];\n  }\n  return $result;\n}\nfunction candidate(...$args) {\n    return\
    \ string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\"\
    , \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp78tk4boe.php:18\n\
    Stack trace:\n#0 /tmp/tmp78tk4boe.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp78tk4boe.php\
    \ on line 18\n"
  timestamp: 1659823299
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \    return decbin(bindec($a) ^ bindec($b));\n}\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpss6v43iy.php:14\n\
    Stack trace:\n#0 /tmp/tmpss6v43iy.php(19): test()\n#1 {main}\n  thrown in /tmp/tmpss6v43iy.php\
    \ on line 14\n"
  timestamp: 1659823299
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \treturn strval(bindec($a) ^ bindec($b));\n}\n\nfunction candidate(...$args) {\n\
    \    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppodegep3.php:15\n\
    Stack trace:\n#0 /tmp/tmppodegep3.php(20): test()\n#1 {main}\n  thrown in /tmp/tmppodegep3.php\
    \ on line 15\n"
  timestamp: 1659823299
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \    $num1 = (int)$a;\n    $num2 = (int)$b;\n    $res = decbin($num1 ^ $num2);\n\
    \    return $res;\n}\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0stafg0g.php:17\n\
    Stack trace:\n#0 /tmp/tmp0stafg0g.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp0stafg0g.php\
    \ on line 17\n"
  timestamp: 1659823299
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \  $length = max(strlen($a), strlen($b));\n  $result = \"\";\n  for ($i = 0; $i\
    \ < $length; $i++) {\n    $x = ($i < strlen($a)) ? (int)$a[$i] : 0;\n    $y =\
    \ ($i < strlen($b)) ? (int)$b[$i] : 0;\n    $result .= ($x ^ $y);\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823299
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \    // Convert hex string to binary string\n    $aBin = hex2bin($a);\n    $bBin\
    \ = hex2bin($b);\n    $aBin = str_split($aBin);\n    $bBin = str_split($bBin);\n\
    \    $result = \"\";\n    // XOR strings by iterating through them\n    foreach($aBin\
    \ as $key => $val) {\n        if ($val == $bBin[$key]) {\n            $result\
    \ .= \"0\";\n        } else {\n            $result .= \"1\";\n        }\n    }\n\
    \    // Return result as hex string\n    return bin2hex($result);\n}\n\necho string_xor(\"\
    010\", \"110\");\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: hex2bin(): Hexadecimal input string must have an even length\
    \ in /tmp/tmpy0elebtw.php on line 8\n\nWarning: hex2bin(): Hexadecimal input string\
    \ must have an even length in /tmp/tmpy0elebtw.php on line 9\n30\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpy0elebtw.php:32\nStack trace:\n\
    #0 /tmp/tmpy0elebtw.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpy0elebtw.php\
    \ on line 32\n"
  timestamp: 1659823299
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \    $res = \"\";\n    for ($i = 0; $i < strlen($a); $i++) {\n        $res .=\
    \ intval($a[$i]) ^ intval($b[$i]);\n    }\n    return $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823299
- exit_code: 0
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\
    \    $a = str_split($a);\n    $b = str_split($b);\n    $len = count($a);\n   \
    \ $result = [];\n    for ($i = 0; $i < $len; $i++) {\n        $result[] = ($a[$i]\
    \ == $b[$i]) ? 0 : 1;\n    }\n    return implode($result);\n}\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823299
