language: php
name: HumanEval_128_prod_signs
results:
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \tif(empty($arr)) {\n\t\treturn NULL;\n\t}\n\t$sum_magnitudes = 0;\n\t$product_signs\
    \ = 1;\n\tfor($i = 0; $i < count($arr); $i++) {\n\t\t$sum_magnitudes += abs($arr[$i]);\n\
    \t\t$product_signs *= $arr[$i] <=> 0;\n\t}\n\treturn $sum_magnitudes * $product_signs;\n\
    }\necho prod_signs(array(1, 2, 2, -4)) . \"\\n\";\necho prod_signs(array(0, 1))\
    \ . \"\\n\";\necho prod_signs(array()) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '-9

    0


    '
  timestamp: 1659823661
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \tif (empty($arr)) {\n\t\treturn null;\n\t}\n\t$sum = 0;\n\t$prod = 1;\n\tforeach\
    \ ($arr as $val) {\n\t\t$prod *= $val <=> 0;\n\t\t$sum += abs($val);\n\t}\n\t\
    return $sum * $prod;\n}\necho \"<pre>\";\nprint_r(prod_signs(array(1, 2, 2, -4)));\n\
    echo \"</pre>\";\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: <pre>-9</pre>
  timestamp: 1659823661
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2,\
    \ 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1, 1, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjhag7vrf.php:22\n\
    Stack trace:\n#0 /tmp/tmpjhag7vrf.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpjhag7vrf.php\
    \ on line 22\n"
  timestamp: 1659823661
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  if(empty($arr)){\n    return null;\n  }\n  $product = 1;\n  $sum = 0;\n  foreach($arr\
    \ as $value){\n    if($value == 0){\n      $product *= 1;\n    }\n    else if($value\
    \ > 0){\n      $product *= 1;\n      $sum += $value;\n    }\n    else if($value\
    \ < 0){\n      $product *= -1;\n      $sum += abs($value);\n    }\n  }\n  return\
    \ $sum * $product;\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpytc6kk1e.php:41\n\
    Stack trace:\n#0 /tmp/tmpytc6kk1e.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpytc6kk1e.php\
    \ on line 41\n"
  timestamp: 1659823661
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \    $signs = array();\n    $nums = array();\n    foreach ($arr as $item) {\n\
    \        if ($item > 0) {\n            $signs[] = 1;\n        } elseif ($item\
    \ < 0) {\n            $signs[] = -1;\n        } else {\n            $signs[] =\
    \ 0;\n        }\n        $nums[] = abs($item);\n    }\n    if (!empty($nums))\
    \ {\n        return array_product($signs) * array_sum($nums);\n    } else {\n\
    \        return null;\n    }\n}\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823661
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \    $prod_signs = 1;\n    $sum_magnitudes = 0;\n    if(sizeof($arr) > 0) {\n\
    \        foreach($arr as $int) {\n            if($int == 0) {\n              \
    \  $prod_signs = 0;\n                break;\n            }\n            else if($int\
    \ > 0) {\n                $prod_signs *= 1;\n                $sum_magnitudes +=\
    \ $int;\n            }\n            else {\n                $prod_signs *= -1;\n\
    \                $sum_magnitudes += abs($int);\n            }\n        }\n   \
    \     return $prod_signs * $sum_magnitudes;\n    }\n    else {\n        return\
    \ null;\n    }\n}\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823661
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  $product = 1;\n  $sum = 0;\n  foreach ($arr as $value) {\n    $sign = 0;\n\
    \    if ($value > 0) {\n      $sign = 1;\n    } elseif ($value < 0) {\n      $sign\
    \ = -1;\n    }\n    $sum += abs($value);\n    $product *= $sign;\n  }\n  return\
    \ $sum * $product;\n}\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3q1sa89i.php:36\n\
    Stack trace:\n#0 /tmp/tmp3q1sa89i.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp3q1sa89i.php\
    \ on line 36\n"
  timestamp: 1659823661
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  $p = 1;\n  $s = 0;\n  foreach ($arr as $value) {\n    if ($value > 0) {\n \
    \     $p *= 1;\n      $s += $value;\n    } elseif ($value < 0) {\n      $p *=\
    \ -1;\n      $s += abs($value);\n    } else {\n      $p *= 0;\n    }\n  }\n  if\
    \ (count($arr) == 0) {\n    return null;\n  } else {\n    return $p * $s;\n  }\n\
    }\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823661
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \tif(empty($arr)){\n\t\treturn NULL;\n\t}\n\t$magnitude = array_map(function($num){\n\
    \t\treturn abs($num);\n\t}, $arr);\n\t$sign = array_map(function($num){\n\t\t\
    return $num <=> 0;\n\t}, $arr);\n\treturn array_sum($magnitude) * array_product($sign);\n\
    }\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823661
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  $sign = $val = 1;\n  foreach ($arr as $elem) {\n    if ($elem === 0) {\n  \
    \    return 0;\n    }\n    $sign *= $elem > 0 ? 1 : -1;\n    $val += abs($elem);\n\
    \  }\n  return $sign * $val;\n}\n\necho prod_signs(array(1, 2, 2, -4));\necho\
    \ prod_signs(array(0, 1));\necho prod_signs(array());\n ?>\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "-1001function candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  timestamp: 1659823661
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  if(count($arr) == 0) return null;\n  $sum = 0;\n  $prod = 1;\n  foreach($arr\
    \ as $item) {\n    $prod *= $item > 0 ? 1 : ($item < 0 ? -1 : 0);\n    $sum +=\
    \ abs($item);\n  }\n  return $sum * $prod;\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823661
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  if (!sizeof($arr)) return null;\n  $prod = 1;\n  $sum = 0;\n  foreach ($arr\
    \ as $i) {\n    $prod *= sign($i);\n    $sum += abs($i);\n  }\n  return $prod\
    \ * $sum;\n}\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sign() in /tmp/tmpc11j3ha_.php:18\n\
    Stack trace:\n#0 /tmp/tmpc11j3ha_.php(24): prod_signs(Array)\n#1 /tmp/tmpc11j3ha_.php(28):\
    \ candidate(Array)\n#2 /tmp/tmpc11j3ha_.php(38): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpc11j3ha_.php on line 18\n"
  timestamp: 1659823661
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  \n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2,\
    \ 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1, 1, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptxyqpsa8.php:22\n\
    Stack trace:\n#0 /tmp/tmptxyqpsa8.php(32): test()\n#1 {main}\n  thrown in /tmp/tmptxyqpsa8.php\
    \ on line 22\n"
  timestamp: 1659823661
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \    if (count($arr) == 0) return null;\n    $prod = 1;\n    $sum = 0;\n    foreach\
    \ ($arr as $item) {\n        if ($item == 0) continue;\n        $prod *= $item\
    \ > 0 ? 1 : -1;\n        $sum += abs($item);\n    }\n    return $prod * $sum;\n\
    }\n$result = prod_signs(array(1, 2, 2, -4));\necho \"$result\\n\";\n$result =\
    \ prod_signs(array(0, 1));\necho \"$result\\n\";\n$result = prod_signs(array());\n\
    echo \"$result\\n\";\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "-9\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsauvsij0.php:36\n\
    Stack trace:\n#0 /tmp/tmpsauvsij0.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpsauvsij0.php\
    \ on line 36\n"
  timestamp: 1659823661
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  if (empty($arr)) {\n    return null;\n  }\n  $magnitudes = array_map('abs',\
    \ $arr);\n  $signs = array_map(function($n) {\n    return $n < 0 ? -1 : 1;\n \
    \ }, $arr);\n  $product = array_product($signs);\n  return array_sum($magnitudes)\
    \ * $product;\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgf3333og.php:31\n\
    Stack trace:\n#0 /tmp/tmpgf3333og.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpgf3333og.php\
    \ on line 31\n"
  timestamp: 1659823661
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \    if (empty($arr)) {\n        return null;\n    }\n    $sum = 0;\n    $product\
    \ = 1;\n    foreach ($arr as $value) {\n        if ($value > 0) {\n          \
    \  $product *= 1;\n        } elseif ($value < 0) {\n            $product *= -1;\n\
    \        } else {\n            $product *= 0;\n        }\n        $sum += abs($value);\n\
    \    }\n    return $sum * $product;\n}\n\n$arr1 = array(1, 2, 2, -4);\n$arr2 =\
    \ array(0, 1);\n$arr3 = array();\n$arr4 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n\
    var_dump(prod_signs($arr1));\nvar_dump(prod_signs($arr2));\nvar_dump(prod_signs($arr3));\n\
    var_dump(prod_signs($arr4));\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'int(-9)

    int(0)

    NULL

    int(55)

    '
  timestamp: 1659823661
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  $magnitudes = 0;\n  $signs = 1;\n  if(empty($arr)) return null;\n  foreach($arr\
    \ as $val) {\n    $signs *= sign($val);\n    $magnitudes += abs($val);\n  }\n\
    \  return $magnitudes * $signs;\n}\n\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sign() in /tmp/tmp88p7ycog.php:18\n\
    Stack trace:\n#0 /tmp/tmp88p7ycog.php(25): prod_signs(Array)\n#1 /tmp/tmp88p7ycog.php(29):\
    \ candidate(Array)\n#2 /tmp/tmp88p7ycog.php(39): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmp88p7ycog.php on line 18\n"
  timestamp: 1659823661
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \tif (!count($arr)) {\n\t\treturn NULL;\n\t}\n\t$product = 1;\n\t$sum = 0;\n\t\
    foreach ($arr as $val) {\n\t\t$sign = $val === 0 ? 0 : $val / abs($val);\n\t\t\
    $product *= $sign;\n\t\t$sum += abs($val);\n\t}\n\treturn $sum * $product;\n}\n\
    \necho prod_signs(array(1, 2, 2, -4));\necho prod_signs(array(0, 1));\necho prod_signs(array());\n\
    function candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '-90'
  timestamp: 1659823661
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  if (empty($arr)) {\n    return null;\n  }\n\n  $signs = array();\n  $magnitudes\
    \ = array();\n  foreach ($arr as $num) {\n    $signs[] = $num > 0 ? 1 : ($num\
    \ < 0 ? -1 : 0);\n    $magnitudes[] = abs($num);\n  }\n\n  return array_product($signs)\
    \ * array_sum($magnitudes);\n}\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823661
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  if(count($arr) == 0) {\n    return null;\n  }\n  $prod_signs = 1;\n  $magnitude_sum\
    \ = 0;\n  foreach($arr as $num) {\n    $magnitude_sum += abs($num);\n    if($num\
    \ != 0) {\n      $prod_signs *= $num / abs($num);\n    }\n  }\n  return $magnitude_sum\
    \ * $prod_signs;\n}\necho prod_signs(array(1, 2, 2, -4));\necho \"\\n\";\necho\
    \ prod_signs(array(0, 1));\necho \"\\n\";\necho prod_signs(array());\necho \"\\\
    n\";\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2,\
    \ 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1, 1, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "-9\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpitixy5i7.php:39\n\
    Stack trace:\n#0 /tmp/tmpitixy5i7.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpitixy5i7.php\
    \ on line 39\n"
  timestamp: 1659823661
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  $sum = 0;\n  $prod = 1;\n  if (count($arr) == 0) {\n    return null;\n  }\n\
    \  foreach ($arr as $num) {\n    if ($num > 0) {\n      $prod *= 1;\n    } elseif\
    \ ($num < 0) {\n      $prod *= -1;\n    } else {\n      $prod *= 0;\n    }\n \
    \   $sum += abs($num);\n  }\n  return $sum * $prod;\n}\necho prod_signs(array(1,\
    \ 2, 2, -4));\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '-9'
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \    // your code here\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx3dp0dv1.php:22\n\
    Stack trace:\n#0 /tmp/tmpx3dp0dv1.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpx3dp0dv1.php\
    \ on line 22\n"
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \tif(!empty($arr)){\n\t\t$sum = 1;\n\t\tforeach($arr as $i){\n\t\t\tif($i > 0){\n\
    \t\t\t\t$sum *= 1;\n\t\t\t}\n\t\t\telseif($i < 0){\n\t\t\t\t$sum *= -1;\n\t\t\t\
    }\n\t\t\telseif($i === 0){\n\t\t\t\t$sum *= 0;\n\t\t\t}\n\t\t}\n\t\treturn $sum;\n\
    \t}\n\telse{\n\t\treturn null;\n\t}\n}\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkcmigxhc.php:38\n\
    Stack trace:\n#0 /tmp/tmpkcmigxhc.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpkcmigxhc.php\
    \ on line 38\n"
  timestamp: 1659979984
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \    if (empty($arr)) {\n        return null;\n    }\n    $prod = 1;\n    $sum\
    \ = 0;\n    foreach ($arr as $value) {\n        if ($value > 0) {\n          \
    \  $prod *= 1;\n        } elseif ($value < 0) {\n            $prod *= -1;\n  \
    \      } else {\n            $prod *= 0;\n        }\n        $sum += abs($value);\n\
    \    }\n    return $sum * $prod;\n}\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  // your code goes here\n}\n\necho prod_signs(array(1, 2, 2, -4)) . PHP_EOL;\n\
    echo prod_signs(array(0, 1)) . PHP_EOL;\necho prod_signs(array()) . PHP_EOL;\n\
    function candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyu8zj_a1.php:25\n\
    Stack trace:\n#0 /tmp/tmpyu8zj_a1.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpyu8zj_a1.php\
    \ on line 25\n"
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  if (count($arr) === 0) return NULL;\n  $product = 1;\n  $magnitudes = 0;\n\
    \  foreach ($arr as $int) {\n    if ($int === 0) continue;\n    if ($int > 0)\
    \ {\n      $product *= 1;\n    } else {\n      $product *= -1;\n    }\n    $magnitudes\
    \ += abs($int);\n  }\n  return $magnitudes * $product;\n}\necho prod_signs(array(1,\
    \ 2, 2, -4)) . \"\\n\";\necho prod_signs(array(0, 1)) . \"\\n\";\necho prod_signs(array())\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "-9\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjzvwfdpa.php:37\n\
    Stack trace:\n#0 /tmp/tmpjzvwfdpa.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpjzvwfdpa.php\
    \ on line 37\n"
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  // Write your code here\n  // To print results to the standard output you can\
    \ use print\n  // Example:\n  // print \"Hello world!\";\n  if (count($arr) ==\
    \ 0) {\n    return null;\n  }\n\n  $count_pos = 0;\n  $count_neg = 0;\n  $count_zero\
    \ = 0;\n  $sum = 0;\n\n  foreach ($arr as $num) {\n    if ($num > 0) {\n     \
    \ $count_pos += 1;\n    } else if ($num < 0) {\n      $count_neg += 1;\n    }\
    \ else {\n      $count_zero += 1;\n    }\n    $sum += abs($num);\n  }\n\n  $result\
    \ = $sum;\n  if ($count_pos % 2 == 0) {\n    $result *= -1;\n  }\n  if ($count_neg\
    \ % 2 == 1) {\n    $result *= -1;\n  }\n  if ($count_zero > 0) {\n    $result\
    \ = 0;\n  }\n\n  return $result;\n}\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk9apv591.php:58\n\
    Stack trace:\n#0 /tmp/tmpk9apv591.php(66): test()\n#1 {main}\n  thrown in /tmp/tmpk9apv591.php\
    \ on line 58\n"
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  if (!count($arr)) return null;\n  $product = 1;\n  $sum = 0;\n  foreach ($arr\
    \ as $val) {\n    $val = abs($val);\n    $sum += $val;\n    $product *= $val ==\
    \ 0 ? 1 : ($val > 0 ? 1 : -1);\n  }\n  return $sum * $product;\n}\n\necho prod_signs(array(1,\
    \ 2, 2, -4));\necho PHP_EOL;\necho prod_signs(array(0, 1));\necho PHP_EOL;\necho\
    \ prod_signs(array());\necho PHP_EOL;\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "9\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuze5c68w.php:36\n\
    Stack trace:\n#0 /tmp/tmpuze5c68w.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpuze5c68w.php\
    \ on line 36\n"
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \t$prod = 1;\n\t$sum = 0;\n\t$length = count($arr);\n\tif ($length == 0) return\
    \ null;\n\tfor ($i = 0; $i < $length; $i++) {\n\t\t$arr[$i] < 0 ? $prod *= -1\
    \ : null;\n\t\t$sum += abs($arr[$i]);\n\t}\n\treturn $sum * $prod;\n}\n\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkhlwcqh9.php:31\n\
    Stack trace:\n#0 /tmp/tmpkhlwcqh9.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpkhlwcqh9.php\
    \ on line 31\n"
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  $prod = 1;\n  $sum = 0;\n  foreach ($arr as $el) {\n    $sum += abs($el);\n\
    \    if ($el > 0) {\n      $prod *= 1;\n    } elseif ($el < 0) {\n      $prod\
    \ *= -1;\n    } else {\n      $prod *= 0;\n    }\n  }\n  return $sum * $prod;\n\
    }\necho prod_signs(array(1, 2, 2, -4));\necho \"<br>\";\necho prod_signs(array(0,\
    \ 1));\necho \"<br>\";\necho prod_signs(array());\necho \"<br>\";\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "-9<br>0<br>0<br>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdx_drm2u.php:42\n\
    Stack trace:\n#0 /tmp/tmpdx_drm2u.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpdx_drm2u.php\
    \ on line 42\n"
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \    if (empty($arr)) {\n        return null;\n    }\n    $signs_product = array_product(array_map(function($value)\
    \ {\n        return get_sign($value);\n    }, $arr));\n    $magnitudes_sum = array_sum(array_map(function($value)\
    \ {\n        return abs($value);\n    }, $arr));\n    return $signs_product *\
    \ $magnitudes_sum;\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_sign() in\
    \ /tmp/tmpohalg17y.php:18\nStack trace:\n#0 [internal function]: {closure}(1)\n\
    #1 /tmp/tmpohalg17y.php(19): array_map(Object(Closure), Array)\n#2 /tmp/tmpohalg17y.php(27):\
    \ prod_signs(Array)\n#3 /tmp/tmpohalg17y.php(31): candidate(Array)\n#4 /tmp/tmpohalg17y.php(41):\
    \ test()\n#5 {main}\n  thrown in /tmp/tmpohalg17y.php on line 18\n"
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \    if (count($arr) === 0) {\n        return null;\n    }\n    $magnitudes =\
    \ [];\n    $signs = [];\n    $magnitude = 0;\n    $sign = 1;\n    foreach ($arr\
    \ as $num) {\n        $magnitude = (int) abs($num);\n        $sign = $num == 0\
    \ ? 0 : ($num < 0 ? -1 : 1);\n        $magnitudes[] = $magnitude;\n        $signs[]\
    \ = $sign;\n    }\n    $result = array_product($signs);\n    foreach ($magnitudes\
    \ as $magnitude) {\n        $result *= $magnitude;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyn2ydrqm.php:39\n\
    Stack trace:\n#0 /tmp/tmpyn2ydrqm.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpyn2ydrqm.php\
    \ on line 39\n"
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  // your code here\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpokh49ro4.php:22\n\
    Stack trace:\n#0 /tmp/tmpokh49ro4.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpokh49ro4.php\
    \ on line 22\n"
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \tif (empty($arr)) {\n\t\treturn null;\n\t}\n\t// Add code here\n}\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpevisps2e.php:24\n\
    Stack trace:\n#0 /tmp/tmpevisps2e.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpevisps2e.php\
    \ on line 24\n"
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  $sum = 0;\n  $prod = 1;\n  foreach ($arr as $number) {\n    if ($number !=\
    \ 0) {\n      $sum += abs($number);\n      $prod *= $number > 0 ? 1 : -1;\n  \
    \  }\n  }\n  return $sum * $prod;\n}\n\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4uagbf4r.php:31\n\
    Stack trace:\n#0 /tmp/tmp4uagbf4r.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp4uagbf4r.php\
    \ on line 31\n"
  timestamp: 1659979984
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \t$product = 1;\n\t$sum = 0;\n\tif (count($arr) === 0) {\n\t\treturn null;\n\t\
    }\n\tforeach ($arr as $v) {\n\t\tif ($v > 0) {\n\t\t\t$product *= 1;\n\t\t\t$sum\
    \ += $v;\n\t\t} elseif ($v < 0) {\n\t\t\t$product *= -1;\n\t\t\t$sum += abs($v);\n\
    \t\t} else {\n\t\t\t$product *= 0;\n\t\t}\n\t}\n\treturn $sum * $product;\n}\n\
    \nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  if (count($arr) == 0) {\n    return null;\n  }\n  $magnitude_sum = 0;\n  $sign_prod\
    \ = 1;\n  foreach ($arr as $number) {\n    $magnitude_sum += abs($number);\n \
    \   $sign_prod *= $number == 0 ? 1 : $number / abs($number);\n  }\n  return $magnitude_sum\
    \ * $sign_prod;\n}\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpee1bvsgm.php:31\n\
    Stack trace:\n#0 /tmp/tmpee1bvsgm.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpee1bvsgm.php\
    \ on line 31\n"
  timestamp: 1659979984
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  if (!count($arr)) {\n    return null;\n  }\n  $sum = 0;\n  $prod = 1;\n  foreach\
    \ ($arr as $n) {\n    if ($n > 0) {\n      $sum += $n;\n      $prod *= 1;\n  \
    \  } elseif ($n < 0) {\n      $sum += -$n;\n      $prod *= -1;\n    } else {\n\
    \      $prod *= 0;\n    }\n  }\n  return $sum * $prod;\n}\n\necho prod_signs(array(1,\
    \ 2, 2, -4)) . \"\\n\";\necho prod_signs(array(0, 1)) . \"\\n\";\necho prod_signs(array())\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '-9

    0


    '
  timestamp: 1659979984
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  // Write your code here\n  // To print results to the standard output you can\
    \ use print\n  // Example:\n  // print \"Hello world!\";\n  $numb = count($arr);\n\
    \  if($numb == 0){\n    return NULL;\n  }\n  $magnitudes = array();\n  $signs\
    \ = array();\n  for($i = 0; $i < $numb; $i++){\n    $magnitudes[$i] = abs($arr[$i]);\n\
    \    if($arr[$i] == 0){\n      $signs[$i] = 0;\n    }else if($arr[$i] > 0){\n\
    \      $signs[$i] = 1;\n    }else{\n      $signs[$i] = -1;\n    }\n  }\n  $total_magnitude\
    \ = array_sum($magnitudes);\n  $prod_signs = array_product($signs);\n  return\
    \ $total_magnitude * $prod_signs;\n}\n\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  $signs = array_count_values(array_map('sign', $arr));\n  $magnitudes = array_map('abs',\
    \ $arr);\n  $magnitudes = array_count_values($magnitudes);\n  ksort($magnitudes);\n\
    \  $result = 0;\n  foreach ($magnitudes as $mag => $count) {\n    $sign_count\
    \ = isset($signs[1]) ? $signs[1] : 0;\n    $result += $mag * $count * pow(-1,\
    \ $sign_count);\n  }\n  return $result ?: null;\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: array_map(): Argument #1 ($callback)\
    \ must be a valid callback or null, function \"sign\" not found or invalid function\
    \ name in /tmp/tmpji4gmhgi.php:14\nStack trace:\n#0 /tmp/tmpji4gmhgi.php(14):\
    \ array_map('sign', Array)\n#1 /tmp/tmpji4gmhgi.php(27): prod_signs(Array)\n#2\
    \ /tmp/tmpji4gmhgi.php(31): candidate(Array)\n#3 /tmp/tmpji4gmhgi.php(41): test()\n\
    #4 {main}\n  thrown in /tmp/tmpji4gmhgi.php on line 14\n"
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \    $count = count($arr);\n    if ($count == 0) {\n        return null;\n   \
    \ }\n    $sign = 1;\n    $sum = 0;\n    for ($i = 0; $i < $count; $i++) {\n  \
    \      $sign *= sign($arr[$i]);\n        $sum += abs($arr[$i]);\n    }\n    return\
    \ $sum * $sign;\n}\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sign() in /tmp/tmpflxwemkd.php:21\n\
    Stack trace:\n#0 /tmp/tmpflxwemkd.php(27): prod_signs(Array)\n#1 /tmp/tmpflxwemkd.php(31):\
    \ candidate(Array)\n#2 /tmp/tmpflxwemkd.php(41): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpflxwemkd.php on line 21\n"
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  if (count($arr) == 0) {\n    return null;\n  }\n\n  $product = 1;\n  $magnitudes_sum\
    \ = 0;\n  foreach ($arr as $number) {\n    $sign = $number / abs($number);\n \
    \   $product *= $sign;\n    $magnitudes_sum += abs($number);\n  }\n\n  return\
    \ $magnitudes_sum * $product;\n}\n\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught DivisionByZeroError: Division by zero in /tmp/tmpu1v2s9l0.php:21\n\
    Stack trace:\n#0 /tmp/tmpu1v2s9l0.php(30): prod_signs(Array)\n#1 /tmp/tmpu1v2s9l0.php(35):\
    \ candidate(Array)\n#2 /tmp/tmpu1v2s9l0.php(44): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpu1v2s9l0.php on line 21\n"
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \    if (empty($arr)) return null;\n    $res = [];\n    foreach ($arr as $i) {\n\
    \        $res[] = abs($i) * sign($i);\n    }\n    return array_product($res);\n\
    }\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sign() in /tmp/tmpim3bjhjf.php:17\n\
    Stack trace:\n#0 /tmp/tmpim3bjhjf.php(22): prod_signs(Array)\n#1 /tmp/tmpim3bjhjf.php(26):\
    \ candidate(Array)\n#2 /tmp/tmpim3bjhjf.php(36): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpim3bjhjf.php on line 17\n"
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \    $prod = 1;\n    $sum = 0;\n    if (count($arr) == 0) {\n        return null;\n\
    \    }\n    foreach ($arr as $number) {\n        $prod *= sign($number);\n   \
    \     $sum += abs($number);\n    }\n    return $sum * $prod;\n}\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sign() in /tmp/tmpv_gmikbz.php:20\n\
    Stack trace:\n#0 /tmp/tmpv_gmikbz.php(26): prod_signs(Array)\n#1 /tmp/tmpv_gmikbz.php(30):\
    \ candidate(Array)\n#2 /tmp/tmpv_gmikbz.php(40): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpv_gmikbz.php on line 20\n"
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \    if (count($arr) == 0) return null;\n    $res = 0;\n    $prod = 1;\n    foreach\
    \ ($arr as $elem) {\n        if ($elem == 0) continue;\n        $prod *= ($elem\
    \ < 0 ? -1 : 1);\n        $res += abs($elem);\n    }\n    return $res * $prod;\n\
    }\n\nif (!debug_backtrace()) {\n    $data = array();\n    $lines = file('php://stdin');\n\
    \    foreach ($lines as $line) {\n        $data[] = (int) $line;\n    }\n    echo\
    \ prod_signs($data) . \"\\n\";\n}\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpet3pcdkb.php:39\n\
    Stack trace:\n#0 /tmp/tmpet3pcdkb.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpet3pcdkb.php\
    \ on line 39\n"
  timestamp: 1659979984
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  $sum = 0;\n  $product = 1;\n  if (empty($arr)) {\n    return null;\n  }\n \
    \ foreach ($arr as $key => $value) {\n    if ($value > 0) {\n      $product *=\
    \ 1;\n      $sum += $value;\n    } elseif ($value < 0) {\n      $product *= -1;\n\
    \      $sum += abs($value);\n    } else {\n      $product *= 0;\n    }\n  }\n\
    \  return $sum * $product;\n}\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  $sums = array_sum(array_map(function($el) {\n    return abs($el);\n  }, $arr));\n\
    \  $products = array_product(array_map(function($el) {\n    if ($el == 0) {\n\
    \      return 1;\n    } else {\n      return $el/abs($el);\n    }\n  }, $arr));\n\
    \  return empty($arr) ? null : $sums * $products;\n}\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaloe8umz.php:32\n\
    Stack trace:\n#0 /tmp/tmpaloe8umz.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpaloe8umz.php\
    \ on line 32\n"
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \    if (empty($arr)) {\n        return null;\n    }\n    $prod = 1;\n    $sum\
    \ = 0;\n    foreach ($arr as $val) {\n        $sign = $val / abs($val);\n    \
    \    $prod *= $sign;\n        $sum += abs($val);\n    }\n    return $sum * $prod;\n\
    }\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught DivisionByZeroError: Division by zero in /tmp/tmp3himm5ev.php:20\n\
    Stack trace:\n#0 /tmp/tmp3himm5ev.php(28): prod_signs(Array)\n#1 /tmp/tmp3himm5ev.php(33):\
    \ candidate(Array)\n#2 /tmp/tmp3himm5ev.php(42): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmp3himm5ev.php on line 20\n"
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \    $magnitudes = array_map(function($item) {\n      return abs($item);\n   \
    \ }, $arr);\n    $signs = array_map(function($item) {\n      return ($item > 0\
    \ ? 1 : ($item < 0 ? -1 : 0));\n    }, $arr);\n    return array_product($signs)\
    \ * array_sum($magnitudes);\n}\n\necho prod_signs(array(1, 2, 2, -4)) . \"\\n\"\
    ;\necho prod_signs(array(0, 1)) . \"\\n\";\necho prod_signs(array()) . \"\\n\"\
    ;\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "-9\n0\n0\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwcnk8849.php:35\n\
    Stack trace:\n#0 /tmp/tmpwcnk8849.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpwcnk8849.php\
    \ on line 35\n"
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  $sum = 0;\n  $sign = 1;\n  foreach ($arr as $num) {\n    if ($num != 0) {\n\
    \      $sum += abs($num);\n      $sign *= $num > 0 ? 1 : -1;\n    }\n  }\n  return\
    \ empty($arr) ? null : $sum * $sign;\n}\n$input = array(1, 2, 2, -4);\nprint_r(prod_signs($input));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "-9\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu9kq_cm3.php:33\n\
    Stack trace:\n#0 /tmp/tmpu9kq_cm3.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpu9kq_cm3.php\
    \ on line 33\n"
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \t$product = 1;\n\t$sum = 0;\n\tforeach ($arr as $element) {\n\t\tif ($element\
    \ > 0) {\n\t\t\t$product *= 1;\n\t\t\t$sum += $element;\n\t\t} elseif ($element\
    \ < 0) {\n\t\t\t$product *= -1;\n\t\t\t$sum += $element;\n\t\t} else {\n\t\t\t\
    $product *= 0;\n\t\t}\n\t}\n\treturn $sum * $product;\n}\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa8dmf83z.php:34\n\
    Stack trace:\n#0 /tmp/tmpa8dmf83z.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpa8dmf83z.php\
    \ on line 34\n"
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  if(empty($arr)){\n    return null;\n  }\n  $prod = 0;\n  $sum = 0;\n  foreach($arr\
    \ as $key => $value){\n    if($value > 0){\n      $prod += 1;\n    } elseif($value\
    \ < 0){\n      $prod -= 1;\n    } else {\n      $prod = 0;\n    }\n    $sum +=\
    \ abs($value);\n  }\n  return $sum * $prod;\n}\nfunction candidate(...$args) {\n\
    \    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplyiny1mq.php:36\n\
    Stack trace:\n#0 /tmp/tmplyiny1mq.php(46): test()\n#1 {main}\n  thrown in /tmp/tmplyiny1mq.php\
    \ on line 36\n"
  timestamp: 1659979984
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \    if(count($arr) == 0) return null;\n    $mags = array_map(function($x) { return\
    \ abs($x); }, $arr);\n    $signs = array_map(function($x) { return $x < 0 ? -1\
    \ : ($x > 0 ? 1 : 0); }, $arr);\n    $mag_sum = array_sum($mags);\n    $sign_prod\
    \ = array_product($signs);\n    return $mag_sum * $sign_prod;\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979984
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \tif (empty($arr)) {\n\t\treturn null;\n\t}\n\t$prod = 1;\n\t$sum = 0;\n\tforeach\
    \ ($arr as $item) {\n\t\t$sum += abs($item);\n\t\t$prod *= ($item != 0) ? $item\
    \ / abs($item) : 0;\n\t}\n\treturn $sum * $prod;\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979984
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \    $signs = [];\n    $magnitudes = [];\n    $result = null;\n    if (!empty($arr))\
    \ {\n        foreach ($arr as $value) {\n            if ($value > 0) {\n     \
    \           $signs[] = 1;\n            } elseif ($value < 0) {\n             \
    \   $signs[] = -1;\n            } else {\n                $signs[] = 0;\n    \
    \        }\n            $magnitudes[] = abs($value);\n        }\n        $product\
    \ = array_product($signs);\n        $sum = array_sum($magnitudes);\n        $result\
    \ = $product * $sum;\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \    $prod = 1;\n    $sum = 0;\n    foreach ($arr as $a) {\n        if ($a !=\
    \ 0) {\n            $prod *= $a / abs($a);\n            $sum += abs($a);\n   \
    \     }\n    }\n    return $prod ? $sum * $prod : null;\n}\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8mvv0qbi.php:30\n\
    Stack trace:\n#0 /tmp/tmp8mvv0qbi.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp8mvv0qbi.php\
    \ on line 30\n"
  timestamp: 1659979984
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \    if (empty($arr)) {\n        return null;\n    }\n    $mags = array_map('abs',\
    \ $arr);\n    $signs = array_map(function($x) {\n        if ($x == 0) {\n    \
    \        return 0;\n        } elseif ($x > 0) {\n            return 1;\n     \
    \   } else {\n            return -1;\n        }\n    }, $arr);\n    return array_sum($mags)\
    \ * array_product($signs);\n}\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979984
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  $product = 1;\n  $sum = 0;\n  if(empty($arr)){\n    return null;\n  }\n  foreach($arr\
    \ as $item){\n    if($item == 0){\n      $product *= 0;\n    }else if($item >\
    \ 0){\n      $product *= 1;\n      $sum += $item;\n    }else{\n      $product\
    \ *= -1;\n      $sum += abs($item);\n    }\n  }\n  return $sum * $product;\n}\n\
    \nprint_r(prod_signs(array(1, 2, 2, -4)) . \"\\n\");\nprint_r(prod_signs(array(0,\
    \ 1)) . \"\\n\");\nprint_r(prod_signs(array()) . \"\\n\");\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '-9

    0


    '
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \    if(empty($arr)) return null;\n    $product = 1;\n    $sum = 0;\n    foreach($arr\
    \ as $a) {\n        $sum += abs($a);\n        if($a != 0) {\n            $product\
    \ *= sign($a);\n        }\n    }\n    return $sum * $product;\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sign() in /tmp/tmp1g4cd3ld.php:20\n\
    Stack trace:\n#0 /tmp/tmp1g4cd3ld.php(27): prod_signs(Array)\n#1 /tmp/tmp1g4cd3ld.php(31):\
    \ candidate(Array)\n#2 /tmp/tmp1g4cd3ld.php(41): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmp1g4cd3ld.php on line 20\n"
  timestamp: 1659979984
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \    if (!count($arr)) {\n        return NULL;\n    }\n    $magnitudes = array_map(function($i)\
    \ {\n        return abs($i);\n    }, $arr);\n    $prod = array_reduce($arr, function($carry,\
    \ $i) {\n        if ($i < 0) {\n            return $carry * -1;\n        } else\
    \ if ($i > 0) {\n            return $carry * 1;\n        } else {\n          \
    \  return $carry * 0;\n        }\n    }, 1);\n    return array_sum($magnitudes)\
    \ * $prod;\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979984
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \    if(count($arr) == 0) {\n        return null;\n    }\n    $signs = array_map(function($num)\
    \ {\n        if($num > 0) {\n            return 1;\n        } else if($num < 0)\
    \ {\n            return -1;\n        } else {\n            return 0;\n       \
    \ }\n    }, $arr);\n    $prod = array_product($signs);\n    $mags = array_map(function($num)\
    \ {\n        return abs($num);\n    }, $arr);\n    $sum = array_sum($mags);\n\
    \    return $sum * $prod;\n}\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  $neg_cnt = 0;\n  $sum = 0;\n  foreach ($arr as $num) {\n    if ($num < 0) {\n\
    \      $neg_cnt++;\n    }\n    $sum += abs($num);\n  }\n  if ($sum === 0) {\n\
    \    return 0;\n  }\n  return $sum * pow(-1, $neg_cnt);\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_fnb7zvs.php:34\n\
    Stack trace:\n#0 /tmp/tmp_fnb7zvs.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp_fnb7zvs.php\
    \ on line 34\n"
  timestamp: 1659979984
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  if (empty($arr)) {\n    return null;\n  }\n  $signs = array_map(function($int)\
    \ {\n    if ($int > 0) {\n      return 1;\n    } else if ($int < 0) {\n      return\
    \ -1;\n    } else {\n      return 0;\n    }\n  }, $arr);\n  $signs_product = array_product($signs);\n\
    \  $absolute_magnitudes = array_map(function($int) {\n    return abs($int);\n\
    \  }, $arr);\n  $magnitudes_sum = array_sum($absolute_magnitudes);\n  return $magnitudes_sum\
    \ * $signs_product;\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979984
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \    if(!count($arr)) {\n        return null;\n    }\n    $prod = 1;\n    $sum\
    \ = 0;\n    foreach($arr as $value) {\n        if($value > 0) {\n            $prod\
    \ *= 1;\n        } elseif($value < 0) {\n            $prod *= -1;\n        } else\
    \ {\n            $prod *= 0;\n        }\n        $sum += abs($value);\n    }\n\
    \    return $sum * $prod;\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \t$magnitudes = [];\n\t$signs = [];\n\t$answer = null;\n\tforeach ($arr as $number)\
    \ {\n\t\tif ($number > 0) {\n\t\t\t$magnitudes[] = $number;\n\t\t\t$signs[] =\
    \ 1;\n\t\t} elseif ($number < 0) {\n\t\t\t$magnitudes[] = abs($number);\n\t\t\t\
    $signs[] = -1;\n\t\t} else {\n\t\t\t$magnitudes[] = $number;\n\t\t\t$signs[] =\
    \ 0;\n\t\t}\n\t}\n\t//Sum magnitudes\n\t$magnitudes = array_sum($magnitudes);\n\
    \t//Product signs\n\t$signs = array_product($signs);\n\t//Multiply them\n\t$answer\
    \ = $magnitudes * $signs;\n\treturn $answer;\n}\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq54h25v9.php:45\n\
    Stack trace:\n#0 /tmp/tmpq54h25v9.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpq54h25v9.php\
    \ on line 45\n"
  timestamp: 1659979984
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  if (empty($arr)) {\n    return null;\n  }\n\n  $signs = $magnitudes = array();\n\
    \  foreach ($arr as $number) {\n    $signs[] = $number == 0 ? 0 : $number / abs($number);\n\
    \    $magnitudes[] = abs($number);\n  }\n\n  return array_product($signs) * array_sum($magnitudes);\n\
    }\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \    $arr = array_values(array_filter($arr, function($el) {\n        return $el\
    \ != 0;\n    }));\n    $prod = array_reduce($arr, function($acc, $el) {\n    \
    \    return $acc * sign($el);\n    }, 1);\n    if ($prod === 0) {\n        return\
    \ 0;\n    }\n    $sum = array_reduce($arr, function($acc, $el) {\n        return\
    \ $acc + abs($el);\n    }, 0);\n    return $sum * $prod;\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sign() in /tmp/tmpwrn36c5k.php:18\n\
    Stack trace:\n#0 [internal function]: {closure}(1, 1)\n#1 /tmp/tmpwrn36c5k.php(19):\
    \ array_reduce(Array, Object(Closure), 1)\n#2 /tmp/tmpwrn36c5k.php(30): prod_signs(Array)\n\
    #3 /tmp/tmpwrn36c5k.php(34): candidate(Array)\n#4 /tmp/tmpwrn36c5k.php(44): test()\n\
    #5 {main}\n  thrown in /tmp/tmpwrn36c5k.php on line 18\n"
  timestamp: 1659979984
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \tif (empty($arr)) {\n\t\treturn null;\n\t}\n\t$magnitudes = array_map('abs',\
    \ $arr);\n\t$signs = array_map(function($val) {\n\t\tif ($val > 0) {\n\t\t\treturn\
    \ 1;\n\t\t} elseif ($val < 0) {\n\t\t\treturn -1;\n\t\t} else {\n\t\t\treturn\
    \ 0;\n\t\t}\n\t}, $arr);\n\treturn array_sum($magnitudes) * array_product($signs);\n\
    }\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \    $sum = 0;\n    $prod = 1;\n    foreach ($arr as $n) {\n        $sum += abs($n);\n\
    \        $prod *= $n >= 0 ? 1 : -1;\n    }\n    return empty($arr) ? null : $sum\
    \ * $prod;\n}\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaj5dh1n1.php:28\n\
    Stack trace:\n#0 /tmp/tmpaj5dh1n1.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpaj5dh1n1.php\
    \ on line 28\n"
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \tif (!is_array($arr)) {\n\t\tthrow new InvalidArgumentException(\"Argument must\
    \ be array\");\n\t}\n\tif (empty($arr)) {\n\t\treturn null;\n\t}\n\t$res = 0;\n\
    \t$prod = 1;\n\tforeach ($arr as $num) {\n\t\tif (!is_int($num)) {\n\t\t\tthrow\
    \ new InvalidArgumentException(\"Array must contain integers only\");\n\t\t}\n\
    \t\tif ($num === 0) {\n\t\t\tcontinue;\n\t\t}\n\t\t$res += abs($num);\n\t\t$prod\
    \ *= $num > 0 ? 1 : -1;\n\t}\n\treturn $res * $prod;\n}\n\necho prod_signs(array(1,\
    \ 2, 2, -4));\necho prod_signs(array(0, 1));\necho prod_signs(array());\necho\
    \ prod_signs(array(4, 1, -4, -1));\necho prod_signs(array(4, 1, -4, -1, 0));\n\
    echo prod_signs(array(4, 1, -4, -1, 0, 9));\necho prod_signs(array(4, 1, -4, -1,\
    \ 0, 9, 2));\necho prod_signs(array(4, 1, -4, -1, 0, 9, 2, 0));\necho prod_signs(array(4,\
    \ 1, -4, -1, 0, 9, 2, 0, 0));\necho prod_signs(array(0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0));\necho prod_signs(array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0));\necho prod_signs(array(1,\
    \ -2, 3, -4, 5, -6, 7, -8, 9, -10));\necho prod_signs(array(1, -2, 3, -4, 5, -6,\
    \ 7, -8, 9, -10, 0));\necho prod_signs(array(1, -2, 3, -4, 5, -6, 7, -\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpy7cc5pnj.php on line 49

    '
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \    $magnitudes = [];\n    $signs = [];\n    foreach ($arr as $item) {\n    \
    \    if ($item < 0) {\n            $signs[] = -1;\n            $magnitudes[] =\
    \ $item * -1;\n        } else if ($item > 0) {\n            $signs[] = 1;\n  \
    \          $magnitudes[] = $item;\n        } else {\n            $signs[] = 0;\n\
    \            $magnitudes[] = 0;\n        }\n    }\n    $product = array_product($signs);\n\
    \    $magnitude_sum = array_sum($magnitudes);\n    return ($product * $magnitude_sum);\n\
    }\n$arr = [];\nvar_dump(prod_signs($arr));\nfunction candidate(...$args) {\n \
    \   return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "int(0)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn5sa_r6z.php:42\n\
    Stack trace:\n#0 /tmp/tmpn5sa_r6z.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpn5sa_r6z.php\
    \ on line 42\n"
  timestamp: 1659979984
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \tif(empty($arr)){\n\t\treturn null;\n\t}\n\t//naive solution\n\t$prod = 1;\n\t\
    $sum = 0;\n\tforeach($arr as $value){\n\t\t$sign = $value > 0 ? 1 : ($value <\
    \ 0 ? -1 : 0);\n\t\t$sum += abs($value);\n\t\t$prod *= $sign;\n\t}\n\treturn $sum\
    \ * $prod;\n}\n\necho prod_signs(array(1, 2, 2, -4));\necho \"<br>\";\necho prod_signs(array(0,\
    \ 1));\necho \"<br>\";\necho prod_signs(array());\necho \"<br>\";\n\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: -9<br>0<br><br>
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \n}\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphu5b8k4v.php:21\n\
    Stack trace:\n#0 /tmp/tmphu5b8k4v.php(31): test()\n#1 {main}\n  thrown in /tmp/tmphu5b8k4v.php\
    \ on line 21\n"
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \    // Write your code here\n    // To print results to the standard output you\
    \ can use print\n    // Example:\n    // print 'Hello world!';\n    \n}\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphuwfylvm.php:25\n\
    Stack trace:\n#0 /tmp/tmphuwfylvm.php(35): test()\n#1 {main}\n  thrown in /tmp/tmphuwfylvm.php\
    \ on line 25\n"
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  if(empty($arr)) {\n    return null;\n  }\n  $product = 1;\n  $sum = 0;\n  foreach($arr\
    \ as $value) {\n    $sign = $value > 0 ? 1 : $value < 0 ? -1 : 0;\n    $product\
    \ *= $sign;\n    $sum += abs($value);\n  }\n  return $sum * $product;\n}\n\nprint(prod_signs(array(1,\
    \ 2, 2, -4)));\nprint(prod_signs(array(0, 1)));\nprint(prod_signs(array()));\n\
    function candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Unparenthesized `a ? b : c ? d : e` is not supported. Use either
    `(a ? b : c) ? d : e` or `a ? b : (c ? d : e)` in /tmp/tmp9r1ni7nx.php on line
    20

    '
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  if (count($arr) == 0) {\n    return null;\n  }\n  $sum = 0;\n  $product = 1;\n\
    \  for ($i = 0; $i < count($arr); $i++) {\n    $sum += abs($arr[$i]);\n    $product\
    \ *= $arr[$i] == 0 ? 1 : $arr[$i] / abs($arr[$i]);\n  }\n  return $sum * $product;\n\
    }\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf_58092j.php:32\n\
    Stack trace:\n#0 /tmp/tmpf_58092j.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpf_58092j.php\
    \ on line 32\n"
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    }\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk1k1_dj5.php:20\n\
    Stack trace:\n#0 /tmp/tmpk1k1_dj5.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpk1k1_dj5.php\
    \ on line 20\n"
  timestamp: 1659979984
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  if (empty($arr)) return null;\n  $sum = 0;\n  $prod = 1;\n  foreach ($arr as\
    \ $i) {\n    if ($i < 0) {\n      $prod *= -1;\n    } elseif ($i > 0) {\n    \
    \  $prod *= 1;\n    } else {\n      $prod *= 0;\n    }\n    $sum += abs($i);\n\
    \  }\n  return $sum * $prod;\n}\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979984
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  if (sizeof($arr) === 0) {\n    return null;\n  }\n  $magnitudes = array_map('abs',\
    \ $arr);\n  $signs = array_map(function($x) {\n    if ($x > 0) {\n      return\
    \ 1;\n    } else if ($x < 0) {\n      return -1;\n    } else {\n      return 0;\n\
    \    }\n  }, $arr);\n  $magnitude_sum = array_sum($magnitudes);\n  $sign_product\
    \ = array_product($signs);\n  return $magnitude_sum * $sign_product;\n}\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979984
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \tif(empty($arr)) {\n\t\treturn null;\n\t}\n\n\t$product = 1;\n\t$sum = 0;\n\t\
    foreach($arr as $a) {\n\t\t$product *= $a > 0 ? 1 : ($a < 0 ? -1 : 0);\n\t\t$sum\
    \ += abs($a);\n\t}\n\n\treturn $product * $sum;\n}\necho prod_signs(array(1, 2,\
    \ 2, -4)) . \"<br>\";\necho prod_signs(array(0, 1)) . \"<br>\";\necho prod_signs(array())\
    \ . \"<br>\";\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: -9<br>0<br><br>
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  $prod = 1;\n  $sum = 0;\n  $empty_arr = null;\n  if (!empty($arr)) {\n    foreach\
    \ ($arr as $key => $value) {\n      $prod *= (int) sign($value);\n      $sum +=\
    \ abs($value);\n    }\n    return $prod * $sum;\n  } else {\n    return $empty_arr;\n\
    \  }\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sign() in /tmp/tmphemc_xkp.php:19\n\
    Stack trace:\n#0 /tmp/tmphemc_xkp.php(29): prod_signs(Array)\n#1 /tmp/tmphemc_xkp.php(33):\
    \ candidate(Array)\n#2 /tmp/tmphemc_xkp.php(43): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmphemc_xkp.php on line 19\n"
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \    if (empty($arr)) {\n        return null;\n    }\n    $sign = 1;\n    $sum\
    \ = 0;\n    foreach ($arr as $num) {\n        $sum += abs($num);\n        $sign\
    \ *= $num == 0 ? 1 : $num / abs($num);\n    }\n    return $sum * $sign;\n}\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf0ub1c4_.php:31\n\
    Stack trace:\n#0 /tmp/tmpf0ub1c4_.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpf0ub1c4_.php\
    \ on line 31\n"
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  $signs = array_map(function($i) {\n    return $i < 0 ? -1 : $i > 0 ? 1 : 0;\n\
    \  }, $arr);\n  $product = array_product($signs);\n  $sum = array_sum(array_map(function($i)\
    \ {\n    return abs($i);\n  }, $arr));\n  return $product * $sum;\n}\n\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Unparenthesized `a ? b : c ? d : e` is not supported. Use either
    `(a ? b : c) ? d : e` or `a ? b : (c ? d : e)` in /tmp/tmpweavf8k9.php on line
    15

    '
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \t$arr = array_map(function($x) {\n\t\treturn abs($x);\n\t}, $arr);\n\t$product\
    \ = array_product($arr);\n\t$signs = array_map(function($x) {\n\t\treturn $x /\
    \ abs($x);\n\t}, $arr);\n\t$sum_signs = array_sum($signs);\n\treturn $product\
    \ * $sum_signs;\n}\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzq_h5q9j.php:29\n\
    Stack trace:\n#0 /tmp/tmpzq_h5q9j.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpzq_h5q9j.php\
    \ on line 29\n"
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \    if (empty($arr)) return NULL;\n    $count_pos = 0;\n    $count_neg = 0;\n\
    \    $sum = 0;\n    foreach ($arr as $num) {\n        if ($num > 0) {\n      \
    \      $count_pos++;\n        } elseif ($num < 0) {\n            $count_neg++;\n\
    \        }\n        $sum += abs($num);\n    }\n    if ($count_pos % 2 == 0 &&\
    \ $count_neg % 2 == 0) {\n        return $sum;\n    } elseif ($count_pos % 2 ==\
    \ 1 && $count_neg % 2 == 1) {\n        return -$sum;\n    } else {\n        return\
    \ 0;\n    }\n}\necho prod_signs(array(1, 2, 2, -4));\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "-9\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeb3zhtg8.php:42\n\
    Stack trace:\n#0 /tmp/tmpeb3zhtg8.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpeb3zhtg8.php\
    \ on line 42\n"
  timestamp: 1659979984
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  if (empty($arr)) return null;\n  $prod_signs = 1;\n  $sum_magnitudes = 0;\n\
    \  foreach ($arr as $a) {\n    $prod_signs *= $a == 0 ? 0 : ($a < 0 ? -1 : 1);\n\
    \    $sum_magnitudes += abs($a);\n  }\n  return $prod_signs * $sum_magnitudes;\n\
    }\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979984
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  $count_negative = 0;\n  $count_zero = 0;\n  $sum_magnitude = 0;\n  $arr_length\
    \ = count($arr);\n  if ($arr_length == 0) {\n    return null;\n  }\n  for ($i\
    \ = 0; $i < $arr_length; $i++) {\n    if ($arr[$i] == 0) {\n      $count_zero++;\n\
    \    } else if ($arr[$i] < 0) {\n      $count_negative++;\n    }\n    $sum_magnitude\
    \ += abs($arr[$i]);\n  }\n  if ($count_zero != 0) {\n    return 0;\n  }\n  if\
    \ ($count_negative % 2 == 0) {\n    return $sum_magnitude;\n  } else {\n    return\
    \ -1 * $sum_magnitude;\n  }\n}\nprint(prod_signs(array(1, 2, 2, -4)));\nprint(\"\
    \\n\");\nprint(prod_signs(array(0, 1)));\nprint(\"\\n\");\nprint(prod_signs(array()));\n\
    print(\"\\n\");\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '-9

    0


    '
  timestamp: 1659979984
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \    if (empty($arr)) return null;\n    $product = 1;\n    $sum = 0;\n    foreach\
    \ ($arr as $value) {\n        if ($value < 0) {\n            $product *= -1;\n\
    \        } elseif ($value > 0) {\n            $product *= 1;\n        } else {\n\
    \            $product *= 0;\n        }\n        $sum += abs($value);\n    }\n\
    \    return $sum * $product;\n}\necho \"\u0417\u0430\u0434\u0430\u043D\u0438\u0435\
    \ 4<br>\";\necho prod_signs(array(1, 2, 2, -4));\necho \"<br>\";\necho prod_signs(array(0,\
    \ 1));\necho \"<br>\";\necho prod_signs(array());\necho \"<br>\";\n\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "\u0417\u0430\u0434\u0430\u043D\u0438\u0435 4<br>-9<br>0<br><br>"
  timestamp: 1659979984
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \    if (empty($arr)) {\n        return null;\n    }\n    $sum = 0;\n    $prod\
    \ = 1;\n    foreach ($arr as $value) {\n        $sum += abs($value);\n       \
    \ if ($value > 0) {\n            $prod *= 1;\n        } elseif ($value < 0) {\n\
    \            $prod *= -1;\n        } else {\n            $prod *= 0;\n       \
    \ }\n    }\n    return $sum * $prod;\n}\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979984
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \    if (!$arr) return null;\n    $signs = array_map(function($n) {\n        return\
    \ $n < 0 ? -1 : ($n > 0 ? 1 : 0);\n    }, $arr);\n    $product = array_product($signs);\n\
    \    $abs = array_map('abs', $arr);\n    $sum = array_sum($abs);\n    return $product\
    \ * $sum;\n}\necho prod_signs(array(1, 2, 2, -4)) . PHP_EOL;\necho prod_signs(array(0,\
    \ 1)) . PHP_EOL;\necho prod_signs(array()) . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '-9

    0


    '
  timestamp: 1659979984
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \    if(!empty($arr)) {\n        $arr = array_map(function($a) {\n           \
    \ return array(abs($a),($a > 0) ? 1 : (($a < 0) ? -1 : 0));\n        }, $arr);\n\
    \        $res_sum = 0;\n        $res_prod = 1;\n        foreach($arr as $val)\
    \ {\n            $res_sum += $val[0];\n            $res_prod *= $val[1];\n   \
    \     }\n        return $res_sum * $res_prod;\n    }\n    return null;\n}\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979984
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  if (empty($arr)) return null;\n  $signs = array_map(function($a) {\n    if\
    \ ($a == 0) return 0;\n    return $a / abs($a);\n  }, $arr);\n  $sum = array_sum(array_map(function($a)\
    \ {\n    return abs($a);\n  }, $arr));\n  $product = array_product($signs);\n\
    \  return $sum * $product;\n}\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  $total = 0;\n  $negative = 0;\n  foreach ($arr as $number) {\n    if ($number\
    \ < 0) {\n      $negative += 1;\n    }\n    $total += abs($number);\n  }\n  if\
    \ ($negative % 2 == 0) {\n    return $total;\n  } else {\n    return $total *\
    \ -1;\n  }\n}\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj3g81b7i.php:34\n\
    Stack trace:\n#0 /tmp/tmpj3g81b7i.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpj3g81b7i.php\
    \ on line 34\n"
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \treturn array_reduce($arr, function($result, $item) {\n\t\treturn $result + $item\
    \ * ($item > 0 ? 1 : ($item == 0 ? 0 : -1));\n\t}, 0);\n}\necho prod_signs(array(1,\
    \ 2, 2, -4)) . \"\\n\";\necho prod_signs(array(0, 1)) . \"\\n\";\necho prod_signs(array())\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "9\n1\n0\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5v4pxi_8.php:26\n\
    Stack trace:\n#0 /tmp/tmp5v4pxi_8.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp5v4pxi_8.php\
    \ on line 26\n"
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \    if (empty($arr)) {\n        return null;\n    }\n\n    $magnitudes = array_map(function($num)\
    \ {\n        return abs($num);\n    }, $arr);\n\n    $products = array_reduce($arr,\
    \ function($acc, $num) {\n        if ($num === 0) {\n            return 0;\n \
    \       }\n\n        if ($acc === 0) {\n            return $num;\n        }\n\n\
    \        return $acc * $num;\n    }, 1);\n\n    return array_sum($magnitudes)\
    \ * $products;\n}\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuzdbzqt0.php:41\n\
    Stack trace:\n#0 /tmp/tmpuzdbzqt0.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpuzdbzqt0.php\
    \ on line 41\n"
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    }\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpseq96c4k.php:21\n\
    Stack trace:\n#0 /tmp/tmpseq96c4k.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpseq96c4k.php\
    \ on line 21\n"
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  $magnitude_total = 0;\n  $sign_product = 0;\n  if (count($arr) == 0) {\n  \
    \  return null;\n  }\n  foreach ($arr as $number) {\n    if ($number > 0) {\n\
    \      $magnitude_total += $number;\n      $sign_product++;\n    } elseif ($number\
    \ < 0) {\n      $magnitude_total += abs($number);\n      $sign_product--;\n  \
    \  }\n  }\n  return $magnitude_total * $sign_product;\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp63fc33l6.php:36\n\
    Stack trace:\n#0 /tmp/tmp63fc33l6.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp63fc33l6.php\
    \ on line 36\n"
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \t$sum = 0;\n\t$sign_prod = 1;\n\t$count = 0;\n\tif (empty($arr)) {\n\t\treturn\
    \ null;\n\t}\n\telse {\n\t\tforeach ($arr as $value) {\n\t\t\tif ($value == 0)\
    \ {\n\t\t\t\t$count++;\n\t\t\t}\n\t\t\telseif ($value > 0) {\n\t\t\t\t$sum +=\
    \ $value;\n\t\t\t\t$sign_prod *= 1;\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$sum += abs($value);\n\
    \t\t\t\t$sign_prod *= -1;\n\t\t\t}\n\t\t}\n\t\tif ($count == count($arr)) {\n\t\
    \t\treturn 0;\n\t\t}\n\t\telse {\n\t\t\treturn $sum * $sign_prod;\n\t\t}\n\t}\n\
    }\n\necho prod_signs(array(1, 2, 2, -4)) . \"\\n\";\necho prod_signs(array(0,\
    \ 1)) . \"\\n\";\necho prod_signs(array()) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "-9\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpodhkkto3.php:52\n\
    Stack trace:\n#0 /tmp/tmpodhkkto3.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpodhkkto3.php\
    \ on line 52\n"
  timestamp: 1659979984
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  $signs = array();\n  $magnitudes = array();\n  foreach ($arr as $num) {\n \
    \   if ($num > 0) {\n      $signs[] = 1;\n    } elseif ($num < 0) {\n      $signs[]\
    \ = -1;\n    } else {\n      $signs[] = 0;\n    }\n    $magnitudes[] = abs($num);\n\
    \  }\n  $prod = array_product($signs);\n  $sum = array_sum($magnitudes);\n  if\
    \ (empty($arr)) {\n    return NULL;\n  } else {\n    return $prod * $sum;\n  }\n\
    }\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  $sum = 0;\n  $product = 1;\n  foreach ($arr as $value) {\n    $sum += abs($value);\n\
    \    if ($value === 0) {\n      $product = 0;\n    } else {\n      $product *=\
    \ $value < 0 ? -1 : 1;\n    }\n  }\n  return $sum * $product;\n}\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpur75_vuq.php:34\n\
    Stack trace:\n#0 /tmp/tmpur75_vuq.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpur75_vuq.php\
    \ on line 34\n"
  timestamp: 1659979984
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \    if(empty($arr)){\n        return null;\n    }else{\n        $prod = 1;\n\
    \        $sum = 0;\n        foreach($arr as $a){\n            if($a < 0){\n  \
    \              $prod *= -1;\n            }elseif($a > 0){\n                $prod\
    \ *= 1;\n            }else{\n                $prod *= 0;\n            }\n    \
    \        $sum += abs($a);\n        }\n        return $sum * $prod;\n    }\n}\n\
    function candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \    if (count($arr) === 0) {\n        return null;\n    }\n    $signs = array_map(function($n)\
    \ {\n        return $n === 0 ? 0 : $n < 0 ? -1 : 1;\n    }, $arr);\n    $magnitudes\
    \ = array_map(function($n) {\n        return abs($n);\n    }, $arr);\n    $sign_prod\
    \ = array_product($signs);\n    $mag_sum = array_sum($magnitudes);\n    return\
    \ $sign_prod * $mag_sum;\n}\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Unparenthesized `a ? b : c ? d : e` is not supported. Use either
    `(a ? b : c) ? d : e` or `a ? b : (c ? d : e)` in /tmp/tmp3sx87lea.php on line
    18

    '
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \    $prod = 1;\n    $sum = 0;\n    foreach ($arr as $value) {\n        if ($value\
    \ > 0) {\n            $prod *= 1;\n            $sum += $value;\n        } elseif\
    \ ($value < 0) {\n            $prod *= -1;\n            $sum += $value * -1;\n\
    \        } else {\n            $prod *= 0;\n        }\n    }\n    return ($prod\
    \ * $sum);\n}\n\nprint_r(prod_signs(array(1, 2, 2, -4)));\necho \"<br>\";\nprint_r(prod_signs(array(0,\
    \ 1)));\necho \"<br>\";\nprint_r(prod_signs(array()));\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "-9<br>0<br>0\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpan094cis.php:43\n\
    Stack trace:\n#0 /tmp/tmpan094cis.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpan094cis.php\
    \ on line 43\n"
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \n}\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphu5b8k4v.php:21\n\
    Stack trace:\n#0 /tmp/tmphu5b8k4v.php(31): test()\n#1 {main}\n  thrown in /tmp/tmphu5b8k4v.php\
    \ on line 21\n"
  timestamp: 1659979984
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  if(count($arr) <= 0) {\n    return null;\n  }\n  $signProduct = 1;\n  $magSum\
    \ = 0;\n  foreach($arr as $item) {\n    $signProduct *= ($item > 0 ? 1 : ($item\
    \ < 0 ? -1 : 0));\n    $magSum += abs($item);\n  }\n  return $signProduct * $magSum;\n\
    }\n\necho prod_signs(array(1, 2, 2, -4)) . \"\\n\";\necho prod_signs(array(0,\
    \ 1)) . \"\\n\";\necho prod_signs(array()) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '-9

    0


    '
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \t$positive = 0;\n\t$negative = 0;\n\t$zero = 0;\n\tforeach ($arr as $num) {\n\
    \t\tif ($num > 0) {\n\t\t\t$positive++;\n\t\t} elseif ($num < 0) {\n\t\t\t$negative++;\n\
    \t\t} else {\n\t\t\t$zero++;\n\t\t}\n\t}\n\tif (count($arr) == 0) {\n\t\treturn\
    \ null;\n\t} elseif ($zero > 0) {\n\t\treturn 0;\n\t} elseif ($positive == 0 &&\
    \ $negative == 0) {\n\t\treturn 0;\n\t} elseif ($positive > 0 && $negative ==\
    \ 0) {\n\t\treturn 1;\n\t} elseif ($positive == 0 && $negative > 0) {\n\t\treturn\
    \ -1;\n\t} elseif ($positive > 0 && $negative > 0) {\n\t\treturn -1;\n\t}\n}\n\
    function candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmzdf1if_.php:45\n\
    Stack trace:\n#0 /tmp/tmpmzdf1if_.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpmzdf1if_.php\
    \ on line 45\n"
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \    if (empty($arr)) {\n        return null;\n    }\n    $sum = 0;\n    $prod\
    \ = 1;\n    foreach ($arr as $key => $value) {\n        $prod *= sign($value);\n\
    \        $sum += abs($value);\n    }\n    return $sum * $prod;\n}\n\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sign() in /tmp/tmpdosr_6g_.php:20\n\
    Stack trace:\n#0 /tmp/tmpdosr_6g_.php(27): prod_signs(Array)\n#1 /tmp/tmpdosr_6g_.php(31):\
    \ candidate(Array)\n#2 /tmp/tmpdosr_6g_.php(41): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpdosr_6g_.php on line 20\n"
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \    if (empty($arr)) return null;\n    $sum = $prod = 0;\n    foreach ($arr as\
    \ $v) {\n        if ($v) {\n            $prod *= $v / abs($v);\n            $sum\
    \ += abs($v);\n        }\n    }\n    return $sum * $prod;\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphe_ln2hh.php:30\n\
    Stack trace:\n#0 /tmp/tmphe_ln2hh.php(40): test()\n#1 {main}\n  thrown in /tmp/tmphe_ln2hh.php\
    \ on line 30\n"
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  $magnitudes = array_map('abs', $arr);\n  $signs = array_map(function($x) {\n\
    \    if ($x < 0) {\n      return -1;\n    } else if ($x > 0) {\n      return 1;\n\
    \    } else {\n      return 0;\n    }\n  }, $arr);\n  $magnitudes = array_product($magnitudes);\n\
    \  $signs = array_product($signs);\n  if (empty($arr)) {\n    return null;\n \
    \ } else {\n    return $magnitudes * $signs;\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcnqncfup.php:38\n\
    Stack trace:\n#0 /tmp/tmpcnqncfup.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpcnqncfup.php\
    \ on line 38\n"
  timestamp: 1659979984
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  if (empty($arr)) {\n    return null;\n  }\n  $prod = 1;\n  $sum = 0;\n  foreach\
    \ ($arr as $item) {\n    $sum += abs($item);\n    $prod *= $item < 0 ? -1 : ($item\
    \ > 0 ? 1 : 0);\n  }\n  return $sum * $prod;\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  // your code here\n}\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiv53_d2_.php:21\n\
    Stack trace:\n#0 /tmp/tmpiv53_d2_.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpiv53_d2_.php\
    \ on line 21\n"
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  $positive = 0;\n  $negative = 0;\n  $zero = 0;\n  foreach ($arr as $int) {\n\
    \    if ($int > 0) {\n      $positive++;\n    } elseif ($int < 0) {\n      $negative++;\n\
    \    } else {\n      $zero++;\n    }\n  }\n  if ($positive % 2 == 0) {\n    $sum\
    \ = $positive / 2;\n  } else {\n    $sum = ($positive - 1) / 2;\n  }\n  if ($negative\
    \ % 2 == 0) {\n    $sum += $negative / 2;\n  } else {\n    $sum += ($negative\
    \ - 1) / 2;\n  }\n  $sum += $zero;\n  return $sum;\n}\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfjybdku8.php:44\n\
    Stack trace:\n#0 /tmp/tmpfjybdku8.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpfjybdku8.php\
    \ on line 44\n"
  timestamp: 1659979984
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \    $sum_magnitudes = 0;\n    $prod_signs = 1;\n    foreach ($arr as $number)\
    \ {\n        $sum_magnitudes += abs($number);\n        if ($number > 0) {\n  \
    \          $prod_signs *= 1;\n        } elseif ($number < 0) {\n            $prod_signs\
    \ *= -1;\n        } else {\n            $prod_signs *= 0;\n        }\n    }\n\
    \    if ($sum_magnitudes == 0) {\n        return null;\n    } else {\n       \
    \ return $sum_magnitudes * $prod_signs;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979984
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \    $result = 1;\n    if (empty($arr)) {\n        return null;\n    }\n    foreach\
    \ ($arr as $value) {\n        if ($value > 0) {\n            $result *= 1;\n \
    \       } elseif ($value < 0) {\n            $result *= -1;\n        } else {\n\
    \            $result *= 0;\n        }\n    }\n    if ($result === 0) {\n     \
    \   return 0;\n    }\n    $sum = 0;\n    foreach ($arr as $value) {\n        $sum\
    \ += abs($value);\n    }\n    return $sum * $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  if (!is_array($arr)) {\n    return NULL;\n  }\n  $prod = 1;\n  $sum = 0;\n\
    \  foreach ($arr as $v) {\n    if ($v > 0) {\n      $prod *= 1;\n    } elseif\
    \ ($v < 0) {\n      $prod *= -1;\n    } else {\n      $prod *= 0;\n    }\n   \
    \ $sum += abs($v);\n  }\n  return $sum * $prod;\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv_mko3sb.php:40\n\
    Stack trace:\n#0 /tmp/tmpv_mko3sb.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpv_mko3sb.php\
    \ on line 40\n"
  timestamp: 1659979984
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  if (empty($arr)) {\n    return NULL;\n  }\n  $result = 1;\n  $sum = 0;\n  foreach\
    \ ($arr as $key => $value) {\n    if ($value > 0) {\n      $result *= 1;\n   \
    \ } elseif ($value < 0) {\n      $result *= -1;\n    } else {\n      $result *=\
    \ 0;\n    }\n    $sum += abs($value);\n  }\n  return $sum * $result;\n}\necho\
    \ prod_signs(array(1, 2, 2, -4)) . PHP_EOL;\necho prod_signs(array(0, 1)) . PHP_EOL;\n\
    echo prod_signs(array()) . PHP_EOL;\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '-9

    0


    '
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \    $count = count($arr);\n    if ($count == 0) return null;\n    $sum = 0;\n\
    \    $prod = 1;\n    for ($i = 0; $i < $count; $i++) {\n        $val = $arr[$i];\n\
    \        if ($val == 0) continue;\n        $sum += abs($val);\n        $prod *=\
    \ $val < 0 ? -1 : 1;\n    }\n    return $sum * $prod;\n}\necho prod_signs(array(1,\
    \ 2, 2, -4)) . \"\\n\";\necho prod_signs(array(0, 1)) . \"\\n\";\necho prod_signs(array())\
    \ . \"\\n\";\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "-9\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu7q3j731.php:36\n\
    Stack trace:\n#0 /tmp/tmpu7q3j731.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpu7q3j731.php\
    \ on line 36\n"
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \   $sign = $mag = 1;\n   if (empty($arr)) {\n      return NULL;\n   }\n   foreach\
    \ ($arr as $num) {\n      $sign *= $num >= 0 ? 1 : -1;\n      $mag += abs($num);\n\
    \   }\n   return $sign * $mag;\n}\nprint_r(prod_signs(array(1, 2, 2, -4)));\n\
    echo \"<br>\";\nprint_r(prod_signs(array(0, 1)));\necho \"<br>\";\nprint_r(prod_signs(array()));\n\
    echo \"<br>\";\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "-10<br>2<br><br>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4o8sppoc.php:35\n\
    Stack trace:\n#0 /tmp/tmp4o8sppoc.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp4o8sppoc.php\
    \ on line 35\n"
  timestamp: 1659979984
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  $product = 1;\n  $sum = 0;\n  if (count($arr) == 0) {\n    return null;\n \
    \ }\n  foreach ($arr as $num) {\n    if ($num > 0) {\n      $product *= 1;\n \
    \     $sum += $num;\n    } elseif ($num < 0) {\n      $product *= -1;\n      $sum\
    \ += $num * -1;\n    } else {\n      $product *= 0;\n    }\n  }\n  $result = $sum\
    \ * $product;\n  return $result;\n}\necho prod_signs(array(1, 2, 2, -4));\necho\
    \ prod_signs(array(0, 1));\necho prod_signs(array());\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '-90'
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \    $product = null;\n    if (!empty($arr)) {\n        $product = 1;\n      \
    \  $sum = 0;\n        foreach ($arr as $value) {\n            if ($value != 0)\
    \ {\n                $product *= ($value / abs($value));\n                $sum\
    \ += abs($value);\n            }\n        }\n        $product *= $sum;\n    }\n\
    \    return $product;\n}\necho prod_signs(array(1, 2, 2, -4));\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "-9\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjgkgawza.php:35\n\
    Stack trace:\n#0 /tmp/tmpjgkgawza.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpjgkgawza.php\
    \ on line 35\n"
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \    // Your code here\n    $output = 1;\n    $sum = 0;\n    foreach ($arr as\
    \ $num) {\n        if ($num === 0) {\n            continue;\n        } else if\
    \ ($num > 0) {\n            $output *= 1;\n            $sum += $num;\n       \
    \ } else {\n            $output *= -1;\n            $sum += ($num * -1);\n   \
    \     }\n    }\n    if ($output == 1 && $sum === 0) {\n        return null;\n\
    \    } else {\n        return $output * $sum;\n    }\n}\nprint prod_signs(array(1,\
    \ 2, 2, -4)) . \"\\n\";\nprint prod_signs(array(0, 1)) . \"\\n\";\nprint prod_signs(array())\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "-9\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqvx469rx.php:43\n\
    Stack trace:\n#0 /tmp/tmpqvx469rx.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpqvx469rx.php\
    \ on line 43\n"
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  $sum = 0;\n  $mul = 1;\n  foreach ($arr as $num) {\n    $sum += abs($num);\n\
    \    $mul *= max(0, $num);\n  }\n  return $sum * $mul;\n}\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzo4d3gwi.php:27\n\
    Stack trace:\n#0 /tmp/tmpzo4d3gwi.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpzo4d3gwi.php\
    \ on line 27\n"
  timestamp: 1659979984
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  $sum = 0;\n  $product = 1;\n  foreach ($arr as $value) {\n    $sum += abs($value);\n\
    \    if ($value > 0) {\n      $product *= 1;\n    } elseif ($value < 0) {\n  \
    \    $product *= -1;\n    } else {\n      $product *= 0;\n    }\n  }\n  if (count($arr)\
    \ > 0) {\n    return $sum * $product;\n  } else {\n    return null;\n  }\n}\n\
    echo prod_signs(array(1, 2, 2, -4));\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '-9'
  timestamp: 1659979984
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  $prod = 1;\n  $sum = 0;\n  $i = 0;\n  $len = count($arr);\n  if ($len == 0)\
    \ {\n    return null;\n  }\n  for ($i = 0; $i < $len; $i++) {\n    $prod *= $arr[$i]\
    \ > 0 ? 1 : ($arr[$i] < 0 ? -1 : 0);\n    $sum += abs($arr[$i]);\n  }\n  return\
    \ $prod * $sum;\n}\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \    if(count($arr) == 0) {\n        return null;\n    }\n    $sum = 1;\n    $count\
    \ = 0;\n    for($i = 0; $i < count($arr); $i++) {\n        if($arr[$i] != 0) {\n\
    \            $count++;\n            $sum *= abs($arr[$i]);\n        }\n    }\n\
    \    if($count == 0) {\n        return 0;\n    }\n    return $sum;\n}\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppxzuol_d.php:35\n\
    Stack trace:\n#0 /tmp/tmppxzuol_d.php(45): test()\n#1 {main}\n  thrown in /tmp/tmppxzuol_d.php\
    \ on line 35\n"
  timestamp: 1659979984
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \    $prod = 1;\n    $sum = 0;\n    if (count($arr) == 0) {\n        return null;\n\
    \    }\n    foreach ($arr as $a) {\n        if ($a > 0) {\n            $prod *=\
    \ 1;\n            $sum += $a;\n        } elseif ($a < 0) {\n            $prod\
    \ *= -1;\n            $sum += -$a;\n        } else {\n            $prod *= 0;\n\
    \        }\n    }\n    return $sum * $prod;\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \    if (empty($arr)) {\n        return null;\n    }\n    $sum = 0;\n    $prod\
    \ = 1;\n    for ($i = 0; $i < count($arr); $i++) {\n        $sum += abs($arr[$i]);\n\
    \        $prod *= ($arr[$i] != 0) ? $arr[$i] / abs($arr[$i]) : 1;\n    }\n   \
    \ return $sum * $prod;\n}\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpye4l266e.php:31\n\
    Stack trace:\n#0 /tmp/tmpye4l266e.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpye4l266e.php\
    \ on line 31\n"
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  if(empty($arr)) {\n    return null;\n  }\n  $signs = array_map(function($item)\
    \ {\n    return ($item < 0) ? -1 : ($item == 0) ? 0 : 1;\n  }, $arr);\n  $magnitudes\
    \ = array_map(function($item) {\n    return abs($item);\n  }, $arr);\n  $total_sign\
    \ = array_product($signs);\n  $total_magnitude = array_sum($magnitudes);\n  return\
    \ $total_sign * $total_magnitude;\n}\n\necho prod_signs(array(1, 2, 2, -4));\n\
    echo \"\\n\";\necho prod_signs(array(0, 1));\necho \"\\n\";\necho prod_signs(array());\n\
    echo \"\\n\";\n ?>\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Unparenthesized `a ? b : c ? d : e` is not supported. Use either
    `(a ? b : c) ? d : e` or `a ? b : (c ? d : e)` in /tmp/tmpbxzxem_i.php on line
    18

    '
  timestamp: 1659979984
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \t$prod_signs = 1;\n\tif(!empty($arr)) {\n\t\tforeach($arr as $num) {\n\t\t\t\
    if($num < 0) {\n\t\t\t\t$prod_signs *= -1;\n\t\t\t} elseif($num == 0) {\n\t\t\t\
    \t$prod_signs *= 0;\n\t\t\t}\n\t\t}\n\t\t$sum_magnitudes = array_sum(array_map('abs',\
    \ $arr));\n\t\treturn $sum_magnitudes * $prod_signs;\n\t} else {\n\t\treturn null;\n\
    \t}\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2,\
    \ 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1, 1, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979984
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \    if(sizeof($arr) == 0) {\n        return null;\n    }\n\n    $sum = 0;\n \
    \   $sign = 1;\n    foreach($arr as $num) {\n        if($num == 0) {\n       \
    \     return 0;\n        }\n        if($num < 0) {\n            $sign *= -1;\n\
    \        }\n        $sum += abs($num);\n    }\n    return $sum * $sign;\n}\n\n\
    echo prod_signs(array(1, 2, 2, -4)); // 9\necho prod_signs(array(0, 1)); // 0\n\
    echo prod_signs(array()); // null\n\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '-90'
  timestamp: 1659979984
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  if (empty($arr)) return null;\n  $signs = array_map(function($val) {\n    if\
    \ ($val > 0) return 1;\n    if ($val < 0) return -1;\n    return 0;\n  }, $arr);\n\
    \  $prod = array_product($signs);\n  $sum = array_sum(array_map(function($val)\
    \ {\n    return abs($val);\n  }, $arr));\n  return $sum * $prod;\n}\n\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  if (empty($arr)) {\n    return NULL;\n  }\n  $product = 1;\n  $sum = 0;\n \
    \ for ($i = 0; $i < count($arr); $i++) {\n    $product *= sign($arr[$i]);\n  \
    \  $sum += abs($arr[$i]);\n  }\n  return $product * $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sign() in /tmp/tmpzb79paym.php:20\n\
    Stack trace:\n#0 /tmp/tmpzb79paym.php(27): prod_signs(Array)\n#1 /tmp/tmpzb79paym.php(31):\
    \ candidate(Array)\n#2 /tmp/tmpzb79paym.php(41): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpzb79paym.php on line 20\n"
  timestamp: 1659979984
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \    if (!$arr) {\n        return null;\n    }\n    $signs = array_map(function($num)\
    \ {\n        if ($num > 0) {\n            return 1;\n        } elseif ($num <\
    \ 0) {\n            return -1;\n        } else {\n            return 0;\n    \
    \    }\n    }, $arr);\n    $prod = array_product($signs);\n    $magnitudes = array_map(function($num)\
    \ {\n        return abs($num);\n    }, $arr);\n    $sum = array_sum($magnitudes);\n\
    \    return $sum * $prod;\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979984
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  // Good luck!\n  if (sizeof($arr) === 0) {\n    return null;\n  }\n  $total\
    \ = 1;\n  $sum = 0;\n  foreach ($arr as $num) {\n    if ($num > 0) {\n      $total\
    \ *= 1;\n    } elseif ($num < 0) {\n      $total *= -1;\n    } else {\n      $total\
    \ *= 0;\n    }\n    $sum += abs($num);\n  }\n  return $total * $sum;\n}\n\nprint(prod_signs([1,\
    \ 2, 2, -4]));\nprint(prod_signs([0, 1]));\nprint(prod_signs([]));\n\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '-90'
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  if (empty($arr)) {\n    return NULL;\n  }\n  $sign = 1;\n  $signs = [];\n \
    \ foreach ($arr as $n) {\n    $signs[] = $n < 0 ? -1 : $n == 0 ? 0 : 1;\n    $sign\
    \ *= $signs[count($signs) - 1];\n  }\n  $total = 0;\n  foreach ($arr as $n) {\n\
    \    $total += abs($n);\n  }\n  return $total * $sign;\n}\necho prod_signs([1,\
    \ 2, 2, -4]);\necho \"\\n\";\necho prod_signs([0, 1]);\necho \"\\n\";\necho prod_signs([]);\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Unparenthesized `a ? b : c ? d : e` is not supported. Use either
    `(a ? b : c) ? d : e` or `a ? b : (c ? d : e)` in /tmp/tmpbvi2ukv0.php on line
    20

    '
  timestamp: 1659979984
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \    $result = 1;\n    $total = 0;\n    if (empty($arr)) {\n        return null;\n\
    \    }\n    foreach ($arr as $value) {\n        if ($value > 0) {\n          \
    \  $result *= 1;\n        } elseif ($value < 0) {\n            $result *= -1;\n\
    \        } else {\n            $result *= 0;\n        }\n        $total += abs($value);\n\
    \    }\n    return $result * $total;\n}\n\nfunction candidate(...$args) {\n  \
    \  return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979984
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \    if (empty($arr)) {\n        return NULL;\n    }\n    $sign_prod = 1;\n  \
    \  $abs_sum = 0;\n    foreach ($arr as $item) {\n        $abs_sum += abs($item);\n\
    \        if ($item == 0) {\n            $sign_prod = 0;\n        } else {\n  \
    \          $sign_prod *= ($item / abs($item));\n        }\n    }\n    return $abs_sum\
    \ * $sign_prod;\n}\n\necho prod_signs(array(1, 2, 2, -4)) . \"\\n\"; // 9\necho\
    \ prod_signs(array(0, 1)) . \"\\n\"; // 0\necho prod_signs(array()) . \"\\n\"\
    ; // null\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '-9

    0


    '
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \    $len = count($arr);\n    if ($len === 0) {\n        return null;\n    }\n\
    \    $product = 1;\n    $sum = 0;\n    for ($i = 0; $i < $len; $i++) {\n     \
    \   $product *= $arr[$i] >= 0 ? 1 : -1;\n        $sum += abs($arr[$i]);\n    }\n\
    \    return $sum * $product;\n}\necho prod_signs(array(1, 2, 2, -4)) . \"\\n\"\
    ;\necho prod_signs(array(0, 1)) . \"\\n\";\necho prod_signs(array()) . \"\\n\"\
    ;\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "-9\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpivpbpd37.php:35\n\
    Stack trace:\n#0 /tmp/tmpivpbpd37.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpivpbpd37.php\
    \ on line 35\n"
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \    $productOfSigns = null;\n    $sumOfMagnitudes = null;\n    if(count($arr)\
    \ > 0) {\n        $productOfSigns = 1;\n        $sumOfMagnitudes = 0;\n      \
    \  foreach($arr as $val) {\n            $sign = $val <=> 0;\n            $productOfSigns\
    \ *= $sign;\n            $sumOfMagnitudes += abs($val);\n        }\n    }\n  \
    \  return $productOfSigns * $sumOfMagnitudes;\n}\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpre4yjo0p.php:35\n\
    Stack trace:\n#0 /tmp/tmpre4yjo0p.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpre4yjo0p.php\
    \ on line 35\n"
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  $sum = 0;\n  $prod = 1;\n  $sign = '';\n  $empty = 0;\n  foreach ($arr as $value)\
    \ {\n    if ($value < 0) {\n      $sign = '-';\n      $prod *= -1;\n    } elseif\
    \ ($value == 0) {\n      $sign = '0';\n      $prod = 0;\n    } else {\n      $sign\
    \ = '+';\n    }\n    $sum += abs($value);\n  }\n  if ($sign == '') {\n    return\
    \ null;\n  } else {\n    return $sum * $prod;\n  }\n}\necho prod_signs(array(1,\
    \ 2, 2, -4));\necho \"\\n\";\necho prod_signs(array(0, 1));\necho \"\\n\";\necho\
    \ prod_signs(array());\necho \"\\n\";\necho prod_signs(array(5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,\n\
    function candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp1xydt_px.php on line 43

    '
  timestamp: 1659979984
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \tif (sizeof($arr) == 0) return null;\n\t$sign = 1;\n\t$sum = 0;\n\tforeach ($arr\
    \ as $i) {\n\t\tif ($i > 0) {\n\t\t\t$sign *= 1;\n\t\t\t$sum += $i;\n\t\t} elseif\
    \ ($i < 0) {\n\t\t\t$sign *= -1;\n\t\t\t$sum += abs($i);\n\t\t} else {\n\t\t\t\
    $sign *= 0;\n\t\t}\n\t}\n\treturn $sum * $sign;\n}\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  // Create a variable to store the product of signs\n  $product_of_signs = 1;\n\
    \  // Create a variable to store the sum of magnitudes\n  $sum_of_magnitudes =\
    \ 0;\n  // Iterate through the array to find the product of signs\n  foreach ($arr\
    \ as $number) {\n    if ($number < 0) {\n      $product_of_signs *= -1;\n    }\
    \ elseif ($number > 0) {\n      $product_of_signs *= 1;\n    } else {\n      $product_of_signs\
    \ *= 0;\n    }\n  }\n  // Iterate through the array to find the sum of magnitudes\n\
    \  foreach ($arr as $number) {\n    $sum_of_magnitudes += abs($number);\n  }\n\
    \  // Return the product of the product of signs and the sum of magnitudes\n \
    \ return $product_of_signs * $sum_of_magnitudes;\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppvwhdo0k.php:44\n\
    Stack trace:\n#0 /tmp/tmppvwhdo0k.php(51): test()\n#1 {main}\n  thrown in /tmp/tmppvwhdo0k.php\
    \ on line 44\n"
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  $magnitudes = array_map('abs', $arr);\n  $signs = array_map(function($x) {\
    \ return $x == 0 ? 0 : ($x > 0 ? 1 : -1); }, $arr);\n  $magnitude_product = array_product($magnitudes);\n\
    \  $sign_product = array_product($signs);\n  return $magnitude_product * $sign_product;\n\
    }\nprint prod_signs(array(1, 2, 2, -4));\nprint prod_signs(array(0, 1));\nprint\
    \ prod_signs(array());\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "-1601\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaeouimh4.php:28\n\
    Stack trace:\n#0 /tmp/tmpaeouimh4.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpaeouimh4.php\
    \ on line 28\n"
  timestamp: 1659979984
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  if(!empty($arr)) {\n    $signs = array_map(function($num) {\n      if($num\
    \ === 0) return 0;\n      else if($num > 0) return 1;\n      else return -1;\n\
    \    }, $arr);\n    $magnitudes = array_map(function($num) {\n      return abs($num);\n\
    \    }, $arr);\n    $signs_product = array_product($signs);\n    $magnitudes_sum\
    \ = array_sum($magnitudes);\n    return $signs_product * $magnitudes_sum;\n  }\n\
    \  return null;\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979984
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \    $result = null;\n    if (count($arr) > 0) {\n        $prod = 1;\n       \
    \ $sum = 0;\n        foreach ($arr as $v) {\n            if ($v > 0) {\n     \
    \           $prod *= 1;\n            } elseif ($v < 0) {\n                $prod\
    \ *= -1;\n            } else {\n                $prod *= 0;\n            }\n \
    \           $sum += abs($v);\n        }\n        $result = $sum * $prod;\n   \
    \ }\n    return $result;\n}\n$arr = array(1, 2, 2, -4);\nvar_dump(prod_signs($arr));\n\
    $arr = array(0, 1);\nvar_dump(prod_signs($arr));\n$arr = array();\nvar_dump(prod_signs($arr));\n\
    function candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'int(-9)

    int(0)

    NULL

    '
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  $sum = 0;\n  $prod = 1;\n  $empty = true;\n  foreach ($arr as $item) {\n  \
    \  if ($item == 0) {\n      $prod = 0;\n      $sum = 0;\n      break;\n    }\n\
    \    $empty = false;\n    $prod *= $item > 0 ? 1 : -1;\n    $sum += abs($item);\n\
    \  }\n  return $empty ? null : $sum * $prod;\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5zodgc9g.php:36\n\
    Stack trace:\n#0 /tmp/tmp5zodgc9g.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp5zodgc9g.php\
    \ on line 36\n"
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  if (!$arr) {\n    return null;\n  }\n  $sign = 1;\n  $magnitude = 0;\n  for\
    \ ($i = 0; $i < count($arr); $i++) {\n    $item = $arr[$i];\n    if ($item) {\n\
    \      $sign *= $item < 0 ? -1 : 1;\n      $magnitude += abs($item);\n    }\n\
    \  }\n  return $magnitude * $sign;\n}\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnluxsfr5.php:34\n\
    Stack trace:\n#0 /tmp/tmpnluxsfr5.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpnluxsfr5.php\
    \ on line 34\n"
  timestamp: 1659979984
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  $product = 1;\n  $summ = 0;\n  foreach ($arr as $value) {\n    if ($value <\
    \ 0) {\n      $product *= -1;\n    } elseif ($value > 0) {\n      $product *=\
    \ 1;\n    } else {\n      $product *= 0;\n    }\n    $summ += abs($value);\n \
    \ }\n  if (count($arr) == 0) {\n    return null;\n  } else {\n    return $summ\
    \ * $product;\n  }\n}\n\necho prod_signs(array(1, 2, 2, -4));\necho prod_signs(array(0,\
    \ 1));\necho prod_signs(array());\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '-90'
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  // Write your code here\n  // To print results to the standard output you can\
    \ use print\n  // Example:\n  // print \"Hello world!\";\n}\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkgs68_tl.php:24\n\
    Stack trace:\n#0 /tmp/tmpkgs68_tl.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpkgs68_tl.php\
    \ on line 24\n"
  timestamp: 1659979984
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \    if (empty($arr)) return null;\n    $signs = array_map(function($num) {\n\
    \        if ($num > 0) return 1;\n        if ($num < 0) return -1;\n        return\
    \ 0;\n    }, $arr);\n    return array_sum(array_map('abs', $arr)) * array_product($signs);\n\
    }\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  if (empty($arr)) {\n    return null;\n  }\n  $prod = 1;\n  $sum = 0;\n  foreach\
    \ ($arr as $value) {\n    $prod *= $value >= 0 ? 1 : -1;\n    $sum += abs($value);\n\
    \  }\n  return $prod * $sum;\n}\n\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbecog3vu.php:32\n\
    Stack trace:\n#0 /tmp/tmpbecog3vu.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpbecog3vu.php\
    \ on line 32\n"
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \    // Write your code here\n    // To print results to the standard output you\
    \ can use print\n    // Example:\n    // print \"Hello world!\";\n}\n\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpux6125a0.php:25\n\
    Stack trace:\n#0 /tmp/tmpux6125a0.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpux6125a0.php\
    \ on line 25\n"
  timestamp: 1659979984
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  if (!$arr) {\n    return null;\n  }\n  $prod = 1;\n  $sum = 0;\n  foreach ($arr\
    \ as $i) {\n    $prod *= $i ? ($i / abs($i)) : 0;\n    $sum += abs($i);\n  }\n\
    \  return $prod * $sum;\n}\n\necho \"The result is \" . prod_signs(array(1, 2,\
    \ 2, -4)) . \"\\n\";\necho \"The result is \" . prod_signs(array(0, 1)) . \"\\\
    n\";\necho \"The result is \" . prod_signs(array()) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "The result is -9\nThe result is 0\nThe result is \n"
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \t//\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw4lxzxsi.php:22\n\
    Stack trace:\n#0 /tmp/tmpw4lxzxsi.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpw4lxzxsi.php\
    \ on line 22\n"
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  // Use a different value to represent 0 in the array\n  $arr = array_map(function($i)\
    \ { return $i === 0 ? 1 : $i; }, $arr);\n  // Calculate the product of all signs\n\
    \  $sign_prod = array_product($arr);\n  // Calculate sum of magnitudes\n  $mag_sum\
    \ = array_sum(array_map(function($i) { return abs($i); }, $arr));\n  // Calculate\
    \ the product of the sum of magnitudes and the product of all signs\n  return\
    \ $mag_sum * $sign_prod;\n}\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpto184tr4.php:28\n\
    Stack trace:\n#0 /tmp/tmpto184tr4.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpto184tr4.php\
    \ on line 28\n"
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  if (count($arr)==0) return null;\n  $res=0;\n  $sign = 1;\n  foreach ($arr\
    \ as $value) {\n    if ($value==0) continue;\n    $sign = ($value>0) ? $sign :\
    \ -$sign;\n    $res += abs($value);\n  }\n  return $res*$sign;\n}\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuu1lelyy.php:30\n\
    Stack trace:\n#0 /tmp/tmpuu1lelyy.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpuu1lelyy.php\
    \ on line 30\n"
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  $magnitudes = [];\n  $signs = [];\n  foreach ($arr as $num) {\n    if ($num\
    \ == 0) {\n      continue;\n    }\n    $magnitudes[] = abs($num);\n    $signs[]\
    \ = $num > 0 ? 1 : -1;\n  }\n  if (count($magnitudes) == 0) {\n    return null;\n\
    \  }\n  $sign_prod = array_product($signs);\n  $magnitude_sum = array_sum($magnitudes);\n\
    \  return $sign_prod * $magnitude_sum;\n}\n\nfunction candidate(...$args) {\n\
    \    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr7k59w5m.php:37\n\
    Stack trace:\n#0 /tmp/tmpr7k59w5m.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpr7k59w5m.php\
    \ on line 37\n"
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \    $negative = 0;\n    $zero = 0;\n    $positive = 0;\n    $total = 0;\n   \
    \ foreach ($arr as $value) {\n        if ($value < 0) {\n            $negative++;\n\
    \        } elseif ($value > 0) {\n            $positive++;\n        } else {\n\
    \            $zero++;\n        }\n        $total += abs($value);\n    }\n    $signs\
    \ = 1;\n    if ($negative % 2 != 0) {\n        $signs *= -1;\n    }\n    if ($zero\
    \ > 0) {\n        $signs = 0;\n    }\n    return $total * $signs;\n}\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpayj20mdw.php:45\n\
    Stack trace:\n#0 /tmp/tmpayj20mdw.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpayj20mdw.php\
    \ on line 45\n"
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \t$sum = 0;\n\t$signs = 1;\n\tforeach ($arr as $n) {\n\t\tif ($n == 0) {\n\t\t\
    \t$signs = 0;\n\t\t} else {\n\t\t\t$sum += abs($n);\n\t\t\t$signs *= $n / abs($n);\n\
    \t\t}\n\t}\n\treturn ($signs == 0 || $sum == 0) ? 0 : $sum * $signs;\n}\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkn27_jvg.php:34\n\
    Stack trace:\n#0 /tmp/tmpkn27_jvg.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpkn27_jvg.php\
    \ on line 34\n"
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  if (empty($arr)) {\n    return null;\n  }\n\n  //loop through array, find sign\
    \ and product of sign\n  $signs = array();\n  $prod = 0;\n  foreach ($arr as $key\
    \ => $value) {\n    //check sign\n    if ($value > 0) {\n      $signs[$key] =\
    \ 1;\n    } elseif ($value < 0) {\n      $signs[$key] = -1;\n    } else {\n  \
    \    $signs[$key] = 0;\n    }\n    //calculate product of signs\n    $prod *=\
    \ $signs[$key];\n  }\n\n  //find sum of the magnitudes\n  $sum = 0;\n  foreach\
    \ ($arr as $value) {\n    $sum += abs($value);\n  }\n\n  //return product multiplied\
    \ by sum\n  return $prod * $sum;\n}\n\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeq623gle.php:49\n\
    Stack trace:\n#0 /tmp/tmpeq623gle.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpeq623gle.php\
    \ on line 49\n"
  timestamp: 1659979984
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  $product = 1;\n  $sum = 0;\n  foreach ($arr as $key => $value) {\n    $product\
    \ *= $value ? ($value < 0 ? -1 : 1) : 0;\n    $sum += abs($value);\n  }\n  return\
    \ $sum ? $sum * $product : null;\n}\n\necho prod_signs(array(1, 2, 2, -4)).PHP_EOL;\n\
    echo prod_signs(array(0, 1)).PHP_EOL;\necho prod_signs(array()).PHP_EOL;\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '-9

    0


    '
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \    if(empty($arr)) return null;\n    $product = 1;\n    $sum = 0;\n    foreach($arr\
    \ as $key => $value) {\n        $product *= get_sign($value);\n        $sum +=\
    \ abs($value);\n    }\n    return $product * $sum;\n}\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_sign() in\
    \ /tmp/tmpiy55ix27.php:18\nStack trace:\n#0 /tmp/tmpiy55ix27.php(24): prod_signs(Array)\n\
    #1 /tmp/tmpiy55ix27.php(28): candidate(Array)\n#2 /tmp/tmpiy55ix27.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpiy55ix27.php on line 18\n"
  timestamp: 1659979984
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \tif (!$arr) {\n\t\treturn null;\n\t}\n\t$prod = 1;\n\t$sum = 0;\n\tforeach ($arr\
    \ as $x) {\n\t\tif ($x > 0) {\n\t\t\t$prod *= 1;\n\t\t} elseif ($x < 0) {\n\t\t\
    \t$prod *= -1;\n\t\t} else {\n\t\t\t$prod *= 0;\n\t\t}\n\t\t$sum += abs($x);\n\
    \t}\n\treturn $sum * $prod;\n}\necho prod_signs(array(1, 2, 2, -4)) . PHP_EOL;\n\
    echo prod_signs(array(0, 1)) . PHP_EOL;\necho prod_signs(array()) . PHP_EOL;\n\
    function candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '-9

    0


    '
  timestamp: 1659979984
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  if(empty($arr)) return null;\n  $res = 1;\n  $sum = 0;\n  foreach($arr as $item)\
    \ {\n    $sign = $item == 0 ? 0 : $item / abs($item);\n    $res *= $sign;\n  \
    \  $sum += abs($item);\n  }\n  return $res * $sum;\n}\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979984
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \    if (empty($arr)) {\n        return null;\n    }\n    $sum = 0;\n    $product\
    \ = 1;\n    for ($i = 0; $i < count($arr); $i++) {\n        $sign = $arr[$i] ==\
    \ 0 ? 0 : $arr[$i] / abs($arr[$i]);\n        $sum += abs($arr[$i]);\n        $product\
    \ *= $sign;\n    }\n    return $sum * $product;\n}\necho prod_signs(array(1, 2,\
    \ 2, -4));\necho '<br>';\necho prod_signs(array(0, 1));\necho '<br>';\necho prod_signs(array());\n\
    echo '<br>';\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: -9<br>0<br><br>
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \    // Your code here\n}\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7d3mz8c8.php:21\n\
    Stack trace:\n#0 /tmp/tmp7d3mz8c8.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp7d3mz8c8.php\
    \ on line 21\n"
  timestamp: 1659979984
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \    if (empty($arr)) {\n        return null;\n    }\n    $sign = 1;\n    $magnitude\
    \ = 0;\n    foreach ($arr as $num) {\n        if ($num > 0) {\n            $sign\
    \ *= 1;\n        } elseif ($num < 0) {\n            $sign *= -1;\n        } else\
    \ {\n            $sign *= 0;\n        }\n        $magnitude += abs($num);\n  \
    \  }\n    return $magnitude * $sign;\n}\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979984
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \    if (empty($arr)) {\n        return null;\n    }\n    $prod = 1;\n    $sum\
    \ = 0;\n    foreach ($arr as $a) {\n        $prod *= ($a > 0) ? 1 : (($a < 0)\
    \ ? -1 : 0);\n        $sum += abs($a);\n    }\n    return $prod * $sum;\n}\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979984
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \    if (empty($arr)) {\n        return null;\n    }\n    $magnitude = 0;\n  \
    \  $sign = 1;\n    foreach ($arr as $elem) {\n        $magnitude += abs($elem);\n\
    \        if ($elem > 0) {\n            $sign *= 1;\n        } elseif ($elem <\
    \ 0) {\n            $sign *= -1;\n        } else {\n            $sign *= 0;\n\
    \        }\n    }\n    return $magnitude * $sign;\n}\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  $result = null;\n  $prod = 1;\n  $magnitude_sum = 0;\n  foreach ($arr as $number)\
    \ {\n    if ($number > 0) {\n      $prod *= 1;\n      $magnitude_sum += $number;\n\
    \    } elseif ($number < 0) {\n      $prod *= -1;\n      $magnitude_sum += abs($number);\n\
    \    } else {\n      $prod *= 0;\n    }\n  }\n  $result = $magnitude_sum * $prod;\n\
    \  return $result;\n}\n\necho prod_signs(array(1, 2, 2, -4));\necho \"\\n\";\n\
    echo prod_signs(array(0, 1));\necho \"\\n\";\necho prod_signs(array());\necho\
    \ \"\\n\";\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "-9\n0\n0\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5ns5j1hf.php:46\n\
    Stack trace:\n#0 /tmp/tmp5ns5j1hf.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp5ns5j1hf.php\
    \ on line 46\n"
  timestamp: 1659979985
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  $arr = array_filter($arr, 'is_numeric');\n  if (count($arr) < 1) {\n    return\
    \ NULL;\n  }\n  $signs = array_filter(array_map(function($e) {\n    return $e\
    \ >= 0 ? 1 : -1;\n  }, $arr));\n  $magnitudes = array_map(function($e) {\n   \
    \ return abs($e);\n  }, $arr);\n  return array_product($signs) * array_sum($magnitudes);\n\
    }\nprint_r(prod_signs(array(1, 2, 2, -4)));\nprint_r(prod_signs(array(0, 1)));\n\
    print_r(prod_signs(array()));\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "-91\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzcjeswlr.php:35\n\
    Stack trace:\n#0 /tmp/tmpzcjeswlr.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpzcjeswlr.php\
    \ on line 35\n"
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  $res = 1;\n  $sum = 0;\n  foreach ($arr as $num) {\n    $sum += abs($num);\n\
    \    if ($num == 0) {\n      $res = 0;\n    } elseif ($num > 0) {\n      $res\
    \ *= 1;\n    } else {\n      $res *= -1;\n    }\n  }\n  return $res ? $sum * $res\
    \ : null;\n}\n\necho prod_signs(array(1, 2, 2, -4));\necho prod_signs(array(0,\
    \ 1));\necho prod_signs(array());\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "-90\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkl4txptt.php:38\n\
    Stack trace:\n#0 /tmp/tmpkl4txptt.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpkl4txptt.php\
    \ on line 38\n"
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \    // Your code here...\n    if(empty($arr)) {\n      return null;\n    }\n\
    \    $result = 0;\n    foreach($arr as $element) {\n      if($element > 0) {\n\
    \        $result = $result + $element;\n      }\n      elseif($element < 0) {\n\
    \        $result = $result - $element;\n      }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmfonbe1_.php:35\n\
    Stack trace:\n#0 /tmp/tmpmfonbe1_.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpmfonbe1_.php\
    \ on line 35\n"
  timestamp: 1659979984
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \    if (empty($arr)) {\n        return null;\n    }\n    $prod = 1;\n    $sum\
    \ = 0;\n    foreach ($arr as $item) {\n        if ($item > 0) {\n            $prod\
    \ *= 1;\n        } elseif ($item < 0) {\n            $prod *= -1;\n        } else\
    \ {\n            $prod *= 0;\n        }\n        $sum += abs($item);\n    }\n\
    \    return $sum * $prod;\n}\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \    if (empty($arr)) return null;\n    $prod = 1;\n    $sum = 0;\n    foreach\
    \ ($arr as $num) {\n        if ($num == 0) continue;\n        $prod *= $num/abs($num);\n\
    \        $sum += abs($num);\n    }\n    return $prod * $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnkefwk4_.php:31\n\
    Stack trace:\n#0 /tmp/tmpnkefwk4_.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpnkefwk4_.php\
    \ on line 31\n"
  timestamp: 1659979984
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \    $sum = 0;\n    $prod = 1;\n    foreach ($arr as $number) {\n        if ($number\
    \ > 0) {\n            $sum += $number;\n            $prod *= 1;\n        } elseif\
    \ ($number < 0) {\n            $sum += $number * -1;\n            $prod *= -1;\n\
    \        } else {\n            $prod *= 0;\n        }\n    }\n    if (count($arr)\
    \ == 0) {\n        return null;\n    } else {\n        return $sum * $prod;\n\
    \    }\n}\necho prod_signs(array(1, 2, 2, -4));\necho \"<br>\";\necho prod_signs(array(0,\
    \ 1));\necho \"<br>\";\necho prod_signs(array());\necho \"<br>\";\n\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: -9<br>0<br><br>
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \    $result = null;\n    if (!empty($arr)) {\n        $numbers = array_map('abs',\
    \ $arr);\n        $result = array_product($numbers) * array_product($arr);\n \
    \   }\n    return $result;\n}\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwqtq0bcd.php:26\n\
    Stack trace:\n#0 /tmp/tmpwqtq0bcd.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpwqtq0bcd.php\
    \ on line 26\n"
  timestamp: 1659979984
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \    $product = 1;\n    $sum = 0;\n    if (empty($arr)) {\n        return null;\n\
    \    }\n    foreach ($arr as $num) {\n        if ($num > 0) {\n            $product\
    \ *= 1;\n            $sum += $num;\n        } elseif ($num < 0) {\n          \
    \  $product *= -1;\n            $sum += abs($num);\n        } else {\n       \
    \     $product *= 0;\n        }\n    }\n    return $sum * $product;\n}\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979984
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \tif (empty($arr)) {\n\t\treturn null;\n\t}\n\telseif (count($arr) === 1) {\n\t\
    \treturn $arr[0];\n\t}\n\t$product = 1;\n\t$sum = 0;\n\tforeach ($arr as $val)\
    \ {\n\t\tif ($val > 0) {\n\t\t\t$product *= 1;\n\t\t\t$sum += $val;\n\t\t}\n\t\
    \telseif ($val < 0) {\n\t\t\t$product *= -1;\n\t\t\t$sum += -$val;\n\t\t}\n\t\t\
    else {\n\t\t\t$product *= 0;\n\t\t}\n\t}\n\treturn $sum * $product;\n}\n\necho\
    \ prod_signs(array(1, 2, 2, -4));\necho PHP_EOL;\necho prod_signs(array(0, 1));\n\
    echo PHP_EOL;\necho prod_signs(array());\necho PHP_EOL;\necho prod_signs(array(0));\n\
    echo PHP_EOL;\necho prod_signs(array(1));\necho PHP_EOL;\necho prod_signs(array(-1));\n\
    echo PHP_EOL;\necho prod_signs(array(2));\necho PHP_EOL;\necho prod_signs(array(-2));\n\
    echo PHP_EOL;\necho prod_signs(array(0, 0));\necho PHP_EOL;\necho prod_signs(array(1,\
    \ 0));\necho PHP_EOL;\necho prod_signs(array(0, -1));\necho PHP_EOL;\necho prod_signs(array(-1,\
    \ 0));\necho PHP_EOL;\necho prod_signs(array(0, -1, 0));\necho PHP_EOL;\necho\
    \ prod_signs(array(1, 2, 3, 4, 5, -1, -2, -3, -4, -5));\necho PHP_EOL;\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '-9

    0


    0

    1

    -1

    2

    -2

    0

    0

    0

    0

    0

    -30

    '
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \   $arr = array_filter($arr, function($num) {\n       return $num != 0;\n   });\n\
    \   if (empty($arr)) return null;\n   $signs = array_map(function($num) {\n  \
    \     return $num > 0 ? 1 : -1;\n   }, $arr);\n   $sum = array_sum(array_map(function($num)\
    \ {\n       return abs($num);\n   }, $arr));\n   $prod = array_product($signs);\n\
    \   return $sum * $prod;\n}\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6hsy3gae.php:33\n\
    Stack trace:\n#0 /tmp/tmp6hsy3gae.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp6hsy3gae.php\
    \ on line 33\n"
  timestamp: 1659979985
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \    // Coding and coding...\n}\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr5g9mwlq.php:21\n\
    Stack trace:\n#0 /tmp/tmpr5g9mwlq.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpr5g9mwlq.php\
    \ on line 21\n"
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \t$magnitude = $sign = 1;\n\tforeach ($arr as $num) {\n\t\tif ($num != 0) {\n\t\
    \t\t$magnitude *= abs($num);\n\t\t\t$sign *= $num / abs($num);\n\t\t}\n\t}\n\t\
    return $magnitude * $sign;\n}\n\necho \"prod_signs([1, 2, 2, -4]) = \" . prod_signs([1,\
    \ 2, 2, -4]) . \"\\n\";\necho \"prod_signs([0, 1]) = \" . prod_signs([0, 1]) .\
    \ \"\\n\";\necho \"prod_signs([]) = \" . prod_signs([]) . \"\\n\";\n\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "prod_signs([1, 2, 2, -4]) = -16\nprod_signs([0, 1]) = 1\nprod_signs([])\
    \ = 1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbrrpw94h.php:33\n\
    Stack trace:\n#0 /tmp/tmpbrrpw94h.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpbrrpw94h.php\
    \ on line 33\n"
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  if (!count($arr)) {\n    return null;\n  }\n  $magnitudes = array_map('abs',\
    \ $arr);\n  $signs = array_map(function($n) {\n    if ($n > 0) {\n      return\
    \ 1;\n    } else if ($n < 0) {\n      return -1;\n    } else {\n      return 0;\n\
    \    }\n  }, $arr);\n  $magnitude = array_product($magnitudes);\n  $sign = array_product($signs);\n\
    \  return $magnitude * $sign;\n}\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp681usuik.php:36\n\
    Stack trace:\n#0 /tmp/tmp681usuik.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp681usuik.php\
    \ on line 36\n"
  timestamp: 1659979985
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  if (count($arr) == 0) return null;\n  $product = 1;\n  $sum = 0;\n  foreach\
    \ ($arr as $num) {\n    $product *= $num < 0 ? -1 : ($num > 0 ? 1 : 0);\n    $sum\
    \ += abs($num);\n  }\n  return $product * $sum;\n}\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979985
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \    if (!$arr) {\n        return null;\n    }\n    $signs = array_map(function($v)\
    \ {\n        if ($v < 0) {\n            return -1;\n        } elseif ($v > 0)\
    \ {\n            return 1;\n        } else {\n            return 0;\n        }\n\
    \    }, $arr);\n    $signs_prod = array_product($signs);\n    $magnitudes = array_map(function($v)\
    \ {\n        return abs($v);\n    }, $arr);\n    $magnitudes_sum = array_sum($magnitudes);\n\
    \    return $magnitudes_sum * $signs_prod;\n}\n\n$cases = [\n    [\n        'input'\
    \ => [1, 2, 2, -4],\n        'expected' => 9\n    ],\n    [\n        'input' =>\
    \ [0, 1],\n        'expected' => 0\n    ],\n    [\n        'input' => [],\n  \
    \      'expected' => null\n    ],\n];\n\nforeach ($cases as $case) {\n    $output\
    \ = prod_signs($case['input']);\n    if ($output !== $case['expected']) {\n  \
    \      echo \"Fail: input \", implode($case['input'], ','),\n            \" output\
    \ $output does not match expected \", $case['expected'], \"\\n\";\n    }\n}\n\
    function candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Fail: input \nFatal error: Uncaught TypeError: implode(): Argument #2 ($array)\
    \ must be of type ?array, string given in /tmp/tmp41_u_bxn.php:52\nStack trace:\n\
    #0 /tmp/tmp41_u_bxn.php(52): implode(Array, ',')\n#1 {main}\n  thrown in /tmp/tmp41_u_bxn.php\
    \ on line 52\n"
  timestamp: 1659979985
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  $magnitudes = array_map('abs', $arr);\n  $signs = array_map(function($val)\
    \ {\n    return $val < 0 ? -1 : $val > 0 ? 1 : 0;\n  }, $arr);\n  return $magnitudes\
    \ && $signs ? array_sum($magnitudes) * array_product($signs) : null;\n}\n\necho\
    \ prod_signs([1, 2, 2, -4]) . PHP_EOL;\necho prod_signs([0, 1]) . PHP_EOL;\necho\
    \ prod_signs([]) . PHP_EOL;\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Unparenthesized `a ? b : c ? d : e` is not supported. Use either
    `(a ? b : c) ? d : e` or `a ? b : (c ? d : e)` in /tmp/tmpak1ekmdt.php on line
    16

    '
  timestamp: 1659979985
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  if (empty($arr)) {\n    return null;\n  }\n  $product = 1;\n  $sum = 0;\n \
    \ foreach ($arr as $number) {\n    if ($number < 0) {\n      $product *= -1;\n\
    \    } elseif ($number == 0) {\n      $product = 0;\n    }\n    $sum += abs($number);\n\
    \  }\n  return $sum * $product;\n}\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979985
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \tif (count($arr) < 1) {\n\t\treturn null;\n\t}\n\n\t$ret = 1;\n\t$prod = 1;\n\
    \t$total = 0;\n\tforeach ($arr as $item) {\n\t\tif ($item > 0) {\n\t\t\t$prod\
    \ *= 1;\n\t\t} else if ($item < 0) {\n\t\t\t$prod *= -1;\n\t\t} else {\n\t\t\t\
    $prod *= 0;\n\t\t}\n\t\t$total += abs($item);\n\t}\n\treturn $total * $prod;\n\
    }\n\necho prod_signs(array(1, 2, 2, -4)) . \"\\n\";\necho prod_signs(array(0,\
    \ 1)) . \"\\n\";\necho prod_signs(array()) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '-9

    0


    '
  timestamp: 1659979985
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \    if (count($arr) === 0) {\n        return null;\n    }\n    $product = 1;\n\
    \    $sum = 0;\n    foreach ($arr as $value) {\n        $sum += abs($value);\n\
    \        if ($value > 0) {\n            $product *= 1;\n        } elseif ($value\
    \ < 0) {\n            $product *= -1;\n        } else {\n            $product\
    \ *= 0;\n        }\n    }\n    return $sum * $product;\n}\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979985
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  if (empty($arr)) {\n    return null;\n  }\n  $prod = 1;\n  $sum = 0;\n  foreach\
    \ ($arr as $item) {\n    if ($item > 0) {\n      $prod *= 1;\n    } elseif ($item\
    \ < 0) {\n      $prod *= -1;\n    } else {\n      $prod *= 0;\n    }\n    $sum\
    \ += abs($item);\n  }\n  return $sum * $prod;\n}\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979985
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  $signs = array_map(function($el) {\n    if ($el > 0) return 1;\n    if ($el\
    \ < 0) return -1;\n    return 0;\n  }, $arr);\n  if (!count($signs)) return null;\n\
    \  return array_product($signs) * array_sum(array_map(function($el) { return abs($el);\
    \ }, $arr));\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979985
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \    if (empty($arr)) {\n        return null;\n    }\n    $signedProduct = 1;\n\
    \    $product = 1;\n    foreach ($arr as $i) {\n        $absVal = abs($i);\n \
    \       $signedProduct *= ($i == 0) ? 0 : $i / $absVal;\n        $product *= $absVal;\n\
    \    }\n    return $product * $signedProduct;\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0ry45p62.php:32\n\
    Stack trace:\n#0 /tmp/tmp0ry45p62.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp0ry45p62.php\
    \ on line 32\n"
  timestamp: 1659979984
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  // $sign_array = array_map(create_function('$n', 'return $n < 0 ? -1 : ($n\
    \ == 0 ? 0 : 1);'), $arr);\n  $sign_array = array_map(function($n) {\n    return\
    \ $n < 0 ? -1 : ($n == 0 ? 0 : 1);\n  }, $arr);\n  $sign_product = array_product($sign_array);\n\
    \  $abs_array = array_map(function($n) {\n    return abs($n);\n  }, $arr);\n \
    \ $abs_sum = array_sum($abs_array);\n  return $sign_product * $abs_sum;\n}\n\n\
    echo prod_signs(array(1, 2, 2, -4)) . \"\\n\";\necho prod_signs(array(0, 1)) .\
    \ \"\\n\";\necho prod_signs(array()) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "-9\n0\n0\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz9s899st.php:37\n\
    Stack trace:\n#0 /tmp/tmpz9s899st.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpz9s899st.php\
    \ on line 37\n"
  timestamp: 1659979985
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \    if (empty($arr)) return null;\n    $sum = 0;\n    $prod = 1;\n    foreach\
    \ ($arr as $elem) {\n        if ($elem > 0) {\n            $prod *= 1;\n     \
    \       $sum += $elem;\n        } elseif ($elem < 0) {\n            $prod *= -1;\n\
    \            $sum += $elem * -1;\n        } else {\n            $prod *= 0;\n\
    \        }\n    }\n    return $sum * $prod;\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979985
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \    $count = 0;\n    $result = 1;\n    foreach ($arr as $item) {\n        if\
    \ ($item == 0) {\n            $count++;\n        } elseif ($item > 0) {\n    \
    \        $result *= 1;\n        } else {\n            $result *= -1;\n       \
    \ }\n    }\n    if ($count === count($arr)) {\n        return 0;\n    } elseif\
    \ (empty($arr)) {\n        return null;\n    } else {\n        return $result\
    \ * array_sum(array_map('abs', $arr));\n    }\n}\n\necho prod_signs(array(1, 2,\
    \ 2, -4));\necho \"\\n\";\necho prod_signs(array(0, 1));\necho \"\\n\";\necho\
    \ prod_signs(array());\necho \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "-9\n1\n0\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmp9psv1r.php:46\n\
    Stack trace:\n#0 /tmp/tmpmp9psv1r.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpmp9psv1r.php\
    \ on line 46\n"
  timestamp: 1659979985
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \    $product = 1;\n    $sum = 0;\n    foreach ($arr as $num) {\n        $sign\
    \ = $num <=> 0;\n        $product *= $sign;\n        $sum += abs($num);\n    }\n\
    \    return $product === 0 ? null : $sum * $product;\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2qosrv5a.php:30\n\
    Stack trace:\n#0 /tmp/tmp2qosrv5a.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp2qosrv5a.php\
    \ on line 30\n"
  timestamp: 1659979985
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \tif (empty($arr)) return null;\n\t$total = 0;\n\t$sign = 1;\n\tforeach ($arr\
    \ as $num) {\n\t\tif ($num < 0) $sign *= -1;\n\t\tif ($num != 0) $total += abs($num);\n\
    \t}\n\treturn $total * $sign;\n}\necho prod_signs(array(1, 2, 2, -4)) . \"\\n\"\
    ;\necho prod_signs(array(0, 1)) . \"\\n\";\necho prod_signs(array()) . \"\\n\"\
    ;\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "-9\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp61uq9i7r.php:32\n\
    Stack trace:\n#0 /tmp/tmp61uq9i7r.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp61uq9i7r.php\
    \ on line 32\n"
  timestamp: 1659979985
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \t$positive_count = 0;\n\t$negative_count = 0;\n\t$zero_count = 0;\n\t$abs_sum\
    \ = 0;\n\t\n\tforeach ($arr as $num) {\n\t\tif ($num == 0) {\n\t\t\t$zero_count\
    \ += 1;\n\t\t} else if ($num > 0) {\n\t\t\t$positive_count += 1;\n\t\t} else {\n\
    \t\t\t$negative_count += 1;\n\t\t}\n\t\t$abs_sum += abs($num);\n\t}\n\t\n\tif\
    \ ($positive_count > 0 && $negative_count > 0) {\n\t\treturn $abs_sum;\n\t} else\
    \ if ($positive_count > 0 && $negative_count == 0) {\n\t\treturn -$abs_sum;\n\t\
    } else if ($positive_count == 0 && $negative_count > 0) {\n\t\treturn $abs_sum;\n\
    \t} else if ($positive_count == 0 && $negative_count == 0 && $zero_count > 0)\
    \ {\n\t\treturn 0;\n\t} else {\n\t\treturn null;\n\t}\n}\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8sd27k_7.php:47\n\
    Stack trace:\n#0 /tmp/tmp8sd27k_7.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp8sd27k_7.php\
    \ on line 47\n"
  timestamp: 1659979985
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \t$prod = 1;\n\t$sum = 0;\n\tforeach ($arr as $num) {\n\t\t$sum += abs($num);\n\
    \t\t$prod *= $num > 0 ? 1 : ($num < 0 ? -1 : 0);\n\t}\n\tif (count($arr) == 0)\
    \ {\n\t\treturn null;\n\t}\n\treturn $sum * $prod;\n}\necho prod_signs(array(1,\
    \ 2, 2, -4));\necho prod_signs(array(0, 1));\necho prod_signs(array());\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '-90'
  timestamp: 1659979985
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
    \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
    \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\
    \  if (!$arr) return null;\n  return array_sum(array_map(function($x) { return\
    \ $x * abs($x); }, $arr));\n}\n\necho prod_signs([1, 2, 2, -4]) . \"\\n\";\necho\
    \ prod_signs([0, 1]) . \"\\n\";\necho prod_signs([]) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "-7\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps1sjrbgy.php:26\n\
    Stack trace:\n#0 /tmp/tmps1sjrbgy.php(36): test()\n#1 {main}\n  thrown in /tmp/tmps1sjrbgy.php\
    \ on line 26\n"
  timestamp: 1659979985
