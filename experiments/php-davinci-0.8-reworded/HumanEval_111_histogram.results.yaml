language: php
name: HumanEval_111_histogram
results:
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $dic = array();\n    foreach ($test as $i) {\n        if (!isset($dic[$i]))\
    \ {\n            $dic[$i] = 1;\n        } else {\n            $dic[$i] += 1;\n\
    \        }\n    }\n    $max = max($dic);\n    $maxKeys = array();\n    foreach\
    \ ($dic as $key => $value) {\n        if ($value == $max) {\n            $maxKeys[$key]\
    \ = $value;\n        }\n    }\n    return $maxKeys;\n}\n\nprint_r(histogram(\"\
    a b c\"));\nprint_r(histogram(\"a b b a\"));\nprint_r(histogram(\"a b c a b\"\
    ));\nprint_r(histogram(\"b b b b a\"));\nprint_r(histogram(\"\"));\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp8jvrm2wk.php:52\nStack trace:\n#0 /tmp/tmp8jvrm2wk.php(56):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp8jvrm2wk.php on line 52\n"
  timestamp: 1659824145
- exit_code: 0
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n\tif ($test == \"\") {\n\t\treturn\
    \ array();\n\t}\n\t$array1 = explode(\" \", $test);\n\t$array1 = array_count_values($array1);\n\
    \t$count = count($array1);\n\t$max = max($array1);\n\t$array2 = array();\n\tforeach\
    \ ($array1 as $key => $value) {\n\t\tif ($value == $max) {\n\t\t\t$array2[$key]\
    \ = $value;\n\t\t}\n\t}\n\treturn $array2;\n}\nfunction candidate(...$args) {\n\
    \    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824145
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  // Your code here\n}\nfunction\
    \ candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" => 2)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a b\") !==\
    \ array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\" => 1,\
    \ \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !== array(\"\
    b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"r t\
    \ g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_bk9jf5u.php:24\n\
    Stack trace:\n#0 /tmp/tmp_bk9jf5u.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp_bk9jf5u.php\
    \ on line 24\n"
  timestamp: 1659824145
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $arrayOfLetters = explode(\"\
    \ \", $test);\n    $histogram = array();\n    foreach ($arrayOfLetters as $letter)\
    \ {\n        if (!array_key_exists($letter, $histogram)) {\n            $histogram[$letter]\
    \ = 1;\n        } else {\n            $histogram[$letter]++;\n        }\n    }\n\
    \    arsort($histogram);\n    return $histogram;\n}\n\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmperr9qzly.php:36\n\
    Stack trace:\n#0 /tmp/tmperr9qzly.php(45): test()\n#1 {main}\n  thrown in /tmp/tmperr9qzly.php\
    \ on line 36\n"
  timestamp: 1659824145
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n\t$temp = [];\n\t$answer = [];\n\
    \t$test = explode(\" \", $test);\n\t$len = count($test);\n\tfor ($i = 0; $i <\
    \ $len; $i++) {\n\t\tif (isset($temp[$test[$i]])) {\n\t\t\t$temp[$test[$i]]++;\n\
    \t\t} else {\n\t\t\t$temp[$test[$i]] = 1;\n\t\t}\n\t}\n\t$biggest = max($temp);\n\
    \tforeach ($temp as $key => $value) {\n\t\tif ($value == $biggest) {\n\t\t\t$answer[$key]\
    \ = $value;\n\t\t}\n\t}\n\treturn $answer;\n}\n\nvar_dump(histogram(\"a b c\"\
    ));\nvar_dump(histogram(\"a b b a\"));\nvar_dump(histogram(\"a b c a b\"));\n\
    var_dump(histogram(\"b b b b a\"));\nvar_dump(histogram(\"\"));\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(3) {\n  [\"a\"]=>\n  int(1)\n  [\"b\"]=>\n  int(1)\n  [\"c\"]=>\n\
    \  int(1)\n}\narray(2) {\n  [\"a\"]=>\n  int(2)\n  [\"b\"]=>\n  int(2)\n}\narray(2)\
    \ {\n  [\"a\"]=>\n  int(2)\n  [\"b\"]=>\n  int(2)\n}\narray(1) {\n  [\"b\"]=>\n\
    \  int(4)\n}\narray(1) {\n  [\"\"]=>\n  int(1)\n}\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpdvy3m69_.php:53\nStack trace:\n#0 /tmp/tmpdvy3m69_.php(57):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpdvy3m69_.php on line 53\n"
  timestamp: 1659824145
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n$array = explode(\" \", $test);\n\
    $counts = array_count_values($array);\n$max = max($counts);\n$return = array();\n\
    $keys = array_keys($counts, $max);\nforeach ($keys as $key) {\n$return[$key] =\
    \ $max;\n}\nreturn $return;\n}\nprint_r(histogram(\"b b b b a\"));\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [b] => 4\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp_rqvbw9v.php:39\nStack trace:\n#0 /tmp/tmp_rqvbw9v.php(43): test()\n\
    #1 {main}\n  thrown in /tmp/tmp_rqvbw9v.php on line 39\n"
  timestamp: 1659824145
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $array = explode(\" \", $test);\n\
    \  $result = array();\n  $count = array();\n  $max = 0;\n  for ($i = 0; $i < count($array);\
    \ $i++) {\n    if ($count[$array[$i]] == null) {\n      $count[$array[$i]] = 1;\n\
    \    } else {\n      $count[$array[$i]]++;\n    }\n    if ($count[$array[$i]]\
    \ > $max) {\n      $max = $count[$array[$i]];\n    }\n  }\n  foreach ($count as\
    \ $key => $value) {\n    if ($value == $max) {\n      $result[$key] = $value;\n\
    \    }\n  }\n  return $result;\n}\nprint_r(histogram(\"a b c\"));\nprint_r(histogram(\"\
    a b b a\"));\nprint_r(histogram(\"a b c a b\"));\nprint_r(histogram(\"b b b b\
    \ a\"));\nprint_r(histogram(\"\"));\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key \"a\" in /tmp/tmpt2mqip_2.php on line 22\n\
    \nWarning: Undefined array key \"b\" in /tmp/tmpt2mqip_2.php on line 22\n\nWarning:\
    \ Undefined array key \"c\" in /tmp/tmpt2mqip_2.php on line 22\nArray\n(\n   \
    \ [a] => 1\n    [b] => 1\n    [c] => 1\n)\n\nWarning: Undefined array key \"a\"\
    \ in /tmp/tmpt2mqip_2.php on line 22\n\nWarning: Undefined array key \"b\" in\
    \ /tmp/tmpt2mqip_2.php on line 22\nArray\n(\n    [a] => 2\n    [b] => 2\n)\n\n\
    Warning: Undefined array key \"a\" in /tmp/tmpt2mqip_2.php on line 22\n\nWarning:\
    \ Undefined array key \"b\" in /tmp/tmpt2mqip_2.php on line 22\n\nWarning: Undefined\
    \ array key \"c\" in /tmp/tmpt2mqip_2.php on line 22\nArray\n(\n    [a] => 2\n\
    \    [b] => 2\n)\n\nWarning: Undefined array key \"b\" in /tmp/tmpt2mqip_2.php\
    \ on line 22\n\nWarning: Undefined array key \"a\" in /tmp/tmpt2mqip_2.php on\
    \ line 22\nArray\n(\n    [b] => 4\n)\n\nWarning: Undefined array key \"\" in /tmp/tmpt2mqip_2.php\
    \ on line 22\nArray\n(\n    [] => 1\n)\n\nWarning: Undefined array key \"a\" in\
    \ /tmp/tmpt2mqip_2.php on line 22\n\nWarning: Undefined array key \"b\" in /tmp/tmpt2mqip_2.php\
    \ on line 22\n\nWarning: Undefined array key \"a\" in /tmp/tmpt2mqip_2.php on\
    \ line 22\n\nWarning: Undefined array key \"b\" in /tmp/tmpt2mqip_2.php on line\
    \ 22\n\nWarning: Undefined array key \"c\" in /tmp/tmpt2mqip_2.php on line 22\n\
    \nWarning: Undefined array key \"a\" in /tmp/tmpt2mqip_2.php on line 22\n\nWarning:\
    \ Undefined array key \"b\" in /tmp/tmpt2mqip_2.php on line 22\n\nWarning: Undefined\
    \ array key \"c\" in /tmp/tmpt2mqip_2.php on line 22\n\nWarning: Undefined array\
    \ key \"d\" in /tmp/tmpt2mqip_2.php on line 22\n\nWarning: Undefined array key\
    \ \"g\" in /tmp/tmpt2mqip_2.php on line 22\n\nWarning: Undefined array key \"\
    r\" in /tmp/tmpt2mqip_2.php on line 22\n\nWarning: Undefined array key \"t\" in\
    \ /tmp/tmpt2mqip_2.php on line 22\n\nWarning: Undefined array key \"g\" in /tmp/tmpt2mqip_2.php\
    \ on line 22\n\nWarning: Undefined array key \"b\" in /tmp/tmpt2mqip_2.php on\
    \ line 22\n\nWarning: Undefined array key \"a\" in /tmp/tmpt2mqip_2.php on line\
    \ 22\n\nWarning: Undefined array key \"r\" in /tmp/tmpt2mqip_2.php on line 22\n\
    \nWarning: Undefined "
  timestamp: 1659824145
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n\t// Your code goes here!\n}\n\n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5xh938yv.php:25\n\
    Stack trace:\n#0 /tmp/tmp5xh938yv.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp5xh938yv.php\
    \ on line 25\n"
  timestamp: 1659824145
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $arr = explode(\" \", $test);\n\
    \    $arr_value = array_count_values($arr);\n    $most_rep = array_keys($arr_value,\
    \ max($arr_value));\n    $count_rep = count($most_rep);\n    if ($count_rep ==\
    \ 1) {\n        return array($most_rep[0] => max($arr_value));\n    } else {\n\
    \        $max_rep = max($arr_value);\n        $result = array();\n        foreach\
    \ ($arr_value as $key => $value) {\n            if ($value == $max_rep) {\n  \
    \              $result[$key] = $value;\n            }\n        }\n        return\
    \ $result;\n    }\n}\n\nprint_r(histogram(\"a b c\"));\necho \"\\n\";\nprint_r(histogram(\"\
    a b b a\"));\necho \"\\n\";\nprint_r(histogram(\"a b c a b\"));\necho \"\\n\"\
    ;\nprint_r(histogram(\"b b b b a\"));\necho \"\\n\";\nprint_r(histogram(\"\"));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n\nArray\n(\n   \
    \ [a] => 2\n    [b] => 2\n)\n\nArray\n(\n    [a] => 2\n    [b] => 2\n)\n\nArray\n\
    (\n    [b] => 4\n)\n\nArray\n(\n    [] => 1\n)\n\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpzmdbk617.php:56\nStack trace:\n#0 /tmp/tmpzmdbk617.php(60):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpzmdbk617.php on line 56\n"
  timestamp: 1659824145
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n\t$letters = explode(\" \", $test);\n\
    \t$occurences = array();\n\t$length = count($letters);\n\tfor ($i = 0; $i < $length;\
    \ $i++) {\n\t\t$current = $letters[$i];\n\t\tif (array_key_exists($current, $occurences))\
    \ {\n\t\t\t$occurences[$current]++;\n\t\t} else {\n\t\t\t$occurences[$current]\
    \ = 1;\n\t\t}\n\t}\n\tarsort($occurences);\n\t$final = array();\n\t$max = $occurences[key($occurences)];\n\
    \tforeach ($occurences as $key => $value) {\n\t\tif ($value === $max) {\n\t\t\t\
    $final[$key] = $value;\n\t\t}\n\t}\n\treturn $final;\n}\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp956xwnkv.php:49\n\
    Stack trace:\n#0 /tmp/tmp956xwnkv.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp956xwnkv.php\
    \ on line 49\n"
  timestamp: 1659824145
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $array = explode(\" \", $test);\n\
    \  $histogram = array();\n  foreach ($array as $char) {\n    if (array_key_exists($char,\
    \ $histogram)) {\n      $histogram[$char]++;\n    } else {\n      $histogram[$char]\
    \ = 1;\n    }\n  }\n  // print_r($histogram);\n  $max = max($histogram);\n  $max_array\
    \ = array();\n  foreach ($histogram as $key => $value) {\n    if ($value == $max)\
    \ {\n      $max_array[$key] = $value;\n    }\n  }\n  return $max_array;\n}\necho\
    \ \"Given a string representing a space separated lowercase letters, return an\
    \ array\nof the letter with the most repetition and containing the corresponding\
    \ count.\" . PHP_EOL;\necho \"If several letters have the same occurrence, return\
    \ all of them.\" . PHP_EOL;\necho \"histogram(\\\"a b c\\\")\" . PHP_EOL;\nprint_r(histogram(\"\
    a b c\"));\necho \"histogram(\\\"a b b a\\\")\" . PHP_EOL;\nprint_r(histogram(\"\
    a b b a\"));\necho \"histogram(\\\"a b c a b\\\")\" . PHP_EOL;\nprint_r(histogram(\"\
    a b c a b\"));\necho \"histogram(\\\"b b b b a\\\")\" . PHP_EOL;\nprint_r(histogram(\"\
    b b b b a\"));\necho \"histogram(\\\"\\\")\" . PHP_EOL;\nprint_r(histogram(\"\"\
    ));\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Given a string representing a space separated lowercase letters, return\
    \ an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nhistogram(\"\
    a b c\")\nArray\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nhistogram(\"\
    a b b a\")\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nhistogram(\"a b c a b\")\n\
    Array\n(\n    [a] => 2\n    [b] => 2\n)\nhistogram(\"b b b b a\")\nArray\n(\n\
    \    [b] => 4\n)\nhistogram(\"\")\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpcfuop_tw.php:60\nStack trace:\n#0 /tmp/tmpcfuop_tw.php(64):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpcfuop_tw.php on line 60\n"
  timestamp: 1659824145
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $test = explode(\" \", $test);\n\
    \  $hash = array();\n  $output = array();\n  foreach ($test as $value) {\n   \
    \ if (array_key_exists($value, $hash)) {\n      $hash[$value]++;\n    } else {\n\
    \      $hash[$value] = 1;\n    }\n  }\n  foreach ($hash as $key => $value) {\n\
    \    if (max($hash) == $value) {\n      $output[$key] = $value;\n    }\n  }\n\
    \  return $output;\n}\n\necho \"a b c:\\n\";\nprint_r(histogram(\"a b c\"));\n\
    echo \"a b b a:\\n\";\nprint_r(histogram(\"a b b a\"));\necho \"a b c a b:\\n\"\
    ;\nprint_r(histogram(\"a b c a b\"));\necho \"b b b b a:\\n\";\nprint_r(histogram(\"\
    b b b b a\"));\necho \":\\n\";\nprint_r(histogram(\"\"));\necho \":\\n\";\nprint_r(histogram(\"\
    c\"));\necho \"a a a a b b b b c:\\n\";\nprint_r(histogram(\"a a a a b b b b c\"\
    ));\necho \":\\n\";\nprint_r(histogram(\"c c c c b b b b\"));\necho \"a a a a\
    \ b b b b c c c c:\\n\";\nprint_r(histogram(\"a a a a b b b b c c c c\"));\nfunction\
    \ candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" => 2)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a b\") !==\
    \ array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\" => 1,\
    \ \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !== array(\"\
    b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"r t\
    \ g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "a b c:\nArray\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\na b b a:\n\
    Array\n(\n    [a] => 2\n    [b] => 2\n)\na b c a b:\nArray\n(\n    [a] => 2\n\
    \    [b] => 2\n)\nb b b b a:\nArray\n(\n    [b] => 4\n)\n:\nArray\n(\n    [] =>\
    \ 1\n)\n:\nArray\n(\n    [c] => 1\n)\na a a a b b b b c:\nArray\n(\n    [a] =>\
    \ 4\n    [b] => 4\n)\n:\nArray\n(\n    [c] => 4\n    [b] => 4\n)\na a a a b b\
    \ b b c c c c:\nArray\n(\n    [a] => 4\n    [b] => 4\n    [c] => 4\n)\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmp4kmf4e1f.php:64\nStack trace:\n\
    #0 /tmp/tmp4kmf4e1f.php(68): test()\n#1 {main}\n  thrown in /tmp/tmp4kmf4e1f.php\
    \ on line 64\n"
  timestamp: 1659824145
- exit_code: 0
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $histogram = array();\n    $max_key\
    \ = array();\n    $max_value = 0;\n    foreach (str_word_count($test, 1) as $word)\
    \ {\n        if (array_key_exists($word, $histogram)) {\n            $histogram[$word]\
    \ += 1;\n        } else {\n            $histogram[$word] = 1;\n        }\n   \
    \ }\n    foreach ($histogram as $key => $value) {\n        if ($value > $max_value)\
    \ {\n            $max_value = $value;\n            $max_key = array($key);\n \
    \       } elseif ($value == $max_value) {\n            array_push($max_key, $key);\n\
    \        }\n    }\n    $max_result = array();\n    foreach ($max_key as $key)\
    \ {\n        $max_result[$key] = $max_value;\n    }\n    return $max_result;\n\
    }\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824145
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $result = array();\n    $test\
    \ = str_replace(\" \", \"\", $test);\n    $arr = str_split($test);\n    $count\
    \ = array_count_values($arr);\n    $maxCount = max($count);\n    foreach ($count\
    \ as $key => $value) {\n        if ($value == $maxCount) {\n            $result[$key]\
    \ = $value;\n        }\n    }\n    return $result;\n}\n\n$test = \"a b c\";\n\
    $result = histogram($test);\nvar_dump($result);\n\n$test = \"a b b a\";\n$result\
    \ = histogram($test);\nvar_dump($result);\n\n$test = \"a b c a b\";\n$result =\
    \ histogram($test);\nvar_dump($result);\n\n$test = \"b b b b a\";\n$result = histogram($test);\n\
    var_dump($result);\n\n$test = \"\";\n$result = histogram($test);\nvar_dump($result);\n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(3) {\n  [\"a\"]=>\n  int(1)\n  [\"b\"]=>\n  int(1)\n  [\"c\"]=>\n\
    \  int(1)\n}\narray(2) {\n  [\"a\"]=>\n  int(2)\n  [\"b\"]=>\n  int(2)\n}\narray(2)\
    \ {\n  [\"a\"]=>\n  int(2)\n  [\"b\"]=>\n  int(2)\n}\narray(1) {\n  [\"b\"]=>\n\
    \  int(4)\n}\narray(1) {\n  [\"\"]=>\n  int(1)\n}\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp7l8ye7nm.php:60\nStack trace:\n#0 /tmp/tmp7l8ye7nm.php(64):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp7l8ye7nm.php on line 60\n"
  timestamp: 1659824145
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n\t$results = array();\n\t$test =\
    \ preg_split(\"/\\s+/\", $test);\n\tforeach ($test as $letter) {\n\t\tif (isset($results[$letter]))\
    \ {\n\t\t\t$results[$letter] += 1;\n\t\t} else {\n\t\t\t$results[$letter] = 1;\n\
    \t\t}\n\t}\n\tarsort($results);\n\tforeach ($results as $key => $value) {\n\t\t\
    if ($value === reset($results)) {\n\t\t\t$results = array($key => $value);\n\t\
    \t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn $results;\n}\n\n$testArray = array(\n\
    \t\"a b c\",\n\t\"a b b a\",\n\t\"a b c a b\",\n\t\"b b b b a\",\n\t\"\"\n);\n\
    \nforeach ($testArray as $test) {\n\techo \"Input: \" . $test . \"\\n\";\n\t$results\
    \ = histogram($test);\n\techo \"Output: \";\n\tforeach ($results as $key => $value)\
    \ {\n\t\techo $key . \" => \" . $value . \", \";\n\t}\n\techo \"\\n\";\n}\nfunction\
    \ candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" => 2)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a b\") !==\
    \ array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\" => 1,\
    \ \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !== array(\"\
    b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"r t\
    \ g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Input: a b c\nOutput: c => 1, \nInput: a b b a\nOutput: b => 2, \nInput:\
    \ a b c a b\nOutput: b => 2, \nInput: b b b b a\nOutput: b => 4, \nInput: \nOutput:\
    \  => 1, \n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk59qqqo7.php:59\n\
    Stack trace:\n#0 /tmp/tmpk59qqqo7.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpk59qqqo7.php\
    \ on line 59\n"
  timestamp: 1659824145
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    foreach ($test as $key => $value) {\n        $result[$value] = 0;\n    }\n\
    \    foreach ($test as $key => $value) {\n        $result[$value] = $result[$value]\
    \ + 1;\n    }\n    $count = count($result);\n    $i = 0;\n    $max_count = max($result);\n\
    \    foreach ($result as $key => $value) {\n        if ($value == $max_count)\
    \ {\n            $max_array[$i] = $key;\n            $i++;\n        }\n    }\n\
    \    $result = array_fill_keys($max_array, $max_count);\n    return $result;\n\
    }\nprint_r(histogram(\"a b c\"));\necho \"\\n\";\nprint_r(histogram(\"a b b a\"\
    ));\necho \"\\n\";\nprint_r(histogram(\"a b c a b\"));\necho \"\\n\";\nprint_r(histogram(\"\
    b b b b a\"));\necho \"\\n\";\nprint_r(histogram(\"\"));\necho \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" => 2)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a b\") !==\
    \ array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\" => 1,\
    \ \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !== array(\"\
    b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"r t\
    \ g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n\nArray\n(\n   \
    \ [a] => 2\n    [b] => 2\n)\n\nArray\n(\n    [a] => 2\n    [b] => 2\n)\n\nArray\n\
    (\n    [b] => 4\n)\n\nArray\n(\n    [] => 1\n)\n\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp3o3z9ohw.php:57\nStack trace:\n#0 /tmp/tmp3o3z9ohw.php(61):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp3o3z9ohw.php on line 57\n"
  timestamp: 1659824145
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $array = explode(\" \", $test);\n\
    \    $max = 0;\n    $result = array();\n    foreach ($array as $value) {\n   \
    \     if (array_key_exists($value, $result)) {\n            $result[$value]++;\n\
    \        } else {\n            $result[$value] = 1;\n        }\n        if ($result[$value]\
    \ > $max) {\n            $max = $result[$value];\n        }\n    }\n    foreach\
    \ ($result as $key => $value) {\n        if ($value != $max) {\n            unset($result[$key]);\n\
    \        }\n    }\n    return $result;\n}\nprint_r(histogram(\"a b c\"));\nprint_r(histogram(\"\
    a b b a\"));\nprint_r(histogram(\"a b c a b\"));\nprint_r(histogram(\"b b b b\
    \ a\"));\nprint_r(histogram(\"\"));\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmplanbgzee.php:53\nStack trace:\n#0 /tmp/tmplanbgzee.php(57):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmplanbgzee.php on line 53\n"
  timestamp: 1659824145
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $counts = array_count_values($test);\n    $max = max($counts);\n    $histogram\
    \ = array();\n    foreach ($counts as $key => $value) {\n        if ($value ==\
    \ $max) {\n            $histogram[$key] = $value;\n        }\n    }\n    print_r($histogram);\n\
    }\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 2\n    [b] => 2\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp7rm_v6r2.php:33\nStack trace:\n#0 /tmp/tmp7rm_v6r2.php(43):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp7rm_v6r2.php on line 33\n"
  timestamp: 1659824145
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $test_arr = explode(\" \", $test);\n\
    \    $max = 0;\n    $result = array();\n    foreach ($test_arr as $test_value)\
    \ {\n        $result[$test_value]++;\n        if ($result[$test_value] > $max)\
    \ {\n            $max = $result[$test_value];\n        }\n    }\n    foreach ($result\
    \ as $result_key => $result_value) {\n        if ($result_value != $max) {\n \
    \           unset($result[$result_key]);\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key \"a\" in /tmp/tmp4ecq_rpt.php on line 21\n\
    \nWarning: Undefined array key \"b\" in /tmp/tmp4ecq_rpt.php on line 21\n\nWarning:\
    \ Undefined array key \"a\" in /tmp/tmp4ecq_rpt.php on line 21\n\nWarning: Undefined\
    \ array key \"b\" in /tmp/tmp4ecq_rpt.php on line 21\n\nWarning: Undefined array\
    \ key \"c\" in /tmp/tmp4ecq_rpt.php on line 21\n\nWarning: Undefined array key\
    \ \"a\" in /tmp/tmp4ecq_rpt.php on line 21\n\nWarning: Undefined array key \"\
    b\" in /tmp/tmp4ecq_rpt.php on line 21\n\nWarning: Undefined array key \"c\" in\
    \ /tmp/tmp4ecq_rpt.php on line 21\n\nWarning: Undefined array key \"d\" in /tmp/tmp4ecq_rpt.php\
    \ on line 21\n\nWarning: Undefined array key \"g\" in /tmp/tmp4ecq_rpt.php on\
    \ line 21\n\nWarning: Undefined array key \"r\" in /tmp/tmp4ecq_rpt.php on line\
    \ 21\n\nWarning: Undefined array key \"t\" in /tmp/tmp4ecq_rpt.php on line 21\n\
    \nWarning: Undefined array key \"g\" in /tmp/tmp4ecq_rpt.php on line 21\n\nWarning:\
    \ Undefined array key \"b\" in /tmp/tmp4ecq_rpt.php on line 21\n\nWarning: Undefined\
    \ array key \"a\" in /tmp/tmp4ecq_rpt.php on line 21\n\nWarning: Undefined array\
    \ key \"r\" in /tmp/tmp4ecq_rpt.php on line 21\n\nWarning: Undefined array key\
    \ \"t\" in /tmp/tmp4ecq_rpt.php on line 21\n\nWarning: Undefined array key \"\
    g\" in /tmp/tmp4ecq_rpt.php on line 21\n\nWarning: Undefined array key \"\" in\
    \ /tmp/tmp4ecq_rpt.php on line 21\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp4ecq_rpt.php:45\nStack trace:\n#0 /tmp/tmp4ecq_rpt.php(49): test()\n\
    #1 {main}\n  thrown in /tmp/tmp4ecq_rpt.php on line 45\n"
  timestamp: 1659824145
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $array = array();\n  if (preg_match_all('/\\\
    w/', $test, $matches)) {\n    foreach ($matches[0] as $value) {\n      if (array_key_exists($value,\
    \ $array)) {\n        $array[$value] += 1;\n      } else {\n        $array[$value]\
    \ = 1;\n      }\n    }\n  }\n  return $array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpad0_l_id.php:36\n\
    Stack trace:\n#0 /tmp/tmpad0_l_id.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpad0_l_id.php\
    \ on line 36\n"
  timestamp: 1659824145
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $test = preg_replace('/\\s+/',\
    \ '', $test);\n    $arr = str_split($test);\n    $keys = array_unique($arr);\n\
    \    $histo = array();\n    foreach ($keys as $value) {\n        $histo[$value]\
    \ = 0;\n    }\n    foreach ($arr as $value) {\n        $histo[$value]++;\n   \
    \ }\n    // arsort($histo);\n    return $histo;\n}\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbuhzylyh.php:36\n\
    Stack trace:\n#0 /tmp/tmpbuhzylyh.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpbuhzylyh.php\
    \ on line 36\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $letters = [];\n    $occurrences\
    \ = [];\n    foreach (explode(\" \", $test) as $char) {\n        if (!array_key_exists($char,\
    \ $letters)) {\n            $letters[$char] = 1;\n        } else {\n         \
    \   $letters[$char] += 1;\n        }\n    }\n    $max = 0;\n    foreach ($letters\
    \ as $key => $value) {\n        if ($value > $max) {\n            $max = $value;\n\
    \        }\n    }\n    foreach ($letters as $key => $value) {\n        if ($value\
    \ == $max) {\n            $occurrences[$key] = $value;\n        }\n    }\n   \
    \ return $occurrences;\n}\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6x63m1tz.php:50\n\
    Stack trace:\n#0 /tmp/tmp6x63m1tz.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp6x63m1tz.php\
    \ on line 50\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n\t$array = explode(\" \", $test);\n\
    \t$result = array();\n\tforeach ($array as $value) {\n\t\tif (array_key_exists($value,\
    \ $result)) {\n\t\t\t$result[$value]++;\n\t\t} else {\n\t\t\t$result[$value] =\
    \ 1;\n\t\t}\n\t}\n\tarsort($result);\n\t$count = array_shift($result);\n\t$result\
    \ = array_filter($result, function($value) use ($count) {\n\t\treturn $value ==\
    \ $count;\n\t});\n\t$result = array_combine(array_keys($result), array_fill(0,\
    \ count($result), $count));\n\treturn $result;\n}\necho \"histogram(\\\"a b c\\\
    \")<br />\";\necho \"histogram(\\\"a b b a\\\")<br />\";\necho \"histogram(\\\"\
    a b c a b\\\")<br />\";\necho \"histogram(\\\"b b b b a\\\")<br />\";\necho \"\
    histogram(\\\"\\\")<br />\";\necho \"Output : <br />\";\necho \"<pre>\";\nprint_r(histogram(\"\
    a b c\"));\nprint_r(histogram(\"a b b a\"));\nprint_r(histogram(\"a b c a b\"\
    ));\nprint_r(histogram(\"b b b b a\"));\nprint_r(histogram(\"\"));\necho \"</pre>\"\
    ;\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "histogram(\"a b c\")<br />histogram(\"a b b a\")<br />histogram(\"a b c\
    \ a b\")<br />histogram(\"b b b b a\")<br />histogram(\"\")<br />Output : <br\
    \ /><pre>Array\n(\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [b] => 2\n)\n\
    Array\n(\n    [b] => 2\n)\nArray\n(\n)\nArray\n(\n)\n</pre>\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp93hxk1to.php:52\nStack trace:\n#0 /tmp/tmp93hxk1to.php(62):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp93hxk1to.php on line 52\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $arr = array();\n    $histogram\
    \ = array();\n    $histogram_occ = array();\n    $arr = explode(\" \", $test);\n\
    \    $histogram = array_count_values($arr);\n    $histogram_occ = array_values($histogram);\n\
    \    return array_search(max($histogram_occ), $histogram);\n}\necho histogram(\"\
    a b c a b\");\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "a\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn4wh1gx2.php:31\n\
    Stack trace:\n#0 /tmp/tmpn4wh1gx2.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpn4wh1gx2.php\
    \ on line 31\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $strings = explode(\" \", $test);\n\
    \    if(count($strings) == 0) {\n        return array();\n    }\n    $count =\
    \ [];\n    foreach($strings as $string) {\n        if(isset($count[$string]))\
    \ {\n            $count[$string] += 1;\n        } else {\n            $count[$string]\
    \ = 1;\n        }\n    }\n    arsort($count);\n    $max = max($count);\n    $res\
    \ = [];\n    foreach($count as $key => $value) {\n        if($value == $max) {\n\
    \            $res[$key] = $value;\n        }\n    }\n    return $res;\n}\nfunction\
    \ candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" => 2)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a b\") !==\
    \ array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\" => 1,\
    \ \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !== array(\"\
    b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"r t\
    \ g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp31j3yd7p.php:50\n\
    Stack trace:\n#0 /tmp/tmp31j3yd7p.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp31j3yd7p.php\
    \ on line 50\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $testArray = explode(\" \", $test);\n\
    \  foreach ($testArray as $testLetter) {\n    $countArray[$testLetter]++;\n  }\n\
    \  arsort($countArray);\n  $countMax = max($countArray);\n  $letterMax = array_search($countMax,\
    \ $countArray);\n  $maxedArray = array($letterMax => $countMax);\n  $returnedArray\
    \ = [];\n  foreach ($countArray as $letter => $count) {\n    if ($count == $countMax)\
    \ {\n      $returnedArray[$letter] = $count;\n    }\n  }\n  return $returnedArray;\n\
    }\n\nvar_dump(histogram(\"a b c\"));\nvar_dump(histogram(\"a b b a\"));\nvar_dump(histogram(\"\
    a b c a b\"));\nvar_dump(histogram(\"b b b b a\"));\nvar_dump(histogram(\"\"));\n\
    \nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $countArray in /tmp/tmpbjtvu1qv.php on line\
    \ 19\n\nWarning: Undefined array key \"a\" in /tmp/tmpbjtvu1qv.php on line 19\n\
    \nWarning: Undefined array key \"b\" in /tmp/tmpbjtvu1qv.php on line 19\n\nWarning:\
    \ Undefined array key \"c\" in /tmp/tmpbjtvu1qv.php on line 19\narray(3) {\n \
    \ [\"a\"]=>\n  int(1)\n  [\"b\"]=>\n  int(1)\n  [\"c\"]=>\n  int(1)\n}\n\nWarning:\
    \ Undefined variable $countArray in /tmp/tmpbjtvu1qv.php on line 19\n\nWarning:\
    \ Undefined array key \"a\" in /tmp/tmpbjtvu1qv.php on line 19\n\nWarning: Undefined\
    \ array key \"b\" in /tmp/tmpbjtvu1qv.php on line 19\narray(2) {\n  [\"a\"]=>\n\
    \  int(2)\n  [\"b\"]=>\n  int(2)\n}\n\nWarning: Undefined variable $countArray\
    \ in /tmp/tmpbjtvu1qv.php on line 19\n\nWarning: Undefined array key \"a\" in\
    \ /tmp/tmpbjtvu1qv.php on line 19\n\nWarning: Undefined array key \"b\" in /tmp/tmpbjtvu1qv.php\
    \ on line 19\n\nWarning: Undefined array key \"c\" in /tmp/tmpbjtvu1qv.php on\
    \ line 19\narray(2) {\n  [\"a\"]=>\n  int(2)\n  [\"b\"]=>\n  int(2)\n}\n\nWarning:\
    \ Undefined variable $countArray in /tmp/tmpbjtvu1qv.php on line 19\n\nWarning:\
    \ Undefined array key \"b\" in /tmp/tmpbjtvu1qv.php on line 19\n\nWarning: Undefined\
    \ array key \"a\" in /tmp/tmpbjtvu1qv.php on line 19\narray(1) {\n  [\"b\"]=>\n\
    \  int(4)\n}\n\nWarning: Undefined variable $countArray in /tmp/tmpbjtvu1qv.php\
    \ on line 19\n\nWarning: Undefined array key \"\" in /tmp/tmpbjtvu1qv.php on line\
    \ 19\narray(1) {\n  [\"\"]=>\n  int(1)\n}\n\nWarning: Undefined variable $countArray\
    \ in /tmp/tmpbjtvu1qv.php on line 19\n\nWarning: Undefined array key \"a\" in\
    \ /tmp/tmpbjtvu1qv.php on line 19\n\nWarning: Undefined array key \"b\" in /tmp/tmpbjtvu1qv.php\
    \ on line 19\n\nWarning: Undefined variable $countArray in /tmp/tmpbjtvu1qv.php\
    \ on line 19\n\nWarning: Undefined array key \"a\" in /tmp/tmpbjtvu1qv.php on\
    \ line 19\n\nWarning: Undefined array key \"b\" in /tmp/tmpbjtvu1qv.php on line\
    \ 19\n\nWarning: Undefined array key \"c\" in /tmp/tmpbjtvu1qv.php on line 19\n\
    \nWarning: Undefined variable $countArray in /tmp/tmpbjtvu1qv.php on line 19\n\
    \nWarning: Undefined array key \"a\" in /tmp/tmpbjtvu1qv.php on line 19\n\nWarning:\
    \ Undefined array key \"b\""
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $letters = explode(\" \", $test);\n\
    \    $results = array();\n    foreach ($letters as $letter) {\n        if (!array_key_exists($letter,\
    \ $results)) {\n            $results[$letter] = 1;\n        } else {\n       \
    \     $results[$letter]++;\n        }\n    }\n    if (sizeof($results) == 0) {\n\
    \        echo \"array()\";\n    } else {\n        $maximum = max($results);\n\
    \        foreach ($results as $letter => $count) {\n            if ($count ==\
    \ $maximum) {\n                echo \"array(\\\"$letter\\\" => $count)<br>\";\n\
    \            }\n        }\n    }\n}\n\nhistogram(\"a b c\");\nhistogram(\"a b\
    \ b a\");\nhistogram(\"a b c a b\");\nhistogram(\"b b b b a\");\nhistogram(\"\"\
    );\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(\"a\" => 1)<br>array(\"b\" => 1)<br>array(\"c\" => 1)<br>array(\"\
    a\" => 2)<br>array(\"b\" => 2)<br>array(\"a\" => 2)<br>array(\"b\" => 2)<br>array(\"\
    b\" => 4)<br>array(\"\" => 1)<br>array(\"a\" => 2)<br>array(\"b\" => 2)<br>\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp8xvm3hub.php:48\nStack\
    \ trace:\n#0 /tmp/tmp8xvm3hub.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp8xvm3hub.php\
    \ on line 48\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n\t$test = preg_replace('/\\s+/',\
    \ '', $test);\n\t$test = str_split($test);\n\t$result = array();\n\tforeach ($test\
    \ as $value) {\n\t\tif (isset($result[$value])) {\n\t\t\t$result[$value]++;\n\t\
    \t} else {\n\t\t\t$result[$value] = 1;\n\t\t}\n\t}\n\t$max = max($result);\n\t\
    $output = array();\n\tforeach ($result as $key => $value) {\n\t\tif ($value ==\
    \ $max) {\n\t\t\t$output[$key] = $value;\n\t\t}\n\t}\n\treturn $output;\n}\necho\
    \ json_encode(histogram('a b c'));\necho \"\\n\";\necho json_encode(histogram('a\
    \ b b a'));\necho \"\\n\";\necho json_encode(histogram('a b c a b'));\necho \"\
    \\n\";\necho json_encode(histogram('b b b b a'));\necho \"\\n\";\necho json_encode(histogram(''));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "{\"a\":1,\"b\":1,\"c\":1}\n{\"a\":2,\"b\":2}\n{\"a\":2,\"b\":2}\n{\"b\"\
    :4}\n{\"\":1}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwrw8nmo3.php:57\n\
    Stack trace:\n#0 /tmp/tmpwrw8nmo3.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpwrw8nmo3.php\
    \ on line 57\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    // Replace this line with your\
    \ code\n}\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2,\
    \ \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1wcywyrn.php:24\n\
    Stack trace:\n#0 /tmp/tmp1wcywyrn.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp1wcywyrn.php\
    \ on line 24\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $letters = explode(\" \", $test);\n\
    \  $max_letter = [];\n  $max_count = 0;\n  foreach($letters as $letter) {\n  \
    \  $letter_count = 0;\n    foreach($letters as $test_letter) {\n      if($letter\
    \ == $test_letter) {\n        $letter_count++;\n      }\n    }\n    if($letter_count\
    \ > $max_count) {\n      $max_count = $letter_count;\n      $max_letter = [$letter\
    \ => $letter_count];\n    } elseif($letter_count == $max_count) {\n      $max_letter\
    \ += [$letter => $letter_count];\n    }\n  }\n  return $max_letter;\n}\n\nfunction\
    \ candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" => 2)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a b\") !==\
    \ array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\" => 1,\
    \ \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !== array(\"\
    b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"r t\
    \ g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo30wmxh3.php:48\n\
    Stack trace:\n#0 /tmp/tmpo30wmxh3.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpo30wmxh3.php\
    \ on line 48\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $result = [];\n    $letters\
    \ = array_count_values(explode(\" \", $test));\n    $maxCount = max($letters);\n\
    \    foreach ($letters as $letter => $count) {\n        if ($count === $maxCount)\
    \ {\n            $result[$letter] = $count;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg2puf5kj.php:39\n\
    Stack trace:\n#0 /tmp/tmpg2puf5kj.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpg2puf5kj.php\
    \ on line 39\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $explode = explode(\" \", $test);\n\
    \    $arr = array_count_values($explode);\n    $largest = max($arr);\n    foreach\
    \ ($arr as $key => $value) {\n        if ($value !== $largest) {\n           \
    \ unset($arr[$key]);\n        }\n    }\n    return $arr;\n}\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzrq6jl7l.php:38\n\
    Stack trace:\n#0 /tmp/tmpzrq6jl7l.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpzrq6jl7l.php\
    \ on line 38\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n\t$array = explode(\" \", $test);\n\
    \t$assoc = array();\n\tforeach ($array as $value) {\n\t\tif (!isset($assoc[$value]))\n\
    \t\t\t$assoc[$value] = 1;\n\t\telse\n\t\t\t$assoc[$value]++;\n\t}\n\tarsort($assoc);\n\
    \t$max = reset($assoc);\n\t$result = array();\n\tforeach ($assoc as $key => $value)\
    \ {\n\t\tif ($value == $max)\n\t\t\t$result[$key] = $value;\n\t}\n\treturn $result;\n\
    }\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplxw8k9jb.php:45\n\
    Stack trace:\n#0 /tmp/tmplxw8k9jb.php(49): test()\n#1 {main}\n  thrown in /tmp/tmplxw8k9jb.php\
    \ on line 45\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $arr = explode(\" \", $test);\n\
    \  $results = array();\n  foreach ($arr as $k => $v) {\n    if (!isset($results[$v]))\
    \ {\n      $results[$v] = 1;\n    } else {\n      $results[$v] += 1;\n    }\n\
    \  }\n  $values = array_values($results);\n  $keys = array_keys($results);\n \
    \ $ret = array();\n  for ($i = 0; $i < count($results); $i++) {\n    if ($values[$i]\
    \ == max($values)) {\n      $ret[$keys[$i]] = $values[$i];\n    }\n  }\n  return\
    \ $ret;\n}\n\n$test1 = \"a b c\";\n$test2 = \"a b b a\";\n$test3 = \"a b c a b\"\
    ;\n$test4 = \"b b b b a\";\n$test5 = \"\";\n$answer1 = array(\"a\" => 1, \"b\"\
    \ => 1, \"c\" => 1);\n$answer2 = array(\"a\" => 2, \"b\" => 2);\n$answer3 = array(\"\
    a\" => 2, \"b\" => 2);\n$answer4 = array(\"b\" => 4);\n$answer5 = array();\n$success\
    \ = true;\n\nif (histogram($test1) != $answer1) {\n  $success = false;\n  echo\
    \ \"histogram $test1 failed.\\n\";\n}\nif (histogram($test2) != $answer2) {\n\
    \  $success = false;\n  echo \"histogram $test2 failed.\\n\";\n}\nif (histogram($test3)\
    \ != $answer3) {\n  $success = false;\n  echo \"histogram $test3 failed.\\n\"\
    ;\n}\nif (histogram($test4) != $answer4) {\n  $success = false;\n  echo \"histogram\
    \ $test4 failed.\\n\";\n}\nif (histogram($test5) != $answer5) {\n  $success =\
    \ false;\n  echo \"histogram $test5 failed.\\n\";\n}\n\nif ($success) {\n \nfunction\
    \ candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" => 2)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a b\") !==\
    \ array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\" => 1,\
    \ \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !== array(\"\
    b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"r t\
    \ g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 70 in /tmp/tmpxaqfpp2b.php on line 87

    '
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n\tif(empty($test)) {\n\t\treturn\
    \ array();\n\t}\n\t$array = explode(\" \", $test);\n\t$out = array();\n\tforeach($array\
    \ as $key => $val) {\n\t\t$out[$val] = 0;\n\t}\n\tforeach($array as $key => $val)\
    \ {\n\t\t$out[$val]++;\n\t}\n\tarsort($out);\n\t$highest = array_shift($out);\n\
    \t$final = array();\n\tforeach($out as $key => $val) {\n\t\tif($val === $highest)\
    \ {\n\t\t\t$final[$key] = $val;\n\t\t}\n\t}\n\treturn $final;\n}\n\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0f7jtqn3.php:44\n\
    Stack trace:\n#0 /tmp/tmp0f7jtqn3.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp0f7jtqn3.php\
    \ on line 44\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $test = str_replace(\" \", \"\
    \", $test);\n    $length = strlen($test);\n    $map = array();\n    for ($i =\
    \ 0; $i < $length; $i++) {\n        $key = $test[$i];\n        if (array_key_exists($key,\
    \ $map)) {\n            $map[$key]++;\n        } else {\n            $map[$key]\
    \ = 1;\n        }\n    }\n    arsort($map);\n    return $map;\n}\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjcnu5827.php:37\n\
    Stack trace:\n#0 /tmp/tmpjcnu5827.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpjcnu5827.php\
    \ on line 37\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $testArray = explode(\" \", $test);\n\
    \  $tempArray = array();\n  foreach ($testArray as $key => $value) {\n    if (!isset($tempArray[$value]))\
    \ {\n      $tempArray[$value] = 1;\n    } else {\n      $tempArray[$value]++;\n\
    \    }\n  }\n  return $tempArray;\n}\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpedt87z7v.php:34\n\
    Stack trace:\n#0 /tmp/tmpedt87z7v.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpedt87z7v.php\
    \ on line 34\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $letters = explode(\" \", $test);\n\
    \    $result = array();\n    foreach ($letters as $letter) {\n        if (!isset($result[$letter]))\
    \ {\n            $result[$letter] = 0;\n        }\n        $result[$letter]++;\n\
    \    }\n    arsort($result);\n    $max = reset($result);\n    $res_max = array();\n\
    \    foreach ($result as $key => $value) {\n        if ($value == $max) {\n  \
    \          $res_max[$key] = $value;\n        }\n    }\n    return $res_max;\n\
    }\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2u9jdsdb.php:47\n\
    Stack trace:\n#0 /tmp/tmp2u9jdsdb.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp2u9jdsdb.php\
    \ on line 47\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $array = explode(\" \", $test);\n\
    \  $highestKey = '';\n  $highestValue = 0;\n  $finalArray = array();\n  foreach\
    \ ($array as $item) {\n    if (!isset($finalArray[$item])) {\n      $finalArray[$item]\
    \ = 1;\n    } else {\n      $finalArray[$item]++;\n    }\n    if ($finalArray[$item]\
    \ > $highestValue) {\n      $highestValue = $finalArray[$item];\n      $highestKey\
    \ = $item;\n    }\n  }\n  if ($finalArray[$highestKey] > 1) {\n    return $finalArray;\n\
    \  } else {\n    $finalArray = array();\n    $finalArray[$highestKey] = $highestValue;\n\
    \    return $finalArray;\n  }\n}\n\necho \"<pre>\";\nprint_r(histogram(\"a b c\"\
    ));\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(histogram(\"a b b a\"));\necho\
    \ \"</pre>\";\n\necho \"<pre>\";\nprint_r(histogram(\"a b c a b\"));\necho \"\
    </pre>\";\n\necho \"<pre>\";\nprint_r(histogram(\"b b b b a\"));\necho \"</pre>\"\
    ;\n\necho \"<pre>\";\nprint_r(histogram(\"\"));\necho \"</pre>\";\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [a] => 1\n)\n</pre><pre>Array\n(\n    [a] => 2\n   \
    \ [b] => 2\n)\n</pre><pre>Array\n(\n    [a] => 2\n    [b] => 2\n    [c] => 1\n\
    )\n</pre><pre>Array\n(\n    [b] => 4\n    [a] => 1\n)\n</pre><pre>Array\n(\n \
    \   [] => 1\n)\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfg490xpj.php:66\n\
    Stack trace:\n#0 /tmp/tmpfg490xpj.php(75): test()\n#1 {main}\n  thrown in /tmp/tmpfg490xpj.php\
    \ on line 66\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $letters = explode(\" \",$test);\n\
    \  $counters = array();\n  foreach ($letters as $letter) {\n    if (!array_key_exists($letter,\
    \ $counters)) {\n      $counters[$letter] = 1;\n    } else {\n      $counters[$letter]++;\n\
    \    }\n  }\n  arsort($counters);\n  $max = current($counters);\n  foreach ($counters\
    \ as $key => $value) {\n    if ($value != $max) {\n      unset($counters[$key]);\n\
    \    }\n  }\n  return $counters;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0y1_72j2.php:47\n\
    Stack trace:\n#0 /tmp/tmp0y1_72j2.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp0y1_72j2.php\
    \ on line 47\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $array = explode(\" \", $test);\n\
    \    $histogram_array = array();\n    foreach ($array as $key => $value) {\n \
    \       $histogram_array[$value] = 0;\n    }\n    foreach ($array as $key => $value)\
    \ {\n        $histogram_array[$value] += 1;\n    }\n    $maximum = max($histogram_array);\n\
    \    $array_keys = array_keys($histogram_array, $maximum);\n    return array_fill_keys($array_keys,\
    \ $maximum);\n}\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjxeqzvgw.php:40\n\
    Stack trace:\n#0 /tmp/tmpjxeqzvgw.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpjxeqzvgw.php\
    \ on line 40\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $output = array();\n  $input =\
    \ str_split($test);\n  $unique_characters = array_unique($input);\n  foreach ($unique_characters\
    \ as $character) {\n    $count = 0;\n    for ($i = 0; $i < sizeof($input); $i++)\
    \ {\n      if ($input[$i] == $character) {\n        $count++;\n      }\n    }\n\
    \    $output[$character] = $count;\n  }\n  return $output;\n}\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxx3gywlr.php:36\n\
    Stack trace:\n#0 /tmp/tmpxx3gywlr.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpxx3gywlr.php\
    \ on line 36\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $words = explode(\" \", $test);\n\
    \    $histo = array();\n    foreach ($words as $word) {\n        if (array_key_exists($word,\
    \ $histo)) {\n            $histo[$word] += 1;\n        } else {\n            $histo[$word]\
    \ = 1;\n        }\n    }\n    return $histo;\n}\n\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp97eb0jv8.php:35\n\
    Stack trace:\n#0 /tmp/tmp97eb0jv8.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp97eb0jv8.php\
    \ on line 35\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $words = explode(\" \", $test);\n\
    \    $histogram = array();\n    foreach ($words as $word) {\n        if (isset($histogram[$word]))\
    \ {\n            $histogram[$word] += 1;\n        } else {\n            $histogram[$word]\
    \ = 1;\n        }\n    }\n    arsort($histogram);\n    $max = $histogram[key($histogram)];\n\
    \    $histogram = array_filter($histogram, function($a) use ($max) {\n       \
    \ return $a == $max;\n    });\n    return $histogram;\n}\n\n$tests = array(\"\
    a b c\", \"a b b a\", \"a b c a b\", \"b b b b a\", \"\");\nforeach ($tests as\
    \ $test) {\n    echo \"$test\\n\";\n    print_r(histogram($test));\n    echo \"\
    \\n\";\n}\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2,\
    \ \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "a b c\nArray\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n\na b b a\n\
    Array\n(\n    [a] => 2\n    [b] => 2\n)\n\na b c a b\nArray\n(\n    [a] => 2\n\
    \    [b] => 2\n)\n\nb b b b a\nArray\n(\n    [b] => 4\n)\n\n\nArray\n(\n    []\
    \ => 1\n)\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa0dm7fpx.php:51\n\
    Stack trace:\n#0 /tmp/tmpa0dm7fpx.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpa0dm7fpx.php\
    \ on line 51\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $letters = str_split($test);\n\
    \    $counts = array_count_values($letters);\n    $max_count = max($counts);\n\
    \    $result = array();\n    foreach ($counts as $letter => $count) {\n      \
    \  if ($count == $max_count) {\n            $result[$letter] = $count;\n     \
    \   }\n    }\n    return $result;\n}\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcrjvz1c1.php:33\n\
    Stack trace:\n#0 /tmp/tmpcrjvz1c1.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpcrjvz1c1.php\
    \ on line 33\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n\t$char_array = explode(\" \", $test);\n\
    \t$char_array = array_count_values($char_array);\n\t$histogram = array();\n\t\
    $histogram[0] = 0;\n\tforeach ($char_array as $letter => $count) {\n\t\tif ($count\
    \ == $histogram[0]) {\n\t\t\t$histogram[$letter] = $count;\n\t\t} elseif ($count\
    \ > $histogram[0]) {\n\t\t\t$histogram = array();\n\t\t\t$histogram[$letter] =\
    \ $count;\n\t\t\t$histogram[0] = $count;\n\t\t}\n\t}\n\treturn $histogram;\n}\n\
    echo \"<h1>Histogram</h1>\";\n$test_array = array(\"a b c\", \"a b b a\", \"a\
    \ b c a b\", \"b b b b a\", \"\");\nforeach ($test_array as $test) {\n\techo $test.\"\
    :<br>\";\n\tprint_r(histogram($test));\n\techo \"<br>\";\n}\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<h1>Histogram</h1>a b c:<br>Array\n(\n    [a] => 1\n    [0] => 1\n    [b]\
    \ => 1\n    [c] => 1\n)\n<br>a b b a:<br>Array\n(\n    [a] => 2\n    [0] => 2\n\
    \    [b] => 2\n)\n<br>a b c a b:<br>Array\n(\n    [a] => 2\n    [0] => 2\n   \
    \ [b] => 2\n)\n<br>b b b b a:<br>Array\n(\n    [b] => 4\n    [0] => 4\n)\n<br>:<br>Array\n\
    (\n    [] => 1\n    [0] => 1\n)\n<br>\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp0b79kgwj.php:44\nStack trace:\n#0 /tmp/tmp0b79kgwj.php(54): test()\n\
    #1 {main}\n  thrown in /tmp/tmp0b79kgwj.php on line 44\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n\t$array = explode(\" \", $test);\n\
    \t$inArray = array_count_values($array);\n\tasort($inArray);\n\t$reversedArray\
    \ = array_reverse($inArray);\n\t$max = max($reversedArray);\n\treturn (array_keys($reversedArray,\
    \ $max));\n}\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqi0g6p11.php:30\n\
    Stack trace:\n#0 /tmp/tmpqi0g6p11.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpqi0g6p11.php\
    \ on line 30\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $array = explode(\" \", $test);\n\
    \  $keys = array_unique($array);\n  $result = array();\n  foreach ($keys as $key)\
    \ {\n    $result[$key] = 0;\n  }\n  foreach ($array as $key) {\n    $result[$key]\
    \ += 1;\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1aq02n71.php:35\n\
    Stack trace:\n#0 /tmp/tmp1aq02n71.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp1aq02n71.php\
    \ on line 35\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n\t$array = explode(\" \", $test);\n\
    \t$answer = array();\n\tforeach ($array as $element) {\n\t\t$answer[$element]\
    \ = 0;\n\t}\n\tforeach ($array as $element) {\n\t\t$answer[$element]++;\n\t}\n\
    \t$max = 0;\n\tforeach ($answer as $element) {\n\t\tif ($element > $max) {\n\t\
    \t\t$max = $element;\n\t\t}\n\t}\n\t$final = array();\n\tforeach ($answer as $key\
    \ => $value) {\n\t\tif ($value == $max) {\n\t\t\t$final[$key] = $value;\n\t\t\
    }\n\t}\n\treturn $final;\n}\n\necho \"Histogram for 'a b c' (1, 1, 1)\";\nprint_r(histogram(\"\
    a b c\"));\necho \"<br />\";\necho \"Histogram for 'a b b a' (2, 2)\";\nprint_r(histogram(\"\
    a b b a\"));\necho \"<br />\";\necho \"Histogram for 'a b c a b' (2, 2)\";\nprint_r(histogram(\"\
    a b c a b\"));\necho \"<br />\";\necho \"Histogram for 'b b b b a' (4)\";\nprint_r(histogram(\"\
    b b b b a\"));\necho \"<br />\";\necho \"Histogram for '' ()\";\nprint_r(histogram(\"\
    \"));\necho \"<br />\";\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Histogram for 'a b c' (1, 1, 1)Array\n(\n    [a] => 1\n    [b] => 1\n \
    \   [c] => 1\n)\n<br />Histogram for 'a b b a' (2, 2)Array\n(\n    [a] => 2\n\
    \    [b] => 2\n)\n<br />Histogram for 'a b c a b' (2, 2)Array\n(\n    [a] => 2\n\
    \    [b] => 2\n)\n<br />Histogram for 'b b b b a' (4)Array\n(\n    [b] => 4\n\
    )\n<br />Histogram for '' ()Array\n(\n    [] => 1\n)\n<br />\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpd_wj0k4l.php:67\nStack trace:\n#0 /tmp/tmpd_wj0k4l.php(71):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpd_wj0k4l.php on line 67\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $letters = explode(\" \", $test);\n\
    \  $letters2 = array_count_values($letters);\n  $max = max($letters2);\n  $result\
    \ = array();\n  foreach ($letters2 as $letter => $count) {\n    if ($count ==\
    \ $max) {\n      $result[$letter] = $count;\n    }\n  }\n  return $result;\n}\n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp29o_pbzc.php:39\n\
    Stack trace:\n#0 /tmp/tmp29o_pbzc.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp29o_pbzc.php\
    \ on line 39\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $hist = array();\n    foreach\
    \ (explode(\" \", $test) as $str) {\n        if (!array_key_exists($str, $hist))\
    \ {\n            $hist[$str] = 1;\n        } else {\n            $hist[$str]++;\n\
    \        }\n    }\n    $max = array_keys($hist, max($hist));\n    foreach (array_keys($hist)\
    \ as $key) {\n        if (!in_array($key, $max)) {\n            unset($hist[$key]);\n\
    \        }\n    }\n    return $hist;\n}\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpknb83yji.php:44\n\
    Stack trace:\n#0 /tmp/tmpknb83yji.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpknb83yji.php\
    \ on line 44\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  // Split the string into an array\
    \ by space\n  $testArr = explode(\" \", $test);\n  // Loop through the array and\
    \ count each instance of each letter in the array\n  // Put those counts into\
    \ a new array\n  // Finally, return an array of all the letters and their counts.\n\
    \  $newArr = array();\n  $max = 0;\n  foreach ($testArr as $char) {\n    if (isset($newArr[$char]))\
    \ {\n      $newArr[$char] += 1;\n    } else {\n      $newArr[$char] = 1;\n   \
    \ }\n    if ($newArr[$char] > $max) {\n      $max = $newArr[$char];\n    }\n \
    \ }\n  foreach ($newArr as $key => $count) {\n    if ($count < $max) {\n     \
    \ unset($newArr[$key]);\n    }\n  }\n  return $newArr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpadihbaxa.php:53\n\
    Stack trace:\n#0 /tmp/tmpadihbaxa.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpadihbaxa.php\
    \ on line 53\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n\t$array = str_split($test);\n\t\
    $unique = array_unique($array);\n\t$unique = array_values($unique);\n\t$newarray\
    \ = array();\n\t$longest = 0;\n\t$longestarray = array();\n\tfor ($i = 0; $i <\
    \ count($unique); $i++) {\n\t\t$count = 0;\n\t\tforeach ($array as $y) {\n\t\t\
    \tif ($unique[$i] == $y) {\n\t\t\t\t$count++;\n\t\t\t}\n\t\t}\n\t\t$newarray[$unique[$i]]\
    \ = $count;\n\t\tif ($count >= $longest) {\n\t\t\t$longest = $count;\n\t\t\t$longestarray\
    \ = array($unique[$i] => $count);\n\t\t}\n\t}\n\treturn $longestarray;\n}\nprint_r(histogram(\"\
    a b c\"));\necho \"\\n\";\nprint_r(histogram(\"a b b a\"));\necho \"\\n\";\nprint_r(histogram(\"\
    a b c a b\"));\necho \"\\n\";\nprint_r(histogram(\"b b b b a\"));\necho \"\\n\"\
    ;\nprint_r(histogram(\"\"));\necho \"\\n\";\nfunction candidate(...$args) {\n\
    \    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [ ] => 2\n)\n\nArray\n(\n    [ ] => 3\n)\n\nArray\n(\n  \
    \  [ ] => 4\n)\n\nArray\n(\n    [ ] => 4\n)\n\nArray\n(\n    [] => 1\n)\n\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpun27787e.php:53\nStack\
    \ trace:\n#0 /tmp/tmpun27787e.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpun27787e.php\
    \ on line 53\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $arr = explode(\" \", $test);\n\
    \    $letterCount = array();\n    foreach ($arr as $letter) {\n        if (isset($letterCount[$letter]))\
    \ {\n            $letterCount[$letter]++;\n        } else {\n            $letterCount[$letter]\
    \ = 1;\n        }\n    }\n    $maxCount = max($letterCount);\n    $result = array();\n\
    \    foreach ($letterCount as $letter => $count) {\n        if ($count == $maxCount)\
    \ {\n            $result[$letter] = $count;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5_fl4bcq.php:47\n\
    Stack trace:\n#0 /tmp/tmp5_fl4bcq.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp5_fl4bcq.php\
    \ on line 47\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $histogram = [];\n    $letters\
    \ = explode(\" \", $test);\n    foreach ($letters as $letter) {\n        if (!array_key_exists($letter,\
    \ $histogram)) {\n            $histogram[$letter] = 1;\n        } else {\n   \
    \         $histogram[$letter]++;\n        }\n    }\n    // var_dump($histogram);\n\
    \    $highest_count = 0;\n    $most_frequent = [];\n    foreach ($histogram as\
    \ $letter => $count) {\n        if ($count == $highest_count) {\n            $most_frequent[$letter]\
    \ = $count;\n        } elseif ($count > $highest_count) {\n            $highest_count\
    \ = $count;\n            $most_frequent = [];\n            $most_frequent[$letter]\
    \ = $count;\n        }\n    }\n    return $most_frequent;\n}\n\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6ltdu7tp.php:52\n\
    Stack trace:\n#0 /tmp/tmp6ltdu7tp.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp6ltdu7tp.php\
    \ on line 52\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n\t$array = str_word_count($test,\
    \ 1);\n\t$array = array_count_values($array);\n\t\n\t$max = array_search(max($array),\
    \ $array);\n\t\n\t$newArray = array();\n\tforeach ($array as $key => $value) {\n\
    \t\tif ($value == $array[$max]) {\n\t\t\t$newArray[$key] = $value;\n\t\t}\n\t\
    }\n\treturn $newArray;\n}\necho \"<pre>\";\nprint_r(histogram(\"a b c\"));\necho\
    \ \"</pre>\";\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n</pre>\nFatal\
    \ error: Uncaught ValueError: max(): Argument #1 ($value) must contain at least\
    \ one element in /tmp/tmpp4ua_16x.php:20\nStack trace:\n#0 /tmp/tmpp4ua_16x.php(20):\
    \ max(Array)\n#1 /tmp/tmpp4ua_16x.php(34): histogram('')\n#2 /tmp/tmpp4ua_16x.php(44):\
    \ candidate('')\n#3 /tmp/tmpp4ua_16x.php(48): test()\n#4 {main}\n  thrown in /tmp/tmpp4ua_16x.php\
    \ on line 20\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $letter = array();\n    $test\
    \ = str_split($test);\n    foreach ($test as $value) {\n        if (in_array($value,\
    \ $letter)) {\n            $key = array_search($value, $letter);\n           \
    \ $letter[$key + 1]++;\n        } else {\n            $letter[] = $value;\n  \
    \          $letter[] = 1;\n        }\n    }\n    $letter_count = count($letter);\n\
    \    $count = 0;\n    for ($i = 0; $i < $letter_count; $i += 2) {\n        if\
    \ ($letter[$i + 1] > $count) {\n            $result = array($letter[$i] => $letter[$i\
    \ + 1]);\n            $count = $letter[$i + 1];\n        } elseif ($letter[$i\
    \ + 1] == $count) {\n            $result[$letter[$i]] = $letter[$i + 1];\n   \
    \     }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n   \
    \ return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpijxkvf5o.php:46\n\
    Stack trace:\n#0 /tmp/tmpijxkvf5o.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpijxkvf5o.php\
    \ on line 46\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $histogram = [];\n    $letters\
    \ = explode(\" \", $test);\n    foreach ($letters as $letter) {\n        if (!isset($histogram[$letter]))\
    \ {\n            $histogram[$letter] = 1;\n        } else {\n            $histogram[$letter]\
    \ += 1;\n        }\n    }\n    $result = [];\n    $max = max($histogram);\n  \
    \  foreach ($histogram as $key => $value) {\n        if ($value == $max) {\n \
    \           $result[$key] = $value;\n        }\n    }\n    return $result;\n}\n\
    \n$test = \"a b c\";\nprint_r(histogram($test));\n\n$test = \"a b b a\";\nprint_r(histogram($test));\n\
    \n$test = \"a b c a b\";\nprint_r(histogram($test));\n\n$test = \"b b b b a\"\
    ;\nprint_r(histogram($test));\n\n$test = \"\";\nprint_r(histogram($test));\nfunction\
    \ candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" => 2)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a b\") !==\
    \ array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\" => 1,\
    \ \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !== array(\"\
    b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"r t\
    \ g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp9hgqgfq6.php:61\nStack trace:\n#0 /tmp/tmp9hgqgfq6.php(65):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp9hgqgfq6.php on line 61\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  // split the string by space and\
    \ create an array\n  $split = explode(\" \", $test);\n  // create a new array\
    \ to hold the results of the letter counts\n  $results = array();\n  // loop through\
    \ the array of characters\n  foreach ($split as $char) {\n    // if the char exists\
    \ in the results array\n    if (array_key_exists($char, $results)) {\n      //\
    \ increment the count for that char\n      $results[$char]++;\n    } else {\n\
    \      // otherwise set the initial count to 1\n      $results[$char] = 1;\n \
    \   }\n  }\n  // return the new results array\n  return $results;\n}\n\nfunction\
    \ candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" => 2)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a b\") !==\
    \ array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\" => 1,\
    \ \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !== array(\"\
    b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"r t\
    \ g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe9mrhmqz.php:42\n\
    Stack trace:\n#0 /tmp/tmpe9mrhmqz.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpe9mrhmqz.php\
    \ on line 42\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $array = explode(\" \", $test);\n\
    \  $occurrences = array();\n  foreach ($array as $letter) {\n    if (array_key_exists($letter,\
    \ $occurrences)) {\n      $occurrences[$letter]++;\n    } else {\n      $occurrences[$letter]\
    \ = 1;\n    }\n  }\n  $maxValue = max($occurrences);\n  $result = array();\n \
    \ foreach ($occurrences as $key => $value) {\n    if ($value == $maxValue) {\n\
    \      $result[$key] = $value;\n    }\n  }\n  return $result;\n}\necho \"<pre>\"\
    ;\nprint_r(histogram(\"a b c\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"\
    a b b a\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"a b c a b\"\
    ));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"b b b b a\"));\necho\
    \ \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"\"));\necho \"</pre>\";\n\
    echo \"<hr>\";\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n</pre><pre>Array\n\
    (\n    [a] => 2\n    [b] => 2\n)\n</pre><pre>Array\n(\n    [a] => 2\n    [b] =>\
    \ 2\n)\n</pre><pre>Array\n(\n    [b] => 4\n)\n</pre><pre>Array\n(\n    [] => 1\n\
    )\n</pre><hr>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgyysugvf.php:62\n\
    Stack trace:\n#0 /tmp/tmpgyysugvf.php(66): test()\n#1 {main}\n  thrown in /tmp/tmpgyysugvf.php\
    \ on line 62\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $count = array();\n  $max_count\
    \ = 0;\n  $max_count_keys = array();\n  $counts = array();\n  foreach (explode(\"\
    \ \", $test) as $i) {\n    if (!isset($count[$i])) {\n      $count[$i] = 0;\n\
    \    }\n    $count[$i]++;\n    if ($count[$i] == $max_count) {\n      $max_count_keys[]\
    \ = $i;\n    } else if ($count[$i] > $max_count) {\n      $max_count = $count[$i];\n\
    \      $max_count_keys = array($i);\n    }\n  }\n  foreach ($max_count_keys as\
    \ $key) {\n    $counts[$key] = $max_count;\n  }\n  return $counts;\n}\nfunction\
    \ candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" => 2)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a b\") !==\
    \ array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\" => 1,\
    \ \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !== array(\"\
    b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"r t\
    \ g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4k25rtax.php:43\n\
    Stack trace:\n#0 /tmp/tmp4k25rtax.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp4k25rtax.php\
    \ on line 43\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $results = array();\n  $letters\
    \ = array();\n  $numbers = array();\n  $test = explode(\" \", $test);\n  foreach\
    \ ($test as $char) {\n    array_push($letters, $char);\n  }\n  $letters = array_count_values($letters);\n\
    \  foreach ($letters as $num => $key) {\n    array_push($numbers, $key);\n  }\n\
    \  $max = max($numbers);\n  foreach ($letters as $key => $value) {\n    if ($value\
    \ === $max) {\n      $results[$key] = $value;\n    }\n  }\n  return $results;\n\
    }\nprint_r(histogram(\"a b c\"));\nprint_r(histogram(\"a b b a\"));\nprint_r(histogram(\"\
    a b c a b\"));\nprint_r(histogram(\"b b b b a\"));\nprint_r(histogram(\"\"));\n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpycx4yfts.php:52\nStack trace:\n#0 /tmp/tmpycx4yfts.php(56):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpycx4yfts.php on line 52\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $array_test = explode(\" \", $test);\n\
    \  $final_array = array();\n  foreach ($array_test as $key => $value) {\n    if\
    \ (!array_key_exists($value, $final_array)) {\n      $final_array[$value] = 1;\n\
    \    } else {\n      $final_array[$value]++;\n    }\n  }\n  $count_array = array_count_values($final_array);\n\
    \  $max_count = max($count_array);\n  $array_keys = array_keys($final_array);\n\
    \  $final_histogram = array();\n  foreach ($array_keys as $key => $value) {\n\
    \    if ($final_array[$value] == $max_count) {\n      $final_histogram[$value]\
    \ = $max_count;\n    }\n  }\n  return $final_histogram;\n}\n\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf85wcr34.php:45\n\
    Stack trace:\n#0 /tmp/tmpf85wcr34.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpf85wcr34.php\
    \ on line 45\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $letters = array();\n    $test\
    \ = str_split($test);\n    $count = array_count_values($test);\n    $highest =\
    \ max($count);\n    foreach ($count as $letter => $count) {\n        if ($count\
    \ == $highest) {\n            $letters[$letter] = $count;\n        }\n    }\n\
    \    return $letters;\n}\n\n$histogram_tests = array(\n    \"a b c\" => array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1),\n    \"a b b a\" => array(\"a\" => 2, \"b\"\
    \ => 2),\n    \"a b c a b\" => array(\"a\" => 2, \"b\" => 2),\n    \"b b b b a\"\
    \ => array(\"b\" => 4),\n    \"\" => array()\n);\n\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnrjrqv3b.php:42\n\
    Stack trace:\n#0 /tmp/tmpnrjrqv3b.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpnrjrqv3b.php\
    \ on line 42\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $array = explode(\" \", $test);\n\
    \  $histo = array();\n  foreach ($array as $key => $value) {\n    if (isset($histo[$value]))\
    \ {\n      $histo[$value] += 1;\n    } else {\n      $histo[$value] = 1;\n   \
    \ }\n  }\n  $max = max($histo);\n  $final = array();\n  foreach ($histo as $key\
    \ => $value) {\n    if ($value == $max) {\n      $final[$key] = $value;\n    }\n\
    \  }\n  return $final;\n}\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps4vy5izb.php:46\n\
    Stack trace:\n#0 /tmp/tmps4vy5izb.php(50): test()\n#1 {main}\n  thrown in /tmp/tmps4vy5izb.php\
    \ on line 46\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $testArr = explode(\" \", $test);\n\
    \  $hashArr = array();\n  foreach ($testArr as $index) {\n    if (!array_key_exists($index,\
    \ $hashArr)) {\n      $hashArr[$index] = 1;\n    } else {\n      $hashArr[$index]\
    \ += 1;\n    }\n  }\n  return $hashArr;\n}\n\n$testArr = histogram(\"a b c\");\n\
    print_r($testArr);\n$testArr = histogram(\"a b b a\");\nprint_r($testArr);\n$testArr\
    \ = histogram(\"a b c a b\");\nprint_r($testArr);\n$testArr = histogram(\"b b\
    \ b b a\");\nprint_r($testArr);\n$testArr = histogram(\"\");\nprint_r($testArr);\n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n    [c] => 1\n\
    )\nArray\n(\n    [b] => 4\n    [a] => 1\n)\nArray\n(\n    [] => 1\n)\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmp69gb7xtx.php:45\nStack trace:\n\
    #0 /tmp/tmp69gb7xtx.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp69gb7xtx.php\
    \ on line 45\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n\t$input = explode(\" \", $test);\n\
    \t$count = array_count_values($input);\n\tarsort($count);\n\t$max = current($count);\n\
    \t$output = array();\n\tforeach ($count as $key => $value) {\n\t\tif ($value ==\
    \ $max) {\n\t\t\t$output[$key] = $value;\n\t\t}\n\t}\n\treturn $output;\n}\n\n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfekuns5e.php:41\n\
    Stack trace:\n#0 /tmp/tmpfekuns5e.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpfekuns5e.php\
    \ on line 41\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $arr = [];\n    $arr = explode(\"\
    \ \", $test);\n    $counts = array_count_values($arr);\n    arsort($counts);\n\
    \    $b = current($counts);\n    return $b;\n}\nprint_r(histogram(\"a b c\"));\n\
    echo \"\\n\";\nprint_r(histogram(\"a b b a\"));\necho \"\\n\";\nprint_r(histogram(\"\
    a b c a b\"));\necho \"\\n\";\nprint_r(histogram(\"b b b b a\"));\necho \"\\n\"\
    ;\nprint_r(histogram(\"\"));\necho \"\\n\";\nfunction candidate(...$args) {\n\
    \    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n2\n2\n4\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzuzt757u.php:39\n\
    Stack trace:\n#0 /tmp/tmpzuzt757u.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpzuzt757u.php\
    \ on line 39\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $testArray = explode(\" \", $test);\n\
    \  $newArray = array();\n  foreach ($testArray as $val) {\n    if (isset($newArray[$val]))\
    \ {\n      $newArray[$val]++;\n    } else {\n      $newArray[$val] = 1;\n    }\n\
    \  }\n  $highest = max($newArray);\n  return array_filter($newArray, function($val)\
    \ use ($highest) {\n    return $val == $highest;\n  });\n}\necho \"Testing histogram():\
    \ \";\n$expected = array(\"a\" => 2, \"b\" => 2);\n$result = histogram(\"a b c\
    \ a b\");\nif ($expected === $result) {\n  echo \"OK!\";\n} else {\n  echo \"\
    FAIL!\";\n}\necho PHP_EOL;\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Testing histogram(): OK!\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpzy4p_3w6.php:51\nStack trace:\n#0 /tmp/tmpzy4p_3w6.php(55): test()\n\
    #1 {main}\n  thrown in /tmp/tmpzy4p_3w6.php on line 51\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $letters = explode(\" \",$test);\n\
    \  $counts = array_count_values($letters);\n  arsort($counts);\n  if(count($counts)\
    \ == 0){\n    return [];\n  }\n  $max_count = array_values($counts)[0];\n  $max_letters\
    \ = array_keys($counts, $max_count);\n  $result = [];\n  foreach($max_letters\
    \ as $letter){\n    $result[$letter] = $max_count;\n  }\n  return $result;\n}\n\
    \necho \" a b c \\n\";\nprint_r(histogram(\"a b c\"));\necho \"a b b a \\n\";\n\
    print_r(histogram(\"a b b a\"));\necho \"a b c a b \\n\";\nprint_r(histogram(\"\
    a b c a b\"));\necho \"b b b b a \\n\";\nprint_r(histogram(\"b b b b a\"));\n\
    echo \" \\n\";\nprint_r(histogram(\"\"));\n\nfunction candidate(...$args) {\n\
    \    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: " a b c \nArray\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\na b b a\
    \ \nArray\n(\n    [a] => 2\n    [b] => 2\n)\na b c a b \nArray\n(\n    [a] =>\
    \ 2\n    [b] => 2\n)\nb b b b a \nArray\n(\n    [b] => 4\n)\n \nArray\n(\n   \
    \ [] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj8ykofi0.php:54\n\
    Stack trace:\n#0 /tmp/tmpj8ykofi0.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpj8ykofi0.php\
    \ on line 54\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $array = explode(\" \", $test);\n\
    \  $amount = array_count_values($array);\n  arsort($amount);\n  $maxValue = max($amount);\n\
    \  $maxKey = array_search($maxValue, $amount);\n  $result = array($maxKey => $maxValue);\n\
    \  $arrayKey = array_keys($amount);\n  foreach ($arrayKey as $key) {\n    if ($amount[$key]\
    \ == $maxValue && $key != $maxKey) {\n      $result[$key] = $maxValue;\n    }\n\
    \  }\n  return $result;\n}\n\necho '<pre>';\nprint_r(histogram(\"a b c\"));\n\
    echo '</pre>';\necho '<pre>';\nprint_r(histogram(\"a b b a\"));\necho '</pre>';\n\
    echo '<pre>';\nprint_r(histogram(\"a b c a b\"));\necho '</pre>';\necho '<pre>';\n\
    print_r(histogram(\"b b b b a\"));\necho '</pre>';\necho '<pre>';\nprint_r(histogram(\"\
    \"));\necho '</pre>';\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n</pre><pre>Array\n\
    (\n    [a] => 2\n    [b] => 2\n)\n</pre><pre>Array\n(\n    [a] => 2\n    [b] =>\
    \ 2\n)\n</pre><pre>Array\n(\n    [b] => 4\n)\n</pre><pre>Array\n(\n    [] => 1\n\
    )\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdqis1evu.php:58\n\
    Stack trace:\n#0 /tmp/tmpdqis1evu.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpdqis1evu.php\
    \ on line 58\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $letters = explode(\" \", $test);\n\
    \    $letters = array_count_values($letters);\n    asort($letters);\n    $most\
    \ = array_slice($letters, -1, 1, true);\n    foreach ($letters as $letter => $count)\
    \ {\n        if ($count !== key($most)) {\n            unset($letters[$letter]);\n\
    \        }\n    }\n    return $letters;\n}\nfunction candidate(...$args) {\n \
    \   return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzlu5eti0.php:33\n\
    Stack trace:\n#0 /tmp/tmpzlu5eti0.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpzlu5eti0.php\
    \ on line 33\n"
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    // Implement your solution here\n\
    \t$test = trim($test);\n\tif ($test == \"\") {\n\t\treturn array();\n\t}\n\t\n\
    \t$temp = explode(\" \", $test);\n\t$temp2 = array_count_values($temp);\n\t$temp3\
    \ = array_keys($temp2, max($temp2));\n\t$result = array();\n\t\n\tforeach ($temp3\
    \ as $key) {\n\t\t$result[$key] = $temp2[$key];\n\t}\n\t\n\treturn $result;\n\
    }\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $results = [];\n  $duplicates\
    \ = [];\n  $counts = [];\n  $letters = explode(\" \", $test);\n  foreach ($letters\
    \ as $letter) {\n    if (in_array($letter, $results)) {\n      $counts[$letter]++;\n\
    \    } else {\n      $results[] = $letter;\n      $counts[$letter] = 1;\n    }\n\
    \  }\n  $maxCount = max($counts);\n  $duplicates = array_keys($counts, $maxCount);\n\
    \  return array_fill_keys($duplicates, $maxCount);\n}\n$test = \"a b c\";\nprint_r(histogram($test));\n\
    print_r(PHP_EOL);\n$test = \"a b b a\";\nprint_r(histogram($test));\nprint_r(PHP_EOL);\n\
    $test = \"a b c a b\";\nprint_r(histogram($test));\nprint_r(PHP_EOL);\n$test =\
    \ \"b b b b a\";\nprint_r(histogram($test));\nprint_r(PHP_EOL);\n$test = \"\"\
    ;\nprint_r(histogram($test));\nprint_r(PHP_EOL);\n$test = \"a b b b b a\";\nprint_r(histogram($test));\n\
    print_r(PHP_EOL);\n$test = \"a b b b b a b\";\nprint_r(histogram($test));\nprint_r(PHP_EOL);\n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n\nArray\n(\n   \
    \ [a] => 2\n    [b] => 2\n)\n\nArray\n(\n    [a] => 2\n    [b] => 2\n)\n\nArray\n\
    (\n    [b] => 4\n)\n\nArray\n(\n    [] => 1\n)\n\nArray\n(\n    [b] => 4\n)\n\n\
    Array\n(\n    [b] => 5\n)\n\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpse0v4snq.php:65\nStack trace:\n#0 /tmp/tmpse0v4snq.php(69): test()\n\
    #1 {main}\n  thrown in /tmp/tmpse0v4snq.php on line 65\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    //Create a new array which splits\
    \ the initial string into individual elements\n    $words = str_split($test);\n\
    \    $histogram = array();\n    //A For loop which goes through each element of\
    \ the array \n    //One by one, checks if the element is already in the histogram\
    \ array,\n    //if it is, then the corresponding value increases by 1, else it\
    \ adds\n    //the element and sets the value to 1.\n    for ($i = 0; $i < count($words);\
    \ $i++) {\n        if (array_key_exists($words[$i], $histogram)) {\n         \
    \   $histogram[$words[$i]]++;\n        } else {\n            $histogram[$words[$i]]\
    \ = 1;\n        }\n    }\n    //Sorting array elements by values.\n    arsort($histogram);\n\
    \    return $histogram;\n}\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4rg1c8qt.php:40\n\
    Stack trace:\n#0 /tmp/tmp4rg1c8qt.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp4rg1c8qt.php\
    \ on line 40\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $array = str_split($test);\n\
    \    $count = array_count_values($array);\n    $count = array_flip($count);\n\
    \    $max_value = max($count);\n    $count = array_flip($count);\n    $count =\
    \ array_intersect_key($count, array_flip(array_keys($count, $max_value)));\n \
    \   return $count;\n}\nprint_r(histogram(\"a b c\"));\nprint_r(histogram(\"a b\
    \ b a\"));\nprint_r(histogram(\"a b c a b\"));\nprint_r(histogram(\"b b b b a\"\
    ));\nprint_r(histogram(\"\"));\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmphyw2dq2f.php:35\nStack trace:\n\
    #0 /tmp/tmphyw2dq2f.php(45): test()\n#1 {main}\n  thrown in /tmp/tmphyw2dq2f.php\
    \ on line 35\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $output = array();\n    foreach ($test as $value) {\n        if (!isset($output[$value]))\
    \ {\n            $output[$value] = 1;\n        } else {\n            $output[$value]++;\n\
    \        }\n    }\n    $maxCount = max($output);\n    foreach ($output as $key\
    \ => $value) {\n        if ($value < $maxCount) {\n            unset($output[$key]);\n\
    \        }\n    }\n    return $output;\n}\n$test = \"a b c\";\necho \"histogram(\\\
    \"$test\\\")\\n\";\nvar_dump(histogram($test));\necho \"histogram(\\\"a b b a\\\
    \")\\n\";\nvar_dump(histogram(\"a b b a\"));\necho \"histogram(\\\"a b c a b\\\
    \")\\n\";\nvar_dump(histogram(\"a b c a b\"));\necho \"histogram(\\\"b b b b a\\\
    \")\\n\";\nvar_dump(histogram(\"b b b b a\"));\necho \"histogram(\\\"\\\")\\n\"\
    ;\nvar_dump(histogram(\"\"));\necho \"histogram(\\\"a b c a b z z z z\\\")\\n\"\
    ;\nvar_dump(histogram(\"a b c a b z z z z\"));\necho \"histogram(\\\"a b c d e\
    \ f g h i j k l m n o p q r s t u v w x y z\\\")\\n\";\nvar_dump(histogram(\"\
    a b c d e f g h i j k l m n o p q r s t u v w x y z\"));\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "histogram(\"a b c\")\narray(3) {\n  [\"a\"]=>\n  int(1)\n  [\"b\"]=>\n\
    \  int(1)\n  [\"c\"]=>\n  int(1)\n}\nhistogram(\"a b b a\")\narray(2) {\n  [\"\
    a\"]=>\n  int(2)\n  [\"b\"]=>\n  int(2)\n}\nhistogram(\"a b c a b\")\narray(2)\
    \ {\n  [\"a\"]=>\n  int(2)\n  [\"b\"]=>\n  int(2)\n}\nhistogram(\"b b b b a\"\
    )\narray(1) {\n  [\"b\"]=>\n  int(4)\n}\nhistogram(\"\")\narray(1) {\n  [\"\"\
    ]=>\n  int(1)\n}\nhistogram(\"a b c a b z z z z\")\narray(1) {\n  [\"z\"]=>\n\
    \  int(4)\n}\nhistogram(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\"\
    )\narray(26) {\n  [\"a\"]=>\n  int(1)\n  [\"b\"]=>\n  int(1)\n  [\"c\"]=>\n  int(1)\n\
    \  [\"d\"]=>\n  int(1)\n  [\"e\"]=>\n  int(1)\n  [\"f\"]=>\n  int(1)\n  [\"g\"\
    ]=>\n  int(1)\n  [\"h\"]=>\n  int(1)\n  [\"i\"]=>\n  int(1)\n  [\"j\"]=>\n  int(1)\n\
    \  [\"k\"]=>\n  int(1)\n  [\"l\"]=>\n  int(1)\n  [\"m\"]=>\n  int(1)\n  [\"n\"\
    ]=>\n  int(1)\n  [\"o\"]=>\n  int(1)\n  [\"p\"]=>\n  int(1)\n  [\"q\"]=>\n  int(1)\n\
    \  [\"r\"]=>\n  int(1)\n  [\"s\"]=>\n  int(1)\n  [\"t\"]=>\n  int(1)\n  [\"u\"\
    ]=>\n  int(1)\n  [\"v\"]=>\n  int(1)\n  [\"w\"]=>\n  int(1)\n  [\"x\"]=>\n  int(1)\n\
    \  [\"y\"]=>\n  int(1)\n  [\"z\"]=>\n  int(1)\n}\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpofv9xeof.php:60\nStack trace:\n#0 /tmp/tmpofv9xeof.php(64):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpofv9xeof.php on line 60\n"
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $result = [];\n    if (!empty($test))\
    \ {\n        $words = explode(\" \", $test);\n        $currentMax = 1;\n     \
    \   foreach ($words as $word) {\n            if (array_key_exists($word, $result))\
    \ {\n                $result[$word] += 1;\n                if ($result[$word]\
    \ > $currentMax) {\n                    $currentMax = $result[$word];\n      \
    \          }\n            } else {\n                $result[$word] = 1;\n    \
    \        }\n        }\n        $finalResult = [];\n        foreach ($result as\
    \ $key => $value) {\n            if ($value == $currentMax) {\n              \
    \  $finalResult[$key] = $value;\n            }\n        }\n        return $finalResult;\n\
    \    } else {\n        return $result;\n    }\n}\n\necho print_r(histogram(\"\
    a b c\")) . \"\\n\";\necho print_r(histogram(\"a b b a\")) . \"\\n\";\necho print_r(histogram(\"\
    a b c a b\")) . \"\\n\";\necho print_r(histogram(\"b b b b a\")) . \"\\n\";\n\
    echo print_r(histogram(\"\")) . \"\\n\";\nfunction candidate(...$args) {\n   \
    \ return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n1\nArray\n(\n  \
    \  [a] => 2\n    [b] => 2\n)\n1\nArray\n(\n    [a] => 2\n    [b] => 2\n)\n1\n\
    Array\n(\n    [b] => 4\n)\n1\nArray\n(\n)\n1\n"
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $arr = explode(\" \", $test);\n\
    \    $counter = 0;\n    $result = [];\n    $temp = [];\n    if ($arr[0] == \"\"\
    ) {\n        return [];\n    }\n    foreach ($arr as $item) {\n        if (!in_array($item,\
    \ $temp)) {\n            $temp[] = $item;\n            $result[$item] = 1;\n \
    \       } else {\n            $result[$item] = $result[$item] + 1;\n        }\n\
    \    }\n    foreach ($result as $key => $value) {\n        if ($value > $counter)\
    \ {\n            $counter = $value;\n        }\n    }\n    foreach ($result as\
    \ $key => $value) {\n        if ($value < $counter) {\n            unset($result[$key]);\n\
    \        }\n    }\n    return $result;\n}\n$test = \"a b b a\";\n$result = histogram($test);\n\
    echo json_encode($result);\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '{"a":2,"b":2}'
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $array = explode(\" \", $test);\n\
    \  $output = array();\n  foreach ($array as $i) {\n    if (array_key_exists($i,\
    \ $output)) {\n      $output[$i]++;\n    } else {\n      $output[$i] = 1;\n  \
    \  }\n  }\n  return $output;\n}\n$tests = array(\"a b c\", \"a b b a\", \"a b\
    \ c a b\", \"b b b b a\", \"\");\nforeach ($tests as $test) {\n  $output = histogram($test);\n\
    \  echo \"histogram(\\\"$test\\\") = \";\n  echo json_encode($output);\n  echo\
    \ \"\\n\";\n}\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "histogram(\"a b c\") = {\"a\":1,\"b\":1,\"c\":1}\nhistogram(\"a b b a\"\
    ) = {\"a\":2,\"b\":2}\nhistogram(\"a b c a b\") = {\"a\":2,\"b\":2,\"c\":1}\n\
    histogram(\"b b b b a\") = {\"b\":4,\"a\":1}\nhistogram(\"\") = {\"\":1}\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmp9o1921i7.php:42\nStack trace:\n\
    #0 /tmp/tmp9o1921i7.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp9o1921i7.php\
    \ on line 42\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $test = explode(\" \", $test);\n\
    \  $arr = array();\n  foreach ($test as $value) {\n    if (!isset($arr[$value]))\
    \ {\n      $arr[$value] = 1;\n    } else {\n      $arr[$value]++;\n    }\n  }\n\
    \  if ($arr) {\n    $max = max($arr);\n    return array_filter($arr, function($v)\
    \ use ($max) {\n      return $v == $max;\n    });\n  } else {\n    return array();\n\
    \  }\n}\n\nprint_r(histogram(\"a b c\"));\nprint_r(histogram(\"a b b a\"));\n\
    print_r(histogram(\"a b c a b\"));\nprint_r(histogram(\"b b b b a\"));\nprint_r(histogram(\"\
    \"));\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2,\
    \ \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpxr6wix1n.php:52\nStack trace:\n#0 /tmp/tmpxr6wix1n.php(56):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpxr6wix1n.php on line 52\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $words = explode(\" \", $test);\n\
    \  $array = array();\n  foreach ($words as $word) {\n    if (isset($array[$word]))\
    \ {\n      $array[$word] += 1;\n    } else {\n      $array[$word] = 1;\n    }\n\
    \  }\n  return $array;\n}\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpekcf8zaa.php:34\n\
    Stack trace:\n#0 /tmp/tmpekcf8zaa.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpekcf8zaa.php\
    \ on line 34\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n\n}\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmq0g01sk.php:24\n\
    Stack trace:\n#0 /tmp/tmpmq0g01sk.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpmq0g01sk.php\
    \ on line 24\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n\t$array = array();\n\t$split =\
    \ explode(\" \", $test);\n\tfor ($i = 0; $i < count($split); $i++) {\n\t\tif (array_key_exists($split[$i],\
    \ $array)) {\n\t\t\t$array[$split[$i]] += 1;\n\t\t} else {\n\t\t\t$array[$split[$i]]\
    \ = 1;\n\t\t}\n\t}\n\t$max = $array[0];\n\tfor ($i = 0; $i < count($array); $i++)\
    \ {\n\t\tif ($array[$i] > $max) {\n\t\t\t$max = $array[$i];\n\t\t}\n\t}\n\tfor\
    \ ($i = 0; $i < count($array); $i++) {\n\t\tif ($array[$i] !== $max) {\n\t\t\t\
    unset($array[$i]);\n\t\t}\n\t}\n\treturn $array;\n}\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmp85cfxg7m.php on line 26\n\n\
    Warning: Undefined array key 0 in /tmp/tmp85cfxg7m.php on line 28\n\nWarning:\
    \ Undefined array key 1 in /tmp/tmp85cfxg7m.php on line 28\n\nWarning: Undefined\
    \ array key 0 in /tmp/tmp85cfxg7m.php on line 33\n\nWarning: Undefined array key\
    \ 1 in /tmp/tmp85cfxg7m.php on line 33\n\nWarning: Undefined array key 0 in /tmp/tmp85cfxg7m.php\
    \ on line 26\n\nWarning: Undefined array key 0 in /tmp/tmp85cfxg7m.php on line\
    \ 28\n\nWarning: Undefined array key 1 in /tmp/tmp85cfxg7m.php on line 28\n\n\
    Warning: Undefined array key 2 in /tmp/tmp85cfxg7m.php on line 28\n\nWarning:\
    \ Undefined array key 0 in /tmp/tmp85cfxg7m.php on line 33\n\nWarning: Undefined\
    \ array key 1 in /tmp/tmp85cfxg7m.php on line 33\n\nWarning: Undefined array key\
    \ 2 in /tmp/tmp85cfxg7m.php on line 33\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp85cfxg7m.php:45\nStack trace:\n#0 /tmp/tmp85cfxg7m.php(54):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp85cfxg7m.php on line 45\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $exploded = explode(\" \", $test);\n\
    \    $newArray = array();\n    foreach ($exploded as $word) {\n        if (array_key_exists($word,\
    \ $newArray)) {\n            $newArray[$word]++;\n        } else {\n         \
    \   $newArray[$word] = 1;\n        }\n    }\n    $maxValue = max($newArray);\n\
    \    $maxKeys = array_keys($newArray, $maxValue);\n    $finalArray = array();\n\
    \    foreach ($maxKeys as $key) {\n        $finalArray[$key] = $maxValue;\n  \
    \  }\n    return $finalArray;\n}\necho \"\\n\";\nprint_r(histogram(\"a b c\"));\n\
    echo \"\\n\";\nprint_r(histogram(\"a b b a\"));\necho \"\\n\";\nprint_r(histogram(\"\
    a b c a b\"));\necho \"\\n\";\nprint_r(histogram(\"b b b b a\"));\necho \"\\n\"\
    ;\nprint_r(histogram(\"\"));\necho \"\\n\";\nfunction candidate(...$args) {\n\
    \    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nArray\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n\nArray\n(\n \
    \   [a] => 2\n    [b] => 2\n)\n\nArray\n(\n    [a] => 2\n    [b] => 2\n)\n\nArray\n\
    (\n    [b] => 4\n)\n\nArray\n(\n    [] => 1\n)\n\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp205dzwbv.php:56\nStack trace:\n#0 /tmp/tmp205dzwbv.php(60):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp205dzwbv.php on line 56\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $words = array_count_values(explode(\"\
    \ \", $test));\n  arsort($words);\n  $maxValue = current($words);\n  foreach ($words\
    \ as $word => $value) {\n    if ($value < $maxValue) {\n      unset($words[$word]);\n\
    \    }\n  }\n  return $words;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk3oa5a0m.php:39\n\
    Stack trace:\n#0 /tmp/tmpk3oa5a0m.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpk3oa5a0m.php\
    \ on line 39\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $output = [];\n    $array =\
    \ explode(\" \", $test);\n    $counts = array_count_values($array);\n    foreach\
    \ ($counts as $letter => $count) {\n        if ($count == max($counts)) {\n  \
    \          $output[$letter] = $count;\n        }\n    }\n    return $output;\n\
    }\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmzxxl3ra.php:39\n\
    Stack trace:\n#0 /tmp/tmpmzxxl3ra.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpmzxxl3ra.php\
    \ on line 39\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  // break string into array\n \
    \ $testArray = explode(\" \", $test);\n  // init an empty string\n  $sortedString\
    \ = \"\";\n  // create a counter array to hold the number of occurences of each\
    \ letter\n  $counterArray = array();\n  // Sort the array\n  sort($testArray);\n\
    \  // Convert the array into a string to count\n  $sortedString = implode(\"\"\
    , $testArray);\n  // Loop through each letter of the string\n  for ($i = 0; $i\
    \ < strlen($sortedString); $i++) {\n    // if the letter exists in the counter\
    \ array, increment the number of occurences\n    if (array_key_exists($sortedString[$i],\
    \ $counterArray)) {\n      $counterArray[$sortedString[$i]]++;\n    } else {\n\
    \      // add the letter to the counter array and set occurences to 1\n      $counterArray[$sortedString[$i]]\
    \ = 1;\n    }\n  }\n  // Sort the counter array so the highest occurence is at\
    \ the top\n  arsort($counterArray);\n  // get the number of occurences of the\
    \ first (highest occurence) letter in the array\n  $highestOccurence = array_values($counterArray)[0];\n\
    \  // init an empty array to hold the output\n  $outputArray = array();\n  //\
    \ Loop through the counter array\n  foreach ($counterArray as $key => $value)\
    \ {\n    // if the current letter in the counter array has the same number of\
    \ occurences as the highest occurence letter\n    if ($value == $highestOccurence)\
    \ {\n      // add the letter and number of occurences to the output array\n  \
    \    $outputArray[$key] = $value;\n    }\n  }\n  // return the output array\n\
    \  return $outputArray;\n}\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2rma5_x1.php:62\n\
    Stack trace:\n#0 /tmp/tmp2rma5_x1.php(69): test()\n#1 {main}\n  thrown in /tmp/tmp2rma5_x1.php\
    \ on line 62\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $arr = explode(\" \", $test);\n\
    \  $newarr = array_unique($arr);\n  $result = array();\n  $max = 0;\n  foreach\
    \ ($newarr as $key => $value) {\n    $cnt = 0;\n    foreach ($arr as $key2 =>\
    \ $value2) {\n      if ($value == $value2) {\n        $cnt++;\n      }\n    }\n\
    \    if ($cnt > $max) {\n      $max = $cnt;\n    }\n    $result[$value] = $cnt;\n\
    \  }\n  foreach ($result as $key => $value) {\n    if ($value != $max) {\n   \
    \   unset($result[$key]);\n    }\n  }\n  return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplmfue4t1.php:51\n\
    Stack trace:\n#0 /tmp/tmplmfue4t1.php(55): test()\n#1 {main}\n  thrown in /tmp/tmplmfue4t1.php\
    \ on line 51\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n\t$words = preg_split('/\\s+/',\
    \ $test);\n\t$histogram = array();\n\tforeach ($words as $word) {\n\t\tif (array_key_exists($word,\
    \ $histogram)) {\n\t\t\t$histogram[$word]++;\n\t\t} else {\n\t\t\t$histogram[$word]\
    \ = 1;\n\t\t}\n\t}\n\treturn $histogram;\n}\n\nfunction candidate(...$args) {\n\
    \    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzamjwdjw.php:35\n\
    Stack trace:\n#0 /tmp/tmpzamjwdjw.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpzamjwdjw.php\
    \ on line 35\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $test_array = explode(\" \"\
    , $test);\n    $occurrences = array();\n    foreach ($test_array as $item) {\n\
    \        if (isset($occurrences[$item])) {\n            $occurrences[$item] +=\
    \ 1;\n        } else {\n            $occurrences[$item] = 1;\n        }\n    }\n\
    \    return $occurrences;\n}\n\necho \">>>> histogram(\\\"a b c\\\")\\n\";\nprint_r(histogram(\"\
    a b c\"));\necho \">>>> histogram(\\\"a b b a\\\")\\n\";\nprint_r(histogram(\"\
    a b b a\"));\necho \">>>> histogram(\\\"a b c a b\\\")\\n\";\nprint_r(histogram(\"\
    a b c a b\"));\necho \">>>> histogram(\\\"b b b b a\\\")\\n\";\nprint_r(histogram(\"\
    b b b b a\"));\necho \">>>> histogram(\\\"\\\")\\n\";\nprint_r(histogram(\"\"\
    ));\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: ">>>> histogram(\"a b c\")\nArray\n(\n    [a] => 1\n    [b] => 1\n    [c]\
    \ => 1\n)\n>>>> histogram(\"a b b a\")\nArray\n(\n    [a] => 2\n    [b] => 2\n\
    )\n>>>> histogram(\"a b c a b\")\nArray\n(\n    [a] => 2\n    [b] => 2\n    [c]\
    \ => 1\n)\n>>>> histogram(\"b b b b a\")\nArray\n(\n    [b] => 4\n    [a] => 1\n\
    )\n>>>> histogram(\"\")\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpcg38l8ek.php:45\nStack trace:\n#0 /tmp/tmpcg38l8ek.php(54):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpcg38l8ek.php on line 45\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $result = [];\n  $arr = explode(\"\
    \ \", $test);\n  foreach ($arr as $value) {\n    if (!array_key_exists($value,\
    \ $result)) {\n      $result[$value] = 1;\n    } else {\n      $result[$value]\
    \ += 1;\n    }\n  }\n  return $result;\n}\n$test_1 = histogram(\"a b c\");\n$test_2\
    \ = histogram(\"a b b a\");\n$test_3 = histogram(\"a b c a b\");\n$test_4 = histogram(\"\
    b b b b a\");\n$test_5 = histogram(\"\");\nprint_r($test_1);\nprint_r($test_2);\n\
    print_r($test_3);\nprint_r($test_4);\nprint_r($test_5);\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n    [c] => 1\n\
    )\nArray\n(\n    [b] => 4\n    [a] => 1\n)\nArray\n(\n    [] => 1\n)\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmp0jvvmwdu.php:44\nStack trace:\n\
    #0 /tmp/tmp0jvvmwdu.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp0jvvmwdu.php\
    \ on line 44\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $test = preg_replace('!\\s+!',\
    \ ' ', $test);\n  $test = explode(' ', $test);\n  $histogram = array();\n  foreach\
    \ ($test as $key => $value) {\n    if (isset($histogram[$value])) {\n      $histogram[$value]++;\n\
    \    } else {\n      $histogram[$value] = 1;\n    }\n  }\n  arsort($histogram);\n\
    \  $highest = array_values($histogram)[0];\n  $highest_key = array_keys($histogram)[0];\n\
    \  $repeat = 0;\n  $keys = array();\n  foreach ($histogram as $key => $value)\
    \ {\n    if ($value == $highest) {\n      $keys[] = $key;\n    }\n  }\n  $result\
    \ = array();\n  foreach ($keys as $key => $value) {\n    $result[$value] = $highest;\n\
    \  }\n  return $result;\n}\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprslfy6da.php:54\n\
    Stack trace:\n#0 /tmp/tmprslfy6da.php(58): test()\n#1 {main}\n  thrown in /tmp/tmprslfy6da.php\
    \ on line 54\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $arr = explode(\" \", $test);\n\
    \    $count = array_count_values($arr);\n    $max = max($count);\n    $keys =\
    \ array_keys($count, $max);\n    $result = array();\n    foreach ($keys as $key)\
    \ {\n        $result[$key] = $max;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" => 2)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a b\") !==\
    \ array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\" => 1,\
    \ \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !== array(\"\
    b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"r t\
    \ g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphw0c6p9j.php:39\n\
    Stack trace:\n#0 /tmp/tmphw0c6p9j.php(43): test()\n#1 {main}\n  thrown in /tmp/tmphw0c6p9j.php\
    \ on line 39\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $letters = str_split($test);\n\
    \  $count = array_count_values($letters);\n  $highest = max($count);\n  $filtered\
    \ = array_filter($count, function($value) use ($highest) {\n    return $value\
    \ == $highest;\n  });\n  return $filtered;\n}\n\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwblz8yxm.php:31\n\
    Stack trace:\n#0 /tmp/tmpwblz8yxm.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpwblz8yxm.php\
    \ on line 31\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n\t$result = array();\n\t$temp =\
    \ array();\n\t$i = 0;\n\tforeach (explode(\" \", $test) as $letter) {\n\t\tif\
    \ (array_key_exists($letter, $temp)) {\n\t\t\t$temp[$letter]++;\n\t\t} else {\n\
    \t\t\t$temp[$letter] = 1;\n\t\t}\n\t}\n\t$count = 0;\n\tforeach ($temp as $key\
    \ => $value) {\n\t\tif ($value > $count) {\n\t\t\t$count = $value;\n\t\t}\n\t\
    }\n\tforeach ($temp as $key => $value) {\n\t\tif ($value == $count) {\n\t\t\t\
    $result[$key] = $value;\n\t\t}\n\t}\n\treturn $result;\n}\necho \"<p>\" . json_encode(histogram(\"\
    a b c\")) . \"</p>\";\necho \"<p>\" . json_encode(histogram(\"a b b a\")) . \"\
    </p>\";\necho \"<p>\" . json_encode(histogram(\"a b c a b\")) . \"</p>\";\necho\
    \ \"<p>\" . json_encode(histogram(\"b b b b a\")) . \"</p>\";\necho \"<p>\" .\
    \ json_encode(histogram(\"\")) . \"</p>\";\nfunction candidate(...$args) {\n \
    \   return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<p>{\"a\":1,\"b\":1,\"c\":1}</p><p>{\"a\":2,\"b\":2}</p><p>{\"a\":2,\"\
    b\":2}</p><p>{\"b\":4}</p><p>{\"\":1}</p>\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp70spt5mr.php:56\nStack trace:\n#0 /tmp/tmp70spt5mr.php(60):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp70spt5mr.php on line 56\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $test_array = explode(\" \", $test);\n\
    \  $freq = array_count_values($test_array);\n  $max = max($freq);\n  $max_array\
    \ = array();\n  foreach ($freq as $letter => $count) {\n    if ($count == $max)\
    \ {\n      $max_array[$letter] = $count;\n    }\n  }\n  return $max_array;\n}\n\
    print_r(histogram(\"a b c\"));\nprint_r(histogram(\"a b b a\"));\nprint_r(histogram(\"\
    a b c a b\"));\nprint_r(histogram(\"b b b b a\"));\nprint_r(histogram(\"\"));\n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpvih06x34.php:44\nStack trace:\n#0 /tmp/tmpvih06x34.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpvih06x34.php on line 44\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $array = explode(\" \", $test);\n\
    \  $array = array_count_values($array);\n  arsort($array);\n  $answer = array_slice($array,\
    \ 0, 1);\n  foreach ($array as $key => $value) {\n    if ($value != $answer[key($answer)])\
    \ {\n      break;\n    }\n    $answer[$key] = $value;\n  }\n  return $answer;\n\
    }\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_dqj_61z.php:40\n\
    Stack trace:\n#0 /tmp/tmp_dqj_61z.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp_dqj_61z.php\
    \ on line 40\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histo = [];\n  $words = explode(\"\
    \ \", $test);\n  //Include in a histogram an associative array of occurrence of\
    \ each words.\n  foreach ($words as $word) {\n    if (array_key_exists($word,\
    \ $histo)) {\n      $histo[$word]++;\n    } else {\n      $histo[$word] = 1;\n\
    \    }\n  }\n  //Find the maximum value in the histogram\n  $max = max($histo);\n\
    \  $maxWord = [];\n  //Find all the words with maximum value in the histogram\n\
    \  foreach ($histo as $key => $value) {\n    if ($value == $max) {\n      $maxWord[$key]\
    \ = $value;\n    }\n  }\n  return $maxWord;\n}\n\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0r6peja0.php:50\n\
    Stack trace:\n#0 /tmp/tmp0r6peja0.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp0r6peja0.php\
    \ on line 50\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $result = [];\n    $array =\
    \ explode(\" \", $test);\n    foreach ($array as $key => $value) {\n        $i\
    \ = 0;\n        foreach ($array as $k => $v) {\n            if ($value == $v)\
    \ {\n                $i++;\n            }\n        }\n        if (!isset($result[$value]))\
    \ {\n            $result[$value] = $i;\n        }\n    }\n    return $result;\n\
    }\n\necho \"<pre>\";\nprint_r(histogram(\"a b c\"));\necho \"</pre>\";\n\necho\
    \ \"<pre>\";\nprint_r(histogram(\"a b b a\"));\necho \"</pre>\";\n\necho \"<pre>\"\
    ;\nprint_r(histogram(\"a b c a b\"));\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(histogram(\"\
    b b b b a\"));\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(histogram(\"\"));\n\
    echo \"</pre>\";\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n</pre><pre>Array\n\
    (\n    [a] => 2\n    [b] => 2\n)\n</pre><pre>Array\n(\n    [a] => 2\n    [b] =>\
    \ 2\n    [c] => 1\n)\n</pre><pre>Array\n(\n    [b] => 4\n    [a] => 1\n)\n</pre><pre>Array\n\
    (\n    [] => 1\n)\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpry150_xb.php:58\n\
    Stack trace:\n#0 /tmp/tmpry150_xb.php(67): test()\n#1 {main}\n  thrown in /tmp/tmpry150_xb.php\
    \ on line 58\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $array = explode(\" \", $test);\n\
    \  $array_unique = array_unique($array);\n  $size = sizeof($array_unique);\n \
    \ $array_unique_count = array();\n  for ($i = 0; $i < $size; $i++) {\n    $array_unique_count[]\
    \ = substr_count($test, $array_unique[$i]);\n  }\n  $max = max($array_unique_count);\n\
    \  $max_index = array_keys($array_unique_count, $max);\n  $size = sizeof($max_index);\n\
    \  $result = array();\n  for ($i = 0; $i < $size; $i++) {\n    $result[$array_unique[$max_index[$i]]]\
    \ = $max;\n  }\n  return $result;\n}\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 1 in /tmp/tmpkl512f_a.php on line 22\n\n\
    Deprecated: substr_count(): Passing null to parameter #2 ($needle) of type string\
    \ is deprecated in /tmp/tmpkl512f_a.php on line 22\n\nFatal error: Uncaught ValueError:\
    \ substr_count(): Argument #2 ($needle) cannot be empty in /tmp/tmpkl512f_a.php:22\n\
    Stack trace:\n#0 /tmp/tmpkl512f_a.php(22): substr_count('b b b b a', '')\n#1 /tmp/tmpkl512f_a.php(34):\
    \ histogram('b b b b a')\n#2 /tmp/tmpkl512f_a.php(42): candidate('b b b b a')\n\
    #3 /tmp/tmpkl512f_a.php(48): test()\n#4 {main}\n  thrown in /tmp/tmpkl512f_a.php\
    \ on line 22\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n\t$newarray = array();\n\t$words\
    \ = explode(\" \", $test);\n\tforeach ($words as $word) {\n\t\tif (!array_key_exists($word,\
    \ $newarray)) {\n\t\t\t$newarray[$word] = 1;\n\t\t} else {\n\t\t\t$newarray[$word]++;\n\
    \t\t}\n\t}\n\tarsort($newarray);\n\t$maxvalue = array_values($newarray)[0];\n\t\
    foreach ($newarray as $key => $value) {\n\t\tif ($value < $maxvalue) {\n\t\t\t\
    unset($newarray[$key]);\n\t\t}\n\t}\n\treturn $newarray;\n}\n\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprx8b_x5g.php:47\n\
    Stack trace:\n#0 /tmp/tmprx8b_x5g.php(51): test()\n#1 {main}\n  thrown in /tmp/tmprx8b_x5g.php\
    \ on line 47\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  // Your code here...\n  $array\
    \ = explode(\" \", $test);\n  $histo = array();\n  foreach ($array as $key =>\
    \ $value) {\n    if (array_key_exists($value, $histo)) {\n      $histo[$value]\
    \ += 1;\n    } else {\n      $histo[$value] = 1;\n    }\n  }\n  arsort($histo);\n\
    \  $max = reset($histo);\n  return array_filter($histo, function($v) use ($max)\
    \ {\n    return $v === $max;\n  });\n}\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdoxv5lev.php:44\n\
    Stack trace:\n#0 /tmp/tmpdoxv5lev.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpdoxv5lev.php\
    \ on line 44\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n\t// Write your code here\n}\n\n\
    $test = \"a b c\";\n$result = histogram($test);\nprint_r($result);\n\n$test =\
    \ \"a b b a\";\n$result = histogram($test);\nprint_r($result);\n\n$test = \"a\
    \ b c a b\";\n$result = histogram($test);\nprint_r($result);\n\n$test = \"b b\
    \ b b a\";\n$result = histogram($test);\nprint_r($result);\n\n$test = \"\";\n\
    $result = histogram($test);\nprint_r($result);\nfunction candidate(...$args) {\n\
    \    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpslpked5n.php:44\n\
    Stack trace:\n#0 /tmp/tmpslpked5n.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpslpked5n.php\
    \ on line 44\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = [];\n  foreach (str_split($test)\
    \ as $letter) {\n    $histogram[$letter] = ++$histogram[$letter] ?? 1;\n  }\n\
    \  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key \"a\" in /tmp/tmpviq8rkny.php on line 19\n\
    \nWarning: Undefined array key \" \" in /tmp/tmpviq8rkny.php on line 19\n\nWarning:\
    \ Undefined array key \"b\" in /tmp/tmpviq8rkny.php on line 19\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpviq8rkny.php:29\nStack trace:\n\
    #0 /tmp/tmpviq8rkny.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpviq8rkny.php\
    \ on line 29\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n\t$result = [];\n\t$array = explode(\"\
    \ \", $test);\n\tsort($array);\n\t$count = 1;\n\t$max = 0;\n\tforeach ($array\
    \ as $key => $value) {\n\t\tif ($key != 0) {\n\t\t\tif ($value == $array[$key\
    \ - 1]) {\n\t\t\t\t$count++;\n\t\t\t} else {\n\t\t\t\tif ($count > $max) {\n\t\
    \t\t\t\t$max = $count;\n\t\t\t\t\t$result = [$array[$key - 1] => $count];\n\t\t\
    \t\t} elseif ($count == $max) {\n\t\t\t\t\t$result[$array[$key - 1]] = $count;\n\
    \t\t\t\t}\n\t\t\t\t$count = 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn $result;\n}\nprint_r(histogram(\"\
    a b c\"));\necho \"</br>\";\nprint_r(histogram(\"a b b a\"));\necho \"</br>\"\
    ;\nprint_r(histogram(\"a b c a b\"));\necho \"</br>\";\nprint_r(histogram(\"b\
    \ b b b a\"));\necho \"</br>\";\nprint_r(histogram(\"\"));\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n)\n</br>Array\n(\n    [a] => 2\n\
    )\n</br>Array\n(\n    [a] => 2\n    [b] => 2\n)\n</br>Array\n(\n    [a] => 1\n\
    )\n</br>Array\n(\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3te1bcqd.php:53\n\
    Stack trace:\n#0 /tmp/tmp3te1bcqd.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp3te1bcqd.php\
    \ on line 53\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $tmp = explode(\" \",$test);\n\
    \  $end = array();\n  foreach ($tmp as $key => $value) {\n    if (array_key_exists($value,\
    \ $end)) {\n      $end[$value] = $end[$value] + 1;\n    } else {\n      $end[$value]\
    \ = 1;\n    }\n  }\n  // now find the highest value in the array\n  $high = 0;\n\
    \  foreach ($end as $key => $value) {\n    if ($value > $high) {\n      $high\
    \ = $value;\n    }\n  }\n  $tmp = array();\n  foreach ($end as $key => $value)\
    \ {\n    if ($value == $high) {\n      $tmp[$key] = $value;\n    }\n  }\n  return\
    \ $tmp;\n}\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgv_m3chb.php:52\n\
    Stack trace:\n#0 /tmp/tmpgv_m3chb.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpgv_m3chb.php\
    \ on line 52\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $exploded_string = explode(\"\
    \ \", $test);\n    $array_len = count($exploded_string);\n    $compare_val = 0;\n\
    \    $final_array = array();\n    $coutner = 0;\n    for ($x = 0; $x < $array_len;\
    \ $x++) {\n        $compare_val = $exploded_string[$x];\n        $counter = 0;\n\
    \        for ($i = 0; $i < $array_len; $i++) {\n            if ($compare_val ==\
    \ $exploded_string[$i]) {\n                $counter++;\n            }\n      \
    \  }\n        $final_array[$compare_val] = $counter;\n    }\n    return $final_array;\n\
    }\necho histogram(\"a b c\");\necho \"<br>\";\necho histogram(\"a b b a\");\n\
    echo \"<br>\";\necho histogram(\"a b c a b\");\necho \"<br>\";\necho histogram(\"\
    b b b b a\");\necho \"<br>\";\necho histogram(\"\");\necho \"<br>\";\nfunction\
    \ candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" => 2)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a b\") !==\
    \ array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\" => 1,\
    \ \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !== array(\"\
    b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"r t\
    \ g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmp_mp2gry5.php on line 34\n\
    Array<br>\nWarning: Array to string conversion in /tmp/tmp_mp2gry5.php on line\
    \ 36\nArray<br>\nWarning: Array to string conversion in /tmp/tmp_mp2gry5.php on\
    \ line 38\nArray<br>\nWarning: Array to string conversion in /tmp/tmp_mp2gry5.php\
    \ on line 40\nArray<br>\nWarning: Array to string conversion in /tmp/tmp_mp2gry5.php\
    \ on line 42\nArray<br>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_mp2gry5.php:50\n\
    Stack trace:\n#0 /tmp/tmp_mp2gry5.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp_mp2gry5.php\
    \ on line 50\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n\t$letters = explode(\" \", $test);\n\
    \t$result = array();\n\tforeach ($letters as $letter) {\n\t\tif (isset($result[$letter]))\
    \ {\n\t\t\t$result[$letter]++;\n\t\t} else {\n\t\t\t$result[$letter] = 1;\n\t\t\
    }\n\t}\n\t$max = 0;\n\tforeach ($result as $value) {\n\t\tif ($value > $max) {\n\
    \t\t\t$max = $value;\n\t\t}\n\t}\n\t$output = array();\n\tforeach ($result as\
    \ $key => $value) {\n\t\tif ($value == $max) {\n\t\t\t$output[$key] = $value;\n\
    \t\t}\n\t}\n\treturn $output;\n}\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpye_x9q1h.php:51\n\
    Stack trace:\n#0 /tmp/tmpye_x9q1h.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpye_x9q1h.php\
    \ on line 51\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n\t\n\t$noSpace = str_replace(\"\
    \ \", \"\", $test);\n\t$noSpaceArray = str_split($noSpace);\n\t$counter = array_count_values($noSpaceArray);\n\
    \t$max = max($counter);\n\t$key = array_search($max, $counter);\n\t$highest =\
    \ array($key => $max);\n\tforeach ($counter as $key => $value) {\n\t\tif ($value\
    \ == $max) {\n\t\t\t$highest[$key] = $value;\n\t\t}\n\t}\n\treturn $highest;\n\
    }\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeegm0whm.php:42\n\
    Stack trace:\n#0 /tmp/tmpeegm0whm.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpeegm0whm.php\
    \ on line 42\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $char_array = str_split($test);\n\
    \    $char_array = array_count_values($char_array);\n    if (max($char_array)\
    \ > 1) {\n        foreach ($char_array as $key => $value) {\n            if ($value\
    \ < max($char_array)) {\n                unset($char_array[$key]);\n         \
    \   }\n        }\n    }\n    return $char_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_mk3jl6c.php:34\n\
    Stack trace:\n#0 /tmp/tmp_mk3jl6c.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp_mk3jl6c.php\
    \ on line 34\n"
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n\t//Returns an empty array if an\
    \ empty string is provided\n\tif ($test === \"\") {\n\t\treturn array();\n\t}\n\
    \t//Split up the space separated letters into an array\n\t$letters = explode(\"\
    \ \", $test);\n\t//Find the unique letters\n\t$unique = array_unique($letters);\n\
    \t//Find the repetition of each unique letter\n\t$repetition = array_count_values($letters);\n\
    \t//If there is only one letter, return the occurrence of that letter\n\tif (count($unique)\
    \ === 1) {\n\t\treturn array($unique[0] => $repetition[$unique[0]]);\n\t}\n\t\
    //Find the maximum number of repetitions\n\t$maxRepetition = max($repetition);\n\
    \t//Find the letters that occur with the maximum number of repetitions\n\t$maxRepetitions\
    \ = array_keys($repetition, $maxRepetition);\n\t//Create an array of the letters\
    \ that occur with the maximum number of repetitions\n\t$maxRepetitionsOccurrence\
    \ = array();\n\tfor ($i = 0; $i < count($maxRepetitions); $i++) {\n\t\t$maxRepetitionsOccurrence[$maxRepetitions[$i]]\
    \ = $maxRepetition;\n\t}\n\t//Return the array of the letters that occur with\
    \ the maximum number of repetitions\n\treturn $maxRepetitionsOccurrence;\n}\n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $repeats = array();\n    $arr\
    \ = explode(\" \", $test);\n    $max = 0;\n    for ($i = 0; $i < count($arr);\
    \ $i++) {\n        $arr[$i] = strtolower($arr[$i]);\n        if (array_key_exists($arr[$i],\
    \ $repeats)) {\n            $repeats[$arr[$i]] += 1;\n        } else {\n     \
    \       $repeats[$arr[$i]] = 1;\n        }\n        if ($repeats[$arr[$i]] > $max)\
    \ {\n            $max = $repeats[$arr[$i]];\n        }\n    }\n    $result = array();\n\
    \    foreach ($repeats as $key => $value) {\n        if ($value == $max) {\n \
    \           $result[$key] = $value;\n        }\n    }\n    return $result;\n}\n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa21l3rj9.php:50\n\
    Stack trace:\n#0 /tmp/tmpa21l3rj9.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpa21l3rj9.php\
    \ on line 50\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $counted = array_count_values(explode(\"\
    \ \", $test));\n  $max = max($counted);\n  $output = array();\n  foreach ($counted\
    \ as $key => $value) {\n    if ($value == $max) {\n      $output[$key] = $value;\n\
    \    }\n  }\n  return $output;\n}\n\necho \"<pre>\";\nvar_dump(histogram(\"a b\
    \ c\"));\nvar_dump(histogram(\"a b b a\"));\nvar_dump(histogram(\"a b c a b\"\
    ));\nvar_dump(histogram(\"b b b b a\"));\nvar_dump(histogram(\"\"));\necho \"\
    </pre>\";\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2,\
    \ \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>array(3) {\n  [\"a\"]=>\n  int(1)\n  [\"b\"]=>\n  int(1)\n  [\"c\"\
    ]=>\n  int(1)\n}\narray(2) {\n  [\"a\"]=>\n  int(2)\n  [\"b\"]=>\n  int(2)\n}\n\
    array(2) {\n  [\"a\"]=>\n  int(2)\n  [\"b\"]=>\n  int(2)\n}\narray(1) {\n  [\"\
    b\"]=>\n  int(4)\n}\narray(1) {\n  [\"\"]=>\n  int(1)\n}\n</pre>\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpwu7ro3s5.php:46\nStack trace:\n\
    #0 /tmp/tmpwu7ro3s5.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpwu7ro3s5.php\
    \ on line 46\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $results = array();\n  $testArray\
    \ = explode(\" \", $test);\n  $values = array_count_values($testArray);\n  $max\
    \ = max($values);\n  foreach ($values as $key => $value) {\n    if ($value ===\
    \ $max) {\n      $results[] = $key;\n    }\n  }\n  $count = array_count_values($results);\n\
    \  var_dump($count);\n}\nhistogram(\"b b b b a\");\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(1) {\n  [\"b\"]=>\n  int(1)\n}\narray(2) {\n  [\"a\"]=>\n  int(1)\n\
    \  [\"b\"]=>\n  int(1)\n}\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpqw4_m03x.php:35\nStack trace:\n#0 /tmp/tmpqw4_m03x.php(45): test()\n\
    #1 {main}\n  thrown in /tmp/tmpqw4_m03x.php on line 35\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $exp = explode(\" \", $test);\n\
    \    $array = array_count_values($exp);\n    $max = max($array);\n    $result\
    \ = array();\n    foreach ($array as $key => $value) {\n        if ($value ==\
    \ $max) {\n            $result[$key] = $value;\n        }\n    }\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq2rlabld.php:39\n\
    Stack trace:\n#0 /tmp/tmpq2rlabld.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpq2rlabld.php\
    \ on line 39\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    // body\n}\n\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8zxmgkkf.php:25\n\
    Stack trace:\n#0 /tmp/tmp8zxmgkkf.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp8zxmgkkf.php\
    \ on line 25\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $test = preg_replace('!\\s+!',\
    \ ' ', $test);\n    $words = explode(\" \", $test);\n    $result = array();\n\
    \    foreach ($words as $word) {\n        if (isset($result[$word])) {\n     \
    \       $result[$word]++;\n        } else {\n            $result[$word] = 1;\n\
    \        }\n    }\n    $max = max($result);\n    foreach ($result as $key => $value)\
    \ {\n        if ($value < $max) {\n            unset($result[$key]);\n       \
    \ }\n    }\n    print_r($result);\n}\nhistogram(\"a b c\");\nhistogram(\"a b b\
    \ a\");\nhistogram(\"a b c a b\");\nhistogram(\"b b b b a\");\nhistogram(\"\"\
    );\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\nArray\n(\n    [a] => 2\n    [b] =>\
    \ 2\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyravghqc.php:45\n\
    Stack trace:\n#0 /tmp/tmpyravghqc.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpyravghqc.php\
    \ on line 45\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $array = array();\n  foreach (explode(\"\
    \ \", $test) as $letter) {\n    if (isset($array[$letter])) {\n      $array[$letter]++;\n\
    \    } else {\n      $array[$letter] = 1;\n    }\n  }\n  $max = max($array);\n\
    \  foreach ($array as $key => $value) {\n    if ($value != $max) {\n      unset($array[$key]);\n\
    \    }\n  }\n  return $array;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo64s9xae.php:45\n\
    Stack trace:\n#0 /tmp/tmpo64s9xae.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpo64s9xae.php\
    \ on line 45\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n\t$arr = explode(\" \", $test);\n\
    \t$max = 0;\n\t$counts = array();\n\tforeach ($arr as $char) {\n\t\tif (array_key_exists($char,\
    \ $counts)) {\n\t\t\t$counts[$char]++;\n\t\t} else {\n\t\t\t$counts[$char] = 1;\n\
    \t\t}\n\t\tif ($counts[$char] > $max) {\n\t\t\t$max = $counts[$char];\n\t\t}\n\
    \t}\n\t$final = array();\n\tforeach ($counts as $key => $value) {\n\t\tif ($value\
    \ == $max) {\n\t\t\t$final[$key] = $value;\n\t\t}\n\t}\n\treturn $final;\n}\n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpctkzikhn.php:49\n\
    Stack trace:\n#0 /tmp/tmpctkzikhn.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpctkzikhn.php\
    \ on line 49\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $newArray = array();\n    $letters\
    \ = str_split($test);\n    $letters = array_count_values($letters);\n    foreach\
    \ ($letters as $key => $value) {\n        if ($value == max($letters)) {\n   \
    \         $newArray[$key] = $value;\n        }\n    }\n    print_r($newArray);\n\
    }\nhistogram(\"a b c\");\nhistogram(\"a b b a\");\nhistogram(\"a b c a b\");\n\
    histogram(\"b b b b a\");\nhistogram(\"\");\nfunction candidate(...$args) {\n\
    \    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [ ] => 2\n)\nArray\n(\n    [ ] => 3\n)\nArray\n(\n    [ ]\
    \ => 4\n)\nArray\n(\n    [b] => 4\n    [ ] => 4\n)\nArray\n(\n    [] => 1\n)\n\
    Array\n(\n    [ ] => 3\n)\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpsxoj1eqo.php:37\nStack trace:\n#0 /tmp/tmpsxoj1eqo.php(47): test()\n\
    #1 {main}\n  thrown in /tmp/tmpsxoj1eqo.php on line 37\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $array = explode(\" \", $test);\n\
    \  $newArray = array_count_values($array);\n  $maxValue = max($newArray);\n  $index\
    \ = array_search($maxValue, $newArray);\n  if (array_key_exists($index, $newArray))\
    \ {\n    return array($index => $maxValue);\n  }\n  return array($index => $maxValue);\n\
    }\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4y3o4znw.php:31\n\
    Stack trace:\n#0 /tmp/tmp4y3o4znw.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp4y3o4znw.php\
    \ on line 31\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $test = explode(\" \", $test);\n\
    \  $counted = array_count_values($test);\n  $maxcount = max($counted);\n  $return\
    \ = array();\n  foreach ($counted as $key => $value) {\n    if ($value == $maxcount)\
    \ {\n      $return[$key] = $value;\n    }\n  }\n  return $return;\n}\necho implode(\"\
    , \", histogram(\"a b c\"));\necho implode(\", \", histogram(\"a b b a\"));\n\
    echo implode(\", \", histogram(\"a b c a b\"));\necho implode(\", \", histogram(\"\
    b b b b a\"));\necho implode(\", \", histogram(\"\"));\necho \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" => 2)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a b\") !==\
    \ array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\" => 1,\
    \ \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !== array(\"\
    b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"r t\
    \ g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1, 1, 12, 22, 241\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1cfpdbmi.php:45\n\
    Stack trace:\n#0 /tmp/tmp1cfpdbmi.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp1cfpdbmi.php\
    \ on line 45\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $arr = explode(\" \", $test);\n\
    \    $hist = array();\n    foreach ($arr as $letter) {\n        if (array_key_exists($letter,\
    \ $hist)) {\n            $hist[$letter]++;\n        } else {\n            $hist[$letter]\
    \ = 1;\n        }\n    }\n    $max = 0;\n    foreach ($hist as $letter => $value)\
    \ {\n        if ($value > $max) {\n            $max = $value;\n        }\n   \
    \ }\n    foreach ($hist as $letter => $value) {\n        if ($value < $max) {\n\
    \            unset($hist[$letter]);\n        }\n    }\n    return $hist;\n}\n\
    echo \"a b c\\n\";\nvar_dump(histogram(\"a b c\"));\necho \"a b b a\\n\";\nvar_dump(histogram(\"\
    a b b a\"));\necho \"a b c a b\\n\";\nvar_dump(histogram(\"a b c a b\"));\necho\
    \ \"b b b b a\\n\";\nvar_dump(histogram(\"b b b b a\"));\necho \"\\n\";\nvar_dump(histogram(\"\
    \"));\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2,\
    \ \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "a b c\narray(3) {\n  [\"a\"]=>\n  int(1)\n  [\"b\"]=>\n  int(1)\n  [\"\
    c\"]=>\n  int(1)\n}\na b b a\narray(2) {\n  [\"a\"]=>\n  int(2)\n  [\"b\"]=>\n\
    \  int(2)\n}\na b c a b\narray(2) {\n  [\"a\"]=>\n  int(2)\n  [\"b\"]=>\n  int(2)\n\
    }\nb b b b a\narray(1) {\n  [\"b\"]=>\n  int(4)\n}\n\narray(1) {\n  [\"\"]=>\n\
    \  int(1)\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxded5zxx.php:60\n\
    Stack trace:\n#0 /tmp/tmpxded5zxx.php(64): test()\n#1 {main}\n  thrown in /tmp/tmpxded5zxx.php\
    \ on line 60\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $arr = explode(\" \", $test);\n\
    \  foreach ($arr as $word) {\n    $count[$word]++;\n  }\n  asort($count);\n  return\
    \ array_pop($count);\n}\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $count in /tmp/tmpyeuz1ylv.php on line 19\n\
    \nWarning: Undefined array key \"a\" in /tmp/tmpyeuz1ylv.php on line 19\n\nWarning:\
    \ Undefined array key \"b\" in /tmp/tmpyeuz1ylv.php on line 19\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpyeuz1ylv.php:29\nStack trace:\n\
    #0 /tmp/tmpyeuz1ylv.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpyeuz1ylv.php\
    \ on line 29\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $explode = explode(\" \", $test);\n\
    \    $count = array_count_values($explode);\n    $max = max($count);\n    $keys\
    \ = array_keys($count, $max);\n    $array = array();\n    foreach ($keys as $value)\
    \ {\n        $array[$value] = $max;\n    }\n    return $array;\n}\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprp2yw48i.php:38\n\
    Stack trace:\n#0 /tmp/tmprp2yw48i.php(42): test()\n#1 {main}\n  thrown in /tmp/tmprp2yw48i.php\
    \ on line 38\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $test = explode(\" \", $test);\n\
    \  $arr = array();\n  foreach ($test as $value) {\n    if(isset($arr[$value]))\
    \ {\n      $arr[$value]++;\n    } else {\n      $arr[$value] = 1;\n    }\n  }\n\
    \  return $arr;\n}\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg19scf7e.php:35\n\
    Stack trace:\n#0 /tmp/tmpg19scf7e.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpg19scf7e.php\
    \ on line 35\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n\tif ($test == \"\") return [];\n\
    \t$num = explode(\" \", $test);\n\t$arr = [];\n\tforeach ($num as $value) {\n\t\
    \tif (array_key_exists($value, $arr)) {\n\t\t\t$arr[$value] += 1;\n\t\t} else\
    \ {\n\t\t\t$arr[$value] = 1;\n\t\t}\n\t}\n\t$new = max($arr);\n\t$key = array_search($new,\
    \ $arr);\n\t$arr = [$key => $new];\n\treturn $arr;\n}\nprint_r(histogram(\"a b\
    \ c\"));\necho \"\\n\";\nprint_r(histogram(\"a b b a\"));\necho \"\\n\";\nprint_r(histogram(\"\
    a b c a b\"));\necho \"\\n\";\nprint_r(histogram(\"b b b b a\"));\necho \"\\n\"\
    ;\nprint_r(histogram(\"\"));\necho \"\\n\";\nfunction candidate(...$args) {\n\
    \    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n)\n\nArray\n(\n    [a] => 2\n)\n\nArray\n(\n  \
    \  [a] => 2\n)\n\nArray\n(\n    [b] => 4\n)\n\nArray\n(\n)\n\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpulxdvwep.php:47\nStack trace:\n#0 /tmp/tmpulxdvwep.php(57):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpulxdvwep.php on line 47\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    // Your code here\n    $histogram\
    \ = [];\n    $split = explode(\" \", $test);\n    $max = 0;\n    $maxLetter =\
    \ '';\n    foreach ($split as $letter) {\n        if (isset($histogram[$letter]))\
    \ {\n            $histogram[$letter]++;\n        } else {\n            $histogram[$letter]\
    \ = 1;\n        }\n        if ($histogram[$letter] > $max) {\n            $max\
    \ = $histogram[$letter];\n            $maxLetter = $letter;\n        }\n    }\n\
    \    return $histogram;\n}\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9edyl_v0.php:42\n\
    Stack trace:\n#0 /tmp/tmp9edyl_v0.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp9edyl_v0.php\
    \ on line 42\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $letters = explode(\" \", $test);\n\
    \  $counts = array();\n  foreach ($letters as $letter) {\n    if (!array_key_exists($letter,\
    \ $counts)) {\n      $counts[$letter] = 1;\n    } else {\n      $counts[$letter]++;\n\
    \    }\n  }\n  return $counts;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8umrz5b7.php:35\n\
    Stack trace:\n#0 /tmp/tmp8umrz5b7.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp8umrz5b7.php\
    \ on line 35\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n\t$stringarray = explode(\" \",\
    \ $test);\n\t$uniquearray = array_unique($stringarray);\n\t$returnarray = array();\n\
    \tforeach ($uniquearray as $unique) {\n\t\t$count = count_if($stringarray, $unique);\n\
    \t\t$returnarray[$unique] = $count;\n\t}\n\trsort($returnarray);\n\treturn $returnarray;\n\
    }\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_if() in\
    \ /tmp/tmp97htkt00.php:21\nStack trace:\n#0 /tmp/tmp97htkt00.php(28): histogram('a\
    \ b b a')\n#1 /tmp/tmp97htkt00.php(32): candidate('a b b a')\n#2 /tmp/tmp97htkt00.php(42):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp97htkt00.php on line 21\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n\t$array = explode(\" \", $test);\n\
    \t$newArray = array();\n\t$totalArray = array();\n\tfor ($i = 0; $i < count($array);\
    \ $i++) {\n\t\tif (in_array($array[$i], $newArray)) {\n\t\t\t$totalArray[$array[$i]]++;\n\
    \t\t} else {\n\t\t\t$newArray[] = $array[$i];\n\t\t\t$totalArray[$array[$i]] =\
    \ 1;\n\t\t}\n\t}\n\t$max = max($totalArray);\n\t$maxArray = array();\n\tforeach\
    \ ($totalArray as $key => $value) {\n\t\tif ($value == $max) {\n\t\t\t$maxArray[$key]\
    \ = $value;\n\t\t}\n\t}\n\treturn $maxArray;\n}\n\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqvzzhbm7.php:49\n\
    Stack trace:\n#0 /tmp/tmpqvzzhbm7.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpqvzzhbm7.php\
    \ on line 49\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $result = array();\n  if ($test\
    \ == \"\") {\n    return $result;\n  } else {\n    $letters = explode(\" \", $test);\n\
    \    foreach ($letters as $letter) {\n      $count = 0;\n      for ($i = 0; $i\
    \ < count($letters); $i++) {\n        if ($letter == $letters[$i]) {\n       \
    \   $count++;\n        }\n      }\n      $result[$letter] = $count;\n    }\n \
    \   return $result;\n  }\n}\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqa5c8qr3.php:40\n\
    Stack trace:\n#0 /tmp/tmpqa5c8qr3.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpqa5c8qr3.php\
    \ on line 40\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $testArray = explode(\" \", $test);\n\
    \  if (count($testArray) < 1) {\n    return array();\n  }\n  $letterCount = array();\n\
    \  foreach ($testArray as $letter) {\n    if (array_key_exists($letter, $letterCount))\
    \ {\n      $letterCount[$letter]++;\n    } else {\n      $letterCount[$letter]\
    \ = 1;\n    }\n  }\n  arsort($letterCount);\n  $highest = array_slice($letterCount,\
    \ 0, 1);\n  $highest = array_flip($highest);\n  $result = array();\n  foreach\
    \ ($letterCount as $letter => $count) {\n    if ($count === $highest[$count])\
    \ {\n      $result[$letter] = $count;\n    }\n  }\n  return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" => 2)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a b\") !==\
    \ array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\" => 1,\
    \ \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !== array(\"\
    b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"r t\
    \ g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpewyb0oyn.php:45\n\
    Stack trace:\n#0 /tmp/tmpewyb0oyn.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpewyb0oyn.php\
    \ on line 45\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n\t// get the string and make it\
    \ an array\n\t$testArray = explode(\" \", $test);\n\t$countArray = array();\n\t\
    // go through each letter\n\tforeach ($testArray as $letter) {\n\t\t// check if\
    \ it's in the array, if it is add to the count\n\t\tif (isset($countArray[$letter]))\
    \ {\n\t\t\t$countArray[$letter] += 1;\n\t\t} else {\n\t\t\t// add it to the array\
    \ if it's not already there\n\t\t\t$countArray[$letter] = 1;\n\t\t}\n\t}\n\t//\
    \ find the max\n\t$max = 0;\n\t$maxLetter = array();\n\tforeach ($countArray as\
    \ $key => $value) {\n\t\tif ($value > $max) {\n\t\t\t$max = $value;\n\t\t\t$maxLetter\
    \ = array($key => $value);\n\t\t} elseif ($value == $max) {\n\t\t\t$maxLetter[$key]\
    \ = $value;\n\t\t}\n\t}\n\tksort($maxLetter);\n\treturn $maxLetter;\n}\n\necho\
    \ \"a b c\" . PHP_EOL;\nprint_r(histogram(\"a b c\"));\necho \"a b b a\" . PHP_EOL;\n\
    print_r(histogram(\"a b b a\"));\necho \"a b c a b\" . PHP_EOL;\nprint_r(histogram(\"\
    a b c a b\"));\necho \"b b b b a\" . PHP_EOL;\nprint_r(histogram(\"b b b b a\"\
    ));\necho \"\" . PHP_EOL;\nprint_r(histogram(\"\"));\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "a b c\nArray\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\na b b a\n\
    Array\n(\n    [a] => 2\n    [b] => 2\n)\na b c a b\nArray\n(\n    [a] => 2\n \
    \   [b] => 2\n)\nb b b b a\nArray\n(\n    [b] => 4\n)\n\nArray\n(\n    [] => 1\n\
    )\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_2fthln5.php:63\n\
    Stack trace:\n#0 /tmp/tmp_2fthln5.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp_2fthln5.php\
    \ on line 63\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n\t$arr = explode(\" \", $test);\n\
    \t$counts = array_count_values($arr);\n\tarsort($counts);\n\t$maxCount = key($counts);\n\
    \t$max = array();\n\tforeach ($counts as $key => $value) {\n\t\tif ($value ==\
    \ $maxCount) {\n\t\t\t$max[$key] = $value;\n\t\t}\n\t}\n\treturn $max;\n}\n$input\
    \ = \"a b c\";\necho \"Histogram of [{$input}]\\n\";\nvar_dump(histogram($input));\n\
    echo \"\\n\";\n$input = \"a b b a\";\necho \"Histogram of [{$input}]\\n\";\nvar_dump(histogram($input));\n\
    echo \"\\n\";\n$input = \"a b c a b\";\necho \"Histogram of [{$input}]\\n\";\n\
    var_dump(histogram($input));\necho \"\\n\";\n$input = \"b b b b a\";\necho \"\
    Histogram of [{$input}]\\n\";\nvar_dump(histogram($input));\necho \"\\n\";\n$input\
    \ = \"\";\necho \"Histogram of [{$input}]\\n\";\nvar_dump(histogram($input));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Histogram of [a b c]\narray(0) {\n}\n\nHistogram of [a b b a]\narray(0)\
    \ {\n}\n\nHistogram of [a b c a b]\narray(0) {\n}\n\nHistogram of [b b b b a]\n\
    array(0) {\n}\n\nHistogram of []\narray(0) {\n}\n\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpvsxt_pb0.php:54\nStack trace:\n#0 /tmp/tmpvsxt_pb0.php(64):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpvsxt_pb0.php on line 54\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $array_result = array();\n \
    \   $array_test = explode(\" \", $test);\n    $i = 0;\n    foreach ($array_test\
    \ as $item) {\n        $array_result[$item] = 0;\n    }\n    foreach ($array_test\
    \ as $item) {\n        foreach ($array_result as $letter => $count) {\n      \
    \      if ($item == $letter) {\n                $array_result[$letter] = $count\
    \ + 1;\n            }\n        }\n    }\n    asort($array_result);\n    return\
    \ array_slice($array_result, -2, 2, true);\n}\n$test = \"hello world\";\nprint_r(histogram($test));\n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [hello] => 1\n    [world] => 1\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpml9jbjdj.php:42\nStack trace:\n#0 /tmp/tmpml9jbjdj.php(50):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpml9jbjdj.php on line 42\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n\t$test = str_split($test);\n\t\
    $array = array();\n\tforeach ($test as $key => $value) {\n\t\tif (array_key_exists($value,\
    \ $array)) {\n\t\t\t$array[$value] = $array[$value] + 1;\n\t\t} else {\n\t\t\t\
    $array[$value] = 1;\n\t\t}\n\t}\n\t$tmp = $array;\n\t$tmp = array_unique($tmp);\n\
    \t$tmp = sort($tmp);\n\t$tmp = array_reverse($tmp);\n\t$tmp = reset($tmp);\n\t\
    $array = array_filter($array, function($k) use ($tmp) {\n\t\tif ($k === $tmp)\
    \ {\n\t\t\treturn $k;\n\t\t}\n\t});\n\treturn $array;\n}\n\necho '<pre>';\nprint_r(histogram(\"\
    a b c\"));\necho '</pre>';\necho '<pre>';\nprint_r(histogram(\"a b b a\"));\n\
    echo '</pre>';\necho '<pre>';\nprint_r(histogram(\"a b c a b\"));\necho '</pre>';\n\
    echo '<pre>';\nprint_r(histogram(\"b b b b a\"));\necho '</pre>';\necho '<pre>';\n\
    print_r(histogram(\"\"));\necho '</pre>';\nfunction candidate(...$args) {\n  \
    \  return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>\nFatal error: Uncaught TypeError: array_reverse(): Argument #1 ($array)\
    \ must be of type array, bool given in /tmp/tmpkqz94klt.php:29\nStack trace:\n\
    #0 /tmp/tmpkqz94klt.php(29): array_reverse(true)\n#1 /tmp/tmpkqz94klt.php(40):\
    \ histogram(Array)\n#2 {main}\n  thrown in /tmp/tmpkqz94klt.php on line 29\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $count = 0;\n    $split = explode(\"\
    \ \", $test);\n    $results = array();\n    foreach ($split as $letter) {\n  \
    \      $results[$letter] = isset($results[$letter]) ? $results[$letter] + 1 :\
    \ 1;\n    }\n    arsort($results);\n    return $results;\n}\nprint_r(histogram(\"\
    b b b b a\"));\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [b] => 4\n    [a] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp5tyu9q5_.php:33\nStack trace:\n#0 /tmp/tmp5tyu9q5_.php(42):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp5tyu9q5_.php on line 33\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $counts = [];\n    $letters\
    \ = explode(\" \", $test);\n    foreach ($letters as $letter) {\n        if (isset($counts[$letter]))\
    \ {\n            $counts[$letter]++;\n        } else {\n            $counts[$letter]\
    \ = 1;\n        }\n    }\n    return $counts;\n}\n\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjf6jlwmu.php:35\n\
    Stack trace:\n#0 /tmp/tmpjf6jlwmu.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpjf6jlwmu.php\
    \ on line 35\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $array = explode(\" \", $test);\n\
    \    return array_count_values($array);\n}\necho \"<pre>\";\nprint_r(histogram(\"\
    b b b b a\"));\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [b] => 4\n    [a] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpf0yafh8c.php:28\nStack trace:\n#0 /tmp/tmpf0yafh8c.php(37):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpf0yafh8c.php on line 28\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $hist = [];\n  $max = 0;\n  $maxLetters\
    \ = [];\n  foreach (explode(\" \", $test) as $letter) {\n    if (!isset($hist[$letter]))\
    \ {\n      $hist[$letter] = 0;\n    }\n    $hist[$letter]++;\n    if ($hist[$letter]\
    \ > $max) {\n      $max = $hist[$letter];\n      $maxLetters = [$letter];\n  \
    \  } else if ($hist[$letter] == $max) {\n      $maxLetters[] = $letter;\n    }\n\
    \  }\n  foreach ($hist as $letter => $count) {\n    if (!in_array($letter, $maxLetters))\
    \ {\n      unset($hist[$letter]);\n    }\n  }\n  return $hist;\n}\n\nfunction\
    \ candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" => 2)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a b\") !==\
    \ array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\" => 1,\
    \ \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !== array(\"\
    b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"r t\
    \ g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjkieaol1.php:51\n\
    Stack trace:\n#0 /tmp/tmpjkieaol1.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpjkieaol1.php\
    \ on line 51\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n\t$a = str_split($test);\n\t$result\
    \ = array();\n\tforeach ($a as $letter) {\n\t\tif (isset($result[$letter])) {\n\
    \t\t\t$result[$letter]++;\n\t\t} else {\n\t\t\t$result[$letter] = 1;\n\t\t}\n\t\
    }\n\t$max = 0;\n\tforeach ($result as $letter => $count) {\n\t\tif ($count > $max)\
    \ {\n\t\t\t$max = $count;\n\t\t}\n\t}\n\t$final = array();\n\tforeach ($result\
    \ as $letter => $count) {\n\t\tif ($count == $max) {\n\t\t\t$final[$letter] =\
    \ $count;\n\t\t}\n\t}\n\treturn $final;\n}\n\nprint_r(histogram(\"a b c\"));\n\
    print_r(histogram(\"a b b a\"));\nprint_r(histogram(\"a b c a b\"));\nprint_r(histogram(\"\
    b b b b a\"));\nprint_r(histogram(\"\"));\n\nfunction candidate(...$args) {\n\
    \    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [ ] => 2\n)\nArray\n(\n    [ ] => 3\n)\nArray\n(\n    [ ]\
    \ => 4\n)\nArray\n(\n    [b] => 4\n    [ ] => 4\n)\nArray\n(\n    [] => 1\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu6cepy4k.php:52\nStack\
    \ trace:\n#0 /tmp/tmpu6cepy4k.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpu6cepy4k.php\
    \ on line 52\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    // Your code here\n}\n\nfunction\
    \ candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" => 2)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a b\") !==\
    \ array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\" => 1,\
    \ \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !== array(\"\
    b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"r t\
    \ g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppdbok66k.php:25\n\
    Stack trace:\n#0 /tmp/tmppdbok66k.php(35): test()\n#1 {main}\n  thrown in /tmp/tmppdbok66k.php\
    \ on line 25\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $str = explode(\" \", $test);\n\
    \  $repeated = array_count_values($str);\n  $max = max($repeated);\n  $res = array();\n\
    \  foreach ($repeated as $key => $value) {\n    if ($value == $max) {\n      $res[$key]\
    \ = $value;\n    }\n  }\n  return $res;\n}\nprint_r(histogram(\"a b c\"));\nprint_r(histogram(\"\
    a b b a\"));\nprint_r(histogram(\"a b c a b\"));\nprint_r(histogram(\"b b b b\
    \ a\"));\nprint_r(histogram(\"\"));\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp2c27nu9o.php:44\nStack trace:\n#0 /tmp/tmp2c27nu9o.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp2c27nu9o.php on line 44\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $array = [];\n  $letters = str_split($test);\n\
    \  foreach ($letters as $letter) {\n    if (!isset($array[$letter])) {\n     \
    \ $array[$letter] = 1;\n    } else {\n      $array[$letter]++;\n    }\n  }\n \
    \ $max = max($array);\n  $histogram = [];\n  foreach ($array as $key => $value)\
    \ {\n    if ($value == $max) {\n      $histogram[$key] = $value;\n    }\n  }\n\
    \  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx2s9e03h.php:41\n\
    Stack trace:\n#0 /tmp/tmpx2s9e03h.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpx2s9e03h.php\
    \ on line 41\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n\t// space as delimiter\n\t$test\
    \ = explode(\" \", $test);\n\t// get the count of the array\n\t$testCount = count($test);\n\
    \t// set the highest count to 0\n\t$highestCount = 0;\n\t// loop through the array\
    \ and count the number of times\n\t// the current value appears in the array\n\
    \tfor ($i = 0; $i < $testCount; $i++) {\n\t\t$test[$i] = array($test[$i] => substr_count($test[$i],\
    \ $test[$i]));\n\t\tif ($test[$i][$test[$i]] > $highestCount) {\n\t\t\t$highestCount\
    \ = $test[$i][$test[$i]];\n\t\t}\n\t}\n\t// find each value that appears the highest\
    \ number of times\n\t// and add them to the new array\n\tfor ($i = 0; $i < $testCount;\
    \ $i++) {\n\t\tif ($test[$i][$test[$i]] == $highestCount) {\n\t\t\t$newArray[]\
    \ = $test[$i];\n\t\t}\n\t}\n\treturn $newArray;\n}\nprint_r(histogram(\"a b c\"\
    ));\nprint_r(histogram(\"a b b a\"));\nprint_r(histogram(\"a b c a b\"));\nprint_r(histogram(\"\
    b b b b a\"));\nprint_r(histogram(\"\"));\nfunction candidate(...$args) {\n  \
    \  return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: Illegal offset type in /tmp/tmp6qf9u3_y.php:27\n\
    Stack trace:\n#0 /tmp/tmp6qf9u3_y.php(40): histogram(Array)\n#1 {main}\n  thrown\
    \ in /tmp/tmp6qf9u3_y.php on line 27\n"
  timestamp: 1660028576
- exit_code: 0
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n$array = [];\n$letter_count = array_count_values(str_split($test));\n\
    $max = array_search(max($letter_count), $letter_count);\n\nforeach ($letter_count\
    \ as $key => $value) {\n  if ($value == $letter_count[$max]) {\n    $array[$key]\
    \ = $value;\n  }\n}\nreturn $array;\n}\nprint_r(histogram(\"a b c\"));\necho \"\
    \\n\";\nprint_r(histogram(\"a b b a\"));\necho \"\\n\";\nprint_r(histogram(\"\
    a b c a b\"));\necho \"\\n\";\nprint_r(histogram(\"b b b b a\"));\necho \"\\n\"\
    ;\nprint_r(histogram(\"\"));\n ?>\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [ ] => 2\n)\n\nArray\n(\n    [ ] => 3\n)\n\nArray\n(\n  \
    \  [ ] => 4\n)\n\nArray\n(\n    [b] => 4\n    [ ] => 4\n)\n\nArray\n(\n    []\
    \ => 1\n)\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2,\
    \ \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $i = array();\n    $result =\
    \ array();\n    $t = str_split($test);\n    foreach ($t as $v) {\n        if (array_key_exists($v,\
    \ $i)) {\n            $i[$v]++;\n        } else {\n            $i[$v] = 1;\n \
    \       }\n    }\n    $max = max($i);\n    foreach ($i as $k => $v) {\n      \
    \  if ($v == $max) {\n            $result[$k] = $v;\n        }\n    }\n    return\
    \ $result;\n}\n\necho \"<pre>\";\nprint_r(histogram(\"a b c\"));\necho \"</pre>\"\
    ;\necho \"<pre>\";\nprint_r(histogram(\"a b b a\"));\necho \"</pre>\";\necho \"\
    <pre>\";\nprint_r(histogram(\"a b c a b\"));\necho \"</pre>\";\necho \"<pre>\"\
    ;\nprint_r(histogram(\"b b b b a\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"\
    \"));\necho \"</pre>\";\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [ ] => 2\n)\n</pre><pre>Array\n(\n    [ ] => 3\n)\n\
    </pre><pre>Array\n(\n    [ ] => 4\n)\n</pre><pre>Array\n(\n    [b] => 4\n    [\
    \ ] => 4\n)\n</pre><pre>Array\n(\n    [] => 1\n)\n</pre>\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp0i8i9gpa.php:56\nStack trace:\n#0 /tmp/tmp0i8i9gpa.php(66):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp0i8i9gpa.php on line 56\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n\t$alpha = str_split('abcdefghijklmnopqrstuvwxyz');\n\
    \t$results = array();\n\t$counters = array();\n\t$max_count = 0;\n\tforeach($alpha\
    \ as $letter) {\n\t\t$counters[$letter] = 0;\n\t}\n\tforeach(explode(' ', $test)\
    \ as $word) {\n\t\tforeach(str_split($word) as $letter) {\n\t\t\t$counters[$letter]++;\n\
    \t\t\tif($counters[$letter] > $max_count) {\n\t\t\t\t$max_count = $counters[$letter];\n\
    \t\t\t}\n\t\t}\n\t}\n\tforeach($counters as $letter => $count) {\n\t\tif($count\
    \ == $max_count) {\n\t\t\t$results[$letter] = $count;\n\t\t}\n\t}\n\treturn $results;\n\
    }\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqb7enoel.php:48\n\
    Stack trace:\n#0 /tmp/tmpqb7enoel.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpqb7enoel.php\
    \ on line 48\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $letters = explode(\" \", $test);\n\
    \    $array = array();\n    foreach ($letters as $value) {\n        if (!isset($array[$value]))\
    \ {\n            $array[$value] = 1;\n        } else {\n            $array[$value]++;\n\
    \        }\n    }\n    print_r($array);\n}\n\n$test = \"a b c\";\nhistogram($test);\n\
    \n$test = \"a b b a\";\nhistogram($test);\n\n$test = \"a b c a b\";\nhistogram($test);\n\
    \n$test = \"b b b b a\";\nhistogram($test);\n\n$test = \"\";\nhistogram($test);\n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n    [c] => 1\n\
    )\nArray\n(\n    [b] => 4\n    [a] => 1\n)\nArray\n(\n    [] => 1\n)\nArray\n\
    (\n    [a] => 2\n    [b] => 2\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp1woi0svs.php:48\nStack trace:\n#0 /tmp/tmp1woi0svs.php(58): test()\n\
    #1 {main}\n  thrown in /tmp/tmp1woi0svs.php on line 48\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $arr = explode(\" \", $test);\n\
    \    $array = array_count_values($arr);\n    $max = max($array);\n    foreach\
    \ ($array as $k => $v) {\n        if ($v != $max) {\n            unset($array[$k]);\n\
    \        }\n    }\n    return $array;\n}\n\necho \"<pre>\";\nvar_dump(histogram(\"\
    a b c\"));\nvar_dump(histogram(\"a b b a\"));\nvar_dump(histogram(\"a b c a b\"\
    ));\nvar_dump(histogram(\"b b b b a\"));\nvar_dump(histogram(\"\"));\necho \"\
    </pre>\";\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2,\
    \ \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>array(3) {\n  [\"a\"]=>\n  int(1)\n  [\"b\"]=>\n  int(1)\n  [\"c\"\
    ]=>\n  int(1)\n}\narray(2) {\n  [\"a\"]=>\n  int(2)\n  [\"b\"]=>\n  int(2)\n}\n\
    array(2) {\n  [\"a\"]=>\n  int(2)\n  [\"b\"]=>\n  int(2)\n}\narray(1) {\n  [\"\
    b\"]=>\n  int(4)\n}\narray(1) {\n  [\"\"]=>\n  int(1)\n}\n</pre>\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp62cpvhe9.php:46\nStack trace:\n\
    #0 /tmp/tmp62cpvhe9.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp62cpvhe9.php\
    \ on line 46\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $letters = explode(\" \", $test);\n\
    \    $counts = array();\n    foreach ($letters as $letter) {\n        if (isset($counts[$letter]))\
    \ {\n            $counts[$letter] += 1;\n        } else {\n            $counts[$letter]\
    \ = 1;\n        }\n    }\n    arsort($counts);\n    $max = key($counts);\n   \
    \ $count = $counts[$max];\n    $more = array_filter($counts, function($value)\
    \ use ($count) {\n        return $value == $count;\n    });\n    return $more;\n\
    }\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiez5rxzt.php:45\n\
    Stack trace:\n#0 /tmp/tmpiez5rxzt.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpiez5rxzt.php\
    \ on line 45\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  // Your code here\n}\nfunction\
    \ candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" => 2)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a b\") !==\
    \ array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\" => 1,\
    \ \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !== array(\"\
    b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"r t\
    \ g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_bk9jf5u.php:24\n\
    Stack trace:\n#0 /tmp/tmp_bk9jf5u.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp_bk9jf5u.php\
    \ on line 24\n"
  timestamp: 1659824145
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $occurences = array();\n   \
    \ $test = preg_split('/\\s+/', $test);\n    $count = array_count_values($test);\n\
    \    $max_count = max($count);\n    foreach ($count as $key => $value) {\n   \
    \     if ($value == $max_count) {\n            $occurences[$key] = $value;\n \
    \       }\n    }\n    return $occurences;\n}\n\n$test = \"b b b b a\";\n$result\
    \ = histogram($test);\necho \"Test string: \" . $test . PHP_EOL;\necho json_encode($result)\
    \ . PHP_EOL;\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Test string: b b b b a\n{\"b\":4}\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpux9csgs7.php:45\nStack trace:\n#0 /tmp/tmpux9csgs7.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpux9csgs7.php on line 45\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $test_arr = explode(\" \", $test);\n\
    \    $histogram = array();\n    foreach ($test_arr as $value) {\n        if (array_key_exists($value,\
    \ $histogram)) {\n            $histogram[$value]++;\n        } else {\n      \
    \      $histogram[$value] = 1;\n        }\n    }\n    $max = max($histogram);\n\
    \    foreach ($histogram as $key => $value) {\n        if ($value != $max) {\n\
    \            unset($histogram[$key]);\n        }\n    }\n    return $histogram;\n\
    }\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqvewqsfh.php:45\n\
    Stack trace:\n#0 /tmp/tmpqvewqsfh.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpqvewqsfh.php\
    \ on line 45\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $array = explode(\" \", $test);\n\
    \    $histogram = array();\n    foreach ($array as $value) {\n        $count =\
    \ 0;\n        foreach ($array as $value2) {\n            if ($value == $value2)\
    \ {\n                $count++;\n            }\n        }\n        $histogram[$value]\
    \ = $count;\n    }\n    arsort($histogram);\n    return $histogram;\n}\n$test\
    \ = \"a b c a b\";\nvar_dump(histogram($test));\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(3) {\n  [\"a\"]=>\n  int(2)\n  [\"b\"]=>\n  int(2)\n  [\"c\"]=>\n\
    \  int(1)\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppgizput8.php:39\n\
    Stack trace:\n#0 /tmp/tmppgizput8.php(48): test()\n#1 {main}\n  thrown in /tmp/tmppgizput8.php\
    \ on line 39\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n\t$arr = explode(\" \", $test);\n\
    \t$dupes = array();\n\tforeach ($arr as $val) {\n\t\t$dupes[$val] = substr_count($test,\
    \ $val);\n\t}\n\tarsort($dupes);\n\t$keys = array_keys($dupes);\n\t$val = $dupes[$keys[0]];\n\
    \t$result = array();\n\tforeach ($dupes as $key => $v) {\n\t\tif ($v == $val)\
    \ {\n\t\t\t$result[$key] = $v;\n\t\t}\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught ValueError: substr_count(): Argument #2 ($needle)\
    \ cannot be empty in /tmp/tmp7w4t7xsh.php:20\nStack trace:\n#0 /tmp/tmp7w4t7xsh.php(20):\
    \ substr_count('', '')\n#1 /tmp/tmp7w4t7xsh.php(35): histogram('')\n#2 /tmp/tmp7w4t7xsh.php(45):\
    \ candidate('')\n#3 /tmp/tmp7w4t7xsh.php(49): test()\n#4 {main}\n  thrown in /tmp/tmp7w4t7xsh.php\
    \ on line 20\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $words = explode(\" \", $test);\n\
    \  $array = array();\n  foreach ($words as $word) {\n    if (array_key_exists($word,\
    \ $array)) {\n      $array[$word]++;\n    } else {\n      $array[$word] = 1;\n\
    \    }\n  }\n  return $array;\n}\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptrejz6fu.php:34\n\
    Stack trace:\n#0 /tmp/tmptrejz6fu.php(43): test()\n#1 {main}\n  thrown in /tmp/tmptrejz6fu.php\
    \ on line 34\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $hist = [];\n  $hi = 0;\n  $letters\
    \ = explode(\" \", $test);\n  foreach ($letters as $letter) {\n    if (array_key_exists($letter,\
    \ $hist)) {\n      $hist[$letter] += 1;\n    } else {\n      $hist[$letter] =\
    \ 1;\n    }\n    if ($hist[$letter] > $hi) {\n      $hi = $hist[$letter];\n  \
    \  }\n  }\n  $result = [];\n  foreach ($hist as $key => $val) {\n    if ($val\
    \ == $hi) {\n      $result[$key] = $val;\n    }\n  }\n  return $result;\n}\nprint_r(histogram(\"\
    a b c\"));\nprint_r(histogram(\"a b b a\"));\nprint_r(histogram(\"a b c a b\"\
    ));\nprint_r(histogram(\"b b b b a\"));\nprint_r(histogram(\"\"));\nprint_r(histogram(\"\
    a b c b a\"));\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\nArray\n(\n    [a] => 2\n    [b] =>\
    \ 2\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsq5xb2bq.php:55\n\
    Stack trace:\n#0 /tmp/tmpsq5xb2bq.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpsq5xb2bq.php\
    \ on line 55\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $test = str_replace(\" \",\"\"\
    ,$test);\n  $len = strlen($test);\n  $letter = \"\";\n  $alpha_array = [];\n \
    \ $max = 0;\n  $result = [];\n  // Start a loop that runs until the end of the\
    \ string\n  for ($i = 0; $i < $len; $i++) {\n    // Grabs the letter at each letter\
    \ position\n    $letter = $test[$i];\n    // Checks if the key exists and if not\
    \ creates the key and sets to 1\n    if (!array_key_exists($letter, $alpha_array))\
    \ {\n      $alpha_array[$letter] = 1;\n    } else {\n      // Add one to the key's\
    \ value\n      $alpha_array[$letter]++;\n    }\n  }\n  // Sorts the array to order\
    \ from smallest to largest\n  arsort($alpha_array);\n  // Grabs the first key\
    \ from the sorted array\n  $max = array_keys($alpha_array)[0];\n  // Adds the\
    \ first key to the result array\n  $result[$max] = $alpha_array[$max];\n  // Start\
    \ a loop that stops at the length of the array\n  for ($i = 0; $i < count($alpha_array);\
    \ $i++) {\n    // Grabs the value of the current key\n    $value = $alpha_array[array_keys($alpha_array)[$i]];\n\
    \    // Checks if the value is the same as the first key's value\n    if ($value\
    \ == $alpha_array[$max]) {\n      // Adds the keys with the same value to the\
    \ result array\n      $result[array_keys($alpha_array)[$i]] = $value;\n    }\n\
    \  }\n  // Returns the result array\n  return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmpqrs8hu3u.php on line 38\n\n\
    Warning: Undefined array key \"\" in /tmp/tmpqrs8hu3u.php on line 40\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmpqrs8hu3u.php:65\nStack trace:\n\
    #0 /tmp/tmpqrs8hu3u.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpqrs8hu3u.php\
    \ on line 65\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n\t$histogram = array();\n\t$counts\
    \ = array();\n\t$i = 0;\n\t$test = explode(\" \", $test);\n\tforeach ($test as\
    \ $letter) {\n\t\tif (in_array($letter, $histogram)) {\n\t\t\t$counts[$i]++;\n\
    \t\t} else {\n\t\t\t$histogram[$i] = $letter;\n\t\t\t$counts[$i] = 1;\n\t\t\t\
    $i++;\n\t\t}\n\t}\n\t$high_count = max($counts);\n\tfor ($i = 0; $i < count($counts);\
    \ $i++) {\n\t\tif ($counts[$i] < $high_count) {\n\t\t\tunset($histogram[$i]);\n\
    \t\t}\n\t}\n\t$histogram = array_fill_keys($histogram, $high_count);\n\treturn\
    \ $histogram;\n}\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 2 in /tmp/tmpkvvgs5wl.php on line 23\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpkvvgs5wl.php:44\nStack\
    \ trace:\n#0 /tmp/tmpkvvgs5wl.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpkvvgs5wl.php\
    \ on line 44\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  // Complete this method\n  $test\
    \ = trim($test);\n  $arrTest = explode(\" \", $test);\n  //var_dump($arrTest);\n\
    \  $checkArr = array();\n  $arrResult = array();\n  if ($test != null) {\n   \
    \ for ($i = 0; $i < count($arrTest); $i++) {\n      $arrTest[$i] = strtolower($arrTest[$i]);\n\
    \      $checkArr[$arrTest[$i]] = 1;\n    }\n    //var_dump($checkArr);\n    for\
    \ ($i = 0; $i < count($arrTest); $i++) {\n      if (array_key_exists($arrTest[$i],\
    \ $checkArr)) {\n        $arrResult[$arrTest[$i]] = $checkArr[$arrTest[$i]];\n\
    \        $checkArr[$arrTest[$i]] = $checkArr[$arrTest[$i]] + 1;\n      }\n   \
    \ }\n    //var_dump($arrResult);\n    for ($i = 0; $i < count($arrTest); $i++)\
    \ {\n      if (array_key_exists($arrTest[$i], $arrResult)) {\n        if ($arrResult[$arrTest[$i]]\
    \ == $checkArr[$arrTest[$i]] - 1) {\n          $arrResult[$arrTest[$i]] = $checkArr[$arrTest[$i]]\
    \ - 1;\n        }\n      }\n    }\n    //var_dump($arrResult);\n    if (count($arrResult)\
    \ == 1) {\n      $outMax = 0;\n      $outMaxKey = null;\n      foreach ($arrResult\
    \ as $key => $value) {\n        if ($value > $outMax) {\n          $outMax = $value;\n\
    \          $outMaxKey = $key;\n        }\n      }\n      $arrResult = array($outMaxKey\
    \ => $outMax);\n    }\n    //var_dump($arrResult);\n    return $arrResult;\n \
    \ } else {\n    return $arrResult;\n  }\n}\nfunction candidate(...$args) {\n \
    \   return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuzf7svn4.php:67\n\
    Stack trace:\n#0 /tmp/tmpuzf7svn4.php(76): test()\n#1 {main}\n  thrown in /tmp/tmpuzf7svn4.php\
    \ on line 67\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $array = explode(\" \", $test);\n\
    \  $counts = array_count_values($array);\n  $best_count = max($counts);\n  $best_values\
    \ = array_keys($counts, $best_count);\n  return array_combine($best_values, array_fill(0,\
    \ count($best_values), $best_count));\n}\nfunction candidate(...$args) {\n   \
    \ return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph_csb1dx.php:34\n\
    Stack trace:\n#0 /tmp/tmph_csb1dx.php(38): test()\n#1 {main}\n  thrown in /tmp/tmph_csb1dx.php\
    \ on line 34\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n\t$letters = explode(\" \", $test);\n\
    \t\n\t$occurrence = array();\n\tforeach ($letters as $letter) {\n\t\tif (isset($occurrence[$letter]))\
    \ {\n\t\t\t$occurrence[$letter]++;\n\t\t} else {\n\t\t\t$occurrence[$letter] =\
    \ 1;\n\t\t}\n\t}\n\t\n\t$max = max($occurrence);\n\t$maxOccurrence = array();\n\
    \tforeach ($occurrence as $key => $val) {\n\t\tif ($val == $max) {\n\t\t\t$maxOccurrence[$key]\
    \ = $val;\n\t\t}\n\t}\n\t\n\treturn $maxOccurrence;\n}\n\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpygt3szta.php:50\n\
    Stack trace:\n#0 /tmp/tmpygt3szta.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpygt3szta.php\
    \ on line 50\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $letters = str_split($test);\n\
    \n    if (empty($letters)) {\n        return array();\n    }\n\n    $letterCount\
    \ = array();\n    foreach ($letters as $letter) {\n        if (empty($letterCount[$letter]))\
    \ {\n            $letterCount[$letter] = 1;\n        } else {\n            $letterCount[$letter]++;\n\
    \        }\n    }\n\n    $max = max($letterCount);\n    $letterMax = array();\n\
    \    foreach ($letterCount as $letter => $count) {\n        if ($count === $max)\
    \ {\n            $letterMax[$letter] = $count;\n        }\n    }\n\n    return\
    \ $letterMax;\n}\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr3mwknw0.php:48\n\
    Stack trace:\n#0 /tmp/tmpr3mwknw0.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpr3mwknw0.php\
    \ on line 48\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n\t$letters = explode(\" \", $test);\n\
    \t$result = array();\n\tforeach ($letters as $letter) {\n\t\tif (array_key_exists($letter,\
    \ $result)) {\n\t\t\t$result[$letter] += 1;\n\t\t} else {\n\t\t\t$result[$letter]\
    \ = 1;\n\t\t}\n\t}\n\t$max = max($result);\n\t$result = array_filter($result,\
    \ function($k) use ($max) {\n\t\treturn $k == $max;\n\t});\n\treturn $result;\n\
    }\necho \"<pre>\";\necho \"\\nhistogram(\\\"a b c\\\")\\n\";\nvar_dump(histogram(\"\
    a b c\"));\necho \"\\nhistogram(\\\"a b b a\\\")\\n\";\nvar_dump(histogram(\"\
    a b b a\"));\necho \"\\nhistogram(\\\"a b c a b\\\")\\n\";\nvar_dump(histogram(\"\
    a b c a b\"));\necho \"\\nhistogram(\\\"b b b b a\\\")\\n\";\nvar_dump(histogram(\"\
    b b b b a\"));\necho \"\\nhistogram(\\\"\\\")\\n\";\nvar_dump(histogram(\"\"));\n\
    echo \"</pre>\";\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>\nhistogram(\"a b c\")\narray(3) {\n  [\"a\"]=>\n  int(1)\n  [\"b\"\
    ]=>\n  int(1)\n  [\"c\"]=>\n  int(1)\n}\n\nhistogram(\"a b b a\")\narray(2) {\n\
    \  [\"a\"]=>\n  int(2)\n  [\"b\"]=>\n  int(2)\n}\n\nhistogram(\"a b c a b\")\n\
    array(2) {\n  [\"a\"]=>\n  int(2)\n  [\"b\"]=>\n  int(2)\n}\n\nhistogram(\"b b\
    \ b b a\")\narray(1) {\n  [\"b\"]=>\n  int(4)\n}\n\nhistogram(\"\")\narray(1)\
    \ {\n  [\"\"]=>\n  int(1)\n}\n</pre>\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp1d5uirn3.php:55\nStack trace:\n#0 /tmp/tmp1d5uirn3.php(59): test()\n\
    #1 {main}\n  thrown in /tmp/tmp1d5uirn3.php on line 55\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $strArr = explode(\" \", $test);\n\
    \  $strArrUniq = array_unique($strArr);\n  foreach ($strArrUniq as $key => $value)\
    \ {\n    $strArrUniq[$key] = substr_count($test, $value);\n  }\n  $max = max($strArrUniq);\n\
    \  $result = array();\n  foreach ($strArrUniq as $key => $value) {\n    if ($value\
    \ == $max) {\n      $result[$key] = $value;\n    }\n  }\n  return $result;\n}\n\
    echo \"<pre>\";\nprint_r(histogram(\"a b c\"));\necho \"</pre>\";\necho \"<pre>\"\
    ;\nprint_r(histogram(\"a b b a\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"\
    a b c a b\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"b b b b\
    \ a\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"\"));\necho \"\
    </pre>\";\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2,\
    \ \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => 1\n    [1] => 1\n    [2] => 1\n)\n</pre><pre>Array\n\
    (\n    [0] => 2\n    [1] => 2\n)\n</pre><pre>Array\n(\n    [0] => 2\n    [1] =>\
    \ 2\n)\n</pre><pre>Array\n(\n    [0] => 4\n)\n</pre><pre>\nFatal error: Uncaught\
    \ ValueError: substr_count(): Argument #2 ($needle) cannot be empty in /tmp/tmpsy7wtb3o.php:20\n\
    Stack trace:\n#0 /tmp/tmpsy7wtb3o.php(20): substr_count('', '')\n#1 /tmp/tmpsy7wtb3o.php(44):\
    \ histogram('')\n#2 {main}\n  thrown in /tmp/tmpsy7wtb3o.php on line 20\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  // if the input is empty, return\
    \ an empty array\n  if ($test == \"\") {\n    return [];\n  }\n\n  // split the\
    \ input string into an array of letters\n  $letter_array = str_split($test);\n\
    \n  // initialize an array to hold the letter and the count\n  $count_array =\
    \ [];\n\n  // loop through the array of letters\n  for ($i = 0; $i < count($letter_array);\
    \ $i++) {\n    // get the current letter\n    $current_letter = $letter_array[$i];\n\
    \n    // initialize the count to 0\n    $count = 0;\n\n    // loop through the\
    \ array of letters\n    for ($j = 0; $j < count($letter_array); $j++) {\n    \
    \  // get the current letter\n      $current_letter = $letter_array[$j];\n\n \
    \     // check if the current letter is the same as the previous one\n      if\
    \ ($current_letter == $letter_array[$i]) {\n        // increment the count\n \
    \       $count++;\n      }\n    }\n\n    // add the letter and the count to the\
    \ array\n    $count_array[$current_letter] = $count;\n  }\n\n  // create a new\
    \ array to hold the letters with the highest count\n  $letters_with_highest_count\
    \ = [];\n\n  // get the maximum count\n  $max_count = max($count_array);\n\n \
    \ // loop through the count array\n  foreach ($count_array as $letter => $count)\
    \ {\n    // check if the count is the same as the max count\n    if ($count ==\
    \ $max_count) {\n      // add the letter and the count to the array\n      $letters_with_highest_count[$letter]\
    \ = $count;\n    }\n  }\n\n  // return the array of letters with the highest count\n\
    \  return $letters_with_highest_count;\n}\nfunction candidate(...$args) {\n  \
    \  return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1wckb7dp.php:75\n\
    Stack trace:\n#0 /tmp/tmp1wckb7dp.php(85): test()\n#1 {main}\n  thrown in /tmp/tmp1wckb7dp.php\
    \ on line 75\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $letters = explode(\" \", $test);\n\
    \  $count = array_count_values($letters);\n  $max = max($count);\n  foreach ($count\
    \ as $key => $value) {\n    if ($value != $max) {\n      unset($count[$key]);\n\
    \    }\n  }\n  print_r($count);\n}\n\nhistogram(\"a b c\");\nhistogram(\"a b b\
    \ a\");\nhistogram(\"a b c a b\");\nhistogram(\"b b b b a\");\nhistogram(\"\"\
    );\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\nArray\n(\n    [a] => 2\n    [b] =>\
    \ 2\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphnsbp2of.php:39\n\
    Stack trace:\n#0 /tmp/tmphnsbp2of.php(49): test()\n#1 {main}\n  thrown in /tmp/tmphnsbp2of.php\
    \ on line 39\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $arr = str_split($test);\n  $final_array\
    \ = array();\n  $sorted_array = array();\n  $answer = array();\n  $num = 0;\n\
    \  foreach ($arr as $value) {\n    if (!isset($final_array[$value])) {\n     \
    \ $final_array[$value] = 1;\n    } else {\n      $final_array[$value]++;\n   \
    \ }\n  }\n  foreach ($final_array as $key => $value) {\n    $sorted_array[$value][]\
    \ = $key;\n  }\n  $count = max(array_keys($sorted_array));\n  foreach ($sorted_array[$count]\
    \ as $value) {\n    $answer[$value] = $count;\n  }\n  return $answer;\n}\nfunction\
    \ candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" => 2)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a b\") !==\
    \ array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\" => 1,\
    \ \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !== array(\"\
    b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"r t\
    \ g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp1lyvka4.php:43\n\
    Stack trace:\n#0 /tmp/tmpp1lyvka4.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpp1lyvka4.php\
    \ on line 43\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $arr = explode(\" \", $test);\n\
    \    $counts = array_count_values($arr);\n    $max = max($counts);\n    $mostFrequent\
    \ = array_filter($counts, function($value) use ($max) {\n        return $value\
    \ == $max;\n    });\n    return $mostFrequent;\n}\n\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvkvn_hbo.php:37\n\
    Stack trace:\n#0 /tmp/tmpvkvn_hbo.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpvkvn_hbo.php\
    \ on line 37\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $counts = array_count_values($test);\n    $counts = array_flip($counts);\n\
    \    $counts = array_intersect_key($counts, $counts);\n    $result = array();\n\
    \    $answer = [];\n    foreach ($counts as $key => $value) {\n        $result[$key]\
    \ = count($value);\n    }\n    $max = max($result);\n    foreach ($result as $key\
    \ => $value) {\n        if ($value == $max) {\n            $answer[$key] = $value;\n\
    \        }\n    }\n    return $answer;\n}\nprint_r(histogram(\"a b c\"));\nprint_r(histogram(\"\
    a b b a\"));\nprint_r(histogram(\"a b c a b\"));\nprint_r(histogram(\"b b b b\
    \ a\"));\nprint_r(histogram(\"\"));\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: count(): Argument #1 ($value) must be\
    \ of type Countable|array, string given in /tmp/tmpqw6y9hu5.php:24\nStack trace:\n\
    #0 /tmp/tmpqw6y9hu5.php(34): histogram(Array)\n#1 {main}\n  thrown in /tmp/tmpqw6y9hu5.php\
    \ on line 24\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $newArray = array();\n    foreach ($test as $char) {\n        $newArray[]\
    \ = $char;\n    }\n    $newArray = array_count_values($newArray);\n    $values\
    \ = array_values($newArray);\n    $max = max($values);\n    $maxArray = array();\n\
    \    foreach ($newArray as $key => $value) {\n        if ($value == $max) {\n\
    \            $maxArray[$key] = $value;\n        }\n    }\n    return $maxArray;\n\
    }\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_o5w3k1g.php:44\n\
    Stack trace:\n#0 /tmp/tmp_o5w3k1g.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp_o5w3k1g.php\
    \ on line 44\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $array = explode(\" \", $test);\n\
    \    $hist = array();\n    foreach ($array as $letter) {\n        if (array_key_exists($letter,\
    \ $hist)) {\n            $hist[$letter]++;\n        } else {\n            $hist[$letter]\
    \ = 1;\n        }\n    }\n    return $hist;\n}\necho implode(histogram(\"b b b\
    \ b a\"), \",\");\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: implode(): Argument #2 ($array) must\
    \ be of type ?array, string given in /tmp/tmpv5g1bseq.php:28\nStack trace:\n#0\
    \ /tmp/tmpv5g1bseq.php(28): implode(Array, ',')\n#1 {main}\n  thrown in /tmp/tmpv5g1bseq.php\
    \ on line 28\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $count = array();\n  $letters\
    \ = explode(\" \", $test);\n  $max = 0;\n  foreach ($letters as $letter) {\n \
    \   if (isset($count[$letter])) {\n      $count[$letter]++;\n    } else {\n  \
    \    $count[$letter] = 1;\n    }\n    if ($count[$letter] > $max) {\n      $max\
    \ = $count[$letter];\n    }\n  }\n  $output = array();\n  foreach ($count as $key\
    \ => $value) {\n    if ($value == $max) {\n      $output[$key] = $value;\n   \
    \ }\n  }\n  return $output;\n}\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8hue_9vs.php:50\n\
    Stack trace:\n#0 /tmp/tmp8hue_9vs.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp8hue_9vs.php\
    \ on line 50\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $array\
    \ = explode(\" \", $test);\n  $array_count = array_count_values($array);\n  arsort($array_count);\n\
    \  foreach ($array_count as $key => $value) {\n    if ($value >= max($array_count))\
    \ {\n      $histogram[$key] = $value;\n    }\n  }\n  return $histogram;\n}\nfunction\
    \ candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" => 2)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a b\") !==\
    \ array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\" => 1,\
    \ \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !== array(\"\
    b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"r t\
    \ g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpja_y9nsk.php:39\n\
    Stack trace:\n#0 /tmp/tmpja_y9nsk.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpja_y9nsk.php\
    \ on line 39\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $arr = explode(\" \", $test);\n\
    \  $hist = array();\n  for ($i = 0; $i < count($arr); $i++) {\n    $key = $arr[$i];\n\
    \    if (!isset($hist[$key])) {\n      $hist[$key] = 1;\n    } else {\n      $hist[$key]\
    \ += 1;\n    }\n  }\n  return $hist;\n}\n\nfunction candidate(...$args) {\n  \
    \  return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptg9ibjqy.php:36\n\
    Stack trace:\n#0 /tmp/tmptg9ibjqy.php(45): test()\n#1 {main}\n  thrown in /tmp/tmptg9ibjqy.php\
    \ on line 36\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $test = str_replace(' ', '',\
    \ $test);\n    $array = str_split($test);\n    $res = array_count_values($array);\n\
    \    $max = max($res);\n    $result = array();\n    foreach ($res as $k => $v)\
    \ {\n        if ($v == $max) {\n            $result[$k] = $v;\n        }\n   \
    \ }\n    return $result;\n}\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp00nyrca9.php:40\n\
    Stack trace:\n#0 /tmp/tmp00nyrca9.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp00nyrca9.php\
    \ on line 40\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n\t$arr = explode(\" \", $test);\n\
    \t$max = 0;\n\t$lst = array();\n\tfor ($i = 0; $i < count($arr); $i++) {\n\t\t\
    $sum = 0;\n\t\tfor ($j = 0; $j < count($arr); $j++) {\n\t\t\tif ($arr[$i] == $arr[$j])\
    \ {\n\t\t\t\t$sum++;\n\t\t\t}\n\t\t}\n\t\tif ($sum > $max) {\n\t\t\t$max = $sum;\n\
    \t\t\t$lst = array($arr[$i] => $sum);\n\t\t} else if ($sum == $max) {\n\t\t\t\
    $lst[$arr[$i]] = $sum;\n\t\t}\n\t}\n\treturn $lst;\n}\n\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppr34tjfg.php:48\n\
    Stack trace:\n#0 /tmp/tmppr34tjfg.php(52): test()\n#1 {main}\n  thrown in /tmp/tmppr34tjfg.php\
    \ on line 48\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $split_test = explode(\" \", $test);\n\
    \  $result = array();\n  for ($i = 0; $i < count($split_test); $i++) {\n    $letter\
    \ = $split_test[$i];\n    if (!array_key_exists($letter, $result)) {\n      $result[$letter]\
    \ = 1;\n    } else {\n      $result[$letter] += 1;\n    }\n  }\n  $max = 0;\n\
    \  foreach ($result as $letter => $value) {\n    if ($value > $max) {\n      $max\
    \ = $value;\n    }\n  }\n  return array_intersect_key($result, array_flip(array_keys($result,\
    \ $max)));\n}\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc1vpjjnl.php:47\n\
    Stack trace:\n#0 /tmp/tmpc1vpjjnl.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpc1vpjjnl.php\
    \ on line 47\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $haystack = str_split($test);\n\
    \  $haystack = array_count_values($haystack);\n  asort($haystack);\n  $value =\
    \ array_pop($haystack);\n  $result = array_keys($haystack, $value);\n  foreach\
    \ ($result as $key => $value) {\n    $result[$key] = $value . \"=>\" . $value;\n\
    \  }\n  return $result;\n}\nprint_r(histogram(\"a b c\"));\necho \"<br/>\";\n\
    print_r(histogram(\"a b b a\"));\necho \"<br/>\";\nprint_r(histogram(\"a b c a\
    \ b\"));\necho \"<br/>\";\nprint_r(histogram(\"b b b b a\"));\necho \"<br/>\"\
    ;\nprint_r(histogram(\"\"));\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\n<br/>Array\n(\n)\n<br/>Array\n(\n)\n<br/>Array\n(\n    [0]\
    \ => b=>b\n)\n<br/>Array\n(\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpng3vwida.php:41\nStack trace:\n#0 /tmp/tmpng3vwida.php(51): test()\n\
    #1 {main}\n  thrown in /tmp/tmpng3vwida.php on line 41\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $array = explode(\" \", $test);\n\
    \    $results = array();\n    for ($i = 0; $i < count($array); $i++) {\n     \
    \   if (!array_key_exists($array[$i], $results)) {\n            $results[$array[$i]]\
    \ = 1;\n        } else {\n            $results[$array[$i]]++;\n        }\n   \
    \ }\n    $max = max($results);\n    foreach ($results as $key => $value) {\n \
    \       if ($value < $max) {\n            unset($results[$key]);\n        }\n\
    \    }\n    return $results;\n}\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd0bmlku_.php:45\n\
    Stack trace:\n#0 /tmp/tmpd0bmlku_.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpd0bmlku_.php\
    \ on line 45\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $result = array();\n  $test_array\
    \ = explode(\" \", $test);\n  foreach ($test_array as $test_array_value) {\n \
    \   if(!array_key_exists($test_array_value, $result)) {\n      $result[$test_array_value]\
    \ = 1;\n    } else {\n      $result[$test_array_value]++;\n    }\n  }\n  return\
    \ $result;\n}\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpso77mio8.php:34\n\
    Stack trace:\n#0 /tmp/tmpso77mio8.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpso77mio8.php\
    \ on line 34\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $result = [];\n    $result2\
    \ = [];\n    $arr = explode(\" \", $test);\n    foreach ($arr as $v) {\n     \
    \   if (in_array($v, $result)) {\n            $result2[$v] = $result2[$v] + 1;\n\
    \        } else {\n            $result[] = $v;\n            $result2[$v] = 1;\n\
    \        }\n    }\n    echo \"<pre>\";\n    print_r($result2);\n    echo \"</pre>\"\
    ;\n    return $result2;\n}\n\nhistogram(\"a b c\");\nhistogram(\"a b b a\");\n\
    histogram(\"a b c a b\");\nhistogram(\"b b b b a\");\nhistogram(\"\");\nfunction\
    \ candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" => 2)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a b\") !==\
    \ array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\" => 1,\
    \ \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !== array(\"\
    b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"r t\
    \ g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n</pre><pre>Array\n\
    (\n    [a] => 2\n    [b] => 2\n)\n</pre><pre>Array\n(\n    [a] => 2\n    [b] =>\
    \ 2\n    [c] => 1\n)\n</pre><pre>Array\n(\n    [b] => 4\n    [a] => 1\n)\n</pre><pre>Array\n\
    (\n    [] => 1\n)\n</pre><pre>Array\n(\n    [a] => 2\n    [b] => 2\n)\n</pre><pre>Array\n\
    (\n    [a] => 2\n    [b] => 2\n    [c] => 1\n)\n</pre>\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpf6m6mzbd.php:45\nStack trace:\n#0 /tmp/tmpf6m6mzbd.php(54):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpf6m6mzbd.php on line 45\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $array = array();\n    $maxCount = 0;\n    foreach ($test as $i) {\n    \
    \    if (isset($array[$i])) {\n            $array[$i]++;\n        } else {\n \
    \           $array[$i] = 1;\n        }\n        if ($array[$i] > $maxCount) {\n\
    \            $maxCount = $array[$i];\n        }\n    }\n    foreach ($array as\
    \ $key => $value) {\n        if ($value != $maxCount) {\n            unset($array[$key]);\n\
    \        }\n    }\n    return $array;\n}\n$test = readline(\"Enter a string representing\
    \ a space separated lowercase letters:\");\necho \"Histogram of $test:\\n\";\n\
    print_r(histogram($test));\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function readline() in\
    \ /tmp/tmpctx4x3mr.php:37\nStack trace:\n#0 {main}\n  thrown in /tmp/tmpctx4x3mr.php\
    \ on line 37\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n\t$testArray = explode(\" \", $test);\n\
    \t$arrayCount = array_count_values($testArray);\n\t$big = 0;\n\tforeach ($arrayCount\
    \ as $count => $num) {\n\t\tif ($num > $big) {\n\t\t\t$big = $num;\n\t\t}\n\t\
    }\n\tforeach ($arrayCount as $count => $num) {\n\t\tif ($num < $big) {\n\t\t\t\
    unset($arrayCount[$count]);\n\t\t}\n\t}\n\treturn $arrayCount;\n}\nprint_r(histogram(\"\
    a b c\"));\nprint_r(histogram(\"a b b a\"));\nprint_r(histogram(\"a b c a b\"\
    ));\nprint_r(histogram(\"b b b b a\"));\nprint_r(histogram(\"\"));\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmphfp2atdv.php:48\nStack trace:\n#0 /tmp/tmphfp2atdv.php(52):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmphfp2atdv.php on line 48\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $exp = explode(\" \", $test);\n\
    \  $temp = [];\n  $result = [];\n  foreach ($exp as $letter) {\n    if (!isset($temp[$letter]))\
    \ {\n      $temp[$letter] = 1;\n    } else {\n      $temp[$letter] += 1;\n   \
    \ }\n  }\n  $max = 0;\n  foreach ($temp as $key => $value) {\n    if ($value >\
    \ $max) {\n      $max = $value;\n    }\n  }\n  foreach ($temp as $key => $value)\
    \ {\n    if ($value == $max) {\n      $result[$key] = $value;\n    }\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp90alwvas.php:52\n\
    Stack trace:\n#0 /tmp/tmp90alwvas.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp90alwvas.php\
    \ on line 52\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $results = array();\n  $s = explode(\"\
    \ \", $test);\n  if ($s != null) {\n    $temp = array_count_values($s);\n    $max\
    \ = max($temp);\n    $keys = array_keys($temp, $max);\n    foreach ($keys as $key)\
    \ {\n      $results[$key] = $max;\n    }\n  }\n  return $results;\n}\n\nfunction\
    \ candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" => 2)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a b\") !==\
    \ array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\" => 1,\
    \ \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !== array(\"\
    b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"r t\
    \ g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpojcrww0a.php:41\n\
    Stack trace:\n#0 /tmp/tmpojcrww0a.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpojcrww0a.php\
    \ on line 41\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n\t$new_array = explode(\" \", $test);\n\
    \t$array_size = count($new_array);\n\t$array_max = $new_array[0];\n\t$array_max_count\
    \ = 1;\n\t$array_max_values = array();\n\t$array_max_values[0] = $new_array[0];\n\
    \t$array_last_value = $new_array[0];\n\t$array_last_value_count = 1;\n\tfor ($i\
    \ = 1; $i < $array_size; $i++) {\n\t\tif ($new_array[$i] === $array_last_value)\
    \ {\n\t\t\t$array_last_value_count++;\n\t\t} else {\n\t\t\tif ($array_last_value_count\
    \ > $array_max_count) {\n\t\t\t\t$array_max_count = $array_last_value_count;\n\
    \t\t\t\t$array_max = $array_last_value;\n\t\t\t\t$array_max_values = array();\n\
    \t\t\t\t$array_max_values[0] = $array_last_value;\n\t\t\t} else if ($array_last_value_count\
    \ === $array_max_count) {\n\t\t\t\t$array_max_values[] = $array_last_value;\n\t\
    \t\t}\n\t\t\t$array_last_value = $new_array[$i];\n\t\t\t$array_last_value_count\
    \ = 1;\n\t\t}\n\t}\n\tif ($array_last_value_count > $array_max_count) {\n\t\t\
    $array_max_count = $array_last_value_count;\n\t\t$array_max = $array_last_value;\n\
    \t\t$array_max_values = array();\n\t\t$array_max_values[0] = $array_last_value;\n\
    \t} else if ($array_last_value_count === $array_max_count) {\n\t\t$array_max_values[]\
    \ = $array_last_value;\n\t}\n\t$res = array();\n\tforeach ($array_max_values as\
    \ $value) {\n\t\t$res\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpili7ycyd.php
    on line 52

    '
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $word_array = explode(\" \"\
    , $test);\n    $counts = array_count_values($word_array);\n    arsort($counts);\n\
    \    reset($counts);\n    $max = current($counts);\n    $results = array();\n\
    \    foreach ($counts as $key => $value) {\n        if ($value == $max) {\n  \
    \          $results[$key] = $value;\n        }\n    }\n    return $results;\n\
    }\n$test1 = \"a b c\";\n$test2 = \"a b b a\";\n$test3 = \"a b c a b\";\n$test4\
    \ = \"b b b b a\";\n$test5 = \"\";\nprint_r(histogram($test1));\nprint_r(histogram($test2));\n\
    print_r(histogram($test3));\nprint_r(histogram($test4));\nprint_r(histogram($test5));\n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpy3rznioe.php:51\nStack trace:\n#0 /tmp/tmpy3rznioe.php(55):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpy3rznioe.php on line 51\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $letters = explode(\" \", $test);\n\
    \    $letter_array = array();\n    $highest_count = 0;\n    foreach ($letters\
    \ as $key => $value) {\n        if (isset($letter_array[$value])) {\n        \
    \    $letter_array[$value]++;\n        } else {\n            $letter_array[$value]\
    \ = 1;\n        }\n        if ($letter_array[$value] > $highest_count) {\n   \
    \         $highest_count = $letter_array[$value];\n        }\n    }\n    $highest_count_array\
    \ = array();\n    foreach ($letter_array as $key => $value) {\n        if ($value\
    \ == $highest_count) {\n            $highest_count_array[$key] = $value;\n   \
    \     }\n    }\n    return $highest_count_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpksvou096.php:50\n\
    Stack trace:\n#0 /tmp/tmpksvou096.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpksvou096.php\
    \ on line 50\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $results = array();\n    $index\
    \ = 0;\n    $max = 0;\n    $words = explode(\" \", $test);\n    $alphabet = array(\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"\
    w\", \"x\", \"y\", \"z\");\n    foreach ($alphabet as $char) {\n        $count\
    \ = 0;\n        foreach ($words as $word) {\n            if ($char == $word) {\n\
    \                $count++;\n            }\n        }\n        if ($count > $max)\
    \ {\n            $max = $count;\n        }\n        $results[$char] = $count;\n\
    \    }\n    foreach ($results as $char => $value) {\n        if ($value != $max)\
    \ {\n            unset($results[$char]);\n        }\n    }\n    return $results;\n\
    }\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvmbfmq0m.php:49\n\
    Stack trace:\n#0 /tmp/tmpvmbfmq0m.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpvmbfmq0m.php\
    \ on line 49\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $test_array = str_split($test);\n\
    \    $results = array();\n    foreach ($test_array as $key => $value) {\n    \
    \    if (!empty($value)) {\n            if (array_key_exists($value, $results))\
    \ {\n                $results[$value]++;\n            } else {\n             \
    \   $results[$value] = 1;\n            }\n        }\n    }\n    return $results;\n\
    }\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7lhqac7p.php:36\n\
    Stack trace:\n#0 /tmp/tmp7lhqac7p.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp7lhqac7p.php\
    \ on line 36\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n\t$arr = explode(\" \", $test);\n\
    \t$res = array();\n\tforeach ($arr as $val) {\n\t\tif (!isset($res[$val]))\n\t\
    \t\t$res[$val] = 1;\n\t\telse\n\t\t\t$res[$val]++;\n\t}\n\t$keys = array_keys($res,\
    \ max($res));\n\t$final = array();\n\tforeach ($keys as $key) {\n\t\t$final[$key]\
    \ = $res[$key];\n\t}\n\treturn $final;\n}\necho \"\\n\";\nprint_r(histogram(\"\
    a b c\"));\necho \"\\n\";\nprint_r(histogram(\"a b b a\"));\necho \"\\n\";\nprint_r(histogram(\"\
    a b c a b\"));\necho \"\\n\";\nprint_r(histogram(\"b b b b a\"));\necho \"\\n\"\
    ;\nprint_r(histogram(\"\"));\necho \"\\n\";\nfunction candidate(...$args) {\n\
    \    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nArray\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n\nArray\n(\n \
    \   [a] => 2\n    [b] => 2\n)\n\nArray\n(\n    [a] => 2\n    [b] => 2\n)\n\nArray\n\
    (\n    [b] => 4\n)\n\nArray\n(\n    [] => 1\n)\n\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpmgwnzll7.php:54\nStack trace:\n#0 /tmp/tmpmgwnzll7.php(58):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpmgwnzll7.php on line 54\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  // get array of letter\n  $letters\
    \ = explode(\" \", $test);\n  // get max count of a letter\n  $maxCount = max(array_count_values($letters));\n\
    \  // return letter with max count\n  return array_filter($letters, function($letter)\
    \ use ($maxCount) {\n    return array_count_values($letters)[$letter] == $maxCount;\n\
    \  });\n}\n\n$test_cases = array(\n  array(\n    \"test\" => \"a b c\",\n    \"\
    result\" => array(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n  ),\n  array(\n    \"\
    test\" => \"a b b a\",\n    \"result\" => array(\"a\" => 2, \"b\" => 2)\n  ),\n\
    \  array(\n    \"test\" => \"a b c a b\",\n    \"result\" => array(\"a\" => 2,\
    \ \"b\" => 2)\n  ),\n  array(\n    \"test\" => \"b b b b a\",\n    \"result\"\
    \ => array(\"b\" => 4)\n  ),\n  array(\n    \"test\" => \"\",\n    \"result\"\
    \ => array()\n  )\n);\n\nforeach ($test_cases as $key => $value) {\n  echo \"\
    Testing \" . $value[\"test\"] . \"\\n\";\n  $result = histogram($value[\"test\"\
    ]);\n  if ($result === $value[\"result\"]) {\n    echo \"Test case passed.\\n\"\
    ;\n  } else {\n    echo \"Test case failed.\\n\";\n  }\n}\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Testing a b c\n\nWarning: Undefined variable $letters in /tmp/tmp__vpni5k.php\
    \ on line 23\n\nFatal error: Uncaught TypeError: array_count_values(): Argument\
    \ #1 ($array) must be of type array, null given in /tmp/tmp__vpni5k.php:23\nStack\
    \ trace:\n#0 /tmp/tmp__vpni5k.php(23): array_count_values(NULL)\n#1 [internal\
    \ function]: {closure}('a')\n#2 /tmp/tmp__vpni5k.php(24): array_filter(Array,\
    \ Object(Closure))\n#3 /tmp/tmp__vpni5k.php(52): histogram('a b c')\n#4 {main}\n\
    \  thrown in /tmp/tmp__vpni5k.php on line 23\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $arr = explode(\" \", $test);\n\
    \  $res = array();\n  foreach ($arr as $value) {\n    if (isset($res[$value]))\
    \ {\n      $res[$value]++;\n    } else {\n      $res[$value] = 1;\n    }\n  }\n\
    \  asort($res);\n  $max = array_pop($res);\n  $final = array();\n  foreach ($res\
    \ as $key => $value) {\n    if ($value == $max) {\n      $final[$key] = $value;\n\
    \    }\n  }\n  return $final;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpic9uiqwr.php:42\n\
    Stack trace:\n#0 /tmp/tmpic9uiqwr.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpic9uiqwr.php\
    \ on line 42\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = explode(\" \", $test);\n  foreach ($letters as $key => $value) {\n    if (array_key_exists($value,\
    \ $histogram)) {\n      $histogram[$value]++;\n    } else {\n      $histogram[$value]\
    \ = 1;\n    }\n  }\n  return $histogram;\n}\n\nfunction candidate(...$args) {\n\
    \    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr4jkk4qo.php:35\n\
    Stack trace:\n#0 /tmp/tmpr4jkk4qo.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpr4jkk4qo.php\
    \ on line 35\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $max\
    \ = 0;\n  $letters = array();\n  $test = explode(\" \", $test);\n  foreach ($test\
    \ as $letter) {\n    if (isset($histogram[$letter])) {\n      $histogram[$letter]++;\n\
    \    } else {\n      $histogram[$letter] = 1;\n    }\n    if ($histogram[$letter]\
    \ > $max) {\n      $max = $histogram[$letter];\n      $letters = array($letter\
    \ => $max);\n    } elseif ($histogram[$letter] == $max) {\n      $letters[$letter]\
    \ = $max;\n    }\n  }\n  return $letters;\n}\nfunction candidate(...$args) {\n\
    \    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7x0tg_ju.php:41\n\
    Stack trace:\n#0 /tmp/tmp7x0tg_ju.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp7x0tg_ju.php\
    \ on line 41\n"
  timestamp: 1660028576
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $test = str_split($test);\n  $result\
    \ = array();\n  $k = 0;\n  for ($i = 0; $i < count($test); $i++) {\n    if ($test[$i]\
    \ == ' ') {\n      $k = 0;\n    } else {\n      $k++;\n      if (array_key_exists($test[$i],\
    \ $result)) {\n        $result[$test[$i]] = $k;\n      } else {\n        $result[$test[$i]]\
    \ = 1;\n      }\n    }\n  }\n  arsort($result);\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" => 2)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a b\") !==\
    \ array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\" => 1,\
    \ \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !== array(\"\
    b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"r t\
    \ g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm6yqixrj.php:41\n\
    Stack trace:\n#0 /tmp/tmpm6yqixrj.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpm6yqixrj.php\
    \ on line 41\n"
  timestamp: 1660028576
