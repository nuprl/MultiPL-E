language: php
name: HumanEval_81_numerical_letter_grade
results:
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $result = [];\n    foreach ($grades as $grade) {\n        switch (true)\
    \ {\n            case $grade >= 4.0:\n                $result[] = \"A+\";\n  \
    \              break;\n            case $grade >= 3.7:\n                $result[]\
    \ = \"A\";\n                break;\n            case $grade >= 3.3:\n        \
    \        $result[] = \"A-\";\n                break;\n            case $grade\
    \ >= 3.0:\n                $result[] = \"B+\";\n                break;\n     \
    \       case $grade >= 2.7:\n                $result[] = \"B\";\n            \
    \    break;\n            case $grade >= 2.3:\n                $result[] = \"B-\"\
    ;\n                break;\n            case $grade >= 2.0:\n                $result[]\
    \ = \"C+\";\n                break;\n            case $grade >= 1.7:\n       \
    \         $result[] = \"C\";\n                break;\n            case $grade\
    \ >= 1.3:\n                $result[] = \"C-\";\n                break;\n     \
    \       case $grade >= 1.0:\n                $result[] = \"D+\";\n           \
    \     break;\n            case $grade >= 0.7:\n                $result[] = \"\
    D\";\n                break;\n            case $grade >= 0.0:\n              \
    \  $result[] = \"D-\";\n                break;\n            default:\n       \
    \         $result[] = \"E\";\n                break;\n        }\n    }\n    return\
    \ $result;\n}\n\n$grades = [4.0, 3, 1.7, 2, 3.5];\nvar_dump(numerical_letter_grade($grades));\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(5) {\n  [0]=>\n  string(2) \"A+\"\n  [1]=>\n  string(2) \"B+\"\n\
    \  [2]=>\n  string(1) \"C\"\n  [3]=>\n  string(2) \"C+\"\n  [4]=>\n  string(2)\
    \ \"A-\"\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvc6gsdeh.php:79\n\
    Stack trace:\n#0 /tmp/tmpvc6gsdeh.php(87): test()\n#1 {main}\n  thrown in /tmp/tmpvc6gsdeh.php\
    \ on line 79\n"
  timestamp: 1659824568
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n\t$new_array = array();\n\tforeach ($grades as $grade) {\n\t\tif ($grade\
    \ >= 4.0) {\n\t\t\t$new_array[] = \"A+\";\n\t\t} elseif ($grade >= 3.7) {\n\t\t\
    \t$new_array[] = \"A\";\n\t\t} elseif ($grade >= 3.3) {\n\t\t\t$new_array[] =\
    \ \"A-\";\n\t\t} elseif ($grade >= 3.0) {\n\t\t\t$new_array[] = \"B+\";\n\t\t\
    } elseif ($grade >= 2.7) {\n\t\t\t$new_array[] = \"B\";\n\t\t} elseif ($grade\
    \ >= 2.3) {\n\t\t\t$new_array[] = \"B-\";\n\t\t} elseif ($grade >= 2.0) {\n\t\t\
    \t$new_array[] = \"C+\";\n\t\t} elseif ($grade >= 1.7) {\n\t\t\t$new_array[] =\
    \ \"C\";\n\t\t} elseif ($grade >= 1.3) {\n\t\t\t$new_array[] = \"C-\";\n\t\t}\
    \ elseif ($grade >= 1.0) {\n\t\t\t$new_array[] = \"D+\";\n\t\t} elseif ($grade\
    \ >= 0.7) {\n\t\t\t$new_array[] = \"D\";\n\t\t} elseif ($grade >= 0.0) {\n\t\t\
    \t$new_array[] = \"D-\";\n\t\t} else {\n\t\t\t$new_array[] = \"E\";\n\t\t}\n\t\
    }\n\treturn $new_array;\n}\necho \"<pre>\";\nprint_r(numerical_letter_grade(array(4.0,\
    \ 3, 1.7, 2, 3.5)));\necho \"</pre>\";\nfunction candidate(...$args) {\n    return\
    \ numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4.0,\
    \ 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.2)) !== array(\"D+\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5)) !==\
    \ array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n\
    \    [4] => A-\n)\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsj3h19i3.php:65\n\
    Stack trace:\n#0 /tmp/tmpsj3h19i3.php(73): test()\n#1 {main}\n  thrown in /tmp/tmpsj3h19i3.php\
    \ on line 65\n"
  timestamp: 1659824568
- exit_code: 0
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $newGrades = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ == 4.0) {\n            $newGrades[] = \"A+\";\n        } elseif ($grade > 3.7)\
    \ {\n            $newGrades[] = \"A\";\n        } elseif ($grade > 3.3) {\n  \
    \          $newGrades[] = \"A-\";\n        } elseif ($grade > 3.0) {\n       \
    \     $newGrades[] = \"B+\";\n        } elseif ($grade > 2.7) {\n            $newGrades[]\
    \ = \"B\";\n        } elseif ($grade > 2.3) {\n            $newGrades[] = \"B-\"\
    ;\n        } elseif ($grade > 2.0) {\n            $newGrades[] = \"C+\";\n   \
    \     } elseif ($grade > 1.7) {\n            $newGrades[] = \"C\";\n        }\
    \ elseif ($grade > 1.3) {\n            $newGrades[] = \"C-\";\n        } elseif\
    \ ($grade > 1.0) {\n            $newGrades[] = \"D+\";\n        } elseif ($grade\
    \ > 0.7) {\n            $newGrades[] = \"D\";\n        } elseif ($grade > 0.0)\
    \ {\n            $newGrades[] = \"D-\";\n        } else {\n            $newGrades[]\
    \ = \"E\";\n        }\n    }\n    return $newGrades;\n}\n$grades = [4.0, 3, 1.7,\
    \ 2, 3.5];\n$result = numerical_letter_grade($grades);\nprint_r($result);\nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => A+\n    [1] => B\n    [2] => C-\n    [3] => C\n  \
    \  [4] => A-\n)\n"
  timestamp: 1659824568
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map(function($grade) {\n        $rounded = round($grade,\
    \ 1);\n        if ($rounded == 4.0) return \"A+\";\n        if ($rounded >= 3.7)\
    \ return \"A\";\n        if ($rounded >= 3.3) return \"A-\";\n        if ($rounded\
    \ >= 3.0) return \"B+\";\n        if ($rounded >= 2.7) return \"B\";\n       \
    \ if ($rounded >= 2.3) return \"B-\";\n        if ($rounded >= 2.0) return \"\
    C+\";\n        if ($rounded >= 1.7) return \"C\";\n        if ($rounded >= 1.3)\
    \ return \"C-\";\n        if ($rounded >= 1.0) return \"D+\";\n        if ($rounded\
    \ >= 0.7) return \"D\";\n        if ($rounded >= 0.0) return \"D-\";\n       \
    \ return \"E\";\n    }, $grades);\n    return $grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4b5k700r.php:49\n\
    Stack trace:\n#0 /tmp/tmp4b5k700r.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp4b5k700r.php\
    \ on line 49\n"
  timestamp: 1659824568
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $output = [];\n    $count = count($grades);\n    $letter_grade = array(\"\
    A+\",\"A\",\"A-\",\"B+\",\"B\",\"B-\",\"C+\",\"C\",\"C-\",\"D+\",\"D\",\"D-\"\
    ,\"E\");\n    $numerical_grade = array(4.0,3.7,3.3,3.0,2.7,2.3,2.0,1.7,1.3,1.0,0.7,0.0,0.0);\n\
    \    $grade_count = count($numerical_grade);\n    for ($i=0; $i < $count; $i++)\
    \ { \n        $value = $grades[$i];\n        for ($j=0; $j < $grade_count; $j++)\
    \ { \n            if ($value >= $numerical_grade[$j]) {\n                $output[]\
    \ = $letter_grade[$j];\n                break;\n            }\n        }\n   \
    \ }\n    return $output;\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6cid8dil.php:47\n\
    Stack trace:\n#0 /tmp/tmp6cid8dil.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp6cid8dil.php\
    \ on line 47\n"
  timestamp: 1659824568
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $result = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ >= 4.0) {\n            $result[] = \"A+\";\n        } elseif ($grade >= 3.7)\
    \ {\n            $result[] = \"A\";\n        } elseif ($grade >= 3.3) {\n    \
    \        $result[] = \"A-\";\n        } elseif ($grade >= 3.0) {\n           \
    \ $result[] = \"B+\";\n        } elseif ($grade >= 2.7) {\n            $result[]\
    \ = \"B\";\n        } elseif ($grade >= 2.3) {\n            $result[] = \"B-\"\
    ;\n        } elseif ($grade >= 2.0) {\n            $result[] = \"C+\";\n     \
    \   } elseif ($grade >= 1.7) {\n            $result[] = \"C\";\n        } elseif\
    \ ($grade >= 1.3) {\n            $result[] = \"C-\";\n        } elseif ($grade\
    \ >= 1.0) {\n            $result[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $result[] = \"D\";\n        } elseif ($grade >= 0.0) {\n    \
    \        $result[] = \"D-\";\n        } else {\n            $result[] = \"E\"\
    ;\n        }\n    }\n    return $result;\n}\n\n$grades = [4.0, 3, 1.7, 2, 3.5];\n\
    print_r(numerical_letter_grade($grades));\n\nfunction candidate(...$args) {\n\
    \    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpplle7moi.php:66\n\
    Stack trace:\n#0 /tmp/tmpplle7moi.php(74): test()\n#1 {main}\n  thrown in /tmp/tmpplle7moi.php\
    \ on line 66\n"
  timestamp: 1659824568
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades_numerical = [];\n    foreach ($grades as $value) {\n        switch\
    \ ($value) {\n            case $value >= 4.0:\n                $grades_numerical[]\
    \ = \"A+\";\n                break;\n            case $value > 3.7:\n        \
    \        $grades_numerical[] = \"A\";\n                break;\n            case\
    \ $value > 3.3:\n                $grades_numerical[] = \"A-\";\n             \
    \   break;\n            case $value > 3.0:\n                $grades_numerical[]\
    \ = \"B+\";\n                break;\n            case $value > 2.7:\n        \
    \        $grades_numerical[] = \"B\";\n                break;\n            case\
    \ $value > 2.3:\n                $grades_numerical[] = \"B-\";\n             \
    \   break;\n            case $value > 2.0:\n                $grades_numerical[]\
    \ = \"C+\";\n                break;\n            case $value > 1.7:\n        \
    \        $grades_numerical[] = \"C\";\n                break;\n            case\
    \ $value > 1.3:\n                $grades_numerical[] = \"C-\";\n             \
    \   break;\n            case $value > 1.0:\n                $grades_numerical[]\
    \ = \"D+\";\n                break;\n            case $value > 0.7:\n        \
    \        $grades_numerical[] = \"D\";\n                break;\n            case\
    \ $value > 0.0:\n                $grades_numerical[] = \"D-\";\n             \
    \   break;\n            case $value = 0.0:\n                $grades_numerical[]\
    \ = \"E\";\n                break;\n        }\n    }\n    return $grades_numerical;\n\
    }\necho \"<pre>\";\nprint_r(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]));\n\
    echo \"</pre>\";\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => A+\n    [1] => B\n    [2] => C-\n    [3] => C\n\
    \    [4] => A-\n)\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9llwgrq2.php:82\n\
    Stack trace:\n#0 /tmp/tmp9llwgrq2.php(87): test()\n#1 {main}\n  thrown in /tmp/tmp9llwgrq2.php\
    \ on line 82\n"
  timestamp: 1659824568
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $arr = [];\n    foreach ($grades as $grade) {\n        if ($grade >=\
    \ 4.0) {\n            $arr[] = \"A+\";\n        } elseif ($grade >= 3.7) {\n \
    \           $arr[] = \"A\";\n        } elseif ($grade >= 3.3) {\n            $arr[]\
    \ = \"A-\";\n        } elseif ($grade >= 3.0) {\n            $arr[] = \"B+\";\n\
    \        } elseif ($grade >= 2.7) {\n            $arr[] = \"B\";\n        } elseif\
    \ ($grade >= 2.3) {\n            $arr[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $arr[] = \"C+\";\n        } elseif ($grade >= 1.7) {\n \
    \           $arr[] = \"C\";\n        } elseif ($grade >= 1.3) {\n            $arr[]\
    \ = \"C-\";\n        } elseif ($grade >= 1.0) {\n            $arr[] = \"D+\";\n\
    \        } elseif ($grade >= 0.7) {\n            $arr[] = \"D\";\n        } elseif\
    \ ($grade >= 0.0) {\n            $arr[] = \"D-\";\n        } else {\n        \
    \    $arr[] = \"E\";\n        }\n    }\n    return $arr;\n}\n\n$grades = [4.0,\
    \ 3, 1.7, 2, 3.5];\n$test = numerical_letter_grade($grades);\nprint_r($test);\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpydb36hnk.php:66\n\
    Stack trace:\n#0 /tmp/tmpydb36hnk.php(74): test()\n#1 {main}\n  thrown in /tmp/tmpydb36hnk.php\
    \ on line 66\n"
  timestamp: 1659824568
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n  $letter_grades = array();\n  $number_of_grades = count($grades);\n  for\
    \ ($i = 0; $i < $number_of_grades; $i++) {\n    if ($grades[$i] >= 4.0) {\n  \
    \    $letter_grades[$i] = \"A+\";\n    } elseif ($grades[$i] >= 3.7) {\n     \
    \ $letter_grades[$i] = \"A\";\n    } elseif ($grades[$i] >= 3.3) {\n      $letter_grades[$i]\
    \ = \"A-\";\n    } elseif ($grades[$i] >= 3.0) {\n      $letter_grades[$i] = \"\
    B+\";\n    } elseif ($grades[$i] >= 2.7) {\n      $letter_grades[$i] = \"B\";\n\
    \    } elseif ($grades[$i] >= 2.3) {\n      $letter_grades[$i] = \"B-\";\n   \
    \ } elseif ($grades[$i] >= 2.0) {\n      $letter_grades[$i] = \"C+\";\n    } elseif\
    \ ($grades[$i] >= 1.7) {\n      $letter_grades[$i] = \"C\";\n    } elseif ($grades[$i]\
    \ >= 1.3) {\n      $letter_grades[$i] = \"C-\";\n    } elseif ($grades[$i] >=\
    \ 1.0) {\n      $letter_grades[$i] = \"D+\";\n    } elseif ($grades[$i] >= 0.7)\
    \ {\n      $letter_grades[$i] = \"D\";\n    } elseif ($grades[$i] >= 0.0) {\n\
    \      $letter_grades[$i] = \"D-\";\n    } else {\n      $letter_grades[$i] =\
    \ \"E\";\n    }\n  }\n  return $letter_grades;\n}\n\n$grades = array(4.0, 3, 1.7,\
    \ 2, 3.5);\nprint_r(numerical_letter_grade($grades));\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmo68skfh.php:66\n\
    Stack trace:\n#0 /tmp/tmpmo68skfh.php(74): test()\n#1 {main}\n  thrown in /tmp/tmpmo68skfh.php\
    \ on line 66\n"
  timestamp: 1659824568
- exit_code: 0
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n  $result = [];\n  foreach ($grades as $gpa) {\n    if ($gpa == 4.0) {\n\
    \      $result[] = \"A+\";\n    } elseif ($gpa > 3.7) {\n      $result[] = \"\
    A\";\n    } elseif ($gpa > 3.3) {\n      $result[] = \"A-\";\n    } elseif ($gpa\
    \ > 3.0) {\n      $result[] = \"B+\";\n    } elseif ($gpa > 2.7) {\n      $result[]\
    \ = \"B\";\n    } elseif ($gpa > 2.3) {\n      $result[] = \"B-\";\n    } elseif\
    \ ($gpa > 2.0) {\n      $result[] = \"C+\";\n    } elseif ($gpa > 1.7) {\n   \
    \   $result[] = \"C\";\n    } elseif ($gpa > 1.3) {\n      $result[] = \"C-\"\
    ;\n    } elseif ($gpa > 1.0) {\n      $result[] = \"D+\";\n    } elseif ($gpa\
    \ > 0.7) {\n      $result[] = \"D\";\n    } elseif ($gpa > 0.0) {\n      $result[]\
    \ = \"D-\";\n    } else {\n      $result[] = \"E\";\n    }\n  }\n  return $result;\n\
    }\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824568
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg9x1efp3.php:62\n\
    Stack trace:\n#0 /tmp/tmpg9x1efp3.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpg9x1efp3.php\
    \ on line 62\n"
  timestamp: 1659824568
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n\t$letter_grades = array();\n\tforeach ($grades as $grade) {\n\t\tif ($grade\
    \ >= 4.0) {\n\t\t\t$letter_grades[] = \"A+\";\n\t\t} elseif ($grade >= 3.7) {\n\
    \t\t\t$letter_grades[] = \"A\";\n\t\t} elseif ($grade >= 3.3) {\n\t\t\t$letter_grades[]\
    \ = \"A-\";\n\t\t} elseif ($grade >= 3.0) {\n\t\t\t$letter_grades[] = \"B+\";\n\
    \t\t} elseif ($grade >= 2.7) {\n\t\t\t$letter_grades[] = \"B\";\n\t\t} elseif\
    \ ($grade >= 2.3) {\n\t\t\t$letter_grades[] = \"B-\";\n\t\t} elseif ($grade >=\
    \ 2.0) {\n\t\t\t$letter_grades[] = \"C+\";\n\t\t} elseif ($grade >= 1.7) {\n\t\
    \t\t$letter_grades[] = \"C\";\n\t\t} elseif ($grade >= 1.3) {\n\t\t\t$letter_grades[]\
    \ = \"C-\";\n\t\t} elseif ($grade >= 1.0) {\n\t\t\t$letter_grades[] = \"D+\";\n\
    \t\t} elseif ($grade >= 0.7) {\n\t\t\t$letter_grades[] = \"D\";\n\t\t} elseif\
    \ ($grade >= 0.0) {\n\t\t\t$letter_grades[] = \"D-\";\n\t\t} else {\n\t\t\t$letter_grades[]\
    \ = \"E\";\n\t\t}\n\t}\n\treturn $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpotnirxrx.php:63\n\
    Stack trace:\n#0 /tmp/tmpotnirxrx.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpotnirxrx.php\
    \ on line 63\n"
  timestamp: 1659824568
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grade_table = array(4.0=>\"A+\", 3.7=>\"A\", 3.3=>\"A-\", 3.0=>\"B+\"\
    , 2.7=>\"B\", 2.3=>\"B-\", 2.0=>\"C+\", 1.7=>\"C\", 1.3=>\"C-\", 1.0=>\"D+\",\
    \ 0.7=>\"D\", 0.0=>\"D-\", -1=>\"E\");\n    $grades_numerical = array();\n   \
    \ foreach ($grades as $grade) {\n        $current_grade = $grade;\n        if\
    \ ($grade<=0) {\n            $current_grade = -1;\n        }\n        if ($grade>=4.0)\
    \ {\n            $current_grade = 4.0;\n        }\n        $grades_numerical[]\
    \ = $current_grade;\n    }\n    arsort($grades_numerical);\n    $grades_numerical\
    \ = array_unique($grades_numerical);\n    $letter_grades = array();\n    foreach\
    \ ($grades_numerical as $grade) {\n        $letter_grades[] = $grade_table[$grade];\n\
    \    }\n    return $letter_grades;\n}\nfunction candidate(...$args) {\n    return\
    \ numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4.0,\
    \ 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.2)) !== array(\"D+\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5)) !==\
    \ array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nDeprecated: Implicit conversion from float 3.7 to int loses precision\
    \ in /tmp/tmpe70wmdce.php on line 25\n\nDeprecated: Implicit conversion from float\
    \ 3.3 to int loses precision in /tmp/tmpe70wmdce.php on line 25\n\nDeprecated:\
    \ Implicit conversion from float 2.7 to int loses precision in /tmp/tmpe70wmdce.php\
    \ on line 25\n\nDeprecated: Implicit conversion from float 2.3 to int loses precision\
    \ in /tmp/tmpe70wmdce.php on line 25\n\nDeprecated: Implicit conversion from float\
    \ 1.7 to int loses precision in /tmp/tmpe70wmdce.php on line 25\n\nDeprecated:\
    \ Implicit conversion from float 1.3 to int loses precision in /tmp/tmpe70wmdce.php\
    \ on line 25\n\nDeprecated: Implicit conversion from float 0.7 to int loses precision\
    \ in /tmp/tmpe70wmdce.php on line 25\n\nDeprecated: Implicit conversion from float\
    \ 3.5 to int loses precision in /tmp/tmpe70wmdce.php on line 41\n\nDeprecated:\
    \ Implicit conversion from float 1.7 to int loses precision in /tmp/tmpe70wmdce.php\
    \ on line 41\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe70wmdce.php:50\n\
    Stack trace:\n#0 /tmp/tmpe70wmdce.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpe70wmdce.php\
    \ on line 50\n"
  timestamp: 1659824568
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n\t$letter_grade = [];\n\tforeach ($grades as $key => $value) {\n\t\tif ($value\
    \ >= 4.0) {\n\t\t\t$letter_grade[] = \"A+\";\n\t\t} elseif ($value >= 3.7) {\n\
    \t\t\t$letter_grade[] = \"A\";\n\t\t} elseif ($value >= 3.3) {\n\t\t\t$letter_grade[]\
    \ = \"A-\";\n\t\t} elseif ($value >= 3.0) {\n\t\t\t$letter_grade[] = \"B+\";\n\
    \t\t} elseif ($value >= 2.7) {\n\t\t\t$letter_grade[] = \"B\";\n\t\t} elseif ($value\
    \ >= 2.3) {\n\t\t\t$letter_grade[] = \"B-\";\n\t\t} elseif ($value >= 2.0) {\n\
    \t\t\t$letter_grade[] = \"C+\";\n\t\t} elseif ($value >= 1.7) {\n\t\t\t$letter_grade[]\
    \ = \"C\";\n\t\t} elseif ($value >= 1.3) {\n\t\t\t$letter_grade[] = \"C-\";\n\t\
    \t} elseif ($value >= 1.0) {\n\t\t\t$letter_grade[] = \"D+\";\n\t\t} elseif ($value\
    \ >= 0.7) {\n\t\t\t$letter_grade[] = \"D\";\n\t\t} elseif ($value >= 0.0) {\n\t\
    \t\t$letter_grade[] = \"D-\";\n\t\t} else {\n\t\t\t$letter_grade[] = \"E\";\n\t\
    \t}\n\t}\n\treturn $letter_grade;\n}\nfunction candidate(...$args) {\n    return\
    \ numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4.0,\
    \ 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.2)) !== array(\"D+\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5)) !==\
    \ array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjreo68_l.php:62\n\
    Stack trace:\n#0 /tmp/tmpjreo68_l.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpjreo68_l.php\
    \ on line 62\n"
  timestamp: 1659824568
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = [];\n    foreach ($grades as $grade) {\n        switch\
    \ (true) {\n            case $grade >= 4.0:\n                $letter_grades[]\
    \ = \"A+\";\n                break;\n            case $grade >= 3.7:\n       \
    \         $letter_grades[] = \"A\";\n                break;\n            case\
    \ $grade >= 3.3:\n                $letter_grades[] = \"A-\";\n               \
    \ break;\n            case $grade >= 3.0:\n                $letter_grades[] =\
    \ \"B+\";\n                break;\n            case $grade >= 2.7:\n         \
    \       $letter_grades[] = \"B\";\n                break;\n            case $grade\
    \ >= 2.3:\n                $letter_grades[] = \"B-\";\n                break;\n\
    \            case $grade >= 2.0:\n                $letter_grades[] = \"C+\";\n\
    \                break;\n            case $grade >= 1.7:\n                $letter_grades[]\
    \ = \"C\";\n                break;\n            case $grade >= 1.3:\n        \
    \        $letter_grades[] = \"C-\";\n                break;\n            case\
    \ $grade >= 1.0:\n                $letter_grades[] = \"D+\";\n               \
    \ break;\n            case $grade >= 0.7:\n                $letter_grades[] =\
    \ \"D\";\n                break;\n            case $grade >= 0.0:\n          \
    \      $letter_grades[] = \"D-\";\n                break;\n            default:\n\
    \                $letter_grades[] = \"E\";\n                break;\n        }\n\
    \    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args) {\n    return\
    \ numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4.0,\
    \ 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.2)) !== array(\"D+\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5)) !==\
    \ array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9585gfne.php:77\n\
    Stack trace:\n#0 /tmp/tmp9585gfne.php(85): test()\n#1 {main}\n  thrown in /tmp/tmp9585gfne.php\
    \ on line 77\n"
  timestamp: 1659824568
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n   $output_grades = array();\n   foreach ($grades as $grade) {\n      switch\
    \ ($grade) {\n         case $grade > 3.7:\n            $output_grades[] = \"A+\"\
    ;\n            break;\n         case $grade > 3.3:\n            $output_grades[]\
    \ = \"A\";\n            break;\n         case $grade > 3.0:\n            $output_grades[]\
    \ = \"A-\";\n            break;\n         case $grade > 2.7:\n            $output_grades[]\
    \ = \"B+\";\n            break;\n         case $grade > 2.3:\n            $output_grades[]\
    \ = \"B\";\n            break;\n         case $grade > 2.0:\n            $output_grades[]\
    \ = \"B-\";\n            break;\n         case $grade > 1.7:\n            $output_grades[]\
    \ = \"C+\";\n            break;\n         case $grade > 1.3:\n            $output_grades[]\
    \ = \"C\";\n            break;\n         case $grade > 1.0:\n            $output_grades[]\
    \ = \"C-\";\n            break;\n         case $grade > 0.7:\n            $output_grades[]\
    \ = \"D+\";\n            break;\n         case $grade > 0.0:\n            $output_grades[]\
    \ = \"D\";\n            break;\n         case $grade == 0.0:\n            $output_grades[]\
    \ = \"E\";\n            break;\n         default:\n            break;\n      }\n\
    \   }\n   return $output_grades;\n}\n\n$grades = array(4.0, 3, 1.7, 2, 3.5);\n\
    $output_grades = numerical_letter_grade($grades);\nprint_r($output_grades);\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw5eq7kuc.php:79\n\
    Stack trace:\n#0 /tmp/tmpw5eq7kuc.php(87): test()\n#1 {main}\n  thrown in /tmp/tmpw5eq7kuc.php\
    \ on line 79\n"
  timestamp: 1659824568
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $output = [];\n    foreach ($grades as $grade) {\n        switch ($grade)\
    \ {\n            case ($grade > 4.0):\n                $output[] = \"A+\";\n \
    \               break;\n            case ($grade > 3.7):\n                $output[]\
    \ = \"A\";\n                break;\n            case ($grade > 3.3):\n       \
    \         $output[] = \"A-\";\n                break;\n            case ($grade\
    \ > 3.0):\n                $output[] = \"B+\";\n                break;\n     \
    \       case ($grade > 2.7):\n                $output[] = \"B\";\n           \
    \     break;\n            case ($grade > 2.3):\n                $output[] = \"\
    B-\";\n                break;\n            case ($grade > 2.0):\n            \
    \    $output[] = \"C+\";\n                break;\n            case ($grade > 1.7):\n\
    \                $output[] = \"C\";\n                break;\n            case\
    \ ($grade > 1.3):\n                $output[] = \"C-\";\n                break;\n\
    \            case ($grade > 1.0):\n                $output[] = \"D+\";\n     \
    \           break;\n            case ($grade > 0.7):\n                $output[]\
    \ = \"D\";\n                break;\n            case ($grade > 0.0):\n       \
    \         $output[] = \"D-\";\n                break;\n            case ($grade\
    \ == 0.0):\n                $output[] = \"E\";\n                break;\n     \
    \   }\n    }\n    return $output;\n}\necho \"Using a switch statement: \";\nprint_r(numerical_letter_grade([4.0,\
    \ 3, 1.7, 2, 3.5]));\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Using a switch statement: Array\n(\n    [0] => A\n    [1] => B\n    [2]\
    \ => C-\n    [3] => C\n    [4] => A-\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp_8leonr3.php:79\nStack trace:\n#0 /tmp/tmp_8leonr3.php(87):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp_8leonr3.php on line 79\n"
  timestamp: 1659824568
- exit_code: 0
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grade_array = array();\n    for ($i = 0; $i < count($grades); $i++)\
    \ {\n        if ($grades[$i] == 4.0) {\n            $grade_array[$i] = \"A+\"\
    ;\n        } elseif ($grades[$i] > 3.7) {\n            $grade_array[$i] = \"A\"\
    ;\n        } elseif ($grades[$i] > 3.3) {\n            $grade_array[$i] = \"A-\"\
    ;\n        } elseif ($grades[$i] > 3.0) {\n            $grade_array[$i] = \"B+\"\
    ;\n        } elseif ($grades[$i] > 2.7) {\n            $grade_array[$i] = \"B\"\
    ;\n        } elseif ($grades[$i] > 2.3) {\n            $grade_array[$i] = \"B-\"\
    ;\n        } elseif ($grades[$i] > 2.0) {\n            $grade_array[$i] = \"C+\"\
    ;\n        } elseif ($grades[$i] > 1.7) {\n            $grade_array[$i] = \"C\"\
    ;\n        } elseif ($grades[$i] > 1.3) {\n            $grade_array[$i] = \"C-\"\
    ;\n        } elseif ($grades[$i] > 1.0) {\n            $grade_array[$i] = \"D+\"\
    ;\n        } elseif ($grades[$i] > 0.7) {\n            $grade_array[$i] = \"D\"\
    ;\n        } elseif ($grades[$i] > 0.0) {\n            $grade_array[$i] = \"D-\"\
    ;\n        } else {\n            $grade_array[$i] = \"E\";\n        }\n    }\n\
    \    return $grade_array;\n}\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824568
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n  $letter_grades = [];\n  foreach ($grades as $grade) {\n    if ($grade >=\
    \ 4.0) {\n      $letter_grades[] = \"A+\";\n    } elseif ($grade >= 3.7) {\n \
    \     $letter_grades[] = \"A\";\n    } elseif ($grade >= 3.3) {\n      $letter_grades[]\
    \ = \"A-\";\n    } elseif ($grade >= 3.0) {\n      $letter_grades[] = \"B+\";\n\
    \    } elseif ($grade >= 2.7) {\n      $letter_grades[] = \"B\";\n    } elseif\
    \ ($grade >= 2.3) {\n      $letter_grades[] = \"B-\";\n    } elseif ($grade >=\
    \ 2.0) {\n      $letter_grades[] = \"C+\";\n    } elseif ($grade >= 1.7) {\n \
    \     $letter_grades[] = \"C\";\n    } elseif ($grade >= 1.3) {\n      $letter_grades[]\
    \ = \"C-\";\n    } elseif ($grade >= 1.0) {\n      $letter_grades[] = \"D+\";\n\
    \    } elseif ($grade >= 0.7) {\n      $letter_grades[] = \"D\";\n    } elseif\
    \ ($grade >= 0.0) {\n      $letter_grades[] = \"D-\";\n    } else {\n      $letter_grades[]\
    \ = \"E\";\n    }\n  }\n  return $letter_grades;\n}\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcgwjg684.php:62\n\
    Stack trace:\n#0 /tmp/tmpcgwjg684.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpcgwjg684.php\
    \ on line 62\n"
  timestamp: 1659824568
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ > 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif ($grade >\
    \ 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade > 3.3)\
    \ {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade > 3.0) {\n\
    \            $letter_grades[] = \"B+\";\n        } elseif ($grade > 2.7) {\n \
    \           $letter_grades[] = \"B\";\n        } elseif ($grade > 2.3) {\n   \
    \         $letter_grades[] = \"B-\";\n        } elseif ($grade > 2.0) {\n    \
    \        $letter_grades[] = \"C+\";\n        } elseif ($grade > 1.7) {\n     \
    \       $letter_grades[] = \"C\";\n        } elseif ($grade > 1.3) {\n       \
    \     $letter_grades[] = \"C-\";\n        } elseif ($grade > 1.0) {\n        \
    \    $letter_grades[] = \"D+\";\n        } elseif ($grade > 0.7) {\n         \
    \   $letter_grades[] = \"D\";\n        } elseif ($grade > 0.0) {\n           \
    \ $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[] =\
    \ \"E\";\n        }\n    }\n    return $letter_grades;\n}\n$grades = [4.0, 3,\
    \ 1.7, 2, 3.5];\necho \"<pre>\";\nprint_r(numerical_letter_grade($grades));\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => A\n    [1] => B\n    [2] => C-\n    [3] => C\n\
    \    [4] => A-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpky0q1mv1.php:65\n\
    Stack trace:\n#0 /tmp/tmpky0q1mv1.php(73): test()\n#1 {main}\n  thrown in /tmp/tmpky0q1mv1.php\
    \ on line 65\n"
  timestamp: 1659824568
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n\t$result = array();\n\t$grades = array(4.0, 3, 1.7, 2, 3.5);\n\t$letter_grade\
    \ = array(\n\t\t'A+' => 4.0,\n\t\t'A' => 3.7,\n\t\t'A-' => 3.3,\n\t\t'B+' => 3.0,\n\
    \t\t'B' => 2.7,\n\t\t'B-' => 2.3,\n\t\t'C+' => 2.0,\n\t\t'C' => 1.7,\n\t\t'C-'\
    \ => 1.3,\n\t\t'D+' => 1.0,\n\t\t'D' => 0.7,\n\t\t'D-' => 0.0,\n\t\t'E' => 0.0\n\
    \t);\n\tforeach ($grades as $grade) {\n\t\t$letter = '';\n\t\tforeach ($letter_grade\
    \ as $key => $value) {\n\t\t\tif ($grade >= $value) {\n\t\t\t\t$letter = $key;\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tarray_push($result, $letter);\n\t}\n\treturn\
    \ $result;\n}\n\nprint_r(numerical_letter_grade(array(4.0, 3, 1.7, 2, 3.5)));\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdsg_ujs4.php:61\n\
    Stack trace:\n#0 /tmp/tmpdsg_ujs4.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpdsg_ujs4.php\
    \ on line 61\n"
  timestamp: 1660005482
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = [];\n    $gpa_grades = [4.0, 3.7, 3.3, 3.0, 2.7, 2.3,\
    \ 2.0, 1.7, 1.3, 1.0, 0.7, 0.0];\n    $letter_array = [\"A+\", \"A\", \"A-\",\
    \ \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"];\n\
    \    foreach ($grades as $grade) {\n        if ($grade === 0) {\n            array_push($letter_grades,\
    \ \"E\");\n        } else {\n            for ($i = 0; $i < count($gpa_grades);\
    \ $i++) {\n                if ($grade >= $gpa_grades[$i]) {\n                \
    \    array_push($letter_grades, $letter_array[$i]);\n                    break;\n\
    \                }\n            }\n        }\n    }\n    return $letter_grades;\n\
    }\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpisl2dzp9.php:47\n\
    Stack trace:\n#0 /tmp/tmpisl2dzp9.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpisl2dzp9.php\
    \ on line 47\n"
  timestamp: 1660005482
- exit_code: 0
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $output = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ == 4.0) {\n            $output[] = \"A+\";\n        } elseif ($grade > 3.7)\
    \ {\n            $output[] = \"A\";\n        } elseif ($grade > 3.3) {\n     \
    \       $output[] = \"A-\";\n        } elseif ($grade > 3.0) {\n            $output[]\
    \ = \"B+\";\n        } elseif ($grade > 2.7) {\n            $output[] = \"B\"\
    ;\n        } elseif ($grade > 2.3) {\n            $output[] = \"B-\";\n      \
    \  } elseif ($grade > 2.0) {\n            $output[] = \"C+\";\n        } elseif\
    \ ($grade > 1.7) {\n            $output[] = \"C\";\n        } elseif ($grade >\
    \ 1.3) {\n            $output[] = \"C-\";\n        } elseif ($grade > 1.0) {\n\
    \            $output[] = \"D+\";\n        } elseif ($grade > 0.7) {\n        \
    \    $output[] = \"D\";\n        } elseif ($grade > 0.0) {\n            $output[]\
    \ = \"D-\";\n        } else {\n            $output[] = \"E\";\n        }\n   \
    \ }\n    return $output;\n}\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660005482
- exit_code: 0
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n       \
    \     $grades_letter[] = \"A+\";\n        } elseif ($grade > 3.7) {\n        \
    \    $grades_letter[] = \"A\";\n        } elseif ($grade > 3.3) {\n          \
    \  $grades_letter[] = \"A-\";\n        } elseif ($grade > 3.0) {\n           \
    \ $grades_letter[] = \"B+\";\n        } elseif ($grade > 2.7) {\n            $grades_letter[]\
    \ = \"B\";\n        } elseif ($grade > 2.3) {\n            $grades_letter[] =\
    \ \"B-\";\n        } elseif ($grade > 2.0) {\n            $grades_letter[] = \"\
    C+\";\n        } elseif ($grade > 1.7) {\n            $grades_letter[] = \"C\"\
    ;\n        } elseif ($grade > 1.3) {\n            $grades_letter[] = \"C-\";\n\
    \        } elseif ($grade > 1.0) {\n            $grades_letter[] = \"D+\";\n \
    \       } elseif ($grade > 0.7) {\n            $grades_letter[] = \"D\";\n   \
    \     } elseif ($grade > 0.0) {\n            $grades_letter[] = \"D-\";\n    \
    \    } else {\n            $grades_letter[] = \"E\";\n        }\n    }\n    return\
    \ $grades_letter;\n}\n\n$grades = array(4.0, 3, 1.7, 2, 3.5);\n$grades_letter\
    \ = numerical_letter_grade($grades);\nprint_r($grades_letter);\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => A+\n    [1] => B\n    [2] => C-\n    [3] => C\n  \
    \  [4] => A-\n)\n"
  timestamp: 1660005482
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkt05io_h.php:63\n\
    Stack trace:\n#0 /tmp/tmpkt05io_h.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpkt05io_h.php\
    \ on line 63\n"
  timestamp: 1660005482
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grading = array(4 => \"A+\", 3.7 => \"A\", 3.3 => \"A-\", 3 => \"B+\"\
    , 2.7 => \"B\", 2.3 => \"B-\", 2 => \"C+\", 1.7 => \"C\", 1.3 => \"C-\", 1 =>\
    \ \"D+\", 0.7 => \"D\", 0.3 => \"D-\", 0 => \"E\");\n    $grade_array = array();\n\
    \    foreach ($grades as $grade) {\n        if ($grade == 0) {\n            $letter_grade\
    \ = \"E\";\n        } else {\n            $letter_grade = find_letter_grade($grading,\
    \ $grade);\n        }\n        array_push($grade_array, $letter_grade);\n    }\n\
    \    return $grade_array;\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nDeprecated: Implicit conversion from float 3.7 to int loses precision\
    \ in /tmp/tmpmunv3i82.php on line 25\n\nDeprecated: Implicit conversion from float\
    \ 3.3 to int loses precision in /tmp/tmpmunv3i82.php on line 25\n\nDeprecated:\
    \ Implicit conversion from float 2.7 to int loses precision in /tmp/tmpmunv3i82.php\
    \ on line 25\n\nDeprecated: Implicit conversion from float 2.3 to int loses precision\
    \ in /tmp/tmpmunv3i82.php on line 25\n\nDeprecated: Implicit conversion from float\
    \ 1.7 to int loses precision in /tmp/tmpmunv3i82.php on line 25\n\nDeprecated:\
    \ Implicit conversion from float 1.3 to int loses precision in /tmp/tmpmunv3i82.php\
    \ on line 25\n\nDeprecated: Implicit conversion from float 0.7 to int loses precision\
    \ in /tmp/tmpmunv3i82.php on line 25\n\nDeprecated: Implicit conversion from float\
    \ 0.3 to int loses precision in /tmp/tmpmunv3i82.php on line 25\n\nFatal error:\
    \ Uncaught Error: Call to undefined function find_letter_grade() in /tmp/tmpmunv3i82.php:31\n\
    Stack trace:\n#0 /tmp/tmpmunv3i82.php(39): numerical_letter_grade(Array)\n#1 /tmp/tmpmunv3i82.php(43):\
    \ candidate(Array)\n#2 /tmp/tmpmunv3i82.php(51): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpmunv3i82.php on line 31\n"
  timestamp: 1660005482
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $result = [];\n    foreach ($grades as $grade) {\n        switch (true)\
    \ {\n            case $grade >= 4.0:\n                $result[] = \"A+\";\n  \
    \              break;\n            case $grade >= 3.7:\n                $result[]\
    \ = \"A\";\n                break;\n            case $grade >= 3.3:\n        \
    \        $result[] = \"A-\";\n                break;\n            case $grade\
    \ >= 3.0:\n                $result[] = \"B+\";\n                break;\n     \
    \       case $grade >= 2.7:\n                $result[] = \"B\";\n            \
    \    break;\n            case $grade >= 2.3:\n                $result[] = \"B-\"\
    ;\n                break;\n            case $grade >= 2.0:\n                $result[]\
    \ = \"C+\";\n                break;\n            case $grade >= 1.7:\n       \
    \         $result[] = \"C\";\n                break;\n            case $grade\
    \ >= 1.3:\n                $result[] = \"C-\";\n                break;\n     \
    \       case $grade >= 1.0:\n                $result[] = \"D+\";\n           \
    \     break;\n            case $grade >= 0.7:\n                $result[] = \"\
    D\";\n                break;\n            case $grade >= 0.0:\n              \
    \  $result[] = \"D-\";\n                break;\n            default:\n       \
    \         $result[] = \"E\";\n                break;\n        }\n    }\n    return\
    \ $result;\n}\n$test = array(4.0, 3, 1.7, 2, 3.5);\nprint_r(numerical_letter_grade($test));\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp50xjxfb_.php:78\n\
    Stack trace:\n#0 /tmp/tmp50xjxfb_.php(86): test()\n#1 {main}\n  thrown in /tmp/tmp50xjxfb_.php\
    \ on line 78\n"
  timestamp: 1660005482
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades_associative = [];\n    foreach ($grades as $grade) {\n      \
    \  if ($grade === 4.0) {\n            $grades_associative[] = \"A+\";\n      \
    \  } elseif ($grade >= 3.7) {\n            $grades_associative[] = \"A\";\n  \
    \      } elseif ($grade >= 3.3) {\n            $grades_associative[] = \"A-\"\
    ;\n        } elseif ($grade >= 3.0) {\n            $grades_associative[] = \"\
    B+\";\n        } elseif ($grade >= 2.7) {\n            $grades_associative[] =\
    \ \"B\";\n        } elseif ($grade >= 2.3) {\n            $grades_associative[]\
    \ = \"B-\";\n        } elseif ($grade >= 2.0) {\n            $grades_associative[]\
    \ = \"C+\";\n        } elseif ($grade >= 1.7) {\n            $grades_associative[]\
    \ = \"C\";\n        } elseif ($grade >= 1.3) {\n            $grades_associative[]\
    \ = \"C-\";\n        } elseif ($grade >= 1.0) {\n            $grades_associative[]\
    \ = \"D+\";\n        } elseif ($grade >= 0.7) {\n            $grades_associative[]\
    \ = \"D\";\n        } elseif ($grade >= 0.0) {\n            $grades_associative[]\
    \ = \"D-\";\n        } else {\n            $grades_associative[] = \"E\";\n  \
    \      }\n    }\n    return $grades_associative;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu6ldlr99.php:63\n\
    Stack trace:\n#0 /tmp/tmpu6ldlr99.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpu6ldlr99.php\
    \ on line 63\n"
  timestamp: 1660005482
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    foreach ($grades as $key => $grade) {\n        if ($grade >= 4.0) {\n\
    \            $letter_grades[] = \"A+\";\n        } elseif ($grade >= 3.7) {\n\
    \            $letter_grades[] = \"A\";\n        } elseif ($grade >= 3.3) {\n \
    \           $letter_grades[] = \"A-\";\n        } elseif ($grade >= 3.0) {\n \
    \           $letter_grades[] = \"B+\";\n        } elseif ($grade >= 2.7) {\n \
    \           $letter_grades[] = \"B\";\n        } elseif ($grade >= 2.3) {\n  \
    \          $letter_grades[] = \"B-\";\n        } elseif ($grade >= 2.0) {\n  \
    \          $letter_grades[] = \"C+\";\n        } elseif ($grade >= 1.7) {\n  \
    \          $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3) {\n   \
    \         $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0) {\n   \
    \         $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7) {\n   \
    \         $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n    \
    \        $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n$grades = array(4.0,\
    \ 3, 1.7, 2, 3.5);\n$letter_grades = numerical_letter_grade($grades);\nprint_r($letter_grades);\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpot0o0z99.php:64\n\
    Stack trace:\n#0 /tmp/tmpot0o0z99.php(72): test()\n#1 {main}\n  thrown in /tmp/tmpot0o0z99.php\
    \ on line 64\n"
  timestamp: 1660005482
- exit_code: 0
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade == 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade > 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ > 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade >\
    \ 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade > 2.7)\
    \ {\n            $letter_grades[] = \"B\";\n        } elseif ($grade > 2.3) {\n\
    \            $letter_grades[] = \"B-\";\n        } elseif ($grade > 2.0) {\n \
    \           $letter_grades[] = \"C+\";\n        } elseif ($grade > 1.7) {\n  \
    \          $letter_grades[] = \"C\";\n        } elseif ($grade > 1.3) {\n    \
    \        $letter_grades[] = \"C-\";\n        } elseif ($grade > 1.0) {\n     \
    \       $letter_grades[] = \"D+\";\n        } elseif ($grade > 0.7) {\n      \
    \      $letter_grades[] = \"D\";\n        } elseif ($grade > 0.0) {\n        \
    \    $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\n$grades = array(4.0,\
    \ 3, 1.7, 2, 3.5);\nprint_r(numerical_letter_grade($grades));\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => A+\n    [1] => B\n    [2] => C-\n    [3] => C\n  \
    \  [4] => A-\n)\n"
  timestamp: 1660005482
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n\t$result = array();\n\tforeach ($grades as $grade) {\n\t\tswitch ($grade)\
    \ {\n\t\t\tcase $grade >= 4.0:\n\t\t\t\t$result[] = \"A+\";\n\t\t\t\tbreak;\n\t\
    \t\tcase $grade >= 3.7:\n\t\t\t\t$result[] = \"A\";\n\t\t\t\tbreak;\n\t\t\tcase\
    \ $grade >= 3.3:\n\t\t\t\t$result[] = \"A-\";\n\t\t\t\tbreak;\n\t\t\tcase $grade\
    \ >= 3.0:\n\t\t\t\t$result[] = \"B+\";\n\t\t\t\tbreak;\n\t\t\tcase $grade >= 2.7:\n\
    \t\t\t\t$result[] = \"B\";\n\t\t\t\tbreak;\n\t\t\tcase $grade >= 2.3:\n\t\t\t\t\
    $result[] = \"B-\";\n\t\t\t\tbreak;\n\t\t\tcase $grade >= 2.0:\n\t\t\t\t$result[]\
    \ = \"C+\";\n\t\t\t\tbreak;\n\t\t\tcase $grade >= 1.7:\n\t\t\t\t$result[] = \"\
    C\";\n\t\t\t\tbreak;\n\t\t\tcase $grade >= 1.3:\n\t\t\t\t$result[] = \"C-\";\n\
    \t\t\t\tbreak;\n\t\t\tcase $grade >= 1.0:\n\t\t\t\t$result[] = \"D+\";\n\t\t\t\
    \tbreak;\n\t\t\tcase $grade >= 0.7:\n\t\t\t\t$result[] = \"D\";\n\t\t\t\tbreak;\n\
    \t\t\tcase $grade >= 0.0:\n\t\t\t\t$result[] = \"D-\";\n\t\t\t\tbreak;\n\t\t\t\
    case $grade >= 0.0:\n\t\t\t\t$result[] = \"E\";\n\t\t\t\tbreak;\n\t\t}\n\t}\n\t\
    return $result;\n}\n\n$array_grades = array(4.0, 3, 1.7, 2, 3.5);\nprint_r(numerical_letter_grade($array_grades));\n\
    echo \"\\n\";\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A-\n)\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpggdlw1vg.php:81\n\
    Stack trace:\n#0 /tmp/tmpggdlw1vg.php(89): test()\n#1 {main}\n  thrown in /tmp/tmpggdlw1vg.php\
    \ on line 81\n"
  timestamp: 1660005482
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n  // Your code here\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzcnru_0_.php:33\n\
    Stack trace:\n#0 /tmp/tmpzcnru_0_.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpzcnru_0_.php\
    \ on line 33\n"
  timestamp: 1660005482
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n  for ($i = 0; $i < count($grades); $i++) {\n    if ($grades[$i] == 4.0)\
    \ {\n      $grades[$i] = \"A+\";\n    } elseif ($grades[$i] >= 3.7) {\n      $grades[$i]\
    \ = \"A\";\n    } elseif ($grades[$i] >= 3.3) {\n      $grades[$i] = \"A-\";\n\
    \    } elseif ($grades[$i] >= 3.0) {\n      $grades[$i] = \"B+\";\n    } elseif\
    \ ($grades[$i] >= 2.7) {\n      $grades[$i] = \"B\";\n    } elseif ($grades[$i]\
    \ >= 2.3) {\n      $grades[$i] = \"B-\";\n    } elseif ($grades[$i] >= 2.0) {\n\
    \      $grades[$i] = \"C+\";\n    } elseif ($grades[$i] >= 1.7) {\n      $grades[$i]\
    \ = \"C\";\n    } elseif ($grades[$i] >= 1.3) {\n      $grades[$i] = \"C-\";\n\
    \    } elseif ($grades[$i] >= 1.0) {\n      $grades[$i] = \"D+\";\n    } elseif\
    \ ($grades[$i] >= 0.7) {\n      $grades[$i] = \"D\";\n    } elseif ($grades[$i]\
    \ > 0.0) {\n      $grades[$i] = \"D-\";\n    } else {\n      $grades[$i] = \"\
    E\";\n    }\n  }\n  return $grades;\n}\n$grades = array(4.0, 3, 1.7, 2, 3.5);\n\
    print_r(numerical_letter_grade($grades));\nfunction candidate(...$args) {\n  \
    \  return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\",\
    \ \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp48jmiiwy.php:63\n\
    Stack trace:\n#0 /tmp/tmp48jmiiwy.php(71): test()\n#1 {main}\n  thrown in /tmp/tmp48jmiiwy.php\
    \ on line 63\n"
  timestamp: 1660005482
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    for ($i = 0; $i < count($grades); $i++) {\n        if ($grades[$i] >\
    \ 4.0) {\n            $grades[$i] = \"A+\";\n        } elseif ($grades[$i] > 3.7)\
    \ {\n            $grades[$i] = \"A\";\n        } elseif ($grades[$i] > 3.3) {\n\
    \            $grades[$i] = \"A-\";\n        } elseif ($grades[$i] > 3.0) {\n \
    \           $grades[$i] = \"B+\";\n        } elseif ($grades[$i] > 2.7) {\n  \
    \          $grades[$i] = \"B\";\n        } elseif ($grades[$i] > 2.3) {\n    \
    \        $grades[$i] = \"B-\";\n        } elseif ($grades[$i] > 2.0) {\n     \
    \       $grades[$i] = \"C+\";\n        } elseif ($grades[$i] > 1.7) {\n      \
    \      $grades[$i] = \"C\";\n        } elseif ($grades[$i] > 1.3) {\n        \
    \    $grades[$i] = \"C-\";\n        } elseif ($grades[$i] > 1.0) {\n         \
    \   $grades[$i] = \"D+\";\n        } elseif ($grades[$i] > 0.7) {\n          \
    \  $grades[$i] = \"D\";\n        } elseif ($grades[$i] > 0.0) {\n            $grades[$i]\
    \ = \"D-\";\n        } else {\n            $grades[$i] = \"E\";\n        }\n \
    \   }\n    return $grades;\n}\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7i8xra61.php:61\n\
    Stack trace:\n#0 /tmp/tmp7i8xra61.php(69): test()\n#1 {main}\n  thrown in /tmp/tmp7i8xra61.php\
    \ on line 61\n"
  timestamp: 1660005482
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $translate = array(\n        4.0 => \"A+\",\n        3.7 => \"A\",\n\
    \        3.3 => \"A-\",\n        3.0 => \"B+\",\n        2.7 => \"B\",\n     \
    \   2.3 => \"B-\",\n        2.0 => \"C+\",\n        1.7 => \"C\",\n        1.3\
    \ => \"C-\",\n        1.0 => \"D+\",\n        0.7 => \"D\",\n        0.0 => \"\
    D-\",\n        0.0 => \"E\",\n    );\n    $letter_grades = array();\n    foreach\
    \ ($grades as $grade) {\n        $letter_grade = \"E\";\n        foreach ($translate\
    \ as $num => $letter) {\n            if ($grade >= $num) {\n                $letter_grade\
    \ = $letter;\n                break;\n            }\n        }\n        $letter_grades[]\
    \ = $letter_grade;\n    }\n    return $letter_grades;\n}\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nDeprecated: Implicit conversion from float 3.7 to int loses precision\
    \ in /tmp/tmpfgnhk9z_.php on line 27\n\nDeprecated: Implicit conversion from float\
    \ 3.3 to int loses precision in /tmp/tmpfgnhk9z_.php on line 28\n\nDeprecated:\
    \ Implicit conversion from float 2.7 to int loses precision in /tmp/tmpfgnhk9z_.php\
    \ on line 30\n\nDeprecated: Implicit conversion from float 2.3 to int loses precision\
    \ in /tmp/tmpfgnhk9z_.php on line 31\n\nDeprecated: Implicit conversion from float\
    \ 1.7 to int loses precision in /tmp/tmpfgnhk9z_.php on line 33\n\nDeprecated:\
    \ Implicit conversion from float 1.3 to int loses precision in /tmp/tmpfgnhk9z_.php\
    \ on line 34\n\nDeprecated: Implicit conversion from float 0.7 to int loses precision\
    \ in /tmp/tmpfgnhk9z_.php on line 36\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpfgnhk9z_.php:58\nStack trace:\n#0 /tmp/tmpfgnhk9z_.php(66):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpfgnhk9z_.php on line 58\n"
  timestamp: 1660005482
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n  $result = [];\n  foreach ($grades as $grade) {\n    switch (true) {\n \
    \     case $grade >= 4.0:\n        $result[] = \"A+\";\n        break;\n     \
    \ case $grade >= 3.7:\n        $result[] = \"A\";\n        break;\n      case\
    \ $grade >= 3.3:\n        $result[] = \"A-\";\n        break;\n      case $grade\
    \ >= 3.0:\n        $result[] = \"B+\";\n        break;\n      case $grade >= 2.7:\n\
    \        $result[] = \"B\";\n        break;\n      case $grade >= 2.3:\n     \
    \   $result[] = \"B-\";\n        break;\n      case $grade >= 2.0:\n        $result[]\
    \ = \"C+\";\n        break;\n      case $grade >= 1.7:\n        $result[] = \"\
    C\";\n        break;\n      case $grade >= 1.3:\n        $result[] = \"C-\";\n\
    \        break;\n      case $grade >= 1.0:\n        $result[] = \"D+\";\n    \
    \    break;\n      case $grade >= 0.7:\n        $result[] = \"D\";\n        break;\n\
    \      case $grade >= 0.0:\n        $result[] = \"D-\";\n        break;\n    \
    \  default:\n        $result[] = \"E\";\n        break;\n    }\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2otiei5z.php:77\n\
    Stack trace:\n#0 /tmp/tmp2otiei5z.php(85): test()\n#1 {main}\n  thrown in /tmp/tmp2otiei5z.php\
    \ on line 77\n"
  timestamp: 1660005482
- exit_code: 0
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ == 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif ($grade\
    \ > 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade >\
    \ 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade > 3.0)\
    \ {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade > 2.7) {\n\
    \            $letter_grades[] = \"B\";\n        } elseif ($grade > 2.3) {\n  \
    \          $letter_grades[] = \"B-\";\n        } elseif ($grade > 2.0) {\n   \
    \         $letter_grades[] = \"C+\";\n        } elseif ($grade > 1.7) {\n    \
    \        $letter_grades[] = \"C\";\n        } elseif ($grade > 1.3) {\n      \
    \      $letter_grades[] = \"C-\";\n        } elseif ($grade > 1.0) {\n       \
    \     $letter_grades[] = \"D+\";\n        } elseif ($grade > 0.7) {\n        \
    \    $letter_grades[] = \"D\";\n        } elseif ($grade > 0.0) {\n          \
    \  $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nvar_dump(numerical_letter_grade(array(4.0,\
    \ 3, 1.7, 2, 3.5)));\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "array(5) {\n  [0]=>\n  string(2) \"A+\"\n  [1]=>\n  string(1) \"B\"\n \
    \ [2]=>\n  string(2) \"C-\"\n  [3]=>\n  string(1) \"C\"\n  [4]=>\n  string(2)\
    \ \"A-\"\n}\n"
  timestamp: 1660005482
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades_count = count($grades);\n    $letter_grades = array();\n    $letter_grade_table\
    \ = array(\n        4.0 => \"A+\",\n        3.7 => \"A\",\n        3.3 => \"A-\"\
    ,\n        3.0 => \"B+\",\n        2.7 => \"B\",\n        2.3 => \"B-\",\n   \
    \     2.0 => \"C+\",\n        1.7 => \"C\",\n        1.3 => \"C-\",\n        1.0\
    \ => \"D+\",\n        0.7 => \"D\",\n        0.0 => \"D-\",\n        -1.0 => \"\
    E\"\n    );\n    for ($i = 0; $i < $grades_count; $i++) {\n        if (array_key_exists($grades[$i],\
    \ $letter_grade_table)) {\n            $letter_grades[] = $letter_grade_table[$grades[$i]];\n\
    \        } else {\n            foreach ($letter_grade_table as $grade => $grade_value)\
    \ {\n                if ($grades[$i] > $grade) {\n                    $letter_grades[]\
    \ = $grade_value;\n                    break;\n                }\n           \
    \ }\n        }\n    }\n    return $letter_grades;\n}\n\n$grades = array(4.0, 3,\
    \ 1.7, 2, 3.5);\nprint_r(numerical_letter_grade($grades));\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nDeprecated: Implicit conversion from float 3.7 to int loses precision\
    \ in /tmp/tmpgwr4qo3j.php on line 29\n\nDeprecated: Implicit conversion from float\
    \ 3.3 to int loses precision in /tmp/tmpgwr4qo3j.php on line 30\n\nDeprecated:\
    \ Implicit conversion from float 2.7 to int loses precision in /tmp/tmpgwr4qo3j.php\
    \ on line 32\n\nDeprecated: Implicit conversion from float 2.3 to int loses precision\
    \ in /tmp/tmpgwr4qo3j.php on line 33\n\nDeprecated: Implicit conversion from float\
    \ 1.7 to int loses precision in /tmp/tmpgwr4qo3j.php on line 35\n\nDeprecated:\
    \ Implicit conversion from float 1.3 to int loses precision in /tmp/tmpgwr4qo3j.php\
    \ on line 36\n\nDeprecated: Implicit conversion from float 0.7 to int loses precision\
    \ in /tmp/tmpgwr4qo3j.php on line 38\n\nDeprecated: Implicit conversion from float\
    \ 1.7 to int loses precision in /tmp/tmpgwr4qo3j.php on line 43\n\nDeprecated:\
    \ Implicit conversion from float 1.7 to int loses precision in /tmp/tmpgwr4qo3j.php\
    \ on line 44\n\nDeprecated: Implicit conversion from float 3.5 to int loses precision\
    \ in /tmp/tmpgwr4qo3j.php on line 43\n\nDeprecated: Implicit conversion from float\
    \ 3.5 to int loses precision in /tmp/tmpgwr4qo3j.php on line 44\nArray\n(\n  \
    \  [0] => A+\n    [1] => B+\n    [2] => D+\n    [3] => C+\n    [4] => B+\n)\n\n\
    Deprecated: Implicit conversion from float 3.7 to int loses precision in /tmp/tmpgwr4qo3j.php\
    \ on line 29\n\nDeprecated: Implicit conversion from float 3.3 to int loses precision\
    \ in /tmp/tmpgwr4qo3j.php on line 30\n\nDeprecated: Implicit conversion from float\
    \ 2.7 to int loses precision in /tmp/tmpgwr4qo3j.php on line 32\n\nDeprecated:\
    \ Implicit conversion from float 2.3 to int loses precision in /tmp/tmpgwr4qo3j.php\
    \ on line 33\n\nDeprecated: Implicit conversion from float 1.7 to int loses precision\
    \ in /tmp/tmpgwr4qo3j.php on line 35\n\nDeprecated: Implicit conversion from float\
    \ 1.3 to int loses precision in /tmp/tmpgwr4qo3j.php on line 36\n\nDeprecated:\
    \ Implicit conversion from float 0.7 to int loses precision in /tmp/tmpgwr4qo3j.php\
    \ on line 38\n\nDeprecated: Implicit conversion from float 1.7 to int loses"
  timestamp: 1660005482
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letters = ['A+','A','A-','B+','B','B-','C+','C','C-','D+','D','D-','E'];\n\
    \    $grade_equation = [[4.0,'A+'],[3.7,'A'],[3.3,'A-'],[3.0,'B+'],[2.7,'B'],[2.3,'B-'],[2.0,'C+'],[1.7,'C'],[1.3,'C-'],[1.0,'D+'],[0.7,'D'],[0.0,'D-']];\n\
    \    $final_grade = [];\n    foreach ($grades as $key => $grade) {\n        if($grade\
    \ < 0.7){\n            $final_grade[] = 'E';\n        }else{\n            foreach\
    \ ($grade_equation as $key => $equation) {\n                if($grade >= $equation[0]){\n\
    \                    $final_grade[] = $equation[1];\n                    break;\n\
    \                }\n            }\n        }\n    }\n    return $final_grade;\n\
    }\nvar_dump(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]));\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(5) {\n  [0]=>\n  string(2) \"A+\"\n  [1]=>\n  string(2) \"B+\"\n\
    \  [2]=>\n  string(1) \"C\"\n  [3]=>\n  string(2) \"C+\"\n  [4]=>\n  string(2)\
    \ \"A-\"\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwjvudznj.php:48\n\
    Stack trace:\n#0 /tmp/tmpwjvudznj.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpwjvudznj.php\
    \ on line 48\n"
  timestamp: 1660005482
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n  foreach ($grades as $grade) {\n    if ($grade >= 4.0) {\n      $letter[]\
    \ = \"A+\";\n    } elseif ($grade >= 3.7) {\n      $letter[] = \"A\";\n    } elseif\
    \ ($grade >= 3.3) {\n      $letter[] = \"A-\";\n    } elseif ($grade >= 3.0) {\n\
    \      $letter[] = \"B+\";\n    } elseif ($grade >= 2.7) {\n      $letter[] =\
    \ \"B\";\n    } elseif ($grade >= 2.3) {\n      $letter[] = \"B-\";\n    } elseif\
    \ ($grade >= 2.0) {\n      $letter[] = \"C+\";\n    } elseif ($grade >= 1.7) {\n\
    \      $letter[] = \"C\";\n    } elseif ($grade >= 1.3) {\n      $letter[] = \"\
    C-\";\n    } elseif ($grade >= 1.0) {\n      $letter[] = \"D+\";\n    } elseif\
    \ ($grade >= 0.7) {\n      $letter[] = \"D\";\n    } elseif ($grade >= 0.0) {\n\
    \      $letter[] = \"D-\";\n    } else {\n      $letter[] = \"E\";\n    }\n  }\n\
    \  return $letter;\n}\n\n$grades = array(4.0, 3, 1.7, 2, 3.5);\n$letter = numerical_letter_grade($grades);\n\
    echo implode(\", \", $letter);\necho \"\\n\";\nfunction candidate(...$args) {\n\
    \    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "A+, B+, C, C+, A-\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4kknq2kb.php:66\n\
    Stack trace:\n#0 /tmp/tmp4kknq2kb.php(74): test()\n#1 {main}\n  thrown in /tmp/tmp4kknq2kb.php\
    \ on line 66\n"
  timestamp: 1660005482
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $num_to_letter = array(\n        'A+' => 4.0,\n        'A' => 3.7,\n\
    \        'A-' => 3.3,\n        'B+' => 3.0,\n        'B' => 2.7,\n        'B-'\
    \ => 2.3,\n        'C+' => 2.0,\n        'C' => 1.7,\n        'C-' => 1.3,\n \
    \       'D+' => 1.0,\n        'D' => 0.7,\n        'D-' => 0.0,\n        'E' =>\
    \ 0.0\n    );\n    $result = array();\n    foreach ($grades as $grade) {\n   \
    \     $diff = 5;\n        $result_grade = null;\n        foreach ($num_to_letter\
    \ as $letter => $num) {\n            if (abs($grade - $num) < $diff) {\n     \
    \           $diff = abs($grade - $num);\n                $result_grade = $letter;\n\
    \            }\n        }\n        array_push($result, $result_grade);\n    }\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeozd3mym.php:60\n\
    Stack trace:\n#0 /tmp/tmpeozd3mym.php(68): test()\n#1 {main}\n  thrown in /tmp/tmpeozd3mym.php\
    \ on line 60\n"
  timestamp: 1660005482
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\n$grades = array(4.0,\
    \ 3, 1.7, 2, 3.5);\nprint_r(numerical_letter_grade($grades));\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2usiazno.php:65\n\
    Stack trace:\n#0 /tmp/tmp2usiazno.php(73): test()\n#1 {main}\n  thrown in /tmp/tmp2usiazno.php\
    \ on line 65\n"
  timestamp: 1660005482
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $new_grades = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ >= 4.0) {\n            $new_grades[] = \"A+\";\n        } elseif ($grade >=\
    \ 3.7) {\n            $new_grades[] = \"A\";\n        } elseif ($grade >= 3.3)\
    \ {\n            $new_grades[] = \"A-\";\n        } elseif ($grade >= 3.0) {\n\
    \            $new_grades[] = \"B+\";\n        } elseif ($grade >= 2.7) {\n   \
    \         $new_grades[] = \"B\";\n        } elseif ($grade >= 2.3) {\n       \
    \     $new_grades[] = \"B-\";\n        } elseif ($grade >= 2.0) {\n          \
    \  $new_grades[] = \"C+\";\n        } elseif ($grade >= 1.7) {\n            $new_grades[]\
    \ = \"C\";\n        } elseif ($grade >= 1.3) {\n            $new_grades[] = \"\
    C-\";\n        } elseif ($grade >= 1.0) {\n            $new_grades[] = \"D+\"\
    ;\n        } elseif ($grade >= 0.7) {\n            $new_grades[] = \"D\";\n  \
    \      } elseif ($grade >= 0.0) {\n            $new_grades[] = \"D-\";\n     \
    \   } else {\n            $new_grades[] = \"E\";\n        }\n    }\n    return\
    \ $new_grades;\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpovl87nb8.php:63\n\
    Stack trace:\n#0 /tmp/tmpovl87nb8.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpovl87nb8.php\
    \ on line 63\n"
  timestamp: 1660005482
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkt05io_h.php:63\n\
    Stack trace:\n#0 /tmp/tmpkt05io_h.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpkt05io_h.php\
    \ on line 63\n"
  timestamp: 1660005482
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ == 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif ($grade\
    \ >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade >=\
    \ 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade >=\
    \ 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade >=\
    \ 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >= 2.3)\
    \ {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >= 2.0)\
    \ {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >= 1.7)\
    \ {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3) {\n\
    \            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0) {\n\
    \            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7) {\n\
    \            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n \
    \           $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n$grades = [4.0, 3,\
    \ 1.7, 2, 3.5];\necho implode(', ', numerical_letter_grade($grades));\nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "A+, B+, C, C+, A-\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppjdqfi17.php:64\n\
    Stack trace:\n#0 /tmp/tmppjdqfi17.php(72): test()\n#1 {main}\n  thrown in /tmp/tmppjdqfi17.php\
    \ on line 64\n"
  timestamp: 1660005482
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $result = [];\n    foreach ($grades as $num) {\n        if ($num > 4.0)\
    \ {\n            array_push($result, \"A+\");\n        } elseif ($num > 3.7) {\n\
    \            array_push($result, \"A\");\n        } elseif ($num > 3.3) {\n  \
    \          array_push($result, \"A-\");\n        } elseif ($num > 3.0) {\n   \
    \         array_push($result, \"B+\");\n        } elseif ($num > 2.7) {\n    \
    \        array_push($result, \"B\");\n        } elseif ($num > 2.3) {\n      \
    \      array_push($result, \"B-\");\n        } elseif ($num > 2.0) {\n       \
    \     array_push($result, \"C+\");\n        } elseif ($num > 1.7) {\n        \
    \    array_push($result, \"C\");\n        } elseif ($num > 1.3) {\n          \
    \  array_push($result, \"C-\");\n        } elseif ($num > 1.0) {\n           \
    \ array_push($result, \"D+\");\n        } elseif ($num > 0.7) {\n            array_push($result,\
    \ \"D\");\n        } elseif ($num > 0.0) {\n            array_push($result, \"\
    D-\");\n        } else {\n            array_push($result, \"E\");\n        }\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwt9hbux5.php:63\n\
    Stack trace:\n#0 /tmp/tmpwt9hbux5.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpwt9hbux5.php\
    \ on line 63\n"
  timestamp: 1660005482
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letters = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ >= 4.0) {\n            $letters[] = \"A+\";\n        } elseif ($grade >= 3.7)\
    \ {\n            $letters[] = \"A\";\n        } elseif ($grade >= 3.3) {\n   \
    \         $letters[] = \"A-\";\n        } elseif ($grade >= 3.0) {\n         \
    \   $letters[] = \"B+\";\n        } elseif ($grade >= 2.7) {\n            $letters[]\
    \ = \"B\";\n        } elseif ($grade >= 2.3) {\n            $letters[] = \"B-\"\
    ;\n        } elseif ($grade >= 2.0) {\n            $letters[] = \"C+\";\n    \
    \    } elseif ($grade >= 1.7) {\n            $letters[] = \"C\";\n        } elseif\
    \ ($grade >= 1.3) {\n            $letters[] = \"C-\";\n        } elseif ($grade\
    \ >= 1.0) {\n            $letters[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letters[] = \"D\";\n        } elseif ($grade > 0.0) {\n    \
    \        $letters[] = \"D-\";\n        } else {\n            $letters[] = \"E\"\
    ;\n        }\n    }\n    return $letters;\n}\n\necho implode(', ', numerical_letter_grade([4.0,\
    \ 3, 1.7, 2, 3.5])) . PHP_EOL;\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "A+, B+, C, C+, A-\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpklzrcifh.php:64\n\
    Stack trace:\n#0 /tmp/tmpklzrcifh.php(72): test()\n#1 {main}\n  thrown in /tmp/tmpklzrcifh.php\
    \ on line 64\n"
  timestamp: 1660005482
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n  $gpa_letter_grade = array(\n    \"4.0\" => \"A+\",\n    \"3.7\" => \"A\"\
    ,\n    \"3.3\" => \"A-\",\n    \"3.0\" => \"B+\",\n    \"2.7\" => \"B\",\n   \
    \ \"2.3\" => \"B-\",\n    \"2.0\" => \"C+\",\n    \"1.7\" => \"C\",\n    \"1.3\"\
    \ => \"C-\",\n    \"1.0\" => \"D+\",\n    \"0.7\" => \"D\",\n    \"0.0\" => \"\
    D-\",\n    \"-1\" => \"E\"\n  );\n  $student_grade = array();\n  foreach ($grades\
    \ as $gpa) {\n    $letter_grade = \"\";\n    foreach ($gpa_letter_grade as $boundary\
    \ => $grade) {\n      if ($gpa >= $boundary) {\n        $letter_grade = $grade;\n\
    \        break;\n      }\n    }\n    array_push($student_grade, $letter_grade);\n\
    \  }\n  return $student_grade;\n}\nfunction candidate(...$args) {\n    return\
    \ numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4.0,\
    \ 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.2)) !== array(\"D+\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5)) !==\
    \ array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3f_d96oq.php:58\n\
    Stack trace:\n#0 /tmp/tmp3f_d96oq.php(66): test()\n#1 {main}\n  thrown in /tmp/tmp3f_d96oq.php\
    \ on line 58\n"
  timestamp: 1660005482
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $array = [];\n    for ($i = 0; $i < count($grades); $i++) {\n       \
    \ if ($grades[$i] >= 4.0) {\n            $array[] = \"A+\";\n        } elseif\
    \ ($grades[$i] >= 3.7) {\n            $array[] = \"A\";\n        } elseif ($grades[$i]\
    \ >= 3.3) {\n            $array[] = \"A-\";\n        } elseif ($grades[$i] >=\
    \ 3.0) {\n            $array[] = \"B+\";\n        } elseif ($grades[$i] >= 2.7)\
    \ {\n            $array[] = \"B\";\n        } elseif ($grades[$i] >= 2.3) {\n\
    \            $array[] = \"B-\";\n        } elseif ($grades[$i] >= 2.0) {\n   \
    \         $array[] = \"C+\";\n        } elseif ($grades[$i] >= 1.7) {\n      \
    \      $array[] = \"C\";\n        } elseif ($grades[$i] >= 1.3) {\n          \
    \  $array[] = \"C-\";\n        } elseif ($grades[$i] >= 1.0) {\n            $array[]\
    \ = \"D+\";\n        } elseif ($grades[$i] >= 0.7) {\n            $array[] = \"\
    D\";\n        } elseif ($grades[$i] >= 0.0) {\n            $array[] = \"D-\";\n\
    \        } else {\n            $array[] = \"E\";\n        }\n    }\n    return\
    \ $array;\n}\nprint_r(numerical_letter_grade(array(4.0, 3, 1.7, 2, 3.5)));\n\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6njh356x.php:64\n\
    Stack trace:\n#0 /tmp/tmp6njh356x.php(72): test()\n#1 {main}\n  thrown in /tmp/tmp6njh356x.php\
    \ on line 64\n"
  timestamp: 1660005482
- exit_code: 0
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = [];\n    for ($i = 0; $i < count($grades); $i++) {\n\
    \        $grade = $grades[$i];\n        if ($grade === 4.0) {\n            $letter_grades[]\
    \ = \"A+\";\n        } elseif ($grade > 3.7) {\n            $letter_grades[] =\
    \ \"A\";\n        } elseif ($grade > 3.3) {\n            $letter_grades[] = \"\
    A-\";\n        } elseif ($grade > 3.0) {\n            $letter_grades[] = \"B+\"\
    ;\n        } elseif ($grade > 2.7) {\n            $letter_grades[] = \"B\";\n\
    \        } elseif ($grade > 2.3) {\n            $letter_grades[] = \"B-\";\n \
    \       } elseif ($grade > 2.0) {\n            $letter_grades[] = \"C+\";\n  \
    \      } elseif ($grade > 1.7) {\n            $letter_grades[] = \"C\";\n    \
    \    } elseif ($grade > 1.3) {\n            $letter_grades[] = \"C-\";\n     \
    \   } elseif ($grade > 1.0) {\n            $letter_grades[] = \"D+\";\n      \
    \  } elseif ($grade > 0.7) {\n            $letter_grades[] = \"D\";\n        }\
    \ elseif ($grade > 0.0) {\n            $letter_grades[] = \"D-\";\n        } else\
    \ {\n            $letter_grades[] = \"E\";\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660005482
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade > 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade > 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ > 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade >\
    \ 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade > 2.7)\
    \ {\n            $letter_grades[] = \"B\";\n        } elseif ($grade > 2.3) {\n\
    \            $letter_grades[] = \"B-\";\n        } elseif ($grade > 2.0) {\n \
    \           $letter_grades[] = \"C+\";\n        } elseif ($grade > 1.7) {\n  \
    \          $letter_grades[] = \"C\";\n        } elseif ($grade > 1.3) {\n    \
    \        $letter_grades[] = \"C-\";\n        } elseif ($grade > 1.0) {\n     \
    \       $letter_grades[] = \"D+\";\n        } elseif ($grade > 0.7) {\n      \
    \      $letter_grades[] = \"D\";\n        } elseif ($grade > 0.0) {\n        \
    \    $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcbn_kjky.php:63\n\
    Stack trace:\n#0 /tmp/tmpcbn_kjky.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpcbn_kjky.php\
    \ on line 63\n"
  timestamp: 1660005482
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    // your code here\n    \n    \n}\nfunction candidate(...$args) {\n  \
    \  return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\",\
    \ \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppv53w5_b.php:34\n\
    Stack trace:\n#0 /tmp/tmppv53w5_b.php(42): test()\n#1 {main}\n  thrown in /tmp/tmppv53w5_b.php\
    \ on line 34\n"
  timestamp: 1660005482
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $possible_grades = [\n        \"A+\" => 4.0,\n        \"A\" => 3.7,\n\
    \        \"A-\" => 3.3,\n        \"B+\" => 3.0,\n        \"B\" => 2.7,\n     \
    \   \"B-\" => 2.3,\n        \"C+\" => 2.0,\n        \"C\" => 1.7,\n        \"\
    C-\" => 1.3,\n        \"D+\" => 1.0,\n        \"D\" => 0.7,\n        \"D-\" =>\
    \ 0.0,\n        \"E\" => 0.0\n    ];\n    $possible_grades = array_reverse($possible_grades);\n\
    \    $letter_grades = [];\n    foreach ($grades as $grade) {\n        $letter_grade\
    \ = \"E\";\n        foreach ($possible_grades as $letter => $score) {\n      \
    \      if ($grade >= $score) {\n                $letter_grade = $letter;\n   \
    \             break;\n            }\n        }\n        $letter_grades[] = $letter_grade;\n\
    \    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args) {\n    return\
    \ numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4.0,\
    \ 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.2)) !== array(\"D+\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5)) !==\
    \ array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp250qt6kj.php:60\n\
    Stack trace:\n#0 /tmp/tmp250qt6kj.php(68): test()\n#1 {main}\n  thrown in /tmp/tmp250qt6kj.php\
    \ on line 60\n"
  timestamp: 1660005482
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n\t$result = array();\n\t$arr = array(\n\t\t\"A+\" => 4.0,\n\t\t\"A\" => 3.7,\n\
    \t\t\"A-\" => 3.3,\n\t\t\"B+\" => 3.0,\n\t\t\"B\" => 2.7,\n\t\t\"B-\" => 2.3,\n\
    \t\t\"C+\" => 2.0,\n\t\t\"C\" => 1.7,\n\t\t\"C-\" => 1.3,\n\t\t\"D+\" => 1.0,\n\
    \t\t\"D\" => 0.7,\n\t\t\"D-\" => 0.0,\n\t\t\"E\" => 0.0\n\t);\n\tforeach ($grades\
    \ as $grade) {\n\t\t$i = 0;\n\t\twhile($grade < $arr[key($arr)]) {\n\t\t\tif($i\
    \ == count($arr) - 1) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t$i++;\n\t\t\tnext($arr);\n\
    \t\t}\n\t\t$result[] = key($arr);\n\t}\n\treturn $result;\n}\n\n$arr = array(4.0,\
    \ 3, 1.7, 2, 3.5);\n$result = numerical_letter_grade($arr);\nvar_dump($result);\n\
    \nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(5) {\n  [0]=>\n  string(2) \"A+\"\n  [1]=>\n  string(2) \"B+\"\n\
    \  [2]=>\n  string(1) \"C\"\n  [3]=>\n  string(1) \"C\"\n  [4]=>\n  string(1)\
    \ \"C\"\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppe6oxly2.php:64\n\
    Stack trace:\n#0 /tmp/tmppe6oxly2.php(72): test()\n#1 {main}\n  thrown in /tmp/tmppe6oxly2.php\
    \ on line 64\n"
  timestamp: 1660005482
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $numerical_grades = array();\n    foreach ($grades as $grade) {\n   \
    \     if ($grade >= 4.0) {\n            $numerical_grades[] = \"A+\";\n      \
    \  } elseif ($grade >= 3.7) {\n            $numerical_grades[] = \"A\";\n    \
    \    } elseif ($grade >= 3.3) {\n            $numerical_grades[] = \"A-\";\n \
    \       } elseif ($grade >= 3.0) {\n            $numerical_grades[] = \"B+\";\n\
    \        } elseif ($grade >= 2.7) {\n            $numerical_grades[] = \"B\";\n\
    \        } elseif ($grade >= 2.3) {\n            $numerical_grades[] = \"B-\"\
    ;\n        } elseif ($grade >= 2.0) {\n            $numerical_grades[] = \"C+\"\
    ;\n        } elseif ($grade >= 1.7) {\n            $numerical_grades[] = \"C\"\
    ;\n        } elseif ($grade >= 1.3) {\n            $numerical_grades[] = \"C-\"\
    ;\n        } elseif ($grade >= 1.0) {\n            $numerical_grades[] = \"D+\"\
    ;\n        } elseif ($grade >= 0.7) {\n            $numerical_grades[] = \"D\"\
    ;\n        } elseif ($grade >= 0.0) {\n            $numerical_grades[] = \"D-\"\
    ;\n        } else {\n            $numerical_grades[] = \"E\";\n        }\n   \
    \ }\n    return $numerical_grades;\n}\nfunction candidate(...$args) {\n    return\
    \ numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4.0,\
    \ 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.2)) !== array(\"D+\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5)) !==\
    \ array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptpp93rz5.php:62\n\
    Stack trace:\n#0 /tmp/tmptpp93rz5.php(70): test()\n#1 {main}\n  thrown in /tmp/tmptpp93rz5.php\
    \ on line 62\n"
  timestamp: 1660005482
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n\t$arr = array();\n\tforeach ($grades as $grade) {\n\t\tif ($grade > 4.0)\
    \ {\n\t\t\t$arr[] = \"A+\";\n\t\t} elseif ($grade > 3.7) {\n\t\t\t$arr[] = \"\
    A\";\n\t\t} elseif ($grade > 3.3) {\n\t\t\t$arr[] = \"A-\";\n\t\t} elseif ($grade\
    \ > 3.0) {\n\t\t\t$arr[] = \"B+\";\n\t\t} elseif ($grade > 2.7) {\n\t\t\t$arr[]\
    \ = \"B\";\n\t\t} elseif ($grade > 2.3) {\n\t\t\t$arr[] = \"B-\";\n\t\t} elseif\
    \ ($grade > 2.0) {\n\t\t\t$arr[] = \"C+\";\n\t\t} elseif ($grade > 1.7) {\n\t\t\
    \t$arr[] = \"C\";\n\t\t} elseif ($grade > 1.3) {\n\t\t\t$arr[] = \"C-\";\n\t\t\
    } elseif ($grade > 1.0) {\n\t\t\t$arr[] = \"D+\";\n\t\t} elseif ($grade > 0.7)\
    \ {\n\t\t\t$arr[] = \"D\";\n\t\t} elseif ($grade > 0.0) {\n\t\t\t$arr[] = \"D-\"\
    ;\n\t\t} else {\n\t\t\t$arr[] = \"E\";\n\t\t}\n\t}\n\treturn $arr;\n}\nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgls6z2pl.php:62\n\
    Stack trace:\n#0 /tmp/tmpgls6z2pl.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpgls6z2pl.php\
    \ on line 62\n"
  timestamp: 1660005482
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n\t$letter_grades = array();\n\tforeach ($grades as $grade) {\n\t\tif ($grade\
    \ >= 4.0) {\n\t\t\t$letter_grades[] = \"A+\";\n\t\t} elseif ($grade >= 3.7) {\n\
    \t\t\t$letter_grades[] = \"A\";\n\t\t} elseif ($grade >= 3.3) {\n\t\t\t$letter_grades[]\
    \ = \"A-\";\n\t\t} elseif ($grade >= 3.0) {\n\t\t\t$letter_grades[] = \"B+\";\n\
    \t\t} elseif ($grade >= 2.7) {\n\t\t\t$letter_grades[] = \"B\";\n\t\t} elseif\
    \ ($grade >= 2.3) {\n\t\t\t$letter_grades[] = \"B-\";\n\t\t} elseif ($grade >=\
    \ 2.0) {\n\t\t\t$letter_grades[] = \"C+\";\n\t\t} elseif ($grade >= 1.7) {\n\t\
    \t\t$letter_grades[] = \"C\";\n\t\t} elseif ($grade >= 1.3) {\n\t\t\t$letter_grades[]\
    \ = \"C-\";\n\t\t} elseif ($grade >= 1.0) {\n\t\t\t$letter_grades[] = \"D+\";\n\
    \t\t} elseif ($grade >= 0.7) {\n\t\t\t$letter_grades[] = \"D\";\n\t\t} elseif\
    \ ($grade >= 0.0) {\n\t\t\t$letter_grades[] = \"D-\";\n\t\t} else {\n\t\t\t$letter_grades[]\
    \ = \"E\";\n\t\t}\n\t}\n\treturn $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpotnirxrx.php:63\n\
    Stack trace:\n#0 /tmp/tmpotnirxrx.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpotnirxrx.php\
    \ on line 63\n"
  timestamp: 1659824568
- exit_code: 0
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n\t$letter_grades = array();\n\t\n\tforeach ($grades as $grade) {\n\t\tif\
    \ ($grade == 4.0) {\n\t\t\t$letter_grades[] = \"A+\";\n\t\t} elseif ($grade >\
    \ 3.7) {\n\t\t\t$letter_grades[] = \"A\";\n\t\t} elseif ($grade > 3.3) {\n\t\t\
    \t$letter_grades[] = \"A-\";\n\t\t} elseif ($grade > 3.0) {\n\t\t\t$letter_grades[]\
    \ = \"B+\";\n\t\t} elseif ($grade > 2.7) {\n\t\t\t$letter_grades[] = \"B\";\n\t\
    \t} elseif ($grade > 2.3) {\n\t\t\t$letter_grades[] = \"B-\";\n\t\t} elseif ($grade\
    \ > 2.0) {\n\t\t\t$letter_grades[] = \"C+\";\n\t\t} elseif ($grade > 1.7) {\n\t\
    \t\t$letter_grades[] = \"C\";\n\t\t} elseif ($grade > 1.3) {\n\t\t\t$letter_grades[]\
    \ = \"C-\";\n\t\t} elseif ($grade > 1.0) {\n\t\t\t$letter_grades[] = \"D+\";\n\
    \t\t} elseif ($grade > 0.7) {\n\t\t\t$letter_grades[] = \"D\";\n\t\t} elseif ($grade\
    \ > 0.0) {\n\t\t\t$letter_grades[] = \"D-\";\n\t\t} else {\n\t\t\t$letter_grades[]\
    \ = \"E\";\n\t\t}\n\t}\n\t\n\treturn $letter_grades;\n}\n\nprint_r(numerical_letter_grade(array(4.0,\
    \ 3, 1.7, 2, 3.5)));\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => A+\n    [1] => B\n    [2] => C-\n    [3] => C\n  \
    \  [4] => A-\n)\n"
  timestamp: 1660005482
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif ($grade\
    \ >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade >=\
    \ 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade >=\
    \ 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade >=\
    \ 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >= 2.3)\
    \ {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >= 2.0)\
    \ {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >= 1.7)\
    \ {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3) {\n\
    \            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0) {\n\
    \            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7) {\n\
    \            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n \
    \           $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n$grades = [4.0, 3,\
    \ 1.7, 2, 3.5];\n$letter_grades = numerical_letter_grade($grades);\nprint_r($letter_grades);\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp18uw3fw6.php:65\n\
    Stack trace:\n#0 /tmp/tmp18uw3fw6.php(73): test()\n#1 {main}\n  thrown in /tmp/tmp18uw3fw6.php\
    \ on line 65\n"
  timestamp: 1660005482
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $numerical_letter_grade = array();\n    foreach ($grades as $grade) {\n\
    \        if ($grade >= 4.0) {\n            $numerical_letter_grade[] = \"A+\"\
    ;\n        } elseif ($grade >= 3.7) {\n            $numerical_letter_grade[] =\
    \ \"A\";\n        } elseif ($grade >= 3.3) {\n            $numerical_letter_grade[]\
    \ = \"A-\";\n        } elseif ($grade >= 3.0) {\n            $numerical_letter_grade[]\
    \ = \"B+\";\n        } elseif ($grade >= 2.7) {\n            $numerical_letter_grade[]\
    \ = \"B\";\n        } elseif ($grade >= 2.3) {\n            $numerical_letter_grade[]\
    \ = \"B-\";\n        } elseif ($grade >= 2.0) {\n            $numerical_letter_grade[]\
    \ = \"C+\";\n        } elseif ($grade >= 1.7) {\n            $numerical_letter_grade[]\
    \ = \"C\";\n        } elseif ($grade >= 1.3) {\n            $numerical_letter_grade[]\
    \ = \"C-\";\n        } elseif ($grade >= 1.0) {\n            $numerical_letter_grade[]\
    \ = \"D+\";\n        } elseif ($grade >= 0.7) {\n            $numerical_letter_grade[]\
    \ = \"D\";\n        } elseif ($grade >= 0.0) {\n            $numerical_letter_grade[]\
    \ = \"D-\";\n        } else {\n            $numerical_letter_grade[] = \"E\";\n\
    \        }\n    }\n    return $numerical_letter_grade;\n}\n$grades = array(4.0,\
    \ 3, 1.7, 2, 3.5);\nprint_r(numerical_letter_grade($grades));\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb_w0r5oh.php:64\n\
    Stack trace:\n#0 /tmp/tmpb_w0r5oh.php(72): test()\n#1 {main}\n  thrown in /tmp/tmpb_w0r5oh.php\
    \ on line 64\n"
  timestamp: 1660005482
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade > 4.0) {\n            array_push($letter_grades, \"A+\");\n    \
    \    } elseif ($grade >= 3.7) {\n            array_push($letter_grades, \"A\"\
    );\n        } elseif ($grade >= 3.3) {\n            array_push($letter_grades,\
    \ \"A-\");\n        } elseif ($grade >= 3.0) {\n            array_push($letter_grades,\
    \ \"B+\");\n        } elseif ($grade >= 2.7) {\n            array_push($letter_grades,\
    \ \"B\");\n        } elseif ($grade >= 2.3) {\n            array_push($letter_grades,\
    \ \"B-\");\n        } elseif ($grade >= 2.0) {\n            array_push($letter_grades,\
    \ \"C+\");\n        } elseif ($grade >= 1.7) {\n            array_push($letter_grades,\
    \ \"C\");\n        } elseif ($grade >= 1.3) {\n            array_push($letter_grades,\
    \ \"C-\");\n        } elseif ($grade >= 1.0) {\n            array_push($letter_grades,\
    \ \"D+\");\n        } elseif ($grade >= 0.7) {\n            array_push($letter_grades,\
    \ \"D\");\n        } elseif ($grade >= 0.0) {\n            array_push($letter_grades,\
    \ \"D-\");\n        } else {\n            array_push($letter_grades, \"E\");\n\
    \        }\n    }\n    return $letter_grades;\n}\n\n$grades = array(4.0, 3, 1.7,\
    \ 2, 3.5);\nprint_r(numerical_letter_grade($grades));\necho \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A\n    [1] => B+\n    [2] => C\n    [3] => C+\n  \
    \  [4] => A-\n)\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk65cfzl5.php:66\n\
    Stack trace:\n#0 /tmp/tmpk65cfzl5.php(74): test()\n#1 {main}\n  thrown in /tmp/tmpk65cfzl5.php\
    \ on line 66\n"
  timestamp: 1660005482
- exit_code: 0
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade == 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade > 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ > 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade >\
    \ 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade > 2.7)\
    \ {\n            $letter_grades[] = \"B\";\n        } elseif ($grade > 2.3) {\n\
    \            $letter_grades[] = \"B-\";\n        } elseif ($grade > 2.0) {\n \
    \           $letter_grades[] = \"C+\";\n        } elseif ($grade > 1.7) {\n  \
    \          $letter_grades[] = \"C\";\n        } elseif ($grade > 1.3) {\n    \
    \        $letter_grades[] = \"C-\";\n        } elseif ($grade > 1.0) {\n     \
    \       $letter_grades[] = \"D+\";\n        } elseif ($grade > 0.7) {\n      \
    \      $letter_grades[] = \"D\";\n        } elseif ($grade > 0.0) {\n        \
    \    $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660005482
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n  $letter_grades = [];\n  foreach ($grades as $grade) {\n    if($grade >=\
    \ 4.0) {\n      $letter_grades[] = \"A+\";\n    } elseif ($grade >= 3.7) {\n \
    \     $letter_grades[] = \"A\";\n    } elseif ($grade >= 3.3) {\n      $letter_grades[]\
    \ = \"A-\";\n    } elseif ($grade >= 3.0) {\n      $letter_grades[] = \"B+\";\n\
    \    } elseif ($grade >= 2.7) {\n      $letter_grades[] = \"B\";\n    } elseif\
    \ ($grade >= 2.3) {\n      $letter_grades[] = \"B-\";\n    } elseif ($grade >=\
    \ 2.0) {\n      $letter_grades[] = \"C+\";\n    } elseif ($grade >= 1.7) {\n \
    \     $letter_grades[] = \"C\";\n    } elseif ($grade >= 1.3) {\n      $letter_grades[]\
    \ = \"C-\";\n    } elseif ($grade >= 1.0) {\n      $letter_grades[] = \"D+\";\n\
    \    } elseif ($grade >= 0.7) {\n      $letter_grades[] = \"D\";\n    } elseif\
    \ ($grade >= 0.0) {\n      $letter_grades[] = \"D-\";\n    } else {\n      $letter_grades[]\
    \ = \"E\";\n    }\n  }\n  return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfuhpopsl.php:63\n\
    Stack trace:\n#0 /tmp/tmpfuhpopsl.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpfuhpopsl.php\
    \ on line 63\n"
  timestamp: 1660005482
- exit_code: 0
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n\t$answer = array();\n\tforeach ($grades as $gpa) {\n\t\tif ($gpa === 4.0)\
    \ {\n\t\t\t$answer[] = \"A+\";\n\t\t} elseif ($gpa > 3.7) {\n\t\t\t$answer[] =\
    \ \"A\";\n\t\t} elseif ($gpa > 3.3) {\n\t\t\t$answer[] = \"A-\";\n\t\t} elseif\
    \ ($gpa > 3.0) {\n\t\t\t$answer[] = \"B+\";\n\t\t} elseif ($gpa > 2.7) {\n\t\t\
    \t$answer[] = \"B\";\n\t\t} elseif ($gpa > 2.3) {\n\t\t\t$answer[] = \"B-\";\n\
    \t\t} elseif ($gpa > 2.0) {\n\t\t\t$answer[] = \"C+\";\n\t\t} elseif ($gpa > 1.7)\
    \ {\n\t\t\t$answer[] = \"C\";\n\t\t} elseif ($gpa > 1.3) {\n\t\t\t$answer[] =\
    \ \"C-\";\n\t\t} elseif ($gpa > 1.0) {\n\t\t\t$answer[] = \"D+\";\n\t\t} elseif\
    \ ($gpa > 0.7) {\n\t\t\t$answer[] = \"D\";\n\t\t} elseif ($gpa > 0.0) {\n\t\t\t\
    $answer[] = \"D-\";\n\t\t} else {\n\t\t\t$answer[] = \"E\";\n\t\t}\n\t}\n\treturn\
    \ $answer;\n}\n\necho implode(\", \", numerical_letter_grade(array(4.0, 3, 1.7,\
    \ 2, 3.5)));\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: A+, B, C-, C, A-
  timestamp: 1660005482
- exit_code: 0
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n  $result = [];\n  foreach ($grades as $value) {\n    if ($value == 4.0)\
    \ {\n      $result[] = \"A+\";\n    } elseif ($value > 3.7) {\n      $result[]\
    \ = \"A\";\n    } elseif ($value > 3.3) {\n      $result[] = \"A-\";\n    } elseif\
    \ ($value > 3.0) {\n      $result[] = \"B+\";\n    } elseif ($value > 2.7) {\n\
    \      $result[] = \"B\";\n    } elseif ($value > 2.3) {\n      $result[] = \"\
    B-\";\n    } elseif ($value > 2.0) {\n      $result[] = \"C+\";\n    } elseif\
    \ ($value > 1.7) {\n      $result[] = \"C\";\n    } elseif ($value > 1.3) {\n\
    \      $result[] = \"C-\";\n    } elseif ($value > 1.0) {\n      $result[] = \"\
    D+\";\n    } elseif ($value > 0.7) {\n      $result[] = \"D\";\n    } elseif ($value\
    \ > 0.0) {\n      $result[] = \"D-\";\n    } else {\n      $result[] = \"E\";\n\
    \    }\n  }\n  return $result;\n}\n\n$grades = [4.0, 3, 1.7, 2, 3.5];\necho \"\
    Given grades : \".implode(\", \", $grades).\"<br>\";\n$result = numerical_letter_grade($grades);\n\
    echo \"Result : \".implode(\", \", $result);\nfunction candidate(...$args) {\n\
    \    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Given grades : 4, 3, 1.7, 2, 3.5<br>Result : A+, B, C-, C, A-'
  timestamp: 1660005482
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades_map = [\n        \"A+\" => 4.0,\n        \"A\" => 3.7,\n    \
    \    \"A-\" => 3.3,\n        \"B+\" => 3.0,\n        \"B\" => 2.7,\n        \"\
    B-\" => 2.3,\n        \"C+\" => 2.0,\n        \"C\" => 1.7,\n        \"C-\" =>\
    \ 1.3,\n        \"D+\" => 1.0,\n        \"D\" => 0.7,\n        \"D-\" => 0.0,\n\
    \        \"E\" => 0.0\n    ];\n    $grades_result = [];\n    foreach ($grades\
    \ as $grade) {\n        foreach ($grades_map as $letter_grade => $gpa) {\n   \
    \         if ($grade >= $gpa) {\n                $grades_result[] = $letter_grade;\n\
    \                break;\n            }\n        }\n    }\n    return $grades_result;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2iao024g.php:57\n\
    Stack trace:\n#0 /tmp/tmp2iao024g.php(65): test()\n#1 {main}\n  thrown in /tmp/tmp2iao024g.php\
    \ on line 57\n"
  timestamp: 1660005482
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    // your solution here\n}\nfunction candidate(...$args) {\n    return\
    \ numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4.0,\
    \ 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.2)) !== array(\"D+\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5)) !==\
    \ array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1gwnu0a2.php:32\n\
    Stack trace:\n#0 /tmp/tmp1gwnu0a2.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp1gwnu0a2.php\
    \ on line 32\n"
  timestamp: 1660005482
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $result = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ >= 4.0) {\n            $result[] = \"A+\";\n        } elseif ($grade >= 3.7)\
    \ {\n            $result[] = \"A\";\n        } elseif ($grade >= 3.3) {\n    \
    \        $result[] = \"A-\";\n        } elseif ($grade >= 3.0) {\n           \
    \ $result[] = \"B+\";\n        } elseif ($grade >= 2.7) {\n            $result[]\
    \ = \"B\";\n        } elseif ($grade >= 2.3) {\n            $result[] = \"B-\"\
    ;\n        } elseif ($grade >= 2.0) {\n            $result[] = \"C+\";\n     \
    \   } elseif ($grade >= 1.7) {\n            $result[] = \"C\";\n        } elseif\
    \ ($grade >= 1.3) {\n            $result[] = \"C-\";\n        } elseif ($grade\
    \ >= 1.0) {\n            $result[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $result[] = \"D\";\n        } elseif ($grade >= 0.0) {\n    \
    \        $result[] = \"D-\";\n        } else {\n            $result[] = \"E\"\
    ;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeezbsm0j.php:63\n\
    Stack trace:\n#0 /tmp/tmpeezbsm0j.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpeezbsm0j.php\
    \ on line 63\n"
  timestamp: 1660005482
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n  // your code here\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi_s2n722.php:33\n\
    Stack trace:\n#0 /tmp/tmpi_s2n722.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpi_s2n722.php\
    \ on line 33\n"
  timestamp: 1660005482
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n  $grade_letter = [];\n  foreach ($grades as $grade) {\n    if ($grade >=\
    \ 4.0) {\n      $grade_letter[] = \"A+\";\n    } elseif ($grade >= 3.7) {\n  \
    \    $grade_letter[] = \"A\";\n    } elseif ($grade >= 3.3) {\n      $grade_letter[]\
    \ = \"A-\";\n    } elseif ($grade >= 3.0) {\n      $grade_letter[] = \"B+\";\n\
    \    } elseif ($grade >= 2.7) {\n      $grade_letter[] = \"B\";\n    } elseif\
    \ ($grade >= 2.3) {\n      $grade_letter[] = \"B-\";\n    } elseif ($grade >=\
    \ 2.0) {\n      $grade_letter[] = \"C+\";\n    } elseif ($grade >= 1.7) {\n  \
    \    $grade_letter[] = \"C\";\n    } elseif ($grade >= 1.3) {\n      $grade_letter[]\
    \ = \"C-\";\n    } elseif ($grade >= 1.0) {\n      $grade_letter[] = \"D+\";\n\
    \    } elseif ($grade >= 0.7) {\n      $grade_letter[] = \"D\";\n    } elseif\
    \ ($grade >= 0.0) {\n      $grade_letter[] = \"D-\";\n    } else {\n      $grade_letter[]\
    \ = \"E\";\n    }\n  }\n  return $grade_letter;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz_x2aowq.php:63\n\
    Stack trace:\n#0 /tmp/tmpz_x2aowq.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpz_x2aowq.php\
    \ on line 63\n"
  timestamp: 1660005482
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n$grades = array(4.0,\
    \ 3, 1.7, 2, 3.5);\nprint_r(numerical_letter_grade($grades));\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphxg_ipgp.php:64\n\
    Stack trace:\n#0 /tmp/tmphxg_ipgp.php(72): test()\n#1 {main}\n  thrown in /tmp/tmphxg_ipgp.php\
    \ on line 64\n"
  timestamp: 1660005482
- exit_code: 0
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n  $grades_array = array();\n  foreach ($grades as $gpa) {\n    if ($gpa ==\
    \ 4.0) {\n      $letter_grade = \"A+\";\n    } elseif ($gpa > 3.7) {\n      $letter_grade\
    \ = \"A\";\n    } elseif ($gpa > 3.3) {\n      $letter_grade = \"A-\";\n    }\
    \ elseif ($gpa > 3.0) {\n      $letter_grade = \"B+\";\n    } elseif ($gpa > 2.7)\
    \ {\n      $letter_grade = \"B\";\n    } elseif ($gpa > 2.3) {\n      $letter_grade\
    \ = \"B-\";\n    } elseif ($gpa > 2.0) {\n      $letter_grade = \"C+\";\n    }\
    \ elseif ($gpa > 1.7) {\n      $letter_grade = \"C\";\n    } elseif ($gpa > 1.3)\
    \ {\n      $letter_grade = \"C-\";\n    } elseif ($gpa > 1.0) {\n      $letter_grade\
    \ = \"D+\";\n    } elseif ($gpa > 0.7) {\n      $letter_grade = \"D\";\n    }\
    \ elseif ($gpa > 0.0) {\n      $letter_grade = \"D-\";\n    } else {\n      $letter_grade\
    \ = \"E\";\n    }\n    array_push($grades_array, $letter_grade);\n  }\n  return\
    \ $grades_array;\n}\n$grades = array(4.0, 3, 1.7, 2, 3.5);\necho \"numerical_letter_grade(array(4.0,\
    \ 3, 1.7, 2, 3.5))\\n\";\nprint_r(numerical_letter_grade($grades));\necho \"\\\
    n\";\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "numerical_letter_grade(array(4.0, 3, 1.7, 2, 3.5))\nArray\n(\n    [0] =>\
    \ A+\n    [1] => B\n    [2] => C-\n    [3] => C\n    [4] => A-\n)\n\n"
  timestamp: 1660005482
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades_array = array();\n    $grades_array = $grades;\n    $grades_converted\
    \ = array();\n    foreach ($grades_array as $value) {\n        if($value == 4.0)\
    \ {\n            $grades_converted[] = \"A+\";\n        } elseif($value > 3.7\
    \ && $value < 4.0) {\n            $grades_converted[] = \"A\";\n        } elseif($value\
    \ > 3.3 && $value < 3.7) {\n            $grades_converted[] = \"A-\";\n      \
    \  } elseif($value > 3.0 && $value < 3.3) {\n            $grades_converted[] =\
    \ \"B+\";\n        } elseif($value > 2.7 && $value < 3.0) {\n            $grades_converted[]\
    \ = \"B\";\n        } elseif($value > 2.3 && $value < 2.7) {\n            $grades_converted[]\
    \ = \"B-\";\n        } elseif($value > 2.0 && $value < 2.3) {\n            $grades_converted[]\
    \ = \"C+\";\n        } elseif($value > 1.7 && $value < 2.0) {\n            $grades_converted[]\
    \ = \"C\";\n        } elseif($value > 1.3 && $value < 1.7) {\n            $grades_converted[]\
    \ = \"C-\";\n        } elseif($value > 1.0 && $value < 1.3) {\n            $grades_converted[]\
    \ = \"D+\";\n        } elseif($value > 0.7 && $value < 1.0) {\n            $grades_converted[]\
    \ = \"D\";\n        } elseif($value > 0.0 && $value < 0.7) {\n            $grades_converted[]\
    \ = \"D-\";\n        } elseif($value == 0.0) {\n            $grades_converted[]\
    \ = \"E\";\n        }\n    }\n    return $grades_converted;\n}\nprint_r(numerical_letter_grade(array(4.0,\
    \ 3, 1.7, 2, 3.5)));\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A+\n    [1] => A-\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpl0d12xhd.php:65\nStack trace:\n#0 /tmp/tmpl0d12xhd.php(73):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpl0d12xhd.php on line 65\n"
  timestamp: 1660005482
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    for ($i = 0; $i < count($grades); $i++)\
    \ {\n        switch ($grades[$i]) {\n            case ($grades[$i] >= 4.0):\n\
    \                $letter_grades[$i] = \"A+\";\n                break;\n      \
    \      case ($grades[$i] >= 3.7):\n                $letter_grades[$i] = \"A\"\
    ;\n                break;\n            case ($grades[$i] >= 3.3):\n          \
    \      $letter_grades[$i] = \"A-\";\n                break;\n            case\
    \ ($grades[$i] >= 3.0):\n                $letter_grades[$i] = \"B+\";\n      \
    \          break;\n            case ($grades[$i] >= 2.7):\n                $letter_grades[$i]\
    \ = \"B\";\n                break;\n            case ($grades[$i] >= 2.3):\n \
    \               $letter_grades[$i] = \"B-\";\n                break;\n       \
    \     case ($grades[$i] >= 2.0):\n                $letter_grades[$i] = \"C+\"\
    ;\n                break;\n            case ($grades[$i] >= 1.7):\n          \
    \      $letter_grades[$i] = \"C\";\n                break;\n            case ($grades[$i]\
    \ >= 1.3):\n                $letter_grades[$i] = \"C-\";\n                break;\n\
    \            case ($grades[$i] >= 1.0):\n                $letter_grades[$i] =\
    \ \"D+\";\n                break;\n            case ($grades[$i] >= 0.7):\n  \
    \              $letter_grades[$i] = \"D\";\n                break;\n         \
    \   case ($grades[$i] >= 0.0):\n                $letter_grades[$i] = \"D-\";\n\
    \                break;\n            case ($grades[$i] == 0.0):\n            \
    \    $letter_grades[$i] = \"E\";\n                break;\n        }\n    }\n \
    \   return $letter_grades;\n}\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9c17qn6e.php:76\n\
    Stack trace:\n#0 /tmp/tmp9c17qn6e.php(84): test()\n#1 {main}\n  thrown in /tmp/tmp9c17qn6e.php\
    \ on line 76\n"
  timestamp: 1660005482
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = [];\n    foreach ($grades as $grade) {\n        if($grade\
    \ > 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif ($grade >\
    \ 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade > 3.3)\
    \ {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade > 3.0) {\n\
    \            $letter_grades[] = \"B+\";\n        } elseif ($grade > 2.7) {\n \
    \           $letter_grades[] = \"B\";\n        } elseif ($grade > 2.3) {\n   \
    \         $letter_grades[] = \"B-\";\n        } elseif ($grade > 2.0) {\n    \
    \        $letter_grades[] = \"C+\";\n        } elseif ($grade > 1.7) {\n     \
    \       $letter_grades[] = \"C\";\n        } elseif ($grade > 1.3) {\n       \
    \     $letter_grades[] = \"C-\";\n        } elseif ($grade > 1.0) {\n        \
    \    $letter_grades[] = \"D+\";\n        } elseif ($grade > 0.7) {\n         \
    \   $letter_grades[] = \"D\";\n        } elseif ($grade > 0.0) {\n           \
    \ $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[] =\
    \ \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\n$letter_grades =\
    \ numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]);\n\nprint_r($letter_grades);\n\
    \nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A\n    [1] => B\n    [2] => C-\n    [3] => C\n   \
    \ [4] => A-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph1ug1n5n.php:67\n\
    Stack trace:\n#0 /tmp/tmph1ug1n5n.php(75): test()\n#1 {main}\n  thrown in /tmp/tmph1ug1n5n.php\
    \ on line 67\n"
  timestamp: 1660005482
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n\t$new_grade = [];\n\t//foreach($grades as $grade) {\n\t\tif($grade >= 4.0)\
    \ {\n\t\t\t$new_grade = \"A+\";\n\t\t}\n\t\telseif($grade > 3.7) {\n\t\t\t$new_grade\
    \ = \"A\";\n\t\t}\n\t\telseif($grade > 3.3) {\n\t\t\t$new_grade = \"A-\";\n\t\t\
    }\n\t\telseif($grade > 3.0) {\n\t\t\t$new_grade = \"B+\";\n\t\t}\n\t\telseif($grade\
    \ > 2.7) {\n\t\t\t$new_grade = \"B\";\n\t\t}\n\t\telseif($grade > 2.3) {\n\t\t\
    \t$new_grade = \"B-\";\n\t\t}\n\t\telseif($grade > 2.0) {\n\t\t\t$new_grade =\
    \ \"C+\";\n\t\t}\n\t\telseif($grade > 1.7) {\n\t\t\t$new_grade = \"C\";\n\t\t\
    }\n\t\telseif($grade > 1.3) {\n\t\t\t$new_grade = \"C-\";\n\t\t}\n\t\telseif($grade\
    \ > 1.0) {\n\t\t\t$new_grade = \"D+\";\n\t\t}\n\t\telseif($grade > 0.7) {\n\t\t\
    \t$new_grade = \"D\";\n\t\t}\n\t\telseif($grade > 0.0) {\n\t\t\t$new_grade = \"\
    D-\";\n\t\t}\n\t\telse {\n\t\t\t$new_grade = \"E\";\n\t\t}\n\t//}\n\treturn $new_grade;\n\
    }\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $grade in /tmp/tmpq3s0cxtn.php on line 27\n\
    \nWarning: Undefined variable $grade in /tmp/tmpq3s0cxtn.php on line 30\n\nWarning:\
    \ Undefined variable $grade in /tmp/tmpq3s0cxtn.php on line 33\n\nWarning: Undefined\
    \ variable $grade in /tmp/tmpq3s0cxtn.php on line 36\n\nWarning: Undefined variable\
    \ $grade in /tmp/tmpq3s0cxtn.php on line 39\n\nWarning: Undefined variable $grade\
    \ in /tmp/tmpq3s0cxtn.php on line 42\n\nWarning: Undefined variable $grade in\
    \ /tmp/tmpq3s0cxtn.php on line 45\n\nWarning: Undefined variable $grade in /tmp/tmpq3s0cxtn.php\
    \ on line 48\n\nWarning: Undefined variable $grade in /tmp/tmpq3s0cxtn.php on\
    \ line 51\n\nWarning: Undefined variable $grade in /tmp/tmpq3s0cxtn.php on line\
    \ 54\n\nWarning: Undefined variable $grade in /tmp/tmpq3s0cxtn.php on line 57\n\
    \nWarning: Undefined variable $grade in /tmp/tmpq3s0cxtn.php on line 60\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmpq3s0cxtn.php:74\nStack trace:\n\
    #0 /tmp/tmpq3s0cxtn.php(82): test()\n#1 {main}\n  thrown in /tmp/tmpq3s0cxtn.php\
    \ on line 74\n"
  timestamp: 1660005482
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = [];\n    for ($i = 0; $i < count($grades); $i++) {\n\
    \        $grade = $grades[$i];\n        if ($grade >= 4.0) {\n            $letter_grades[]\
    \ = \"A+\";\n        } else if ($grade >= 3.7) {\n            $letter_grades[]\
    \ = \"A\";\n        } else if ($grade >= 3.3) {\n            $letter_grades[]\
    \ = \"A-\";\n        } else if ($grade >= 3.0) {\n            $letter_grades[]\
    \ = \"B+\";\n        } else if ($grade >= 2.7) {\n            $letter_grades[]\
    \ = \"B\";\n        } else if ($grade >= 2.3) {\n            $letter_grades[]\
    \ = \"B-\";\n        } else if ($grade >= 2.0) {\n            $letter_grades[]\
    \ = \"C+\";\n        } else if ($grade >= 1.7) {\n            $letter_grades[]\
    \ = \"C\";\n        } else if ($grade >= 1.3) {\n            $letter_grades[]\
    \ = \"C-\";\n        } else if ($grade >= 1.0) {\n            $letter_grades[]\
    \ = \"D+\";\n        } else if ($grade >= 0.7) {\n            $letter_grades[]\
    \ = \"D\";\n        } else if ($grade >= 0.0) {\n            $letter_grades[]\
    \ = \"D-\";\n        } else {\n            $letter_grades[] = \"E\";\n       \
    \ }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args) {\n\
    \    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp08ld5teb.php:64\n\
    Stack trace:\n#0 /tmp/tmp08ld5teb.php(72): test()\n#1 {main}\n  thrown in /tmp/tmp08ld5teb.php\
    \ on line 64\n"
  timestamp: 1660005482
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n\t$letters = [];\n\tforeach ($grades as $grade) {\n\t\t$letter = '';\n\t\t\
    if ($grade >= 4.0) {\n\t\t\t$letter = 'A+';\n\t\t} elseif ($grade >= 3.7) {\n\t\
    \t\t$letter = 'A';\n\t\t} elseif ($grade >= 3.3) {\n\t\t\t$letter = 'A-';\n\t\t\
    } elseif ($grade >= 3.0) {\n\t\t\t$letter = 'B+';\n\t\t} elseif ($grade >= 2.7)\
    \ {\n\t\t\t$letter = 'B';\n\t\t} elseif ($grade >= 2.3) {\n\t\t\t$letter = 'B-';\n\
    \t\t} elseif ($grade >= 2.0) {\n\t\t\t$letter = 'C+';\n\t\t} elseif ($grade >=\
    \ 1.7) {\n\t\t\t$letter = 'C';\n\t\t} elseif ($grade >= 1.3) {\n\t\t\t$letter\
    \ = 'C-';\n\t\t} elseif ($grade >= 1.0) {\n\t\t\t$letter = 'D+';\n\t\t} elseif\
    \ ($grade >= 0.7) {\n\t\t\t$letter = 'D';\n\t\t} elseif ($grade >= 0.0) {\n\t\t\
    \t$letter = 'D-';\n\t\t} else {\n\t\t\t$letter = 'E';\n\t\t}\n\t\t$letters[] =\
    \ $letter;\n\t}\n\treturn $letters;\n}\n$grades = [4.0, 3, 1.7, 2, 3.5];\n$letters\
    \ = numerical_letter_grade($grades);\nprint_r($letters);\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoz5z78io.php:68\n\
    Stack trace:\n#0 /tmp/tmpoz5z78io.php(76): test()\n#1 {main}\n  thrown in /tmp/tmpoz5z78io.php\
    \ on line 68\n"
  timestamp: 1660005482
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array(4.0, 3, 1.7, 2, 3.5);\n    $gpa = array(4.0, \"A+\",\
    \ 3.7, \"A\", 3.3, \"A-\", 3.0, \"B+\", 2.7, \"B\", 2.3, \"B-\", 2.0, \"C+\",\
    \ 1.7, \"C\", 1.3, \"C-\", 1.0, \"D+\", 0.7, \"D\", 0.0, \"D-\", 0.0, \"E\");\n\
    \    for ($i = 0; $i < count($grades); $i++) {\n        for ($j = 0; $j < count($gpa);\
    \ $j++) {\n            if ($grades[$i] >= $gpa[$j]) {\n                echo $gpa[$j\
    \ + 1];\n                echo \",\";\n                break;\n            }\n\
    \        }\n    }\n}\nnumerical_letter_grade($grades);\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $grades in /tmp/tmp9cgr9i13.php on line 37\n\
    A+,B+,C,C+,A-,A+,B+,C,C+,A-,\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmp9cgr9i13.php:43\nStack trace:\n#0 /tmp/tmp9cgr9i13.php(51): test()\n\
    #1 {main}\n  thrown in /tmp/tmp9cgr9i13.php on line 43\n"
  timestamp: 1660005482
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n  // write your solution here\n  $map = array(\n    4.0 => 'A+',\n    3.7\
    \ => 'A',\n    3.3 => 'A-',\n    3.0 => 'B+',\n    2.7 => 'B',\n    2.3 => 'B-',\n\
    \    2.0 => 'C+',\n    1.7 => 'C',\n    1.3 => 'C-',\n    1.0 => 'D+',\n    0.7\
    \ => 'D',\n    0.0 => 'D-',\n    0   => 'E'\n  );\n  $result = array();\n  foreach\
    \ ($grades as $grade) {\n    $max_gpa = -1;\n    $max_letter = '';\n    foreach\
    \ ($map as $gpa => $letter) {\n      if ($grade >= $gpa && $gpa > $max_gpa) {\n\
    \        $max_gpa = $gpa;\n        $max_letter = $letter;\n      }\n    }\n  \
    \  $result[] = $max_letter;\n  }\n  return $result;\n}\n\n$grades = array(4.0,\
    \ 3, 1.7, 2, 3.5);\necho implode(', ', numerical_letter_grade($grades)) . \"\\\
    n\";\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nDeprecated: Implicit conversion from float 3.7 to int loses precision\
    \ in /tmp/tmplse9uj7t.php on line 28\n\nDeprecated: Implicit conversion from float\
    \ 3.3 to int loses precision in /tmp/tmplse9uj7t.php on line 29\n\nDeprecated:\
    \ Implicit conversion from float 2.7 to int loses precision in /tmp/tmplse9uj7t.php\
    \ on line 31\n\nDeprecated: Implicit conversion from float 2.3 to int loses precision\
    \ in /tmp/tmplse9uj7t.php on line 32\n\nDeprecated: Implicit conversion from float\
    \ 1.7 to int loses precision in /tmp/tmplse9uj7t.php on line 34\n\nDeprecated:\
    \ Implicit conversion from float 1.3 to int loses precision in /tmp/tmplse9uj7t.php\
    \ on line 35\n\nDeprecated: Implicit conversion from float 0.7 to int loses precision\
    \ in /tmp/tmplse9uj7t.php on line 37\nA+, B+, D+, C+, B+\n\nDeprecated: Implicit\
    \ conversion from float 3.7 to int loses precision in /tmp/tmplse9uj7t.php on\
    \ line 28\n\nDeprecated: Implicit conversion from float 3.3 to int loses precision\
    \ in /tmp/tmplse9uj7t.php on line 29\n\nDeprecated: Implicit conversion from float\
    \ 2.7 to int loses precision in /tmp/tmplse9uj7t.php on line 31\n\nDeprecated:\
    \ Implicit conversion from float 2.3 to int loses precision in /tmp/tmplse9uj7t.php\
    \ on line 32\n\nDeprecated: Implicit conversion from float 1.7 to int loses precision\
    \ in /tmp/tmplse9uj7t.php on line 34\n\nDeprecated: Implicit conversion from float\
    \ 1.3 to int loses precision in /tmp/tmplse9uj7t.php on line 35\n\nDeprecated:\
    \ Implicit conversion from float 0.7 to int loses precision in /tmp/tmplse9uj7t.php\
    \ on line 37\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplse9uj7t.php:63\n\
    Stack trace:\n#0 /tmp/tmplse9uj7t.php(71): test()\n#1 {main}\n  thrown in /tmp/tmplse9uj7t.php\
    \ on line 63\n"
  timestamp: 1660005482
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n\tfor ($i = 0; $i < count($grades); $i++) {\n\t\tif ($grades[$i] == 4.0)\
    \ {\n\t\t\t$grades[$i] = \"A+\";\n\t\t} elseif ($grades[$i] >= 3.7) {\n\t\t\t\
    $grades[$i] = \"A\";\n\t\t} elseif ($grades[$i] >= 3.3) {\n\t\t\t$grades[$i] =\
    \ \"A-\";\n\t\t} elseif ($grades[$i] >= 3.0) {\n\t\t\t$grades[$i] = \"B+\";\n\t\
    \t} elseif ($grades[$i] >= 2.7) {\n\t\t\t$grades[$i] = \"B\";\n\t\t} elseif ($grades[$i]\
    \ >= 2.3) {\n\t\t\t$grades[$i] = \"B-\";\n\t\t} elseif ($grades[$i] >= 2.0) {\n\
    \t\t\t$grades[$i] = \"C+\";\n\t\t} elseif ($grades[$i] >= 1.7) {\n\t\t\t$grades[$i]\
    \ = \"C\";\n\t\t} elseif ($grades[$i] >= 1.3) {\n\t\t\t$grades[$i] = \"C-\";\n\
    \t\t} elseif ($grades[$i] >= 1.0) {\n\t\t\t$grades[$i] = \"D+\";\n\t\t} elseif\
    \ ($grades[$i] >= 0.7) {\n\t\t\t$grades[$i] = \"D\";\n\t\t} elseif ($grades[$i]\
    \ >= 0.0) {\n\t\t\t$grades[$i] = \"D-\";\n\t\t} else {\n\t\t\t$grades[$i] = \"\
    E\";\n\t\t}\n\t}\n\treturn $grades;\n}\n$grades = array(4.0, 3, 1.7, 2, 3.5);\n\
    print_r(numerical_letter_grade($grades));\nfunction candidate(...$args) {\n  \
    \  return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\",\
    \ \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi9ify31t.php:63\n\
    Stack trace:\n#0 /tmp/tmpi9ify31t.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpi9ify31t.php\
    \ on line 63\n"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n  $letter_grades = array();\n  foreach ($grades as $grade) {\n    switch($grade)\
    \ {\n      case $grade < 1.7:\n        array_push($letter_grades, \"D-\");\n \
    \       break;\n      case $grade < 2.0:\n        array_push($letter_grades, \"\
    D\");\n        break;\n      case $grade < 2.3:\n        array_push($letter_grades,\
    \ \"D+\");\n        break;\n      case $grade < 2.7:\n        array_push($letter_grades,\
    \ \"C-\");\n        break;\n      case $grade < 3.0:\n        array_push($letter_grades,\
    \ \"C\");\n        break;\n      case $grade < 3.3:\n        array_push($letter_grades,\
    \ \"C+\");\n        break;\n      case $grade < 3.7:\n        array_push($letter_grades,\
    \ \"B-\");\n        break;\n      case $grade < 4.0:\n        array_push($letter_grades,\
    \ \"B\");\n        break;\n      case $grade < 4.1:\n        array_push($letter_grades,\
    \ \"B+\");\n        break;\n      case $grade < 4.1:\n        array_push($letter_grades,\
    \ \"A-\");\n        break;\n      case $grade < 4.1:\n        array_push($letter_grades,\
    \ \"A\");\n        break;\n      case $grade < 4.1:\n        array_push($letter_grades,\
    \ \"A+\");\n        break;\n      default:\n        array_push($letter_grades,\
    \ \"N/A\");\n        break;\n    }\n  }\n  return $letter_grades;\n}\n$grades\
    \ = array(3.9, 2.7, 2.3, 2.7, 2.3, 1.7, 4.0, 2.7, 2.3, 2.7, 2.3, 3.7, 3.3, 3.0,\
    \ 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0);\n$letter_grades = numerical_letter_grade($grades);\n\
    fore\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmp6r1u3ux6.php
    on line 74

    '
  timestamp: 1660005482
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $gpa_letter_grades = array(0.0 => \"E\", 0.7 => \"D-\", 1.0 => \"D\"\
    , 1.3 => \"D+\", 1.7 => \"C-\", 2.0 => \"C\", 2.3 => \"C+\", 2.7 => \"B-\", 3.0\
    \ => \"B\", 3.3 => \"B+\", 3.7 => \"A-\", 4.0 => \"A\");\n    foreach ($grades\
    \ as $gpa) {\n        $grade_letter = array_filter($gpa_letter_grades, function($key)\
    \ use ($gpa) {\n            return $gpa >= $key;\n        }, ARRAY_FILTER_USE_KEY);\n\
    \        $letter_grade[] = end($grade_letter);\n    }\n    return $letter_grade;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nDeprecated: Implicit conversion from float 0.7 to int loses precision\
    \ in /tmp/tmptklhutpw.php on line 25\n\nDeprecated: Implicit conversion from float\
    \ 1.3 to int loses precision in /tmp/tmptklhutpw.php on line 25\n\nDeprecated:\
    \ Implicit conversion from float 1.7 to int loses precision in /tmp/tmptklhutpw.php\
    \ on line 25\n\nDeprecated: Implicit conversion from float 2.3 to int loses precision\
    \ in /tmp/tmptklhutpw.php on line 25\n\nDeprecated: Implicit conversion from float\
    \ 2.7 to int loses precision in /tmp/tmptklhutpw.php on line 25\n\nDeprecated:\
    \ Implicit conversion from float 3.3 to int loses precision in /tmp/tmptklhutpw.php\
    \ on line 25\n\nDeprecated: Implicit conversion from float 3.7 to int loses precision\
    \ in /tmp/tmptklhutpw.php on line 25\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmptklhutpw.php:40\nStack trace:\n#0 /tmp/tmptklhutpw.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmptklhutpw.php on line 40\n"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n  $equations = array(\n    array('A+', 4.0),\n    array('A', 3.7),\n    array('A-',\
    \ 3.3),\n    array('B+', 3.0),\n    array('B', 2.7),\n    array('B-', 2.3),\n\
    \    array('C+', 2.0),\n    array('C', 1.7),\n    array('C-', 1.3),\n    array('D+',\
    \ 1.0),\n    array('D', 0.7),\n    array('D-', 0.0),\n    array('E', 0.0)\n  );\n\
    \  $letter_grades = array();\n  foreach ($grades as $grade) {\n    foreach ($equations\
    \ as $equation) {\n      if ($grade >= $equation[1]) {\n        $letter_grades[]\
    \ = $equation[0];\n        break;\n      }\n    }\n  }\n  return $letter_grades;\n\
    }\n\n$grades = array(4.0, 3, 1.7, 2, 3.5);\necho \"the following equation returns:\
    \ \";\necho \"<pre>\";\nprint_r(numerical_letter_grade($grades));\necho \"</pre>\"\
    ;\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "the following equation returns: <pre>Array\n(\n    [0] => A+\n    [1] =>\
    \ B+\n    [2] => C\n    [3] => C+\n    [4] => A-\n)\n</pre>\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpdky55zur.php:63\nStack trace:\n#0 /tmp/tmpdky55zur.php(71):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpdky55zur.php on line 63\n"
  timestamp: 1660005483
- exit_code: 0
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $res = [];\n    for ($i = 0; $i < count($grades); $i++) {\n        $gpa\
    \ = $grades[$i];\n        if ($gpa == 4.0) {\n            $res[] = \"A+\";\n \
    \       } else if ($gpa > 3.7) {\n            $res[] = \"A\";\n        } else\
    \ if ($gpa > 3.3) {\n            $res[] = \"A-\";\n        } else if ($gpa > 3.0)\
    \ {\n            $res[] = \"B+\";\n        } else if ($gpa > 2.7) {\n        \
    \    $res[] = \"B\";\n        } else if ($gpa > 2.3) {\n            $res[] = \"\
    B-\";\n        } else if ($gpa > 2.0) {\n            $res[] = \"C+\";\n      \
    \  } else if ($gpa > 1.7) {\n            $res[] = \"C\";\n        } else if ($gpa\
    \ > 1.3) {\n            $res[] = \"C-\";\n        } else if ($gpa > 1.0) {\n \
    \           $res[] = \"D+\";\n        } else if ($gpa > 0.7) {\n            $res[]\
    \ = \"D\";\n        } else if ($gpa > 0.0) {\n            $res[] = \"D-\";\n \
    \       } else {\n            $res[] = \"E\";\n        }\n    }\n    return $res;\n\
    }\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660005482
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $numerical_letter_grades = array();\n    foreach ($grades as $grade)\
    \ {\n        if ($grade >= 4.0) {\n            $numerical_letter_grades[] = \"\
    A+\";\n        } elseif ($grade >= 3.7) {\n            $numerical_letter_grades[]\
    \ = \"A\";\n        } elseif ($grade >= 3.3) {\n            $numerical_letter_grades[]\
    \ = \"A-\";\n        } elseif ($grade >= 3.0) {\n            $numerical_letter_grades[]\
    \ = \"B+\";\n        } elseif ($grade >= 2.7) {\n            $numerical_letter_grades[]\
    \ = \"B\";\n        } elseif ($grade >= 2.3) {\n            $numerical_letter_grades[]\
    \ = \"B-\";\n        } elseif ($grade >= 2.0) {\n            $numerical_letter_grades[]\
    \ = \"C+\";\n        } elseif ($grade >= 1.7) {\n            $numerical_letter_grades[]\
    \ = \"C\";\n        } elseif ($grade >= 1.3) {\n            $numerical_letter_grades[]\
    \ = \"C-\";\n        } elseif ($grade >= 1.0) {\n            $numerical_letter_grades[]\
    \ = \"D+\";\n        } elseif ($grade >= 0.7) {\n            $numerical_letter_grades[]\
    \ = \"D\";\n        } elseif ($grade >= 0.0) {\n            $numerical_letter_grades[]\
    \ = \"D-\";\n        } else {\n            $numerical_letter_grades[] = \"E\"\
    ;\n        }\n    }\n    return $numerical_letter_grades;\n}\n\n$test_cases =\
    \ array(\n    array(\n        \"input\" => array(4.0, 3, 1.7, 2, 3.5),\n     \
    \   \"expected\" => array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\n    ),\n    array(\n\
    \        \"input\" => array(3.5, 3.5, 3.5, 3.5, 3.5),\n        \"expected\" =>\
    \ array(\"A\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "A", expecting ")" in /tmp/tmpkxneoh3a.php
    on line 71

    '
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n  $grade_numbers = array(\n    array(4.0, 'A+'),\n    array(3.7, 'A'),\n\
    \    array(3.3, 'A-'),\n    array(3.0, 'B+'),\n    array(2.7, 'B'),\n    array(2.3,\
    \ 'B-'),\n    array(2.0, 'C+'),\n    array(1.7, 'C'),\n    array(1.3, 'C-'),\n\
    \    array(1.0, 'D+'),\n    array(0.7, 'D'),\n    array(0.0, 'D-'),\n    array(0.0,\
    \ 'E')\n  );\n  $result = array();\n  foreach ($grades as $value) {\n    foreach\
    \ ($grade_numbers as $grade_number) {\n      if ($value >= $grade_number[0]) {\n\
    \        $result[] = $grade_number[1];\n        break;\n      }\n    }\n  }\n\
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkz_4x9kq.php:57\n\
    Stack trace:\n#0 /tmp/tmpkz_4x9kq.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpkz_4x9kq.php\
    \ on line 57\n"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n  $letters = array(\n    \"A+\" => 4.0,\n    \"A\" => 3.7,\n    \"A-\" =>\
    \ 3.3,\n    \"B+\" => 3.0,\n    \"B\" => 2.7,\n    \"B-\" => 2.3,\n    \"C+\"\
    \ => 2.0,\n    \"C\" => 1.7,\n    \"C-\" => 1.3,\n    \"D+\" => 1.0,\n    \"D\"\
    \ => 0.7,\n    \"D-\" => 0.0,\n    \"E\" => 0.0,\n  );\n  $return = array();\n\
    \  foreach ($grades as $grade) {\n    $letter = \"E\";\n    foreach ($letters\
    \ as $key => $value) {\n      if ($grade >= $value) {\n        $letter = $key;\n\
    \        break;\n      }\n    }\n    $return[] = $letter;\n  }\n  return $return;\n\
    }\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdgh6mo7g.php:58\n\
    Stack trace:\n#0 /tmp/tmpdgh6mo7g.php(66): test()\n#1 {main}\n  thrown in /tmp/tmpdgh6mo7g.php\
    \ on line 58\n"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array(\n        \"A+\" => 4.0,\n        \"A\" => 3.7,\n   \
    \     \"A-\" => 3.3,\n        \"B+\" => 3.0,\n        \"B\" => 2.7,\n        \"\
    B-\" => 2.3,\n        \"C+\" => 2.0,\n        \"C\" => 1.7,\n        \"C-\" =>\
    \ 1.3,\n        \"D+\" => 1.0,\n        \"D\" => 0.7,\n        \"D-\" => 0.0,\n\
    \        \"E\" => 0.0,\n    );\n    foreach ($grades as $grade) {\n        if\
    \ ($grade >= 4.0) {\n            echo \"A+\";\n        } elseif ($grade >= 3.7)\
    \ {\n            echo \"A\";\n        } elseif ($grade >= 3.3) {\n           \
    \ echo \"A-\";\n        } elseif ($grade >= 3.0) {\n            echo \"B+\";\n\
    \        } elseif ($grade >= 2.7) {\n            echo \"B\";\n        } elseif\
    \ ($grade >= 2.3) {\n            echo \"B-\";\n        } elseif ($grade >= 2.0)\
    \ {\n            echo \"C+\";\n        } elseif ($grade >= 1.7) {\n          \
    \  echo \"C\";\n        } elseif ($grade >= 1.3) {\n            echo \"C-\";\n\
    \        } elseif ($grade >= 1.0) {\n            echo \"D+\";\n        } elseif\
    \ ($grade >= 0.7) {\n            echo \"D\";\n        } elseif ($grade >= 0.0)\
    \ {\n            echo \"D-\";\n        } elseif ($grade <= 0.0) {\n          \
    \  echo \"E\";\n        }\n    }\n}\nnumerical_letter_grade(array(4.0, 3, 1.7,\
    \ 2, 3.5));\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "A+AA-B+BB-C+CC-D+DD-D-A+AA-B+BB-C+CC-D+DD-D-\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmplci63h8y.php:77\nStack trace:\n#0 /tmp/tmplci63h8y.php(85):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmplci63h8y.php on line 77\n"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades_mapping = [\n        4.0 => 'A+',\n        3.7 => 'A',\n    \
    \    3.3 => 'A-',\n        3.0 => 'B+',\n        2.7 => 'B',\n        2.3 => 'B-',\n\
    \        2.0 => 'C+',\n        1.7 => 'C',\n        1.3 => 'C-',\n        1.0\
    \ => 'D+',\n        0.7 => 'D',\n        0.0 => 'D-',\n        -1 => 'E'\n   \
    \ ];\n    $letter_grades = [];\n    foreach ($grades as $grade) {\n        $letter_grade\
    \ = '';\n        foreach ($grades_mapping as $threshold => $value) {\n       \
    \     if ($grade >= $threshold) {\n                $letter_grade = $value;\n \
    \               break;\n            }\n        }\n        $letter_grades[] = $letter_grade;\n\
    \    }\n    return $letter_grades;\n}\nprint_r(numerical_letter_grade([4.0, 3,\
    \ 1.7, 2, 3.5]));\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nDeprecated: Implicit conversion from float 3.7 to int loses precision\
    \ in /tmp/tmp8p5t2ghs.php on line 27\n\nDeprecated: Implicit conversion from float\
    \ 3.3 to int loses precision in /tmp/tmp8p5t2ghs.php on line 28\n\nDeprecated:\
    \ Implicit conversion from float 2.7 to int loses precision in /tmp/tmp8p5t2ghs.php\
    \ on line 30\n\nDeprecated: Implicit conversion from float 2.3 to int loses precision\
    \ in /tmp/tmp8p5t2ghs.php on line 31\n\nDeprecated: Implicit conversion from float\
    \ 1.7 to int loses precision in /tmp/tmp8p5t2ghs.php on line 33\n\nDeprecated:\
    \ Implicit conversion from float 1.3 to int loses precision in /tmp/tmp8p5t2ghs.php\
    \ on line 34\n\nDeprecated: Implicit conversion from float 0.7 to int loses precision\
    \ in /tmp/tmp8p5t2ghs.php on line 36\nArray\n(\n    [0] => A+\n    [1] => B+\n\
    \    [2] => D+\n    [3] => C+\n    [4] => B+\n)\n\nDeprecated: Implicit conversion\
    \ from float 3.7 to int loses precision in /tmp/tmp8p5t2ghs.php on line 27\n\n\
    Deprecated: Implicit conversion from float 3.3 to int loses precision in /tmp/tmp8p5t2ghs.php\
    \ on line 28\n\nDeprecated: Implicit conversion from float 2.7 to int loses precision\
    \ in /tmp/tmp8p5t2ghs.php on line 30\n\nDeprecated: Implicit conversion from float\
    \ 2.3 to int loses precision in /tmp/tmp8p5t2ghs.php on line 31\n\nDeprecated:\
    \ Implicit conversion from float 1.7 to int loses precision in /tmp/tmp8p5t2ghs.php\
    \ on line 33\n\nDeprecated: Implicit conversion from float 1.3 to int loses precision\
    \ in /tmp/tmp8p5t2ghs.php on line 34\n\nDeprecated: Implicit conversion from float\
    \ 0.7 to int loses precision in /tmp/tmp8p5t2ghs.php on line 36\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp8p5t2ghs.php:59\nStack trace:\n\
    #0 /tmp/tmp8p5t2ghs.php(67): test()\n#1 {main}\n  thrown in /tmp/tmp8p5t2ghs.php\
    \ on line 59\n"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n\t$gpa = 0;\n\t$size = sizeof($grades);\n\tfor ($i = 0; $i < $size; $i++)\
    \ {\n\t\t$gpa += $grades[$i];\n\t}\n\t$gpa = $gpa / $size;\n\treturn $gpa;\n}\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvmy12k5q.php:38\n\
    Stack trace:\n#0 /tmp/tmpvmy12k5q.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpvmy12k5q.php\
    \ on line 38\n"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = [];\n    foreach ($grades as $grade) {\n        switch\
    \ (true) {\n            case $grade > 3.7:\n                $letter_grades[] =\
    \ \"A+\";\n                break;\n            case $grade > 3.3:\n          \
    \      $letter_grades[] = \"A\";\n                break;\n            case $grade\
    \ > 3.0:\n                $letter_grades[] = \"A-\";\n                break;\n\
    \            case $grade > 2.7:\n                $letter_grades[] = \"B+\";\n\
    \                break;\n            case $grade > 2.3:\n                $letter_grades[]\
    \ = \"B\";\n                break;\n            case $grade > 2.0:\n         \
    \       $letter_grades[] = \"B-\";\n                break;\n            case $grade\
    \ > 1.7:\n                $letter_grades[] = \"C+\";\n                break;\n\
    \            case $grade > 1.3:\n                $letter_grades[] = \"C\";\n \
    \               break;\n            case $grade > 1.0:\n                $letter_grades[]\
    \ = \"C-\";\n                break;\n            case $grade > 0.7:\n        \
    \        $letter_grades[] = \"D+\";\n                break;\n            case\
    \ $grade > 0.0:\n                $letter_grades[] = \"D\";\n                break;\n\
    \            case $grade > 0.0:\n                $letter_grades[] = \"D-\";\n\
    \                break;\n            default:\n                $letter_grades[]\
    \ = \"E\";\n                break;\n        }\n    }\n    return $letter_grades;\n\
    }\n\n$grades = [\n    4.0,\n    3,\n    1.7,\n    2,\n    3.5\n];\n\n$letter_grades\
    \ = numerical_letter_grade($grades);\nprint_r($letter_grades);\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppk6p9n09.php:87\n\
    Stack trace:\n#0 /tmp/tmppk6p9n09.php(95): test()\n#1 {main}\n  thrown in /tmp/tmppk6p9n09.php\
    \ on line 87\n"
  timestamp: 1660005482
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n  $scores = array();\n  foreach ($grades as $grade) {\n    if ($grade >=\
    \ 4.0) {\n      $scores[] = \"A+\";\n    } elseif ($grade >= 3.7) {\n      $scores[]\
    \ = \"A\";\n    } elseif ($grade >= 3.3) {\n      $scores[] = \"A-\";\n    } elseif\
    \ ($grade >= 3.0) {\n      $scores[] = \"B+\";\n    } elseif ($grade >= 2.7) {\n\
    \      $scores[] = \"B\";\n    } elseif ($grade >= 2.3) {\n      $scores[] = \"\
    B-\";\n    } elseif ($grade >= 2.0) {\n      $scores[] = \"C+\";\n    } elseif\
    \ ($grade >= 1.7) {\n      $scores[] = \"C\";\n    } elseif ($grade >= 1.3) {\n\
    \      $scores[] = \"C-\";\n    } elseif ($grade >= 1.0) {\n      $scores[] =\
    \ \"D+\";\n    } elseif ($grade >= 0.7) {\n      $scores[] = \"D\";\n    } elseif\
    \ ($grade >= 0.0) {\n      $scores[] = \"D-\";\n    } else {\n      $scores[]\
    \ = \"E\";\n    }\n  }\n  return $scores;\n}\nprint_r(numerical_letter_grade(array(4.0,\
    \ 3, 1.7, 2, 3.5)));\necho \"<br>\";\nprint_r(numerical_letter_grade(array(4.0,\
    \ 2.9, 2.9, 2.9, 2.9)));\necho \"<br>\";\nprint_r(numerical_letter_grade(array(4.0,\
    \ 3.8, 3.7, 3.6, 3.5)));\necho \"<br>\";\nprint_r(numerical_letter_grade(array(3.3,\
    \ 2.9, 2.9, 2.9, 2.9)));\necho \"<br>\";\nprint_r(numerical_letter_grade(array(3.\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmpyigtvoy_.php
    on line 66

    '
  timestamp: 1660005483
- exit_code: 0
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n\t$alpha = [];\n\tforeach ($grades as $grade) {\n\t\tif ($grade == 4.0) {\n\
    \t\t\t$alpha[] = \"A+\";\n\t\t} elseif ($grade > 3.7) {\n\t\t\t$alpha[] = \"A\"\
    ;\n\t\t} elseif ($grade > 3.3) {\n\t\t\t$alpha[] = \"A-\";\n\t\t} elseif ($grade\
    \ > 3.0) {\n\t\t\t$alpha[] = \"B+\";\n\t\t} elseif ($grade > 2.7) {\n\t\t\t$alpha[]\
    \ = \"B\";\n\t\t} elseif ($grade > 2.3) {\n\t\t\t$alpha[] = \"B-\";\n\t\t} elseif\
    \ ($grade > 2.0) {\n\t\t\t$alpha[] = \"C+\";\n\t\t} elseif ($grade > 1.7) {\n\t\
    \t\t$alpha[] = \"C\";\n\t\t} elseif ($grade > 1.3) {\n\t\t\t$alpha[] = \"C-\"\
    ;\n\t\t} elseif ($grade > 1.0) {\n\t\t\t$alpha[] = \"D+\";\n\t\t} elseif ($grade\
    \ > 0.7) {\n\t\t\t$alpha[] = \"D\";\n\t\t} elseif ($grade > 0.0) {\n\t\t\t$alpha[]\
    \ = \"D-\";\n\t\t} else {\n\t\t\t$alpha[] = \"E\";\n\t\t}\n\t}\n\treturn $alpha;\n\
    }\nprint_r(numerical_letter_grade(array(4.0, 3, 1.7, 2, 3.5)));\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => A+\n    [1] => B\n    [2] => C-\n    [3] => C\n  \
    \  [4] => A-\n)\n"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n\t$gpa_table = [\n\t\t4.0 => \"A+\",\n\t\t3.7 => \"A\",\n\t\t3.3 => \"A-\"\
    ,\n\t\t3.0 => \"B+\",\n\t\t2.7 => \"B\",\n\t\t2.3 => \"B-\",\n\t\t2.0 => \"C+\"\
    ,\n\t\t1.7 => \"C\",\n\t\t1.3 => \"C-\",\n\t\t1.0 => \"D+\",\n\t\t0.7 => \"D\"\
    ,\n\t\t0.0 => \"D-\",\n\t\t0.0 => \"E\"\n\t];\n\t$new_grades = [];\n\tforeach\
    \ ($grades as $grade) {\n\t\tforeach ($gpa_table as $gpa => $gpa_value) {\n\t\t\
    \tif ($grade >= $gpa) {\n\t\t\t\t$new_grades[] = $gpa_value;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn $new_grades;\n}\necho '<pre>';\nprint_r(numerical_letter_grade([4.0,\
    \ 3, 1.7, 2, 3.5]));\nprint_r(numerical_letter_grade([4.0, 2.7, 1.7, 2, 3.5]));\n\
    echo '</pre>';\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>\nDeprecated: Implicit conversion from float 3.7 to int loses precision\
    \ in /tmp/tmpmaf5ndbc.php on line 27\n\nDeprecated: Implicit conversion from float\
    \ 3.3 to int loses precision in /tmp/tmpmaf5ndbc.php on line 28\n\nDeprecated:\
    \ Implicit conversion from float 2.7 to int loses precision in /tmp/tmpmaf5ndbc.php\
    \ on line 30\n\nDeprecated: Implicit conversion from float 2.3 to int loses precision\
    \ in /tmp/tmpmaf5ndbc.php on line 31\n\nDeprecated: Implicit conversion from float\
    \ 1.7 to int loses precision in /tmp/tmpmaf5ndbc.php on line 33\n\nDeprecated:\
    \ Implicit conversion from float 1.3 to int loses precision in /tmp/tmpmaf5ndbc.php\
    \ on line 34\n\nDeprecated: Implicit conversion from float 0.7 to int loses precision\
    \ in /tmp/tmpmaf5ndbc.php on line 36\nArray\n(\n    [0] => A+\n    [1] => B+\n\
    \    [2] => D+\n    [3] => C+\n    [4] => B+\n)\n\nDeprecated: Implicit conversion\
    \ from float 3.7 to int loses precision in /tmp/tmpmaf5ndbc.php on line 27\n\n\
    Deprecated: Implicit conversion from float 3.3 to int loses precision in /tmp/tmpmaf5ndbc.php\
    \ on line 28\n\nDeprecated: Implicit conversion from float 2.7 to int loses precision\
    \ in /tmp/tmpmaf5ndbc.php on line 30\n\nDeprecated: Implicit conversion from float\
    \ 2.3 to int loses precision in /tmp/tmpmaf5ndbc.php on line 31\n\nDeprecated:\
    \ Implicit conversion from float 1.7 to int loses precision in /tmp/tmpmaf5ndbc.php\
    \ on line 33\n\nDeprecated: Implicit conversion from float 1.3 to int loses precision\
    \ in /tmp/tmpmaf5ndbc.php on line 34\n\nDeprecated: Implicit conversion from float\
    \ 0.7 to int loses precision in /tmp/tmpmaf5ndbc.php on line 36\nArray\n(\n  \
    \  [0] => A+\n    [1] => C+\n    [2] => D+\n    [3] => C+\n    [4] => B+\n)\n\
    </pre>\nDeprecated: Implicit conversion from float 3.7 to int loses precision\
    \ in /tmp/tmpmaf5ndbc.php on line 27\n\nDeprecated: Implicit conversion from float\
    \ 3.3 to int loses precision in /tmp/tmpmaf5ndbc.php on line 28\n\nDeprecated:\
    \ Implicit conversion from float 2.7 to int loses precision in /tmp/tmpmaf5ndbc.php\
    \ on line 30\n\nDeprecated: Implicit conversion from float 2.3 to int loses precision\
    \ in /"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif ($grade\
    \ >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade >=\
    \ 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade >=\
    \ 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade >=\
    \ 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >= 2.3)\
    \ {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >= 2.0)\
    \ {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >= 1.7)\
    \ {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3) {\n\
    \            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0) {\n\
    \            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7) {\n\
    \            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n \
    \           $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw7033o8j.php:63\n\
    Stack trace:\n#0 /tmp/tmpw7033o8j.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpw7033o8j.php\
    \ on line 63\n"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $return_grades = array();\n    for ($i = 0; $i < count($grades); $i++)\
    \ {\n        if ($grades[$i] >= 4.0) {\n            $return_grades[$i] = \"A+\"\
    ;\n        } elseif ($grades[$i] >= 3.7) {\n            $return_grades[$i] = \"\
    A\";\n        } elseif ($grades[$i] >= 3.3) {\n            $return_grades[$i]\
    \ = \"A-\";\n        } elseif ($grades[$i] >= 3.0) {\n            $return_grades[$i]\
    \ = \"B+\";\n        } elseif ($grades[$i] >= 2.7) {\n            $return_grades[$i]\
    \ = \"B\";\n        } elseif ($grades[$i] >= 2.3) {\n            $return_grades[$i]\
    \ = \"B-\";\n        } elseif ($grades[$i] >= 2.0) {\n            $return_grades[$i]\
    \ = \"C+\";\n        } elseif ($grades[$i] >= 1.7) {\n            $return_grades[$i]\
    \ = \"C\";\n        } elseif ($grades[$i] >= 1.3) {\n            $return_grades[$i]\
    \ = \"C-\";\n        } elseif ($grades[$i] >= 1.0) {\n            $return_grades[$i]\
    \ = \"D+\";\n        } elseif ($grades[$i] >= 0.7) {\n            $return_grades[$i]\
    \ = \"D\";\n        } elseif ($grades[$i] >= 0.0) {\n            $return_grades[$i]\
    \ = \"D-\";\n        } else {\n            $return_grades[$i] = \"E\";\n     \
    \   }\n    }\n    return $return_grades;\n}\nfunction candidate(...$args) {\n\
    \    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppix3pe6v.php:62\n\
    Stack trace:\n#0 /tmp/tmppix3pe6v.php(70): test()\n#1 {main}\n  thrown in /tmp/tmppix3pe6v.php\
    \ on line 62\n"
  timestamp: 1660005482
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $gpa) {\n        switch\
    \ (true) {\n            case $gpa >= 4.0:\n                $letter_grades[] =\
    \ \"A+\";\n                break;\n            case $gpa >= 3.7:\n           \
    \     $letter_grades[] = \"A\";\n                break;\n            case $gpa\
    \ >= 3.3:\n                $letter_grades[] = \"A-\";\n                break;\n\
    \            case $gpa >= 3.0:\n                $letter_grades[] = \"B+\";\n \
    \               break;\n            case $gpa >= 2.7:\n                $letter_grades[]\
    \ = \"B\";\n                break;\n            case $gpa >= 2.3:\n          \
    \      $letter_grades[] = \"B-\";\n                break;\n            case $gpa\
    \ >= 2.0:\n                $letter_grades[] = \"C+\";\n                break;\n\
    \            case $gpa >= 1.7:\n                $letter_grades[] = \"C\";\n  \
    \              break;\n            case $gpa >= 1.3:\n                $letter_grades[]\
    \ = \"C-\";\n                break;\n            case $gpa >= 1.0:\n         \
    \       $letter_grades[] = \"D+\";\n                break;\n            case $gpa\
    \ >= 0.7:\n                $letter_grades[] = \"D\";\n                break;\n\
    \            case $gpa >= 0.0:\n                $letter_grades[] = \"D-\";\n \
    \               break;\n            default:\n                $letter_grades[]\
    \ = \"E\";\n                break;\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf8brwhta.php:77\n\
    Stack trace:\n#0 /tmp/tmpf8brwhta.php(85): test()\n#1 {main}\n  thrown in /tmp/tmpf8brwhta.php\
    \ on line 77\n"
  timestamp: 1660005482
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    // fill out this function\n    return $grades;\n}\necho \"<pre>\";\n\
    print_r(numerical_letter_grade(array(4.0, 3, 1.7, 2, 3.5)));\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => 4\n    [1] => 3\n    [2] => 1.7\n    [3] => 2\n\
    \    [4] => 3.5\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdn4bvzv6.php:35\n\
    Stack trace:\n#0 /tmp/tmpdn4bvzv6.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpdn4bvzv6.php\
    \ on line 35\n"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n\t$letters = array();\n\tfor ($i = 0; $i < count($grades); $i++) {\n\t\t\
    $grade = $grades[$i];\n\t\tif ($grade >= 4.0) {\n\t\t\t$letters[] = \"A+\";\n\t\
    \t} else if ($grade >= 3.7) {\n\t\t\t$letters[] = \"A\";\n\t\t} else if ($grade\
    \ >= 3.3) {\n\t\t\t$letters[] = \"A-\";\n\t\t} else if ($grade >= 3.0) {\n\t\t\
    \t$letters[] = \"B+\";\n\t\t} else if ($grade >= 2.7) {\n\t\t\t$letters[] = \"\
    B\";\n\t\t} else if ($grade >= 2.3) {\n\t\t\t$letters[] = \"B-\";\n\t\t} else\
    \ if ($grade >= 2.0) {\n\t\t\t$letters[] = \"C+\";\n\t\t} else if ($grade >= 1.7)\
    \ {\n\t\t\t$letters[] = \"C\";\n\t\t} else if ($grade >= 1.3) {\n\t\t\t$letters[]\
    \ = \"C-\";\n\t\t} else if ($grade >= 1.0) {\n\t\t\t$letters[] = \"D+\";\n\t\t\
    } else if ($grade >= 0.7) {\n\t\t\t$letters[] = \"D\";\n\t\t} else if ($grade\
    \ >= 0.0) {\n\t\t\t$letters[] = \"D-\";\n\t\t} else {\n\t\t\t$letters[] = \"E\"\
    ;\n\t\t}\n\t}\n\treturn $letters;\n}\nfunction candidate(...$args) {\n    return\
    \ numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4.0,\
    \ 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.2)) !== array(\"D+\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5)) !==\
    \ array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpstrlpq3e.php:63\n\
    Stack trace:\n#0 /tmp/tmpstrlpq3e.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpstrlpq3e.php\
    \ on line 63\n"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $gradings = [];\n    foreach ($grades as $grade) {\n        switch ($grade)\
    \ {\n            case 4.0:\n                $gradings[] = \"A+\";\n          \
    \      break;\n            case $grade > 3.7:\n                $gradings[] = \"\
    A\";\n                break;\n            case $grade > 3.3:\n               \
    \ $gradings[] = \"A-\";\n                break;\n            case $grade > 3.0:\n\
    \                $gradings[] = \"B+\";\n                break;\n            case\
    \ $grade > 2.7:\n                $gradings[] = \"B\";\n                break;\n\
    \            case $grade > 2.3:\n                $gradings[] = \"B-\";\n     \
    \           break;\n            case $grade > 2.0:\n                $gradings[]\
    \ = \"C+\";\n                break;\n            case $grade > 1.7:\n        \
    \        $gradings[] = \"C\";\n                break;\n            case $grade\
    \ > 1.3:\n                $gradings[] = \"C-\";\n                break;\n    \
    \        case $grade > 1.0:\n                $gradings[] = \"D+\";\n         \
    \       break;\n            case $grade > 0.7:\n                $gradings[] =\
    \ \"D\";\n                break;\n            case $grade > 0.0:\n           \
    \     $gradings[] = \"D-\";\n                break;\n            case $grade ==\
    \ 0.0:\n                $gradings[] = \"E\";\n                break;\n       \
    \ }\n    }\n    return $gradings;\n}\n\n$grades = [4.0, 3, 1.7, 2, 3.5];\n$gradings\
    \ = numerical_letter_grade($grades);\n\necho implode(\", \", $gradings);\nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "A+, B, C-, C, A-\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcynbf5rk.php:84\n\
    Stack trace:\n#0 /tmp/tmpcynbf5rk.php(89): test()\n#1 {main}\n  thrown in /tmp/tmpcynbf5rk.php\
    \ on line 84\n"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n  $grades_letter = array();\n  foreach ($grades as $value) {\n    if ($value\
    \ >= 4.0) {\n      $grades_letter[] = \"A+\";\n    } elseif ($value >= 3.7) {\n\
    \      $grades_letter[] = \"A\";\n    } elseif ($value >= 3.3) {\n      $grades_letter[]\
    \ = \"A-\";\n    } elseif ($value >= 3.0) {\n      $grades_letter[] = \"B+\";\n\
    \    } elseif ($value >= 2.7) {\n      $grades_letter[] = \"B\";\n    } elseif\
    \ ($value >= 2.3) {\n      $grades_letter[] = \"B-\";\n    } elseif ($value >=\
    \ 2.0) {\n      $grades_letter[] = \"C+\";\n    } elseif ($value >= 1.7) {\n \
    \     $grades_letter[] = \"C\";\n    } elseif ($value >= 1.3) {\n      $grades_letter[]\
    \ = \"C-\";\n    } elseif ($value >= 1.0) {\n      $grades_letter[] = \"D+\";\n\
    \    } elseif ($value >= 0.7) {\n      $grades_letter[] = \"D\";\n    } elseif\
    \ ($value >= 0.0) {\n      $grades_letter[] = \"D-\";\n    } else {\n      $grades_letter[]\
    \ = \"E\";\n    }\n  }\n  return $grades_letter;\n}\n\n$grades = array(4.0, 3,\
    \ 1.7, 2, 3.5);\n$grades_letter = numerical_letter_grade($grades);\nprint_r($grades_letter);\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzgs3r56f.php:66\n\
    Stack trace:\n#0 /tmp/tmpzgs3r56f.php(74): test()\n#1 {main}\n  thrown in /tmp/tmpzgs3r56f.php\
    \ on line 66\n"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n\t\n\t$letter_grades = array();\n\tforeach ($grades as $grade) {\n\t\tif\
    \ ($grade >= 4.0) {\n\t\t\t$letter_grades[] = \"A+\";\n\t\t} elseif ($grade >=\
    \ 3.7) {\n\t\t\t$letter_grades[] = \"A\";\n\t\t} elseif ($grade >= 3.3) {\n\t\t\
    \t$letter_grades[] = \"A-\";\n\t\t} elseif ($grade >= 3.0) {\n\t\t\t$letter_grades[]\
    \ = \"B+\";\n\t\t} elseif ($grade >= 2.7) {\n\t\t\t$letter_grades[] = \"B\";\n\
    \t\t} elseif ($grade >= 2.3) {\n\t\t\t$letter_grades[] = \"B-\";\n\t\t} elseif\
    \ ($grade >= 2.0) {\n\t\t\t$letter_grades[] = \"C+\";\n\t\t} elseif ($grade >=\
    \ 1.7) {\n\t\t\t$letter_grades[] = \"C\";\n\t\t} elseif ($grade >= 1.3) {\n\t\t\
    \t$letter_grades[] = \"C-\";\n\t\t} elseif ($grade >= 1.0) {\n\t\t\t$letter_grades[]\
    \ = \"D+\";\n\t\t} elseif ($grade >= 0.7) {\n\t\t\t$letter_grades[] = \"D\";\n\
    \t\t} elseif ($grade >= 0.0) {\n\t\t\t$letter_grades[] = \"D-\";\n\t\t} else {\n\
    \t\t\t$letter_grades[] = \"E\";\n\t\t}\n\t}\n\treturn $letter_grades;\n}\n\n$grades\
    \ = array(4.0, 3, 1.7, 2, 3.5);\n$letter_grades = numerical_letter_grade($grades);\n\
    print_r($letter_grades);\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpanwkgc4l.php:67\n\
    Stack trace:\n#0 /tmp/tmpanwkgc4l.php(75): test()\n#1 {main}\n  thrown in /tmp/tmpanwkgc4l.php\
    \ on line 67\n"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_filter($grades, 'is_numeric');\n    $letter_grades =\
    \ array();\n    foreach ($grades as $grade) {\n        if ($grade > 4.0) {\n \
    \           $letter_grades[] = 'A+';\n        } elseif ($grade > 3.7) {\n    \
    \        $letter_grades[] = 'A';\n        } elseif ($grade > 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade > 3.0) {\n           \
    \ $letter_grades[] = 'B+';\n        } elseif ($grade > 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade > 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade > 2.0) {\n            $letter_grades[] = 'C+';\n   \
    \     } elseif ($grade > 1.7) {\n            $letter_grades[] = 'C';\n       \
    \ } elseif ($grade > 1.3) {\n            $letter_grades[] = 'C-';\n        } elseif\
    \ ($grade > 1.0) {\n            $letter_grades[] = 'D+';\n        } elseif ($grade\
    \ > 0.7) {\n            $letter_grades[] = 'D';\n        } elseif ($grade > 0.0)\
    \ {\n            $letter_grades[] = 'D-';\n        } else {\n            $letter_grades[]\
    \ = 'E';\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpte6ve7le.php:64\n\
    Stack trace:\n#0 /tmp/tmpte6ve7le.php(72): test()\n#1 {main}\n  thrown in /tmp/tmpte6ve7le.php\
    \ on line 64\n"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $new_array = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ > 4.0) {\n            $new_array[] = \"A+\";\n        } elseif ($grade > 3.7)\
    \ {\n            $new_array[] = \"A\";\n        } elseif ($grade > 3.3) {\n  \
    \          $new_array[] = \"A-\";\n        } elseif ($grade > 3.0) {\n       \
    \     $new_array[] = \"B+\";\n        } elseif ($grade > 2.7) {\n            $new_array[]\
    \ = \"B\";\n        } elseif ($grade > 2.3) {\n            $new_array[] = \"B-\"\
    ;\n        } elseif ($grade > 2.0) {\n            $new_array[] = \"C+\";\n   \
    \     } elseif ($grade > 1.7) {\n            $new_array[] = \"C\";\n        }\
    \ elseif ($grade > 1.3) {\n            $new_array[] = \"C-\";\n        } elseif\
    \ ($grade > 1.0) {\n            $new_array[] = \"D+\";\n        } elseif ($grade\
    \ > 0.7) {\n            $new_array[] = \"D\";\n        } elseif ($grade > 0.0)\
    \ {\n            $new_array[] = \"D-\";\n        } else {\n            $new_array[]\
    \ = \"E\";\n        }\n    }\n    return $new_array;\n}\n\n$grades = [4.0, 3,\
    \ 1.7, 2, 3.5];\nvar_dump(numerical_letter_grade($grades));\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(5) {\n  [0]=>\n  string(1) \"A\"\n  [1]=>\n  string(1) \"B\"\n  [2]=>\n\
    \  string(2) \"C-\"\n  [3]=>\n  string(1) \"C\"\n  [4]=>\n  string(2) \"A-\"\n\
    }\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl4ao_mc5.php:65\n\
    Stack trace:\n#0 /tmp/tmpl4ao_mc5.php(73): test()\n#1 {main}\n  thrown in /tmp/tmpl4ao_mc5.php\
    \ on line 65\n"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade == 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\necho \"<pre>\";\n\
    $grades = array(4.0, 3, 1.7, 2, 3.5);\nvar_dump(numerical_letter_grade($grades));\n\
    echo \"</pre>\";\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>array(5) {\n  [0]=>\n  string(2) \"A+\"\n  [1]=>\n  string(2) \"B+\"\
    \n  [2]=>\n  string(1) \"C\"\n  [3]=>\n  string(2) \"C+\"\n  [4]=>\n  string(2)\
    \ \"A-\"\n}\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf6185syn.php:66\n\
    Stack trace:\n#0 /tmp/tmpf6185syn.php(74): test()\n#1 {main}\n  thrown in /tmp/tmpf6185syn.php\
    \ on line 66\n"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    // your code here\n    foreach ($grades as $gpa){\n        if($gpa >=\
    \ 4.0){\n            $letter = \"A+\";\n        }elseif($gpa >= 3.7){\n      \
    \      $letter = \"A\";\n        }elseif($gpa >= 3.3){\n            $letter =\
    \ \"A-\";\n        }elseif($gpa >= 3.0){\n            $letter = \"B+\";\n    \
    \    }elseif($gpa >= 2.7){\n            $letter = \"B\";\n        }elseif($gpa\
    \ >= 2.3){\n            $letter = \"B-\";\n        }elseif($gpa >= 2.0){\n   \
    \         $letter = \"C+\";\n        }elseif($gpa >= 1.7){\n            $letter\
    \ = \"C\";\n        }elseif($gpa >= 1.3){\n            $letter = \"C-\";\n   \
    \     }elseif($gpa >= 1.0){\n            $letter = \"D+\";\n        }elseif($gpa\
    \ >= 0.7){\n            $letter = \"D\";\n        }elseif($gpa >= 0.0){\n    \
    \        $letter = \"D-\";\n        }else{\n            $letter = \"E\";\n   \
    \     }\n        $output[] = $letter;\n    }\n    return $output;\n}\n\nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpditurwg9.php:64\n\
    Stack trace:\n#0 /tmp/tmpditurwg9.php(72): test()\n#1 {main}\n  thrown in /tmp/tmpditurwg9.php\
    \ on line 64\n"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $result = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ > 4.0) {\n            $result[] = \"A+\";\n        } elseif ($grade > 3.7) {\n\
    \            $result[] = \"A\";\n        } elseif ($grade > 3.3) {\n         \
    \   $result[] = \"A-\";\n        } elseif ($grade > 3.0) {\n            $result[]\
    \ = \"B+\";\n        } elseif ($grade > 2.7) {\n            $result[] = \"B\"\
    ;\n        } elseif ($grade > 2.3) {\n            $result[] = \"B-\";\n      \
    \  } elseif ($grade > 2.0) {\n            $result[] = \"C+\";\n        } elseif\
    \ ($grade > 1.7) {\n            $result[] = \"C\";\n        } elseif ($grade >\
    \ 1.3) {\n            $result[] = \"C-\";\n        } elseif ($grade > 1.0) {\n\
    \            $result[] = \"D+\";\n        } elseif ($grade > 0.7) {\n        \
    \    $result[] = \"D\";\n        } elseif ($grade > 0.0) {\n            $result[]\
    \ = \"D-\";\n        } else {\n            $result[] = \"E\";\n        }\n   \
    \ }\n    return $result;\n}\n$grades = [4.0, 3, 1.7, 2, 3.5];\nprint_r(numerical_letter_grade($grades));\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A\n    [1] => B\n    [2] => C-\n    [3] => C\n   \
    \ [4] => A-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq0_p2cuy.php:64\n\
    Stack trace:\n#0 /tmp/tmpq0_p2cuy.php(72): test()\n#1 {main}\n  thrown in /tmp/tmpq0_p2cuy.php\
    \ on line 64\n"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array(4.0, 3, 1.7, 2, 3.5);\n    $grades[] = \"A+\";\n    $grades[]\
    \ = \"B\";\n    $grades[] = \"C-\";\n    $grades[] = \"C\";\n    $grades[] = \"\
    A-\";\n    \n    \n    \n    \n}\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp468fzwcn.php:41\n\
    Stack trace:\n#0 /tmp/tmp468fzwcn.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp468fzwcn.php\
    \ on line 41\n"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    for ($i = 0; $i < count($grades); $i++) {\n        if ($grades[$i] >=\
    \ 4.0) {\n            $grades[$i] = \"A+\";\n        } elseif ($grades[$i] >=\
    \ 3.7) {\n            $grades[$i] = \"A\";\n        } elseif ($grades[$i] >= 3.3)\
    \ {\n            $grades[$i] = \"A-\";\n        } elseif ($grades[$i] >= 3.0)\
    \ {\n            $grades[$i] = \"B+\";\n        } elseif ($grades[$i] >= 2.7)\
    \ {\n            $grades[$i] = \"B\";\n        } elseif ($grades[$i] >= 2.3) {\n\
    \            $grades[$i] = \"B-\";\n        } elseif ($grades[$i] >= 2.0) {\n\
    \            $grades[$i] = \"C+\";\n        } elseif ($grades[$i] >= 1.7) {\n\
    \            $grades[$i] = \"C\";\n        } elseif ($grades[$i] >= 1.3) {\n \
    \           $grades[$i] = \"C-\";\n        } elseif ($grades[$i] >= 1.0) {\n \
    \           $grades[$i] = \"D+\";\n        } elseif ($grades[$i] >= 0.7) {\n \
    \           $grades[$i] = \"D\";\n        } elseif ($grades[$i] > 0.0) {\n   \
    \         $grades[$i] = \"D-\";\n        } else {\n            $grades[$i] = \"\
    E\";\n        }\n    }\n    return $grades;\n}\nfunction candidate(...$args) {\n\
    \    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7ttwsxjg.php:61\n\
    Stack trace:\n#0 /tmp/tmp7ttwsxjg.php(69): test()\n#1 {main}\n  thrown in /tmp/tmp7ttwsxjg.php\
    \ on line 61\n"
  timestamp: 1660005483
- exit_code: 0
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $new_grades = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ == 4.0) {\n            $new_grades[] = \"A+\";\n        } elseif ($grade > 3.7)\
    \ {\n            $new_grades[] = \"A\";\n        } elseif ($grade > 3.3) {\n \
    \           $new_grades[] = \"A-\";\n        } elseif ($grade > 3.0) {\n     \
    \       $new_grades[] = \"B+\";\n        } elseif ($grade > 2.7) {\n         \
    \   $new_grades[] = \"B\";\n        } elseif ($grade > 2.3) {\n            $new_grades[]\
    \ = \"B-\";\n        } elseif ($grade > 2.0) {\n            $new_grades[] = \"\
    C+\";\n        } elseif ($grade > 1.7) {\n            $new_grades[] = \"C\";\n\
    \        } elseif ($grade > 1.3) {\n            $new_grades[] = \"C-\";\n    \
    \    } elseif ($grade > 1.0) {\n            $new_grades[] = \"D+\";\n        }\
    \ elseif ($grade > 0.7) {\n            $new_grades[] = \"D\";\n        } elseif\
    \ ($grade > 0.0) {\n            $new_grades[] = \"D-\";\n        } else {\n  \
    \          $new_grades[] = \"E\";\n        }\n    }\n    return $new_grades;\n\
    }\n$grades = [4.0, 3, 1.7, 2, 3.5];\n$new_grades = numerical_letter_grade($grades);\n\
    echo \"<pre>\";\nprint_r($new_grades);\necho \"</pre>\";\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => A+\n    [1] => B\n    [2] => C-\n    [3] => C\n\
    \    [4] => A-\n)\n</pre>"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n\t$numerical_grades = [];\n\tforeach ($grades as $grade) {\n\t\tif ($grade\
    \ > 4.0) {\n\t\t\t$numerical_grades[] = \"A+\";\n\t\t} elseif ($grade > 3.7) {\n\
    \t\t\t$numerical_grades[] = \"A\";\n\t\t} elseif ($grade > 3.3) {\n\t\t\t$numerical_grades[]\
    \ = \"A-\";\n\t\t} elseif ($grade > 3.0) {\n\t\t\t$numerical_grades[] = \"B+\"\
    ;\n\t\t} elseif ($grade > 2.7) {\n\t\t\t$numerical_grades[] = \"B\";\n\t\t} elseif\
    \ ($grade > 2.3) {\n\t\t\t$numerical_grades[] = \"B-\";\n\t\t} elseif ($grade\
    \ > 2.0) {\n\t\t\t$numerical_grades[] = \"C+\";\n\t\t} elseif ($grade > 1.7) {\n\
    \t\t\t$numerical_grades[] = \"C\";\n\t\t} elseif ($grade > 1.3) {\n\t\t\t$numerical_grades[]\
    \ = \"C-\";\n\t\t} elseif ($grade > 1.0) {\n\t\t\t$numerical_grades[] = \"D+\"\
    ;\n\t\t} elseif ($grade > 0.7) {\n\t\t\t$numerical_grades[] = \"D\";\n\t\t} elseif\
    \ ($grade > 0.0) {\n\t\t\t$numerical_grades[] = \"D-\";\n\t\t} else {\n\t\t\t\
    $numerical_grades[] = \"E\";\n\t\t}\n\t}\n\treturn $numerical_grades;\n}\nprint_r(numerical_letter_grade([4.0,\
    \ 3, 1.7, 2, 3.5]));\necho \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4.0,\
    \ 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.2)) !== array(\"D+\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5)) !==\
    \ array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A\n    [1] => B\n    [2] => C-\n    [3] => C\n   \
    \ [4] => A-\n)\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5os7euce.php:64\n\
    Stack trace:\n#0 /tmp/tmp5os7euce.php(72): test()\n#1 {main}\n  thrown in /tmp/tmp5os7euce.php\
    \ on line 64\n"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n  //enter code here\n}\n$grades = array(4.0, 3, 1.7, 2, 3.5);\n$letter_grades\
    \ = numerical_letter_grade($grades);\nvar_dump($letter_grades);\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "NULL\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_k7hyy8u.php:35\n\
    Stack trace:\n#0 /tmp/tmp_k7hyy8u.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp_k7hyy8u.php\
    \ on line 35\n"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n  $letter_grades = array();\n  for ($i = 0; $i < count($grades); $i++) {\n\
    \    switch ($grades[$i]) {\n      case 4.0:\n        $letter_grades[] = \"A+\"\
    ;\n        break;\n      case ($grades[$i] > 3.7):\n        $letter_grades[] =\
    \ \"A\";\n        break;\n      case ($grades[$i] > 3.3):\n        $letter_grades[]\
    \ = \"A-\";\n        break;\n      case ($grades[$i] > 3.0):\n        $letter_grades[]\
    \ = \"B+\";\n        break;\n      case ($grades[$i] > 2.7):\n        $letter_grades[]\
    \ = \"B\";\n        break;\n      case ($grades[$i] > 2.3):\n        $letter_grades[]\
    \ = \"B-\";\n        break;\n      case ($grades[$i] > 2.0):\n        $letter_grades[]\
    \ = \"C+\";\n        break;\n      case ($grades[$i] > 1.7):\n        $letter_grades[]\
    \ = \"C\";\n        break;\n      case ($grades[$i] > 1.3):\n        $letter_grades[]\
    \ = \"C-\";\n        break;\n      case ($grades[$i] > 1.0):\n        $letter_grades[]\
    \ = \"D+\";\n        break;\n      case ($grades[$i] > 0.7):\n        $letter_grades[]\
    \ = \"D\";\n        break;\n      case ($grades[$i] > 0.0):\n        $letter_grades[]\
    \ = \"D-\";\n        break;\n      case ($grades[$i] == 0.0):\n        $letter_grades[]\
    \ = \"E\";\n        break;\n    }\n  }\n  return $letter_grades;\n}\nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpltud0pvs.php:79\n\
    Stack trace:\n#0 /tmp/tmpltud0pvs.php(84): test()\n#1 {main}\n  thrown in /tmp/tmpltud0pvs.php\
    \ on line 79\n"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n\t// Write your code here\n}\n\nfunction candidate(...$args) {\n    return\
    \ numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4.0,\
    \ 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.2)) !== array(\"D+\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5)) !==\
    \ array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx6ubjlp1.php:33\n\
    Stack trace:\n#0 /tmp/tmpx6ubjlp1.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpx6ubjlp1.php\
    \ on line 33\n"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n  $result = [];\n  foreach ($grades as $grade) {\n    if ($grade >= 4.0)\
    \ {\n      $result[] = \"A+\";\n    } elseif ($grade >= 3.7) {\n      $result[]\
    \ = \"A\";\n    } elseif ($grade >= 3.3) {\n      $result[] = \"A-\";\n    } elseif\
    \ ($grade >= 3.0) {\n      $result[] = \"B+\";\n    } elseif ($grade >= 2.7) {\n\
    \      $result[] = \"B\";\n    } elseif ($grade >= 2.3) {\n      $result[] = \"\
    B-\";\n    } elseif ($grade >= 2.0) {\n      $result[] = \"C+\";\n    } elseif\
    \ ($grade >= 1.7) {\n      $result[] = \"C\";\n    } elseif ($grade >= 1.3) {\n\
    \      $result[] = \"C-\";\n    } elseif ($grade >= 1.0) {\n      $result[] =\
    \ \"D+\";\n    } elseif ($grade >= 0.7) {\n      $result[] = \"D\";\n    } elseif\
    \ ($grade >= 0.0) {\n      $result[] = \"D-\";\n    } else {\n      $result[]\
    \ = \"E\";\n    }\n  }\n  return $result;\n}\nfunction candidate(...$args) {\n\
    \    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp464ry31z.php:62\n\
    Stack trace:\n#0 /tmp/tmp464ry31z.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp464ry31z.php\
    \ on line 62\n"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $out = array();\n    foreach ($grades as $grade) {\n        if($grade\
    \ >= 4.0) {\n            $out[] = \"A+\";\n        } elseif($grade >= 3.7) {\n\
    \            $out[] = \"A\";\n        } elseif($grade >= 3.3) {\n            $out[]\
    \ = \"A-\";\n        } elseif($grade >= 3.0) {\n            $out[] = \"B+\";\n\
    \        } elseif($grade >= 2.7) {\n            $out[] = \"B\";\n        } elseif($grade\
    \ >= 2.3) {\n            $out[] = \"B-\";\n        } elseif($grade >= 2.0) {\n\
    \            $out[] = \"C+\";\n        } elseif($grade >= 1.7) {\n           \
    \ $out[] = \"C\";\n        } elseif($grade >= 1.3) {\n            $out[] = \"\
    C-\";\n        } elseif($grade >= 1.0) {\n            $out[] = \"D+\";\n     \
    \   } elseif($grade >= 0.7) {\n            $out[] = \"D\";\n        } elseif($grade\
    \ >= 0.0) {\n            $out[] = \"D-\";\n        } else {\n            $out[]\
    \ = \"E\";\n        }\n    }\n    return $out;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp58tojuwp.php:63\n\
    Stack trace:\n#0 /tmp/tmp58tojuwp.php(71): test()\n#1 {main}\n  thrown in /tmp/tmp58tojuwp.php\
    \ on line 63\n"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n  $letter_grades = array();\n  foreach ($grades as $grade) {\n    if ($grade\
    \ >= 4.0) {\n      $letter_grades[] = \"A+\";\n    } elseif ($grade >= 3.7) {\n\
    \      $letter_grades[] = \"A\";\n    } elseif ($grade >= 3.3) {\n      $letter_grades[]\
    \ = \"A-\";\n    } elseif ($grade >= 3.0) {\n      $letter_grades[] = \"B+\";\n\
    \    } elseif ($grade >= 2.7) {\n      $letter_grades[] = \"B\";\n    } elseif\
    \ ($grade >= 2.3) {\n      $letter_grades[] = \"B-\";\n    } elseif ($grade >=\
    \ 2.0) {\n      $letter_grades[] = \"C+\";\n    } elseif ($grade >= 1.7) {\n \
    \     $letter_grades[] = \"C\";\n    } elseif ($grade >= 1.3) {\n      $letter_grades[]\
    \ = \"C-\";\n    } elseif ($grade >= 1.0) {\n      $letter_grades[] = \"D+\";\n\
    \    } elseif ($grade >= 0.7) {\n      $letter_grades[] = \"D\";\n    } elseif\
    \ ($grade >= 0.0) {\n      $letter_grades[] = \"D-\";\n    } else {\n      $letter_grades[]\
    \ = \"E\";\n    }\n  }\n  return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcslhm96d.php:63\n\
    Stack trace:\n#0 /tmp/tmpcslhm96d.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpcslhm96d.php\
    \ on line 63\n"
  timestamp: 1660005483
- exit_code: 0
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades_letters = array();\n    foreach ($grades as $gpa) {\n       \
    \ if($gpa == 4.0) {\n            $grades_letters[] = \"A+\";\n        } elseif\
    \ ($gpa > 3.7) {\n            $grades_letters[] = \"A\";\n        } elseif ($gpa\
    \ > 3.3) {\n            $grades_letters[] = \"A-\";\n        } elseif ($gpa >\
    \ 3.0) {\n            $grades_letters[] = \"B+\";\n        } elseif ($gpa > 2.7)\
    \ {\n            $grades_letters[] = \"B\";\n        } elseif ($gpa > 2.3) {\n\
    \            $grades_letters[] = \"B-\";\n        } elseif ($gpa > 2.0) {\n  \
    \          $grades_letters[] = \"C+\";\n        } elseif ($gpa > 1.7) {\n    \
    \        $grades_letters[] = \"C\";\n        } elseif ($gpa > 1.3) {\n       \
    \     $grades_letters[] = \"C-\";\n        } elseif ($gpa > 1.0) {\n         \
    \   $grades_letters[] = \"D+\";\n        } elseif ($gpa > 0.7) {\n           \
    \ $grades_letters[] = \"D\";\n        } elseif ($gpa > 0.0) {\n            $grades_letters[]\
    \ = \"D-\";\n        } else {\n            $grades_letters[] = \"E\";\n      \
    \  }\n    }\n    return $grades_letters;\n}\n\nprint_r(numerical_letter_grade(array(4.0,\
    \ 3, 1.7, 2, 3.5)));\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => A+\n    [1] => B\n    [2] => C-\n    [3] => C\n  \
    \  [4] => A-\n)\n"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n\tforeach ($grades as $grade) {\n\t\tif ($grade > 4.0) {\n\t\t\t$letter_grade[]\
    \ = \"A+\";\n\t\t}\n\t\telseif ($grade >= 3.7) {\n\t\t\t$letter_grade[] = \"A\"\
    ;\n\t\t}\n\t\telseif ($grade >= 3.3) {\n\t\t\t$letter_grade[] = \"A-\";\n\t\t\
    }\n\t\telseif ($grade >= 3.0) {\n\t\t\t$letter_grade[] = \"B+\";\n\t\t}\n\t\t\
    elseif ($grade >= 2.7) {\n\t\t\t$letter_grade[] = \"B\";\n\t\t}\n\t\telseif ($grade\
    \ >= 2.3) {\n\t\t\t$letter_grade[] = \"B-\";\n\t\t}\n\t\telseif ($grade >= 2.0)\
    \ {\n\t\t\t$letter_grade[] = \"C+\";\n\t\t}\n\t\telseif ($grade >= 1.7) {\n\t\t\
    \t$letter_grade[] = \"C\";\n\t\t}\n\t\telseif ($grade >= 1.3) {\n\t\t\t$letter_grade[]\
    \ = \"C-\";\n\t\t}\n\t\telseif ($grade >= 1.0) {\n\t\t\t$letter_grade[] = \"D+\"\
    ;\n\t\t}\n\t\telseif ($grade >= 0.7) {\n\t\t\t$letter_grade[] = \"D\";\n\t\t}\n\
    \t\telseif ($grade >= 0.0) {\n\t\t\t$letter_grade[] = \"D-\";\n\t\t}\n\t\telse\
    \ {\n\t\t\t$letter_grade[] = \"E\";\n\t\t}\n\t}\n\treturn $letter_grade;\n}\n\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg8ycppl0.php:74\n\
    Stack trace:\n#0 /tmp/tmpg8ycppl0.php(82): test()\n#1 {main}\n  thrown in /tmp/tmpg8ycppl0.php\
    \ on line 74\n"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letters = array();\n    foreach ($grades as $grade) {\n        if ($grade\
    \ >= 4.0) {\n            $letters[] = \"A+\";\n        } elseif ($grade >= 3.7)\
    \ {\n            $letters[] = \"A\";\n        } elseif ($grade >= 3.3) {\n   \
    \         $letters[] = \"A-\";\n        } elseif ($grade >= 3.0) {\n         \
    \   $letters[] = \"B+\";\n        } elseif ($grade >= 2.7) {\n            $letters[]\
    \ = \"B\";\n        } elseif ($grade >= 2.3) {\n            $letters[] = \"B-\"\
    ;\n        } elseif ($grade >= 2.0) {\n            $letters[] = \"C+\";\n    \
    \    } elseif ($grade >= 1.7) {\n            $letters[] = \"C\";\n        } elseif\
    \ ($grade >= 1.3) {\n            $letters[] = \"C-\";\n        } elseif ($grade\
    \ >= 1.0) {\n            $letters[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letters[] = \"D\";\n        } elseif ($grade > 0.0) {\n    \
    \        $letters[] = \"D-\";\n        } else {\n            $letters[] = \"E\"\
    ;\n        }\n    }\n    return $letters;\n}\necho numerical_letter_grade(array(4.0,\
    \ 3, 1.7, 2, 3.5));\necho \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4.0,\
    \ 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.2)) !== array(\"D+\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5)) !==\
    \ array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpz2iahlqx.php on line 57\n\
    Array\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz2iahlqx.php:64\n\
    Stack trace:\n#0 /tmp/tmpz2iahlqx.php(72): test()\n#1 {main}\n  thrown in /tmp/tmpz2iahlqx.php\
    \ on line 64\n"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n  $output = [];\n  foreach ($grades as $gpa) {\n    $grade = \"F\";\n   \
    \ if ($gpa > 4.0) {\n      $grade = \"A+\";\n    } else if ($gpa > 3.7) {\n  \
    \    $grade = \"A\";\n    } else if ($gpa > 3.3) {\n      $grade = \"A-\";\n \
    \   } else if ($gpa > 3.0) {\n      $grade = \"B+\";\n    } else if ($gpa > 2.7)\
    \ {\n      $grade = \"B\";\n    } else if ($gpa > 2.3) {\n      $grade = \"B-\"\
    ;\n    } else if ($gpa > 2.0) {\n      $grade = \"C+\";\n    } else if ($gpa >\
    \ 1.7) {\n      $grade = \"C\";\n    } else if ($gpa > 1.3) {\n      $grade =\
    \ \"C-\";\n    } else if ($gpa > 1.0) {\n      $grade = \"D+\";\n    } else if\
    \ ($gpa > 0.7) {\n      $grade = \"D\";\n    } else if ($gpa > 0.0) {\n      $grade\
    \ = \"D-\";\n    }\n    $output[] = $grade;\n  }\n  return $output;\n}\n\nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkyhybxsv.php:63\n\
    Stack trace:\n#0 /tmp/tmpkyhybxsv.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpkyhybxsv.php\
    \ on line 63\n"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array();\n    $numerical_to_letter = array(\n        0.0 =>\
    \ \"E\",\n        0.7 => \"D-\",\n        1.0 => \"D\",\n        1.3 => \"D+\"\
    ,\n        1.7 => \"C-\",\n        2.0 => \"C\",\n        2.3 => \"C+\",\n   \
    \     2.7 => \"B-\",\n        3.0 => \"B\",\n        3.3 => \"B+\",\n        3.7\
    \ => \"A-\",\n        4.0 => \"A\",\n    );\n    foreach ($grades as $grade) {\n\
    \        $min_key = null;\n        foreach ($numerical_to_letter as $key => $value)\
    \ {\n            if ($grade > $key) {\n                $min_key = $key;\n    \
    \        }\n        }\n        $grades[] = $numerical_to_letter[$min_key];\n \
    \   }\n    return $grades;\n}\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nDeprecated: Implicit conversion from float 0.7 to int loses precision\
    \ in /tmp/tmp4y_txqrk.php on line 28\n\nDeprecated: Implicit conversion from float\
    \ 1.3 to int loses precision in /tmp/tmp4y_txqrk.php on line 30\n\nDeprecated:\
    \ Implicit conversion from float 1.7 to int loses precision in /tmp/tmp4y_txqrk.php\
    \ on line 31\n\nDeprecated: Implicit conversion from float 2.3 to int loses precision\
    \ in /tmp/tmp4y_txqrk.php on line 33\n\nDeprecated: Implicit conversion from float\
    \ 2.7 to int loses precision in /tmp/tmp4y_txqrk.php on line 34\n\nDeprecated:\
    \ Implicit conversion from float 3.3 to int loses precision in /tmp/tmp4y_txqrk.php\
    \ on line 36\n\nDeprecated: Implicit conversion from float 3.7 to int loses precision\
    \ in /tmp/tmp4y_txqrk.php on line 37\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp4y_txqrk.php:56\nStack trace:\n#0 /tmp/tmp4y_txqrk.php(64):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp4y_txqrk.php on line 56\n"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $vars = array();\n    foreach ($grades as $key => $grade) {\n       \
    \ switch (true) {\n            case $grade >= 4.0:\n                $vars[$key]\
    \ = \"A+\";\n                break;\n            case $grade >= 3.7:\n       \
    \         $vars[$key] = \"A\";\n                break;\n            case $grade\
    \ >= 3.3:\n                $vars[$key] = \"A-\";\n                break;\n   \
    \         case $grade >= 3.0:\n                $vars[$key] = \"B+\";\n       \
    \         break;\n            case $grade >= 2.7:\n                $vars[$key]\
    \ = \"B\";\n                break;\n            case $grade >= 2.3:\n        \
    \        $vars[$key] = \"B-\";\n                break;\n            case $grade\
    \ >= 2.0:\n                $vars[$key] = \"C+\";\n                break;\n   \
    \         case $grade >= 1.7:\n                $vars[$key] = \"C\";\n        \
    \        break;\n            case $grade >= 1.3:\n                $vars[$key]\
    \ = \"C-\";\n                break;\n            case $grade >= 1.0:\n       \
    \         $vars[$key] = \"D+\";\n                break;\n            case $grade\
    \ >= 0.7:\n                $vars[$key] = \"D\";\n                break;\n    \
    \        case $grade >= 0.0:\n                $vars[$key] = \"D-\";\n        \
    \        break;\n            default:\n                $vars[$key] = \"E\";\n\
    \                break;\n        }\n    }\n    return $vars;\n}\n$grades = array(4.0,\
    \ 3, 1.7, 2, 3.5);\necho \"<pre>\";\nprint_r(numerical_letter_grade($grades));\n\
    echo \"</pre>\";\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n\
    \    [4] => A-\n)\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgqb3oaqo.php:80\n\
    Stack trace:\n#0 /tmp/tmpgqb3oaqo.php(88): test()\n#1 {main}\n  thrown in /tmp/tmpgqb3oaqo.php\
    \ on line 80\n"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades_map = [\n        4.0 => 'A+',\n        3.7 => 'A',\n        3.3\
    \ => 'A-',\n        3.0 => 'B+',\n        2.7 => 'B',\n        2.3 => 'B-',\n\
    \        2.0 => 'C+',\n        1.7 => 'C',\n        1.3 => 'C-',\n        1.0\
    \ => 'D+',\n        0.7 => 'D',\n        0.0 => 'D-',\n        -1  => 'E'\n  \
    \  ];\n    $numerical_grades = [];\n    foreach ($grades as $grade) {\n      \
    \  $numerical_grades[] = number_format($grade, 2);\n    }\n    $final_grades =\
    \ [];\n    foreach ($numerical_grades as $grade) {\n        $final_grades[] =\
    \ $grades_map[$grade];\n    }\n    return $final_grades;\n}\n$grades = [\n   \
    \ 4.0,\n    3,\n    1.7,\n    2,\n    3.5\n];\nprint_r(numerical_letter_grade($grades));\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nDeprecated: Implicit conversion from float 3.7 to int loses precision\
    \ in /tmp/tmpcj1v1c9p.php on line 27\n\nDeprecated: Implicit conversion from float\
    \ 3.3 to int loses precision in /tmp/tmpcj1v1c9p.php on line 28\n\nDeprecated:\
    \ Implicit conversion from float 2.7 to int loses precision in /tmp/tmpcj1v1c9p.php\
    \ on line 30\n\nDeprecated: Implicit conversion from float 2.3 to int loses precision\
    \ in /tmp/tmpcj1v1c9p.php on line 31\n\nDeprecated: Implicit conversion from float\
    \ 1.7 to int loses precision in /tmp/tmpcj1v1c9p.php on line 33\n\nDeprecated:\
    \ Implicit conversion from float 1.3 to int loses precision in /tmp/tmpcj1v1c9p.php\
    \ on line 34\n\nDeprecated: Implicit conversion from float 0.7 to int loses precision\
    \ in /tmp/tmpcj1v1c9p.php on line 36\n\nWarning: Undefined array key \"4.00\"\
    \ in /tmp/tmpcj1v1c9p.php on line 46\n\nWarning: Undefined array key \"3.00\"\
    \ in /tmp/tmpcj1v1c9p.php on line 46\n\nWarning: Undefined array key \"1.70\"\
    \ in /tmp/tmpcj1v1c9p.php on line 46\n\nWarning: Undefined array key \"2.00\"\
    \ in /tmp/tmpcj1v1c9p.php on line 46\n\nWarning: Undefined array key \"3.50\"\
    \ in /tmp/tmpcj1v1c9p.php on line 46\nArray\n(\n    [0] => \n    [1] => \n   \
    \ [2] => \n    [3] => \n    [4] => \n)\n\nDeprecated: Implicit conversion from\
    \ float 3.7 to int loses precision in /tmp/tmpcj1v1c9p.php on line 27\n\nDeprecated:\
    \ Implicit conversion from float 3.3 to int loses precision in /tmp/tmpcj1v1c9p.php\
    \ on line 28\n\nDeprecated: Implicit conversion from float 2.7 to int loses precision\
    \ in /tmp/tmpcj1v1c9p.php on line 30\n\nDeprecated: Implicit conversion from float\
    \ 2.3 to int loses precision in /tmp/tmpcj1v1c9p.php on line 31\n\nDeprecated:\
    \ Implicit conversion from float 1.7 to int loses precision in /tmp/tmpcj1v1c9p.php\
    \ on line 33\n\nDeprecated: Implicit conversion from float 1.3 to int loses precision\
    \ in /tmp/tmpcj1v1c9p.php on line 34\n\nDeprecated: Implicit conversion from float\
    \ 0.7 to int loses precision in /tmp/tmpcj1v1c9p.php on line 36\n\nWarning: Undefined\
    \ array key \"4.00\" in /tmp/tmpcj1v1c9p.php on line 46\n\nWarning: Undefined\
    \ array key \"3.00\" in /tmp/tmpcj1v1c9p.php o"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n  $letter_grades = [];\n  foreach ($grades as $grade) {\n    if ($grade >=\
    \ 4.0) {\n      $letter_grades[] = \"A+\";\n    } elseif ($grade >= 3.7) {\n \
    \     $letter_grades[] = \"A\";\n    } elseif ($grade >= 3.3) {\n      $letter_grades[]\
    \ = \"A-\";\n    } elseif ($grade >= 3.0) {\n      $letter_grades[] = \"B+\";\n\
    \    } elseif ($grade >= 2.7) {\n      $letter_grades[] = \"B\";\n    } elseif\
    \ ($grade >= 2.3) {\n      $letter_grades[] = \"B-\";\n    } elseif ($grade >=\
    \ 2.0) {\n      $letter_grades[] = \"C+\";\n    } elseif ($grade >= 1.7) {\n \
    \     $letter_grades[] = \"C\";\n    } elseif ($grade >= 1.3) {\n      $letter_grades[]\
    \ = \"C-\";\n    } elseif ($grade >= 1.0) {\n      $letter_grades[] = \"D+\";\n\
    \    } elseif ($grade >= 0.7) {\n      $letter_grades[] = \"D\";\n    } elseif\
    \ ($grade >= 0.0) {\n      $letter_grades[] = \"D-\";\n    } else {\n      $letter_grades[]\
    \ = \"E\";\n    }\n  }\n  return $letter_grades;\n}\n$grades = [4.0, 3, 1.7, 2,\
    \ 3.5];\nvar_dump(numerical_letter_grade($grades));\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(5) {\n  [0]=>\n  string(2) \"A+\"\n  [1]=>\n  string(2) \"B+\"\n\
    \  [2]=>\n  string(1) \"C\"\n  [3]=>\n  string(2) \"C+\"\n  [4]=>\n  string(2)\
    \ \"A-\"\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppxvlus4x.php:64\n\
    Stack trace:\n#0 /tmp/tmppxvlus4x.php(72): test()\n#1 {main}\n  thrown in /tmp/tmppxvlus4x.php\
    \ on line 64\n"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n  $grades = array(\n    '4.0' => 'A+',\n    '3.7' => 'A',\n    '3.3' => 'A-',\n\
    \    '3.0' => 'B+',\n    '2.7' => 'B',\n    '2.3' => 'B-',\n    '2.0' => 'C+',\n\
    \    '1.7' => 'C',\n    '1.3' => 'C-',\n    '1.0' => 'D+',\n    '0.7' => 'D',\n\
    \    '0.0' => 'D-',\n    '-1' => 'E'\n  );\n  $letter_grades = array();\n  foreach\
    \ ($grades as $key => $value) {\n    if($key > $value) {\n      array_push($letter_grades,\
    \ $value);\n    }\n  }\n  print_r($letter_grades);\n}\nnumerical_letter_grade(array(4.0,\
    \ 3, 1.7, 2, 3.5));\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpwm2t6_kb.php:55\nStack trace:\n#0 /tmp/tmpwm2t6_kb.php(63): test()\n\
    #1 {main}\n  thrown in /tmp/tmpwm2t6_kb.php on line 55\n"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n\t$letter_grades = array();\n\tforeach ($grades as $grade) {\n\t\tswitch\
    \ ($grade) {\n\t\t\tcase ($grade == 4.0):\n\t\t\t\t$letter_grades[] = \"A+\";\n\
    \t\t\t\tbreak;\n\t\t\tcase ($grade >= 3.7):\n\t\t\t\t$letter_grades[] = \"A\"\
    ;\n\t\t\t\tbreak;\n\t\t\tcase ($grade >= 3.3):\n\t\t\t\t$letter_grades[] = \"\
    A-\";\n\t\t\t\tbreak;\n\t\t\tcase ($grade >= 3.0):\n\t\t\t\t$letter_grades[] =\
    \ \"B+\";\n\t\t\t\tbreak;\n\t\t\tcase ($grade >= 2.7):\n\t\t\t\t$letter_grades[]\
    \ = \"B\";\n\t\t\t\tbreak;\n\t\t\tcase ($grade >= 2.3):\n\t\t\t\t$letter_grades[]\
    \ = \"B-\";\n\t\t\t\tbreak;\n\t\t\tcase ($grade >= 2.0):\n\t\t\t\t$letter_grades[]\
    \ = \"C+\";\n\t\t\t\tbreak;\n\t\t\tcase ($grade >= 1.7):\n\t\t\t\t$letter_grades[]\
    \ = \"C\";\n\t\t\t\tbreak;\n\t\t\tcase ($grade >= 1.3):\n\t\t\t\t$letter_grades[]\
    \ = \"C-\";\n\t\t\t\tbreak;\n\t\t\tcase ($grade >= 1.0):\n\t\t\t\t$letter_grades[]\
    \ = \"D+\";\n\t\t\t\tbreak;\n\t\t\tcase ($grade >= 0.7):\n\t\t\t\t$letter_grades[]\
    \ = \"D\";\n\t\t\t\tbreak;\n\t\t\tcase ($grade >= 0.0):\n\t\t\t\t$letter_grades[]\
    \ = \"D-\";\n\t\t\t\tbreak;\n\t\t\tcase ($grade == 0.0):\n\t\t\t\t$letter_grades[]\
    \ = \"E\";\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn $letter_grades;\n}\n\n$grades\
    \ = array(4.0, 3, 1.7, 2, 3.5);\nprint_r(numer\nfunction candidate(...$args) {\n\
    \    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmpkr_dm0kq.php
    on line 74

    '
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    // write your code here\n}\n$grades = [4.0, 3, 1.7, 2, 3.5];\nvar_dump(numerical_letter_grade($grades));\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "NULL\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4hfbsdk6.php:34\n\
    Stack trace:\n#0 /tmp/tmp4hfbsdk6.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp4hfbsdk6.php\
    \ on line 34\n"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n\t$letter_grades = array();\n\tforeach ($grades as $grade) {\n\t\t$letter_grade\
    \ = \"\";\n\t\tswitch ($grade) {\n\t\t\tcase $grade >= 4.0:\n\t\t\t\t$letter_grade\
    \ = \"A+\";\n\t\t\t\tbreak;\n\t\t\tcase $grade >= 3.7:\n\t\t\t\t$letter_grade\
    \ = \"A\";\n\t\t\t\tbreak;\n\t\t\tcase $grade >= 3.3:\n\t\t\t\t$letter_grade =\
    \ \"A-\";\n\t\t\t\tbreak;\n\t\t\tcase $grade >= 3.0:\n\t\t\t\t$letter_grade =\
    \ \"B+\";\n\t\t\t\tbreak;\n\t\t\tcase $grade >= 2.7:\n\t\t\t\t$letter_grade =\
    \ \"B\";\n\t\t\t\tbreak;\n\t\t\tcase $grade >= 2.3:\n\t\t\t\t$letter_grade = \"\
    B-\";\n\t\t\t\tbreak;\n\t\t\tcase $grade >= 2.0:\n\t\t\t\t$letter_grade = \"C+\"\
    ;\n\t\t\t\tbreak;\n\t\t\tcase $grade >= 1.7:\n\t\t\t\t$letter_grade = \"C\";\n\
    \t\t\t\tbreak;\n\t\t\tcase $grade >= 1.3:\n\t\t\t\t$letter_grade = \"C-\";\n\t\
    \t\t\tbreak;\n\t\t\tcase $grade >= 1.0:\n\t\t\t\t$letter_grade = \"D+\";\n\t\t\
    \t\tbreak;\n\t\t\tcase $grade >= 0.7:\n\t\t\t\t$letter_grade = \"D\";\n\t\t\t\t\
    break;\n\t\t\tcase $grade >= 0.0:\n\t\t\t\t$letter_grade = \"D-\";\n\t\t\t\tbreak;\n\
    \t\t\tcase $grade >= 0.0:\n\t\t\t\t$letter_grade = \"E\";\n\t\t\t\tbreak;\n\t\t\
    }\n\t\tarray_push($letter_grades, $letter_grade);\n\t}\n\treturn $letter_grades;\n\
    }\n\nprint_r(numerical_letter_grade(array(4\nfunction candidate(...$args) {\n\
    \    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmpt9x33p_g.php
    on line 75

    '
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif ($grade\
    \ >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade >=\
    \ 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade >=\
    \ 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade >=\
    \ 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >= 2.3)\
    \ {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >= 2.0)\
    \ {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >= 1.7)\
    \ {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3) {\n\
    \            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0) {\n\
    \            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7) {\n\
    \            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n \
    \           $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\n$grades = [4.0,\
    \ 3, 1.7, 2, 3.5];\nprint_r(numerical_letter_grade($grades));\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmputd94i74.php:65\n\
    Stack trace:\n#0 /tmp/tmputd94i74.php(73): test()\n#1 {main}\n  thrown in /tmp/tmputd94i74.php\
    \ on line 65\n"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n\t$letter_grades = [];\n\tforeach ($grades as $grade) {\n\t\tif ($grade >=\
    \ 4.0) {\n\t\t\t$letter_grades[] = \"A+\";\n\t\t} elseif ($grade >= 3.7) {\n\t\
    \t\t$letter_grades[] = \"A\";\n\t\t} elseif ($grade >= 3.3) {\n\t\t\t$letter_grades[]\
    \ = \"A-\";\n\t\t} elseif ($grade >= 3.0) {\n\t\t\t$letter_grades[] = \"B+\";\n\
    \t\t} elseif ($grade >= 2.7) {\n\t\t\t$letter_grades[] = \"B\";\n\t\t} elseif\
    \ ($grade >= 2.3) {\n\t\t\t$letter_grades[] = \"B-\";\n\t\t} elseif ($grade >=\
    \ 2.0) {\n\t\t\t$letter_grades[] = \"C+\";\n\t\t} elseif ($grade >= 1.7) {\n\t\
    \t\t$letter_grades[] = \"C\";\n\t\t} elseif ($grade >= 1.3) {\n\t\t\t$letter_grades[]\
    \ = \"C-\";\n\t\t} elseif ($grade >= 1.0) {\n\t\t\t$letter_grades[] = \"D+\";\n\
    \t\t} elseif ($grade >= 0.7) {\n\t\t\t$letter_grades[] = \"D\";\n\t\t} elseif\
    \ ($grade >= 0.0) {\n\t\t\t$letter_grades[] = \"D-\";\n\t\t} else {\n\t\t\t$letter_grades[]\
    \ = \"E\";\n\t\t}\n\t}\n\treturn $letter_grades;\n}\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzplvsxqw.php:62\n\
    Stack trace:\n#0 /tmp/tmpzplvsxqw.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpzplvsxqw.php\
    \ on line 62\n"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $string_grades = [];\n    foreach ($grades as $grade) {\n        switch\
    \ ($grade) {\n            case $grade >= 4.0:\n                $string_grades[]\
    \ = \"A+\";\n                break;\n            case $grade >= 3.7:\n       \
    \         $string_grades[] = \"A\";\n                break;\n            case\
    \ $grade >= 3.3:\n                $string_grades[] = \"A-\";\n               \
    \ break;\n            case $grade >= 3.0:\n                $string_grades[] =\
    \ \"B+\";\n                break;\n            case $grade >= 2.7:\n         \
    \       $string_grades[] = \"B\";\n                break;\n            case $grade\
    \ >= 2.3:\n                $string_grades[] = \"B-\";\n                break;\n\
    \            case $grade >= 2.0:\n                $string_grades[] = \"C+\";\n\
    \                break;\n            case $grade >= 1.7:\n                $string_grades[]\
    \ = \"C\";\n                break;\n            case $grade >= 1.3:\n        \
    \        $string_grades[] = \"C-\";\n                break;\n            case\
    \ $grade >= 1.0:\n                $string_grades[] = \"D+\";\n               \
    \ break;\n            case $grade >= 0.7:\n                $string_grades[] =\
    \ \"D\";\n                break;\n            case $grade >= 0.0:\n          \
    \      $string_grades[] = \"D-\";\n                break;\n            case $grade\
    \ <= 0.0:\n                $string_grades[] = \"E\";\n                break;\n\
    \        }\n    }\n    return $string_grades;\n}\n$x = [4.0, 3, 1.7, 2, 3.5];\n\
    print_r(numerical_letter_grade($x));\nfunction candidate(...$args) {\n    return\
    \ numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4.0,\
    \ 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.2)) !== array(\"D+\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5)) !==\
    \ array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgmp051nx.php:78\n\
    Stack trace:\n#0 /tmp/tmpgmp051nx.php(86): test()\n#1 {main}\n  thrown in /tmp/tmpgmp051nx.php\
    \ on line 78\n"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif ($grade\
    \ >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade >=\
    \ 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade >=\
    \ 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade >=\
    \ 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >= 2.3)\
    \ {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >= 2.0)\
    \ {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >= 1.7)\
    \ {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3) {\n\
    \            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0) {\n\
    \            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7) {\n\
    \            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n \
    \           $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw7033o8j.php:63\n\
    Stack trace:\n#0 /tmp/tmpw7033o8j.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpw7033o8j.php\
    \ on line 63\n"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    // your code here\n}\n\n$grades = array(4.0, 3, 1.7, 2, 3.5);\n$grades\
    \ = numerical_letter_grade($grades);\nvar_dump($grades);\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "NULL\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzlrwy58r.php:36\n\
    Stack trace:\n#0 /tmp/tmpzlrwy58r.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpzlrwy58r.php\
    \ on line 36\n"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades_result = [];\n    for ($i = 0; $i < count($grades); $i++) {\n\
    \        if ($grades[$i] >= 4.0) {\n            $grades_result[$i] = \"A+\";\n\
    \        } elseif ($grades[$i] >= 3.7) {\n            $grades_result[$i] = \"\
    A\";\n        } elseif ($grades[$i] >= 3.3) {\n            $grades_result[$i]\
    \ = \"A-\";\n        } elseif ($grades[$i] >= 3.0) {\n            $grades_result[$i]\
    \ = \"B+\";\n        } elseif ($grades[$i] >= 2.7) {\n            $grades_result[$i]\
    \ = \"B\";\n        } elseif ($grades[$i] >= 2.3) {\n            $grades_result[$i]\
    \ = \"B-\";\n        } elseif ($grades[$i] >= 2.0) {\n            $grades_result[$i]\
    \ = \"C+\";\n        } elseif ($grades[$i] >= 1.7) {\n            $grades_result[$i]\
    \ = \"C\";\n        } elseif ($grades[$i] >= 1.3) {\n            $grades_result[$i]\
    \ = \"C-\";\n        } elseif ($grades[$i] >= 1.0) {\n            $grades_result[$i]\
    \ = \"D+\";\n        } elseif ($grades[$i] >= 0.7) {\n            $grades_result[$i]\
    \ = \"D\";\n        } elseif ($grades[$i] >= 0.0) {\n            $grades_result[$i]\
    \ = \"D-\";\n        } else {\n            $grades_result[$i] = \"E\";\n     \
    \   }\n    }\n    return $grades_result;\n}\n\nfunction candidate(...$args) {\n\
    \    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnv3rjsuq.php:63\n\
    Stack trace:\n#0 /tmp/tmpnv3rjsuq.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpnv3rjsuq.php\
    \ on line 63\n"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = [];\n    foreach ($grades as $grade) {\n        $letter_grade\
    \ = '';\n        if ($grade == 4.0) {\n            $letter_grade = 'A+';\n   \
    \     } elseif ($grade >= 3.7) {\n            $letter_grade = 'A';\n        }\
    \ elseif ($grade >= 3.3) {\n            $letter_grade = 'A-';\n        } elseif\
    \ ($grade >= 3.0) {\n            $letter_grade = 'B+';\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grade = 'B';\n        } elseif ($grade >= 2.3)\
    \ {\n            $letter_grade = 'B-';\n        } elseif ($grade >= 2.0) {\n \
    \           $letter_grade = 'C+';\n        } elseif ($grade >= 1.7) {\n      \
    \      $letter_grade = 'C';\n        } elseif ($grade >= 1.3) {\n            $letter_grade\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $letter_grade = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $letter_grade = 'D';\n      \
    \  } elseif ($grade >= 0.0) {\n            $letter_grade = 'D-';\n        } else\
    \ {\n            $letter_grade = 'E';\n        }\n        $letter_grades[] = $letter_grade;\n\
    \    }\n    return $letter_grades;\n}\necho '<h3>30. Numerical/Letter Grades</h3>';\n\
    echo '<h4>Input</h4>';\necho '<pre>';\n$grades = [4.0, 3, 1.7, 2, 3.5];\nprint_r($grades);\n\
    echo '</pre>';\n\necho '<h4>Output</h4>';\necho '<pre>';\nprint_r(numerical_letter_grade($grades));\n\
    echo '</pre>';\n\necho '<hr>';\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<h3>30. Numerical/Letter Grades</h3><h4>Input</h4><pre>Array\n(\n    [0]\
    \ => 4\n    [1] => 3\n    [2] => 1.7\n    [3] => 2\n    [4] => 3.5\n)\n</pre><h4>Output</h4><pre>Array\n\
    (\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n    [4] => A-\n\
    )\n</pre><hr>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpff96xbzm.php:78\n\
    Stack trace:\n#0 /tmp/tmpff96xbzm.php(86): test()\n#1 {main}\n  thrown in /tmp/tmpff96xbzm.php\
    \ on line 78\n"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n\t$numerical_grades = array();\n\tforeach ($grades as $grade) {\n\t\tif ($grade\
    \ >= 4.0) {\n\t\t\t$numerical_grades[] = \"A+\";\n\t\t} elseif ($grade >= 3.7)\
    \ {\n\t\t\t$numerical_grades[] = \"A\";\n\t\t} elseif ($grade >= 3.3) {\n\t\t\t\
    $numerical_grades[] = \"A-\";\n\t\t} elseif ($grade >= 3.0) {\n\t\t\t$numerical_grades[]\
    \ = \"B+\";\n\t\t} elseif ($grade >= 2.7) {\n\t\t\t$numerical_grades[] = \"B\"\
    ;\n\t\t} elseif ($grade >= 2.3) {\n\t\t\t$numerical_grades[] = \"B-\";\n\t\t}\
    \ elseif ($grade >= 2.0) {\n\t\t\t$numerical_grades[] = \"C+\";\n\t\t} elseif\
    \ ($grade >= 1.7) {\n\t\t\t$numerical_grades[] = \"C\";\n\t\t} elseif ($grade\
    \ >= 1.3) {\n\t\t\t$numerical_grades[] = \"C-\";\n\t\t} elseif ($grade >= 1.0)\
    \ {\n\t\t\t$numerical_grades[] = \"D+\";\n\t\t} elseif ($grade >= 0.7) {\n\t\t\
    \t$numerical_grades[] = \"D\";\n\t\t} elseif ($grade >= 0.0) {\n\t\t\t$numerical_grades[]\
    \ = \"D-\";\n\t\t} else {\n\t\t\t$numerical_grades[] = \"E\";\n\t\t}\n\t}\n\t\
    return $numerical_grades;\n}\n\n$grades = array(4.0, 3, 1.7, 2, 3.5);\nprint_r(numerical_letter_grade($grades));\n\
    \nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9440omxw.php:66\n\
    Stack trace:\n#0 /tmp/tmp9440omxw.php(74): test()\n#1 {main}\n  thrown in /tmp/tmp9440omxw.php\
    \ on line 66\n"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n  $result = [];\n  foreach ($grades as $grade) {\n    if ($grade > 4.0) {\n\
    \      $result[] = \"A+\";\n    } elseif ($grade > 3.7) {\n      $result[] = \"\
    A\";\n    } elseif ($grade > 3.3) {\n      $result[] = \"A-\";\n    } elseif ($grade\
    \ > 3.0) {\n      $result[] = \"B+\";\n    } elseif ($grade > 2.7) {\n      $result[]\
    \ = \"B\";\n    } elseif ($grade > 2.3) {\n      $result[] = \"B-\";\n    } elseif\
    \ ($grade > 2.0) {\n      $result[] = \"C+\";\n    } elseif ($grade > 1.7) {\n\
    \      $result[] = \"C\";\n    } elseif ($grade > 1.3) {\n      $result[] = \"\
    C-\";\n    } elseif ($grade > 1.0) {\n      $result[] = \"D+\";\n    } elseif\
    \ ($grade > 0.7) {\n      $result[] = \"D\";\n    } elseif ($grade > 0.0) {\n\
    \      $result[] = \"D-\";\n    } else {\n      $result[] = \"E\";\n    }\n  }\n\
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmlw4hbfr.php:63\n\
    Stack trace:\n#0 /tmp/tmpmlw4hbfr.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpmlw4hbfr.php\
    \ on line 63\n"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades_calculated = [];\n    foreach ($grades as $grade) {\n       \
    \ if ($grade >= 4.0) {\n            $grades_calculated[] = \"A+\";\n        }\
    \ elseif ($grade >= 3.7) {\n            $grades_calculated[] = \"A\";\n      \
    \  } elseif ($grade >= 3.3) {\n            $grades_calculated[] = \"A-\";\n  \
    \      } elseif ($grade >= 3.0) {\n            $grades_calculated[] = \"B+\";\n\
    \        } elseif ($grade >= 2.7) {\n            $grades_calculated[] = \"B\"\
    ;\n        } elseif ($grade >= 2.3) {\n            $grades_calculated[] = \"B-\"\
    ;\n        } elseif ($grade >= 2.0) {\n            $grades_calculated[] = \"C+\"\
    ;\n        } elseif ($grade >= 1.7) {\n            $grades_calculated[] = \"C\"\
    ;\n        } elseif ($grade >= 1.3) {\n            $grades_calculated[] = \"C-\"\
    ;\n        } elseif ($grade >= 1.0) {\n            $grades_calculated[] = \"D+\"\
    ;\n        } elseif ($grade >= 0.7) {\n            $grades_calculated[] = \"D\"\
    ;\n        } elseif ($grade >= 0.0) {\n            $grades_calculated[] = \"D-\"\
    ;\n        } else {\n            $grades_calculated[] = \"E\";\n        }\n  \
    \  }\n    return $grades_calculated;\n}\n\necho \"<h2>Problem 1: Numerical to\
    \ Letter Grade</h2>\";\n\n$grades = [4.0, 3, 1.7, 2, 3.5];\n\necho \"<h3>GPA array:\
    \ \" . implode(\", \", $grades) . \"</h3>\";\necho \"<h3>Letter Grade array: \"\
    \ . implode(\", \", numerical_letter_grade($grades)) . \"</h3>\";\n\nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<h2>Problem 1: Numerical to Letter Grade</h2><h3>GPA array: 4, 3, 1.7,\
    \ 2, 3.5</h3><h3>Letter Grade array: A+, B+, C, C+, A-</h3>\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp329_nbir.php:70\nStack trace:\n#0 /tmp/tmp329_nbir.php(78):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp329_nbir.php on line 70\n"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n$grades = array(4.0,\
    \ 3, 1.7, 2, 3.5);\n$output = numerical_letter_grade($grades);\necho \"<p>numerical_letter_grade([\"\
    \ . implode(\", \", $grades) . \"])</p>\";\necho \"<p>[\" . implode(\", \", $output)\
    \ . \"]</p>\";\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<p>numerical_letter_grade([4, 3, 1.7, 2, 3.5])</p><p>[A+, B+, C, C+, A-]</p>\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpk849ehrh.php:66\nStack\
    \ trace:\n#0 /tmp/tmpk849ehrh.php(74): test()\n#1 {main}\n  thrown in /tmp/tmpk849ehrh.php\
    \ on line 66\n"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n  $new_grades = [];\n  foreach ($grades as $grade) {\n    if ($grade > 4.0)\
    \ {\n      $new_grades[] = \"A+\";\n    } elseif ($grade > 3.7) {\n      $new_grades[]\
    \ = \"A\";\n    } elseif ($grade > 3.3) {\n      $new_grades[] = \"A-\";\n   \
    \ } elseif ($grade > 3.0) {\n      $new_grades[] = \"B+\";\n    } elseif ($grade\
    \ > 2.7) {\n      $new_grades[] = \"B\";\n    } elseif ($grade > 2.3) {\n    \
    \  $new_grades[] = \"B-\";\n    } elseif ($grade > 2.0) {\n      $new_grades[]\
    \ = \"C+\";\n    } elseif ($grade > 1.7) {\n      $new_grades[] = \"C\";\n   \
    \ } elseif ($grade > 1.3) {\n      $new_grades[] = \"C-\";\n    } elseif ($grade\
    \ > 1.0) {\n      $new_grades[] = \"D+\";\n    } elseif ($grade > 0.7) {\n   \
    \   $new_grades[] = \"D\";\n    } elseif ($grade > 0.0) {\n      $new_grades[]\
    \ = \"D-\";\n    } else {\n      $new_grades[] = \"E\";\n    }\n  }\n  return\
    \ $new_grades;\n}\n$grades = [4.0, 3, 1.7, 2, 3.5];\necho '<pre>';\nprint_r(numerical_letter_grade($grades));\n\
    echo '</pre>';\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => A\n    [1] => B\n    [2] => C-\n    [3] => C\n\
    \    [4] => A-\n)\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9otlpf5g.php:66\n\
    Stack trace:\n#0 /tmp/tmp9otlpf5g.php(74): test()\n#1 {main}\n  thrown in /tmp/tmp9otlpf5g.php\
    \ on line 66\n"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n  $letter_grades = array();\n  foreach ($grades as $grade) {\n    if ($grade\
    \ > 4.0) {\n      $letter_grades[] = \"A+\";\n    } elseif ($grade > 3.7) {\n\
    \      $letter_grades[] = \"A\";\n    } elseif ($grade > 3.3) {\n      $letter_grades[]\
    \ = \"A-\";\n    } elseif ($grade > 3.0) {\n      $letter_grades[] = \"B+\";\n\
    \    } elseif ($grade > 2.7) {\n      $letter_grades[] = \"B\";\n    } elseif\
    \ ($grade > 2.3) {\n      $letter_grades[] = \"B-\";\n    } elseif ($grade > 2.0)\
    \ {\n      $letter_grades[] = \"C+\";\n    } elseif ($grade > 1.7) {\n      $letter_grades[]\
    \ = \"C\";\n    } elseif ($grade > 1.3) {\n      $letter_grades[] = \"C-\";\n\
    \    } elseif ($grade > 1.0) {\n      $letter_grades[] = \"D+\";\n    } elseif\
    \ ($grade > 0.7) {\n      $letter_grades[] = \"D\";\n    } elseif ($grade > 0.0)\
    \ {\n      $letter_grades[] = \"D-\";\n    } else {\n      $letter_grades[] =\
    \ \"E\";\n    }\n  }\n  return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpie1gtr79.php:63\n\
    Stack trace:\n#0 /tmp/tmpie1gtr79.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpie1gtr79.php\
    \ on line 63\n"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades_to_letter = array();\n    foreach ($grades as $grade) {\n   \
    \     if ($grade >= 4.0) {\n            $grades_to_letter[] = \"A+\";\n      \
    \  } elseif ($grade >= 3.7) {\n            $grades_to_letter[] = \"A\";\n    \
    \    } elseif ($grade >= 3.3) {\n            $grades_to_letter[] = \"A-\";\n \
    \       } elseif ($grade >= 3.0) {\n            $grades_to_letter[] = \"B+\";\n\
    \        } elseif ($grade >= 2.7) {\n            $grades_to_letter[] = \"B\";\n\
    \        } elseif ($grade >= 2.3) {\n            $grades_to_letter[] = \"B-\"\
    ;\n        } elseif ($grade >= 2.0) {\n            $grades_to_letter[] = \"C+\"\
    ;\n        } elseif ($grade >= 1.7) {\n            $grades_to_letter[] = \"C\"\
    ;\n        } elseif ($grade >= 1.3) {\n            $grades_to_letter[] = \"C-\"\
    ;\n        } elseif ($grade >= 1.0) {\n            $grades_to_letter[] = \"D+\"\
    ;\n        } elseif ($grade >= 0.7) {\n            $grades_to_letter[] = \"D\"\
    ;\n        } elseif ($grade >= 0.0) {\n            $grades_to_letter[] = \"D-\"\
    ;\n        } else {\n            $grades_to_letter[] = \"E\";\n        }\n   \
    \ }\n    return $grades_to_letter;\n}\n\n$grades = array(4.0, 3, 1.7, 2, 3.5);\n\
    $grades_to_letter = numerical_letter_grade($grades);\nprint_r($grades_to_letter);\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt68uh9rh.php:66\n\
    Stack trace:\n#0 /tmp/tmpt68uh9rh.php(74): test()\n#1 {main}\n  thrown in /tmp/tmpt68uh9rh.php\
    \ on line 66\n"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array(\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\"\
    , \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\");\n    return $grades;\n}\nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppgmew5qv.php:33\n\
    Stack trace:\n#0 /tmp/tmppgmew5qv.php(41): test()\n#1 {main}\n  thrown in /tmp/tmppgmew5qv.php\
    \ on line 33\n"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    for ($i = 0; $i < count($grades); $i++) {\n        if ($grades[$i] >=\
    \ 4.0) {\n            $letter_grades[$i] = \"A+\";\n        } elseif ($grades[$i]\
    \ >= 3.7) {\n            $letter_grades[$i] = \"A\";\n        } elseif ($grades[$i]\
    \ >= 3.3) {\n            $letter_grades[$i] = \"A-\";\n        } elseif ($grades[$i]\
    \ >= 3.0) {\n            $letter_grades[$i] = \"B+\";\n        } elseif ($grades[$i]\
    \ >= 2.7) {\n            $letter_grades[$i] = \"B\";\n        } elseif ($grades[$i]\
    \ >= 2.3) {\n            $letter_grades[$i] = \"B-\";\n        } elseif ($grades[$i]\
    \ >= 2.0) {\n            $letter_grades[$i] = \"C+\";\n        } elseif ($grades[$i]\
    \ >= 1.7) {\n            $letter_grades[$i] = \"C\";\n        } elseif ($grades[$i]\
    \ >= 1.3) {\n            $letter_grades[$i] = \"C-\";\n        } elseif ($grades[$i]\
    \ >= 1.0) {\n            $letter_grades[$i] = \"D+\";\n        } elseif ($grades[$i]\
    \ >= 0.7) {\n            $letter_grades[$i] = \"D\";\n        } elseif ($grades[$i]\
    \ >= 0.0) {\n            $letter_grades[$i] = \"D-\";\n        } else {\n    \
    \        $letter_grades[$i] = \"E\";\n        }\n    }\n    return $letter_grades;\n\
    }\n$grades = array(4.0, 3, 1.7, 2, 3.5);\n$letter_grades = numerical_letter_grade($grades);\n\
    print_r($letter_grades);\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgqt9ipg1.php:64\n\
    Stack trace:\n#0 /tmp/tmpgqt9ipg1.php(72): test()\n#1 {main}\n  thrown in /tmp/tmpgqt9ipg1.php\
    \ on line 64\n"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $gpa_grade = array(\n            \"4.0\" => \"A+\",\n            \"3.7\"\
    \ => \"A\",\n            \"3.3\" => \"A-\",\n            \"3.0\" => \"B+\",\n\
    \            \"2.7\" => \"B\",\n            \"2.3\" => \"B-\",\n            \"\
    2.0\" => \"C+\",\n            \"1.7\" => \"C\",\n            \"1.3\" => \"C-\"\
    ,\n            \"1.0\" => \"D+\",\n            \"0.7\" => \"D\",\n           \
    \ \"0.0\" => \"D-\",\n        );\n    $result = array();\n    foreach ($grades\
    \ as $grade) {\n        if (array_key_exists($grade, $gpa_grade)) {\n        \
    \    $result[] = $gpa_grade[$grade];\n        } else {\n            if ($grade\
    \ < 0.7) {\n                $result[] = \"E\";\n            } else {\n       \
    \         foreach ($gpa_grade as $gpa => $letter) {\n                    if ($grade\
    \ > $gpa) {\n                        $result[] = $letter;\n                  \
    \      break;\n                    }\n                }\n            }\n     \
    \   }\n    }\n    return $result;\n}\n$result = numerical_letter_grade(array(4.0,\
    \ 3, 1.7, 2, 3.5));\necho implode(\", \", $result);\necho \"<br>\";\necho \"<br>\"\
    ;\necho \"<br>\";\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nDeprecated: Implicit conversion from float 1.7 to int loses precision\
    \ in /tmp/tmpzmphd_6e.php on line 41\n\nDeprecated: Implicit conversion from float\
    \ 3.5 to int loses precision in /tmp/tmpzmphd_6e.php on line 41\nA, B, C-, C,\
    \ A-<br><br><br>\nDeprecated: Implicit conversion from float 1.7 to int loses\
    \ precision in /tmp/tmpzmphd_6e.php on line 41\n\nDeprecated: Implicit conversion\
    \ from float 3.5 to int loses precision in /tmp/tmpzmphd_6e.php on line 41\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpzmphd_6e.php:68\nStack\
    \ trace:\n#0 /tmp/tmpzmphd_6e.php(76): test()\n#1 {main}\n  thrown in /tmp/tmpzmphd_6e.php\
    \ on line 68\n"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $result = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ > 4.0) {\n            $result[] = \"A+\";\n        } elseif ($grade > 3.7) {\n\
    \            $result[] = \"A\";\n        } elseif ($grade > 3.3) {\n         \
    \   $result[] = \"A-\";\n        } elseif ($grade > 3.0) {\n            $result[]\
    \ = \"B+\";\n        } elseif ($grade > 2.7) {\n            $result[] = \"B\"\
    ;\n        } elseif ($grade > 2.3) {\n            $result[] = \"B-\";\n      \
    \  } elseif ($grade > 2.0) {\n            $result[] = \"C+\";\n        } elseif\
    \ ($grade > 1.7) {\n            $result[] = \"C\";\n        } elseif ($grade >\
    \ 1.3) {\n            $result[] = \"C-\";\n        } elseif ($grade > 1.0) {\n\
    \            $result[] = \"D+\";\n        } elseif ($grade > 0.7) {\n        \
    \    $result[] = \"D\";\n        } elseif ($grade > 0.0) {\n            $result[]\
    \ = \"D-\";\n        } else {\n            $result[] = \"E\";\n        }\n   \
    \ }\n    return $result;\n}\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz1i7_pk5.php:62\n\
    Stack trace:\n#0 /tmp/tmpz1i7_pk5.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpz1i7_pk5.php\
    \ on line 62\n"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n       \
    \     echo \"A+\" . PHP_EOL;\n        } elseif ($grade >= 3.7) {\n           \
    \ echo \"A\" . PHP_EOL;\n        } elseif ($grade >= 3.3) {\n            echo\
    \ \"A-\" . PHP_EOL;\n        } elseif ($grade >= 3.0) {\n            echo \"B+\"\
    \ . PHP_EOL;\n        } elseif ($grade >= 2.7) {\n            echo \"B\" . PHP_EOL;\n\
    \        } elseif ($grade >= 2.3) {\n            echo \"B-\" . PHP_EOL;\n    \
    \    } elseif ($grade >= 2.0) {\n            echo \"C+\" . PHP_EOL;\n        }\
    \ elseif ($grade >= 1.7) {\n            echo \"C\" . PHP_EOL;\n        } elseif\
    \ ($grade >= 1.3) {\n            echo \"C-\" . PHP_EOL;\n        } elseif ($grade\
    \ >= 1.0) {\n            echo \"D+\" . PHP_EOL;\n        } elseif ($grade >= 0.7)\
    \ {\n            echo \"D\" . PHP_EOL;\n        } elseif ($grade >= 0.0) {\n \
    \           echo \"D-\" . PHP_EOL;\n        } else {\n            echo \"E\" .\
    \ PHP_EOL;\n        }\n    }\n}\nnumerical_letter_grade(array(4.0, 3, 1.7, 2,\
    \ 3.5));\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "A+\nB+\nC\nC+\nA-\nA+\nB+\nC\nC+\nA-\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpsotlpmcu.php:61\nStack trace:\n#0 /tmp/tmpsotlpmcu.php(69):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpsotlpmcu.php on line 61\n"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif ($grade\
    \ >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade >=\
    \ 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade >=\
    \ 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade >=\
    \ 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >= 2.3)\
    \ {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >= 2.0)\
    \ {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >= 1.7)\
    \ {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3) {\n\
    \            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0) {\n\
    \            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7) {\n\
    \            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n \
    \           $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprsy4ry3k.php:62\n\
    Stack trace:\n#0 /tmp/tmprsy4ry3k.php(70): test()\n#1 {main}\n  thrown in /tmp/tmprsy4ry3k.php\
    \ on line 62\n"
  timestamp: 1660005483
- exit_code: 0
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade == 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade > 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ > 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade >\
    \ 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade > 2.7)\
    \ {\n            $letter_grades[] = \"B\";\n        } elseif ($grade > 2.3) {\n\
    \            $letter_grades[] = \"B-\";\n        } elseif ($grade > 2.0) {\n \
    \           $letter_grades[] = \"C+\";\n        } elseif ($grade > 1.7) {\n  \
    \          $letter_grades[] = \"C\";\n        } elseif ($grade > 1.3) {\n    \
    \        $letter_grades[] = \"C-\";\n        } elseif ($grade > 1.0) {\n     \
    \       $letter_grades[] = \"D+\";\n        } elseif ($grade > 0.7) {\n      \
    \      $letter_grades[] = \"D\";\n        } elseif ($grade > 0.0) {\n        \
    \    $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\n$grades = array(4.0,\
    \ 3, 1.7, 2, 3.5);\nprint_r(numerical_letter_grade($grades));\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => A+\n    [1] => B\n    [2] => C-\n    [3] => C\n  \
    \  [4] => A-\n)\n"
  timestamp: 1660005482
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n  $new_grades = [];\n  foreach ($grades as $grade) {\n    if ($grade >= 4.0)\
    \ {\n      $new_grades[] = \"A+\";\n    } elseif ($grade >= 3.7) {\n      $new_grades[]\
    \ = \"A\";\n    } elseif ($grade >= 3.3) {\n      $new_grades[] = \"A-\";\n  \
    \  } elseif ($grade >= 3.0) {\n      $new_grades[] = \"B+\";\n    } elseif ($grade\
    \ >= 2.7) {\n      $new_grades[] = \"B\";\n    } elseif ($grade >= 2.3) {\n  \
    \    $new_grades[] = \"B-\";\n    } elseif ($grade >= 2.0) {\n      $new_grades[]\
    \ = \"C+\";\n    } elseif ($grade >= 1.7) {\n      $new_grades[] = \"C\";\n  \
    \  } elseif ($grade >= 1.3) {\n      $new_grades[] = \"C-\";\n    } elseif ($grade\
    \ >= 1.0) {\n      $new_grades[] = \"D+\";\n    } elseif ($grade >= 0.7) {\n \
    \     $new_grades[] = \"D\";\n    } elseif ($grade >= 0.0) {\n      $new_grades[]\
    \ = \"D-\";\n    } else {\n      $new_grades[] = \"E\";\n    }\n  }\n  return\
    \ $new_grades;\n}\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvua7fan7.php:62\n\
    Stack trace:\n#0 /tmp/tmpvua7fan7.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpvua7fan7.php\
    \ on line 62\n"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $result = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ > 4.0) {\n            $letter_grade = \"A+\";\n        } elseif ($grade > 3.7)\
    \ {\n            $letter_grade = \"A\";\n        } elseif ($grade > 3.3) {\n \
    \           $letter_grade = \"A-\";\n        } elseif ($grade > 3.0) {\n     \
    \       $letter_grade = \"B+\";\n        } elseif ($grade > 2.7) {\n         \
    \   $letter_grade = \"B\";\n        } elseif ($grade > 2.3) {\n            $letter_grade\
    \ = \"B-\";\n        } elseif ($grade > 2.0) {\n            $letter_grade = \"\
    C+\";\n        } elseif ($grade > 1.7) {\n            $letter_grade = \"C\";\n\
    \        } elseif ($grade > 1.3) {\n            $letter_grade = \"C-\";\n    \
    \    } elseif ($grade > 1.0) {\n            $letter_grade = \"D+\";\n        }\
    \ elseif ($grade > 0.7) {\n            $letter_grade = \"D\";\n        } elseif\
    \ ($grade > 0.0) {\n            $letter_grade = \"D-\";\n        } else {\n  \
    \          $letter_grade = \"E\";\n        }\n        $result[] = $letter_grade;\n\
    \    }\n    return $result;\n}\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnnq4kvja.php:63\n\
    Stack trace:\n#0 /tmp/tmpnnq4kvja.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpnnq4kvja.php\
    \ on line 63\n"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    for ($i = 0; $i < count($grades); $i++)\
    \ {\n        if ($grades[$i] < 0.7) {\n            $letter_grades[$i] = \"D-\"\
    ;\n        } elseif ($grades[$i] < 1.0) {\n            $letter_grades[$i] = \"\
    D\";\n        } elseif ($grades[$i] < 1.3) {\n            $letter_grades[$i] =\
    \ \"D+\";\n        } elseif ($grades[$i] < 1.7) {\n            $letter_grades[$i]\
    \ = \"C-\";\n        } elseif ($grades[$i] < 2.0) {\n            $letter_grades[$i]\
    \ = \"C\";\n        } elseif ($grades[$i] < 2.3) {\n            $letter_grades[$i]\
    \ = \"C+\";\n        } elseif ($grades[$i] < 2.7) {\n            $letter_grades[$i]\
    \ = \"B-\";\n        } elseif ($grades[$i] < 3.0) {\n            $letter_grades[$i]\
    \ = \"B\";\n        } elseif ($grades[$i] < 3.3) {\n            $letter_grades[$i]\
    \ = \"B+\";\n        } elseif ($grades[$i] < 3.7) {\n            $letter_grades[$i]\
    \ = \"A-\";\n        } elseif ($grades[$i] <= 4.0) {\n            $letter_grades[$i]\
    \ = \"A\";\n        } else {\n            $letter_grades[$i] = \"E\";\n      \
    \  }\n    }\n    return $letter_grades;\n}\nfunction candidate(...$args) {\n \
    \   return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfmfdimp1.php:60\n\
    Stack trace:\n#0 /tmp/tmpfmfdimp1.php(68): test()\n#1 {main}\n  thrown in /tmp/tmpfmfdimp1.php\
    \ on line 60\n"
  timestamp: 1660005483
- exit_code: 0
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    foreach ($grades as $grade) {\n        if ($grade == 4.0) {\n       \
    \     $letter_grade[] = \"A+\";\n        } elseif ($grade > 3.7) {\n         \
    \   $letter_grade[] = \"A\";\n        } elseif ($grade > 3.3) {\n            $letter_grade[]\
    \ = \"A-\";\n        } elseif ($grade > 3.0) {\n            $letter_grade[] =\
    \ \"B+\";\n        } elseif ($grade > 2.7) {\n            $letter_grade[] = \"\
    B\";\n        } elseif ($grade > 2.3) {\n            $letter_grade[] = \"B-\"\
    ;\n        } elseif ($grade > 2.0) {\n            $letter_grade[] = \"C+\";\n\
    \        } elseif ($grade > 1.7) {\n            $letter_grade[] = \"C\";\n   \
    \     } elseif ($grade > 1.3) {\n            $letter_grade[] = \"C-\";\n     \
    \   } elseif ($grade > 1.0) {\n            $letter_grade[] = \"D+\";\n       \
    \ } elseif ($grade > 0.7) {\n            $letter_grade[] = \"D\";\n        } elseif\
    \ ($grade > 0.0) {\n            $letter_grade[] = \"D-\";\n        } else {\n\
    \            $letter_grade[] = \"E\";\n        }\n    }\n    return $letter_grade;\n\
    }\n\nprint_r(numerical_letter_grade(array(4.0, 3, 1.7, 2, 3.5)));\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => A+\n    [1] => B\n    [2] => C-\n    [3] => C\n  \
    \  [4] => A-\n)\n"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n\t$newGrades = array();\n\tforeach ($grades as $gpa) {\n\t\tif($gpa >= 4.0)\
    \ {\n\t\t\t$newGrades[] = \"A+\";\n\t\t} elseif($gpa >= 3.7) {\n\t\t\t$newGrades[]\
    \ = \"A\";\n\t\t} elseif($gpa >= 3.3) {\n\t\t\t$newGrades[] = \"A-\";\n\t\t} elseif($gpa\
    \ >= 3.0) {\n\t\t\t$newGrades[] = \"B+\";\n\t\t} elseif($gpa >= 2.7) {\n\t\t\t\
    $newGrades[] = \"B\";\n\t\t} elseif($gpa >= 2.3) {\n\t\t\t$newGrades[] = \"B-\"\
    ;\n\t\t} elseif($gpa >= 2.0) {\n\t\t\t$newGrades[] = \"C+\";\n\t\t} elseif($gpa\
    \ >= 1.7) {\n\t\t\t$newGrades[] = \"C\";\n\t\t} elseif($gpa >= 1.3) {\n\t\t\t\
    $newGrades[] = \"C-\";\n\t\t} elseif($gpa >= 1.0) {\n\t\t\t$newGrades[] = \"D+\"\
    ;\n\t\t} elseif($gpa >= 0.7) {\n\t\t\t$newGrades[] = \"D\";\n\t\t} elseif($gpa\
    \ >= 0.0) {\n\t\t\t$newGrades[] = \"D-\";\n\t\t} else {\n\t\t\t$newGrades[] =\
    \ \"E\";\n\t\t}\n\t}\n\treturn $newGrades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdtrwuhpy.php:63\n\
    Stack trace:\n#0 /tmp/tmpdtrwuhpy.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpdtrwuhpy.php\
    \ on line 63\n"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n  // Your code here\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzcnru_0_.php:33\n\
    Stack trace:\n#0 /tmp/tmpzcnru_0_.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpzcnru_0_.php\
    \ on line 33\n"
  timestamp: 1660005482
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n\t$letter = '';\n\tswitch ($grades) {\n\t\tcase $grades >= 4.0 :\n\t\t\t\
    $letter = 'A+';\n\t\t\tbreak;\n\t\tcase $grades > 3.7 :\n\t\t\t$letter = 'A';\n\
    \t\t\tbreak;\n\t\tcase $grades > 3.3 :\n\t\t\t$letter = 'A-';\n\t\t\tbreak;\n\t\
    \tcase $grades > 3.0 :\n\t\t\t$letter = 'B+';\n\t\t\tbreak;\n\t\tcase $grades\
    \ > 2.7 :\n\t\t\t$letter = 'B';\n\t\t\tbreak;\n\t\tcase $grades > 2.3 :\n\t\t\t\
    $letter = 'B-';\n\t\t\tbreak;\n\t\tcase $grades > 2.0 :\n\t\t\t$letter = 'C+';\n\
    \t\t\tbreak;\n\t\tcase $grades > 1.7 :\n\t\t\t$letter = 'C';\n\t\t\tbreak;\n\t\
    \tcase $grades > 1.3 :\n\t\t\t$letter = 'C-';\n\t\t\tbreak;\n\t\tcase $grades\
    \ > 1.0 :\n\t\t\t$letter = 'D+';\n\t\t\tbreak;\n\t\tcase $grades > 0.7 :\n\t\t\
    \t$letter = 'D';\n\t\t\tbreak;\n\t\tcase $grades > 0.0 :\n\t\t\t$letter = 'D-';\n\
    \t\t\tbreak;\n\t\tcase $grades == 0.0 :\n\t\t\t$letter = 'E';\n\t\t\tbreak;\n\t\
    }\n\treturn $letter;\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpolh9fyqd.php:75\n\
    Stack trace:\n#0 /tmp/tmpolh9fyqd.php(83): test()\n#1 {main}\n  thrown in /tmp/tmpolh9fyqd.php\
    \ on line 75\n"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $result = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ >= 4.0) {\n            $result[] = \"A+\";\n        } elseif ($grade >= 3.7)\
    \ {\n            $result[] = \"A\";\n        } elseif ($grade >= 3.3) {\n    \
    \        $result[] = \"A-\";\n        } elseif ($grade >= 3.0) {\n           \
    \ $result[] = \"B+\";\n        } elseif ($grade >= 2.7) {\n            $result[]\
    \ = \"B\";\n        } elseif ($grade >= 2.3) {\n            $result[] = \"B-\"\
    ;\n        } elseif ($grade >= 2.0) {\n            $result[] = \"C+\";\n     \
    \   } elseif ($grade >= 1.7) {\n            $result[] = \"C\";\n        } elseif\
    \ ($grade >= 1.3) {\n            $result[] = \"C-\";\n        } elseif ($grade\
    \ >= 1.0) {\n            $result[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $result[] = \"D\";\n        } elseif ($grade >= 0.0) {\n    \
    \        $result[] = \"D-\";\n        } else {\n            $result[] = \"E\"\
    ;\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args) {\n\
    \    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8uh1ufld.php:62\n\
    Stack trace:\n#0 /tmp/tmp8uh1ufld.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp8uh1ufld.php\
    \ on line 62\n"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n\t$grades_array = array();\n\tforeach ($grades as $grade) {\n\t\tif ($grade\
    \ > 4.0) {\n\t\t\t$grades_array[] = \"A+\";\n\t\t} elseif ($grade >= 3.7) {\n\t\
    \t\t$grades_array[] = \"A\";\n\t\t} elseif ($grade >= 3.3) {\n\t\t\t$grades_array[]\
    \ = \"A-\";\n\t\t} elseif ($grade >= 3.0) {\n\t\t\t$grades_array[] = \"B+\";\n\
    \t\t} elseif ($grade >= 2.7) {\n\t\t\t$grades_array[] = \"B\";\n\t\t} elseif ($grade\
    \ >= 2.3) {\n\t\t\t$grades_array[] = \"B-\";\n\t\t} elseif ($grade >= 2.0) {\n\
    \t\t\t$grades_array[] = \"C+\";\n\t\t} elseif ($grade >= 1.7) {\n\t\t\t$grades_array[]\
    \ = \"C\";\n\t\t} elseif ($grade >= 1.3) {\n\t\t\t$grades_array[] = \"C-\";\n\t\
    \t} elseif ($grade >= 1.0) {\n\t\t\t$grades_array[] = \"D+\";\n\t\t} elseif ($grade\
    \ >= 0.7) {\n\t\t\t$grades_array[] = \"D\";\n\t\t} elseif ($grade >= 0.0) {\n\t\
    \t\t$grades_array[] = \"D-\";\n\t\t} else {\n\t\t\t$grades_array[] = \"E\";\n\t\
    \t}\n\t}\n\treturn $grades_array;\n}\nfunction candidate(...$args) {\n    return\
    \ numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4.0,\
    \ 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.2)) !== array(\"D+\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5)) !==\
    \ array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi3pllq_f.php:62\n\
    Stack trace:\n#0 /tmp/tmpi3pllq_f.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpi3pllq_f.php\
    \ on line 62\n"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $results = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ >= 4.0) {\n            $results[] = \"A+\";\n        } elseif ($grade >= 3.7)\
    \ {\n            $results[] = \"A\";\n        } elseif ($grade >= 3.3) {\n   \
    \         $results[] = \"A-\";\n        } elseif ($grade >= 3.0) {\n         \
    \   $results[] = \"B+\";\n        } elseif ($grade >= 2.7) {\n            $results[]\
    \ = \"B\";\n        } elseif ($grade >= 2.3) {\n            $results[] = \"B-\"\
    ;\n        } elseif ($grade >= 2.0) {\n            $results[] = \"C+\";\n    \
    \    } elseif ($grade >= 1.7) {\n            $results[] = \"C\";\n        } elseif\
    \ ($grade >= 1.3) {\n            $results[] = \"C-\";\n        } elseif ($grade\
    \ >= 1.0) {\n            $results[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $results[] = \"D\";\n        } elseif ($grade > 0.0) {\n    \
    \        $results[] = \"D-\";\n        } else {\n            $results[] = \"E\"\
    ;\n        }\n    }\n    return $results;\n}\n$test_grades = [4.0, 3, 1.7, 2,\
    \ 3.5];\n$graded_test = numerical_letter_grade($test_grades);\necho implode(\"\
    , \", $graded_test);\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "A+, B+, C, C+, A-\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpklwg75ko.php:65\n\
    Stack trace:\n#0 /tmp/tmpklwg75ko.php(73): test()\n#1 {main}\n  thrown in /tmp/tmpklwg75ko.php\
    \ on line 65\n"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $output = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ >= 4.0) {\n            $output[] = \"A+\";\n        } elseif ($grade >= 3.7)\
    \ {\n            $output[] = \"A\";\n        } elseif ($grade >= 3.3) {\n    \
    \        $output[] = \"A-\";\n        } elseif ($grade >= 3.0) {\n           \
    \ $output[] = \"B+\";\n        } elseif ($grade >= 2.7) {\n            $output[]\
    \ = \"B\";\n        } elseif ($grade >= 2.3) {\n            $output[] = \"B-\"\
    ;\n        } elseif ($grade >= 2.0) {\n            $output[] = \"C+\";\n     \
    \   } elseif ($grade >= 1.7) {\n            $output[] = \"C\";\n        } elseif\
    \ ($grade >= 1.3) {\n            $output[] = \"C-\";\n        } elseif ($grade\
    \ >= 1.0) {\n            $output[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $output[] = \"D\";\n        } elseif ($grade >= 0.0) {\n    \
    \        $output[] = \"D-\";\n        } else {\n            $output[] = \"E\"\
    ;\n        }\n    }\n    return $output;\n}\necho var_dump(numerical_letter_grade([4.0,\
    \ 3, 1.7, 2, 3.5]));\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(5) {\n  [0]=>\n  string(2) \"A+\"\n  [1]=>\n  string(2) \"B+\"\n\
    \  [2]=>\n  string(1) \"C\"\n  [3]=>\n  string(2) \"C+\"\n  [4]=>\n  string(2)\
    \ \"A-\"\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuzul4zj3.php:63\n\
    Stack trace:\n#0 /tmp/tmpuzul4zj3.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuzul4zj3.php\
    \ on line 63\n"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grade_letter = array(0 => \"F\");\n    if ($grades >= 3.7) {\n     \
    \   $grade_letter[] = \"A\";\n    } elseif ($grades >= 3.3) {\n        $grade_letter[]\
    \ = \"A-\";\n    } elseif ($grades >= 3.0) {\n        $grade_letter[] = \"B+\"\
    ;\n    } elseif ($grades >= 2.7) {\n        $grade_letter[] = \"B\";\n    } elseif\
    \ ($grades >= 2.3) {\n        $grade_letter[] = \"B-\";\n    } elseif ($grades\
    \ >= 2.0) {\n        $grade_letter[] = \"C+\";\n    } elseif ($grades >= 1.7)\
    \ {\n        $grade_letter[] = \"C\";\n    } elseif ($grades >= 1.3) {\n     \
    \   $grade_letter[] = \"C-\";\n    } elseif ($grades >= 1.0) {\n        $grade_letter[]\
    \ = \"D+\";\n    } elseif ($grades >= 0.7) {\n        $grade_letter[] = \"D\"\
    ;\n    } elseif ($grades >= 0.0) {\n        $grade_letter[] = \"D-\";\n    }\n\
    \    return $grade_letter;\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpia_gfvfd.php:57\n\
    Stack trace:\n#0 /tmp/tmpia_gfvfd.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpia_gfvfd.php\
    \ on line 57\n"
  timestamp: 1660005483
- exit_code: 0
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letterGrades = [];\n    foreach ($grades as $gpa) {\n        if ($gpa\
    \ == 4.0) {\n            $letterGrades[] = \"A+\";\n        } elseif ($gpa > 3.7)\
    \ {\n            $letterGrades[] = \"A\";\n        } elseif ($gpa > 3.3) {\n \
    \           $letterGrades[] = \"A-\";\n        } elseif ($gpa > 3.0) {\n     \
    \       $letterGrades[] = \"B+\";\n        } elseif ($gpa > 2.7) {\n         \
    \   $letterGrades[] = \"B\";\n        } elseif ($gpa > 2.3) {\n            $letterGrades[]\
    \ = \"B-\";\n        } elseif ($gpa > 2.0) {\n            $letterGrades[] = \"\
    C+\";\n        } elseif ($gpa > 1.7) {\n            $letterGrades[] = \"C\";\n\
    \        } elseif ($gpa > 1.3) {\n            $letterGrades[] = \"C-\";\n    \
    \    } elseif ($gpa > 1.0) {\n            $letterGrades[] = \"D+\";\n        }\
    \ elseif ($gpa > 0.7) {\n            $letterGrades[] = \"D\";\n        } elseif\
    \ ($gpa > 0.0) {\n            $letterGrades[] = \"D-\";\n        } else {\n  \
    \          $letterGrades[] = \"E\";\n        }\n    }\n    return $letterGrades;\n\
    }\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n  $grades_key_value = array(\n    4.0 => \"A+\",\n    3.7 => \"A\",\n   \
    \ 3.3 => \"A-\",\n    3.0 => \"B+\",\n    2.7 => \"B\",\n    2.3 => \"B-\",\n\
    \    2.0 => \"C+\",\n    1.7 => \"C\",\n    1.3 => \"C-\",\n    1.0 => \"D+\"\
    ,\n    0.7 => \"D\",\n    0.0 => \"D-\",\n    -0.1 => \"E\"\n  );\n  $letters\
    \ = array();\n  foreach ($grades as $grade) {\n    foreach ($grades_key_value\
    \ as $key => $value) {\n      if ($grade >= $key) {\n        $letters[] = $value;\n\
    \        break;\n      }\n    }\n  }\n  return $letters;\n}\necho \"<pre>\";\n\
    print_r(numerical_letter_grade(array(4.0, 3, 1.7, 2, 3.5)));\necho \"</pre>\"\
    ;\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>\nDeprecated: Implicit conversion from float 3.7 to int loses precision\
    \ in /tmp/tmp8m1gir5c.php on line 27\n\nDeprecated: Implicit conversion from float\
    \ 3.3 to int loses precision in /tmp/tmp8m1gir5c.php on line 28\n\nDeprecated:\
    \ Implicit conversion from float 2.7 to int loses precision in /tmp/tmp8m1gir5c.php\
    \ on line 30\n\nDeprecated: Implicit conversion from float 2.3 to int loses precision\
    \ in /tmp/tmp8m1gir5c.php on line 31\n\nDeprecated: Implicit conversion from float\
    \ 1.7 to int loses precision in /tmp/tmp8m1gir5c.php on line 33\n\nDeprecated:\
    \ Implicit conversion from float 1.3 to int loses precision in /tmp/tmp8m1gir5c.php\
    \ on line 34\n\nDeprecated: Implicit conversion from float 0.7 to int loses precision\
    \ in /tmp/tmp8m1gir5c.php on line 36\n\nDeprecated: Implicit conversion from float\
    \ -0.1 to int loses precision in /tmp/tmp8m1gir5c.php on line 38\nArray\n(\n \
    \   [0] => A+\n    [1] => B+\n    [2] => D+\n    [3] => C+\n    [4] => B+\n)\n\
    </pre>\nDeprecated: Implicit conversion from float 3.7 to int loses precision\
    \ in /tmp/tmp8m1gir5c.php on line 27\n\nDeprecated: Implicit conversion from float\
    \ 3.3 to int loses precision in /tmp/tmp8m1gir5c.php on line 28\n\nDeprecated:\
    \ Implicit conversion from float 2.7 to int loses precision in /tmp/tmp8m1gir5c.php\
    \ on line 30\n\nDeprecated: Implicit conversion from float 2.3 to int loses precision\
    \ in /tmp/tmp8m1gir5c.php on line 31\n\nDeprecated: Implicit conversion from float\
    \ 1.7 to int loses precision in /tmp/tmp8m1gir5c.php on line 33\n\nDeprecated:\
    \ Implicit conversion from float 1.3 to int loses precision in /tmp/tmp8m1gir5c.php\
    \ on line 34\n\nDeprecated: Implicit conversion from float 0.7 to int loses precision\
    \ in /tmp/tmp8m1gir5c.php on line 36\n\nDeprecated: Implicit conversion from float\
    \ -0.1 to int loses precision in /tmp/tmp8m1gir5c.php on line 38\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp8m1gir5c.php:59\nStack trace:\n\
    #0 /tmp/tmp8m1gir5c.php(67): test()\n#1 {main}\n  thrown in /tmp/tmp8m1gir5c.php\
    \ on line 59\n"
  timestamp: 1660005483
- exit_code: 0
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grade_arr = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ == 4.0) {\n            $grade_arr[] = \"A+\";\n        } elseif ($grade > 3.7)\
    \ {\n            $grade_arr[] = \"A\";\n        } elseif ($grade > 3.3) {\n  \
    \          $grade_arr[] = \"A-\";\n        } elseif ($grade > 3.0) {\n       \
    \     $grade_arr[] = \"B+\";\n        } elseif ($grade > 2.7) {\n            $grade_arr[]\
    \ = \"B\";\n        } elseif ($grade > 2.3) {\n            $grade_arr[] = \"B-\"\
    ;\n        } elseif ($grade > 2.0) {\n            $grade_arr[] = \"C+\";\n   \
    \     } elseif ($grade > 1.7) {\n            $grade_arr[] = \"C\";\n        }\
    \ elseif ($grade > 1.3) {\n            $grade_arr[] = \"C-\";\n        } elseif\
    \ ($grade > 1.0) {\n            $grade_arr[] = \"D+\";\n        } elseif ($grade\
    \ > 0.7) {\n            $grade_arr[] = \"D\";\n        } elseif ($grade > 0.0)\
    \ {\n            $grade_arr[] = \"D-\";\n        } else {\n            $grade_arr[]\
    \ = \"E\";\n        }\n    }\n    return $grade_arr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660005483
- exit_code: 0
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $length = count($grades);\n    $letter_grades = array();\n    for ($i\
    \ = 0; $i < $length; $i++) {\n        if ($grades[$i] == 4.0) {\n            $letter_grades[$i]\
    \ = \"A+\";\n        } elseif ($grades[$i] > 3.7) {\n            $letter_grades[$i]\
    \ = \"A\";\n        } elseif ($grades[$i] > 3.3) {\n            $letter_grades[$i]\
    \ = \"A-\";\n        } elseif ($grades[$i] > 3.0) {\n            $letter_grades[$i]\
    \ = \"B+\";\n        } elseif ($grades[$i] > 2.7) {\n            $letter_grades[$i]\
    \ = \"B\";\n        } elseif ($grades[$i] > 2.3) {\n            $letter_grades[$i]\
    \ = \"B-\";\n        } elseif ($grades[$i] > 2.0) {\n            $letter_grades[$i]\
    \ = \"C+\";\n        } elseif ($grades[$i] > 1.7) {\n            $letter_grades[$i]\
    \ = \"C\";\n        } elseif ($grades[$i] > 1.3) {\n            $letter_grades[$i]\
    \ = \"C-\";\n        } elseif ($grades[$i] > 1.0) {\n            $letter_grades[$i]\
    \ = \"D+\";\n        } elseif ($grades[$i] > 0.7) {\n            $letter_grades[$i]\
    \ = \"D\";\n        } elseif ($grades[$i] > 0.0) {\n            $letter_grades[$i]\
    \ = \"D-\";\n        } else {\n            $letter_grades[$i] = \"E\";\n     \
    \   }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args) {\n\
    \    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660005483
- exit_code: 0
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letters = array();\n    for ($i = 0; $i < count($grades); $i++) {\n\
    \        if ($grades[$i] == 4.0) {\n            $letters[$i] = \"A+\";\n     \
    \   } elseif ($grades[$i] > 3.7) {\n            $letters[$i] = \"A\";\n      \
    \  } elseif ($grades[$i] > 3.3) {\n            $letters[$i] = \"A-\";\n      \
    \  } elseif ($grades[$i] > 3.0) {\n            $letters[$i] = \"B+\";\n      \
    \  } elseif ($grades[$i] > 2.7) {\n            $letters[$i] = \"B\";\n       \
    \ } elseif ($grades[$i] > 2.3) {\n            $letters[$i] = \"B-\";\n       \
    \ } elseif ($grades[$i] > 2.0) {\n            $letters[$i] = \"C+\";\n       \
    \ } elseif ($grades[$i] > 1.7) {\n            $letters[$i] = \"C\";\n        }\
    \ elseif ($grades[$i] > 1.3) {\n            $letters[$i] = \"C-\";\n        }\
    \ elseif ($grades[$i] > 1.0) {\n            $letters[$i] = \"D+\";\n        }\
    \ elseif ($grades[$i] > 0.7) {\n            $letters[$i] = \"D\";\n        } elseif\
    \ ($grades[$i] > 0.0) {\n            $letters[$i] = \"D-\";\n        } else {\n\
    \            $letters[$i] = \"E\";\n        }\n    }\n    return $letters;\n}\n\
    \n$grades = array(4.0, 3, 1.7, 2, 3.5);\nprint_r(numerical_letter_grade($grades));\n\
    \nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => A+\n    [1] => B\n    [2] => C-\n    [3] => C\n  \
    \  [4] => A-\n)\n"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n  $result = [];\n  foreach ($grades as $grade) {\n    if ($grade >= 4.0)\
    \ {\n      $result[] = \"A+\";\n    } elseif ($grade >= 3.7) {\n      $result[]\
    \ = \"A\";\n    } elseif ($grade >= 3.3) {\n      $result[] = \"A-\";\n    } elseif\
    \ ($grade >= 3.0) {\n      $result[] = \"B+\";\n    } elseif ($grade >= 2.7) {\n\
    \      $result[] = \"B\";\n    } elseif ($grade >= 2.3) {\n      $result[] = \"\
    B-\";\n    } elseif ($grade >= 2.0) {\n      $result[] = \"C+\";\n    } elseif\
    \ ($grade >= 1.7) {\n      $result[] = \"C\";\n    } elseif ($grade >= 1.3) {\n\
    \      $result[] = \"C-\";\n    } elseif ($grade >= 1.0) {\n      $result[] =\
    \ \"D+\";\n    } elseif ($grade >= 0.7) {\n      $result[] = \"D\";\n    } elseif\
    \ ($grade >= 0.0) {\n      $result[] = \"D-\";\n    } else {\n      $result[]\
    \ = \"E\";\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy540riun.php:63\n\
    Stack trace:\n#0 /tmp/tmpy540riun.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpy540riun.php\
    \ on line 63\n"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n\t$output = array();\n\tforeach ($grades as $grade) {\n\t\tswitch ($grade)\
    \ {\n\t\t\tcase ($grade >= 4.0):\n\t\t\t\t$output[] = \"A+\";\n\t\t\t\tbreak;\n\
    \t\t\tcase ($grade >= 3.7):\n\t\t\t\t$output[] = \"A\";\n\t\t\t\tbreak;\n\t\t\t\
    case ($grade >= 3.3):\n\t\t\t\t$output[] = \"A-\";\n\t\t\t\tbreak;\n\t\t\tcase\
    \ ($grade >= 3.0):\n\t\t\t\t$output[] = \"B+\";\n\t\t\t\tbreak;\n\t\t\tcase ($grade\
    \ >= 2.7):\n\t\t\t\t$output[] = \"B\";\n\t\t\t\tbreak;\n\t\t\tcase ($grade >=\
    \ 2.3):\n\t\t\t\t$output[] = \"B-\";\n\t\t\t\tbreak;\n\t\t\tcase ($grade >= 2.0):\n\
    \t\t\t\t$output[] = \"C+\";\n\t\t\t\tbreak;\n\t\t\tcase ($grade >= 1.7):\n\t\t\
    \t\t$output[] = \"C\";\n\t\t\t\tbreak;\n\t\t\tcase ($grade >= 1.3):\n\t\t\t\t\
    $output[] = \"C-\";\n\t\t\t\tbreak;\n\t\t\tcase ($grade >= 1.0):\n\t\t\t\t$output[]\
    \ = \"D+\";\n\t\t\t\tbreak;\n\t\t\tcase ($grade >= 0.7):\n\t\t\t\t$output[] =\
    \ \"D\";\n\t\t\t\tbreak;\n\t\t\tcase ($grade >= 0.0):\n\t\t\t\t$output[] = \"\
    D-\";\n\t\t\t\tbreak;\n\t\t\tcase ($grade >= 0.0):\n\t\t\t\t$output[] = \"E\"\
    ;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn $output;\n}\n$grades = array(4.0, 3, 1.7,\
    \ 2, 3.5);\necho \"<pre>\";\nvar_dump(numerical_letter_grade($grades));\necho\
    \ \"</pre>\";\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>array(5) {\n  [0]=>\n  string(2) \"A+\"\n  [1]=>\n  string(2) \"B+\"\
    \n  [2]=>\n  string(1) \"C\"\n  [3]=>\n  string(2) \"C+\"\n  [4]=>\n  string(2)\
    \ \"A-\"\n}\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg3hvgz5x.php:81\n\
    Stack trace:\n#0 /tmp/tmpg3hvgz5x.php(89): test()\n#1 {main}\n  thrown in /tmp/tmpg3hvgz5x.php\
    \ on line 81\n"
  timestamp: 1660005483
- exit_code: 0
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ == 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif ($grade\
    \ > 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade >\
    \ 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade > 3.0)\
    \ {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade > 2.7) {\n\
    \            $letter_grades[] = \"B\";\n        } elseif ($grade > 2.3) {\n  \
    \          $letter_grades[] = \"B-\";\n        } elseif ($grade > 2.0) {\n   \
    \         $letter_grades[] = \"C+\";\n        } elseif ($grade > 1.7) {\n    \
    \        $letter_grades[] = \"C\";\n        } elseif ($grade > 1.3) {\n      \
    \      $letter_grades[] = \"C-\";\n        } elseif ($grade > 1.0) {\n       \
    \     $letter_grades[] = \"D+\";\n        } elseif ($grade > 0.7) {\n        \
    \    $letter_grades[] = \"D\";\n        } elseif ($grade > 0.0) {\n          \
    \  $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\necho var_dump(numerical_letter_grade([3.8,\
    \ 4.0, 2.0, 1.7, 3.9]));\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "array(5) {\n  [0]=>\n  string(1) \"A\"\n  [1]=>\n  string(2) \"A+\"\n \
    \ [2]=>\n  string(1) \"C\"\n  [3]=>\n  string(2) \"C-\"\n  [4]=>\n  string(1)\
    \ \"A\"\n}\n"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n\t$key = array(\n\t\t\"4.0\" => \"A+\",\n\t\t\"3.7\" => \"A\",\n\t\t\"3.3\"\
    \ => \"A-\",\n\t\t\"3.0\" => \"B+\",\n\t\t\"2.7\" => \"B\",\n\t\t\"2.3\" => \"\
    B-\",\n\t\t\"2.0\" => \"C+\",\n\t\t\"1.7\" => \"C\",\n\t\t\"1.3\" => \"C-\",\n\
    \t\t\"1.0\" => \"D+\",\n\t\t\"0.7\" => \"D\",\n\t\t\"0.0\" => \"D-\",\n\t\t\"\
    -1\" => \"E\"\n\t);\n\t$letter_grades = array();\n\tforeach ($grades as $gpa)\
    \ {\n\t\tif ($gpa >= 4.0) {\n\t\t\t$letter_grades[] = $key[\"4.0\"];\n\t\t} elseif\
    \ ($gpa >= 3.7) {\n\t\t\t$letter_grades[] = $key[\"3.7\"];\n\t\t} elseif ($gpa\
    \ >= 3.3) {\n\t\t\t$letter_grades[] = $key[\"3.3\"];\n\t\t} elseif ($gpa >= 3.0)\
    \ {\n\t\t\t$letter_grades[] = $key[\"3.0\"];\n\t\t} elseif ($gpa >= 2.7) {\n\t\
    \t\t$letter_grades[] = $key[\"2.7\"];\n\t\t} elseif ($gpa >= 2.3) {\n\t\t\t$letter_grades[]\
    \ = $key[\"2.3\"];\n\t\t} elseif ($gpa >= 2.0) {\n\t\t\t$letter_grades[] = $key[\"\
    2.0\"];\n\t\t} elseif ($gpa >= 1.7) {\n\t\t\t$letter_grades[] = $key[\"1.7\"];\n\
    \t\t} elseif ($gpa >= 1.3) {\n\t\t\t$letter_grades[] = $key[\"1.3\"];\n\t\t} elseif\
    \ ($gpa >= 1.0) {\n\t\t\t$letter_grades[]\nfunction candidate(...$args) {\n  \
    \  return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\",\
    \ \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpqd3hlnhh.php
    on line 62

    '
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n\t$letters = array();\n\tforeach ($grades as $gpa) {\n\t\tif ($gpa == 4.0)\
    \ {\n\t\t\t$letters[] = \"A+\";\n\t\t} elseif ($gpa >= 3.7) {\n\t\t\t$letters[]\
    \ = \"A\";\n\t\t} elseif ($gpa >= 3.3) {\n\t\t\t$letters[] = \"A-\";\n\t\t} elseif\
    \ ($gpa >= 3.0) {\n\t\t\t$letters[] = \"B+\";\n\t\t} elseif ($gpa >= 2.7) {\n\t\
    \t\t$letters[] = \"B\";\n\t\t} elseif ($gpa >= 2.3) {\n\t\t\t$letters[] = \"B-\"\
    ;\n\t\t} elseif ($gpa >= 2.0) {\n\t\t\t$letters[] = \"C+\";\n\t\t} elseif ($gpa\
    \ >= 1.7) {\n\t\t\t$letters[] = \"C\";\n\t\t} elseif ($gpa >= 1.3) {\n\t\t\t$letters[]\
    \ = \"C-\";\n\t\t} elseif ($gpa >= 1.0) {\n\t\t\t$letters[] = \"D+\";\n\t\t} elseif\
    \ ($gpa >= 0.7) {\n\t\t\t$letters[] = \"D\";\n\t\t} elseif ($gpa >= 0.0) {\n\t\
    \t\t$letters[] = \"D-\";\n\t\t} else {\n\t\t\t$letters[] = \"E\";\n\t\t}\n\t}\n\
    \treturn $letters;\n}\n$a = array(4.0, 3, 1.7, 2, 3.5);\n$b = numerical_letter_grade($a);\n\
    var_dump($b);\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(5) {\n  [0]=>\n  string(2) \"A+\"\n  [1]=>\n  string(2) \"B+\"\n\
    \  [2]=>\n  string(1) \"C\"\n  [3]=>\n  string(2) \"C+\"\n  [4]=>\n  string(2)\
    \ \"A-\"\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7zwojphd.php:66\n\
    Stack trace:\n#0 /tmp/tmp7zwojphd.php(74): test()\n#1 {main}\n  thrown in /tmp/tmp7zwojphd.php\
    \ on line 66\n"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n\t$new_grades = array();\n\tfor ($i = 0; $i < count($grades); $i++) {\n\t\
    \t$grade = $grades[$i];\n\t\tif ($grade > 4.0) {\n\t\t\t$new_grades[] = \"A+\"\
    ;\n\t\t} else if ($grade > 3.7) {\n\t\t\t$new_grades[] = \"A\";\n\t\t} else if\
    \ ($grade > 3.3) {\n\t\t\t$new_grades[] = \"A-\";\n\t\t} else if ($grade > 3.0)\
    \ {\n\t\t\t$new_grades[] = \"B+\";\n\t\t} else if ($grade > 2.7) {\n\t\t\t$new_grades[]\
    \ = \"B\";\n\t\t} else if ($grade > 2.3) {\n\t\t\t$new_grades[] = \"B-\";\n\t\t\
    } else if ($grade > 2.0) {\n\t\t\t$new_grades[] = \"C+\";\n\t\t} else if ($grade\
    \ > 1.7) {\n\t\t\t$new_grades[] = \"C\";\n\t\t} else if ($grade > 1.3) {\n\t\t\
    \t$new_grades[] = \"C-\";\n\t\t} else if ($grade > 1.0) {\n\t\t\t$new_grades[]\
    \ = \"D+\";\n\t\t} else if ($grade > 0.7) {\n\t\t\t$new_grades[] = \"D\";\n\t\t\
    } else if ($grade > 0.0) {\n\t\t\t$new_grades[] = \"D-\";\n\t\t} else {\n\t\t\t\
    $new_grades[] = \"E\";\n\t\t}\n\t}\n\treturn $new_grades;\n}\n\n$grades = array(4.0,\
    \ 3, 1.7, 2, 3.5);\n$new_grades = numerical_letter_grade($grades);\nprint_r($new_grades);\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A\n    [1] => B\n    [2] => C-\n    [3] => C\n   \
    \ [4] => A-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp13q1rjgv.php:67\n\
    Stack trace:\n#0 /tmp/tmp13q1rjgv.php(75): test()\n#1 {main}\n  thrown in /tmp/tmp13q1rjgv.php\
    \ on line 67\n"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n\t$numerical_grade = array(\n\t\t'A+' => 4.0,\n\t\t'A' => 3.7,\n\t\t'A-'\
    \ => 3.3,\n\t\t'B+' => 3.0,\n\t\t'B' => 2.7,\n\t\t'B-' => 2.3,\n\t\t'C+' => 2.0,\n\
    \t\t'C' => 1.7,\n\t\t'C-' => 1.3,\n\t\t'D+' => 1.0,\n\t\t'D' => 0.7,\n\t\t'D-'\
    \ => 0.0,\n\t\t'E' => 0.0,\n\t);\n\t$letter_grade = array();\n\tforeach ($grades\
    \ as $grade) {\n\t\tforeach ($numerical_grade as $key => $value) {\n\t\t\tif ($grade\
    \ >= $value) {\n\t\t\t\t$letter_grade[] = $key;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\
    }\n\t}\n\treturn $letter_grade;\n}\nfunction candidate(...$args) {\n    return\
    \ numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4.0,\
    \ 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.2)) !== array(\"D+\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5)) !==\
    \ array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpog390603.php:56\n\
    Stack trace:\n#0 /tmp/tmpog390603.php(64): test()\n#1 {main}\n  thrown in /tmp/tmpog390603.php\
    \ on line 56\n"
  timestamp: 1660005483
- exit_code: 0
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letters = array();\n    for ($i = 0; $i < count($grades); $i++) {\n\
    \        if ($grades[$i] == 4.0) {\n            $letters[$i] = \"A+\";\n     \
    \   } elseif ($grades[$i] > 3.7) {\n            $letters[$i] = \"A\";\n      \
    \  } elseif ($grades[$i] > 3.3) {\n            $letters[$i] = \"A-\";\n      \
    \  } elseif ($grades[$i] > 3.0) {\n            $letters[$i] = \"B+\";\n      \
    \  } elseif ($grades[$i] > 2.7) {\n            $letters[$i] = \"B\";\n       \
    \ } elseif ($grades[$i] > 2.3) {\n            $letters[$i] = \"B-\";\n       \
    \ } elseif ($grades[$i] > 2.0) {\n            $letters[$i] = \"C+\";\n       \
    \ } elseif ($grades[$i] > 1.7) {\n            $letters[$i] = \"C\";\n        }\
    \ elseif ($grades[$i] > 1.3) {\n            $letters[$i] = \"C-\";\n        }\
    \ elseif ($grades[$i] > 1.0) {\n            $letters[$i] = \"D+\";\n        }\
    \ elseif ($grades[$i] > 0.7) {\n            $letters[$i] = \"D\";\n        } elseif\
    \ ($grades[$i] > 0.0) {\n            $letters[$i] = \"D-\";\n        } else {\n\
    \            $letters[$i] = \"E\";\n        }\n    }\n    return $letters;\n}\n\
    $grades = array(4.0, 3, 1.7, 2, 3.5);\necho var_dump(numerical_letter_grade($grades));\n\
    \nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "array(5) {\n  [0]=>\n  string(2) \"A+\"\n  [1]=>\n  string(1) \"B\"\n \
    \ [2]=>\n  string(2) \"C-\"\n  [3]=>\n  string(1) \"C\"\n  [4]=>\n  string(2)\
    \ \"A-\"\n}\n"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n  $letter_grades = array();\n  for ($i = 0; $i < count($grades); $i++) {\n\
    \    if ($grades[$i] >= 4.0) {\n      $letter_grades[$i] = \"A+\";\n    } elseif\
    \ ($grades[$i] >= 3.7) {\n      $letter_grades[$i] = \"A\";\n    } elseif ($grades[$i]\
    \ >= 3.3) {\n      $letter_grades[$i] = \"A-\";\n    } elseif ($grades[$i] >=\
    \ 3.0) {\n      $letter_grades[$i] = \"B+\";\n    } elseif ($grades[$i] >= 2.7)\
    \ {\n      $letter_grades[$i] = \"B\";\n    } elseif ($grades[$i] >= 2.3) {\n\
    \      $letter_grades[$i] = \"B-\";\n    } elseif ($grades[$i] >= 2.0) {\n   \
    \   $letter_grades[$i] = \"C+\";\n    } elseif ($grades[$i] >= 1.7) {\n      $letter_grades[$i]\
    \ = \"C\";\n    } elseif ($grades[$i] >= 1.3) {\n      $letter_grades[$i] = \"\
    C-\";\n    } elseif ($grades[$i] >= 1.0) {\n      $letter_grades[$i] = \"D+\"\
    ;\n    } elseif ($grades[$i] >= 0.7) {\n      $letter_grades[$i] = \"D\";\n  \
    \  } elseif ($grades[$i] >= 0.0) {\n      $letter_grades[$i] = \"D-\";\n    }\
    \ else {\n      $letter_grades[$i] = \"E\";\n    }\n  }\n  return $letter_grades;\n\
    }\necho \"<pre>\";\nprint_r(numerical_letter_grade(array(4.0, 3, 1.7, 2, 3.5)));\n\
    echo \"</pre>\";\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n\
    \    [4] => A-\n)\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkku4bwnt.php:66\n\
    Stack trace:\n#0 /tmp/tmpkku4bwnt.php(74): test()\n#1 {main}\n  thrown in /tmp/tmpkku4bwnt.php\
    \ on line 66\n"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $result = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ > 4.0) {\n            $result[] = \"A+\";\n        } elseif ($grade > 3.7) {\n\
    \            $result[] = \"A\";\n        } elseif ($grade > 3.3) {\n         \
    \   $result[] = \"A-\";\n        } elseif ($grade > 3.0) {\n            $result[]\
    \ = \"B+\";\n        } elseif ($grade > 2.7) {\n            $result[] = \"B\"\
    ;\n        } elseif ($grade > 2.3) {\n            $result[] = \"B-\";\n      \
    \  } elseif ($grade > 2.0) {\n            $result[] = \"C+\";\n        } elseif\
    \ ($grade > 1.7) {\n            $result[] = \"C\";\n        } elseif ($grade >\
    \ 1.3) {\n            $result[] = \"C-\";\n        } elseif ($grade > 1.0) {\n\
    \            $result[] = \"D+\";\n        } elseif ($grade > 0.7) {\n        \
    \    $result[] = \"D\";\n        } elseif ($grade > 0.0) {\n            $result[]\
    \ = \"D-\";\n        } else {\n            $result[] = \"E\";\n        }\n   \
    \ }\n    return $result;\n}\necho \"<pre>\";\nprint_r(numerical_letter_grade([1.5,\
    \ 4.0, 3, 1.7, 2, 3.5]));\necho \"</pre>\";\nfunction candidate(...$args) {\n\
    \    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => C-\n    [1] => A\n    [2] => B\n    [3] => C-\n\
    \    [4] => C\n    [5] => A-\n)\n</pre>\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp03houm8t.php:65\nStack trace:\n#0 /tmp/tmp03houm8t.php(73):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp03houm8t.php on line 65\n"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n\t$converted_grades = array();\n\tforeach ($grades as $grade) {\n\t\tif ($grade\
    \ >= 4.0) {\n\t\t\t$converted_grades[] = \"A+\";\n\t\t} elseif ($grade >= 3.7)\
    \ {\n\t\t\t$converted_grades[] = \"A\";\n\t\t} elseif ($grade >= 3.3) {\n\t\t\t\
    $converted_grades[] = \"A-\";\n\t\t} elseif ($grade >= 3.0) {\n\t\t\t$converted_grades[]\
    \ = \"B+\";\n\t\t} elseif ($grade >= 2.7) {\n\t\t\t$converted_grades[] = \"B\"\
    ;\n\t\t} elseif ($grade >= 2.3) {\n\t\t\t$converted_grades[] = \"B-\";\n\t\t}\
    \ elseif ($grade >= 2.0) {\n\t\t\t$converted_grades[] = \"C+\";\n\t\t} elseif\
    \ ($grade >= 1.7) {\n\t\t\t$converted_grades[] = \"C\";\n\t\t} elseif ($grade\
    \ >= 1.3) {\n\t\t\t$converted_grades[] = \"C-\";\n\t\t} elseif ($grade >= 1.0)\
    \ {\n\t\t\t$converted_grades[] = \"D+\";\n\t\t} elseif ($grade >= 0.7) {\n\t\t\
    \t$converted_grades[] = \"D\";\n\t\t} elseif ($grade >= 0.0) {\n\t\t\t$converted_grades[]\
    \ = \"D-\";\n\t\t} else {\n\t\t\t$converted_grades[] = \"E\";\n\t\t}\n\t}\n\t\
    return $converted_grades;\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplpigxz0y.php:63\n\
    Stack trace:\n#0 /tmp/tmplpigxz0y.php(71): test()\n#1 {main}\n  thrown in /tmp/tmplpigxz0y.php\
    \ on line 63\n"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades_final = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ >= 4.0) {\n            $grades_final[] = \"A+\";\n        } elseif ($grade >=\
    \ 3.7) {\n            $grades_final[] = \"A\";\n        } elseif ($grade >= 3.3)\
    \ {\n            $grades_final[] = \"A-\";\n        } elseif ($grade >= 3.0) {\n\
    \            $grades_final[] = \"B+\";\n        } elseif ($grade >= 2.7) {\n \
    \           $grades_final[] = \"B\";\n        } elseif ($grade >= 2.3) {\n   \
    \         $grades_final[] = \"B-\";\n        } elseif ($grade >= 2.0) {\n    \
    \        $grades_final[] = \"C+\";\n        } elseif ($grade >= 1.7) {\n     \
    \       $grades_final[] = \"C\";\n        } elseif ($grade >= 1.3) {\n       \
    \     $grades_final[] = \"C-\";\n        } elseif ($grade >= 1.0) {\n        \
    \    $grades_final[] = \"D+\";\n        } elseif ($grade >= 0.7) {\n         \
    \   $grades_final[] = \"D\";\n        } elseif ($grade >= 0.0) {\n           \
    \ $grades_final[] = \"D-\";\n        } else {\n            $grades_final[] = \"\
    E\";\n        }\n    }\n    return $grades_final;\n}\n\n$test1 = [1.5, 3.5, 4.0,\
    \ 1.5, 3.5, 4.0, 1.5, 3.5, 4.0, 1.5, 3.5, 4.0, 1.5, 3.5, 4.0, 1.5, 3.5, 4.0, 1.5,\
    \ 3.5, 4.0, 1.5, 3.5, 4.0, 1.5, 3.5, 4.0, 1.5, 3.5, 4.0, 1.5, 3.5, 4.0, 1.5, 3.5,\
    \ 4.0, 1.5, 3.5, 4.0, 1.5,\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpj34an5dt.php on line 59

    '
  timestamp: 1660005483
- exit_code: 0
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ == 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif ($grade\
    \ > 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade >\
    \ 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade > 3.0)\
    \ {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade > 2.7) {\n\
    \            $letter_grades[] = \"B\";\n        } elseif ($grade > 2.3) {\n  \
    \          $letter_grades[] = \"B-\";\n        } elseif ($grade > 2.0) {\n   \
    \         $letter_grades[] = \"C+\";\n        } elseif ($grade > 1.7) {\n    \
    \        $letter_grades[] = \"C\";\n        } elseif ($grade > 1.3) {\n      \
    \      $letter_grades[] = \"C-\";\n        } elseif ($grade > 1.0) {\n       \
    \     $letter_grades[] = \"D+\";\n        } elseif ($grade > 0.7) {\n        \
    \    $letter_grades[] = \"D\";\n        } elseif ($grade > 0.0) {\n          \
    \  $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\necho implode(\",\"\
    , numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]));\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: A+,B,C-,C,A-
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = [];\n    $gpas = [4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0,\
    \ 1.7, 1.3, 1.0, 0.7, 0.0];\n    $alphabets = ['A+', 'A', 'A-', 'B+', 'B', 'B-',\
    \ 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E'];\n    foreach ($grades as $grade) {\n\
    \        $letter_grade = '';\n        foreach ($gpas as $key => $gpa) {\n    \
    \        if ($grade >= $gpa) {\n                $letter_grade = $alphabets[$key];\n\
    \                break;\n            }\n        }\n        array_push($letter_grades,\
    \ $letter_grade);\n    }\n    return $letter_grades;\n}\n\n$grades = [4.0, 3,\
    \ 1.7, 2, 3.5];\n$result = numerical_letter_grade($grades);\necho \"<pre>\";\n\
    print_r($result);\necho \"</pre>\";\nfunction candidate(...$args) {\n    return\
    \ numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4.0,\
    \ 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.2)) !== array(\"D+\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5)) !==\
    \ array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n\
    \    [4] => A-\n)\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptbgnzta_.php:51\n\
    Stack trace:\n#0 /tmp/tmptbgnzta_.php(59): test()\n#1 {main}\n  thrown in /tmp/tmptbgnzta_.php\
    \ on line 51\n"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif ($grade\
    \ >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade >=\
    \ 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade >=\
    \ 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade >=\
    \ 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >= 2.3)\
    \ {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >= 2.0)\
    \ {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >= 1.7)\
    \ {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3) {\n\
    \            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0) {\n\
    \            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7) {\n\
    \            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n \
    \           $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\n$student_grades\
    \ = [4.0, 3, 1.7, 2, 3.5];\n\nprint_r(numerical_letter_grade($student_grades));\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmxp651wu.php:66\n\
    Stack trace:\n#0 /tmp/tmpmxp651wu.php(74): test()\n#1 {main}\n  thrown in /tmp/tmpmxp651wu.php\
    \ on line 66\n"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade > 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade > 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ > 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade >\
    \ 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade > 2.7)\
    \ {\n            $letter_grades[] = \"B\";\n        } elseif ($grade > 2.3) {\n\
    \            $letter_grades[] = \"B-\";\n        } elseif ($grade > 2.0) {\n \
    \           $letter_grades[] = \"C+\";\n        } elseif ($grade > 1.7) {\n  \
    \          $letter_grades[] = \"C\";\n        } elseif ($grade > 1.3) {\n    \
    \        $letter_grades[] = \"C-\";\n        } elseif ($grade > 1.0) {\n     \
    \       $letter_grades[] = \"D+\";\n        } elseif ($grade > 0.7) {\n      \
    \      $letter_grades[] = \"D\";\n        } elseif ($grade > 0.0) {\n        \
    \    $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n$grades = array(4.0,\
    \ 3, 1.7, 2, 3.5);\nprint_r(numerical_letter_grade($grades));\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A\n    [1] => B\n    [2] => C-\n    [3] => C\n   \
    \ [4] => A-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdj33uzui.php:64\n\
    Stack trace:\n#0 /tmp/tmpdj33uzui.php(72): test()\n#1 {main}\n  thrown in /tmp/tmpdj33uzui.php\
    \ on line 64\n"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $results = [];\n    $key = array_keys($grades);\n    for ($i = 0; $i\
    \ < count($grades); $i++) {\n        if ($grades[$key[$i]] >= 4.0) {\n       \
    \     $results[$key[$i]] = \"A+\";\n        } elseif ($grades[$key[$i]] >= 3.7)\
    \ {\n            $results[$key[$i]] = \"A\";\n        } elseif ($grades[$key[$i]]\
    \ >= 3.3) {\n            $results[$key[$i]] = \"A-\";\n        } elseif ($grades[$key[$i]]\
    \ >= 3.0) {\n            $results[$key[$i]] = \"B+\";\n        } elseif ($grades[$key[$i]]\
    \ >= 2.7) {\n            $results[$key[$i]] = \"B\";\n        } elseif ($grades[$key[$i]]\
    \ >= 2.3) {\n            $results[$key[$i]] = \"B-\";\n        } elseif ($grades[$key[$i]]\
    \ >= 2.0) {\n            $results[$key[$i]] = \"C+\";\n        } elseif ($grades[$key[$i]]\
    \ >= 1.7) {\n            $results[$key[$i]] = \"C\";\n        } elseif ($grades[$key[$i]]\
    \ >= 1.3) {\n            $results[$key[$i]] = \"C-\";\n        } elseif ($grades[$key[$i]]\
    \ >= 1.0) {\n            $results[$key[$i]] = \"D+\";\n        } elseif ($grades[$key[$i]]\
    \ >= 0.7) {\n            $results[$key[$i]] = \"D\";\n        } elseif ($grades[$key[$i]]\
    \ > 0.0) {\n            $results[$key[$i]] = \"D-\";\n        } else {\n     \
    \       $results[$key[$i]] = \"E\";\n        }\n    }\n    return $results;\n\
    }\n$grades = array(\"Ross\" => 3.9, \"Monica\nfunction candidate(...$args) {\n\
    \    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "A", expecting ")" in /tmp/tmpm6naohm6.php
    on line 64

    '
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $map = array(\n        'E' => 0,\n        'D-' => 0.7,\n        'D' =>\
    \ 1,\n        'D+' => 1.3,\n        'C-' => 1.7,\n        'C' => 2,\n        'C+'\
    \ => 2.3,\n        'B-' => 2.7,\n        'B' => 3,\n        'B+' => 3.3,\n   \
    \     'A-' => 3.7,\n        'A' => 4,\n        'A+' => 4.0\n    );\n    $result\
    \ = array();\n    foreach ($grades as $grade) {\n        $result[] = $grade_letter;\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $grade_letter in /tmp/tmpxv0jspts.php on\
    \ line 42\n\nWarning: Undefined variable $grade_letter in /tmp/tmpxv0jspts.php\
    \ on line 42\n\nWarning: Undefined variable $grade_letter in /tmp/tmpxv0jspts.php\
    \ on line 42\n\nWarning: Undefined variable $grade_letter in /tmp/tmpxv0jspts.php\
    \ on line 42\n\nWarning: Undefined variable $grade_letter in /tmp/tmpxv0jspts.php\
    \ on line 42\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxv0jspts.php:52\n\
    Stack trace:\n#0 /tmp/tmpxv0jspts.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpxv0jspts.php\
    \ on line 52\n"
  timestamp: 1660005483
- exit_code: 0
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $result = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ == 4.0) {\n            $result[] = \"A+\";\n        } elseif ($grade > 3.7)\
    \ {\n            $result[] = \"A\";\n        } elseif ($grade > 3.3) {\n     \
    \       $result[] = \"A-\";\n        } elseif ($grade > 3.0) {\n            $result[]\
    \ = \"B+\";\n        } elseif ($grade > 2.7) {\n            $result[] = \"B\"\
    ;\n        } elseif ($grade > 2.3) {\n            $result[] = \"B-\";\n      \
    \  } elseif ($grade > 2.0) {\n            $result[] = \"C+\";\n        } elseif\
    \ ($grade > 1.7) {\n            $result[] = \"C\";\n        } elseif ($grade >\
    \ 1.3) {\n            $result[] = \"C-\";\n        } elseif ($grade > 1.0) {\n\
    \            $result[] = \"D+\";\n        } elseif ($grade > 0.7) {\n        \
    \    $result[] = \"D\";\n        } elseif ($grade > 0.0) {\n            $result[]\
    \ = \"D-\";\n        } else {\n            $result[] = \"E\";\n        }\n   \
    \ }\n    return $result;\n}\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $result = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ >= 4.0) {\n            $result[] = \"A+\";\n        } elseif ($grade >= 3.7)\
    \ {\n            $result[] = \"A\";\n        } elseif ($grade >= 3.3) {\n    \
    \        $result[] = \"A-\";\n        } elseif ($grade >= 3.0) {\n           \
    \ $result[] = \"B+\";\n        } elseif ($grade >= 2.7) {\n            $result[]\
    \ = \"B\";\n        } elseif ($grade >= 2.3) {\n            $result[] = \"B-\"\
    ;\n        } elseif ($grade >= 2.0) {\n            $result[] = \"C+\";\n     \
    \   } elseif ($grade >= 1.7) {\n            $result[] = \"C\";\n        } elseif\
    \ ($grade >= 1.3) {\n            $result[] = \"C-\";\n        } elseif ($grade\
    \ >= 1.0) {\n            $result[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $result[] = \"D\";\n        } elseif ($grade >= 0.0) {\n    \
    \        $result[] = \"D-\";\n        } else {\n            $result[] = \"E\"\
    ;\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args) {\n\
    \    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8uh1ufld.php:62\n\
    Stack trace:\n#0 /tmp/tmp8uh1ufld.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp8uh1ufld.php\
    \ on line 62\n"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $array = array();\n    foreach ($grades as $grade) {\n        if ($grade\
    \ >= 4.0) {\n            $array[] = \"A+\";\n        } elseif ($grade >= 3.7)\
    \ {\n            $array[] = \"A\";\n        } elseif ($grade >= 3.3) {\n     \
    \       $array[] = \"A-\";\n        } elseif ($grade >= 3.0) {\n            $array[]\
    \ = \"B+\";\n        } elseif ($grade >= 2.7) {\n            $array[] = \"B\"\
    ;\n        } elseif ($grade >= 2.3) {\n            $array[] = \"B-\";\n      \
    \  } elseif ($grade >= 2.0) {\n            $array[] = \"C+\";\n        } elseif\
    \ ($grade >= 1.7) {\n            $array[] = \"C\";\n        } elseif ($grade >=\
    \ 1.3) {\n            $array[] = \"C-\";\n        } elseif ($grade >= 1.0) {\n\
    \            $array[] = \"D+\";\n        } elseif ($grade >= 0.7) {\n        \
    \    $array[] = \"D\";\n        } elseif ($grade > 0.0) {\n            $array[]\
    \ = \"D-\";\n        } else {\n            $array[] = \"E\";\n        }\n    }\n\
    \    return $array;\n}\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd2_zp0x_.php:62\n\
    Stack trace:\n#0 /tmp/tmpd2_zp0x_.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpd2_zp0x_.php\
    \ on line 62\n"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    // Write your code here\n    $gpa = $grades;\n    $letter = [];\n   \
    \ for ($i=0; $i < count($gpa); $i++) { \n        if ($gpa[$i] == 4.0) {\n    \
    \        $letter[$i] = \"A+\";\n        } elseif ($gpa[$i] >= 3.7) {\n       \
    \     $letter[$i] = \"A\";\n        } elseif ($gpa[$i] >= 3.3) {\n           \
    \ $letter[$i] = \"A-\";\n        } elseif ($gpa[$i] >= 3.0) {\n            $letter[$i]\
    \ = \"B+\";\n        } elseif ($gpa[$i] >= 2.7) {\n            $letter[$i] = \"\
    B\";\n        } elseif ($gpa[$i] >= 2.3) {\n            $letter[$i] = \"B-\";\n\
    \        } elseif ($gpa[$i] >= 2.0) {\n            $letter[$i] = \"C+\";\n   \
    \     } elseif ($gpa[$i] >= 1.7) {\n            $letter[$i] = \"C\";\n       \
    \ } elseif ($gpa[$i] >= 1.3) {\n            $letter[$i] = \"C-\";\n        } elseif\
    \ ($gpa[$i] >= 1.0) {\n            $letter[$i] = \"D+\";\n        } elseif ($gpa[$i]\
    \ >= 0.7) {\n            $letter[$i] = \"D\";\n        } elseif ($gpa[$i] >= 0.0)\
    \ {\n            $letter[$i] = \"D-\";\n        } elseif ($gpa[$i] <= 0.0) {\n\
    \            $letter[$i] = \"E\";\n        }\n    }\n    return $letter;\n}\n\
    print_r(numerical_letter_grade(array(4.0, 3, 1.7, 2, 3.5)));\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprbmxmvlb.php:65\n\
    Stack trace:\n#0 /tmp/tmprbmxmvlb.php(73): test()\n#1 {main}\n  thrown in /tmp/tmprbmxmvlb.php\
    \ on line 65\n"
  timestamp: 1660005483
- exit_code: 0
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ == 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif ($grade\
    \ > 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade >\
    \ 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade > 3.0)\
    \ {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade > 2.7) {\n\
    \            $letter_grades[] = \"B\";\n        } elseif ($grade > 2.3) {\n  \
    \          $letter_grades[] = \"B-\";\n        } elseif ($grade > 2.0) {\n   \
    \         $letter_grades[] = \"C+\";\n        } elseif ($grade > 1.7) {\n    \
    \        $letter_grades[] = \"C\";\n        } elseif ($grade > 1.3) {\n      \
    \      $letter_grades[] = \"C-\";\n        } elseif ($grade > 1.0) {\n       \
    \     $letter_grades[] = \"D+\";\n        } elseif ($grade > 0.7) {\n        \
    \    $letter_grades[] = \"D\";\n        } elseif ($grade > 0.0) {\n          \
    \  $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkt05io_h.php:63\n\
    Stack trace:\n#0 /tmp/tmpkt05io_h.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpkt05io_h.php\
    \ on line 63\n"
  timestamp: 1660005482
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $new_grades = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ >= 4.0) {\n            $new_grades[] = \"A+\";\n        } elseif ($grade >=\
    \ 3.7) {\n            $new_grades[] = \"A\";\n        } elseif ($grade >= 3.3)\
    \ {\n            $new_grades[] = \"A-\";\n        } elseif ($grade >= 3.0) {\n\
    \            $new_grades[] = \"B+\";\n        } elseif ($grade >= 2.7) {\n   \
    \         $new_grades[] = \"B\";\n        } elseif ($grade >= 2.3) {\n       \
    \     $new_grades[] = \"B-\";\n        } elseif ($grade >= 2.0) {\n          \
    \  $new_grades[] = \"C+\";\n        } elseif ($grade >= 1.7) {\n            $new_grades[]\
    \ = \"C\";\n        } elseif ($grade >= 1.3) {\n            $new_grades[] = \"\
    C-\";\n        } elseif ($grade >= 1.0) {\n            $new_grades[] = \"D+\"\
    ;\n        } elseif ($grade >= 0.7) {\n            $new_grades[] = \"D\";\n  \
    \      } elseif ($grade >= 0.0) {\n            $new_grades[] = \"D-\";\n     \
    \   } else {\n            $new_grades[] = \"E\";\n        }\n    }\n    return\
    \ $new_grades;\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpovl87nb8.php:63\n\
    Stack trace:\n#0 /tmp/tmpovl87nb8.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpovl87nb8.php\
    \ on line 63\n"
  timestamp: 1660005482
- exit_code: 0
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    for ($i = 0; $i < count($grades); $i++) {\n        if ($grades[$i] ==\
    \ 4.0) {\n            $grades[$i] = \"A+\";\n        } elseif ($grades[$i] > 3.7)\
    \ {\n            $grades[$i] = \"A\";\n        } elseif ($grades[$i] > 3.3) {\n\
    \            $grades[$i] = \"A-\";\n        } elseif ($grades[$i] > 3.0) {\n \
    \           $grades[$i] = \"B+\";\n        } elseif ($grades[$i] > 2.7) {\n  \
    \          $grades[$i] = \"B\";\n        } elseif ($grades[$i] > 2.3) {\n    \
    \        $grades[$i] = \"B-\";\n        } elseif ($grades[$i] > 2.0) {\n     \
    \       $grades[$i] = \"C+\";\n        } elseif ($grades[$i] > 1.7) {\n      \
    \      $grades[$i] = \"C\";\n        } elseif ($grades[$i] > 1.3) {\n        \
    \    $grades[$i] = \"C-\";\n        } elseif ($grades[$i] > 1.0) {\n         \
    \   $grades[$i] = \"D+\";\n        } elseif ($grades[$i] > 0.7) {\n          \
    \  $grades[$i] = \"D\";\n        } elseif ($grades[$i] > 0.0) {\n            $grades[$i]\
    \ = \"D-\";\n        } else {\n            $grades[$i] = \"E\";\n        }\n \
    \   }\n    return $grades;\n}\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkt05io_h.php:63\n\
    Stack trace:\n#0 /tmp/tmpkt05io_h.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpkt05io_h.php\
    \ on line 63\n"
  timestamp: 1660005482
- exit_code: 0
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $result = [];\n    for ($i = 0; $i < count($grades); $i++) {\n      \
    \  if ($grades[$i] == 4.0) {\n            $result[] = \"A+\";\n        } elseif\
    \ ($grades[$i] > 3.7) {\n            $result[] = \"A\";\n        } elseif ($grades[$i]\
    \ > 3.3) {\n            $result[] = \"A-\";\n        } elseif ($grades[$i] > 3.0)\
    \ {\n            $result[] = \"B+\";\n        } elseif ($grades[$i] > 2.7) {\n\
    \            $result[] = \"B\";\n        } elseif ($grades[$i] > 2.3) {\n    \
    \        $result[] = \"B-\";\n        } elseif ($grades[$i] > 2.0) {\n       \
    \     $result[] = \"C+\";\n        } elseif ($grades[$i] > 1.7) {\n          \
    \  $result[] = \"C\";\n        } elseif ($grades[$i] > 1.3) {\n            $result[]\
    \ = \"C-\";\n        } elseif ($grades[$i] > 1.0) {\n            $result[] = \"\
    D+\";\n        } elseif ($grades[$i] > 0.7) {\n            $result[] = \"D\";\n\
    \        } elseif ($grades[$i] > 0.0) {\n            $result[] = \"D-\";\n   \
    \     } else {\n            $result[] = \"E\";\n        }\n    }\n    return $result;\n\
    }\n\n$grades = [4.0, 3, 1.7, 2, 3.5];\nprint_r(numerical_letter_grade($grades));\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => A+\n    [1] => B\n    [2] => C-\n    [3] => C\n  \
    \  [4] => A-\n)\n"
  timestamp: 1660005483
- exit_code: 0
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n  $grade_array = array();\n  foreach ($grades as $key => $value) {\n    if\
    \ ($value == 4.0) {\n      $grade_array[$key] = \"A+\";\n    } elseif ($value\
    \ > 3.7) {\n      $grade_array[$key] = \"A\";\n    } elseif ($value > 3.3) {\n\
    \      $grade_array[$key] = \"A-\";\n    } elseif ($value > 3.0) {\n      $grade_array[$key]\
    \ = \"B+\";\n    } elseif ($value > 2.7) {\n      $grade_array[$key] = \"B\";\n\
    \    } elseif ($value > 2.3) {\n      $grade_array[$key] = \"B-\";\n    } elseif\
    \ ($value > 2.0) {\n      $grade_array[$key] = \"C+\";\n    } elseif ($value >\
    \ 1.7) {\n      $grade_array[$key] = \"C\";\n    } elseif ($value > 1.3) {\n \
    \     $grade_array[$key] = \"C-\";\n    } elseif ($value > 1.0) {\n      $grade_array[$key]\
    \ = \"D+\";\n    } elseif ($value > 0.7) {\n      $grade_array[$key] = \"D\";\n\
    \    } elseif ($value > 0.0) {\n      $grade_array[$key] = \"D-\";\n    } else\
    \ {\n      $grade_array[$key] = \"E\";\n    }\n  }\n  return $grade_array;\n}\n\
    $grades = array(4.0, 3, 1.7, 2, 3.5);\necho '<pre>';\nvar_dump(numerical_letter_grade($grades));\n\
    echo '</pre>';\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>array(5) {\n  [0]=>\n  string(2) \"A+\"\n  [1]=>\n  string(1) \"B\"\
    \n  [2]=>\n  string(2) \"C-\"\n  [3]=>\n  string(1) \"C\"\n  [4]=>\n  string(2)\
    \ \"A-\"\n}\n</pre>"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = [];\n    foreach ($grades as $gpa) {\n        if ($gpa\
    \ >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif ($gpa >=\
    \ 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($gpa >= 3.3)\
    \ {\n            $letter_grades[] = \"A-\";\n        } elseif ($gpa >= 3.0) {\n\
    \            $letter_grades[] = \"B+\";\n        } elseif ($gpa >= 2.7) {\n  \
    \          $letter_grades[] = \"B\";\n        } elseif ($gpa >= 2.3) {\n     \
    \       $letter_grades[] = \"B-\";\n        } elseif ($gpa >= 2.0) {\n       \
    \     $letter_grades[] = \"C+\";\n        } elseif ($gpa >= 1.7) {\n         \
    \   $letter_grades[] = \"C\";\n        } elseif ($gpa >= 1.3) {\n            $letter_grades[]\
    \ = \"C-\";\n        } elseif ($gpa >= 1.0) {\n            $letter_grades[] =\
    \ \"D+\";\n        } elseif ($gpa >= 0.7) {\n            $letter_grades[] = \"\
    D\";\n        } elseif ($gpa >= 0.0) {\n            $letter_grades[] = \"D-\"\
    ;\n        } else {\n            $letter_grades[] = \"E\";\n        }\n    }\n\
    \    return $letter_grades;\n}\nprint_r(numerical_letter_grade([4.0, 3, 1.7, 2,\
    \ 3.5]));\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxip9jq7m.php:63\n\
    Stack trace:\n#0 /tmp/tmpxip9jq7m.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpxip9jq7m.php\
    \ on line 63\n"
  timestamp: 1660005483
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n\t$letter_grade = [];\n\tforeach ($grades as $grade) {\n\t\tif ($grade >=\
    \ 4.0) {\n\t\t\t$letter_grade[] = \"A+\";\n\t\t} elseif ($grade >= 3.7) {\n\t\t\
    \t$letter_grade[] = \"A\";\n\t\t} elseif ($grade >= 3.3) {\n\t\t\t$letter_grade[]\
    \ = \"A-\";\n\t\t} elseif ($grade >= 3.0) {\n\t\t\t$letter_grade[] = \"B+\";\n\
    \t\t} elseif ($grade >= 2.7) {\n\t\t\t$letter_grade[] = \"B\";\n\t\t} elseif ($grade\
    \ >= 2.3) {\n\t\t\t$letter_grade[] = \"B-\";\n\t\t} elseif ($grade >= 2.0) {\n\
    \t\t\t$letter_grade[] = \"C+\";\n\t\t} elseif ($grade >= 1.7) {\n\t\t\t$letter_grade[]\
    \ = \"C\";\n\t\t} elseif ($grade >= 1.3) {\n\t\t\t$letter_grade[] = \"C-\";\n\t\
    \t} elseif ($grade >= 1.0) {\n\t\t\t$letter_grade[] = \"D+\";\n\t\t} elseif ($grade\
    \ >= 0.7) {\n\t\t\t$letter_grade[] = \"D\";\n\t\t} elseif ($grade >= 0.0) {\n\t\
    \t\t$letter_grade[] = \"D-\";\n\t\t} else {\n\t\t\t$letter_grade[] = \"E\";\n\t\
    \t}\n\t}\n\treturn $letter_grade;\n}\n\necho \"<pre>\";\nprint_r(numerical_letter_grade([4.0,\
    \ 3, 1.7, 2, 3.5]));\necho \"</pre>\";\nfunction candidate(...$args) {\n    return\
    \ numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4.0,\
    \ 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.2)) !== array(\"D+\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5)) !==\
    \ array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n\
    \    [4] => A-\n)\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu1p6egpf.php:66\n\
    Stack trace:\n#0 /tmp/tmpu1p6egpf.php(74): test()\n#1 {main}\n  thrown in /tmp/tmpu1p6egpf.php\
    \ on line 66\n"
  timestamp: 1660005483
- exit_code: 0
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $arr = [];\n    foreach ($grades as $value) {\n        if ($value ==\
    \ 4.0) {\n            $arr[] = \"A+\";\n        } elseif ($value > 3.7) {\n  \
    \          $arr[] = \"A\";\n        } elseif ($value > 3.3) {\n            $arr[]\
    \ = \"A-\";\n        } elseif ($value > 3.0) {\n            $arr[] = \"B+\";\n\
    \        } elseif ($value > 2.7) {\n            $arr[] = \"B\";\n        } elseif\
    \ ($value > 2.3) {\n            $arr[] = \"B-\";\n        } elseif ($value > 2.0)\
    \ {\n            $arr[] = \"C+\";\n        } elseif ($value > 1.7) {\n       \
    \     $arr[] = \"C\";\n        } elseif ($value > 1.3) {\n            $arr[] =\
    \ \"C-\";\n        } elseif ($value > 1.0) {\n            $arr[] = \"D+\";\n \
    \       } elseif ($value > 0.7) {\n            $arr[] = \"D\";\n        } elseif\
    \ ($value > 0.0) {\n            $arr[] = \"D-\";\n        } else {\n         \
    \   $arr[] = \"E\";\n        }\n    }\n    return $arr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660005483
