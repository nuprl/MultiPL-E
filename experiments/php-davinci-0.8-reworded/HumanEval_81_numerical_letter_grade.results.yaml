language: php
name: HumanEval_81_numerical_letter_grade
results:
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $result = [];\n    foreach ($grades as $grade) {\n        switch (true)\
    \ {\n            case $grade >= 4.0:\n                $result[] = \"A+\";\n  \
    \              break;\n            case $grade >= 3.7:\n                $result[]\
    \ = \"A\";\n                break;\n            case $grade >= 3.3:\n        \
    \        $result[] = \"A-\";\n                break;\n            case $grade\
    \ >= 3.0:\n                $result[] = \"B+\";\n                break;\n     \
    \       case $grade >= 2.7:\n                $result[] = \"B\";\n            \
    \    break;\n            case $grade >= 2.3:\n                $result[] = \"B-\"\
    ;\n                break;\n            case $grade >= 2.0:\n                $result[]\
    \ = \"C+\";\n                break;\n            case $grade >= 1.7:\n       \
    \         $result[] = \"C\";\n                break;\n            case $grade\
    \ >= 1.3:\n                $result[] = \"C-\";\n                break;\n     \
    \       case $grade >= 1.0:\n                $result[] = \"D+\";\n           \
    \     break;\n            case $grade >= 0.7:\n                $result[] = \"\
    D\";\n                break;\n            case $grade >= 0.0:\n              \
    \  $result[] = \"D-\";\n                break;\n            default:\n       \
    \         $result[] = \"E\";\n                break;\n        }\n    }\n    return\
    \ $result;\n}\n\n$grades = [4.0, 3, 1.7, 2, 3.5];\nvar_dump(numerical_letter_grade($grades));\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(5) {\n  [0]=>\n  string(2) \"A+\"\n  [1]=>\n  string(2) \"B+\"\n\
    \  [2]=>\n  string(1) \"C\"\n  [3]=>\n  string(2) \"C+\"\n  [4]=>\n  string(2)\
    \ \"A-\"\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvc6gsdeh.php:79\n\
    Stack trace:\n#0 /tmp/tmpvc6gsdeh.php(87): test()\n#1 {main}\n  thrown in /tmp/tmpvc6gsdeh.php\
    \ on line 79\n"
  timestamp: 1659824568
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n\t$new_array = array();\n\tforeach ($grades as $grade) {\n\t\tif ($grade\
    \ >= 4.0) {\n\t\t\t$new_array[] = \"A+\";\n\t\t} elseif ($grade >= 3.7) {\n\t\t\
    \t$new_array[] = \"A\";\n\t\t} elseif ($grade >= 3.3) {\n\t\t\t$new_array[] =\
    \ \"A-\";\n\t\t} elseif ($grade >= 3.0) {\n\t\t\t$new_array[] = \"B+\";\n\t\t\
    } elseif ($grade >= 2.7) {\n\t\t\t$new_array[] = \"B\";\n\t\t} elseif ($grade\
    \ >= 2.3) {\n\t\t\t$new_array[] = \"B-\";\n\t\t} elseif ($grade >= 2.0) {\n\t\t\
    \t$new_array[] = \"C+\";\n\t\t} elseif ($grade >= 1.7) {\n\t\t\t$new_array[] =\
    \ \"C\";\n\t\t} elseif ($grade >= 1.3) {\n\t\t\t$new_array[] = \"C-\";\n\t\t}\
    \ elseif ($grade >= 1.0) {\n\t\t\t$new_array[] = \"D+\";\n\t\t} elseif ($grade\
    \ >= 0.7) {\n\t\t\t$new_array[] = \"D\";\n\t\t} elseif ($grade >= 0.0) {\n\t\t\
    \t$new_array[] = \"D-\";\n\t\t} else {\n\t\t\t$new_array[] = \"E\";\n\t\t}\n\t\
    }\n\treturn $new_array;\n}\necho \"<pre>\";\nprint_r(numerical_letter_grade(array(4.0,\
    \ 3, 1.7, 2, 3.5)));\necho \"</pre>\";\nfunction candidate(...$args) {\n    return\
    \ numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4.0,\
    \ 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.2)) !== array(\"D+\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5)) !==\
    \ array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n\
    \    [4] => A-\n)\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsj3h19i3.php:65\n\
    Stack trace:\n#0 /tmp/tmpsj3h19i3.php(73): test()\n#1 {main}\n  thrown in /tmp/tmpsj3h19i3.php\
    \ on line 65\n"
  timestamp: 1659824568
- exit_code: 0
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $newGrades = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ == 4.0) {\n            $newGrades[] = \"A+\";\n        } elseif ($grade > 3.7)\
    \ {\n            $newGrades[] = \"A\";\n        } elseif ($grade > 3.3) {\n  \
    \          $newGrades[] = \"A-\";\n        } elseif ($grade > 3.0) {\n       \
    \     $newGrades[] = \"B+\";\n        } elseif ($grade > 2.7) {\n            $newGrades[]\
    \ = \"B\";\n        } elseif ($grade > 2.3) {\n            $newGrades[] = \"B-\"\
    ;\n        } elseif ($grade > 2.0) {\n            $newGrades[] = \"C+\";\n   \
    \     } elseif ($grade > 1.7) {\n            $newGrades[] = \"C\";\n        }\
    \ elseif ($grade > 1.3) {\n            $newGrades[] = \"C-\";\n        } elseif\
    \ ($grade > 1.0) {\n            $newGrades[] = \"D+\";\n        } elseif ($grade\
    \ > 0.7) {\n            $newGrades[] = \"D\";\n        } elseif ($grade > 0.0)\
    \ {\n            $newGrades[] = \"D-\";\n        } else {\n            $newGrades[]\
    \ = \"E\";\n        }\n    }\n    return $newGrades;\n}\n$grades = [4.0, 3, 1.7,\
    \ 2, 3.5];\n$result = numerical_letter_grade($grades);\nprint_r($result);\nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => A+\n    [1] => B\n    [2] => C-\n    [3] => C\n  \
    \  [4] => A-\n)\n"
  timestamp: 1659824568
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map(function($grade) {\n        $rounded = round($grade,\
    \ 1);\n        if ($rounded == 4.0) return \"A+\";\n        if ($rounded >= 3.7)\
    \ return \"A\";\n        if ($rounded >= 3.3) return \"A-\";\n        if ($rounded\
    \ >= 3.0) return \"B+\";\n        if ($rounded >= 2.7) return \"B\";\n       \
    \ if ($rounded >= 2.3) return \"B-\";\n        if ($rounded >= 2.0) return \"\
    C+\";\n        if ($rounded >= 1.7) return \"C\";\n        if ($rounded >= 1.3)\
    \ return \"C-\";\n        if ($rounded >= 1.0) return \"D+\";\n        if ($rounded\
    \ >= 0.7) return \"D\";\n        if ($rounded >= 0.0) return \"D-\";\n       \
    \ return \"E\";\n    }, $grades);\n    return $grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4b5k700r.php:49\n\
    Stack trace:\n#0 /tmp/tmp4b5k700r.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp4b5k700r.php\
    \ on line 49\n"
  timestamp: 1659824568
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $output = [];\n    $count = count($grades);\n    $letter_grade = array(\"\
    A+\",\"A\",\"A-\",\"B+\",\"B\",\"B-\",\"C+\",\"C\",\"C-\",\"D+\",\"D\",\"D-\"\
    ,\"E\");\n    $numerical_grade = array(4.0,3.7,3.3,3.0,2.7,2.3,2.0,1.7,1.3,1.0,0.7,0.0,0.0);\n\
    \    $grade_count = count($numerical_grade);\n    for ($i=0; $i < $count; $i++)\
    \ { \n        $value = $grades[$i];\n        for ($j=0; $j < $grade_count; $j++)\
    \ { \n            if ($value >= $numerical_grade[$j]) {\n                $output[]\
    \ = $letter_grade[$j];\n                break;\n            }\n        }\n   \
    \ }\n    return $output;\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6cid8dil.php:47\n\
    Stack trace:\n#0 /tmp/tmp6cid8dil.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp6cid8dil.php\
    \ on line 47\n"
  timestamp: 1659824568
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $result = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ >= 4.0) {\n            $result[] = \"A+\";\n        } elseif ($grade >= 3.7)\
    \ {\n            $result[] = \"A\";\n        } elseif ($grade >= 3.3) {\n    \
    \        $result[] = \"A-\";\n        } elseif ($grade >= 3.0) {\n           \
    \ $result[] = \"B+\";\n        } elseif ($grade >= 2.7) {\n            $result[]\
    \ = \"B\";\n        } elseif ($grade >= 2.3) {\n            $result[] = \"B-\"\
    ;\n        } elseif ($grade >= 2.0) {\n            $result[] = \"C+\";\n     \
    \   } elseif ($grade >= 1.7) {\n            $result[] = \"C\";\n        } elseif\
    \ ($grade >= 1.3) {\n            $result[] = \"C-\";\n        } elseif ($grade\
    \ >= 1.0) {\n            $result[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $result[] = \"D\";\n        } elseif ($grade >= 0.0) {\n    \
    \        $result[] = \"D-\";\n        } else {\n            $result[] = \"E\"\
    ;\n        }\n    }\n    return $result;\n}\n\n$grades = [4.0, 3, 1.7, 2, 3.5];\n\
    print_r(numerical_letter_grade($grades));\n\nfunction candidate(...$args) {\n\
    \    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpplle7moi.php:66\n\
    Stack trace:\n#0 /tmp/tmpplle7moi.php(74): test()\n#1 {main}\n  thrown in /tmp/tmpplle7moi.php\
    \ on line 66\n"
  timestamp: 1659824568
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades_numerical = [];\n    foreach ($grades as $value) {\n        switch\
    \ ($value) {\n            case $value >= 4.0:\n                $grades_numerical[]\
    \ = \"A+\";\n                break;\n            case $value > 3.7:\n        \
    \        $grades_numerical[] = \"A\";\n                break;\n            case\
    \ $value > 3.3:\n                $grades_numerical[] = \"A-\";\n             \
    \   break;\n            case $value > 3.0:\n                $grades_numerical[]\
    \ = \"B+\";\n                break;\n            case $value > 2.7:\n        \
    \        $grades_numerical[] = \"B\";\n                break;\n            case\
    \ $value > 2.3:\n                $grades_numerical[] = \"B-\";\n             \
    \   break;\n            case $value > 2.0:\n                $grades_numerical[]\
    \ = \"C+\";\n                break;\n            case $value > 1.7:\n        \
    \        $grades_numerical[] = \"C\";\n                break;\n            case\
    \ $value > 1.3:\n                $grades_numerical[] = \"C-\";\n             \
    \   break;\n            case $value > 1.0:\n                $grades_numerical[]\
    \ = \"D+\";\n                break;\n            case $value > 0.7:\n        \
    \        $grades_numerical[] = \"D\";\n                break;\n            case\
    \ $value > 0.0:\n                $grades_numerical[] = \"D-\";\n             \
    \   break;\n            case $value = 0.0:\n                $grades_numerical[]\
    \ = \"E\";\n                break;\n        }\n    }\n    return $grades_numerical;\n\
    }\necho \"<pre>\";\nprint_r(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]));\n\
    echo \"</pre>\";\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => A+\n    [1] => B\n    [2] => C-\n    [3] => C\n\
    \    [4] => A-\n)\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9llwgrq2.php:82\n\
    Stack trace:\n#0 /tmp/tmp9llwgrq2.php(87): test()\n#1 {main}\n  thrown in /tmp/tmp9llwgrq2.php\
    \ on line 82\n"
  timestamp: 1659824568
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $arr = [];\n    foreach ($grades as $grade) {\n        if ($grade >=\
    \ 4.0) {\n            $arr[] = \"A+\";\n        } elseif ($grade >= 3.7) {\n \
    \           $arr[] = \"A\";\n        } elseif ($grade >= 3.3) {\n            $arr[]\
    \ = \"A-\";\n        } elseif ($grade >= 3.0) {\n            $arr[] = \"B+\";\n\
    \        } elseif ($grade >= 2.7) {\n            $arr[] = \"B\";\n        } elseif\
    \ ($grade >= 2.3) {\n            $arr[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $arr[] = \"C+\";\n        } elseif ($grade >= 1.7) {\n \
    \           $arr[] = \"C\";\n        } elseif ($grade >= 1.3) {\n            $arr[]\
    \ = \"C-\";\n        } elseif ($grade >= 1.0) {\n            $arr[] = \"D+\";\n\
    \        } elseif ($grade >= 0.7) {\n            $arr[] = \"D\";\n        } elseif\
    \ ($grade >= 0.0) {\n            $arr[] = \"D-\";\n        } else {\n        \
    \    $arr[] = \"E\";\n        }\n    }\n    return $arr;\n}\n\n$grades = [4.0,\
    \ 3, 1.7, 2, 3.5];\n$test = numerical_letter_grade($grades);\nprint_r($test);\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpydb36hnk.php:66\n\
    Stack trace:\n#0 /tmp/tmpydb36hnk.php(74): test()\n#1 {main}\n  thrown in /tmp/tmpydb36hnk.php\
    \ on line 66\n"
  timestamp: 1659824568
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n  $letter_grades = array();\n  $number_of_grades = count($grades);\n  for\
    \ ($i = 0; $i < $number_of_grades; $i++) {\n    if ($grades[$i] >= 4.0) {\n  \
    \    $letter_grades[$i] = \"A+\";\n    } elseif ($grades[$i] >= 3.7) {\n     \
    \ $letter_grades[$i] = \"A\";\n    } elseif ($grades[$i] >= 3.3) {\n      $letter_grades[$i]\
    \ = \"A-\";\n    } elseif ($grades[$i] >= 3.0) {\n      $letter_grades[$i] = \"\
    B+\";\n    } elseif ($grades[$i] >= 2.7) {\n      $letter_grades[$i] = \"B\";\n\
    \    } elseif ($grades[$i] >= 2.3) {\n      $letter_grades[$i] = \"B-\";\n   \
    \ } elseif ($grades[$i] >= 2.0) {\n      $letter_grades[$i] = \"C+\";\n    } elseif\
    \ ($grades[$i] >= 1.7) {\n      $letter_grades[$i] = \"C\";\n    } elseif ($grades[$i]\
    \ >= 1.3) {\n      $letter_grades[$i] = \"C-\";\n    } elseif ($grades[$i] >=\
    \ 1.0) {\n      $letter_grades[$i] = \"D+\";\n    } elseif ($grades[$i] >= 0.7)\
    \ {\n      $letter_grades[$i] = \"D\";\n    } elseif ($grades[$i] >= 0.0) {\n\
    \      $letter_grades[$i] = \"D-\";\n    } else {\n      $letter_grades[$i] =\
    \ \"E\";\n    }\n  }\n  return $letter_grades;\n}\n\n$grades = array(4.0, 3, 1.7,\
    \ 2, 3.5);\nprint_r(numerical_letter_grade($grades));\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmo68skfh.php:66\n\
    Stack trace:\n#0 /tmp/tmpmo68skfh.php(74): test()\n#1 {main}\n  thrown in /tmp/tmpmo68skfh.php\
    \ on line 66\n"
  timestamp: 1659824568
- exit_code: 0
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n  $result = [];\n  foreach ($grades as $gpa) {\n    if ($gpa == 4.0) {\n\
    \      $result[] = \"A+\";\n    } elseif ($gpa > 3.7) {\n      $result[] = \"\
    A\";\n    } elseif ($gpa > 3.3) {\n      $result[] = \"A-\";\n    } elseif ($gpa\
    \ > 3.0) {\n      $result[] = \"B+\";\n    } elseif ($gpa > 2.7) {\n      $result[]\
    \ = \"B\";\n    } elseif ($gpa > 2.3) {\n      $result[] = \"B-\";\n    } elseif\
    \ ($gpa > 2.0) {\n      $result[] = \"C+\";\n    } elseif ($gpa > 1.7) {\n   \
    \   $result[] = \"C\";\n    } elseif ($gpa > 1.3) {\n      $result[] = \"C-\"\
    ;\n    } elseif ($gpa > 1.0) {\n      $result[] = \"D+\";\n    } elseif ($gpa\
    \ > 0.7) {\n      $result[] = \"D\";\n    } elseif ($gpa > 0.0) {\n      $result[]\
    \ = \"D-\";\n    } else {\n      $result[] = \"E\";\n    }\n  }\n  return $result;\n\
    }\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824568
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg9x1efp3.php:62\n\
    Stack trace:\n#0 /tmp/tmpg9x1efp3.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpg9x1efp3.php\
    \ on line 62\n"
  timestamp: 1659824568
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n\t$letter_grades = array();\n\tforeach ($grades as $grade) {\n\t\tif ($grade\
    \ >= 4.0) {\n\t\t\t$letter_grades[] = \"A+\";\n\t\t} elseif ($grade >= 3.7) {\n\
    \t\t\t$letter_grades[] = \"A\";\n\t\t} elseif ($grade >= 3.3) {\n\t\t\t$letter_grades[]\
    \ = \"A-\";\n\t\t} elseif ($grade >= 3.0) {\n\t\t\t$letter_grades[] = \"B+\";\n\
    \t\t} elseif ($grade >= 2.7) {\n\t\t\t$letter_grades[] = \"B\";\n\t\t} elseif\
    \ ($grade >= 2.3) {\n\t\t\t$letter_grades[] = \"B-\";\n\t\t} elseif ($grade >=\
    \ 2.0) {\n\t\t\t$letter_grades[] = \"C+\";\n\t\t} elseif ($grade >= 1.7) {\n\t\
    \t\t$letter_grades[] = \"C\";\n\t\t} elseif ($grade >= 1.3) {\n\t\t\t$letter_grades[]\
    \ = \"C-\";\n\t\t} elseif ($grade >= 1.0) {\n\t\t\t$letter_grades[] = \"D+\";\n\
    \t\t} elseif ($grade >= 0.7) {\n\t\t\t$letter_grades[] = \"D\";\n\t\t} elseif\
    \ ($grade >= 0.0) {\n\t\t\t$letter_grades[] = \"D-\";\n\t\t} else {\n\t\t\t$letter_grades[]\
    \ = \"E\";\n\t\t}\n\t}\n\treturn $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpotnirxrx.php:63\n\
    Stack trace:\n#0 /tmp/tmpotnirxrx.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpotnirxrx.php\
    \ on line 63\n"
  timestamp: 1659824568
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grade_table = array(4.0=>\"A+\", 3.7=>\"A\", 3.3=>\"A-\", 3.0=>\"B+\"\
    , 2.7=>\"B\", 2.3=>\"B-\", 2.0=>\"C+\", 1.7=>\"C\", 1.3=>\"C-\", 1.0=>\"D+\",\
    \ 0.7=>\"D\", 0.0=>\"D-\", -1=>\"E\");\n    $grades_numerical = array();\n   \
    \ foreach ($grades as $grade) {\n        $current_grade = $grade;\n        if\
    \ ($grade<=0) {\n            $current_grade = -1;\n        }\n        if ($grade>=4.0)\
    \ {\n            $current_grade = 4.0;\n        }\n        $grades_numerical[]\
    \ = $current_grade;\n    }\n    arsort($grades_numerical);\n    $grades_numerical\
    \ = array_unique($grades_numerical);\n    $letter_grades = array();\n    foreach\
    \ ($grades_numerical as $grade) {\n        $letter_grades[] = $grade_table[$grade];\n\
    \    }\n    return $letter_grades;\n}\nfunction candidate(...$args) {\n    return\
    \ numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4.0,\
    \ 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.2)) !== array(\"D+\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5)) !==\
    \ array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nDeprecated: Implicit conversion from float 3.7 to int loses precision\
    \ in /tmp/tmpe70wmdce.php on line 25\n\nDeprecated: Implicit conversion from float\
    \ 3.3 to int loses precision in /tmp/tmpe70wmdce.php on line 25\n\nDeprecated:\
    \ Implicit conversion from float 2.7 to int loses precision in /tmp/tmpe70wmdce.php\
    \ on line 25\n\nDeprecated: Implicit conversion from float 2.3 to int loses precision\
    \ in /tmp/tmpe70wmdce.php on line 25\n\nDeprecated: Implicit conversion from float\
    \ 1.7 to int loses precision in /tmp/tmpe70wmdce.php on line 25\n\nDeprecated:\
    \ Implicit conversion from float 1.3 to int loses precision in /tmp/tmpe70wmdce.php\
    \ on line 25\n\nDeprecated: Implicit conversion from float 0.7 to int loses precision\
    \ in /tmp/tmpe70wmdce.php on line 25\n\nDeprecated: Implicit conversion from float\
    \ 3.5 to int loses precision in /tmp/tmpe70wmdce.php on line 41\n\nDeprecated:\
    \ Implicit conversion from float 1.7 to int loses precision in /tmp/tmpe70wmdce.php\
    \ on line 41\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe70wmdce.php:50\n\
    Stack trace:\n#0 /tmp/tmpe70wmdce.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpe70wmdce.php\
    \ on line 50\n"
  timestamp: 1659824568
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n\t$letter_grade = [];\n\tforeach ($grades as $key => $value) {\n\t\tif ($value\
    \ >= 4.0) {\n\t\t\t$letter_grade[] = \"A+\";\n\t\t} elseif ($value >= 3.7) {\n\
    \t\t\t$letter_grade[] = \"A\";\n\t\t} elseif ($value >= 3.3) {\n\t\t\t$letter_grade[]\
    \ = \"A-\";\n\t\t} elseif ($value >= 3.0) {\n\t\t\t$letter_grade[] = \"B+\";\n\
    \t\t} elseif ($value >= 2.7) {\n\t\t\t$letter_grade[] = \"B\";\n\t\t} elseif ($value\
    \ >= 2.3) {\n\t\t\t$letter_grade[] = \"B-\";\n\t\t} elseif ($value >= 2.0) {\n\
    \t\t\t$letter_grade[] = \"C+\";\n\t\t} elseif ($value >= 1.7) {\n\t\t\t$letter_grade[]\
    \ = \"C\";\n\t\t} elseif ($value >= 1.3) {\n\t\t\t$letter_grade[] = \"C-\";\n\t\
    \t} elseif ($value >= 1.0) {\n\t\t\t$letter_grade[] = \"D+\";\n\t\t} elseif ($value\
    \ >= 0.7) {\n\t\t\t$letter_grade[] = \"D\";\n\t\t} elseif ($value >= 0.0) {\n\t\
    \t\t$letter_grade[] = \"D-\";\n\t\t} else {\n\t\t\t$letter_grade[] = \"E\";\n\t\
    \t}\n\t}\n\treturn $letter_grade;\n}\nfunction candidate(...$args) {\n    return\
    \ numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4.0,\
    \ 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.2)) !== array(\"D+\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5)) !==\
    \ array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjreo68_l.php:62\n\
    Stack trace:\n#0 /tmp/tmpjreo68_l.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpjreo68_l.php\
    \ on line 62\n"
  timestamp: 1659824568
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = [];\n    foreach ($grades as $grade) {\n        switch\
    \ (true) {\n            case $grade >= 4.0:\n                $letter_grades[]\
    \ = \"A+\";\n                break;\n            case $grade >= 3.7:\n       \
    \         $letter_grades[] = \"A\";\n                break;\n            case\
    \ $grade >= 3.3:\n                $letter_grades[] = \"A-\";\n               \
    \ break;\n            case $grade >= 3.0:\n                $letter_grades[] =\
    \ \"B+\";\n                break;\n            case $grade >= 2.7:\n         \
    \       $letter_grades[] = \"B\";\n                break;\n            case $grade\
    \ >= 2.3:\n                $letter_grades[] = \"B-\";\n                break;\n\
    \            case $grade >= 2.0:\n                $letter_grades[] = \"C+\";\n\
    \                break;\n            case $grade >= 1.7:\n                $letter_grades[]\
    \ = \"C\";\n                break;\n            case $grade >= 1.3:\n        \
    \        $letter_grades[] = \"C-\";\n                break;\n            case\
    \ $grade >= 1.0:\n                $letter_grades[] = \"D+\";\n               \
    \ break;\n            case $grade >= 0.7:\n                $letter_grades[] =\
    \ \"D\";\n                break;\n            case $grade >= 0.0:\n          \
    \      $letter_grades[] = \"D-\";\n                break;\n            default:\n\
    \                $letter_grades[] = \"E\";\n                break;\n        }\n\
    \    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args) {\n    return\
    \ numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4.0,\
    \ 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.2)) !== array(\"D+\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5)) !==\
    \ array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9585gfne.php:77\n\
    Stack trace:\n#0 /tmp/tmp9585gfne.php(85): test()\n#1 {main}\n  thrown in /tmp/tmp9585gfne.php\
    \ on line 77\n"
  timestamp: 1659824568
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n   $output_grades = array();\n   foreach ($grades as $grade) {\n      switch\
    \ ($grade) {\n         case $grade > 3.7:\n            $output_grades[] = \"A+\"\
    ;\n            break;\n         case $grade > 3.3:\n            $output_grades[]\
    \ = \"A\";\n            break;\n         case $grade > 3.0:\n            $output_grades[]\
    \ = \"A-\";\n            break;\n         case $grade > 2.7:\n            $output_grades[]\
    \ = \"B+\";\n            break;\n         case $grade > 2.3:\n            $output_grades[]\
    \ = \"B\";\n            break;\n         case $grade > 2.0:\n            $output_grades[]\
    \ = \"B-\";\n            break;\n         case $grade > 1.7:\n            $output_grades[]\
    \ = \"C+\";\n            break;\n         case $grade > 1.3:\n            $output_grades[]\
    \ = \"C\";\n            break;\n         case $grade > 1.0:\n            $output_grades[]\
    \ = \"C-\";\n            break;\n         case $grade > 0.7:\n            $output_grades[]\
    \ = \"D+\";\n            break;\n         case $grade > 0.0:\n            $output_grades[]\
    \ = \"D\";\n            break;\n         case $grade == 0.0:\n            $output_grades[]\
    \ = \"E\";\n            break;\n         default:\n            break;\n      }\n\
    \   }\n   return $output_grades;\n}\n\n$grades = array(4.0, 3, 1.7, 2, 3.5);\n\
    $output_grades = numerical_letter_grade($grades);\nprint_r($output_grades);\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw5eq7kuc.php:79\n\
    Stack trace:\n#0 /tmp/tmpw5eq7kuc.php(87): test()\n#1 {main}\n  thrown in /tmp/tmpw5eq7kuc.php\
    \ on line 79\n"
  timestamp: 1659824568
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $output = [];\n    foreach ($grades as $grade) {\n        switch ($grade)\
    \ {\n            case ($grade > 4.0):\n                $output[] = \"A+\";\n \
    \               break;\n            case ($grade > 3.7):\n                $output[]\
    \ = \"A\";\n                break;\n            case ($grade > 3.3):\n       \
    \         $output[] = \"A-\";\n                break;\n            case ($grade\
    \ > 3.0):\n                $output[] = \"B+\";\n                break;\n     \
    \       case ($grade > 2.7):\n                $output[] = \"B\";\n           \
    \     break;\n            case ($grade > 2.3):\n                $output[] = \"\
    B-\";\n                break;\n            case ($grade > 2.0):\n            \
    \    $output[] = \"C+\";\n                break;\n            case ($grade > 1.7):\n\
    \                $output[] = \"C\";\n                break;\n            case\
    \ ($grade > 1.3):\n                $output[] = \"C-\";\n                break;\n\
    \            case ($grade > 1.0):\n                $output[] = \"D+\";\n     \
    \           break;\n            case ($grade > 0.7):\n                $output[]\
    \ = \"D\";\n                break;\n            case ($grade > 0.0):\n       \
    \         $output[] = \"D-\";\n                break;\n            case ($grade\
    \ == 0.0):\n                $output[] = \"E\";\n                break;\n     \
    \   }\n    }\n    return $output;\n}\necho \"Using a switch statement: \";\nprint_r(numerical_letter_grade([4.0,\
    \ 3, 1.7, 2, 3.5]));\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Using a switch statement: Array\n(\n    [0] => A\n    [1] => B\n    [2]\
    \ => C-\n    [3] => C\n    [4] => A-\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp_8leonr3.php:79\nStack trace:\n#0 /tmp/tmp_8leonr3.php(87):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp_8leonr3.php on line 79\n"
  timestamp: 1659824568
- exit_code: 0
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grade_array = array();\n    for ($i = 0; $i < count($grades); $i++)\
    \ {\n        if ($grades[$i] == 4.0) {\n            $grade_array[$i] = \"A+\"\
    ;\n        } elseif ($grades[$i] > 3.7) {\n            $grade_array[$i] = \"A\"\
    ;\n        } elseif ($grades[$i] > 3.3) {\n            $grade_array[$i] = \"A-\"\
    ;\n        } elseif ($grades[$i] > 3.0) {\n            $grade_array[$i] = \"B+\"\
    ;\n        } elseif ($grades[$i] > 2.7) {\n            $grade_array[$i] = \"B\"\
    ;\n        } elseif ($grades[$i] > 2.3) {\n            $grade_array[$i] = \"B-\"\
    ;\n        } elseif ($grades[$i] > 2.0) {\n            $grade_array[$i] = \"C+\"\
    ;\n        } elseif ($grades[$i] > 1.7) {\n            $grade_array[$i] = \"C\"\
    ;\n        } elseif ($grades[$i] > 1.3) {\n            $grade_array[$i] = \"C-\"\
    ;\n        } elseif ($grades[$i] > 1.0) {\n            $grade_array[$i] = \"D+\"\
    ;\n        } elseif ($grades[$i] > 0.7) {\n            $grade_array[$i] = \"D\"\
    ;\n        } elseif ($grades[$i] > 0.0) {\n            $grade_array[$i] = \"D-\"\
    ;\n        } else {\n            $grade_array[$i] = \"E\";\n        }\n    }\n\
    \    return $grade_array;\n}\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824568
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n  $letter_grades = [];\n  foreach ($grades as $grade) {\n    if ($grade >=\
    \ 4.0) {\n      $letter_grades[] = \"A+\";\n    } elseif ($grade >= 3.7) {\n \
    \     $letter_grades[] = \"A\";\n    } elseif ($grade >= 3.3) {\n      $letter_grades[]\
    \ = \"A-\";\n    } elseif ($grade >= 3.0) {\n      $letter_grades[] = \"B+\";\n\
    \    } elseif ($grade >= 2.7) {\n      $letter_grades[] = \"B\";\n    } elseif\
    \ ($grade >= 2.3) {\n      $letter_grades[] = \"B-\";\n    } elseif ($grade >=\
    \ 2.0) {\n      $letter_grades[] = \"C+\";\n    } elseif ($grade >= 1.7) {\n \
    \     $letter_grades[] = \"C\";\n    } elseif ($grade >= 1.3) {\n      $letter_grades[]\
    \ = \"C-\";\n    } elseif ($grade >= 1.0) {\n      $letter_grades[] = \"D+\";\n\
    \    } elseif ($grade >= 0.7) {\n      $letter_grades[] = \"D\";\n    } elseif\
    \ ($grade >= 0.0) {\n      $letter_grades[] = \"D-\";\n    } else {\n      $letter_grades[]\
    \ = \"E\";\n    }\n  }\n  return $letter_grades;\n}\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcgwjg684.php:62\n\
    Stack trace:\n#0 /tmp/tmpcgwjg684.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpcgwjg684.php\
    \ on line 62\n"
  timestamp: 1659824568
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ > 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif ($grade >\
    \ 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade > 3.3)\
    \ {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade > 3.0) {\n\
    \            $letter_grades[] = \"B+\";\n        } elseif ($grade > 2.7) {\n \
    \           $letter_grades[] = \"B\";\n        } elseif ($grade > 2.3) {\n   \
    \         $letter_grades[] = \"B-\";\n        } elseif ($grade > 2.0) {\n    \
    \        $letter_grades[] = \"C+\";\n        } elseif ($grade > 1.7) {\n     \
    \       $letter_grades[] = \"C\";\n        } elseif ($grade > 1.3) {\n       \
    \     $letter_grades[] = \"C-\";\n        } elseif ($grade > 1.0) {\n        \
    \    $letter_grades[] = \"D+\";\n        } elseif ($grade > 0.7) {\n         \
    \   $letter_grades[] = \"D\";\n        } elseif ($grade > 0.0) {\n           \
    \ $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[] =\
    \ \"E\";\n        }\n    }\n    return $letter_grades;\n}\n$grades = [4.0, 3,\
    \ 1.7, 2, 3.5];\necho \"<pre>\";\nprint_r(numerical_letter_grade($grades));\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => A\n    [1] => B\n    [2] => C-\n    [3] => C\n\
    \    [4] => A-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpky0q1mv1.php:65\n\
    Stack trace:\n#0 /tmp/tmpky0q1mv1.php(73): test()\n#1 {main}\n  thrown in /tmp/tmpky0q1mv1.php\
    \ on line 65\n"
  timestamp: 1659824568
