name: HumanEval_103_rounded_avg
language: php
prompt: "<?php\n// You are given two positive integers n and m, and your task is to\
  \ compute the\n// average of the integers from n through m (including n and m).\
  \ \n// Round the answer to the nearest integer and convert that to binary.\n// If\
  \ n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"\
  0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\
  \n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg($n, $m) {\n"
tests: "function candidate(...$args) {\n    return rounded_avg(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(1, 5) !== \"0b11\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(7, 13) !== \"0b1010\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(964, 977) !== \"0b1111001010\") { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(996, 997) !== \"0b1111100100\"\
  ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(560, 851) !== \"\
  0b1011000010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(185,\
  \ 546) !== \"0b101101110\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(362,\
  \ 496) !== \"0b110101101\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(350,\
  \ 902) !== \"0b1001110010\") { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(197, 233) !== \"0b11010111\") { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(7, 5) !== -1) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(5, 1) !== -1) { throw new Exception(\"Test failed!\"); }\n  \
  \  if (candidate(5, 5) !== \"0b101\") { throw new Exception(\"Test failed!\"); }\n\
  }\n\ntest();"
completions: ["    if ($n > $m) {\n        return -1;\n    }\n    $sum = $n;\n   \
    \ for ($i = $n + 1; $i <= $m; $i++) {\n        $sum += $i;\n    }\n    $avg =\
    \ round($sum / ($m - $n + 1));\n    return '0b' . decbin($avg);\n}\necho rounded_avg(1,\
    \ 5) . \"\\n\";\necho rounded_avg(7, 5) . \"\\n\";\necho rounded_avg(10, 20) .\
    \ \"\\n\";\necho rounded_avg(20, 33) . \"\\n\";", "\tif ($n > $m) {\n\t\treturn\
    \ -1;\n\t}\n\t$sum = 0;\n\tfor ($i = $n; $i <= $m; $i++) {\n\t\t$sum += $i;\n\t\
    }\n\t$sum = $sum / ($m - $n + 1);\n\t$sum = round($sum);\n\t$sum = decbin($sum);\n\
    \treturn '0b' . $sum;\n}\n", "    $sum = 0;\n    if ($n > $m) {\n        return\
    \ -1;\n    }\n    while ($n <= $m) {\n        $sum += $n;\n        $n++;\n   \
    \ }\n    $avg = round($sum / ($m - $n + 1));\n    return decbin($avg);\n}\necho\
    \ rounded_avg(1, 5) . \"\\n\";\necho rounded_avg(7, 5) . \"\\n\";\necho rounded_avg(10,\
    \ 20) . \"\\n\";\necho rounded_avg(20, 33) . \"\\n\";", "    // Your code here\n\
    }", "    if ($n > $m) {\n        return -1;\n    }\n    $sum = array_sum(range($n,\
    \ $m));\n    $rounded = round($sum / ($m - $n + 1));\n    return \"0b\" . decbin($rounded);\n\
    }", "    if ($n > $m) return -1;\n    $sum = 0;\n    for ($i = $n; $i <= $m; $i++)\
    \ {\n        $sum += $i;\n    }\n    $avg = round($sum / ($m - $n + 1));\n   \
    \ return \"0b\" . decbin($avg);\n}\n\necho rounded_avg(1, 5) . \"\\n\";\necho\
    \ rounded_avg(7, 5) . \"\\n\";\necho rounded_avg(10, 20) . \"\\n\";\necho rounded_avg(20,\
    \ 33) . \"\\n\";", "  if ($n > $m) return -1;\n  $avg = ($n + $m) / 2;\n  return\
    \ decbin(round($avg));\n}\necho rounded_avg(2, 3) . PHP_EOL;\necho rounded_avg(2,\
    \ 2) . PHP_EOL;\necho rounded_avg(1, 5) . PHP_EOL;\necho rounded_avg(7, 5) . PHP_EOL;\n\
    echo rounded_avg(10, 20) . PHP_EOL;\necho rounded_avg(20, 33) . PHP_EOL;", " \
    \   // If n is greater than m, return -1.\n    if ($n > $m) {\n        return\
    \ -1;\n    }\n    // Find the sum of all integers between n and m and find the\
    \ average.\n    $sum = 0;\n    for ($i = $n; $i <= $m; $i++) {\n        $sum +=\
    \ $i;\n    }\n    $average = $sum / ($m - $n + 1);\n    // Round the average to\
    \ the nearest integer.\n    $average = round($average);\n    // Convert that integer\
    \ to binary.\n    $average = decbin($average);\n    // Return binary.\n    return\
    \ \"0b$average\";\n}\n", "    if ($n > $m) {\n        return -1;\n    }\n    $avg\
    \ = floor(($n + $m) / 2);\n    return decbin($avg);\n}\n\necho rounded_avg(1,\
    \ 5) . \"\\n\";\necho rounded_avg(7, 5) . \"\\n\";\necho rounded_avg(10, 20) .\
    \ \"\\n\";\necho rounded_avg(20, 33) . \"\\n\";", "  if ($n > $m) return -1;\n\
    \  $avg = round(($n + $m) / 2);\n  return '0b' . decbin($avg);\n}\n\necho rounded_avg(1,\
    \ 5) . PHP_EOL;\necho rounded_avg(7, 5) . PHP_EOL;\necho rounded_avg(10, 20) .\
    \ PHP_EOL;\necho rounded_avg(20, 33) . PHP_EOL;", "\tif ($n > $m) return -1;\n\
    \t$average = ($n + $m) / 2;\n\t$rounded = round($average);\n\t$binary = decbin($rounded);\n\
    \treturn \"0b$binary\";\n}\n\necho rounded_avg(1, 5), \"\\n\";\necho rounded_avg(7,\
    \ 5), \"\\n\";\necho rounded_avg(10, 20), \"\\n\";\necho rounded_avg(20, 33),\
    \ \"\\n\";", "    if ($n > $m) {\n        return -1;\n    }\n    $sum = $n;\n\
    \    for ($i = $n + 1; $i <= $m; $i++) {\n        $sum += $i;\n    }\n    $avg\
    \ = round($sum / ($m - $n + 1));\n    return decbin($avg);\n}\necho rounded_avg(1,\
    \ 5) . PHP_EOL;\necho rounded_avg(7, 5) . PHP_EOL;\necho rounded_avg(10, 20) .\
    \ PHP_EOL;\necho rounded_avg(20, 33) . PHP_EOL;", "  if ($n > $m) {\n    return\
    \ -1;\n  }\n  return decbin(round(($n + $m) / 2));\n}\n\necho rounded_avg(1, 5)\
    \ . \"\\n\";\necho rounded_avg(7, 5) . \"\\n\";\necho rounded_avg(10, 20) . \"\
    \\n\";\necho rounded_avg(20, 33) . \"\\n\";", "\tif ($n > $m) return -1;\n\t$avg\
    \ = round(($n + $m) / 2);\n\treturn \"0b\" . decbin($avg);\n}\necho rounded_avg(1,\
    \ 5) . \"\\n\";\necho rounded_avg(7, 5) . \"\\n\";\necho rounded_avg(10, 20) .\
    \ \"\\n\";\necho rounded_avg(20, 33) . \"\\n\";", "    if ($n > $m) {\n      \
    \  return -1;\n    } else {\n        $average = ceil(($n + $m) / 2);\n       \
    \ return \"0b\" . decbin($average);\n    }\n}", "  $sum = 0;\n  for ($i = $n;\
    \ $i <= $m; $i++) {\n    $sum += $i;\n  }\n  if ($n > $m) {\n    return -1;\n\
    \  }\n  return decbin(round($sum / ($m - $n + 1)));\n}\n\necho rounded_avg(1,\
    \ 5) . PHP_EOL;\necho rounded_avg(7, 5) . PHP_EOL;\necho rounded_avg(10, 20) .\
    \ PHP_EOL;\necho rounded_avg(20, 33) . PHP_EOL;", "    $avg = round(($n + $m)\
    \ / 2);\n    return $n > $m ? -1 : decbin($avg);\n}\necho rounded_avg(10, 20);",
  "    if ($n > $m) return -1;\n    $sum = $n;\n    $count = 1;\n    while ($n !=\
    \ $m) {\n        $n++;\n        $sum += $n;\n        $count++;\n    }\n    $average\
    \ = (int) ($sum / $count);\n    return \"0b\" . decbin($average);\n}\necho rounded_avg(1,\
    \ 5) . \"\\n\";\necho rounded_avg(7, 5) . \"\\n\";\necho rounded_avg(10, 20) .\
    \ \"\\n\";\necho rounded_avg(20, 33) . \"\\n\";\necho rounded_avg(33, 20) . \"\
    \\n\";", "    if ($n > $m) {\n        return -1;\n    }\n    $sum = 0;\n    for\
    \ ($i = $n; $i <= $m; $i++) {\n        $sum += $i;\n    }\n    $average = round($sum\
    \ / ($m - $n + 1));\n    return \"0b\" . decbin($average);\n}\necho rounded_avg(1,\
    \ 5) . PHP_EOL;\necho rounded_avg(7, 5) . PHP_EOL;\necho rounded_avg(10, 20) .\
    \ PHP_EOL;\necho rounded_avg(20, 33) . PHP_EOL;", "\tif ($n > $m) {\n\t\treturn\
    \ -1;\n\t}\n\t$sum = 0;\n\tfor ($i = $n; $i <= $m; $i++) {\n\t\t$sum += $i;\n\t\
    }\n\t$avg = round($sum / ($m - $n + 1));\n\treturn '0b' . decbin($avg);\n}\n\n\
    echo rounded_avg(1, 5) . \"\\n\";\necho rounded_avg(7, 5) . \"\\n\";\necho rounded_avg(10,\
    \ 20) . \"\\n\";\necho rounded_avg(20, 33) . \"\\n\";"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
