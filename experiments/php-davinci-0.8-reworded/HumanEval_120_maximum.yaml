name: HumanEval_120_maximum
language: php
prompt: "<?php\n// Given an array arr of integers and a positive integer k, return\
  \ a sorted array \n// of length k with the maximum k numbers in arr.\n// Example\
  \ 1:\n// >>> maximum(array(-3, -4, 5), 3)\n// array(-4, -3, 5)\n// Example 2:\n\
  // >>> maximum(array(4, -4, 4), 2)\n// array(4, 4)\n// Example 3:\n// >>> maximum(array(-3,\
  \ 2, 1, 2, -1, -2, 1), 1)\n// array(2)\n// Note:\n// 1. The length of the array\
  \ will be in the range of [1, 1000].\n// 2. The elements in the array will be in\
  \ the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
  \ $k) {\n"
tests: "function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) {\
  \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2)\
  \ !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
  \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\");\
  \ }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20, 123))\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123, 20,\
  \ 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8, 0,\
  \ 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
  \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\");\
  \ }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !== array(-10,\
  \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2,\
  \ 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
  ); }\n}\n\ntest();"
completions: ["    // your code here\n}", "  $max = array();\n  if(empty($arr)){\n\
    \    return $max;\n  }\n  if(count($arr) <= $k){\n    return $arr;\n  }\n  for($i\
    \ = 0; $i < $k; $i++){\n    $max[] = array_shift($arr);\n  }\n  foreach($arr as\
    \ $value){\n    for($i = 0; $i < $k; $i++){\n      if($value > $max[$i]){\n  \
    \      $max[] = $value;\n        unset($max[$i]);\n        sort($max);\n     \
    \   break;\n      }\n    }\n  }\n  return $max;\n}\n", "    $array = array();\n\
    \    if ($k > count($arr)) {\n        return $arr;\n    } else {\n        for\
    \ ($i = 0; $i < $k; $i++) {\n            $max = max($arr);\n            array_push($array,\
    \ $max);\n            unset($arr[array_search($max, $arr)]);\n        }\n    \
    \    return $array;\n    }\n}\nprint_r(maximum(array(-3, -4, 5), 3));\nprint_r(maximum(array(4,\
    \ -4, 4), 2));\nprint_r(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));", "    $res\
    \ = [];\n    for ($i = 0; $i < count($arr); $i++) {\n        // insert number\
    \ into correct index\n        $res = insert($res, $arr[$i]);\n        // make\
    \ sure res is k long\n        if (count($res) > $k) {\n            array_pop($res);\n\
    \        }\n    }\n    return $res;\n}\n", "\tif ($k == 0) {\n\t\treturn array();\n\
    \t}\n\t$result = array();\n\tfor ($i = 0; $i < $k; $i++) {\n\t\t$temp = $arr[$i];\n\
    \t\t$index = $i;\n\t\tfor ($j = $i + 1; $j < count($arr); $j++) {\n\t\t\tif ($arr[$j]\
    \ > $temp) {\n\t\t\t\t$temp = $arr[$j];\n\t\t\t\t$index = $j;\n\t\t\t}\n\t\t}\n\
    \t\t$result[] = $temp;\n\t\tunset($arr[$index]);\n\t\t$arr = array_values($arr);\n\
    \t}\n\treturn $result;\n}\n$arr = array(-3, -4, 5);\n$result = maximum($arr, 3);\n\
    print_r($result);\necho \"\\n\";\n$arr = array(4, -4, 4);\n$result = maximum($arr,\
    \ 2);\nprint_r($result);\necho \"\\n\";\n$arr = array(-3, 2, 1, 2, -1, -2, 1);\n\
    $result = maximum($arr, 1);\nprint_r($result);\necho \"\\n\";", "    $return =\
    \ array();\n    foreach ($arr as $number) {\n        // If we already have $k\
    \ numbers, we have to check if $number is bigger than the smallest element of\
    \ the array\n        if (count($return) == $k) {\n            if ($number > min($return))\
    \ {\n                // $number is bigger than the smallest element of the array,\
    \ but we have to remove it from the array\n                unset($return[array_search(min($return),\
    \ $return)]);\n                // And add $number to the array\n             \
    \   $return[] = $number;\n            }\n        } else {\n            // Array\
    \ is not already full so we add $number to the array\n            $return[] =\
    \ $number;\n        }\n    }\n    return $return;\n}\n\nprint_r(maximum(array(-3,\
    \ -4, 5), 3));\nprint_r(maximum(array(4, -4, 4), 2));\nprint_r(maximum(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1));", "    if ($k == 0) return [];\n    $heap = new SplMinHeap();\n\
    \    foreach ($arr as $num) {\n        $heap->insert($num);\n        if ($heap->count()\
    \ > $k) {\n            $heap->extract();\n        }\n    }\n    return iterator_to_array($heap);\n\
    }\n\nforeach ([\n    [[-3, -4, 5], 3],\n    [[4, -4, 4], 2],\n    [[-3, 2, 1,\
    \ 2, -1, -2, 1], 1],\n] as $item) {\n    $res = maximum($item[0], $item[1]);\n\
    \    echo implode(', ', $res), \"\\n\";\n}", "  if (count($arr) <= $k) return\
    \ $arr;\n  $max = array_slice($arr, 0, $k);\n  sort($max);\n  for ($i = $k; $i\
    \ < count($arr); $i++) {\n    $j = 0;\n    while ($j < $k && $arr[$i] < $max[$j])\
    \ {\n      $j++;\n    }\n    if ($j == $k) continue;\n    array_splice($max, $j,\
    \ 0, array($arr[$i]));\n    array_pop($max);\n  }\n  return $max;\n}\n\nvar_dump(maximum(array(-3,\
    \ -4, 5), 3));\nvar_dump(maximum(array(4, -4, 4), 2));\nvar_dump(maximum(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1));", "    $res = array();\n    $res = array_slice($arr,\
    \ 0, $k);\n    sort($res);\n    for ($i = $k; $i < count($arr); $i++) {\n    \
    \    if ($arr[$i] > $res[0]) {\n            $res[0] = $arr[$i];\n            sort($res);\n\
    \        }\n    }\n    return $res;\n}\nprint_r(maximum(array(-3, -4, 5), 3));\n\
    print_r(maximum(array(4, -4, 4), 2));\nprint_r(maximum(array(-3, 2, 1, 2, -1,\
    \ -2, 1), 1));", "    if (empty($arr)) {\n        return [];\n    }\n    $len\
    \ = count($arr);\n    $left = 0;\n    $right = $len - 1;\n    $index = partition($arr,\
    \ $left, $right);\n    while ($index !== $k - 1) {\n        if ($index > $k -\
    \ 1) {\n            $right = $index - 1;\n            $index = partition($arr,\
    \ $left, $right);\n        } else {\n            $left = $index + 1;\n       \
    \     $index = partition($arr, $left, $right);\n        }\n    }\n    return array_slice($arr,\
    \ 0, $k);\n}", "    $maxHeap = new SplMaxHeap();\n    for ($i = 0; $i < count($arr);\
    \ $i++) {\n        $maxHeap->insert($arr[$i]);\n    }\n    $res = array();\n \
    \   for ($i = 0; $i < $k; $i++) {\n        $res[] = $maxHeap->extract();\n   \
    \ }\n    return $res;\n}\n", "    if (count($arr) === $k) return $arr;\n    if\
    \ ($k === 1) return array(max($arr));\n    $max = $arr[0];\n    for ($i = 1; $i\
    \ < $k; $i++) {\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    $result = array($max);\n    for ($i = $k; $i < count($arr);\
    \ $i++) {\n        if ($arr[$i] > $max) {\n            $result[] = $arr[$i];\n\
    \            $max = $arr[$i];\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}", "    $newArr = array();\n    $count = count($arr);\n    if($count\
    \ == $k) {\n        return $arr;\n    } else {\n        $i = 0;\n        while($i\
    \ <= $k) {\n            array_push($newArr, max($arr));\n            $key = array_search(max($arr),\
    \ $arr);\n            unset($arr[$key]);\n            $i++;\n        }\n     \
    \   return $newArr;\n    }\n}\nprint_r(maximum(array(-3, -4, 5), 3));\nprint_r(maximum(array(4,\
    \ -4, 4), 2));\nprint_r(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));", "    if\
    \ ($k >= count($arr)) {\n        return $arr;\n    }\n\n    // Add code here\n\
    }\n", "    $len = count($arr);\n    if ($len == 0) {\n        return $arr;\n \
    \   }\n    // 1. Sort the array (by default the sorting is in ascending order)\n\
    \    sort($arr);\n    // 2. Return the last k elements\n    return array_slice($arr,\
    \ -$k);\n}", "    $uniqueValues = array_unique($arr);\n    $max_values = array();\n\
    \    $result = array();\n    $i = 0;\n    foreach ($uniqueValues as $value) {\n\
    \        $max_values[$i]['key'] = $value;\n        $max_values[$i]['count'] =\
    \ array_count_values($arr)[$value];\n        $i++;\n    }\n    array_multisort(array_column($max_values,\
    \ 'count'), SORT_DESC, array_column($max_values, 'key'), SORT_DESC, $max_values);\n\
    \    for ($i = 0; $i < $k; $i++) {\n        for ($j = 0; $j < $max_values[$i]['count'];\
    \ $j++) {\n            $result[] = $max_values[$i]['key'];\n        }\n    }\n\
    \    return $result;\n}\n\n$arr = array(-3, -4, 5);\n$k = 3;\necho json_encode(maximum($arr,\
    \ $k));", "    $curr = array();\n    $k = min($k, count($arr));\n    for ($i =\
    \ 0; $i < $k; $i++) {\n        $curr[] = $arr[$i];\n    }\n    sort($curr);\n\
    \    for ($i = $k; $i < count($arr); $i++) {\n        if ($arr[$i] > $curr[0])\
    \ {\n            $curr[0] = $arr[$i];\n            sort($curr);\n        }\n \
    \   }\n    return $curr;\n}", "    $count = count($arr);\n    $maxs = array();\n\
    \    for ($i = 0; $i < $count; $i++) {\n        if (count($maxs) < $k) {\n   \
    \         $maxs[] = $arr[$i];\n        } else {\n            $min = min($maxs);\n\
    \            if ($arr[$i] > $min) {\n                $maxs[array_search($min,\
    \ $maxs)] = $arr[$i];\n            }\n        }\n    }\n    sort($maxs);\n   \
    \ return $maxs;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\necho PHP_EOL;\nprint_r(maximum($arr,\
    \ $k));", "\tusort($arr, function($a, $b) {\n\t\treturn $a > $b ? -1 : ($a < $b\
    \ ? 1 : 0);\n\t});\n\t\n\treturn array_slice($arr, 0, $k);\n}\n", "\t$heap = new\
    \ SplMaxHeap();\n\tforeach ($arr as $value) {\n\t\t$heap->insert($value);\n\t\
    }\n\t$result = array();\n\twhile ($k > 0) {\n\t\t$result[] = $heap->extract();\n\
    \t\t$k--;\n\t}\n\treturn $result;\n}\n", "    $sortedArr = [];\n    for ($i =\
    \ 0; $i < $k; $i++) {\n        $number = -infinity;\n        $numberIndex = 0;\n\
    \        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j] > $number)\
    \ {\n                $number = $arr[$j];\n                $numberIndex = $j;\n\
    \            }\n        }\n        $sortedArr[] = $number;\n        array_splice($arr,\
    \ $numberIndex, 1);\n    }\n    return $sortedArr;\n}\nprint_r(maximum(array(-3,\
    \ -4, 5), 3));\nprint_r(maximum(array(4, -4, 4), 2));\nprint_r(maximum(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1));", "    $len = count($arr);\n    $min = min($arr);\n\
    \    $max = max($arr);\n    $index = $min - 1;\n    $buckets = [];\n    for ($i\
    \ = 0; $i < $len; $i++) {\n        $buckets[$arr[$i] - $index] = 1;\n    }\n \
    \   $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $result[] = $max;\n\
    \        $buckets[$max - $index] = 0;\n        $max = getPrev($buckets, $index,\
    \ $max);\n    }\n    return $result;\n}\n", "    sort($arr);\n    $arr = array_slice($arr,\
    \ -$k);\n    return $arr;\n}\n", "    $arr_length = count($arr);\n    if ($k >\
    \ $arr_length) {\n        $k = $arr_length;\n    }\n    $result = array();\n \
    \   if ($k === 1) {\n        $result[] = max($arr);\n        return $result;\n\
    \    }\n    $copy = $arr;\n    for ($i = 0; $i < $k; $i++) {\n        $max = max($copy);\n\
    \        $result[] = $max;\n        unset($copy[array_search($max, $copy)]);\n\
    \    }\n    return $result;\n}", "    $heap = new SplMinHeap();\n    foreach ($arr\
    \ as $element) {\n        $heap->insert($element);\n        if ($heap->count()\
    \ > $k) {\n            $heap->extract();\n        }\n    }\n    return iterator_to_array($heap);\n\
    }\n$testCases = array(\n    array(array(-3, -4, 5), 3),\n    array(array(4, -4,\
    \ 4), 2),\n    array(array(-3, 2, 1, 2, -1, -2, 1), 1),\n);\n$results = array();\n\
    foreach ($testCases as $case) {\n    $results[] = maximum($case[0], $case[1]);\n\
    }\nprint_r($results);", "    $result = array();\n    foreach ($arr as $value)\
    \ {\n        $result[] = $value;\n    }\n    array_multisort($result, SORT_DESC);\n\
    \    array_splice($result, $k);\n    return $result;\n}\n\nprint_r(maximum(array(-3,\
    \ -4, 5), 3));\nprint_r(maximum(array(4, -4, 4), 2));\nprint_r(maximum(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1));", "    $arr = array_slice($arr, 0, $k);\n    return\
    \ $arr;\n}\n\nif (require(__DIR__ . '/vendor/autoload.php')) {\n    $examples\
    \ = [\n        [array(-3, -4, 5), 3],\n        [array(4, -4, 4), 2],\n       \
    \ [array(-3, 2, 1, 2, -1, -2, 1), 1],\n    ];\n    foreach ($examples as $example)\
    \ {\n        print_r(maximum($example[0], $example[1]));\n    }\n}", "    rsort($arr);\n\
    \    $result = array_slice($arr, 0, $k);\n    sort($result);\n    return $result;\n\
    }\n\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));", "    $n = count($arr);\n\
    \    $result = array();\n    $zero = array();\n    $positive = array();\n    $negative\
    \ = array();\n    for ($i = 0; $i < $n; $i++) {\n        if ($arr[$i] < 0) {\n\
    \            $negative[] = $arr[$i];\n        } else if ($arr[$i] == 0) {\n  \
    \          $zero[] = $arr[$i];\n        } else {\n            $positive[] = $arr[$i];\n\
    \        }\n    }\n    $counter = 0;\n    $n = count($negative);\n    for ($i\
    \ = $n - 1; $i >= 0; $i--) {\n        $result[] = $negative[$i];\n        $counter++;\n\
    \        if ($counter == $k) {\n            break;\n        }\n    }\n    $counter\
    \ = count($result);\n    $n = count($zero);\n    for ($i = 0; $i < $n; $i++) {\n\
    \        $result[] = $zero[$i];\n        $counter++;\n        if ($counter ==\
    \ $k) {\n            break;\n        }\n    }\n    $counter = count($result);\n\
    \    $n = count($positive);\n    for ($i = 0; $i < $n; $i++) {\n        $result[]\
    \ = $positive[$i];\n        $counter++;\n        if ($counter == $k) {\n     \
    \       break;\n        }\n    }\n    return $result;\n}\n\n$a = array(-3, -4,\
    \ 5);\n$b = array(4, -4, 4);\n$c = array(-3, 2, 1, 2, -1, -2, 1);\n$d = array(-3,\
    \ 0, 1, 2, -1, -2, 1);\n$e = array(-3, 0, 1, 2, -1, -2, 0);\necho \"a: \" . implode(\"\
    \ \", maximum($a, 3)) . \"\\n\";\necho \"b: \" . implode(\" \", maximum($b, 2))\
    \ . \"\\n\";\necho \"c: \" . implode(\" \", maximum($c, 1)) . \"\\", "    $res\
    \ = array();\n    $i = 0;\n    foreach ($arr as $num) {\n        if ($i < $k)\
    \ {\n            $res[] = $num;\n            $i++;\n        } else {\n       \
    \     $j = 0;\n            while (isset($res[$j]) && $res[$j] >= $num) {\n   \
    \             $j++;\n            }\n            if ($j < $k) {\n             \
    \   array_splice($res, $j, 0, $num);\n                array_pop($res);\n     \
    \       }\n        }\n    }\n    return $res;\n}\n\nvar_dump(maximum(array(-3,\
    \ -4, 5), 3));\nvar_dump(maximum(array(4, -4, 4), 2));\nvar_dump(maximum(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1));", "    rsort($arr);\n    return array_slice($arr,\
    \ 0, $k);\n}\n\nvar_dump(maximum(array(-3, -4, 5), 3));\nvar_dump(maximum(array(4,\
    \ -4, 4), 2));\nvar_dump(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));", "    $sorted\
    \ = [];\n    foreach ($arr as $n) {\n        $sorted[$n] = isset($sorted[$n])\
    \ ? $sorted[$n] + 1 : 1;\n    }\n    $result = [];\n    for ($i = 1000; $i >=\
    \ -1000; $i--) {\n        if (isset($sorted[$i])) {\n            for ($j = 0;\
    \ $j < $sorted[$i]; $j++) {\n                if (count($result) < $k) {\n    \
    \                $result[] = $i;\n                }\n            }\n        }\n\
    \    }\n    return $result;\n}\n", "    // just sort the array and return the\
    \ first $k elements\n    sort($arr);\n    return array_slice($arr, 0, $k);\n}\n",
  "    $arr = array_unique($arr);\n    sort($arr);\n    $maxArr = array_slice($arr,\
    \ -$k);\n    return $maxArr;\n}\n", "    usort($arr, function($a, $b) {\n    \
    \    return $a - $b;\n    });\n    $res = array_slice($arr, -$k);\n    return\
    \ $res;\n}\n$res = maximum(array(-3, -4, 5), 3);\nassert(implode(\",\", $res)\
    \ === \"-4,-3,5\");\n$res = maximum(array(4, -4, 4), 2);\nassert(implode(\",\"\
    , $res) === \"4,4\");\n$res = maximum(array(-3, 2, 1, 2, -1, -2, 1), 1);\nassert(implode(\"\
    ,\", $res) === \"2\");\n", "    $result = [];\n    foreach ($arr as $num) {\n\
    \        if (count($result) < $k) {\n            array_push($result, $num);\n\
    \        } else {\n            array_push($result, $num);\n            sort($result);\n\
    \            array_shift($result);\n        }\n    }\n    return $result;\n}\n",
  "    if ($k == 0) return [];\n    $arr_length = count($arr);\n    $res = [];\n \
    \   for ($i = 0; $i < $k; $i++) {\n        $max = -1000;\n        $index = -1;\n\
    \        for ($j = 0; $j < $arr_length; $j++) {\n            if ($arr[$j] > $max)\
    \ {\n                $max = $arr[$j];\n                $index = $j;\n        \
    \    }\n        }\n        $res[] = $max;\n        $arr[$index] = -1000;\n   \
    \ }\n    return $res;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\n$result = maximum($arr,\
    \ $k);\nprint_r($result);\necho \"\\n\";\n\n$arr = [4, -4, 4];\n$k = 2;\n$result\
    \ = maximum($arr, $k);\nprint_r($result);\necho \"\\n\";\n\n$arr = [-3, 2, 1,\
    \ 2, -1, -2, 1];\n$k = 1;\n$result = maximum($arr, $k);\nprint_r($result);\necho\
    \ \"\\n\";", "    $maxs = array();\n    $n = count($arr);\n    for ($i = 0; $i\
    \ < $n; $i++) {\n        $maxs[] = $arr[$i];\n        $cur = count($maxs) - 1;\n\
    \        while ($cur > 0 && $maxs[$cur] > $maxs[$cur - 1]) {\n            $maxs[$cur]\
    \ = $maxs[$cur - 1];\n            $maxs[$cur - 1] = $arr[$i];\n            $cur--;\n\
    \        }\n    }\n    return array_slice($maxs, 0, $k);\n}\n", "  $n = count($arr);\n\
    \  $pos = 0;\n  while ($pos < $n) {\n    $heapify($arr, $n, $pos);\n    $pos++;\n\
    \  }\n  $result = array();\n  for ($i = $n - 1; $i >= $n - $k; $i--) {\n    $result[]\
    \ = $arr[0];\n    $arr[0] = $arr[$i];\n    $n--;\n    $heapify($arr, $n, 0);\n\
    \  }\n  return $result;\n}", "    $n = count($arr);\n    if ($k == $n) return\
    \ $arr;\n    $compare = function($a, $b) {\n        return $a > $b;\n    };\n\
    \    $sort = function(&$arr, $compare) {\n        $n = count($arr);\n        for\
    \ ($i = 1; $i < $n; $i++) {\n            $j = $i;\n            while ($j > 0 &&\
    \ $compare($arr[$j - 1], $arr[$j])) {\n                $t = $arr[$j - 1];\n  \
    \              $arr[$j - 1] = $arr[$j];\n                $arr[$j] = $t;\n    \
    \            $j--;\n            }\n        }\n    };\n    $findKthLargest = function(&$arr,\
    \ $k, $compare) {\n        $n = count($arr);\n        if ($k == $n) return $arr;\n\
    \        $i = $j = 0;\n        $r = $n - 1;\n        while ($j < $r) {\n     \
    \       if ($compare($arr[$j], $arr[$r])) {\n                $t = $arr[$i];\n\
    \                $arr[$i] = $arr[$j];\n                $arr[$j] = $t;\n      \
    \          $i++;\n                $j++;\n            } else {\n              \
    \  $t = $arr[$r];\n                $arr[$r] = $arr[$j];\n                $arr[$j]\
    \ = $t;\n                $r--;\n            }\n        }\n        $t = $arr[$i];\n\
    \        $arr[$i] = $arr[$r];\n        $arr[$r] = $t;\n        if ($i == $k -\
    \ 1) return $arr[$i];\n        if ($i > $k - 1) return $findKthLargest($arr, $k,\
    \ $compare);\n        return $findKthLargest(array_slice($arr, $i + 1), $k - $i\
    \ - 1, $compare);\n    };\n    $kthLargest = $", "  $arr = maxPriorityQueue($arr);\n\
    \  $r = array();\n  for ($i = 0; $i < $k; $i++) {\n    $r[] = $arr[$i];\n  }\n\
    \  return $r;\n}\n", "  usort($arr, function($a, $b) {\n    return $a - $b;\n\
    \  });\n  $arr = array_slice($arr, -$k);\n  return $arr;\n}\n", "    // $result\
    \ = array();\n    // sort($arr);\n    // $j = 0;\n    // for ($i = count($arr)\
    \ - 1; $i >= 0; $i--) {\n    //     if ($j === $k) {\n    //         break;\n\
    \    //     }\n    //     $result[] = $arr[$i];\n    //     $j++;\n    // }\n\
    \    // return $result;\n    sort($arr);\n    return array_slice($arr, -$k);\n\
    }", "    $new_arr = [];\n    $count = 0;\n    while ($count < $k) {\n        $highest\
    \ = $arr[0];\n        foreach ($arr as $value) {\n            if ($value > $highest)\
    \ {\n                $highest = $value;\n            }\n        }\n        $new_arr[]\
    \ = $highest;\n        $count++;\n        $arr = array_diff($arr, [$highest]);\n\
    \    }\n    return $new_arr;\n}\n$arr = array(-3, -4, 5);\n$k = 3;\n$result =\
    \ maximum($arr, $k);\nvar_dump($result);", "  $result = array();\n  $heap = new\
    \ SplMaxHeap();\n  foreach ($arr as $elem) {\n    $heap->insert($elem);\n  }\n\
    \  while ($k--) {\n    $result[] = $heap->extract();\n  }\n  return $result;\n\
    }\n\nprint_r(maximum(array(-3, -4, 5), 3));\necho \"should be array(-4, -3, 5)\\\
    n\";\nprint_r(maximum(array(4, -4, 4), 2));\necho \"should be array(4, 4)\\n\"\
    ;\nprint_r(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));\necho \"should be array(2)\\\
    n\";", "    if(sizeof($arr) < $k) {\n        return $arr;\n    }\n    $result\
    \ = [];\n    $maxHeap = new SplMaxHeap();\n    foreach($arr as $i) {\n       \
    \ $maxHeap->insert($i);\n    }\n    for($i = 0; $i < $k; $i++) {\n        $result[]\
    \ = $maxHeap->extract();\n    }\n    return $result;\n}\n\n$arr = [-3, -4, 5];\n\
    $k = 3;\nprint_r(maximum($arr, $k));\necho PHP_EOL;\n\n$arr = [4, -4, 4];\n$k\
    \ = 2;\nprint_r(maximum($arr, $k));\necho PHP_EOL;\n\n$arr = [-3, 2, 1, 2, -1,\
    \ -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\necho PHP_EOL;", "    // Write\
    \ your code here\n    $arr = array_unique($arr);\n    rsort($arr);\n    return\
    \ array_slice($arr, 0, $k);\n}\n", "    sort($arr);\n    array_slice($arr, $k);\n\
    \    return $arr;\n}\n", "    $n = count($arr);\n    if ($k >= $n) return $arr;\n\
    \    return quickSelect($arr, 0, $n - 1, $k);\n}", "    $arr = array_unique($arr);\n\
    \    usort($arr, function($a, $b) {\n        return $a < $b;\n    });\n    return\
    \ array_slice($arr, 0, $k);\n}\nprint_r(maximum(array(-3, -4, 5), 3));\nprint_r(maximum(array(4,\
    \ -4, 4), 2));\nprint_r(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));", "    sort($arr);\n\
    \    $result = array();\n    for ($i = count($arr) - 1; $i >= 0; $i--) {\n   \
    \     if ($k > 0) {\n            $result[] = $arr[$i];\n            $k--;\n  \
    \      }\n    }\n    return $result;\n}\n", "\t$result = [];\n\tforeach ($arr\
    \ as $val) {\n\t\tif (count($result) < $k) {\n\t\t\tarray_push($result, $val);\n\
    \t\t} else {\n\t\t\tif ($val > $result[0]) {\n\t\t\t\tarray_shift($result);\n\t\
    \t\t\tarray_push($result, $val);\n\t\t\t}\n\t\t}\n\t}\n\treturn $result;\n}",
  "    // $heap = new SplMaxHeap();\n    // for ($i = 0; $i < $k; $i++) {\n    //\
    \     $heap->insert($arr[$i]);\n    // }\n    // for ($i = $k; $i < count($arr);\
    \ $i++) {\n    //     if ($arr[$i] > $heap->top()) {\n    //         $heap->extract();\n\
    \    //         $heap->insert($arr[$i]);\n    //     }\n    // }\n    // $res\
    \ = array();\n    // while ($heap->valid()) {\n    //     $res[] = $heap->current();\n\
    \    //     $heap->next();\n    // }\n    // sort($res);\n    // return $res;\n\
    \    quickSelect($arr, 0, count($arr) - 1, $k);\n    sort($arr);\n    return array_slice($arr,\
    \ 0, $k);\n}\n", "  $length = count($arr);\n  for ($i = 0; $i < $length; $i++)\
    \ {\n    for ($j = $i + 1; $j < $length; $j++) {\n      if ($arr[$i] < $arr[$j])\
    \ {\n        $temp = $arr[$i];\n        $arr[$i] = $arr[$j];\n        $arr[$j]\
    \ = $temp;\n      }\n    }\n  }\n  $new_arr = array();\n  for ($i = 0; $i < $k;\
    \ $i++) {\n    $new_arr[] = $arr[$i];\n  }\n  return $new_arr;\n}", "    $length\
    \ = count($arr);\n    $result = array();\n    for ($i = 0; $i < $k; $i++) {\n\
    \        $result[$i] = getMax($arr);\n    }\n    sort($result);\n    return $result;\n\
    }\n", "  $i = 0;\n  $j = 1;\n  $result = [];\n  $length = count($arr);\n  while($i\
    \ < $k) {\n    $result[$i] = $arr[$i];\n    ++$i;\n  }\n  sort($result);\n  while($j\
    \ < $length) {\n    if($arr[$j] > $result[0]) {\n      $result[0] = $arr[$j];\n\
    \      sort($result);\n    }\n    ++$j;\n  }\n  return $result;\n}", "    $res\
    \ = [];\n    for ($i = 0; $i < count($arr); $i++) {\n        $x = $arr[$i];\n\
    \        $pos = 0;\n        for ($j = 0; $j < count($res); $j++) {\n         \
    \   if ($res[$j] > $x) {\n                $pos++;\n            }\n        }\n\
    \        $res = array_merge(array_slice($res, 0, $pos), [$x], array_slice($res,\
    \ $pos));\n        if (count($res) > $k) {\n            $res = array_slice($res,\
    \ 0, $k);\n        }\n    }\n    return $res;\n}\n\nprint_r(maximum(array(-3,\
    \ -4, 5), 3));\nprint_r(maximum(array(4, -4, 4), 2));\nprint_r(maximum(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1));", "    if ($k > count($arr)) return null;\n    sort($arr);\n\
    \    return array_slice($arr, -$k);\n}\n", "    usort($arr, function($a, $b) {\n\
    \        return $a < $b;\n    });\n    $arr = array_slice($arr, 0, $k);\n    return\
    \ $arr;\n}\n\nvar_dump(maximum(array(-3, -4, 5), 3));\nvar_dump(maximum(array(4,\
    \ -4, 4), 2));\nvar_dump(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));", "    //\
    \ Your code here...\n}", "    // Your code here\n}", "    $result = array();\n\
    \    for ($i = 0; $i < $k; $i++) {\n        $maxValue = null;\n        $maxIndex\
    \ = null;\n        for ($j = 0; $j < count($arr); $j++) {\n            if (maxValue\
    \ === null || $arr[$j] > $maxValue) {\n                $maxValue = $arr[$j];\n\
    \                $maxIndex = $j;\n            }\n        }\n        $result[]\
    \ = $maxValue;\n        array_splice($arr, $maxIndex, 1);\n    }\n    return $result;\n\
    }\n\n$result = maximum(array(-3, -4, 5), 3);\nvar_dump($result);\n\n$result =\
    \ maximum(array(4, -4, 4), 2);\nvar_dump($result);\n\n$result = maximum(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1);\nvar_dump($result);", "  $output = array();\n  if (count($arr)\
    \ < $k) {\n    return $output;\n  }\n\n  for ($i = 0; $i < $k; $i++) {\n    $max\
    \ = $arr[$i];\n    $index = $i;\n    for ($j = $i; $j < count($arr); $j++) {\n\
    \      if ($arr[$j] > $max) {\n        $max = $arr[$j];\n        $index = $j;\n\
    \      }\n    }\n    $output[] = $max;\n    unset($arr[$index]);\n    $arr = array_values($arr);\n\
    \  }\n  return $output;\n}\n", "  $length = count($arr);\n  $k = $k < $length\
    \ ? $k : $length;\n  $max = array();\n  $max[0] = $arr[0];\n  for ($i = 1; $i\
    \ < $k; $i++) {\n    $max[$i] = $arr[$i];\n    for ($j = $i; $j > 0; $j--) {\n\
    \      if ($max[$j] > $max[$j - 1]) {\n        $tmp = $max[$j];\n        $max[$j]\
    \ = $max[$j - 1];\n        $max[$j - 1] = $tmp;\n      }\n    }\n  }\n  for ($i\
    \ = $k; $i < $length; $i++) {\n    if ($arr[$i] > $max[0]) {\n      $max[0] =\
    \ $arr[$i];\n      for ($j = 1; $j < $k; $j++) {\n        if ($max[$j] > $max[$j\
    \ - 1]) {\n          $tmp = $max[$j];\n          $max[$j] = $max[$j - 1];\n  \
    \        $max[$j - 1] = $tmp;\n        }\n      }\n    }\n  }\n  return $max;\n\
    }", "    // O(n)\n    $result = array();\n    $stack = new SplStack();\n    foreach\
    \ ($arr as $num) {\n        if ($stack->count() == $k) {\n            if ($num\
    \ > $stack->top()) {\n                $stack->pop();\n                $stack->push($num);\n\
    \            }\n        } else {\n            $stack->push($num);\n        }\n\
    \    }\n    while (!$stack->isEmpty()) {\n        $result[] = $stack->pop();\n\
    \    }\n    return array_reverse($result);\n}", "    if ($k == 0) return [];\n\
    \    if ($k >= count($arr)) return $arr;\n    return array_slice(quickSort($arr),\
    \ -$k);\n}", "  $arr = quick_sort($arr);\n  $count = 0;\n  for ($i = count($arr)\
    \ - 1; $i >= 0; $i--) {\n    if ($count < $k) {\n      $new_arr[] = $arr[$i];\n\
    \      $count++;\n    }\n  }\n  return $new_arr;\n}", "\t$count = count($arr);\n\
    \t$result = [];\n\tif ($count == 0) {\n\t\treturn $result;\n\t}\n\tif ($count\
    \ == 1) {\n\t\treturn $arr;\n\t}\n\tfor ($i = 0; $i < $k; $i++) {\n\t\t$max =\
    \ $arr[0];\n\t\t$index = 0;\n\t\tfor ($j = 1; $j < $count; $j++) {\n\t\t\tif ($arr[$j]\
    \ > $max) {\n\t\t\t\t$max = $arr[$j];\n\t\t\t\t$index = $j;\n\t\t\t}\n\t\t}\n\t\
    \tarray_push($result, $max);\n\t\tarray_splice($arr, $index, 1);\n\t\t$count =\
    \ count($arr);\n\t}\n\treturn $result;\n}", "    usort($arr, function($a, $b)\
    \ {\n        return abs($a) <=> abs($b);\n    });\n    return array_slice($arr,\
    \ 0, $k);\n}\n$tests = [\n    [\"In\" => [array(-3, -4, 5), 3], \"Out\" => array(-4,\
    \ -3, 5)],\n    [\"In\" => [array(4, -4, 4), 2], \"Out\" => array(4, 4)],\n  \
    \  [\"In\" => [array(-3, 2, 1, 2, -1, -2, 1), 1], \"Out\" => array(2)],\n];\n\
    echo \"</pre>\";\nforeach ($tests as $test) {\n    $out = maximum($test[\"In\"\
    ][0], $test[\"In\"][1]);\n    $expected = $test[\"Out\"];\n    $result = true;\n\
    \    if (count($out) != count($expected)) {\n        $result = false;\n    } else\
    \ {\n        for ($i = 0; $i < count($out); $i++) {\n            if ($out[$i]\
    \ != $expected[$i]) {\n                $result = false;\n                break;\n\
    \            }\n        }\n    }\n    $style = $result ? \"style='color: green'\"\
    \ : \"style='color: red'\";\n    echo \"<pre>\";\n    echo \"Test \" . ($result\
    \ ? \"Passed\" : \"Failed\") . \"<br>\";\n    echo \"Input: \" . json_encode($test[\"\
    In\"]) . \"<br>\";\n    echo \"Output: <span \" . $style . \">\" . json_encode($out)\
    \ . \"</span><br>\";\n    echo \"Expected: \" . json_encode($expected) . \"<br>\"\
    ;\n    echo \"</pre>\";\n}\necho \"</pre>\";", "    $max_heap = new SplMaxHeap();\n\
    \    for ($i = 0; $i < count($arr); $i++) {\n        $max_heap->insert($arr[$i]);\n\
    \    }\n    for ($i = 0; $i < count($arr) - $k; $i++) {\n        $max_heap->extract();\n\
    \    }\n    $res = array();\n    while (!$max_heap->isEmpty()) {\n        $res[]\
    \ = $max_heap->extract();\n    }\n    return $res;\n}\nprint_r(maximum(array(-3,\
    \ -4, 5), 3));\nprint_r(maximum(array(4, -4, 4), 2));\nprint_r(maximum(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1));\n", "    for ($i = 0; $i < count($arr); $i++) {\n\
    \        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$i] > $arr[$j])\
    \ {\n                $temp = $arr[$i];\n                $arr[$i] = $arr[$j];\n\
    \                $arr[$j] = $temp;\n            }\n        }\n    }\n    $max\
    \ = [];\n    for ($i = count($arr) - 1; $i >= count($arr) - $k; $i--) {\n    \
    \    $max[] = $arr[$i];\n    }\n    return $max;\n}\n$arr = [-3, -4, 5];\n$k =\
    \ 3;\nprint_r(maximum($arr, $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));",
  "    $maxHeap = new SplMaxHeap();\n    for ($i = 0; $i < count($arr); $i++) {\n\
    \        $maxHeap->insert($arr[$i]);\n    }\n    $result = array();\n    for ($i\
    \ = 0; $i < $k; $i++) {\n        $result[] = $maxHeap->extract();\n    }\n   \
    \ return $result;\n}\n\nprint_r(maximum(array(-3, -4, 5), 3));\nprint_r(maximum(array(4,\
    \ -4, 4), 2));\nprint_r(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));", "  $n =\
    \ count($arr);\n  if ($k > $n) {\n    $k = $n;\n  }\n  $heap = new SplMaxHeap();\n\
    \  for ($i = 0; $i < $k; $i++) {\n    $heap->insert($arr[$i]);\n  }\n  for ($i\
    \ = $k; $i < $n; $i++) {\n    if ($arr[$i] < $heap->top()) {\n      $heap->extract();\n\
    \      $heap->insert($arr[$i]);\n    }\n  }\n  $result = array();\n  for ($i =\
    \ 0; $i < $k; $i++) {\n    $result[] = $heap->extract();\n  }\n  return $result;\n\
    }\nvar_dump(maximum(array(-3, -4, 5), 3));\nvar_dump(maximum(array(4, -4, 4),\
    \ 2));\nvar_dump(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));", "\treturn array_slice(array_reverse(array_slice(array_reverse($arr),\
    \ $k)), $k);\n}\n", "    if (count($arr) == 0) {\n        return [];\n    }\n\n\
    \    for ($i = 0; $i < $k; $i++) {\n        for ($j = $i + 1; $j < count($arr);\
    \ $j++) {\n            if ($arr[$i] < $arr[$j]) {\n                $temp = $arr[$i];\n\
    \                $arr[$i] = $arr[$j];\n                $arr[$j] = $temp;\n   \
    \         }\n        }\n    }\n\n    return array_slice($arr, 0, $k);\n}\n\n$arr\
    \ = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));", "    // Write your code\
    \ here\n    $ret = array();\n    if(count($arr) <= $k) {\n        $ret = $arr;\n\
    \    } else {\n        for($i = 0; $i < $k; $i++) {\n            $max = max($arr);\n\
    \            $ret[] = $max;\n            $key = array_search($max, $arr);\n  \
    \          unset($arr[$key]);\n        }\n    }\n    return $ret;\n}\n$ret = maximum(array(-3,\
    \ -4, 5), 3);\nprint_r($ret);\n$ret = maximum(array(4, -4, 4), 2);\nprint_r($ret);\n\
    $ret = maximum(array(-3, 2, 1, 2, -1, -2, 1), 1);\nprint_r($ret);\n$ret = maximum(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 2);\nprint_r($ret);\n", "\t$res = array();\n\t\n\tsort($arr);\n\
    \t\n\tfor ($i = 0; $i < $k; $i++) {\n\t\t$res[] = $arr[count($arr) - 1 - $i];\n\
    \t}\n\t\n\treturn $res;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\n$res = maximum($arr,\
    \ $k);\nprint_r($res);\n\n$arr = [4, -4, 4];\n$k = 2;\n$res = maximum($arr, $k);\n\
    print_r($res);\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\n$res = maximum($arr,\
    \ $k);\nprint_r($res);", "\t$n = count($arr);\n\tquickSort($arr, 0, $n - 1);\n\
    \treturn array_slice($arr, $n - $k);\n}\n", "    if ($k == 0) return array();\n\
    \    $len = count($arr);\n    if ($k >= $len) return $arr;\n    if ($k == 1) {\n\
    \        $max = -1001;\n        $max_index = -1;\n        for ($i = 0; $i < $len;\
    \ $i++) {\n            if ($arr[$i] > $max) {\n                $max = $arr[$i];\n\
    \                $max_index = $i;\n            }\n        }\n        return array($max);\n\
    \    }\n    $res = array();\n    for ($i = 0; $i < $k; $i++) {\n        $res[]\
    \ = $arr[$i];\n    }\n    $min = -1001;\n    $min_index = -1;\n    for ($i = 0;\
    \ $i < $k; $i++) {\n        if ($res[$i] < $min) {\n            $min = $res[$i];\n\
    \            $min_index = $i;\n        }\n    }\n    for ($i = $k; $i < $len;\
    \ $i++) {\n        if ($arr[$i] > $min) {\n            $res[$min_index] = $arr[$i];\n\
    \            $min = -1001;\n            $min_index = -1;\n            for ($j\
    \ = 0; $j < $k; $j++) {\n                if ($res[$j] < $min) {\n            \
    \        $min = $res[$j];\n                    $min_index = $j;\n            \
    \    }\n            }\n        }\n    }\n    return $res;\n}", "    $max = [];\n\
    \    $size = count($arr);\n    for ($i = 0; $i < $size; $i++) {\n        $temp\
    \ = $arr[$i];\n        if (count($max) < $k) {\n            array_push($max, $temp);\n\
    \        } else {\n            $max = binarySearch($max, $temp);\n        }\n\
    \    }\n    return $max;\n}\n", "\t$maxheap = new SplMaxHeap();\n\tfor ($i = 0;\
    \ $i < $k; $i++) {\n\t\t$maxheap->insert($arr[$i]);\n\t}\n\tfor ($i = $k; $i <\
    \ count($arr); $i++) {\n\t\tif ($arr[$i] > $maxheap->top()) {\n\t\t\t$maxheap->extract();\n\
    \t\t\t$maxheap->insert($arr[$i]);\n\t\t}\n\t}\n\t$result = array();\n\twhile (!$maxheap->isEmpty())\
    \ {\n\t\t$result[] = $maxheap->extract();\n\t}\n\treturn $result;\n}\n", "   \
    \ $result = [];\n    foreach ($arr as $num) {\n        while (count($result) >\
    \ 0 && $result[count($result) - 1] < $num && count($result) + count($arr) - 1\
    \ - $k >= 0) {\n            array_pop($result);\n        }\n        if (count($result)\
    \ < $k) {\n            array_push($result, $num);\n        }\n    }\n    return\
    \ $result;\n}\nprint_r(maximum(array(-3, -4, 5), 3));\nprint_r(maximum(array(4,\
    \ -4, 4), 2));\nprint_r(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));", "    $n\
    \ = count($arr);\n    if ($k >= $n) return $arr;\n    $smallest = array_slice($arr,\
    \ 0, $k);\n    sort($smallest);\n    for ($i = $k; $i < $n; $i++) {\n        if\
    \ ($arr[$i] < $smallest[0]) continue;\n        for ($j = 0; $j < $k; $j++) {\n\
    \            if ($arr[$i] > $smallest[$j]) {\n                array_splice($smallest,\
    \ $j, 0, array($arr[$i]));\n                array_pop($smallest);\n          \
    \      break;\n            }\n        }\n    }\n    return $smallest;\n}\n", " \
    \   $maximum = array();\n    sort($arr);\n    for ($i = count($arr) - 1; $i >=\
    \ count($arr) - $k; $i--) {\n        $maximum[] = $arr[$i];\n    }\n    return\
    \ $maximum;\n}\necho \"should be (array(-4, -3, 5)) \";\nvar_dump(maximum(array(-3,\
    \ -4, 5), 3));\necho \"should be (array(4, 4)) \";\nvar_dump(maximum(array(4,\
    \ -4, 4), 2));\necho \"should be (array(2)) \";\nvar_dump(maximum(array(-3, 2,\
    \ 1, 2, -1, -2, 1), 1));", "    $len = count($arr);\n    // \u4E0D\u662F\u6709\
    \u5E8F\u6570\u7EC4\uFF0C\u6240\u4EE5\u4F7F\u7528\u5FEB\u901F\u6392\u5E8F\n   \
    \ quickSort($arr, 0, $len - 1);\n    return array_slice($arr, $len - $k, $k);\n\
    }\n", "\t$arr2 = $arr;\n\t$tmp = [];\n\tfor ($i = 0; $i < $k; $i++) {\n\t\t$max\
    \ = max($arr2);\n\t\t$tmp[] = $max;\n\t\t$key = array_search($max, $arr2);\n\t\
    \tunset($arr2[$key]);\n\t}\n\treturn $tmp;\n}\n", "    sort($arr);\n    for ($i\
    \ = 0; $i < count($arr); $i++) {\n        if ($i >= $k) {\n            unset($arr[$i]);\n\
    \        }\n    }\n    $arr = array_values($arr);\n    return $arr;\n}\n$arr =\
    \ array(-3, -4, 5);\n$k = 3;\n$result = maximum($arr, $k);\nprint_r($result);\n\
    echo PHP_EOL;", "    $result = array();\n    for ($i = 0; $i < $k; $i++) {\n \
    \       $max = $arr[0];\n        $index = 0;\n        for ($j = 0; $j < count($arr);\
    \ $j++) {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n\
    \                $index = $j;\n            }\n        }\n        array_push($result,\
    \ $max);\n        unset($arr[$index]);\n        $arr = array_values($arr);\n \
    \   }\n    return $result;\n}\nprint_r(maximum(array(-3, -4, 5), 3));\nprint_r(maximum(array(4,\
    \ -4, 4), 2));\nprint_r(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));\n", "    $n\
    \ = count($arr);\n    if ($k > $n) {\n        $k = $n;\n    }\n    $queue = new\
    \ SplPriorityQueue();\n    foreach ($arr as $num) {\n        $queue->insert($num,\
    \ -$num);\n    }\n    $output = array();\n    while ($k > 0) {\n        $output[]\
    \ = $queue->extract();\n        $k--;\n    }\n    return $output;\n}\necho implode(',\
    \ ', maximum(array(-3, -4, 5), 3)) . \"\\n\";\necho implode(', ', maximum(array(4,\
    \ -4, 4), 2)) . \"\\n\";\necho implode(', ', maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)) . \"\\n\";", "    $max_heap = new SplMaxHeap();\n    foreach ($arr as\
    \ $val) {\n        $max_heap->insert($val);\n    }\n    $max = array();\n    for\
    \ ($i = 0; $i < $k; $i++) {\n        $max[] = $max_heap->extract();\n    }\n \
    \   return $max;\n}\necho implode(\", \", maximum(array(-3, -4, 5), 3)) . \"\\\
    n\";\necho implode(\", \", maximum(array(4, -4, 4), 2)) . \"\\n\";\necho implode(\"\
    , \", maximum(array(-3, 2, 1, 2, -1, -2, 1), 1)) . \"\\n\";", "    return arsort($arr);\n\
    }\n", "\t$newArr = [];\n\tfor ($i = 0; $i < $k; $i++) {\n\t\t$max = $arr[0];\n\
    \t\tfor ($j = 0; $j < count($arr); $j++) {\n\t\t\tif ($arr[$j] > $max) {\n\t\t\
    \t\t$max = $arr[$j];\n\t\t\t}\n\t\t}\n\t\t$newArr[] = $max;\n\t\t$arr = array_filter($arr,\
    \ function($e) use ($max) {\n\t\t\treturn $e != $max;\n\t\t});\n\t}\n\treturn\
    \ $newArr;\n}\necho implode(', ', maximum(array(-3, -4, 5), 3)) . PHP_EOL;\necho\
    \ implode(', ', maximum(array(4, -4, 4), 2)) . PHP_EOL;\necho implode(', ', maximum(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1)) . PHP_EOL;", "    if ($k == 0) return [];\n    $result\
    \ = [];\n    for ($i = 0; $i < count($arr); $i++) {\n        $result = process($result,\
    \ $arr[$i], $k);\n    }\n    return $result;\n}\n", "    $arr = quickSort($arr);\n\
    \    $result = array();\n    for ($i = count($arr) - 1; $i >= count($arr) - $k;\
    \ $i--) {\n        $result[] = $arr[$i];\n    }\n    return $result;\n}\n", " \
    \   // If the array is not empty and the desired length is greater than zero\n\
    \    if (count($arr) > 0 && $k > 0) {\n        // If we need to return the whole\
    \ array\n        if ($k == count($arr)) {\n            // Sort the array\n   \
    \         rsort($arr);\n            // Return the sorted array\n            return\
    \ $arr;\n        }\n        // If we need to return a subset of the array\n  \
    \      else {\n            // Sort the array\n            rsort($arr);\n     \
    \       // Create an empty array to hold the output\n            $output = array();\n\
    \            // Use a for loop to go through the first $k items of the sorted\
    \ array\n            for ($i = 0; $i < $k; $i++) {\n                // Append\
    \ the current item to the output array\n                $output[] = $arr[$i];\n\
    \            }\n            // Return the output array\n            return $output;\n\
    \        }\n    }\n    // If the array is empty or the desired length is zero,\
    \ return an empty array\n    else {\n        return array();\n    }\n}", "   \
    \ sort($arr);\n    return array_slice($arr, count($arr) - $k);\n}\n\n$tests =\
    \ [\n    [\n        'input' => [\n            'arr' => [-3, -4, 5],\n        \
    \    'k' => 3\n        ],\n        'expected' => [-4, -3, 5]\n    ],\n    [\n\
    \        'input' => [\n            'arr' => [4, -4, 4],\n            'k' => 2\n\
    \        ],\n        'expected' => [4, 4]\n    ],\n    [\n        'input' => [\n\
    \            'arr' => [-3, 2, 1, 2, -1, -2, 1],\n            'k' => 1\n      \
    \  ],\n        'expected' => [2]\n    ],\n];\n\nforeach ($tests as $test) {\n\
    \    $result = maximum($test['input']['arr'], $test['input']['k']);\n    if ($result\
    \ !== $test['expected']) {\n        echo \"Error with input arr \" . implode(',',\
    \ $test['input']['arr']) . \"\\n\";\n        echo \"Got: \" . implode(',', $result)\
    \ . \"\\n\";\n        echo \"Expected: \" . implode(',', $test['expected']) .\
    \ \"\\n\";\n    } else {\n        echo \"Test passed\\n\";\n    }\n}", "    $res\
    \ = [];\n    $k = min($k, count($arr));\n    for ($i = 0; $i < $k; $i++) {\n \
    \       $maxVal = min($arr);\n        $maxIndex = null;\n        foreach ($arr\
    \ as $index => $val) {\n            if ($val > $maxVal) {\n                $maxVal\
    \ = $val;\n                $maxIndex = $index;\n            }\n        }\n   \
    \     $res[] = $maxVal;\n        unset($arr[$maxIndex]);\n    }\n    return $res;\n\
    }\n", "    if (count($arr) <= $k) return $arr;\n    if ($k == 0) return [];\n\
    \    $heap = new SplMaxHeap();\n    foreach ($arr as $item) {\n        $heap->insert($item);\n\
    \    }\n    $result = [];\n    while ($k > 0) {\n        $result[] = $heap->extract();\n\
    \        $k--;\n    }\n    return $result;\n}\n$arr = [-3, -4, 5];\n$k = 3;\n\
    $result = maximum($arr, $k);\nprint_r($result);\necho PHP_EOL;\n$arr = [4, -4,\
    \ 4];\n$k = 2;\n$result = maximum($arr, $k);\nprint_r($result);\necho PHP_EOL;\n\
    $arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\n$result = maximum($arr, $k);\nprint_r($result);\n\
    echo PHP_EOL;", "    $top = [];\n    $res = [];\n    foreach ($arr as $i => $v)\
    \ {\n        if (count($top) < $k) {\n            if (empty($top)) {\n       \
    \         $top[] = $v;\n            } else {\n                $c = count($top);\n\
    \                for ($j = 0; $j < $c; $j++) {\n                    if ($v > $top[$j])\
    \ {\n                        $top = array_slice($top, 0, $j, true) + [$v] + array_slice($top,\
    \ $j, null, true);\n                        break;\n                    }\n  \
    \              }\n                if ($j === $c) {\n                    $top[]\
    \ = $v;\n                }\n            }\n        } else {\n            for ($j\
    \ = 0; $j < $k; $j++) {\n                if ($v > $top[$j]) {\n              \
    \      $top = array_slice($top, 0, $j, true) + [$v] + array_slice($top, $j, null,\
    \ true);\n                    break;\n                }\n            }\n     \
    \   }\n    }\n    return $top;\n}", "    if(count($arr) == $k) return $arr;\n\
    \    $max = array();\n    for($i = 0; $i < $k; $i++) {\n        $max[] = $arr[$i];\n\
    \    }\n    $len = count($arr);\n    for($i = $k; $i < $len; $i++) {\n       \
    \ $j = 0;\n        while($j < $k && $arr[$i] < $max[$j]) {\n            $j++;\n\
    \        }\n        if($j < $k) {\n            array_splice($max, $j, 0, $arr[$i]);\n\
    \            array_pop($max);\n        }\n    }\n    return $max;\n}\n\n$arr =\
    \ array(-3, -4, 5);\n$k = 3;\n$result = maximum($arr, $k);\necho \"Test 1: \"\
    ;\necho json_encode($result);\necho \"\\n\";\n\n$arr = array(4, -4, 4);\n$k =\
    \ 2;\n$result = maximum($arr, $k);\necho \"Test 2: \";\necho json_encode($result);\n\
    echo \"\\n\";\n\n$arr = array(-3, 2, 1, 2, -1, -2, 1);\n$k = 1;\n$result = maximum($arr,\
    \ $k);\necho \"Test 3: \";\necho json_encode($result);\necho \"\\n\";", "    if\
    \ ($k == 0) return array();\n    $count = 0;\n    $res = array();\n    while ($count\
    \ < $k) {\n        $max = $arr[0];\n        $index = 0;\n        for ($i = 0;\
    \ $i < count($arr); $i++) {\n            if ($arr[$i] > $max) {\n            \
    \    $max = $arr[$i];\n                $index = $i;\n            }\n        }\n\
    \        $res[] = $max;\n        array_splice($arr, $index, 1);\n        $count++;\n\
    \    }\n    return $res;\n}\n$arr = array(-3, -4, 5);\n$k = 3;\n$res = maximum($arr,\
    \ $k);\necho implode(', ', $res);\necho \"\\n\";\n$arr = array(4, -4, 4);\n$k\
    \ = 2;\n$res = maximum($arr, $k);\necho implode(', ', $res);\necho \"\\n\";\n\
    $arr = array(-3, 2, 1, 2, -1, -2, 1);\n$k = 1;\n$res = maximum($arr, $k);\necho\
    \ implode(', ', $res);\necho \"\\n\";", "    if (count($arr) == $k) {\n      \
    \  return $arr;\n    }\n    $maxArr = [];\n    for ($i = 0; $i < $k; $i++) {\n\
    \        $max = max($arr);\n        array_push($maxArr, $max);\n        $key =\
    \ array_search($max, $arr);\n        unset($arr[$key]);\n    }\n    return $maxArr;\n\
    }\nprint_r(maximum(array(-3, -4, 5), 3));\nprint_r(maximum(array(4, -4, 4), 2));\n\
    print_r(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));", "    rsort($arr);\n    return\
    \ array_slice($arr, 0, $k);\n}", "    $result = array();\n    $count = count($arr);\n\
    \    // validate input\n    if ($count == 0 || $k <= 0 || $k > $count) {\n   \
    \     throw new InvalidArgumentException();\n    }\n    // if the length of array\
    \ is less than or equal to k, then just return the array\n    if ($count <= $k)\
    \ {\n        return $arr;\n    }\n    // create a maxHeap by following the steps\
    \ of maxHeapify.\n    //   Let the maxHeap root be at index 0.\n    //   In binary\
    \ tree, the children of a node at index i is: 2i+1 for left child\n    // and\
    \ 2i+2 for right child.\n    //   The parent of a node at index i is: floor((i-1)/2)\n\
    \    //   A leaf node is a node with no children. Leaf nodes are at the bottom\
    \ of tree.\n    //   A node is called a maxNode if all its child nodes are less\
    \ than or equal to\n    // itself.\n    //   MaxHeapification is a process of\
    \ moving around nodes to satisfy maxHeap\n    // properties.\n    //   Here is\
    \ an example of a maxHeap:\n    //     9\n    //    / \\\n    //   4   6\n   \
    \ //  / \\\n    // 5   7\n    // Note:\n    //   MaxHeap property: a node is greater\
    \ than or equal to its children.\n    //   To create a maxHeap, we start at the\
    \ last leaf node and call maxHeapify\n    // until we reach the root.\n    //\
    \   The process of maxHeapification is as follows:\n    //   1. Compare a node\
    \ and its children. If the node is greater than or equal to\n    //   both its\
    \ children, then the node satisfies maxHeap property. The heap is\n    //   maxHeapified.\n\
    \    //   2. Otherwise, the node and its children must be swapped. By swapping,\n\
    \    //   we move a larger number up the tree. After swapping, the heap is not\n\
    \    //   maxHeapified. Repeat steps 1 and 2 to maxHeapify the heap.\n    // \
    \  3. Repeat maxHeapification for each node until the heap is maxHeapified", " \
    \ usort($arr, function($a, $b) { return $a - $b; });\n  return array_slice($arr,\
    \ count($arr) - $k);\n}\n\n$arr = array(-3, -4, 5);\n$k = 3;\nassert(implode(',',\
    \ maximum($arr, $k)) === implode(',', array(-4, -3, 5)));\n\n$arr = array(4, -4,\
    \ 4);\n$k = 2;\nassert(implode(',', maximum($arr, $k)) === implode(',', array(4,\
    \ 4)));\n\n$arr = array(-3, 2, 1, 2, -1, -2, 1);\n$k = 1;\nassert(implode(',',\
    \ maximum($arr, $k)) === implode(',', array(2)));", "    $k--;\n    $max = $arr[0];\n\
    \    $max_i = 0;\n    $i = 1;\n    while ($k > 0) {\n        if ($arr[$i] > $max)\
    \ {\n            $max = $arr[$i];\n            $max_i = $i;\n        }\n     \
    \   $i++;\n        $k--;\n    }\n    while ($i < count($arr)) {\n        if ($arr[$i]\
    \ > $max) {\n            $arr[$max_i] = $arr[$i];\n            $max = $arr[$i];\n\
    \            for ($j = $max_i - 1; $j >= 0; $j--) {\n                if ($arr[$j]\
    \ > $arr[$j + 1]) {\n                    $temp = $arr[$j];\n                 \
    \   $arr[$j] = $arr[$j + 1];\n                    $arr[$j + 1] = $temp;\n    \
    \            } else {\n                    break;\n                }\n       \
    \     }\n        }\n        $i++;\n    }\n    return $arr;\n}\n$arr = [-3, -4,\
    \ 5];\nprint_r(maximum($arr, 3));\nprint_r(maximum($arr, 1));", "    $return_array\
    \ = array();\n    foreach($arr as $value) {\n        if(count($return_array) <\
    \ $k) {\n            $return_array[] = $value;\n        } else {\n           \
    \ if($value > min($return_array)) {\n                $key = array_search(min($return_array),\
    \ $return_array);\n                $return_array[$key] = $value;\n           \
    \ }\n        }\n    }\n    return $return_array;\n}\necho 'Example 1: [5, -4,\
    \ -3]: ' . implode(\", \", maximum(array(-3, -4, 5), 3));\necho \"<br>\";\necho\
    \ 'Example 2: [4, 4]: ' . implode(\", \", maximum(array(4, -4, 4), 2));\necho\
    \ \"<br>\";\necho 'Example 3: [2]: ' . implode(\", \", maximum(array(-3, 2, 1,\
    \ 2, -1, -2, 1), 1));\necho \"<br>\";\necho 'Example 4: [5, 1, -1, 0, 1, 1, -2,\
    \ 2, -3, -4, 4, 5, -4, 6, -6, -7, 0, -7, -7, 6, -8, -8, 6, -8, 8, 8, -10, 3, -10,\
    \ 8, -10, -9, -10, -10, -9, -7, 9, -7, -8, -8, -9, 3, 9, -6, 8, -9, -6, -7, 9,\
    \ 10, -5, 8, -6, -4, -4, 5, -1, -4, 5, -5, 4, -2, -5, 1, -1, -5, -1, -1, -1, 9,\
    \ 1, 1, 1, -1, 1, -1, -1, 0, -1, -1, 2, 1, 2, 0, 2, -2, 3, 2, -2, 2, 2, 2, -3,\
    \ -3, 2, -2, 3, -2, -2, -2, -2, -2, -1, -1", "    $n = count($arr);\n    if($k\
    \ < 0 || $k > $n)\n        return null;\n    if($k == $n)\n        return $arr;\n\
    \    // Do quick sort to find the kth largest elements\n    $arr = quick_sort($arr,\
    \ 0, $n - 1);\n    // return the first k elements\n    return array_slice($arr,\
    \ 0, $k);\n}\n", "    $n = count($arr);\n    if ($k <= 0 || $k > $n) {\n     \
    \   return NULL;\n    }\n    $res = array();\n    $tmp = array();\n    for ($i\
    \ = 0; $i < $k; $i++) {\n        $res[] = $arr[$i];\n    }\n    $heap = Heap::buildMaxHeap($res);\n\
    \    for ($i = $k; $i < $n; $i++) {\n        if ($arr[$i] < $heap->max()) {\n\
    \            $heap->extractMax();\n            $heap->insert($arr[$i]);\n    \
    \    }\n    }\n    for ($i = 0; $i < $k; $i++) {\n        $tmp[] = $heap->extractMax();\n\
    \    }\n    return $tmp;\n}\n$arr = array(-3, -4, 5);\n$k = 3;\necho \"Example\
    \ 1:\";\necho PHP_EOL;\necho \"Given array: \";\nprint_r($arr);\necho PHP_EOL;\n\
    echo \"Result: \";\nprint_r(maximum($arr, $k));\necho PHP_EOL;\n$arr = array(4,\
    \ -4, 4);\n$k = 2;\necho \"Example 2:\";\necho PHP_EOL;\necho \"Given array: \"\
    ;\nprint_r($arr);\necho PHP_EOL;\necho \"Result: \";\nprint_r(maximum($arr, $k));\n\
    echo PHP_EOL;\n$arr = array(-3, 2, 1, 2, -1, -2, 1);\n$k = 1;\necho \"Example\
    \ 3:\";\necho PHP_EOL;\necho \"Given array: \";\nprint_r($arr);\necho PHP_EOL;\n\
    echo \"Result: \";\nprint_r(maximum($arr, $k));\necho PHP_EOL;", "    $length\
    \ = count($arr);\n    $result = [];\n    if ($k > $length) {\n        $k = $length;\n\
    \    }\n    // use quick sort to sort array\n    quickSort($arr, 0, $length -\
    \ 1);\n    for ($i = 0; $i < $k; $i++) {\n        $result[] = $arr[$i];\n    }\n\
    \    return $result;\n}", "    $pq = new SplPriorityQueue();\n    foreach ($arr\
    \ as $value) {\n        $pq->insert($value, $value);\n    }\n    $maxk = array();\n\
    \    for ($i = 0; $i < $k; $i++) {\n        $maxk[] = $pq->extract();\n    }\n\
    \    sort($maxk);\n    return $maxk;\n}", "    if (empty($arr)) {\n        return\
    \ [];\n    }\n    if ($k == 0) {\n        return [];\n    }\n    if ($k == 1)\
    \ {\n        return array(max($arr));\n    }\n    $maxs = array();\n    foreach\
    \ ($arr as $e) {\n        if (count($maxs) < $k) {\n            $maxs[] = $e;\n\
    \        } else {\n            $idx = array_search(min($maxs), $maxs);\n     \
    \       if ($maxs[$idx] < $e) {\n                $maxs[$idx] = $e;\n         \
    \   }\n        }\n    }\n    return $maxs;\n}", "    $limit = count($arr);\n \
    \   if ($k > $limit) $k = $limit;\n    $output = array();\n    for ($i = 0; $i\
    \ < $k; $i++) {\n        $max = max($arr);\n        $arr = array_diff($arr, array($max));\n\
    \        $output[] = $max;\n    }\n    return $output;\n}\n$case = array(-3, -4,\
    \ 5);\nvar_dump(maximum($case, 3));\n$case = array(4, -4, 4);\nvar_dump(maximum($case,\
    \ 2));\n$case = array(-3, 2, 1, 2, -1, -2, 1);\nvar_dump(maximum($case, 1));",
  "  rsort($arr);\n  return array_slice($arr, 0, $k);\n}", "    $k--; // Get rid of\
    \ the extra 1.\n    $pivot = $arr[0]; // Set the first element as the pivot.\n\
    \    $left = array();\n    $right = array();\n    $mid = array();\n    foreach\
    \ ($arr as $value) {\n        if ($value < $pivot) {\n            $left[] = $value;\n\
    \        } elseif ($value == $pivot) {\n            $mid[] = $value;\n       \
    \ } else {\n            $right[] = $value;\n        }\n    }\n    $part = max(0,\
    \ count($left) - $k);\n    if ($part > 0) {\n        $left = maximum($left, $part);\n\
    \    }\n    return array_merge($left, $mid, $right);\n}\n", "\t$max = array();\n\
    \tforeach ($arr as $item) {\n\t\tif (count($max) < $k) {\n\t\t\t$max[] = $item;\n\
    \t\t} else {\n\t\t\tsort($max);\n\t\t\tif ($item > $max[0]) {\n\t\t\t\t$max[0]\
    \ = $item;\n\t\t\t}\n\t\t}\n\t}\n\tsort($max);\n\treturn $max;\n}\n$arr = array(-3,\
    \ -4, 5);\n$k = 3;\nprint_r(maximum($arr, $k));\n$arr = array(4, -4, 4);\n$k =\
    \ 2;\nprint_r(maximum($arr, $k));\n$arr = array(-3, 2, 1, 2, -1, -2, 1);\n$k =\
    \ 1;\nprint_r(maximum($arr, $k));", "    $heap = new SplMaxHeap();\n    foreach\
    \ ($arr as $elem) {\n        $heap->insert($elem);\n    }\n    $res = array();\n\
    \    for ($i = 0; $i < $k; $i++) {\n        $res[] = $heap->extract();\n    }\n\
    \    return $res;\n}\necho \"Test 1: \" . implode(', ', maximum(array(-3, -4,\
    \ 5), 3)) . \"\\n\";\necho \"Test 2: \" . implode(', ', maximum(array(4, -4, 4),\
    \ 2)) . \"\\n\";\necho \"Test 3: \" . implode(', ', maximum(array(-3, 2, 1, 2,\
    \ -1, -2, 1), 1)) . \"\\n\";", "    $copy = $arr;\n    rsort($copy);\n    $res\
    \ = array_slice($copy, 0, $k);\n    sort($res);\n    return $res;\n}\n\nprint_r(maximum(array(-3,\
    \ -4, 5), 3));\nprint_r(maximum(array(4, -4, 4), 2));\nprint_r(maximum(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1));", "  $result = [];\n  $n = count($arr);\n  for ($i\
    \ = 0; $i < $n; $i++) {\n    for ($j = $i + 1; $j < $n; $j++) {\n      if ($arr[$i]\
    \ < $arr[$j]) {\n        $temp = $arr[$i];\n        $arr[$i] = $arr[$j];\n   \
    \     $arr[$j] = $temp;\n      }\n    }\n  }\n  for ($i = 0; $i < $k; $i++) {\n\
    \    $result[] = $arr[$i];\n  }\n  return $result;\n}\n", "    if ($k == 0) {\n\
    \        return array();\n    }\n\n    if ($k >= count($arr)) {\n        return\
    \ $arr;\n    }\n\n    $result = array();\n    for ($i = 0; $i < $k; $i++) {\n\
    \        $max = -INF;\n        $maxIdx = -1;\n        for ($j = 0; $j < count($arr);\
    \ $j++) {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n\
    \                $maxIdx = $j;\n            }\n        }\n        array_push($result,\
    \ $max);\n        unset($arr[$maxIdx]);\n        $arr = array_values($arr);\n\
    \    }\n    return $result;\n}\n", "  $result = array();\n  $max_indexes = array();\n\
    \  $len = count($arr);\n  for ($i = 0; $i < $k; $i++) {\n    $max_index = 0;\n\
    \    for ($j = 0; $j < $len; $j++) {\n      if (!in_array($j, $max_indexes) &&\
    \ $arr[$j] > $arr[$max_index]) {\n        $max_index = $j;\n      }\n    }\n \
    \   $max_indexes[] = $max_index;\n    $result[] = $arr[$max_index];\n  }\n  return\
    \ $result;\n}\n\necho implode(', ', maximum(array(-3, -4, 5), 3)) . \"\\n\";\n\
    echo implode(', ', maximum(array(4, -4, 4), 2)) . \"\\n\";\necho implode(', ',\
    \ maximum(array(-3, 2, 1, 2, -1, -2, 1), 1)) . \"\\n\";", "    return max_array($arr,\
    \ $k);\n}", "    return array_slice(sort($arr), -$k);\n}\n", "    $ans = [];\n\
    \    // INSERT CODE BELOW\n    $arrLength = count($arr);\n    $ans[] = $arr[0];\n\
    \    for ($i = 1; $i < $arrLength; $i++) {\n        for ($j = 0; $j < $k; $j++)\
    \ {\n            if ($arr[$i] > $ans[$j]) {\n                $tmp = $ans[$j];\n\
    \                $ans[$j] = $arr[$i];\n                $arr[$i] = $tmp;\n    \
    \        }\n        }\n    }\n    return $ans;\n}\n\n/**\n * Test cases\n */\n\
    echo \"\\n<<<=== BEGIN TEST ===>>>\\n\";\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\necho \"\\n---\\n\";\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\necho \"\\n---\\n\";\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr,\
    \ $k));\necho \"\\n---\\n\";\necho \"\\n<<<=== END TEST ===>>>\\n\";", "\tif ($k\
    \ === 0) {\n\t\treturn array();\n\t}\n\tif ($k > count($arr)) {\n\t\treturn $arr;\n\
    \t}\n\t$j = count($arr) - 1;\n\t$p = 0;\n\t$output = array();\n\twhile ($k > 0)\
    \ {\n\t\t$temp = $j;\n\t\t$max = $arr[$j];\n\t\tfor ($i = $p; $i <= $j; $i++)\
    \ {\n\t\t\tif ($arr[$i] > $max) {\n\t\t\t\t$max = $arr[$i];\n\t\t\t\t$temp = $i;\n\
    \t\t\t}\n\t\t}\n\t\t$output[] = $max;\n\t\t$p = $temp + 1;\n\t\t$j--;\n\t\t$k--;\n\
    \t}\n\treturn $output;\n}\n", "    $a = [];\n    $l = count($arr);\n    for ($i\
    \ = 0; $i < $l; $i++) {\n        $j = $i - 1;\n        while ($j >= 0 && $arr[$j]\
    \ < $arr[$j + 1]) {\n            $temp = $arr[$j];\n            $arr[$j] = $arr[$j\
    \ + 1];\n            $arr[$j + 1] = $temp;\n            $j--;\n        }\n   \
    \ }\n    for ($i = 0; $i < $k; $i++) {\n        $a[] = $arr[$i];\n    }\n    return\
    \ $a;\n}\n", "  // edge cases\n  if ($k === 0) {\n    return array();\n  }\n \
    \ if ($k === count($arr)) {\n    return $arr;\n  }\n  $output = array();\n  $index\
    \ = 0;\n  // loop through the arr and place elements into the $output\n  for ($i\
    \ = 0; $i < count($arr); $i++) {\n    // if $output array is empty, just add the\
    \ element\n    if (count($output) === 0) {\n      $output[] = $arr[$i];\n    }\
    \ else {\n      $index = binary_search($output, $arr[$i]);\n      // if found\
    \ a place for the element, insert it into the $output array\n      if ($index\
    \ !== false) {\n        // if the $output array isn't full, just insert the element\
    \ into the $output array\n        if (count($output) < $k) {\n          array_splice($output,\
    \ $index, 0, $arr[$i]);\n        } else {\n          // else, the $output array\
    \ is full, so remove the last element, and insert the current element\n      \
    \    array_splice($output, $index, 0, $arr[$i]);\n          array_splice($output,\
    \ count($output)-1, 1);\n        }\n      }\n    }\n  }\n  return $output;\n}",
  "  // loop through the array\n  for ($i = 0; $i < $k; $i++) {\n    // check if the\
    \ value is higher than the next value\n    if ($arr[$i] > $arr[$i + 1]) {\n  \
    \    // swap values\n      $temp = $arr[$i];\n      $arr[$i] = $arr[$i + 1];\n\
    \      $arr[$i + 1] = $temp;\n    }\n  }\n  return $arr;\n}\n", "    if (count($arr)\
    \ < $k) return $arr;\n    $pq = new SplMaxHeap();\n    foreach ($arr as $num)\
    \ {\n        if ($pq->count() < $k) $pq->insert($num);\n        else if ($pq->top()\
    \ < $num) {\n            $pq->extract();\n            $pq->insert($num);\n   \
    \     }\n    }\n    return iterator_to_array($pq);\n}\n\nvar_dump(maximum(array(-3,\
    \ -4, 5), 3));\nvar_dump(maximum(array(4, -4, 4), 2));\nvar_dump(maximum(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1));", "    // Write your code here\n    $res = array();\n\
    \    foreach ($arr as $n) {\n        $res[] = $n;\n        usort($res, function($a,\
    \ $b) {\n            return $b - $a;\n        });\n        if (count($res) > $k)\
    \ {\n            array_pop($res);\n        }\n    }\n    return $res;\n}\n\n$arr\
    \ = [-3, -4, 5];\n$k = 3;\nvar_dump(maximum($arr, $k));\n\n$arr = [4, -4, 4];\n\
    $k = 2;\nvar_dump(maximum($arr, $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k\
    \ = 1;\nvar_dump(maximum($arr, $k));", "    rsort($arr);\n    return array_slice($arr,\
    \ 0, $k);\n}\n\nif (in_array(basename($_SERVER['PHP_SELF']), array('4.php', './4.php')))\
    \ {\n    $arr = array_map('intval', explode(',', str_replace(' ', '', trim(fgets(STDIN)))));\n\
    \    $k = intval(trim(fgets(STDIN)));\n    print_r(maximum($arr, $k));\n}", "\t\
    $arr2 = array();\n\tforeach ($arr as $i => $n) {\n\t\t$arr2[$i] = $n;\n\t}\n\t\
    arsort($arr2);\n\treturn array_slice($arr2, 0, $k);\n}\n", "  // Implement this\
    \ function\n}\n\nprint_r(maximum(array(-3, -4, 5), 3));\nprint_r(maximum(array(4,\
    \ -4, 4), 2));\nprint_r(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));", "    $k\
    \ = min($k, count($arr));\n    $result = [];\n    $result[0] = max($arr);\n  \
    \  $array = array_diff($arr, array($result[0]));\n    $counter = 1;\n    $i =\
    \ 0;\n    while ($counter < $k) {\n        $result[$counter] = max($array);\n\
    \        $array = array_diff($array, array($result[$counter]));\n        $counter++;\n\
    \    }\n    return $result;\n}\necho implode(\" \", maximum(array(-3, -4, 5),\
    \ 3));", "    // your code here\n}\n", "    rsort($arr);\n    return array_slice($arr,\
    \ 0, $k);\n}\n", "    $arr = array_unique($arr);\n    $size = count($arr);\n \
    \   if ($size == $k) return $arr;\n    sort($arr);\n    return array_slice($arr,\
    \ $size - $k);\n}\n\nforeach(array(-3, -4, 5) as $value) {\n    echo $value .\
    \ \" \";\n}\necho \"\\n\";\nprint_r(maximum(array(-3, -4, 5), 3));\necho \"\\\
    n\";\n\nforeach(array(4, -4, 4) as $value) {\n    echo $value . \" \";\n}\necho\
    \ \"\\n\";\nprint_r(maximum(array(4, -4, 4), 2));\necho \"\\n\";\n\nforeach(array(-3,\
    \ 2, 1, 2, -1, -2, 1) as $value) {\n    echo $value . \" \";\n}\necho \"\\n\"\
    ;\nprint_r(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));\necho \"\\n\";", "    if\
    \ ($k > count($arr)) {\n        $k = count($arr);\n    }\n    $sorted = [];\n\
    \    for ($i = 0; $i < $k; $i++) {\n        $max = $arr[0];\n        $max_idx\
    \ = 0;\n        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j]\
    \ > $max) {\n                $max = $arr[$j];\n                $max_idx = $j;\n\
    \            }\n        }\n        array_push($sorted, $max);\n        unset($arr[$max_idx]);\n\
    \        $arr = array_values($arr);\n    }\n    return $sorted;\n}", "\treturn\
    \ $k;\n}\n", "    $result = array();\n    for ($i = 0; $i < count($arr); $i++)\
    \ {\n        if (count($result) < $k) {\n            array_push($result, $arr[$i]);\n\
    \        } else {\n            $maxIndex = array_search(max($result), $result);\n\
    \            if ($arr[$i] > $result[$maxIndex]) {\n                $result[$maxIndex]\
    \ = $arr[$i];\n            }\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n\n$arr = array(-3, -4, 5);\nprint_r(maximum($arr, 3));\n\n$arr\
    \ = array(4, -4, 4);\nprint_r(maximum($arr, 2));\n\n$arr = array(-3, 2, 1, 2,\
    \ -1, -2, 1);\nprint_r(maximum($arr, 1));", "    $sorted = sort($arr);\n    for\
    \ ($i = $k - 1; $i >= 0; $i--) {\n        echo $sorted[$i] . ' ';\n    }\n}\n\
    maximum(array(-3, -4, 5), 3);\necho \"\\n\";\nmaximum(array(4, -4, 4), 2);\necho\
    \ \"\\n\";\nmaximum(array(-3, 2, 1, 2, -1, -2, 1), 1);\necho \"\\n\";\nmaximum(array(5,\
    \ -2, -2, -2, -2, 5, 5, -2, -2, -2, -2, 5, 5, 5, -2, -2, -2, -2, 5, 5, 5, 5, -2,\
    \ -2, -2, -2, 5, 5, 5, 5, 5, -2, -2, -2, -2, 5, 5, 5, 5, 5, 5, -2, -2, -2, -2,\
    \ 5, 5, 5, 5, 5, 5, 5, -2, -2, -2, -2, 5, 5, 5, 5, 5, 5, 5, 5, -2, -2, -2, -2,\
    \ 5, 5, 5, 5, 5, 5, 5, 5, 5, -2, -2, -2, -2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, -2,\
    \ -2, -2, -2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, -2, -2, -2, -2, 5, 5, 5, 5, 5,\
    \ 5, 5, 5, 5, 5, 5, 5, -2, -2, -2, -2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\
    \ -2, -2, -2, -2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, -2, -2, -2, -2, 5,\
    \ 5, 5, 5, 5, 5, 5", "  // Write your code here\n}\n", "\t$len = count($arr);\n\
    \tif ($k == $len) {\n\t\treturn $arr;\n\t}\n\tif ($k > $len) {\n\t\tthrow new\
    \ \\Exception(\"k value exceed the array length\");\n\t}\n\t$max = array();\n\t\
    $i = 0;\n\twhile ($i < $k) {\n\t\t$max[] = $arr[$i];\n\t\t$i++;\n\t}\n\t$start\
    \ = $k;\n\twhile ($start < $len) {\n\t\t$j = $start;\n\t\twhile ($j < $len) {\n\
    \t\t\t$max = check($arr[$j], $max);\n\t\t\t$j++;\n\t\t}\n\t\t$start++;\n\t}\n\t\
    return $max;\n}\n", "\t$length = count($arr);\n\t$heap = array();\n\tfor ($i =\
    \ 0; $i < $k; $i++) {\n\t\t$heap[] = $arr[$i];\n\t}\n\tbuild_max_heap($heap);\n\
    \tfor ($i = $k; $i < $length; $i++) {\n\t\tif ($arr[$i] > $heap[0]) {\n\t\t\t\
    $heap[0] = $arr[$i];\n\t\t\tmax_heapify($heap, 0);\n\t\t}\n\t}\n\treturn $heap;\n\
    }", "    if (count($arr) == $k) {\n        return $arr;\n    }\n    $left = [];\n\
    \    $right = [];\n    $maxLeft = [];\n    $maxRight = [];\n    $middle = $arr[0];\n\
    \    for ($i = 1; $i < count($arr); $i++) {\n        if ($arr[$i] < $middle) {\n\
    \            $left[] = $arr[$i];\n        } else {\n            $right[] = $arr[$i];\n\
    \        }\n    }\n    if (count($left) > $k - 1) {\n        $maxLeft = maximum($left,\
    \ $k);\n    } else {\n        $maxLeft = $left;\n        $maxLeft[] = $middle;\n\
    \        $maxRight = maximum($right, $k - count($maxLeft));\n    }\n    return\
    \ array_merge($maxLeft, $maxRight);\n}\n", "    $length = count($arr);\n    $result\
    \ = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = $arr[0];\n        $max_idx\
    \ = 0;\n        for ($j = 1; $j < $length; $j++) {\n            if ($arr[$j] >\
    \ $max) {\n                $max = $arr[$j];\n                $max_idx = $j;\n\
    \            }\n        }\n        $result[] = $max;\n        unset($arr[$max_idx]);\n\
    \        $arr = array_values($arr);\n        $length--;\n    }\n    return $result;\n\
    }\nprint_r(maximum(array(-3, -4, 5), 3));\nprint_r(maximum(array(4, -4, 4), 2));\n\
    print_r(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));", "    // 1. Sort the array\
    \ from largest to smallest\n    usort($arr, function($a, $b) {\n        if ($a\
    \ == $b) {\n            return 0;\n        }\n        return ($a < $b) ? 1 : -1;\n\
    \    });\n    // 2. Get the first $k elements of the sorted array\n    $slice\
    \ = array_slice($arr, 0, $k);\n    return $slice;\n}\n", "    if ($k == 0) {\n\
    \        return [];\n    }\n    if ($k >= count($arr)) {\n        return array_reverse(quickSort($arr));\n\
    \    }\n    $temp = [];\n    $m = count($arr);\n    $i = 0;\n    while ($i < $k)\
    \ {\n        $j = 0;\n        while ($j < $m - $i) {\n            if ($arr[$j]\
    \ > $arr[$j + 1]) {\n                $temp = $arr[$j];\n                $arr[$j]\
    \ = $arr[$j + 1];\n                $arr[$j + 1] = $temp;\n            }\n    \
    \        $j++;\n        }\n        $i++;\n    }\n    $result = [];\n    $n = $m\
    \ - $k;\n    while ($n < $m) {\n        $result[] = $arr[$n];\n        $n++;\n\
    \    }\n    return $result;\n}", "\t// make a new array\n\t$result = [];\n\t//\
    \ loop through each item in the array\n\tfor ($i = 0; $i < count($arr); $i++)\
    \ {\n\t\t// only do this if the result array has less than k items\n\t\tif (count($result)\
    \ < $k) {\n\t\t\t// push the item into the array\n\t\t\tarray_push($result, $arr[$i]);\n\
    \t\t} else {\n\t\t\t// loop through the result array from the last item to the\
    \ first\n\t\t\tfor ($j = count($result) - 1; $j >= 0; $j--) {\n\t\t\t\t// if the\
    \ item we're looking at is less than the current array item\n\t\t\t\tif ($arr[$i]\
    \ > $result[$j]) {\n\t\t\t\t\t// splice the current item into the result array\n\
    \t\t\t\t\tarray_splice($result, $j + 1, 0, $arr[$i]);\n\t\t\t\t\t// remove the\
    \ last item in the result array\n\t\t\t\t\tarray_pop($result);\n\t\t\t\t\t// break\
    \ out of the loop\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t// return\
    \ the sorted result array\n\treturn $result;\n}", "    for ($i = 0; $i < $k; $i++)\
    \ {\n        $max = $arr[$i];\n        $maxIndex = $i;\n        for ($j = $i +\
    \ 1; $j < count($arr); $j++) {\n            if ($arr[$j] > $max) {\n         \
    \       $max = $arr[$j];\n                $maxIndex = $j;\n            }\n   \
    \     }\n        $temp = $arr[$i];\n        $arr[$i] = $arr[$maxIndex];\n    \
    \    $arr[$maxIndex] = $temp;\n    }\n    return array_slice($arr, 0, $k);\n}\n\
    \n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = [4, -4,\
    \ 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n\
    $k = 1;\nprint_r(maximum($arr, $k));", "  $result = [];\n  while ($k > 0) {\n\
    \    $temp = array_search(max($arr), $arr);\n    $result[] = $arr[$temp];\n  \
    \  unset($arr[$temp]);\n    $k--;\n  }\n  return $result;\n}\n\n$result = maximum(array(-3,\
    \ -4, 5), 3);\nprint_r($result);\n\necho PHP_EOL;\n\n$result = maximum(array(4,\
    \ -4, 4), 2);\nprint_r($result);\n\necho PHP_EOL;\n\n$result = maximum(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1);\nprint_r($result);", "\t$sort = array();\n\tfor ($i\
    \ = 0; $i < count($arr); $i++) {\n\t\tif (isset($sort[$arr[$i]])) {\n\t\t\t$sort[$arr[$i]]++;\n\
    \t\t} else {\n\t\t\t$sort[$arr[$i]] = 1;\n\t\t}\n\t}\n\tkrsort($sort);\n\t$max\
    \ = array();\n\tforeach ($sort as $key => $value) {\n\t\tfor ($i = 0; $i < $value;\
    \ $i++) {\n\t\t\t$max[] = $key;\n\t\t}\n\t}\n\tarray_splice($max, $k);\n\treturn\
    \ $max;\n}\n\necho '<pre>';\nprint_r(maximum(array(-3, -4, 5), 3));\nprint_r(maximum(array(4,\
    \ -4, 4), 2));\nprint_r(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));\necho '</pre>';",
  "\tif ($k == 0) {\n\t\treturn array();\n\t}\n\telse if ($k == 1) {\n\t\treturn array(max($arr));\n\
    \t}\n\telse {\n\t\t$maxArray = array_slice($arr, 0, $k);\n\t\t$indexOfMax = 0;\n\
    \t\tfor ($i = $k; $i < count($arr); $i++) {\n\t\t\tif ($arr[$i] > $maxArray[$indexOfMax])\
    \ {\n\t\t\t\t$maxArray[$indexOfMax] = $arr[$i];\n\t\t\t\t$indexOfMax = 0;\n\t\t\
    \t\tfor ($j = 1; $j < $k; $j++) {\n\t\t\t\t\tif ($maxArray[$j] > $maxArray[$indexOfMax])\
    \ {\n\t\t\t\t\t\t$indexOfMax = $j;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\
    \treturn $maxArray;\n\t}\n}\n", "    return array_slice(rsort($arr), 0, $k);\n\
    }\n", "    $arrK = [];\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++)\
    \ {\n        if ($i < $k) {\n            $arrK[] = $arr[$i];\n        } else {\n\
    \            $arrK = sortedMax($arrK, $arr[$i]);\n        }\n    }\n    return\
    \ $arrK;\n}\n", "    if ($k <= 0) {\n        return array();\n    }\n    $max\
    \ = $arr[0];\n    for ($i = 1; $i < $k; $i++) {\n        if ($arr[$i] > $max)\
    \ {\n            $max = $arr[$i];\n        }\n    }\n    $counts = array_fill(0,\
    \ $max + 1, 0);\n    for ($i = 0; $i < $k; $i++) {\n        $counts[$arr[$i]]++;\n\
    \    }\n    $answer = array();\n    for ($i = $max; $i >= 0; $i--) {\n       \
    \ while ($counts[$i] > 0) {\n            $answer[] = $i;\n            $counts[$i]--;\n\
    \        }\n    }\n    return $answer;\n}", "    $top = array();\n    $result\
    \ = array();\n    $min = 0;\n    $max = 0;\n    $sum = 0;\n    $start = 0;\n \
    \   $end = count($arr);\n    while ($sum < $k) {\n        if ($start == $end)\
    \ {\n            $start = 0;\n            $end = count($top);\n            $top\
    \ = $result;\n            $result = array();\n            $max = 0;\n        \
    \    $min = 0;\n        } else {\n            $value = $arr[$start];\n       \
    \     $start++;\n            if ($value >= $max) {\n                $result[]\
    \ = $value;\n                $max = $value;\n                $sum++;\n       \
    \     } elseif ($value <= $min) {\n                $min = $value;\n          \
    \  } else {\n                $index = 0;\n                while ($index < count($top))\
    \ {\n                    if ($value > $top[$index]) {\n                      \
    \  $index++;\n                    } else {\n                        break;\n \
    \                   }\n                }\n                $top = insert($top,\
    \ $index, $value);\n            }\n        }\n    }\n    return $result;\n}\n",
  "    $res = [];\n    foreach ($arr as $value) {\n        if (count($res) < $k) {\n\
    \            array_push($res, $value);\n        } else {\n            $min = min($res);\n\
    \            if ($value > $min) {\n                $res[array_search($min, $res)]\
    \ = $value;\n            }\n        }\n    }\n    sort($res);\n    return $res;\n\
    }\n\nvar_dump(maximum(array(-3, -4, 5), 3));\nvar_dump(maximum(array(4, -4, 4),\
    \ 2));\nvar_dump(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));", "    $len = count($arr);\n\
    \    if ($len <= $k) {\n        return $arr;\n    }\n    $k++;\n    $maxHeap =\
    \ new MaxHeap();\n    for ($i = 0; $i < $k; $i++) {\n        $maxHeap->add($arr[$i]);\n\
    \    }\n    for ($i = $k; $i < $len; $i++) {\n        if ($arr[$i] > $maxHeap->peek())\
    \ {\n            $maxHeap->replace($arr[$i]);\n        }\n    }\n    $result =\
    \ [];\n    while (!$maxHeap->isEmpty()) {\n        $result[] = $maxHeap->poll();\n\
    \    }\n    return $result;\n}\n", "    $count = count($arr);\n    // sort\n \
    \   for ($i = 0; $i < $count; $i++) {\n        for ($j = $i; $j < $count; $j++)\
    \ {\n            if ($arr[$i] < $arr[$j]) {\n                list($arr[$i], $arr[$j])\
    \ = [$arr[$j], $arr[$i]];\n            }\n        }\n    }\n    $output = [];\n\
    \    for ($i = 0; $i < $k; $i++) {\n        $output[] = $arr[$i];\n    }\n   \
    \ return $output;\n}", "    //\n}", "\t$result = $arr;\n\t$length = count($arr);\n\
    \tif($k > $length) $k = $length;\n\tfor($i = 0; $i < $k; $i++) {\n\t\t$j = $i;\n\
    \t\twhile($j > 0 && $result[$j] > $result[$j - 1]) {\n\t\t\t$t = $result[$j];\n\
    \t\t\t$result[$j] = $result[$j - 1];\n\t\t\t$result[$j - 1] = $t;\n\t\t\t$j--;\n\
    \t\t}\n\t}\n\treturn array_slice($result, $length - $k);\n}", "    if ($k == 0)\
    \ return array();\n    $result = array();\n    for ($i = 0; $i < count($arr);\
    \ $i++) {\n        $pos = count($result);\n        for ($j = 0; $j < count($result);\
    \ $j++) {\n            if ($arr[$i] > $result[$j]) {\n                $pos = $j;\n\
    \                break;\n            }\n        }\n        if ($pos == count($result))\
    \ {\n            if (count($result) == $k) continue;\n            array_push($result,\
    \ $arr[$i]);\n        } else {\n            if (count($result) == $k) $result[$k\
    \ - 1] = $arr[$i];\n            else {\n                for ($j = count($result)\
    \ - 1; $j >= $pos; $j--) {\n                    $result[$j + 1] = $result[$j];\n\
    \                }\n                $result[$pos] = $arr[$i];\n            }\n\
    \        }\n    }\n    return $result;\n}\necho implode(\", \", maximum(array(-3,\
    \ -4, 5), 3)) . \"\\n\";\necho implode(\", \", maximum(array(4, -4, 4), 2)) .\
    \ \"\\n\";\necho implode(\", \", maximum(array(-3, 2, 1, 2, -1, -2, 1), 1)) .\
    \ \"\\n\";\necho implode(\", \", maximum(array(-3, 2, 1, 2, -1, -2, 1), 7)) .\
    \ \"\\n\";\necho implode(\", \", maximum(array(-3, 2, 1, 2, -1, -2, 1), 0)) .\
    \ \"\\n\";", "    sort($arr);\n    $arr = array_reverse($arr);\n    $arr = array_slice($arr,\
    \ 0, $k);\n    return $arr;\n}", "  $sorted = $arr;\n  sort($sorted);\n  $sorted\
    \ = array_reverse($sorted);\n  return array_slice($sorted, 0, $k);\n}\n\necho\
    \ implode(', ', maximum(array(-3, -4, 5), 3)).PHP_EOL;\necho implode(', ', maximum(array(4,\
    \ -4, 4), 2)).PHP_EOL;\necho implode(', ', maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)).PHP_EOL;", "\tif (count($arr) <= $k) {\n\t\treturn $arr;\n\t}\n\n\t\
    $ans = [];\n\tfor ($i = 0; $i < $k; $i++) {\n\t\t$max = -2001;\n\t\t$jMax = -1;\n\
    \t\tfor ($j = 0; $j < count($arr); $j++) {\n\t\t\tif ($arr[$j] > $max) {\n\t\t\
    \t\t$max = $arr[$j];\n\t\t\t\t$jMax = $j;\n\t\t\t}\n\t\t}\n\t\t$ans[] = $max;\n\
    \t\tunset($arr[$jMax]);\n\t\t$arr = array_values($arr);\n\t}\n\treturn $ans;\n\
    }\n\n$test = array(-3, -4, 5);\n$result = maximum($test, 3);\necho implode(',\
    \ ', $result), \"\\n\";\n\n$test = array(4, -4, 4);\n$result = maximum($test,\
    \ 2);\necho implode(', ', $result), \"\\n\";\n\n$test = array(-3, 2, 1, 2, -1,\
    \ -2, 1);\n$result = maximum($test, 1);\necho implode(', ', $result), \"\\n\";",
  "\t// your code here\n}", "    // sort array asc\n    sort($arr);\n    // get max\
    \ k numbers\n    return array_slice($arr, -$k);\n}", "    if ($k == 0) return\
    \ [];\n    $max = [];\n    $max[0] = $arr[0];\n    $l = 0;\n    for ($i = 1; $i\
    \ < count($arr); $i++) {\n        if ($arr[$i] > $max[$l]) {\n            $max[++$l]\
    \ = $arr[$i];\n        }\n    }\n    for ($i = $l; $i >= 0; $i--) {\n        for\
    \ ($j = $i - 1; $j >= 0; $j--) {\n            if ($max[$j] < $max[$j + 1]) {\n\
    \                $t = $max[$j];\n                $max[$j] = $max[$j + 1];\n  \
    \              $max[$j + 1] = $t;\n            }\n        }\n    }\n    return\
    \ array_slice($max, 0, $k);\n}\n", "    $result = array();\n    if (count($arr)\
    \ <= $k) {\n        $result = $arr;\n    } else {\n        $count = 0;\n     \
    \   while ($count < $k) {\n            $max = max($arr);\n            $result[]\
    \ = $max;\n            $i = array_search($max, $arr);\n            unset($arr[$i]);\n\
    \            $count++;\n        }\n    }\n    return $result;\n}\n$arr = array(-3,\
    \ -4, 5);\n$k = 3;\necho \"<pre>\";\nprint_r(maximum($arr, $k));\necho \"</pre>\"\
    ;", "    $result = array();\n    if (empty($arr)) {\n        return $result;\n\
    \    }\n    $length = count($arr);\n    if ($k > $length) {\n        $k = $length;\n\
    \    }\n    if ($k == $length) {\n        sort($arr);\n        return $arr;\n\
    \    }\n    $result = array_slice($arr, 0, $k);\n    sort($result);\n    for ($i\
    \ = $k; $i < $length; $i++) {\n        if ($arr[$i] > $result[0]) {\n        \
    \    $result[0] = $arr[$i];\n            sort($result);\n        }\n    }\n  \
    \  return $result;\n}\n\n$arr = array(-3, -4, 5);\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));", "    $max = array();\n    for ($i = 0; $i < $k; $i++) {\n        $max[]\
    \ = max($arr);\n        unset($arr[array_search(max($arr), $arr)]);\n    }\n \
    \   return $max;\n}\n\n$test = maximum(array(-3, -4, 5), 3);\necho 'test = ' .\
    \ implode(', ', $test) . PHP_EOL;\nassert($test == array(-4, -3, 5));\n\n$test\
    \ = maximum(array(4, -4, 4), 2);\necho 'test = ' . implode(', ', $test) . PHP_EOL;\n\
    assert($test == array(4, 4));\n\n$test = maximum(array(-3, 2, 1, 2, -1, -2, 1),\
    \ 1);\necho 'test = ' . implode(', ', $test) . PHP_EOL;\nassert($test == array(2));",
  "    $n = count($arr);\n    if ($k >= $n) {\n        return $arr;\n    }\n\n   \
    \ $max = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max[] = $arr[$i];\n\
    \    }\n    buildMaxHeap($max);\n    for ($i = $k; $i < $n; $i++) {\n        if\
    \ ($arr[$i] > $max[0]) {\n            $max[0] = $arr[$i];\n            maxHeapify($max,\
    \ 0);\n        }\n    }\n    return $max;\n}\n", "    sort($arr);\n    $slice\
    \ = array_slice($arr, -$k);\n    rsort($slice);\n    return $slice;\n}", "  $maxes\
    \ = new SplMaxHeap();\n  foreach ($arr as $element) {\n    $maxes->insert($element);\n\
    \    if ($maxes->count() > $k) {\n      $maxes->extract();\n    }\n  }\n  return\
    \ array_reverse(iterator_to_array($maxes));\n}\n\n$arr = array(-3, -4, 5);\n$k\
    \ = 3;\nprint_r(maximum($arr, $k));", "    $output = [];\n    $count = count($arr);\n\
    \    if($count < $k) {\n        return $output;\n    }\n    for($i = 0; $i < $k;\
    \ $i++) {\n        $max = -1000;\n        for($j = 0; $j < $count; $j++) {\n \
    \           if($arr[$j] > $max) {\n                $max = $arr[$j];\n        \
    \    }\n        }\n        $output[] = $max;\n        $max_index = array_search($max,\
    \ $arr);\n        array_splice($arr, $max_index, 1);\n        $count--;\n    }\n\
    \    return $output;\n}\nprint_r(maximum(array(-3, -4, 5), 3));\nprint_r(maximum(array(4,\
    \ -4, 4), 2));\nprint_r(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));", "    return\
    \ array_slice(quick_sort($arr), -$k);\n}", "  if ($k <= 0) {\n    return array();\n\
    \  }\n  if ($k >= count($arr)) {\n    return $arr;\n  }\n  $result = array();\n\
    \  for ($i = 0; $i < $k; $i++) {\n    $max = -1001;\n    $maxIndex = -1;\n   \
    \ for ($j = 0; $j < count($arr); $j++) {\n      if ($arr[$j] > $max) {\n     \
    \   $max = $arr[$j];\n        $maxIndex = $j;\n      }\n    }\n    $result[] =\
    \ $max;\n    unset($arr[$maxIndex]);\n    $arr = array_values($arr);\n  }\n  return\
    \ $result;\n}\n\n$arr = array(-3, -4, 5);\n$k = 3;\nprint_r(maximum($arr, $k));\n\
    \necho \"\\n\";\n\n$arr = array(4, -4, 4);\n$k = 2;\nprint_r(maximum($arr, $k));\n\
    \necho \"\\n\";\n\n$arr = array(-3, 2, 1, 2, -1, -2, 1);\n$k = 1;\nprint_r(maximum($arr,\
    \ $k));", "  $arr = qsort($arr);\n  return array_slice($arr, -$k);\n}", "    return\
    \ array_slice(array_slice($arr, -$k), 0, $k);\n}", "    $count = array_count_values($arr);\n\
    \    arsort($count);\n    $res = array_slice($count, 0, $k, true);\n    return\
    \ array_keys($res);\n}\n", "    if ($k == 0) return array();\n    $heap = new\
    \ SplMinHeap();\n    foreach ($arr as $v) {\n        if ($heap->count() == $k)\
    \ {\n            if ($v > $heap->top()) {\n                $heap->extract();\n\
    \                $heap->insert($v);\n            }\n        } else {\n       \
    \     $heap->insert($v);\n        }\n    }\n    $ret = array();\n    while (!$heap->isEmpty())\
    \ {\n        $ret[] = $heap->extract();\n    }\n    rsort($ret);\n    return $ret;\n\
    }", "    $result = [];\n    foreach ($arr as $num) {\n        if (count($result)\
    \ < $k) {\n            $result[] = $num;\n        } else {\n            usort($result,\
    \ function($a, $b) {\n                return $a - $b;\n            });\n     \
    \       if ($num > $result[0]) {\n                $result[0] = $num;\n       \
    \     }\n        }\n    }\n    return $result;\n}\n\n$arr = array(-3, -4, 5);\n\
    $k = 3;\n$result = maximum($arr, $k);\nprint_r($result);\n\n$arr = array(4, -4,\
    \ 4);\n$k = 2;\n$result = maximum($arr, $k);\nprint_r($result);\n\n$arr = array(-3,\
    \ 2, 1, 2, -1, -2, 1);\n$k = 1;\n$result = maximum($arr, $k);\nprint_r($result);",
  "    // TODO: implementation\n}\n", "    // Initializing $result.\n    $result =\
    \ array();\n    // Sorting array in descending order.\n    rsort($arr);\n    //\
    \ Looping through array and pushing the first $k elements to $result.\n    for\
    \ ($i = 0; $i < $k; $i++) {\n        array_push($result, $arr[$i]);\n    }\n \
    \   // Returning $result.\n    return $result;\n}", "\tif ($k == 1) {\n\t\treturn\
    \ array(max($arr));\n\t}\n\t$result = array();\n\tfor ($i = 0; $i < $k; $i++)\
    \ {\n\t\t$result[] = min($arr);\n\t\t$key = array_search(min($arr), $arr);\n\t\
    \tunset($arr[$key]);\n\t}\n\treturn $result;\n}\nprint_r(maximum(array(-3, -4,\
    \ 5), 3));\nprint_r(maximum(array(4, -4, 4), 2));\nprint_r(maximum(array(-3, 2,\
    \ 1, 2, -1, -2, 1), 1));", "    if ($k > count($arr)) $k = count($arr);\n    //\
    \ sort the array\n    $arr = bubbleSort($arr);\n    $out = array();\n    for ($i\
    \ = $k - 1; $i >= 0; $i--) {\n        $out[] = $arr[$i];\n    }\n    return $out;\n\
    }", "\t$heap = new SplMaxHeap();\n\tforeach ($arr as $value) {\n\t\t$heap->insert($value);\n\
    \t}\n\t$max = array();\n\twhile ($k--) {\n\t\t$max[] = $heap->extract();\n\t}\n\
    \treturn $max;\n}\n\n$arr = array(-3, -4, 5);\n$k = 3;\necho json_encode(maximum($arr,\
    \ $k)), \"\\n\";\n$arr = array(4, -4, 4);\n$k = 2;\necho json_encode(maximum($arr,\
    \ $k)), \"\\n\";\n$arr = array(-3, 2, 1, 2, -1, -2, 1);\n$k = 1;\necho json_encode(maximum($arr,\
    \ $k)), \"\\n\";", "  $k = min($k, count($arr));\n  $min_heap = new SplMinHeap();\n\
    \  foreach ($arr as $item) {\n    if ($min_heap->count() == $k) {\n      if ($item\
    \ > $min_heap->top()) {\n        $min_heap->extract();\n        $min_heap->insert($item);\n\
    \      }\n    } else {\n      $min_heap->insert($item);\n    }\n  }\n  return\
    \ iterator_to_array($min_heap);\n}", "    $n = count($arr);\n    if ($k == 0)\
    \ return [];\n    if ($k == $n) return $arr;\n    $res = array_slice($arr, 0,\
    \ $k);\n    sort($res);\n    for ($i = $k; $i < $n; $i++) {\n        if ($arr[$i]\
    \ <= $res[0]) continue;\n        $res[0] = $arr[$i];\n        for ($j = 1; $j\
    \ < $k; $j++) {\n            if ($res[$j] < $res[$j - 1]) {\n                $tmp\
    \ = $res[$j];\n                $res[$j] = $res[$j - 1];\n                $res[$j\
    \ - 1] = $tmp;\n            } else {\n                break;\n            }\n\
    \        }\n    }\n    return $res;\n}\n\necho '<pre>';\nprint_r(maximum(array(-3,\
    \ -4, 5), 3));\nprint_r(maximum(array(4, -4, 4), 2));\nprint_r(maximum(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1));\necho '</pre>';", "    $min = min($arr);\n    $max\
    \ = max($arr);\n    $map = array_fill($min, $max-$min+1, 0);\n    foreach ($arr\
    \ as $n) {\n        $map[$n]++;\n    }\n    $return = array();\n    foreach ($map\
    \ as $key => $value) {\n        if ($value > 0) {\n            if ($k > 0) {\n\
    \                $return[] = $key;\n                $k--;\n            } else\
    \ {\n                break;\n            }\n        }\n    }\n    return $return;\n\
    }\n", "    $size = count($arr);\n    $result = [];\n    for ($i = 0; $i < $k;\
    \ $i++) {\n        $result[$i] = -100001;\n    }\n    for ($i = 0; $i < $size;\
    \ $i++) {\n        $num = $arr[$i];\n        $temp = $result[$k - 1];\n      \
    \  $j = $k - 1;\n        while ($j >= 0 && $num > $temp) {\n            $result[$j]\
    \ = $result[$j - 1];\n            $j--;\n            $temp = $result[$j];\n  \
    \      }\n        $result[$j] = $num;\n    }\n    return $result;\n}\n\nvar_dump(maximum(array(-3,\
    \ -4, 5), 3));\nvar_dump(maximum(array(4, -4, 4), 2));\nvar_dump(maximum(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1));", "    $arr = array_unique($arr);\n    sort($arr);\n\
    \    return array_slice($arr, count($arr) - $k);\n}\nprint_r(maximum(array(-3,\
    \ -4, 5), 3));\nprint_r(maximum(array(4, -4, 4), 2));\nprint_r(maximum(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1));", "    $sortedArr = [];\n    foreach ($arr as $number)\
    \ {\n        $sortedArr[] = $number;\n    }\n    for ($i = 0; $i < count($sortedArr);\
    \ $i++) {\n        for ($j = $i + 1; $j < count($sortedArr); $j++) {\n       \
    \     if ($sortedArr[$i] < $sortedArr[$j]) {\n                $tmp = $sortedArr[$i];\n\
    \                $sortedArr[$i] = $sortedArr[$j];\n                $sortedArr[$j]\
    \ = $tmp;\n            }\n        }\n    }\n    return array_slice($sortedArr,\
    \ 0, $k);\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n$arr\
    \ = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n$arr = [-3, 2, 1, 2, -1,\
    \ -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));", "    $n = count($arr);\n   \
    \ if ($k >= $n) return $arr;\n    $heap = new SplMaxHeap();\n    for ($i = 0;\
    \ $i < $k; $i++) $heap->insert($arr[$i]);\n    for ($i = $k; $i < $n; $i++) {\n\
    \        if ($arr[$i] < $heap->top()) {\n            $heap->extract();\n     \
    \       $heap->insert($arr[$i]);\n        }\n    }\n    $result = array();\n \
    \   while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n\
    \    return $result;\n}\n\ndo {\n    fscanf(STDIN, \"%d %d\", $n, $k);\n    if\
    \ ($n == 0 && $k == 0) break;\n    $arr = array();\n    for ($i = 0; $i < $n;\
    \ $i++) {\n        fscanf(STDIN, \"%d\", $arr[]);\n    }\n    echo implode(\"\
    \ \", maximum($arr, $k)) . \"\\n\";\n} while (true);", "    if ($k == 0) return\
    \ array();\n    $len = count($arr);\n    if ($k == $len) return $arr;\n    $merged\
    \ = $arr;\n    $left = 0;\n    $right = $len - 1;\n    while ($left < $right)\
    \ {\n        $mid = ($left + $right) >> 1;\n        $merged = merge($merged, $left,\
    \ $mid, $right);\n        if ($mid - $left < $k - 1) {\n            $left = $mid\
    \ + 1;\n        } else {\n            $right = $mid;\n        }\n    }\n    return\
    \ array_slice($merged, 0, $k);\n}", "    // Write your code here\n}", "  if (!is_array($arr)\
    \ || count($arr) == 0) {\n    return;\n  }\n  $len = count($arr);\n  if ($k >=\
    \ $len) {\n    return $arr;\n  }\n  $max = $len - $k;\n  $last = $len - 1;\n \
    \ $start = 0;\n  while ($max > 0) {\n    $maxIndex = $start;\n    for ($i = $start\
    \ + 1; $i <= $last; $i++) {\n      if ($arr[$i] > $arr[$maxIndex]) {\n       \
    \ $maxIndex = $i;\n      }\n    }\n    swap($arr, $start, $maxIndex);\n    $start++;\n\
    \    $max--;\n  }\n  return array_slice($arr, $start);\n}\n", "\tif ($k > count($arr))\
    \ return false;\n\treturn mergeSort($arr, 0, count($arr) - 1, $k);\n}\n", "  \
    \  if ($k == 1) {\n        $max = 0;\n        foreach ($arr as $value) {\n   \
    \         if ($value > $max) {\n                $max = $value;\n            }\n\
    \        }\n        return array($max);\n    }\n    $result = array();\n    $max\
    \ = 0;\n    $count = 0;\n    while ($count < $k) {\n        foreach ($arr as $value)\
    \ {\n            if ($value > $max) {\n                $max = $value;\n      \
    \      }\n        }\n        $result[] = $max;\n        $max = 0;\n        $count++;\n\
    \    }\n    return $result;\n}\n$arr = array(-3, -4, 5);\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
