name: HumanEval_120_maximum
language: php
prompt: "<?php\n// Given an array arr of integers and a positive integer k, return\
  \ a sorted array \n// of length k with the maximum k numbers in arr.\n// Example\
  \ 1:\n// >>> maximum(array(-3, -4, 5), 3)\n// array(-4, -3, 5)\n// Example 2:\n\
  // >>> maximum(array(4, -4, 4), 2)\n// array(4, 4)\n// Example 3:\n// >>> maximum(array(-3,\
  \ 2, 1, 2, -1, -2, 1), 1)\n// array(2)\n// Note:\n// 1. The length of the array\
  \ will be in the range of [1, 1000].\n// 2. The elements in the array will be in\
  \ the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
  \ $k) {\n"
tests: "function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) {\
  \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2)\
  \ !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
  \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\");\
  \ }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20, 123))\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123, 20,\
  \ 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8, 0,\
  \ 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
  \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\");\
  \ }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !== array(-10,\
  \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2,\
  \ 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
  ); }\n}\n\ntest();"
completions: ["    // your code here\n}", "  $max = array();\n  if(empty($arr)){\n\
    \    return $max;\n  }\n  if(count($arr) <= $k){\n    return $arr;\n  }\n  for($i\
    \ = 0; $i < $k; $i++){\n    $max[] = array_shift($arr);\n  }\n  foreach($arr as\
    \ $value){\n    for($i = 0; $i < $k; $i++){\n      if($value > $max[$i]){\n  \
    \      $max[] = $value;\n        unset($max[$i]);\n        sort($max);\n     \
    \   break;\n      }\n    }\n  }\n  return $max;\n}\n", "    $array = array();\n\
    \    if ($k > count($arr)) {\n        return $arr;\n    } else {\n        for\
    \ ($i = 0; $i < $k; $i++) {\n            $max = max($arr);\n            array_push($array,\
    \ $max);\n            unset($arr[array_search($max, $arr)]);\n        }\n    \
    \    return $array;\n    }\n}\nprint_r(maximum(array(-3, -4, 5), 3));\nprint_r(maximum(array(4,\
    \ -4, 4), 2));\nprint_r(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));", "    $res\
    \ = [];\n    for ($i = 0; $i < count($arr); $i++) {\n        // insert number\
    \ into correct index\n        $res = insert($res, $arr[$i]);\n        // make\
    \ sure res is k long\n        if (count($res) > $k) {\n            array_pop($res);\n\
    \        }\n    }\n    return $res;\n}\n", "\tif ($k == 0) {\n\t\treturn array();\n\
    \t}\n\t$result = array();\n\tfor ($i = 0; $i < $k; $i++) {\n\t\t$temp = $arr[$i];\n\
    \t\t$index = $i;\n\t\tfor ($j = $i + 1; $j < count($arr); $j++) {\n\t\t\tif ($arr[$j]\
    \ > $temp) {\n\t\t\t\t$temp = $arr[$j];\n\t\t\t\t$index = $j;\n\t\t\t}\n\t\t}\n\
    \t\t$result[] = $temp;\n\t\tunset($arr[$index]);\n\t\t$arr = array_values($arr);\n\
    \t}\n\treturn $result;\n}\n$arr = array(-3, -4, 5);\n$result = maximum($arr, 3);\n\
    print_r($result);\necho \"\\n\";\n$arr = array(4, -4, 4);\n$result = maximum($arr,\
    \ 2);\nprint_r($result);\necho \"\\n\";\n$arr = array(-3, 2, 1, 2, -1, -2, 1);\n\
    $result = maximum($arr, 1);\nprint_r($result);\necho \"\\n\";", "    $return =\
    \ array();\n    foreach ($arr as $number) {\n        // If we already have $k\
    \ numbers, we have to check if $number is bigger than the smallest element of\
    \ the array\n        if (count($return) == $k) {\n            if ($number > min($return))\
    \ {\n                // $number is bigger than the smallest element of the array,\
    \ but we have to remove it from the array\n                unset($return[array_search(min($return),\
    \ $return)]);\n                // And add $number to the array\n             \
    \   $return[] = $number;\n            }\n        } else {\n            // Array\
    \ is not already full so we add $number to the array\n            $return[] =\
    \ $number;\n        }\n    }\n    return $return;\n}\n\nprint_r(maximum(array(-3,\
    \ -4, 5), 3));\nprint_r(maximum(array(4, -4, 4), 2));\nprint_r(maximum(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1));", "    if ($k == 0) return [];\n    $heap = new SplMinHeap();\n\
    \    foreach ($arr as $num) {\n        $heap->insert($num);\n        if ($heap->count()\
    \ > $k) {\n            $heap->extract();\n        }\n    }\n    return iterator_to_array($heap);\n\
    }\n\nforeach ([\n    [[-3, -4, 5], 3],\n    [[4, -4, 4], 2],\n    [[-3, 2, 1,\
    \ 2, -1, -2, 1], 1],\n] as $item) {\n    $res = maximum($item[0], $item[1]);\n\
    \    echo implode(', ', $res), \"\\n\";\n}", "  if (count($arr) <= $k) return\
    \ $arr;\n  $max = array_slice($arr, 0, $k);\n  sort($max);\n  for ($i = $k; $i\
    \ < count($arr); $i++) {\n    $j = 0;\n    while ($j < $k && $arr[$i] < $max[$j])\
    \ {\n      $j++;\n    }\n    if ($j == $k) continue;\n    array_splice($max, $j,\
    \ 0, array($arr[$i]));\n    array_pop($max);\n  }\n  return $max;\n}\n\nvar_dump(maximum(array(-3,\
    \ -4, 5), 3));\nvar_dump(maximum(array(4, -4, 4), 2));\nvar_dump(maximum(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1));", "    $res = array();\n    $res = array_slice($arr,\
    \ 0, $k);\n    sort($res);\n    for ($i = $k; $i < count($arr); $i++) {\n    \
    \    if ($arr[$i] > $res[0]) {\n            $res[0] = $arr[$i];\n            sort($res);\n\
    \        }\n    }\n    return $res;\n}\nprint_r(maximum(array(-3, -4, 5), 3));\n\
    print_r(maximum(array(4, -4, 4), 2));\nprint_r(maximum(array(-3, 2, 1, 2, -1,\
    \ -2, 1), 1));", "    if (empty($arr)) {\n        return [];\n    }\n    $len\
    \ = count($arr);\n    $left = 0;\n    $right = $len - 1;\n    $index = partition($arr,\
    \ $left, $right);\n    while ($index !== $k - 1) {\n        if ($index > $k -\
    \ 1) {\n            $right = $index - 1;\n            $index = partition($arr,\
    \ $left, $right);\n        } else {\n            $left = $index + 1;\n       \
    \     $index = partition($arr, $left, $right);\n        }\n    }\n    return array_slice($arr,\
    \ 0, $k);\n}", "    $maxHeap = new SplMaxHeap();\n    for ($i = 0; $i < count($arr);\
    \ $i++) {\n        $maxHeap->insert($arr[$i]);\n    }\n    $res = array();\n \
    \   for ($i = 0; $i < $k; $i++) {\n        $res[] = $maxHeap->extract();\n   \
    \ }\n    return $res;\n}\n", "    if (count($arr) === $k) return $arr;\n    if\
    \ ($k === 1) return array(max($arr));\n    $max = $arr[0];\n    for ($i = 1; $i\
    \ < $k; $i++) {\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    $result = array($max);\n    for ($i = $k; $i < count($arr);\
    \ $i++) {\n        if ($arr[$i] > $max) {\n            $result[] = $arr[$i];\n\
    \            $max = $arr[$i];\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}", "    $newArr = array();\n    $count = count($arr);\n    if($count\
    \ == $k) {\n        return $arr;\n    } else {\n        $i = 0;\n        while($i\
    \ <= $k) {\n            array_push($newArr, max($arr));\n            $key = array_search(max($arr),\
    \ $arr);\n            unset($arr[$key]);\n            $i++;\n        }\n     \
    \   return $newArr;\n    }\n}\nprint_r(maximum(array(-3, -4, 5), 3));\nprint_r(maximum(array(4,\
    \ -4, 4), 2));\nprint_r(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));", "    if\
    \ ($k >= count($arr)) {\n        return $arr;\n    }\n\n    // Add code here\n\
    }\n", "    $len = count($arr);\n    if ($len == 0) {\n        return $arr;\n \
    \   }\n    // 1. Sort the array (by default the sorting is in ascending order)\n\
    \    sort($arr);\n    // 2. Return the last k elements\n    return array_slice($arr,\
    \ -$k);\n}", "    $uniqueValues = array_unique($arr);\n    $max_values = array();\n\
    \    $result = array();\n    $i = 0;\n    foreach ($uniqueValues as $value) {\n\
    \        $max_values[$i]['key'] = $value;\n        $max_values[$i]['count'] =\
    \ array_count_values($arr)[$value];\n        $i++;\n    }\n    array_multisort(array_column($max_values,\
    \ 'count'), SORT_DESC, array_column($max_values, 'key'), SORT_DESC, $max_values);\n\
    \    for ($i = 0; $i < $k; $i++) {\n        for ($j = 0; $j < $max_values[$i]['count'];\
    \ $j++) {\n            $result[] = $max_values[$i]['key'];\n        }\n    }\n\
    \    return $result;\n}\n\n$arr = array(-3, -4, 5);\n$k = 3;\necho json_encode(maximum($arr,\
    \ $k));", "    $curr = array();\n    $k = min($k, count($arr));\n    for ($i =\
    \ 0; $i < $k; $i++) {\n        $curr[] = $arr[$i];\n    }\n    sort($curr);\n\
    \    for ($i = $k; $i < count($arr); $i++) {\n        if ($arr[$i] > $curr[0])\
    \ {\n            $curr[0] = $arr[$i];\n            sort($curr);\n        }\n \
    \   }\n    return $curr;\n}", "    $count = count($arr);\n    $maxs = array();\n\
    \    for ($i = 0; $i < $count; $i++) {\n        if (count($maxs) < $k) {\n   \
    \         $maxs[] = $arr[$i];\n        } else {\n            $min = min($maxs);\n\
    \            if ($arr[$i] > $min) {\n                $maxs[array_search($min,\
    \ $maxs)] = $arr[$i];\n            }\n        }\n    }\n    sort($maxs);\n   \
    \ return $maxs;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\necho PHP_EOL;\nprint_r(maximum($arr,\
    \ $k));", "\tusort($arr, function($a, $b) {\n\t\treturn $a > $b ? -1 : ($a < $b\
    \ ? 1 : 0);\n\t});\n\t\n\treturn array_slice($arr, 0, $k);\n}\n", "\t$heap = new\
    \ SplMaxHeap();\n\tforeach ($arr as $value) {\n\t\t$heap->insert($value);\n\t\
    }\n\t$result = array();\n\twhile ($k > 0) {\n\t\t$result[] = $heap->extract();\n\
    \t\t$k--;\n\t}\n\treturn $result;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
