name: HumanEval_68_pluck
language: php
prompt: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
  \ integer nodes\n// your task is to pluck one of the nodes and return it.\n// The\
  \ plucked node should be the node with the smallest even value.\n// If multiple\
  \ nodes with the same smallest even value are found return the node that has smallest\
  \ index.\n// The plucked node should be returned in an array, [ smalest_value, its\
  \ index ],\n// If there are no even values or the given array is empty, return [].\n\
  // Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation: 2 has\
  \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
  \ pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest even\
  \ value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n//\
  \ array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0, 1)\n\
  // Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will\
  \ choose the first zero, which has the smallest index.\n// Constraints:\n// * 1\
  \ <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n"
tests: "function candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
  \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
  \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
  \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1)) !== array(6,\
  \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 9,\
  \ 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["\tif (!$arr) return [];\n\t$minEven = PHP_INT_MAX;\n\t$minEvenIndex\
    \ = 0;\n\tforeach ($arr as $i => $val) {\n\t\tif ($val % 2 === 0 && $val < $minEven)\
    \ {\n\t\t\t$minEven = $val;\n\t\t\t$minEvenIndex = $i;\n\t\t}\n\t}\n\treturn $minEven\
    \ === PHP_INT_MAX ? [] : [$minEven, $minEvenIndex];\n}\n\nclass PluckTest extends\
    \ TestCase {\n\tpublic function testExamples() {\n\t\t$this->assertEquals([2,\
    \ 1], pluck([4, 2, 3]));\n\t\t$this->assertEquals([2, 1], pluck([1, 2, 3]));\n\
    \t\t$this->assertEquals([], pluck([]));\n\t\t$this->assertEquals([0, 1], pluck([5,\
    \ 0, 3, 0, 4, 2]));\n\t}\n}\nPluckTest::runTest();", "    if (empty($arr)) {\n\
    \        return [];\n    }\n    $keys = array_keys($arr, min($arr));\n    if (count($keys)\
    \ == 1) {\n        return [min($arr), $keys[0]];\n    }\n    foreach ($keys as\
    \ $key) {\n        if ($arr[$key] % 2 == 0) {\n            return [$arr[$key],\
    \ $key];\n        }\n    }\n    return [];\n}\n\n$arr = array(4, 2, 3);\nprint_r(pluck($arr));\n\
    \n$arr = array(1, 2, 3);\nprint_r(pluck($arr));\n\n$arr = array();\nprint_r(pluck($arr));\n\
    \n$arr = array(5, 0, 3, 0, 4, 2);\nprint_r(pluck($arr));", "   $even = $arr[0];\n\
    \   $index = 0;\n   $min = 0;\n   $count = 0;\n   $minindex = 0;\n   foreach ($arr\
    \ as $key => $value) {\n      if ($value % 2 == 0 && $count == 0) {\n        \
    \ $min = $value;\n         $minindex = $key;\n         $count++;\n      }\n  \
    \    if ($value % 2 == 0 && $value < $min) {\n         $min = $value;\n      \
    \   $minindex = $key;\n      }\n   }\n   if ($count != 0) {\n      return [$min,\
    \ $minindex];\n   } else {\n      return [];\n   }\n}\n\nvar_dump(pluck([5, 0,\
    \ 3, 0, 4, 2]));", "  $sorted = array_flip($arr);\n  ksort($sorted);\n  foreach\
    \ ($sorted as $key => $value) {\n    if ($key % 2 == 0) {\n      return [$key,\
    \ $value];\n    }\n  }\n  return [];\n}\n", "  $evens = [];\n  foreach ($arr as\
    \ $k => $v) {\n    if ($v % 2 == 0) {\n      $evens[$k] = $v;\n    }\n  }\n  if\
    \ (empty($evens)) {\n    return [];\n  }\n  asort($evens);\n  reset($evens);\n\
    \  $k = key($evens);\n  return [$evens[$k], $k];\n}\n", "    if(empty($arr)) return\
    \ [];\n    $even_arr = [];\n    foreach($arr as $k => $v) {\n        if($v % 2\
    \ == 0) $even_arr[$k] = $v;\n    }\n    if(empty($even_arr)) return [];\n    asort($even_arr);\n\
    \    $keys = array_keys($even_arr);\n    return [$even_arr[$keys[0]], $keys[0]];\n\
    }\n\nprint_r(pluck([4, 2, 3]));\nprint_r(pluck([1, 2, 3]));\nprint_r(pluck([]));\n\
    print_r(pluck([5, 0, 3, 0, 4, 2]));", "  if (empty($arr)) return [];\n  $min =\
    \ $minKey = null;\n  foreach ($arr as $key => $val) {\n    if ($val % 2 == 0)\
    \ {\n      if ($min == null || $val < $min) {\n        $min = $val;\n        $minKey\
    \ = $key;\n      }\n    }\n  }\n  if ($min == null) return [];\n  return [$min,\
    \ $minKey];\n}\nprint_r(pluck([1, 2, 3]));\nprint_r(pluck([]));\nprint_r(pluck([4,\
    \ 2, 3]));\nprint_r(pluck([5, 0, 3, 0, 4, 2]));", "  $res = array();\n  if (count($arr)\
    \ == 0) return $res;\n  foreach ($arr as $k => $v) {\n    if ($v % 2 == 0) {\n\
    \      if (count($res) == 0) {\n        $res = array($v, $k);\n      } else if\
    \ ($v < $res[0]) {\n        $res = array($v, $k);\n      }\n    }\n  }\n  return\
    \ $res;\n}", "    if(empty($arr)) return [];\n    $min = 10001;\n    $arr_keys\
    \ = array_keys($arr);\n    $min_key = 0;\n    foreach($arr as $key => $value)\
    \ {\n        if($value % 2 == 0) {\n            if($value < $min) {\n        \
    \        $min = $value;\n                $min_key = $key;\n            }\n   \
    \     }\n    }\n    if($min == 10001) return [];\n    $arr_keys = array_keys($arr);\n\
    \    return [$min, $arr_keys[$min_key]];\n}\nprint_r(pluck([4, 2, 3]));\nprint_r(pluck([1,\
    \ 2, 3]));\nprint_r(pluck([]));\nprint_r(pluck([5, 0, 3, 0, 4, 2]));", "  // your\
    \ code goes here\n}", "    $i = 0;\n    $evens = [];\n    while ($i < count($arr))\
    \ {\n        if ($arr[$i] % 2 == 0) {\n            $evens[] = $arr[$i];\n    \
    \    }\n        $i++;\n    }\n    $smallestEven = $evens[0];\n    $smallestIndex\
    \ = $i;\n    for ($i = 0; $i < count($evens); $i++) {\n        if ($evens[$i]\
    \ < $smallestEven) {\n            $smallestEven = $evens[$i];\n            $smallestIndex\
    \ = $i;\n        }\n    }\n    return $smallestEven ? [$smallestEven, $smallestIndex]\
    \ : [];\n}\n\nprint_r(pluck([4, 2, 3])); // [2, 1]\nprint_r(pluck([1, 2, 3]));\
    \ // [2, 1]\nprint_r(pluck([])); // []\nprint_r(pluck([5, 0, 3, 0, 4, 2])); //\
    \ [0, 1]", "  $filtered = array_filter($arr, function($value) {\n    return ($value\
    \ % 2 === 0);\n  });\n  if (count($filtered) > 0) {\n    $min = min($filtered);\n\
    \    $index = array_search($min, $arr);\n    return [$min, $index];\n  }\n  return\
    \ [];\n}", "    $even = -1;\n    $even_index = -1;\n    foreach ($arr as $key\
    \ => $value) {\n        if ($value % 2 == 0) {\n            if ($even == -1) {\n\
    \                $even = $value;\n                $even_index = $key;\n      \
    \      } else {\n                if ($value < $even) {\n                    $even\
    \ = $value;\n                    $even_index = $key;\n                }\n    \
    \        }\n        }\n    }\n    if ($even == -1) {\n        return [];\n   \
    \ } else {\n        return [$even, $even_index];\n    }\n}\n$arr = [5, 0, 3, 0,\
    \ 4, 2];\nvar_dump(pluck($arr));", "    $even = [];\n    $odd = [];\n    foreach\
    \ ($arr as $key => $value) {\n        if($value % 2 == 0) {\n            $even[]\
    \ = $value;\n        } else {\n            $odd[] = $value;\n        }\n    }\n\
    \    if(count($even) == 0) {\n        return [];\n    }\n    if(count($odd) ==\
    \ 0) {\n        $smallest = min($even);\n        $index = array_search($smallest,\
    \ $arr);\n        return [$smallest, $index];\n    }\n    $smallest = min($even);\n\
    \    $index = array_search($smallest, $arr);\n    return [$smallest, $index];\n\
    }\necho '<pre>';\nvar_dump(pluck([4, 2, 3]));\nvar_dump(pluck([1, 2, 3]));\nvar_dump(pluck([]));\n\
    var_dump(pluck([5, 0, 3, 0, 4, 2]));\necho '</pre>';", "    $evens = [];\n   \
    \ $index = 0;\n    foreach ($arr as $val) {\n        if (is_int($val) && $val\
    \ % 2 == 0) {\n            $evens[] = [$val, $index];\n        }\n        $index++;\n\
    \    }\n    if (empty($evens)) {\n        return [];\n    }\n    sort($evens);\n\
    \    return $evens[0];\n}", "  $evens = [];\n  $evensIndex = [];\n  foreach ($arr\
    \ as $index => $value) {\n    if ($value % 2 == 0) {\n      $evens[] = $value;\n\
    \      $evensIndex[] = $index;\n    }\n  }\n  if (count($evens) == 0) {\n    return\
    \ [];\n  }\n  asort($evens);\n  $evens = array_values($evens);\n  asort($evensIndex);\n\
    \  $evensIndex = array_values($evensIndex);\n  $minEvenValue = $evens[0];\n  $minEvenIndex\
    \ = $evensIndex[0];\n  return [$minEvenValue, $minEvenIndex];\n}\n", "    $evens\
    \ = [];\n    foreach ($arr as $k => $v) {\n        if ($v % 2 == 0) {\n      \
    \      $evens[$k] = $v;\n        }\n    }\n    if (empty($evens)) {\n        return\
    \ [];\n    }\n    asort($evens);\n    $index = array_keys($evens)[0];\n    return\
    \ [$evens[$index], $index];\n}\n\n$arr = [4, 2, 3];\nprint_r(pluck($arr));\n\n\
    $arr = [1, 2, 3];\nprint_r(pluck($arr));\n\n$arr = [];\nprint_r(pluck($arr));\n\
    \n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));", "  $evens = array_filter($arr,\
    \ function($item) {\n    return $item % 2 == 0;\n  });\n  if (empty($evens)) {\n\
    \    return [];\n  }\n  $min = min($evens);\n  return [$min, array_search($min,\
    \ $arr)];\n}\n", "    $result = [];\n    if (empty($arr)) {\n        return $result;\n\
    \    }\n    $arr1 = [];\n    $arr2 = [];\n    foreach ($arr as $key => $value)\
    \ {\n        if ($value % 2 == 0) {\n            $arr1[] = $value;\n         \
    \   $arr2[] = $key;\n        }\n    }\n    if (empty($arr1)) {\n        return\
    \ $result;\n    }\n    $min = min($arr1);\n    $result = [$min, $arr2[array_search($min,\
    \ $arr1)]];\n    return $result;\n}", "  $index = 10001;\n  $min = null;\n  $count\
    \ = 0;\n  $len = count($arr);\n  for ($i = 0; $i < $len; $i++) {\n    if ($arr[$i]\
    \ > 0 && $arr[$i] % 2 == 0) {\n      if ($min == null) {\n        $min = $arr[$i];\n\
    \        $index = $i;\n      } else {\n        if ($arr[$i] < $min) {\n      \
    \    $min = $arr[$i];\n          $index = $i;\n        }\n      }\n      $count++;\n\
    \    }\n  }\n  if ($count) {\n    return [$min, $index];\n  } else {\n    return\
    \ [];\n  }\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
