name: HumanEval_131_digits
language: php
prompt: "<?php\n// Given a positive integer n, return the product of the odd digits.\n\
  // Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n//\
  \ >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits($n) {\n"
tests: "function candidate(...$args) {\n    return digits(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(5) !== 5) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(54) !== 5) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(120) !== 1) { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(5014) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(98765)\
  \ !== 315) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5576543)\
  \ !== 2625) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2468)\
  \ !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $s = strval($n);\n    $result = 1;\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        if ($s[$i] % 2 !== 0) {\n            $result *= $s[$i];\n \
    \       }\n    }\n    return $result;\n}\n\necho digits(1) . \"\\n\";\necho digits(4)\
    \ . \"\\n\";\necho digits(235) . \"\\n\";", "    if ($n < 10) {\n        return\
    \ $n;\n    } else {\n        $digit = $n % 10;\n        $rest_of_n = intval($n\
    \ / 10);\n        if ($digit % 2 === 0) {\n            return digits($rest_of_n);\n\
    \        } else {\n            return digits($rest_of_n) * $digit;\n        }\n\
    \    }\n}\necho digits(1) . PHP_EOL;\necho digits(4) . PHP_EOL;\necho digits(235)\
    \ . PHP_EOL;\necho digits(57265) . PHP_EOL;\n", "    $digits = str_split($n);\n\
    \    $product = 1;\n    foreach ($digits as $digit) {\n        if ($digit % 2\
    \ != 0) {\n            $product *= $digit;\n        }\n    }\n    return $product;\n\
    }\necho digits(123);", "    $return = 0;\n    for ($i = 0; $i < strlen($n); $i++)\
    \ {\n        if ($n[$i] % 2 != 0) {\n            $return = $return * $n[$i];\n\
    \        }\n    }\n    return $return;\n}", "\t$str = (string)$n;\n\t$result =\
    \ 1;\n\tfor ($i = 0; $i < strlen($str); $i++) {\n\t\tif ($str[$i] % 2 != 0) {\n\
    \t\t\t$result *= $str[$i];\n\t\t}\n\t}\n\treturn $result;\n}\necho digits(1);\n\
    echo \"\\n\";\necho digits(4);\necho \"\\n\";\necho digits(235);\necho \"\\n\"\
    ;", "    if ($n < 0) {\n        return 0;\n    }\n    $product = 1;\n    while\
    \ ($n > 0) {\n        $digit = $n % 10;\n        if ($digit % 2 != 0) {\n    \
    \        $product *= $digit;\n        }\n        $n = (int)($n / 10);\n    }\n\
    \    return $product;\n}", "    $count = 0;\n    while ($n > 0) {\n        $rem\
    \ = $n % 10;\n        if ($rem % 2 != 0) {\n            $count *= $rem;\n    \
    \    }\n        $n = (int)($n / 10);\n    }\n    return $count;\n}", "  $string\
    \ = strval($n);\n  $str_length = strlen($string);\n  $i = 0;\n  $product = 1;\n\
    \  while ($i < $str_length) {\n    $current_digit = substr($string, $i, 1);\n\
    \    if ($current_digit % 2 != 0) {\n      $product *= $current_digit;\n    }\n\
    \    $i++;\n  }\n  return $product;\n}\n\necho digits(1) . \"\\n\";\necho digits(4)\
    \ . \"\\n\";\necho digits(235) . \"\\n\";\n", "    $result = 1;\n    while ($n\
    \ != 0) {\n        $digit = $n % 10;\n        if ($digit % 2 == 1) {\n       \
    \     $result *= $digit;\n        }\n        $n = (int)($n / 10);\n    }\n   \
    \ return $result;\n}\n", "    $digits = str_split($n);\n    $odds = array_filter($digits,\
    \ function($digit) {\n        return $digit % 2 == 1;\n    });\n    return empty($odds)\
    \ ? 0 : array_product($odds);\n}", "    $sum = 1;\n    $n = (string)$n;\n    for\
    \ ($i = 0; $i < strlen($n); $i++) {\n        if ((int)$n[$i] % 2 !== 0) {\n  \
    \          $sum *= (int)$n[$i];\n        }\n    }\n    return $sum;\n}\n", " \
    \ $result = 1;\n  for ($i = 0; $i < strlen($n); $i++) {\n    if ($n[$i] % 2 !==\
    \ 0) {\n      $result *= $n[$i];\n    }\n  }\n  return $result == 1 ? 0 : $result;\n\
    }\n\n$n = 1204;\necho digits($n);", "    $list = str_split($n);\n    $sum = 1;\n\
    \    foreach ($list as $number) {\n        if ($number % 2 === 1) {\n        \
    \    $sum *= $number;\n        }\n    }\n    return $sum;\n}", "\tif ($n < 0)\
    \ {\n\t\treturn false;\n\t}\n\tif ($n < 10) {\n\t\treturn $n % 2 == 1 ? $n : 0;\n\
    \t}\n\n\treturn digits($n / 10) * ($n % 10);\n}\n", "\tif($n < 0){\n\t\treturn\
    \ 'error';\n\t}\n\t$result = 1;\n\t$arr = str_split($n);\n\tforeach($arr as $value){\n\
    \t\tif( ($value % 2) !== 0 ){\n\t\t\t$result *= $value;\n\t\t}\n\t}\n\treturn\
    \ $result;\n}\necho digits(235);", "    if($n < 0) {\n        return 'Please enter\
    \ a positive integer';\n    }\n    $n = (string)$n;\n    $numArr = str_split($n);\n\
    \    $result = 1;\n    foreach($numArr as $num) {\n        if($num % 2 !== 0)\
    \ {\n            $result *= $num;\n        }\n    }\n    if($result === 1) {\n\
    \        return 0;\n    }\n    return $result;\n}\necho digits(1).PHP_EOL;\necho\
    \ digits(235).PHP_EOL;\necho digits(4).PHP_EOL;\necho digits(-67).PHP_EOL;\necho\
    \ digits(42342315).PHP_EOL;", "\t$result = 1;\n\t$nStr = strval($n);\n\tfor ($i\
    \ = 0; $i < strlen($nStr); $i++) {\n\t\tif ($nStr[$i] % 2 !== 0) {\n\t\t\t$result\
    \ *= $nStr[$i];\n\t\t}\n\t}\n\tif ($result === 1) {\n\t\treturn 0;\n\t}\n\treturn\
    \ $result;\n}\n\necho digits(1);\necho PHP_EOL;\necho digits(4);\necho PHP_EOL;\n\
    echo digits(235);\necho PHP_EOL;", "  $product = 1;\n  for ($i = 0; $i < strlen($n);\
    \ $i++) {\n    if ($n[$i] % 2 == 1) {\n      $product *= $n[$i];\n    }\n  }\n\
    \  return $product;\n}\necho digits(1);\necho \"\\n\";\necho digits(4);\necho\
    \ \"\\n\";\necho digits(235);\necho \"\\n\";", "  $even = 0;\n  $odd = 1;\n  $array\
    \ = str_split($n);\n  foreach ($array as $value) {\n    if ($value % 2 == 0) {\n\
    \      $even += $value;\n    } else {\n      $odd *= $value;\n    }\n  }\n  if\
    \ ($even > 0) {\n    return 0;\n  } else {\n    return $odd;\n  }\n}\n\necho digits(4);",
  "  $str = \"$n\";\n  $product = 1;\n  for ($i = 0; $i < strlen($str); $i++) {\n\
    \    $digit = intval($str[$i]);\n    if ($digit % 2 !== 0) {\n      $product *=\
    \ $digit;\n    }\n  }\n  return $product;\n}"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
