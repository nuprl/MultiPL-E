name: HumanEval_2_truncate_number
language: php
prompt: "<?php\n// Given a positive floating point number, it can be decomposed into\n\
  // and integer part (largest integer smaller than given number) and decimals\n//\
  \ (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
  // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n"
tests: "function candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
  \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
  \ failed!\"); }\n}\n\ntest();"
completions: ["\n}\n", "    return ($number - floor($number));\n}\n", "  // your code\
    \ here\n}\n", "    // Write code here...\n    $num_arr = explode('.', $number);\n\
    \    $dec_str = $num_arr[1];\n    $dec_str = '0.'.$dec_str;\n    return $dec_str;\n\
    }", "\treturn $number - floor($number);\n}\necho truncate_number(4.4);", "  return\
    \ $number - floor($number);\n}", "    // your code here\n    return $number -\
    \ (int)$number;\n}\n", "    // your code here\n}", "    return $number - floor($number);\n\
    }\n\necho truncate_number(3.5) . \"\\n\";", "  $res = fmod($number, (int)$number);\n\
    \  return $res;\n}\n", "\treturn $number - (int)$number;\n}\n", "  return $number\
    \ - floor($number);\n}\n", "  return (float)$number - (int)$number;\n}\necho truncate_number(3.5);\n\
    echo '<br>';\n", "\treturn $number - floor($number);\n}\n", "  $number_parts =\
    \ explode('.', $number);\n  return (count($number_parts) > 1) ? floatval('0.'\
    \ . $number_parts[1]) : 0;\n}\n\n$float_number = (float) readline('Enter a floating\
    \ point number: ');\necho 'Decimal part of ' . $float_number . ' is ' . truncate_number($float_number)\
    \ . PHP_EOL;", "\n}\n", "  $truncated = $number - floor($number);\n  return $truncated;\n\
    }\n", "  // YOUR CODE GOES HERE\n}", "    $number = (string)$number;\n    $index\
    \ = strpos($number, '.');\n    if ($index === false) {\n        return 0;\n  \
    \  }\n    $index += 1;\n    return substr($number, $index);\n}", "    return $number\
    \ - floor($number);\n}"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
