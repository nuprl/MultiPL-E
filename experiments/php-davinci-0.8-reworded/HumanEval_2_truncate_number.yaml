name: HumanEval_2_truncate_number
language: php
prompt: "<?php\n// Given a positive floating point number, it can be decomposed into\n\
  // and integer part (largest integer smaller than given number) and decimals\n//\
  \ (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
  // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n"
tests: "function candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
  \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
  \ failed!\"); }\n}\n\ntest();"
completions: ["\n}\n", "    return ($number - floor($number));\n}\n", "  // your code\
    \ here\n}\n", "    // Write code here...\n    $num_arr = explode('.', $number);\n\
    \    $dec_str = $num_arr[1];\n    $dec_str = '0.'.$dec_str;\n    return $dec_str;\n\
    }", "\treturn $number - floor($number);\n}\necho truncate_number(4.4);", "  return\
    \ $number - floor($number);\n}", "    // your code here\n    return $number -\
    \ (int)$number;\n}\n", "    // your code here\n}", "    return $number - floor($number);\n\
    }\n\necho truncate_number(3.5) . \"\\n\";", "  $res = fmod($number, (int)$number);\n\
    \  return $res;\n}\n", "\treturn $number - (int)$number;\n}\n", "  return $number\
    \ - floor($number);\n}\n", "  return (float)$number - (int)$number;\n}\necho truncate_number(3.5);\n\
    echo '<br>';\n", "\treturn $number - floor($number);\n}\n", "  $number_parts =\
    \ explode('.', $number);\n  return (count($number_parts) > 1) ? floatval('0.'\
    \ . $number_parts[1]) : 0;\n}\n\n$float_number = (float) readline('Enter a floating\
    \ point number: ');\necho 'Decimal part of ' . $float_number . ' is ' . truncate_number($float_number)\
    \ . PHP_EOL;", "\n}\n", "  $truncated = $number - floor($number);\n  return $truncated;\n\
    }\n", "  // YOUR CODE GOES HERE\n}", "    $number = (string)$number;\n    $index\
    \ = strpos($number, '.');\n    if ($index === false) {\n        return 0;\n  \
    \  }\n    $index += 1;\n    return substr($number, $index);\n}", "    return $number\
    \ - floor($number);\n}", "    $number = (float)$number;\n    return $number -\
    \ floor($number);\n}\n", "    return $number - floor($number);\n}\n", "    return\
    \ ($number - floor($number));\n}", "\n}\n", "    $parts = explode('.', $number);\n\
    \    if (count($parts) == 1) {\n        return 0;\n    }\n    return \"0.\" .\
    \ $parts[1];\n}\n", "    // your code here\n}", "  return fmod($number, 1);\n\
    }\n\necho truncate_number(3.5).\"\\n\";\necho truncate_number(6.7).\"\\n\";\n\
    echo truncate_number(4.4).\"\\n\";", "    $n = intval($number);\n    $d = $number\
    \ - $n;\n    return $d;\n}\n", "    // your code here\n    $n = (int)$number;\n\
    \    return $number - $n;\n}", "    return $number - (int)$number;\n}\n", "  \
    \  // Use preg_match to capture digits after the decimal point\n    // Note: \"\
    .\" is a special character in regex that matches any character\n    // except\
    \ a newline character. It needs to be escaped with a backslash \"\\\"\n    //\
    \ to be used to search for the actual dot character.\n    // Note: preg_match\
    \ returns true if it finds a match and false otherwise.\n    // In this case,\
    \ the third argument \"$matches\" will hold the results of the\n    // search\
    \ in an array. $matches[0] will hold the full match, and $matches[1]\n    // will\
    \ hold the first group, which in this case is the decimal part of the\n    //\
    \ number. \n    if (preg_match(\"/(\\.[0-9]+)/\", $number, $matches)) {\n    \
    \    // Use floatval to convert string to float\n        return floatval($matches[1]);\n\
    \    }\n    // If no decimal part, return 0\n    return 0;\n}\n", "    // your\
    \ code here\n}\n\n/**\n * @doc https://github.com/Naoghuman/php-training/blob/master/01-datatypes/README.md#exercise-3\n\
    \ */\n/*\nCreate a function which takes a number as an argument. Return 'positive'\
    \ if the number is positive,\n'negative' if the number is negative, and 'zero'\
    \ otherwise.\n */", "    return ($number - floor($number));\n}\n", "  return ($number\
    \ - floor($number));\n}\n", "    // your code here\n}\n", "  // Your code here\n\
    }\n", "    return $number - floor($number);\n}\n", "    $ipart = floor($number);\n\
    \    $decimals = $number - $ipart;\n    return $decimals;\n}\n", "  $number =\
    \ strval($number);\n  // Remove decimal and leave decimal\n  $number = explode('.',\
    \ $number);\n  return $number[1];\n}\n", "    return $number - floor($number);\n\
    }\n", "    return $number - floor($number);\n}\necho truncate_number(3.5);", "\t\
    return $number - floor($number);\n}\n", "    // BEGIN (write your solution here)\n\
    \    $number = (float)$number;\n    $int_number = floor($number);\n    $decimal_number\
    \ = $number - $int_number;\n    return $decimal_number;\n    // END\n}", "  return\
    \ abs($number - (int)$number);\n}\n", "  // Your code here\n}\n", "    return\
    \ $number - floor($number);\n}\n", "    $number = (string)$number;\n    return\
    \ substr($number, strpos($number, '.') + 1);\n}\n", "  $number = (float)$number;\n\
    \  $number = $number - floor($number);\n  if ($number < 0) {\n    $number = -$number;\n\
    \  }\n  return $number;\n}", "    return $number - floor($number);\n}\n", "  //\
    \ Your code here\n  if (is_numeric($number)) {\n    return $number - floor($number);\n\
    \  }\n  return null;\n}\n", "  // Write your code here\n  // To print results\
    \ to the standard output you can use print\n  // Example: print \"Hello world!\"\
    ;\n  $int_part = intval($number);\n  return $number - $int_part;\n}", "    $number_parts\
    \ = explode('.', $number);\n    return isset($number_parts[1]) ? '0.' . $number_parts[1]\
    \ : 0;\n}\n", "  return $number % 1;\n}\n", "\treturn $number - floor($number);\n\
    }\n", "  // YOUR CODE GOES HERE\n  return -1;\n}\n", "    return $number - floor($number);\n\
    }", "  return $number - floor($number);\n}\n", "  return $number - floor($number);\n\
    }\n", "    // your code goes here\n    return (float)$number - (int)$number;\n\
    }", "    return $number - floor($number);\n}\necho truncate_number(3.5) . \"\\\
    n\";\n", "  return $number - floor($number);\n}\n", "  // BEGIN (write your solution\
    \ here)\n  $integer = floor($number);\n  $decimal = $number - $integer;\n  return\
    \ $decimal;\n  // END\n}", "\n}\n", "    $number = $number - (int)$number;\n \
    \   return $number;\n}\n", "  return $number - (int)$number;\n}\n", "  $decimals\
    \ = $number - floor($number);\n  return $decimals;\n}\n", "    // your code goes\
    \ here\n    return $number - (int)$number;\n}\n", "  $integer = floor($number);\n\
    \  $decimal = $number - $integer;\n  return $decimal;\n}\n\necho truncate_number(3.5),\
    \ \"\\n\";\necho truncate_number(0.4), \"\\n\";\necho truncate_number(0.1), \"\
    \\n\";\necho truncate_number(0.0), \"\\n\";\necho truncate_number(0.9), \"\\n\"\
    ;\n", "\n}\n", "    return $number - (int)$number;\n}\n", "  return $number -\
    \ floor($number);\n}\n", "    // your code here\n}\n", "\t$str = (string)$number;\n\
    \t$pos = strpos($str, '.');\n\tif ($pos === false) {\n\t\treturn 0;\n\t}\n\treturn\
    \ (float)substr($str, $pos);\n}\n", "    // your code here\n}\n", "\t$integer_part\
    \ = floor($number);\n\t$decimal_part = $number - $integer_part;\n\treturn $decimal_part;\n\
    }\n", "  return abs($number) - floor(abs($number));\n}\necho \"\\n>>> truncate_number(3.5)\\\
    n\";\necho truncate_number(3.5);", "  $number_part = (int)$number;\n  $decimal_part\
    \ = $number - $number_part;\n  return $decimal_part;\n}\n\nprint(truncate_number(3.5)\
    \ . \"\\n\");\nprint(truncate_number(3.4) . \"\\n\");\nprint(truncate_number(3.15)\
    \ . \"\\n\");", "    $decimals = $number - floor($number);\n    return $decimals;\n\
    }\n", "    // TODO\n}", "  // your code here\n}\n", "    return fmod($number,\
    \ 1);\n}", "  // your code here\n}", "\t// write code here\n}", "    return (float)substr($number-floor($number),\
    \ 1);\n}\n", "    return $number - floor($number);\n}\n", "\t// your code here\n\
    }\n", "  // your code here\n}\n", "\treturn $number - floor($number);\n}\n", " \
    \   $i = (int)$number;\n    $f = $number - $i;\n    return $f;\n}\necho truncate_number(3.5)\
    \ . \"\\n\";\necho truncate_number(3.6) . \"\\n\";\necho truncate_number(3.456)\
    \ . \"\\n\";\necho truncate_number(0.1) . \"\\n\";\necho truncate_number(0.123)\
    \ . \"\\n\";\necho truncate_number(0.000001) . \"\\n\";\n", "  return round($number\
    \ - floor($number), 2);\n}\n\necho truncate_number(3.5);\necho \"\\n\";\necho\
    \ truncate_number(12.0);\necho \"\\n\";\necho truncate_number(3.14159265);\necho\
    \ \"\\n\";\n", "    $int = (int) $number;\n    $float = $number - $int;\n    if\
    \ ($float >= 0.5) {\n        return 1 - $float;\n    } else {\n        return\
    \ $float;\n    }\n}", "    return fmod($number, 1);\n}", "    return $number -\
    \ (int)$number;\n}\n", "  return $number - floor($number);\n}\n", "  return (float)\
    \ ( (string) $number - floor($number) );\n}\n", "    // your code here\n    return\
    \ 0;\n}", "  return $number - floor($number);\n}\n", "    $number = strval($number);\n\
    \    $point_position = strpos($number, '.');\n    if ($point_position === false)\
    \ {\n        return 0;\n    }\n    return floatval(substr($number, $point_position));\n\
    }\n", "    return $number - floor($number);\n}", "    // YOUR CODE GOES HERE\n\
    }\n", "  // your code here\n}\n", "  $integer = floor($number);\n  $decimal =\
    \ $number - $integer;\n  return $decimal;\n}\necho truncate_number(3.5);\n\necho\
    \ \"<br>\";\n", "  $int_part = floor($number);\n  $dec_part = $number - $int_part;\n\
    \  return $dec_part;\n}\n", "  // your code here\n}\n", "  $i = floor($number);\n\
    \  return $number - $i;\n}\n", "    // YOUR CODE GOES HERE\n    $number = $number\
    \ - floor($number);\n    return $number;\n}\n\n", '}', "\t$decimals = $number\
    \ - floor($number);\n\treturn $decimals;\n}\n", "  return $number - floor($number);\n\
    }", "    return $number - floor($number);\n}\n", "\treturn $number - floor($number);\n\
    }\n", "    return $number - (int)$number;\n}\n", "    $whole = (int) $number;\n\
    \    return $number - $whole;\n}\nvar_dump(truncate_number(3.5));", "  // >>>\
    \ 3.5 - 3\n  // 0.5\n  return $number - floor($number);\n}", "  return $number\
    \ - floor($number);\n}\necho truncate_number(3.5) . \"\\n\";\n", "    return $number\
    \ - floor($number);\n}\n", "  // get it's floor (integer part)\n  $floor = floor($number);\n\
    \  // get it's decimals (leftover part)\n  $decimals = $number - $floor;\n  //\
    \ return the decimals (always smaller than 1)\n  return $decimals;\n}", "    return\
    \ $number - floor($number);\n}\n\necho truncate_number(3.5) . \"\\n\";", "   \
    \ // your code here\n}\n\ntruncate_number(3.5);", "  return $number - floor($number);\n\
    }\n", "  return $number - floor($number);\n}\n", "    return $number - (int)$number;\n\
    }\n", "    // Your code here\n}\n", "    $integer = floor($number);\n    $decimal\
    \ = $number - $integer;\n    return $decimal;\n}\n", "    // Hint: use the intval()\
    \ function to get the integer part.\n    // In php this is the equivalent of casting\
    \ to int.\n    //$number = $number - intval($number);\n    $number = (intval($number)\
    \ - $number) + intval($number);\n    return $number;\n}", "    return $number\
    \ - floor($number);\n}", "  $number = floatval($number);\n  $number = $number\
    \ - floor($number);\n  return $number;\n}\n", "  // your code here\n}", "    $number_array\
    \ = explode('.', $number);\n    $decimal_part = substr($number_array[1], 1);\n\
    \    return $decimal_part;\n}\n", "  $integral = floor($number);\n  return ($number\
    \ - $integral);\n}\n\necho truncate_number(3.5) . \"\\n\";\n", "  return abs($number)\
    \ - floor(abs($number));\n}\n\necho truncate_number(3.5);", "\t$integer_part =\
    \ (int) $number;\n\treturn $number - $integer_part;\n}\n", "  $decimal = round($number\
    \ - floor($number), 2);\n  return $decimal;\n}\n\nvar_dump(truncate_number(3.5));",
  "  return abs($number - floor($number));\n}\n\necho truncate_number(3.5) . \"\\\
    n\";", "    return $number - floor($number);\n}\n\necho truncate_number(3.5);",
  "    $number_array = explode('.', $number);\n    return '0.' . $number_array[1];\n\
    }\n\necho truncate_number(3.5);", "    // Your code here\n}\n", "    $number =\
    \ $number - floor($number);\n    return $number;\n}\n", "    $parts = explode('.',\
    \ $number);\n    if (count($parts) === 1) {\n        return 0;\n    }\n    else\
    \ {\n        return '0.' . $parts[1];\n    }\n}\n", "    // Fill in the blank\n\
    \    return $number - floor($number);\n}", "  return $number - floor($number);\n\
    }", "    return $number - floor($number);\n}", "  return $number % 1;\n}\n", " \
    \   return $number - (int)$number;\n}\n", "    $num = floor($number);\n    return\
    \ ($number - $num);\n}\n", "\t// your code here\n}\n\necho truncate_number(3.5)\
    \ . PHP_EOL;\necho truncate_number(3.4) . PHP_EOL;\necho truncate_number(3.14)\
    \ . PHP_EOL;\necho truncate_number(1.2) . PHP_EOL;\necho truncate_number(2.7)\
    \ . PHP_EOL;\necho truncate_number(9.1) . PHP_EOL;\necho truncate_number(7.3)\
    \ . PHP_EOL;\necho truncate_number(4.4) . PHP_EOL;\necho truncate_number(7.8)\
    \ . PHP_EOL;\necho truncate_number(6.9) . PHP_EOL;", "    $number = $number -\
    \ floor($number);\n    return $number;\n}\n", "  return $number - floor($number);\n\
    }\n\n$f = truncate_number(3.5);\nprint $f;", "\treturn $number - floor($number);\n\
    }", "    return $number - floor($number);\n}\n", "    // Write your code here\n\
    \    // To print results to the standard output you can use print\n    // Example:\
    \ print \"Hello world!\";\n\treturn $number - floor($number);\n}\n\nprint truncate_number(3.5);\n",
  "  return $number - (int)$number;\n}\n", "\t$integer_part = floor($number);\n\t\
    $decimal_part = $number - $integer_part;\n\treturn $decimal_part;\n}\n\necho truncate_number(3.5);",
  "    return $number % 1;\n}", "    // your code here\n}", "    return $number -\
    \ floor($number);\n}\n\nvar_dump(truncate_number(3.5));", "  return $number -\
    \ (int)$number;\n}\necho truncate_number(3.5);", "  return $number - (int)$number;\n\
    }\n", "  return $number - floor($number);\n}\n", "  // your code here\n}\n", " \
    \   $n = floor($number);\n    return $number - $n;\n}\n", "  return $number -\
    \ floor($number);\n}", "    // YOUR CODE GOES HERE\n    // hint: use modulus to\
    \ find decimals\n    $myArray = explode(\".\", $number);\n    $myInt = $myArray[0];\n\
    \    $myDecimal = $number - $myInt;\n    return $myDecimal;\n}\n", "  return (int)$number\
    \ - $number;\n}\n", "  return $number - floor($number);\n}\n", "    return $number\
    \ - (int)$number;\n}\n", "    // Your code here\n    return round($number - floor($number),\
    \ 2);\n}", "\t$integer = (int) $number;\n\t$decimal = $number - $integer;\n\t\
    return $decimal;\n}\n", "    $arr = explode('.', $number);\n    $index = count($arr)\
    \ - 1;\n    $decimals = '0.'.$arr[$index];\n    return $decimals;\n}", "    $whole\
    \ = floor($number);\n    return $number - $whole;\n}", "  // SOLUTION\n  // We\
    \ can use the floor function to get the integer part of the number\n  // and then\
    \ subtract the integer part from the original number.\n  return $number - floor($number);\n\
    }\n", "    // TODO\n}\n", "    return $number - floor($number);\n}", "  $int_number\
    \ = (int)$number;\n  $decimal_part = $number - $int_number;\n  return $decimal_part;\n\
    }\n", "  // your code here\n}", "  $parts = explode('.', $number);\n  return '0.'.$parts[1];\n\
    }\n", "    return $number - floor($number);\n}", "    return $number - floor($number);\n\
    }\n", "    // your code here\n}", "    // your code here\n    $string = strval($number);\n\
    \    $index = strpos($string, '.');\n    $new_string = substr($string, $index);\n\
    \    $float = floatval($new_string);\n    return $float;\n}", "\tif ($number <\
    \ 0) {\n\t\t$num_parts = explode('-', $number);\n\t\t$number = $num_parts[1];\n\
    \t}\n\t$num_parts = explode('.', $number);\n\t$int_part = (int)$num_parts[0];\n\
    \t$dec_part = $number - $int_part;\n\treturn $dec_part;\n}\n", "    return $number\
    \ - floor($number);\n}", "  // your code here\n}", "\t$number1 = (int)$number;\n\
    \t$number2 = $number - $number1;\n\treturn $number2;\n}\necho truncate_number(5.4);",
  "    $whole = floor($number);\n    return $number - $whole;\n}\n", "    return 0;\n\
    }\n", "    return $number - floor($number);\n}\necho truncate_number(3.5); //\
    \ 0.5\necho truncate_number(5.5); // 0.5\necho truncate_number(7.5); // 0.5\n\
    echo truncate_number(9.5); // 0.5\necho truncate_number(11.5); // 0.5\necho truncate_number(13.5);\
    \ // 0.5\necho truncate_number(15.5); // 0.5\necho truncate_number(17.5); // 0.5\n\
    echo truncate_number(19.5); // 0.5\necho truncate_number(21.5); // 0.5\necho truncate_number(23.5);\
    \ // 0.5\necho truncate_number(25.5); // 0.5\necho truncate_number(27.5); // 0.5\n\
    echo truncate_number(29.5); // 0.5\necho truncate_number(31.5); // 0.5\necho truncate_number(33.5);\
    \ // 0.5\necho truncate_number(35.5); // 0.5\necho truncate_number(37.5); // 0.5\n\
    echo truncate_number(39.5); // 0.5\necho truncate_number(41.5); // 0.5\necho truncate_number(43.5);\
    \ // 0.5\necho truncate_number(45.5); // 0.5\necho truncate_number(47.5); // 0.5\n\
    echo truncate_number(49.5); // 0.5\necho truncate_number(51.5); // 0.5\necho truncate_number(53.5);\
    \ // 0.5\necho truncate_number(55.5); // 0.5\necho truncate_number(57.5); // 0.5\n\
    echo truncate_number(59.5); // 0.5\necho truncate_number(61.5); // 0.5\necho truncate_number(63.5);\
    \ // 0.5\necho truncate_number(65.5); // 0.5\necho truncate_number(67.5); // 0.5\n\
    echo truncate_", "  return $number - floor($number);\n}\n\nprint truncate_number(3.5);\n\
    print \"\\n\";", "  return 0;\n}\n", "    $integral_part = (int) $number;\n  \
    \  $decimal_part = $number - $integral_part;\n    return $decimal_part;\n}\n",
  "    return $number - (int)$number;\n}\n", "  return ($number - floor($number));\n\
    }\n", "    $truncated = $number - floor($number);\n    return $truncated;\n}\n\
    \necho truncate_number(3.5);", "    //your code here\n}\n\necho \"Test 1: \" .\
    \ (truncate_number(3.5) == 0.5 ? \"PASS\" : \"FAIL\") . \"\\n\";\necho \"Test\
    \ 2: \" . (truncate_number(3.2) == 0.2 ? \"PASS\" : \"FAIL\") . \"\\n\";\necho\
    \ \"Test 3: \" . (truncate_number(3.0) == 0.0 ? \"PASS\" : \"FAIL\") . \"\\n\"\
    ;\necho \"Test 4: \" . (truncate_number(3.8) == 0.8 ? \"PASS\" : \"FAIL\") . \"\
    \\n\";\necho \"Test 5: \" . (truncate_number(3.999) == 0.999 ? \"PASS\" : \"FAIL\"\
    ) . \"\\n\";\necho \"Test 6: \" . (truncate_number(3.0000000009) == 0.0000000009\
    \ ? \"PASS\" : \"FAIL\") . \"\\n\";\necho \"Test 7: \" . (truncate_number(3.9999999999)\
    \ == 0.9999999999 ? \"PASS\" : \"FAIL\") . \"\\n\";\necho \"Test 8: \" . (truncate_number(3.99999)\
    \ == 0.99999 ? \"PASS\" : \"FAIL\") . \"\\n\";\necho \"Test 9: \" . (truncate_number(3.999999)\
    \ == 0.999999 ? \"PASS\" : \"FAIL\") . \"\\n\";\necho \"Test 10: \" . (truncate_number(3.9999999)\
    \ == 0.9999999 ? \"PASS\" : \"FAIL\") . \"\\n\";\necho \"Test 11: \" . (truncate_number(3.99999999)\
    \ == 0.99999999 ? \"PASS\" : \"FAIL\") . \"\\n\";\necho \"Test 12: \" . (truncate_number(3.999999999)\
    \ == 0.999999999 ? \"PASS\" : \"FAIL\") . \"\\n\";\necho \"Test 13: \" . (truncate_number(3.9999999999)\
    \ == 0.9999999999 ? \"PASS\" : \"FAIL\") . \"\\n\";\necho \"Test 14: \" . (trunc",
  "  $number_str = (string)$number;\n  $number_str_arr = explode('.', $number_str);\n\
    \  $integer_part = (int)$number_str_arr[0];\n  $decimal_part = $number - $integer_part;\n\
    \  return $decimal_part;\n}\n\n$input1 = 5.5;\n$expected1 = 0.5;\n$output1 = truncate_number($input1);\n\
    echo \"truncate_number($input1) == $expected1 ?\\n$output1\";\n\n$input2 = 3.1415;\n\
    $expected2 = 0.1415;\n$output2 = truncate_number($input2);\necho \"truncate_number($input2)\
    \ == $expected2 ?\\n$output2\";\n\n$input3 = 1.0;\n$expected3 = 0.0;\n$output3\
    \ = truncate_number($input3);\necho \"truncate_number($input3) == $expected3 ?\\\
    n$output3\";\n\n$input4 = -3.1415;\n$expected4 = -0.1415;\n$output4 = truncate_number($input4);\n\
    echo \"truncate_number($input4) == $expected4 ?\\n$output4\";\n\n$input5 = -8.0;\n\
    $expected5 = 0.0;\n$output5 = truncate_number($input5);\necho \"truncate_number($input5)\
    \ == $expected5 ?\\n$output5\";\n\n$input6 = 0.0;\n$expected6 = 0.0;\n$output6\
    \ = truncate_number($input6);\necho \"truncate_number($input6) == $expected6 ?\\\
    n$output6\";\n\n$input7 = 1.234;\n$expected7 = 0.234;\n$output7 = truncate_number($input7);\n\
    echo \"truncate_number($input7) == $expected7 ?\\n$output7\";\n\n$input8 = -3.2345;\n\
    $expected8 = -0.2345;\n$output8 = truncate_number($input8);\necho \"truncate_",
  "\t// Write your code here\n\t// To print results to the standard output you can\
    \ use print\n\t// Example: print \"Hello world!\";\n\t$string = strval($number);\n\
    \t$chunks = explode(\".\", $string);\n\treturn '0.'.$chunks[1];\n}\n", "    $integer\
    \ = floor($number);\n    $decimal = $number - $integer;\n    return $decimal;\n\
    }\n", "    $integer_part = (int) $number;\n    $number -= $integer_part;\n   \
    \ return $number;\n}", "    $number_int = intval($number);\n    return $number\
    \ - $number_int;\n}\n", "    return $number - floor($number);\n}\necho truncate_number(3.5)\
    \ . \"\\n\";\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
