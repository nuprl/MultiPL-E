language: php
name: HumanEval_156_int_to_mini_roman
results:
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  // Your code here...\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2pjd4atq.php:21\n\
    Stack trace:\n#0 /tmp/tmp2pjd4atq.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp2pjd4atq.php\
    \ on line 21\n"
  timestamp: 1659824749
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $result = '';\n  $roman = array(\n    'M' => 1000,\n    'CM' => 900,\n\
    \    'D' => 500,\n    'CD' => 400,\n    'C' => 100,\n    'XC' => 90,\n    'L'\
    \ => 50,\n    'XL' => 40,\n    'X' => 10,\n    'IX' => 9,\n    'V' => 5,\n   \
    \ 'IV' => 4,\n    'I' => 1\n  );\n  foreach ($roman as $key => $value) {\n   \
    \ $matches = intval($number / $value);\n    $result .= str_repeat($key, $matches);\n\
    \    $number = $number % $value;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0i1h5uko.php:42\n\
    Stack trace:\n#0 /tmp/tmp0i1h5uko.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp0i1h5uko.php\
    \ on line 42\n"
  timestamp: 1659824749
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $numerals = array(\n        \"M\"=>1000,\n        \"CM\"=>900,\n    \
    \    \"D\"=>500,\n        \"CD\"=>400,\n        \"C\"=>100,\n        \"XC\"=>90,\n\
    \        \"L\"=>50,\n        \"XL\"=>40,\n        \"X\"=>10,\n        \"IX\"=>9,\n\
    \        \"V\"=>5,\n        \"IV\"=>4,\n        \"I\"=>1,\n    );\n    $roman\
    \ = \"\";\n    foreach ($numerals as $key => $value) {\n        $quotient = intval($number\
    \ / $value);\n        $number = $number % $value;\n        $roman .= str_repeat($key,\
    \ $quotient);\n    }\n    return $roman;\n}\n\nfunction candidate(...$args) {\n\
    \    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp50ks701_.php:42\n\
    Stack trace:\n#0 /tmp/tmp50ks701_.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp50ks701_.php\
    \ on line 42\n"
  timestamp: 1659824749
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n\t$numerals = array(\n\t\t1 => 'i',\n\t\t5 => 'v',\n\t\t10 => 'x',\n\t\t\
    50 => 'l',\n\t\t100 => 'c',\n\t\t500 => 'd',\n\t\t1000 => 'm',\n\t);\n\t// TODO:\
    \ implement this!\n}\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwxmqudw5.php:29\n\
    Stack trace:\n#0 /tmp/tmpwxmqudw5.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpwxmqudw5.php\
    \ on line 29\n"
  timestamp: 1659824749
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = \"\";\n  $numerals = [\n    1000 => \"m\",\n    900 => \"cm\"\
    ,\n    500 => \"d\",\n    400 => \"cd\",\n    100 => \"c\",\n    90 => \"xc\"\
    ,\n    50 => \"l\",\n    40 => \"xl\",\n    10 => \"x\",\n    9 => \"ix\",\n \
    \   5 => \"v\",\n    4 => \"iv\",\n    1 => \"i\"\n  ];\n  foreach ($numerals\
    \ as $value => $letter) {\n    while ($number >= $value) {\n      $roman .= $letter;\n\
    \      $number -= $value;\n    }\n  }\n  return $roman;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824749
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $result = \"\";\n    $roman_numerals = array(\n        'I' => 1,\n  \
    \      'V' => 5,\n        'X' => 10,\n        'L' => 50,\n        'C' => 100,\n\
    \        'D' => 500,\n        'M' => 1000\n    );\n    foreach ($roman_numerals\
    \ as $roman => $arabic) {\n        $matches = intval($number / $arabic);\n   \
    \     $result .= str_repeat($roman, $matches);\n        $number = $number % $arabic;\n\
    \    }\n    return $result;\n}\n\nprint_r(int_to_mini_roman(152));\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp8fslblrq.php:37\nStack\
    \ trace:\n#0 /tmp/tmp8fslblrq.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp8fslblrq.php\
    \ on line 37\n"
  timestamp: 1659824749
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n\t$roman = \"\";\n\t$remainder = $number;\n\twhile ($remainder > 0) {\n\t\
    \tswitch ($remainder) {\n\t\t\tcase $remainder >= 1000:\n\t\t\t\t$roman .= \"\
    m\";\n\t\t\t\t$remainder -= 1000;\n\t\t\t\tbreak;\n\t\t\tcase $remainder >= 900:\n\
    \t\t\t\t$roman .= \"cm\";\n\t\t\t\t$remainder -= 900;\n\t\t\t\tbreak;\n\t\t\t\
    case $remainder >= 500:\n\t\t\t\t$roman .= \"d\";\n\t\t\t\t$remainder -= 500;\n\
    \t\t\t\tbreak;\n\t\t\tcase $remainder >= 400:\n\t\t\t\t$roman .= \"cd\";\n\t\t\
    \t\t$remainder -= 400;\n\t\t\t\tbreak;\n\t\t\tcase $remainder >= 100:\n\t\t\t\t\
    $roman .= \"c\";\n\t\t\t\t$remainder -= 100;\n\t\t\t\tbreak;\n\t\t\tcase $remainder\
    \ >= 90:\n\t\t\t\t$roman .= \"xc\";\n\t\t\t\t$remainder -= 90;\n\t\t\t\tbreak;\n\
    \t\t\tcase $remainder >= 50:\n\t\t\t\t$roman .= \"l\";\n\t\t\t\t$remainder -=\
    \ 50;\n\t\t\t\tbreak;\n\t\t\tcase $remainder >= 40:\n\t\t\t\t$roman .= \"xl\"\
    ;\n\t\t\t\t$remainder -= 40;\n\t\t\t\tbreak;\n\t\t\tcase $remainder >= 10:\n\t\
    \t\t\t$roman .= \"x\";\n\t\t\t\t$remainder -= 10;\n\t\t\t\tbreak;\n\t\t\tcase\
    \ $remainder >= 9:\n\t\t\t\t$roman .= \"ix\";\n\t\t\t\t$remainder -= 9;\n\t\t\t\
    \tbreak;\n\t\t\tcase $remainder >= 5:\n\t\t\t\t$roman .= \"v\";\n\t\t\t\t$remainder\
    \ -= 5;\n\t\t\t\tbreak;\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 16 in /tmp/tmpotv2vvxv.php on line 82

    '
  timestamp: 1659824749
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $numerals = array(\n        1000 => 'm', 900 => 'cm', 500 => 'd', 400\
    \ => 'cd',\n        100 => 'c', 90 => 'xc', 50 => 'l', 40 => 'xl',\n        10\
    \ => 'x', 9 => 'ix', 5 => 'v', 4 => 'iv',\n        1 => 'i'\n    );\n    $result\
    \ = '';\n    while ($number > 0) {\n        foreach ($numerals as $limit => $glyph)\
    \ {\n            if ($number >= $limit) {\n                $result .= $glyph;\n\
    \                $number -= $limit;\n                break;\n            }\n \
    \       }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n \
    \   return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824749
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    // TODO\n}\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8nud1xu_.php:20\n\
    Stack trace:\n#0 /tmp/tmp8nud1xu_.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp8nud1xu_.php\
    \ on line 20\n"
  timestamp: 1659824749
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $numerals = array('i', 'v', 'x', 'l', 'c', 'd', 'm');\n  $decimals = array(1,\
    \ 5, 10, 50, 100, 500, 1000);\n  $numeral_map = array();\n  $roman_string = '';\n\
    \  for ($i = 0; $i < count($decimals); $i++) {\n    $numeral_map[$decimals[$i]]\
    \ = $numerals[$i];\n  }\n  foreach ($decimals as $decimal) {\n    if ($number\
    \ < $decimal) {\n      continue;\n    }\n    $times = (int) ($number / $decimal);\n\
    \    $number = $number % $decimal;\n    if ($times <= 3) {\n      $roman_string\
    \ .= str_repeat($numeral_map[$decimal], $times);\n    } else {\n      if ($times\
    \ == 4) {\n        $roman_string .= $numeral_map[$decimal] . $numeral_map[$decimal\
    \ * 5];\n      } else if ($times == 9) {\n        $roman_string .= $numeral_map[$decimal]\
    \ . $numeral_map[$decimal * 10];\n      } else {\n        $roman_string .= $numeral_map[$decimal\
    \ * 5] . str_repeat($numeral_map[$decimal], $times - 5);\n      }\n    }\n  }\n\
    \  return $roman_string;\n}\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzyvok2lt.php:45\n\
    Stack trace:\n#0 /tmp/tmpzyvok2lt.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpzyvok2lt.php\
    \ on line 45\n"
  timestamp: 1659824749
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  // Create an array of nums and roman numerals\n  $nums = [1000, 900, 500,\
    \ 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n  $romans = [\"m\", \"cm\", \"d\", \"\
    cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n  $returnStr\
    \ = \"\";\n\n  // Iterate through arrays until you hit the right number\n  for\
    \ ($i = 0; $i < count($nums); $i++) {\n    while ($number >= $nums[$i]) {\n  \
    \    $returnStr .= $romans[$i];\n      $number -= $nums[$i];\n    }\n  }\n  return\
    \ $returnStr;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824749
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  if ($number == NULL) return NULL;\n  $number = intval($number);\n  if ($number\
    \ > 1000 || $number < 1) return NULL;\n  $result = '';\n  // Check for numeral\
    \ roman thousands.\n  if ($number >= 1000) {\n    $result .= 'm';\n    $number\
    \ -= 1000;\n  }\n  // Check for numeral roman hundreds.\n  if ($number >= 900)\
    \ {\n    $result .= 'cm';\n    $number -= 900;\n  }\n  else if ($number >= 500)\
    \ {\n    $result .= 'd';\n    $number -= 500;\n  }\n  else if ($number >= 400)\
    \ {\n    $result .= 'cd';\n    $number -= 400;\n  }\n  while ($number >= 100)\
    \ {\n    $result .= 'c';\n    $number -= 100;\n  }\n  // Check for numeral roman\
    \ tens.\n  if ($number >= 90) {\n    $result .= 'xc';\n    $number -= 90;\n  }\n\
    \  else if ($number >= 50) {\n    $result .= 'l';\n    $number -= 50;\n  }\n \
    \ else if ($number >= 40) {\n    $result .= 'xl';\n    $number -= 40;\n  }\n \
    \ while ($number >= 10) {\n    $result .= 'x';\n    $number -= 10;\n  }\n  //\
    \ Check for numeral roman ones.\n  if ($number >= 9) {\n    $result .= 'ix';\n\
    \    $number -= 9;\n  }\n  else if ($number >= 5) {\n    $result .= 'v';\n   \
    \ $number -= 5;\n  }\n  else if ($number >= 4) {\n    $result .= 'iv';\n    $number\
    \ -= 4;\n  }\n  while ($number >= 1) {\n    $result .= 'i';\n    $number -= 1;\n\
    \  }\n  return $result;\n}\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824749
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $mapping = [\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n   \
    \ 400 => 'cd',\n    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n\
    \    10 => 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n\
    \  ];\n  $number_mapped = [];\n  foreach ($mapping as $arabic => $roman) {\n \
    \   $number_mapped[$arabic] = floor($number / $arabic);\n    $number %= $arabic;\n\
    \  }\n  $result = '';\n  foreach ($number_mapped as $arabic => $times) {\n   \
    \ $result .= str_repeat($mapping[$arabic], $times);\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824749
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    if (!is_numeric($number) || $number < 1 || $number > 1000) {\n      \
    \  return \"ERROR:  Number must be a positive integer between 1 and 1000\";\n\
    \    }\n    $roman = \"\";\n    $numerals = array(1000 => \"m\", 500 => \"d\"\
    , 100 => \"c\", 50 => \"l\", 10 => \"x\", 5 => \"v\", 1 => \"i\");\n    foreach\
    \ ($numerals as $numeral => $value) {\n        while ($number >= $numeral) {\n\
    \            $roman .= $value;\n            $number -= $numeral;\n        }\n\
    \    }\n    return str_replace(array(\"iiiii\", \"iv\", \"vv\", \"ix\", \"xxxx\"\
    , \"xl\", \"ll\", \"xc\", \"cccc\", \"cd\", \"dd\", \"cm\"), array(\"v\", \"iv\"\
    , \"v\", \"ix\", \"xl\", \"xl\", \"l\", \"xc\", \"cd\", \"cd\", \"d\", \"cm\"\
    ), $roman);\n}\necho int_to_mini_roman(19) . \"\\n\";\necho int_to_mini_roman(152)\
    \ . \"\\n\";\necho int_to_mini_roman(426) . \"\\n\";\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "xviiii\nclii\ncdxxvi\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmptn2r043b.php:35\nStack trace:\n#0 /tmp/tmptn2r043b.php(51): test()\n\
    #1 {main}\n  thrown in /tmp/tmptn2r043b.php on line 35\n"
  timestamp: 1659824749
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    if ($number > 1000) {\n        throw new Exception('input too large');\n\
    \    }\n    $result = '';\n    foreach (array(100, 90, 50, 40, 10, 9, 5, 4, 1)\
    \ as $decimal) {\n        while ($number >= $decimal) {\n            $result .=\
    \ mini_roman_numeral($decimal);\n            $number -= $decimal;\n        }\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mini_roman_numeral()\
    \ in /tmp/tmpcfc_msmt.php:19\nStack trace:\n#0 /tmp/tmpcfc_msmt.php(27): int_to_mini_roman(19)\n\
    #1 /tmp/tmpcfc_msmt.php(31): candidate(19)\n#2 /tmp/tmpcfc_msmt.php(47): test()\n\
    #3 {main}\n  thrown in /tmp/tmpcfc_msmt.php on line 19\n"
  timestamp: 1659824749
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  if($number < 0 || $number > 1000) {\n    return false;\n  }\n  $result\
    \ = \"\";\n  while($number >= 1000) {\n    $result .= \"m\";\n    $number -= 1000;\n\
    \  }\n  while($number >= 900) {\n    $result .= \"cm\";\n    $number -= 900;\n\
    \  }\n  while($number >= 500) {\n    $result .= \"d\";\n    $number -= 500;\n\
    \  }\n  while($number >= 400) {\n    $result .= \"cd\";\n    $number -= 400;\n\
    \  }\n  while($number >= 100) {\n    $result .= \"c\";\n    $number -= 100;\n\
    \  }\n  while($number >= 90) {\n    $result .= \"xc\";\n    $number -= 90;\n \
    \ }\n  while($number >= 50) {\n    $result .= \"l\";\n    $number -= 50;\n  }\n\
    \  while($number >= 40) {\n    $result .= \"xl\";\n    $number -= 40;\n  }\n \
    \ while($number >= 10) {\n    $result .= \"x\";\n    $number -= 10;\n  }\n  while($number\
    \ >= 9) {\n    $result .= \"ix\";\n    $number -= 9;\n  }\n  while($number >=\
    \ 5) {\n    $result .= \"v\";\n    $number -= 5;\n  }\n  while($number >= 4) {\n\
    \    $result .= \"iv\";\n    $number -= 4;\n  }\n  while($number >= 1) {\n   \
    \ $result .= \"i\";\n    $number -= 1;\n  }\n  return $result;\n}\necho int_to_mini_roman(19).\"\
    \\n\";\necho int_to_mini_roman(152).\"\\n\";\necho int_to_mini_roman(426).\"\\\
    n\";\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'xix

    clii

    cdxxvi

    '
  timestamp: 1659824749
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $thous = (int) ($number / 1000);\n  $hunds = (int) (($number - ($thous\
    \ * 1000)) / 100);\n  $tens = (int) (($number - ($thous * 1000) - ($hunds * 100))\
    \ / 10);\n  $ones = (int) ($number % 10);\n  $roman_num = str_repeat(\"m\", $thous);\n\
    \  $roman_num .= str_repeat(\"c\", $hunds);\n  if ($hunds == 9) { $roman_num =\
    \ str_replace(\"cccc\", \"cm\", $roman_num); }\n  $roman_num .= str_repeat(\"\
    x\", $tens);\n  if ($tens == 9) { $roman_num = str_replace(\"xxxx\", \"xc\", $roman_num);\
    \ }\n  $roman_num .= str_repeat(\"i\", $ones);\n  if ($ones == 9) { $roman_num\
    \ = str_replace(\"iiii\", \"ix\", $roman_num); }\n  return $roman_num;\n}\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6cajhyn_.php:31\n\
    Stack trace:\n#0 /tmp/tmp6cajhyn_.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp6cajhyn_.php\
    \ on line 31\n"
  timestamp: 1659824749
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $roman_numerals = [\n        'm' => 1000,\n        'cm' => 900,\n   \
    \     'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc' =>\
    \ 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n        'ix'\
    \ => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1\n    ];\n   \
    \ $mini_roman = '';\n    foreach ($roman_numerals as $roman => $num) {\n     \
    \   $mini_roman .= str_repeat($roman, $number / $num);\n        $number %= $num;\n\
    \    }\n    return $mini_roman;\n}\n\necho int_to_mini_roman(19) . PHP_EOL;\n\
    echo int_to_mini_roman(152) . PHP_EOL;\necho int_to_mini_roman(426) . PHP_EOL;\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Deprecated: Implicit conversion from float 0.019 to int loses precision in /tmp/tmpjc46xm2p.php
    on line 30


    Deprecated: Implicit conversion from float 0.021111111111111112 to int loses precision
    in /tmp/tmpjc46xm2p.php on line 30


    Deprecated: Implicit conversion from float 0.038 to int loses precision in /tmp/tmpjc46xm2p.php
    on line 30


    Deprecated: Implicit conversion from float 0.0475 to int loses precision in /tmp/tmpjc46xm2p.php
    on line 30


    Deprecated: Implicit conversion from float 0.19 to int loses precision in /tmp/tmpjc46xm2p.php
    on line 30


    Deprecated: Implicit conversion from float 0.2111111111111111 to int loses precision
    in /tmp/tmpjc46xm2p.php on line 30


    Deprecated: Implicit conversion from float 0.38 to int loses precision in /tmp/tmpjc46xm2p.php
    on line 30


    Deprecated: Implicit conversion from float 0.475 to int loses precision in /tmp/tmpjc46xm2p.php
    on line 30


    Deprecated: Implicit conversion from float 1.9 to int loses precision in /tmp/tmpjc46xm2p.php
    on line 30

    xix


    Deprecated: Implicit conversion from float 0.152 to int loses precision in /tmp/tmpjc46xm2p.php
    on line 30


    Deprecated: Implicit conversion from float 0.1688888888888889 to int loses precision
    in /tmp/tmpjc46xm2p.php on line 30


    Deprecated: Implicit conversion from float 0.304 to int loses precision in /tmp/tmpjc46xm2p.php
    on line 30


    Deprecated: Implicit conversion from float 0.38 to int loses precision in /tmp/tmpjc46xm2p.php
    on line 30


    Deprecated: Implicit conversion from float 1.52 to int loses precision in /tmp/tmpjc46xm2p.php
    on line 30


    Deprecated: Implicit conversion from float 0.5777777777777777 to int loses precision
    in /tmp/tmpjc46xm2p.php on line 30


    Deprecated: Implicit conversion from float 1.04 to int loses precision in /tmp/tmpjc46xm2p.php
    on line 30


    Deprecated: Implicit conversion from float 0.05 to int loses precision in /tmp/tmpjc46xm2p.php
    on line 30


    Deprecated: Implicit conversion from float 0.2 to int loses precision in /tmp/tmpjc46xm2p.php
    on line 30


    Deprecated: Implicit conversion from float 0.222222222'
  timestamp: 1659824749
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $length = strlen((string)$number);\n    $roman_numeral = '';\n    if\
    \ ($length > 0) {\n        for ($i = 0; $i < $length; $i++) {\n            $num\
    \ = $number % 10;\n            $roman_numeral = mini_roman_numeral($num) . $roman_numeral;\n\
    \            $number = (int)($number / 10);\n        }\n    }\n    return $roman_numeral;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mini_roman_numeral()\
    \ in /tmp/tmpkm9sjz2o.php:18\nStack trace:\n#0 /tmp/tmpkm9sjz2o.php(26): int_to_mini_roman(19)\n\
    #1 /tmp/tmpkm9sjz2o.php(30): candidate(19)\n#2 /tmp/tmpkm9sjz2o.php(46): test()\n\
    #3 {main}\n  thrown in /tmp/tmpkm9sjz2o.php on line 18\n"
  timestamp: 1659824749
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $array_numerals = array(\n        1000 => 'm',\n        900 => 'cm',\n\
    \        500 => 'd',\n        400 => 'cd',\n        100 => 'c',\n        90 =>\
    \ 'xc',\n        50 => 'l',\n        40 => 'xl',\n        10 => 'x',\n       \
    \ 9 => 'ix',\n        5 => 'v',\n        4 => 'iv',\n        1 => 'i'\n    );\n\
    \    $result = '';\n    foreach ($array_numerals as $key => $value) {\n      \
    \  $count = floor($number / $key);\n        $result .= str_repeat($value, $count);\n\
    \        $number -= $key * $count;\n    }\n    return $result;\n}\n\necho 'Input\
    \ the number: ';\n$user_input = trim(fgets(STDIN));\necho int_to_mini_roman($user_input)\
    \ . PHP_EOL;\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Input the number: \nFatal error: Uncaught TypeError: Unsupported operand\
    \ types: string / int in /tmp/tmpytd53jt6.php:30\nStack trace:\n#0 /tmp/tmpytd53jt6.php(39):\
    \ int_to_mini_roman('')\n#1 {main}\n  thrown in /tmp/tmpytd53jt6.php on line 30\n"
  timestamp: 1659824749
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    if ($number < 1 || $number > 1000) {\n        return FALSE;\n    }\n\
    \    $table = array(1000 => 'm', 500 => 'd', 100 => 'c', 50 => 'l', 10 => 'x',\
    \ 5 => 'v', 1 => 'i');\n    $output = '';\n    while ($number) {\n        $rem\
    \ = $number % 10;\n        if ($rem < 4) {\n            $output = str_repeat($table[1],\
    \ $rem) . $output;\n        } elseif ($rem == 4) {\n            $output = $table[1]\
    \ . $table[5] . $output;\n        } elseif ($rem < 9) {\n            $output =\
    \ $table[5] . str_repeat($table[1], $rem - 5) . $output;\n        } else {\n \
    \           $output = $table[1] . $table[10] . $output;\n        }\n        $number\
    \ = floor($number / 10);\n        $table = array(100 => 'm', 50 => 'd', 10 =>\
    \ 'c', 5 => 'l', 1 => 'x');\n    }\n    return $output;\n}\n\necho int_to_mini_roman(152);\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "xlii\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5oml77wx.php:42\n\
    Stack trace:\n#0 /tmp/tmp5oml77wx.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp5oml77wx.php\
    \ on line 42\n"
  timestamp: 1660029131
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $answers = array(1000 => 'm', 900 => 'cm', 500 => 'd', 400 => 'cd', 100\
    \ => 'c', 90 => 'xc', 50 => 'l', 40 => 'xl', 10 => 'x', 9 => 'ix', 5 => 'v', 4\
    \ => 'iv', 1 => 'i');\n  $answer = '';\n  foreach ($answers as $value => $roman)\
    \ {\n    while ($number >= $value) {\n      $answer .= $roman;\n      $number\
    \ -= $value;\n    }\n  }\n  return $answer;\n}\nfunction candidate(...$args) {\n\
    \    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029131
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $dictionary = array(1000 => 'm', 900 => 'cm', 500 => 'd', 400 => 'cd',\
    \ 100 => 'c', 90 => 'xc', 50 => 'l', 40 => 'xl', 10 => 'x', 9 => 'ix', 5 => 'v',\
    \ 4 => 'iv', 1 => 'i');\n    $result = '';\n    while ($number > 0) {\n      \
    \  foreach ($dictionary as $key => $value) {\n            if ($number >= $key)\
    \ {\n                $number -= $key;\n                $result .= $value;\n  \
    \              break;\n            }\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $answer = '';\n    $keys = array('M'=>1000, 'CM'=>900, 'D'=>500, 'CD'=>400,\
    \ 'C'=>100, 'XC'=>90, 'L'=>50, 'XL'=>40, 'X'=>10, 'IX'=>9, 'V'=>5, 'IV'=>4, 'I'=>1);\n\
    \    foreach($keys as $key => $value) {\n        while($number >= $value) {\n\
    \            $answer .= $key;\n            $number -= $value;\n        }\n   \
    \ }\n    return $answer;\n}\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplabjwtuq.php:28\n\
    Stack trace:\n#0 /tmp/tmplabjwtuq.php(44): test()\n#1 {main}\n  thrown in /tmp/tmplabjwtuq.php\
    \ on line 28\n"
  timestamp: 1660029131
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $lookup = array(\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n\
    \    400 => 'cd',\n    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 =>\
    \ 'xl',\n    10 => 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1\
    \ => 'i'\n  );\n  $output = '';\n  while ($number > 0) {\n    foreach ($lookup\
    \ as $rom => $arab) {\n      if ($number >= $rom) {\n        $number -= $rom;\n\
    \        $output .= $arab;\n        break;\n      }\n    }\n  }\n  return $output;\n\
    }\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpujewm3ah.php:20\n\
    Stack trace:\n#0 /tmp/tmpujewm3ah.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpujewm3ah.php\
    \ on line 20\n"
  timestamp: 1660029131
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $result = \"\";\n    $split = str_split($number);\n    $roman = array(\n\
    \        0 => array(''  , 'i' , 'ii', 'iii', 'iv', 'v' , 'vi', 'vii', 'viii',\
    \ 'ix'),\n        1 => array(''  , 'x' , 'xx', 'xxx', 'xl', 'l' , 'lx', 'lxx',\
    \ 'lxxx', 'xc'),\n        2 => array(''  , 'c' , 'cc', 'ccc', 'cd', 'd' , 'dc',\
    \ 'dcc', 'dccc', 'cm'),\n        3 => array(''  , 'm' , 'mm', 'mmm')\n    );\n\
    \    $i = count($split);\n    foreach ($split as $key => $value) {\n        $result\
    \ .= $roman[$i-1][$value];\n        $i--;\n    }\n    return $result;\n}\n\n$number\
    \ = 437;\necho int_to_mini_roman($number);\n\nfunction candidate(...$args) {\n\
    \    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: cdxxxvii
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n\t$mini_roman = array(\n\t\t'M' => 1000,\n\t\t'D' => 500,\n\t\t'C' => 100,\n\
    \t\t'L' => 50,\n\t\t'X' => 10,\n\t\t'V' => 5,\n\t\t'I' => 1\n\t);\n\t$str = '';\n\
    \tforeach ($mini_roman as $letter => $value) {\n\t\t$str .= str_repeat($letter,\
    \ intval($number / $value));\n\t\t$number %= $value;\n\t}\n\t$str = str_replace('VIIII',\
    \ 'IX', $str);\n\t$str = str_replace('IIII', 'IV', $str);\n\t$str = str_replace('LXXXX',\
    \ 'XC', $str);\n\t$str = str_replace('XXXX', 'XL', $str);\n\t$str = str_replace('DCCCC',\
    \ 'CM', $str);\n\t$str = str_replace('CCCC', 'CD', $str);\n\treturn $str;\n}\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnqmjwyxu.php:40\n\
    Stack trace:\n#0 /tmp/tmpnqmjwyxu.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpnqmjwyxu.php\
    \ on line 40\n"
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  // TODO\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo7xeb8mj.php:21\n\
    Stack trace:\n#0 /tmp/tmpo7xeb8mj.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpo7xeb8mj.php\
    \ on line 21\n"
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n}\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1q4oa9i9.php:19\n\
    Stack trace:\n#0 /tmp/tmp1q4oa9i9.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp1q4oa9i9.php\
    \ on line 19\n"
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $decimal = array(1000, 900, 500, 400, 100, 90, 50, 40,\
    \ 10, 9, 5, 4, 1);\n  $mini = array('m', 'c', 'd', 'c', 'c', 'x', 'l', 'x', 'x',\
    \ 'i', 'v', 'i', 'i');\n  for ($i = 0; $i < count($decimal); $i++) {\n    while\
    \ ($number % $decimal[$i] < $number) {\n      $roman .= $mini[$i];\n      $number\
    \ -= $decimal[$i];\n    }\n  }\n  return $roman;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7ngiqkwd.php:30\n\
    Stack trace:\n#0 /tmp/tmp7ngiqkwd.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp7ngiqkwd.php\
    \ on line 30\n"
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $result = '';\n  $i = 1;\n  while ($number >= $i) {\n    $i *= 10;\n  }\n\
    \  $i /= 10;\n  while ($i >= 1) {\n    $digit = intval($number / $i);\n    if\
    \ ($digit === 4) {\n      $result .= mini_roman_symbol($i);\n      $result .=\
    \ mini_roman_symbol($i * 5);\n    } else if ($digit === 9) {\n      $result .=\
    \ mini_roman_symbol($i);\n      $result .= mini_roman_symbol($i * 10);\n    }\
    \ else {\n      if ($digit >= 5) {\n        $result .= mini_roman_symbol($i *\
    \ 5);\n        $digit -= 5;\n      }\n      for ($j = 0; $j < $digit; $j++) {\n\
    \        $result .= mini_roman_symbol($i);\n      }\n    }\n    $number %= $i;\n\
    \    $i /= 10;\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mini_roman_symbol()\
    \ in /tmp/tmp0qada9kp.php:33\nStack trace:\n#0 /tmp/tmp0qada9kp.php(43): int_to_mini_roman(19)\n\
    #1 /tmp/tmp0qada9kp.php(47): candidate(19)\n#2 /tmp/tmp0qada9kp.php(63): test()\n\
    #3 {main}\n  thrown in /tmp/tmp0qada9kp.php on line 33\n"
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $tab_romains = [\n        \"M\" => 1000,\n        \"CM\" => 900,\n  \
    \      \"D\" => 500,\n        \"CD\" => 400,\n        \"C\" => 100,\n        \"\
    XC\" => 90,\n        \"L\" => 50,\n        \"XL\" => 40,\n        \"X\" => 10,\n\
    \        \"IX\" => 9,\n        \"V\" => 5,\n        \"IV\" => 4,\n        \"I\"\
    \ => 1\n    ];\n    $result = \"\";\n    foreach ($tab_romains as $roman => $arabic)\
    \ {\n        $result .= str_repeat($roman, $number / $arabic);\n        $number\
    \ %= $arabic;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nDeprecated: Implicit conversion from float 0.019 to int loses precision\
    \ in /tmp/tmpjrm62cvj.php on line 30\n\nDeprecated: Implicit conversion from float\
    \ 0.021111111111111112 to int loses precision in /tmp/tmpjrm62cvj.php on line\
    \ 30\n\nDeprecated: Implicit conversion from float 0.038 to int loses precision\
    \ in /tmp/tmpjrm62cvj.php on line 30\n\nDeprecated: Implicit conversion from float\
    \ 0.0475 to int loses precision in /tmp/tmpjrm62cvj.php on line 30\n\nDeprecated:\
    \ Implicit conversion from float 0.19 to int loses precision in /tmp/tmpjrm62cvj.php\
    \ on line 30\n\nDeprecated: Implicit conversion from float 0.2111111111111111\
    \ to int loses precision in /tmp/tmpjrm62cvj.php on line 30\n\nDeprecated: Implicit\
    \ conversion from float 0.38 to int loses precision in /tmp/tmpjrm62cvj.php on\
    \ line 30\n\nDeprecated: Implicit conversion from float 0.475 to int loses precision\
    \ in /tmp/tmpjrm62cvj.php on line 30\n\nDeprecated: Implicit conversion from float\
    \ 1.9 to int loses precision in /tmp/tmpjrm62cvj.php on line 30\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpjrm62cvj.php:41\nStack trace:\n\
    #0 /tmp/tmpjrm62cvj.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpjrm62cvj.php\
    \ on line 41\n"
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    // your code here\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphyshajps.php:21\n\
    Stack trace:\n#0 /tmp/tmphyshajps.php(37): test()\n#1 {main}\n  thrown in /tmp/tmphyshajps.php\
    \ on line 21\n"
  timestamp: 1660029131
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n    \
    \    'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc' => 90,\n\
    \        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n        'ix' =>\
    \ 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1\n    );\n    $str\
    \ = '';\n    foreach ($numerals as $numeral => $value) {\n        $count = floor($number\
    \ / $value);\n        $str .= str_repeat($numeral, $count);\n        $number -=\
    \ $value * $count;\n    }\n    return $str;\n}\n\nassert_options(ASSERT_BAIL,\
    \ 1);\nassert(int_to_mini_roman(1) === 'i');\nassert(int_to_mini_roman(4) ===\
    \ 'iv');\nassert(int_to_mini_roman(5) === 'v');\nassert(int_to_mini_roman(10)\
    \ === 'x');\nassert(int_to_mini_roman(19) === 'xix');\nassert(int_to_mini_roman(1000)\
    \ === 'm');\nassert(int_to_mini_roman(152) === 'clii');\nassert(int_to_mini_roman(426)\
    \ === 'cdxxvi');\nassert(int_to_mini_roman(123) === 'cxxiii');\nassert(int_to_mini_roman(749)\
    \ === 'dccxlix');\n\necho int_to_mini_roman(19) . \"\\n\";\necho int_to_mini_roman(152)\
    \ . \"\\n\";\necho int_to_mini_roman(426) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'xix

    clii

    cdxxvi

    '
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman_numerals = array('m'=>1000, 'cm'=>900, 'd'=>500, 'cd'=>400, 'c'=>100,\
    \ 'xc'=>90, 'l'=>50, 'xl'=>40, 'x'=>10, 'ix'=>9, 'v'=>5, 'iv'=>4, 'i'=>1);\n \
    \ $mini_roman = '';\n  foreach ($roman_numerals as $mini_roman => $integer) {\n\
    \    $matches = intval($number / $integer);\n    $mini_roman .= str_repeat($mini_roman,\
    \ $matches);\n    $number = $number % $integer;\n  }\n  return $mini_roman;\n\
    }\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbh0ff4e6.php:27\n\
    Stack trace:\n#0 /tmp/tmpbh0ff4e6.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpbh0ff4e6.php\
    \ on line 27\n"
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n}\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1q4oa9i9.php:19\n\
    Stack trace:\n#0 /tmp/tmp1q4oa9i9.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp1q4oa9i9.php\
    \ on line 19\n"
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $roman_array = array(\n        \"m\" => 1000,\n        \"d\" => 500,\n\
    \        \"c\" => 100,\n        \"l\" => 50,\n        \"x\" => 10,\n        \"\
    v\" => 5,\n        \"i\" => 1\n    );\n    if ($number > 1000 || $number < 1)\
    \ {\n        return FALSE;\n    }\n    $number_string = \"\";\n    while ($number\
    \ != 0) {\n        foreach ($roman_array as $roman => $val) {\n            if\
    \ ($number >= $val) {\n                $number -= $val;\n                $number_string\
    \ .= $roman;\n                break;\n            }\n        }\n    }\n    return\
    \ $number_string;\n}\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpepe3lk3c.php:42\n\
    Stack trace:\n#0 /tmp/tmpepe3lk3c.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpepe3lk3c.php\
    \ on line 42\n"
  timestamp: 1660029131
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n\t$output = \"\";\n\t$mini_roman_nums = array(\n\t\t1000 => \"m\",\n\t\t\
    900 => \"cm\",\n\t\t500 => \"d\",\n\t\t400 => \"cd\",\n\t\t100 => \"c\",\n\t\t\
    90 => \"xc\",\n\t\t50 => \"l\",\n\t\t40 => \"xl\",\n\t\t10 => \"x\",\n\t\t9 =>\
    \ \"ix\",\n\t\t5 => \"v\",\n\t\t4 => \"iv\",\n\t\t1 => \"i\"\n\t);\n\tforeach\
    \ ($mini_roman_nums as $key => $value) {\n\t\t$div = floor($number / $key);\n\t\
    \t$mod = $number % $key;\n\t\tif ($div == 0) continue;\n\t\t$output .= str_repeat($value,\
    \ $div);\n\t\t$number = $mod;\n\t}\n\treturn $output;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n\t// Convert the number to its digit-array representation:\n\t$digit_array\
    \ = str_split($number);\n\t// The mini-roman numeral system has only a single\
    \ representation for 1,\n\t// 10, 100, and 1000:\n\t$roman_digits = array(\n\t\
    \t0 => '',\n\t\t1 => 'i',\n\t\t2 => 'ii',\n\t\t3 => 'iii',\n\t\t4 => 'iv',\n\t\
    \t5 => 'v',\n\t\t6 => 'vi',\n\t\t7 => 'vii',\n\t\t8 => 'viii',\n\t\t9 => 'ix',\n\
    \t\t10 => 'x',\n\t\t20 => 'xx',\n\t\t30 => 'xxx',\n\t\t40 => 'xl',\n\t\t50 =>\
    \ 'l',\n\t\t60 => 'lx',\n\t\t70 => 'lxx',\n\t\t80 => 'lxxx',\n\t\t90 => 'xc',\n\
    \t\t100 => 'c',\n\t\t200 => 'cc',\n\t\t300 => 'ccc',\n\t\t400 => 'cd',\n\t\t500\
    \ => 'd',\n\t\t600 => 'dc',\n\t\t700 => 'dcc',\n\t\t800 => 'dccc',\n\t\t900 =>\
    \ 'cm',\n\t\t1000 => 'm',\n\t\t2000 => 'mm',\n\t\t3000 => 'mmm',\n\t\t4000 =>\
    \ 'miv',\n\t\t5000 => 'mv',\n\t\t6000 => 'mvi',\n\t\t7000 => 'mvii',\n\t\t8000\
    \ => 'mviii',\n\t\t9000 => 'mix',\n\t);\n\t$output = '';\n\t$i = 0;\n\tforeach\
    \ ($digit_array as $digit) {\n\t\t$output .= $roman_digits[$digit * (10 ** $i)];\n\
    \t\t$i++;\n\t}\n\treturn $output;\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj1tufl63.php:70\n\
    Stack trace:\n#0 /tmp/tmpj1tufl63.php(86): test()\n#1 {main}\n  thrown in /tmp/tmpj1tufl63.php\
    \ on line 70\n"
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    if ($number < 1 || $number > 1000) {\n        return \"\";\n    }\n \
    \   // The mini roman numeral system is a subset of the standard roman numeral\n\
    \    // system.  The only difference is that the standard system has values\n\
    \    // of \"v\", \"l\", and \"d\" (5, 50, and 500, respectively), but the mini\n\
    \    // system omits these values, substituting \"iiii\", \"xxxx\", and \"cccc\"\
    \n    // respectively.\n    // Let's just convert our number to the standard roman\
    \ numeral system,\n    // then replace the offending characters.\n    $standard\
    \ = int_to_roman($number);\n    $mini = str_replace(\"iiii\", \"iv\", str_replace(\"\
    xxxx\", \"xl\", str_replace(\"cccc\", \"cd\", $standard)));\n    return strtolower($mini);\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function int_to_roman()\
    \ in /tmp/tmpnye7w60k.php:23\nStack trace:\n#0 /tmp/tmpnye7w60k.php(29): int_to_mini_roman(19)\n\
    #1 /tmp/tmpnye7w60k.php(33): candidate(19)\n#2 /tmp/tmpnye7w60k.php(49): test()\n\
    #3 {main}\n  thrown in /tmp/tmpnye7w60k.php on line 23\n"
  timestamp: 1660029131
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  // TODO: Fill this in!\n  $number;\n  $result = \"\";\n  $number_l = array(1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1);\n  $roman_l = array(\"m\",\
    \ \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"\
    iv\", \"i\");\n  for ($i = 0; $i < count($number_l); $i++) {\n    while ($number\
    \ >= $number_l[$i]) {\n      $result .= $roman_l[$i];\n      $number -= $number_l[$i];\n\
    \    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    // first, we \"translate\" the number into an array of digits\n    $digits\
    \ = str_split($number);\n    // then, we create an array of \"Roman\" equivalents\n\
    \    $romans = array(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\"\
    , \"x\", \"ix\", \"v\", \"iv\", \"i\");\n    // last, we use the built-in function\
    \ array_combine to combine two arrays into one associative array\n    $roman_numerals\
    \ = array_combine(range(1, count($romans)), array_values($romans));\n    // we\
    \ use an empty string to store the result\n    $result = '';\n    // we use a\
    \ foreach loop to iterate through all the digits\n    foreach ($digits as $digit)\
    \ {\n        // we add the corresponding Roman numeral to our result string\n\
    \        $result .= $roman_numerals[$digit];\n    }\n    // finally, we return\
    \ the result\n    return $result;\n}\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphbc1fvl9.php:34\n\
    Stack trace:\n#0 /tmp/tmphbc1fvl9.php(50): test()\n#1 {main}\n  thrown in /tmp/tmphbc1fvl9.php\
    \ on line 34\n"
  timestamp: 1660029131
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $symbols = array(\n        1000 => 'm',\n        900 => 'cm',\n     \
    \   500 => 'd',\n        400 => 'cd',\n        100 => 'c',\n        90 => 'xc',\n\
    \        50 => 'l',\n        40 => 'xl',\n        10 => 'x',\n        9 => 'ix',\n\
    \        5 => 'v',\n        4 => 'iv',\n        1 => 'i'\n    );\n    $roman =\
    \ '';\n    while ($number > 0) {\n        foreach ($symbols as $div => $key) {\n\
    \            if ($number / $div >= 1) {\n                $number -= $div;\n  \
    \              $roman .= $key;\n                break;\n            }\n      \
    \  }\n    }\n    return $roman;\n}\n\necho int_to_mini_roman(19) . \"\\n\"; //\
    \ xix\necho int_to_mini_roman(152) . \"\\n\"; // clii\necho int_to_mini_roman(426)\
    \ . \"\\n\"; // cdxxvi\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'xix

    clii

    cdxxvi

    '
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $ones = $number % 10;\n  $tens = ($number - $ones) % 100;\n\
    \  $hundreds = ($number - $tens - $ones) % 1000;\n  $thousands = ($number - $hundreds\
    \ - $tens - $ones) % 10000;\n  $ones = floor($ones / 1);\n  $tens = floor($tens\
    \ / 10);\n  $hundreds = floor($hundreds / 100);\n  $thousands = floor($thousands\
    \ / 1000);\n  $roman = write_symbols($thousands, \"M\") . write_symbols($hundreds,\
    \ \"C\") . write_symbols($tens, \"X\") . write_symbols($ones, \"I\");\n  return\
    \ $roman;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function write_symbols()\
    \ in /tmp/tmp9xadwhtd.php:22\nStack trace:\n#0 /tmp/tmp9xadwhtd.php(27): int_to_mini_roman(19)\n\
    #1 /tmp/tmp9xadwhtd.php(31): candidate(19)\n#2 /tmp/tmp9xadwhtd.php(47): test()\n\
    #3 {main}\n  thrown in /tmp/tmp9xadwhtd.php on line 22\n"
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  // !!! IMPLEMENT ME !!!\n  // hint: arrays may be helpful\n}\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp13twq63m.php:21\n\
    Stack trace:\n#0 /tmp/tmp13twq63m.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp13twq63m.php\
    \ on line 21\n"
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    if ($number < 1 || $number > 1000) {\n        throw new Exception('This\
    \ function only works for numbers between 1 and 1000.');\n    }\n    $thousands\
    \ = 0;\n    $hundreds = 0;\n    $tens = 0;\n    $ones = 0;\n    if ($number >=\
    \ 1000) {\n        $thousands = intval($number / 1000);\n        $number = $number\
    \ % 1000;\n    }\n    if ($number >= 100) {\n        $hundreds = intval($number\
    \ / 100);\n        $number = $number % 100;\n    }\n    if ($number >= 10) {\n\
    \        $tens = intval($number / 10);\n        $number = $number % 10;\n    }\n\
    \    $ones = $number;\n    $thousands_string = '';\n    $hundreds_string = '';\n\
    \    $tens_string = '';\n    $ones_string = '';\n    switch ($thousands) {\n \
    \       case 1:\n            $thousands_string = 'm';\n            break;\n  \
    \      case 2:\n            $thousands_string = 'mm';\n            break;\n  \
    \      case 3:\n            $thousands_string = 'mmm';\n            break;\n \
    \   }\n    switch ($hundreds) {\n        case 1:\n            $hundreds_string\
    \ = 'c';\n            break;\n        case 2:\n            $hundreds_string =\
    \ 'cc';\n            break;\n        case 3:\n            $hundreds_string = 'ccc';\n\
    \            break;\n        case 4:\n            $hundreds_string = 'cd';\n \
    \           break;\n        case 5:\n            $hundreds_string = 'd';\n   \
    \         break;\n        case 6:\n            $hundreds_string = 'dc';\n    \
    \        break;\n        case 7:\n            $hundreds_string = 'dcc';\n    \
    \        break;\n        case 8:\n            $hundreds_string = 'dccc';\n   \
    \         break;\n        case 9:\n            $hundreds_string = 'cm';\n    \
    \        break;\n    }\n    switch ($tens) {\n        case 1:\n            $tens_string\
    \ = 'x';\n            break;\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 77 in /tmp/tmpudk6twe6.php on line 102

    '
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $symbols = array('m' => 1000, 'd' => 500, 'c' => 100, 'l' => 50, 'x' =>\
    \ 10, 'v' => 5, 'i' => 1);\n  $result = '';\n  while ($number > 0) {\n    foreach\
    \ ($symbols as $key => $value) {\n      if ($number >= $value) {\n        $result\
    \ .= $key;\n        $number -= $value;\n        break;\n      }\n    }\n  }\n\
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxpixm47r.php:32\n\
    Stack trace:\n#0 /tmp/tmpxpixm47r.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpxpixm47r.php\
    \ on line 32\n"
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $characters = array(\n        array('m', 1000),\n        array('d', 500),\n\
    \        array('c', 100),\n        array('l', 50),\n        array('x', 10),\n\
    \        array('v', 5),\n        array('i', 1)\n    );\n    $result = '';\n  \
    \  foreach ($characters as $char) {\n        if ($number >= $char[1]) {\n    \
    \        $count = floor($number / $char[1]);\n            $result .= str_repeat($char[0],\
    \ $count);\n            $number -= $char[1] * $count;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8xuznql8.php:38\n\
    Stack trace:\n#0 /tmp/tmp8xuznql8.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp8xuznql8.php\
    \ on line 38\n"
  timestamp: 1660029131
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    if ( ! is_numeric($number) || $number < 1 || $number > 1000) {\n    \
    \    return false;\n    }\n    $romans = array(\n        'm' => 1000,\n      \
    \  'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n\
    \        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' =>\
    \ 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i'\
    \ => 1,\n    );\n    $mini_roman = '';\n    foreach ($romans as $roman => $int)\
    \ {\n        $matches = intval($number / $int);\n        $mini_roman .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $int;\n    }\n    return $mini_roman;\n\
    }\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $mini_roman_numerals = array(\n    1    => 'i',\n    5    => 'v',\n   \
    \ 10   => 'x',\n    50   => 'l',\n    100  => 'c',\n    500  => 'd',\n    1000\
    \ => 'm'\n  );\n  $mini_roman_conversion = '';\n  $number_length = strlen((string)$number);\n\
    \  for ($i = 0; $i < $number_length; $i++) {\n    $current_digit = substr($number,\
    \ $i, 1);\n    $current_decimal_place = pow(10, $number_length - ($i + 1));\n\
    \    $mini_roman_conversion .= mini_roman_for_digit($current_digit, $current_decimal_place,\
    \ $mini_roman_numerals);\n  }\n  return $mini_roman_conversion;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mini_roman_for_digit()\
    \ in /tmp/tmpek83jdyb.php:27\nStack trace:\n#0 /tmp/tmpek83jdyb.php(33): int_to_mini_roman(19)\n\
    #1 /tmp/tmpek83jdyb.php(37): candidate(19)\n#2 /tmp/tmpek83jdyb.php(53): test()\n\
    #3 {main}\n  thrown in /tmp/tmpek83jdyb.php on line 27\n"
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n\t$result = \"\";\n\t$conversions = array(\n\t\t\"M\"  => 1000,\n\t\t\"CM\"\
    \ => 900,\n\t\t\"D\"  => 500,\n\t\t\"CD\" => 400,\n\t\t\"C\"  => 100,\n\t\t\"\
    XC\" => 90,\n\t\t\"L\"  => 50,\n\t\t\"XL\" => 40,\n\t\t\"X\"  => 10,\n\t\t\"IX\"\
    \ => 9,\n\t\t\"V\"  => 5,\n\t\t\"IV\" => 4,\n\t\t\"I\"  => 1,\n\t);\n\tforeach\
    \ ($conversions as $roman => $value) {\n\t\t$matches = intval($number / $value);\n\
    \t\t$result .= str_repeat($roman, $matches);\n\t\t$number = $number % $value;\n\
    \t}\n\treturn $result;\n}\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaozua49v.php:41\n\
    Stack trace:\n#0 /tmp/tmpaozua49v.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpaozua49v.php\
    \ on line 41\n"
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk3aer_bx.php:21\n\
    Stack trace:\n#0 /tmp/tmpk3aer_bx.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpk3aer_bx.php\
    \ on line 21\n"
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $mini_roman = '';\n    $numerals = array(\n        1    => 'i',\n   \
    \     5    => 'v',\n        10   => 'x',\n        50   => 'l',\n        100  =>\
    \ 'c',\n        500  => 'd',\n        1000 => 'm',\n    );\n    $numerals_order\
    \ = array(1000, 500, 100, 50, 10, 5, 1);\n    foreach ($numerals_order as $numeral_index\
    \ => $numeral_value) {\n        $quotient = intval($number / $numeral_value);\n\
    \        $number -= $quotient * $numeral_value;\n        if ($quotient == 4) {\n\
    \            $mini_roman .= $numerals[$numeral_value];\n            $mini_roman\
    \ .= $numerals[$numerals_order[$numeral_index - 1]];\n        } elseif ($quotient\
    \ == 9) {\n            $mini_roman .= $numerals[$numeral_value];\n           \
    \ $mini_roman .= $numerals[$numerals_order[$numeral_index - 2]];\n        } else\
    \ {\n            for ($i = 0; $i < $quotient; $i++) {\n                $mini_roman\
    \ .= $numerals[$numeral_value];\n            }\n        }\n    }\n    return $mini_roman;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptmn04bem.php:47\n\
    Stack trace:\n#0 /tmp/tmptmn04bem.php(63): test()\n#1 {main}\n  thrown in /tmp/tmptmn04bem.php\
    \ on line 47\n"
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $result = '';\n  $roman = array(\n    'I' => 1,\n    'V' => 5,\n    'X'\
    \ => 10,\n    'L' => 50,\n    'C' => 100,\n    'D' => 500,\n    'M' => 1000\n\
    \  );\n  $keys = array_keys($roman);\n  $values = array_values($roman);\n  for\
    \ ($i = count($values) - 1; $i >= 0; $i--) {\n    while ($number >= $values[$i])\
    \ {\n      $result .= $keys[$i];\n      $number -= $values[$i];\n    }\n  }\n\
    \  return strtolower($result);\n}\necho int_to_mini_roman(19);\necho '<br>';\n\
    echo int_to_mini_roman(152);\necho '<br>';\necho int_to_mini_roman(426);\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "xviiii<br>clii<br>ccccxxvi\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpbzfhjkg5.php:43\nStack trace:\n#0 /tmp/tmpbzfhjkg5.php(59): test()\n\
    #1 {main}\n  thrown in /tmp/tmpbzfhjkg5.php on line 43\n"
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $conversion = array('m' => 1000, 'd' => 500, 'c' => 100, 'l' => 50, 'x'\
    \ => 10, 'v' => 5, 'i' => 1);\n    $result = '';\n    while ($number > 0) {\n\
    \        foreach ($conversion as $roman => $int) {\n            if ($number >=\
    \ $int) {\n                $number -= $int;\n                $result .= $roman;\n\
    \                break;\n            }\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkdyb4mb6.php:32\n\
    Stack trace:\n#0 /tmp/tmpkdyb4mb6.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpkdyb4mb6.php\
    \ on line 32\n"
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    if (!is_int($number) || $number < 1 || $number > 1000) {\n        throw\
    \ new Exception(\"Invalid argument: the function int_to_mini_roman takes only\
    \ integer arguments in the range 1-1000.\");\n    }\n    if ($number < 0) {\n\
    \        return '-' . int_to_mini_roman(-1 * $number);\n    }\n\n    $roman_numeral\
    \ = '';\n    $remainder = $number;\n    while ($remainder >= 1000) {\n       \
    \ $roman_numeral .= 'm';\n        $remainder -= 1000;\n    }\n    if ($remainder\
    \ >= 900) {\n        $roman_numeral .= 'cm';\n        $remainder -= 900;\n   \
    \ }\n    if ($remainder >= 500) {\n        $roman_numeral .= 'd';\n        $remainder\
    \ -= 500;\n    }\n    if ($remainder >= 400) {\n        $roman_numeral .= 'cd';\n\
    \        $remainder -= 400;\n    }\n    while ($remainder >= 100) {\n        $roman_numeral\
    \ .= 'c';\n        $remainder -= 100;\n    }\n    if ($remainder >= 90) {\n  \
    \      $roman_numeral .= 'xc';\n        $remainder -= 90;\n    }\n    if ($remainder\
    \ >= 50) {\n        $roman_numeral .= 'l';\n        $remainder -= 50;\n    }\n\
    \    if ($remainder >= 40) {\n        $roman_numeral .= 'xl';\n        $remainder\
    \ -= 40;\n    }\n    while ($remainder >= 10) {\n        $roman_numeral .= 'x';\n\
    \        $remainder -= 10;\n    }\n    if ($remainder >= 9) {\n        $roman_numeral\
    \ .= 'ix';\n        $remainder -= 9;\n    }\n    if ($remainder >= 5) {\n    \
    \    $roman_numeral .= 'v';\n        $remainder -= 5;\n    }\n    if ($remainder\
    \ >= 4) {\n        $roman_numeral .=\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp9n6vfmfv.php on line 68

    '
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n   $numerals = array(10 => 'x', 9 => 'ix', 5 => 'v', 4 => 'iv', 1 => 'i');\n\
    \   $roman_numeral = '';\n   foreach ($numerals as $arabic => $roman) {\n    \
    \  while ($number >= $arabic) {\n         $roman_numeral .= $roman;\n        \
    \ $number -= $arabic;\n      }\n   }\n   return $roman_numeral;\n}\necho int_to_mini_roman(19).\"\
    \\n\";\necho int_to_mini_roman(152).\"\\n\";\necho int_to_mini_roman(426).\"\\\
    n\";\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "xix\nxxxxxxxxxxxxxxxii\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxvi\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp9djq7khm.php:32\nStack\
    \ trace:\n#0 /tmp/tmp9djq7khm.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp9djq7khm.php\
    \ on line 32\n"
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  if ($number < 1 || $number > 1000) {\n    throw new Exception('Number out\
    \ of bounds.');\n  }\n  $result = '';\n  $remainder = $number;\n  $tens = floor($remainder\
    \ / 10);\n  $remainder -= 10 * $tens;\n  $fives = floor($remainder / 5);\n  $remainder\
    \ -= 5 * $fives;\n  $ones = $remainder;\n  $result .= get_repeated_char('x', $tens);\n\
    \  $result .= get_repeated_char('v', $fives);\n  $result .= get_repeated_char('i',\
    \ $ones);\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_repeated_char()\
    \ in /tmp/tmpc_nc6ruv.php:23\nStack trace:\n#0 /tmp/tmpc_nc6ruv.php(30): int_to_mini_roman(19)\n\
    #1 /tmp/tmpc_nc6ruv.php(34): candidate(19)\n#2 /tmp/tmpc_nc6ruv.php(50): test()\n\
    #3 {main}\n  thrown in /tmp/tmpc_nc6ruv.php on line 23\n"
  timestamp: 1660029131
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $units = [\n    '',\n    'i',\n    'ii',\n    'iii',\n    'iv',\n    'v',\n\
    \    'vi',\n    'vii',\n    'viii',\n    'ix'\n  ];\n  $tens = [\n    '',\n  \
    \  'x',\n    'xx',\n    'xxx',\n    'xl',\n    'l',\n    'lx',\n    'lxx',\n \
    \   'lxxx',\n    'xc'\n  ];\n  $hundreds = [\n    '',\n    'c',\n    'cc',\n \
    \   'ccc',\n    'cd',\n    'd',\n    'dc',\n    'dcc',\n    'dccc',\n    'cm'\n\
    \  ];\n  $thousands = [\n    '',\n    'm',\n    'mm',\n    'mmm',\n    'miv',\n\
    \    'v',\n    'vm',\n    'vmm',\n    'vmmm',\n    'mx'\n  ];\n  $result = '';\n\
    \  $result .= $thousands[floor($number / 1000)];\n  $number = $number % 1000;\n\
    \  $result .= $hundreds[floor($number / 100)];\n  $number = $number % 100;\n \
    \ $result .= $tens[floor($number / 10)];\n  $number = $number % 10;\n  $result\
    \ .= $units[$number];\n  return $result;\n}\nfunction candidate(...$args) {\n\
    \    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n\t\n\t$thousand = floor($number / 1000);\n\t$hundred = floor(($number % 1000)\
    \ / 100);\n\t$ten = floor(($number % 100) / 10);\n\t$one = floor($number % 10);\n\
    \t\n\t$roman = \"\";\n\t\n\t$roman .= mini_roman_digit($thousand, 'M', '', '');\n\
    \t$roman .= mini_roman_digit($hundred, 'C', 'D', 'M');\n\t$roman .= mini_roman_digit($ten,\
    \ 'X', 'L', 'C');\n\t$roman .= mini_roman_digit($one, 'I', 'V', 'X');\n\t\n\t\
    return $roman;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mini_roman_digit()\
    \ in /tmp/tmpi060sfxy.php:21\nStack trace:\n#0 /tmp/tmpi060sfxy.php(30): int_to_mini_roman(19)\n\
    #1 /tmp/tmpi060sfxy.php(34): candidate(19)\n#2 /tmp/tmpi060sfxy.php(50): test()\n\
    #3 {main}\n  thrown in /tmp/tmpi060sfxy.php on line 21\n"
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpujewm3ah.php:20\n\
    Stack trace:\n#0 /tmp/tmpujewm3ah.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpujewm3ah.php\
    \ on line 20\n"
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $ones_digit = $number % 10;\n  $number = floor($number / 10);\n  $tens_digit\
    \ = $number % 10;\n  $number = floor($number / 10);\n  $hundreds_digit = $number\
    \ % 10;\n  $number = floor($number / 10);\n  $thousands_digit = $number % 10;\n\
    \  $number = floor($number / 10);\n\n  $result = '';\n  if ($thousands_digit >\
    \ 0) {\n    for ($i = 0; $i < $thousands_digit; $i++) {\n      $result .= 'm';\n\
    \    }\n  }\n  if ($hundreds_digit > 0) {\n    if ($hundreds_digit > 5) {\n  \
    \    $result .= 'd';\n      for ($i = 0; $i < $hundreds_digit - 5; $i++) {\n \
    \       $result .= 'c';\n      }\n    } else if ($hundreds_digit == 5) {\n   \
    \   $result .= 'd';\n    } else {\n      for ($i = 0; $i < $hundreds_digit; $i++)\
    \ {\n        $result .= 'c';\n      }\n    }\n  }\n  if ($tens_digit > 0) {\n\
    \    if ($tens_digit > 5) {\n      $result .= 'l';\n      for ($i = 0; $i < $tens_digit\
    \ - 5; $i++) {\n        $result .= 'x';\n      }\n    } else if ($tens_digit ==\
    \ 5) {\n      $result .= 'l';\n    } else {\n      for ($i = 0; $i < $tens_digit;\
    \ $i++) {\n        $result .= 'x';\n      }\n    }\n  }\n  if ($ones_digit > 0)\
    \ {\n    if ($ones_digit > 5) {\n      $result .= 'v';\n      for ($i = 0; $i\
    \ < $ones_digit - 5; $i++) {\n        $result .= 'i';\n      }\n    } else if\
    \ ($ones_digit == 5) {\n      $result .= 'v';\n    } else {\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 64 in /tmp/tmp1k6jjesi.php on line 86

    '
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $nums = array(\n        \"M\" => 1000,\n        \"CM\" => 900,\n    \
    \    \"D\" => 500,\n        \"CD\" => 400,\n        \"C\" => 100,\n        \"\
    XC\" => 90,\n        \"L\" => 50,\n        \"XL\" => 40,\n        \"X\" => 10,\n\
    \        \"IX\" => 9,\n        \"V\" => 5,\n        \"IV\" => 4,\n        \"I\"\
    \ => 1\n    );\n    $returnValue = '';\n    while ($number > 0) {\n        foreach\
    \ ($nums as $num => $value) {\n            if ($number >= $value) {\n        \
    \        $number -= $value;\n                $returnValue .= $num;\n         \
    \       break;\n            }\n        }\n    }\n    return $returnValue;\n}\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkeu780op.php:45\n\
    Stack trace:\n#0 /tmp/tmpkeu780op.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpkeu780op.php\
    \ on line 45\n"
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    //array storing all roman numerals that can be used\n    $roman_numerals\
    \ = array('i', 'v', 'x', 'l', 'c', 'd', 'm');\n    //array storing all roman numerals\
    \ and the numbers they represent\n    $numeral_to_num = array(\n        'i' =>\
    \ 1,\n        'v' => 5,\n        'x' => 10,\n        'l' => 50,\n        'c' =>\
    \ 100,\n        'd' => 500,\n        'm' => 1000\n    );\n    //array storing\
    \ all possible roman numerals\n    $romans = array(\n        1 => 'i',\n     \
    \   2 => 'ii',\n        3 => 'iii',\n        4 => 'iv',\n        5 => 'v',\n \
    \       6 => 'vi',\n        7 => 'vii',\n        8 => 'viii',\n        9 => 'ix',\n\
    \        10 => 'x',\n        20 => 'xx',\n        30 => 'xxx',\n        40 =>\
    \ 'xl',\n        50 => 'l',\n        60 => 'lx',\n        70 => 'lxx',\n     \
    \   80 => 'lxxx',\n        90 => 'xc',\n        100 => 'c',\n        200 => 'cc',\n\
    \        300 => 'ccc',\n        400 => 'cd',\n        500 => 'd',\n        600\
    \ => 'dc',\n        700 => 'dcc',\n        800 => 'dccc',\n        900 => 'cm',\n\
    \        1000 => 'm',\n        2000 => 'mm',\n        3000 => 'mmm',\n       \
    \ 4000 => 'mv',\n        5000 => 'v',\n        6000 => 'vm',\n        7000 =>\
    \ 'vmm',\n        8000 => 'vmmm',\n        9000 => 'mx',\n        10000 => 'x',\n\
    \        20000 => 'xx',\n        30000 => 'xxx',\n        40000 => 'xl',\n   \
    \     50000 => 'l',\n        60000 => 'lx',\n        70000 => 'lxx',\n       \
    \ 80000 => 'lxxx',\n        90000 => 'xc',\n        100000 => 'c',\n        200000\
    \ => 'cc',\n        300000 => 'cc\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "cc" in /tmp/tmp13r9zdz9.php
    on line 74

    '
  timestamp: 1660029131
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = array(\n    'm' => 1000,\n    'cm' => 900,\n    'd' => 500,\n\
    \    'cd' => 400,\n    'c' => 100,\n    'xc' => 90,\n    'l' => 50,\n    'xl'\
    \ => 40,\n    'x' => 10,\n    'ix' => 9,\n    'v' => 5,\n    'iv' => 4,\n    'i'\
    \ => 1\n  );\n  $result = '';\n  foreach ($roman as $key => $value) {\n    //\
    \ Determine the number of times $value fits into the current number.\n    $matches\
    \ = intval($number / $value);\n    // Concatenate $key, $matches times, to $result.\n\
    \    $result .= str_repeat($key, $matches);\n    // Set $number to be $number\
    \ minus $matches times $value.\n    $number = $number % $value;\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  if ($number < 1 || $number > 1000) {\n    return false;\n  }\n  $number_string\
    \ = '';\n  if ($number >= 100) {\n    $hundreds = floor($number / 100);\n    $number_string\
    \ .= str_repeat('c', $hundreds);\n    $number -= 100 * $hundreds;\n  }\n  if ($number\
    \ >= 10) {\n    $tens = floor($number / 10);\n    $number_string .= str_repeat('x',\
    \ $tens);\n    $number -= 10 * $tens;\n  }\n  $number_string .= str_repeat('i',\
    \ $number);\n  return $number_string;\n}\n\nfunction candidate(...$args) {\n \
    \   return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp86bcc_wk.php:36\n\
    Stack trace:\n#0 /tmp/tmp86bcc_wk.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp86bcc_wk.php\
    \ on line 36\n"
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $romans = array('m' => 1000, 'd' => 500, 'c' => 100, 'l' => 50, 'x' =>\
    \ 10, 'v' => 5, 'i' => 1);\n    $return = '';\n    while ($number > 0) {\n   \
    \     foreach ($romans as $key => $value) {\n            if ($number >= $value)\
    \ {\n                $number -= $value;\n                $return .= $key;\n  \
    \              break;\n            }\n        }\n    }\n    return $return;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwfa0hq49.php:32\n\
    Stack trace:\n#0 /tmp/tmpwfa0hq49.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpwfa0hq49.php\
    \ on line 32\n"
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $result = \"\";\n    $numerals = array(\n        \"M\" => 1000,\n   \
    \     \"CM\" => 900,\n        \"D\" => 500,\n        \"CD\" => 400,\n        \"\
    C\" => 100,\n        \"XC\" => 90,\n        \"L\" => 50,\n        \"XL\" => 40,\n\
    \        \"X\" => 10,\n        \"IX\" => 9,\n        \"V\" => 5,\n        \"IV\"\
    \ => 4,\n        \"I\" => 1\n    );\n    foreach ($numerals as $numeral => $value)\
    \ {\n        for (; $number >= $value; $number -= $value) {\n            $result\
    \ .= $numeral;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp6if1w76.php:42\n\
    Stack trace:\n#0 /tmp/tmpp6if1w76.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpp6if1w76.php\
    \ on line 42\n"
  timestamp: 1660029131
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $result = \"\";\n  $mini_roman_lookup = [\n    1000 => \"m\",\n    900\
    \ => \"cm\",\n    500 => \"d\",\n    400 => \"cd\",\n    100 => \"c\",\n    90\
    \ => \"xc\",\n    50 => \"l\",\n    40 => \"xl\",\n    10 => \"x\",\n    9 =>\
    \ \"ix\",\n    5 => \"v\",\n    4 => \"iv\",\n    1 => \"i\"\n  ];\n  foreach\
    \ ($mini_roman_lookup as $value => $char) {\n    $result .= str_repeat($char,\
    \ floor($number / $value));\n    $number = $number % $value;\n  }\n  return $result;\n\
    }\n\nvar_dump(int_to_mini_roman(10));\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'string(1) "x"

    '
  timestamp: 1660029131
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $thousands = intval($number / 1000);\n  $number -= $thousands * 1000;\n\
    \  $roman = str_repeat('m', $thousands);\n\n  $hundreds = intval($number / 100);\n\
    \  $number -= $hundreds * 100;\n  if ($hundreds < 4) {\n    $roman .= str_repeat('c',\
    \ $hundreds);\n  } elseif ($hundreds == 4) {\n    $roman .= 'cd';\n  } elseif\
    \ ($hundreds < 9) {\n    $roman .= 'd' . str_repeat('c', $hundreds - 5);\n  }\
    \ else {\n    $roman .= 'cm';\n  }\n\n  $tens = intval($number / 10);\n  $number\
    \ -= $tens * 10;\n  if ($tens < 4) {\n    $roman .= str_repeat('x', $tens);\n\
    \  } elseif ($tens == 4) {\n    $roman .= 'xl';\n  } elseif ($tens < 9) {\n  \
    \  $roman .= 'l' . str_repeat('x', $tens - 5);\n  } else {\n    $roman .= 'xc';\n\
    \  }\n\n  if ($number < 4) {\n    $roman .= str_repeat('i', $number);\n  } elseif\
    \ ($number == 4) {\n    $roman .= 'iv';\n  } elseif ($number < 9) {\n    $roman\
    \ .= 'v' . str_repeat('i', $number - 5);\n  } else {\n    $roman .= 'ix';\n  }\n\
    \n  return $roman;\n}\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n\n}\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm7aaley2.php:20\n\
    Stack trace:\n#0 /tmp/tmpm7aaley2.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpm7aaley2.php\
    \ on line 20\n"
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  if ($number < 1 || $number > 1000) {\n    return \"\";\n  }\n  $result\
    \ = \"\";\n  // Check for special cases (4, 9, 40, 90, 400, 900)\n  if ($number\
    \ == 4) {\n    return \"iv\";\n  } else if ($number == 9) {\n    return \"ix\"\
    ;\n  } else if ($number == 40) {\n    return \"xl\";\n  } else if ($number ==\
    \ 90) {\n    return \"xc\";\n  } else if ($number == 400) {\n    return \"cd\"\
    ;\n  } else if ($number == 900) {\n    return \"cm\";\n  }\n\n  // 1's place\n\
    \  if ($number % 10 == 1) {\n    $result .= \"i\";\n  } else if ($number % 10\
    \ == 2) {\n    $result .= \"ii\";\n  } else if ($number % 10 == 3) {\n    $result\
    \ .= \"iii\";\n  } else if ($number % 10 == 5) {\n    $result .= \"v\";\n  } else\
    \ if ($number % 10 == 6) {\n    $result .= \"vi\";\n  } else if ($number % 10\
    \ == 7) {\n    $result .= \"vii\";\n  } else if ($number % 10 == 8) {\n    $result\
    \ .= \"viii\";\n  }\n\n  // 10's place\n  if (($number / 10) % 10 == 1) {\n  \
    \  $result = \"x\" . $result;\n  } else if (($number / 10) % 10 == 2) {\n    $result\
    \ = \"xx\" . $result;\n  } else if (($number / 10) % 10 == 3) {\n    $result =\
    \ \"xxx\" . $result;\n  } else if (($number / 10) % 10 == 5) {\n    $result =\
    \ \"l\" . $result;\n  } else if (($number / 10) % 10 == 6) {\n    $result = \"\
    lx\" . $result;\n  } else if (($number / 10) % 10 == 7) {\n    $result = \"lxx\"\
    \ . $result;\n  } else if (($number / 10) % 10 == 8)\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp9fk1ae0t.php on line 63

    '
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n\t$num = $number;\n\t$str = \"\";\n\t$ref = array(1 => 'i', 5 => 'v', 10\
    \ => 'x', 50 => 'l', 100 => 'c', 500 => 'd', 1000 => 'm');\n\tforeach($ref as\
    \ $key => $val) {\n\t\t$count = floor($num / $key);\n\t\tif($count > 0) {\n\t\t\
    \t$num = $num % $key;\n\t\t\tif($count <= 3) {\n\t\t\t\t$str .= str_repeat($val,\
    \ $count);\n\t\t\t} elseif($count == 4) {\n\t\t\t\t$str .= $val.$ref[$key*5];\n\
    \t\t\t} elseif($count == 5) {\n\t\t\t\t$str .= $ref[$key*5];\n\t\t\t} elseif($count\
    \ <= 8) {\n\t\t\t\t$str .= $ref[$key*5].str_repeat($val, $count-5);\n\t\t\t} else\
    \ {\n\t\t\t\t$str .= $val.$ref[$key*10];\n\t\t\t}\n\t\t}\n\t}\n\treturn $str;\n\
    }\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpitehs_6r.php:40\n\
    Stack trace:\n#0 /tmp/tmpitehs_6r.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpitehs_6r.php\
    \ on line 40\n"
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n\t// Convert the number to a string and get its length\n\t$number_str = strval($number);\n\
    \t$length = strlen($number_str);\n\t$out = '';\n\t// Loops through the number\
    \ digit by digit, starting with the least significant\n\tfor ($i = 0; $i < $length;\
    \ $i++) {\n\t\t// Get the value of the current digit and the next digit if possible\n\
    \t\t$curr_digit = intval($number_str[$i]);\n\t\t$next_digit = 0;\n\t\tif ($i +\
    \ 1 < $length) {\n\t\t\t$next_digit = intval($number_str[$i + 1]);\n\t\t}\n\t\t\
    // If the value of the current digit is less than 4, it should be written\n\t\t\
    // literally\n\t\tif ($curr_digit < 4) {\n\t\t\tfor ($j = 0; $j < $curr_digit;\
    \ $j++) {\n\t\t\t\t$out .= \"i\";\n\t\t\t}\n\t\t// If the value of the current\
    \ digit is 4, its value should be written as\n\t\t// \"iv\"\n\t\t} else if ($curr_digit\
    \ == 4) {\n\t\t\t$out .= \"iv\";\n\t\t// If the value of the current digit is\
    \ less than 9, it can be written as a\n\t\t// literal 5 and then add on the difference\
    \ of the current digit and 5\n\t\t} else if ($curr_digit < 9) {\n\t\t\t$out .=\
    \ \"v\";\n\t\t\tfor ($j = 0; $j < $curr_digit - 5; $j++) {\n\t\t\t\t$out .= \"\
    i\";\n\t\t\t}\n\t\t// If the value of the current digit is 9, its value should\
    \ be written as\n\t\t// \"ix\"\n\t\t} else if ($curr_digit == 9) {\n\t\t\t$out\
    \ .= \"ix\";\n\t\t}\n\t\t// If the value of the next digit is 4 or 9, a subtraction\
    \ should be done\n\t\t// so this case is handled here\n\t\tif ($next_digit ==\
    \ 4 || $next_digit == 9) {\n\t\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 49 in /tmp/tmprln72ijr.php on line 72

    '
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $i = 0;\n    $number_str = (string)$number;\n    $number_arr\
    \ = str_split($number_str);\n    $len = count($number_arr);\n    foreach ($number_arr\
    \ as $n) {\n        switch ($len - $i) {\n            case 4:\n              \
    \  $result .= roman_thousand($n);\n                break;\n            case 3:\n\
    \                $result .= roman_hundred($n);\n                break;\n     \
    \       case 2:\n                $result .= roman_ten($n);\n                break;\n\
    \            case 1:\n                $result .= roman_one($n);\n            \
    \    break;\n        }\n        $i++;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman_ten() in\
    \ /tmp/tmp1exgzset.php:27\nStack trace:\n#0 /tmp/tmp1exgzset.php(39): int_to_mini_roman(19)\n\
    #1 /tmp/tmp1exgzset.php(43): candidate(19)\n#2 /tmp/tmp1exgzset.php(59): test()\n\
    #3 {main}\n  thrown in /tmp/tmp1exgzset.php on line 27\n"
  timestamp: 1660029131
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n  $numerals\
    \ = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i'];\n\
    \  $roman = '';\n  for ($i = 0; $i < count($values); $i++) {\n    while ($number\
    \ >= $values[$i]) {\n      $number -= $values[$i];\n      $roman .= $numerals[$i];\n\
    \    }\n  }\n  return $roman;\n}\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029131
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman_numeral = array('m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x',\
    \ 'ix', 'v', 'iv', 'i');\n  $base = array(1000, 900, 500, 400, 100, 90, 50, 40,\
    \ 10, 9, 5, 4, 1);\n  $output = '';\n  for ($i = 0; $i < 13; $i++) {\n    while\
    \ ($number >= $base[$i]) {\n      $number -= $base[$i];\n      $output .= $roman_numeral[$i];\n\
    \    }\n  }\n  return $output;\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $num_check = $number;\n    $roman_num = '';\n    if ($num_check > 1000)\
    \ {\n        return false;\n    }\n    $num_dict = [\n        'M' => 1000,\n \
    \       'D' => 500,\n        'C' => 100,\n        'L' => 50,\n        'X' => 10,\n\
    \        'V' => 5,\n        'I' => 1\n    ];\n    foreach ($num_dict as $roman\
    \ => $int) {\n        $matches = intval($num_check / $int);\n        $roman_num\
    \ .= str_repeat($roman, $matches);\n        $num_check = $num_check % $int;\n\
    \    }\n    $roman_num = str_replace('DCCCC', 'CM', $roman_num);\n    $roman_num\
    \ = str_replace('CCCC', 'CD', $roman_num);\n    $roman_num = str_replace('LXXXX',\
    \ 'XC', $roman_num);\n    $roman_num = str_replace('XXXX', 'XL', $roman_num);\n\
    \    $roman_num = str_replace('VIIII', 'IX', $roman_num);\n    $roman_num = str_replace('IIII',\
    \ 'IV', $roman_num);\n    return $roman_num;\n}\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4fbr540q.php:45\n\
    Stack trace:\n#0 /tmp/tmp4fbr540q.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp4fbr540q.php\
    \ on line 45\n"
  timestamp: 1660029131
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $romanNumeralMap = array(\n        1000 => 'm',\n        900 => 'cm',\n\
    \        500 => 'd',\n        400 => 'cd',\n        100 => 'c',\n        90 =>\
    \ 'xc',\n        50 => 'l',\n        40 => 'xl',\n        10 => 'x',\n       \
    \ 9 => 'ix',\n        5 => 'v',\n        4 => 'iv',\n        1 => 'i'\n    );\n\
    \n    $romanNumeral = '';\n\n    foreach ($romanNumeralMap as $limit => $glyph)\
    \ {\n        while ($number >= $limit) {\n            $romanNumeral .= $glyph;\n\
    \            $number -= $limit;\n        }\n    }\n\n    return $romanNumeral;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $result = \"\";\n    $romanNumeralMap = array(50 => 'l', 40 => 'xl',\
    \ 10 => 'x', 9 => 'ix', 5 => 'v', 4 => 'iv', 1 => 'i');\n    foreach ($romanNumeralMap\
    \ as $value => $numeral) {\n        $result .= str_repeat($numeral, $number /\
    \ $value);\n        $number %= $value;\n    }\n    return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nDeprecated: Implicit conversion from float 0.38 to int loses precision\
    \ in /tmp/tmp8370k0qt.php on line 16\n\nDeprecated: Implicit conversion from float\
    \ 0.475 to int loses precision in /tmp/tmp8370k0qt.php on line 16\n\nDeprecated:\
    \ Implicit conversion from float 1.9 to int loses precision in /tmp/tmp8370k0qt.php\
    \ on line 16\n\nDeprecated: Implicit conversion from float 3.04 to int loses precision\
    \ in /tmp/tmp8370k0qt.php on line 16\n\nDeprecated: Implicit conversion from float\
    \ 0.05 to int loses precision in /tmp/tmp8370k0qt.php on line 16\n\nDeprecated:\
    \ Implicit conversion from float 0.2 to int loses precision in /tmp/tmp8370k0qt.php\
    \ on line 16\n\nDeprecated: Implicit conversion from float 0.2222222222222222\
    \ to int loses precision in /tmp/tmp8370k0qt.php on line 16\n\nDeprecated: Implicit\
    \ conversion from float 0.4 to int loses precision in /tmp/tmp8370k0qt.php on\
    \ line 16\n\nDeprecated: Implicit conversion from float 0.5 to int loses precision\
    \ in /tmp/tmp8370k0qt.php on line 16\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp8370k0qt.php:27\nStack trace:\n#0 /tmp/tmp8370k0qt.php(42):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp8370k0qt.php on line 27\n"
  timestamp: 1660029131
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $arabic = array(1000, 900, 500, 400, 100, 90, 50,\
    \ 40, 10, 9, 5, 4, 1);\n    $roman = array('m', 'cm', 'd', 'cd', 'c', 'xc', 'l',\
    \ 'xl', 'x', 'ix', 'v', 'iv', 'i');\n    for ($i = 0; $i < count($arabic); $i++)\
    \ {\n        $matches = intval($number / $arabic[$i]);\n        $result .= str_repeat($roman[$i],\
    \ $matches);\n        $number = $number % $arabic[$i];\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n\t$roman_numerals = array(\n\t\t100 => 'c',\n\t\t90 => 'xc',\n\t\t50 => 'l',\n\
    \t\t40 => 'xl',\n\t\t10 => 'x',\n\t\t9 => 'ix',\n\t\t5 => 'v',\n\t\t4 => 'iv',\n\
    \t\t1 => 'i'\n\t);\n\t$roman_numeral = '';\n\tforeach ($roman_numerals as $arabic\
    \ => $roman) {\n\t\t$roman_numeral .= str_repeat($roman, floor($number / $arabic));\n\
    \t\t$number %= $arabic;\n\t}\n\treturn $roman_numeral;\n}\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8xope4s0.php:39\n\
    Stack trace:\n#0 /tmp/tmp8xope4s0.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp8xope4s0.php\
    \ on line 39\n"
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $lookup = [\n        1 => 'i',\n        4 => 'iv',\n        5 => 'v',\n\
    \        9 => 'ix',\n        10 => 'x',\n        40 => 'xl',\n        50 => 'l',\n\
    \        90 => 'xc',\n        100 => 'c',\n        400 => 'cd',\n        500 =>\
    \ 'd',\n        900 => 'cm',\n        1000 => 'm'\n    ];\n    $keys = array_keys($lookup);\n\
    \    rsort($keys);\n    $output = '';\n    foreach ($keys as $i) {\n        if\
    \ ($number >= $i) {\n            $output .= $lookup[$i];\n            $number\
    \ -= $i;\n        }\n    }\n    return $output;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvnuh7pvn.php:46\n\
    Stack trace:\n#0 /tmp/tmpvnuh7pvn.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpvnuh7pvn.php\
    \ on line 46\n"
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk3aer_bx.php:21\n\
    Stack trace:\n#0 /tmp/tmpk3aer_bx.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpk3aer_bx.php\
    \ on line 21\n"
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $numerals = array(\n        'M' => 1000,\n       \
    \ 'CM' => 900,\n        'D' => 500,\n        'CD' => 400,\n        'C' => 100,\n\
    \        'XC' => 90,\n        'L' => 50,\n        'XL' => 40,\n        'X' =>\
    \ 10,\n        'IX' => 9,\n        'V' => 5,\n        'IV' => 4,\n        'I'\
    \ => 1\n    );\n    foreach ($numerals as $numeral => $limit) {\n        while\
    \ ($number >= $limit) {\n            $result .= $numeral;\n            $number\
    \ -= $limit;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd16nzan8.php:43\n\
    Stack trace:\n#0 /tmp/tmpd16nzan8.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpd16nzan8.php\
    \ on line 43\n"
  timestamp: 1660029131
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $romans = array(\n        'm'=>1000,\n        'cm'=>900,\n        'd'=>500,\n\
    \        'cd'=>400,\n        'c'=>100,\n        'xc'=>90,\n        'l'=>50,\n\
    \        'xl'=>40,\n        'x'=>10,\n        'ix'=>9,\n        'v'=>5,\n    \
    \    'iv'=>4,\n        'i'=>1,\n    );\n    $return_value = '';\n    while($number\
    \ > 0) {\n        foreach($romans as $roman=>$int) {\n            if($number >=\
    \ $int) {\n                $number -= $int;\n                $return_value .=\
    \ $roman;\n                break;\n            }\n        }\n    }\n    return\
    \ $return_value;\n}\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n\t$result = '';\n\t$myNumber = $number;\n\t$myBaseArray = array('i','v','x','l','c','d','m');\n\
    \t$baseLength = strlen($myBaseArray);\n\t$baseIndex = $baseLength - 1;\n\twhile\
    \ ($myNumber > 0) {\n\t\t$currNum = $myNumber % 10;\n\t\t$currNum1 = (int)($currNum\
    \ / 1);\n\t\t$currNum5 = (int)($currNum / 5);\n\t\t$currNum10 = (int)($currNum\
    \ / 10);\n\t\tif ($currNum1 > 0) {\n\t\t\t$result = $myBaseArray[$baseIndex] .\
    \ $result;\n\t\t}\n\t\tif ($currNum5 == 1) {\n\t\t\t$result = $myBaseArray[$baseIndex\
    \ + 1] . $result;\n\t\t}\n\t\tif ($currNum1 == 4) {\n\t\t\t$result = $myBaseArray[$baseIndex]\
    \ . $myBaseArray[$baseIndex + 1] . $result;\n\t\t}\n\t\tif ($currNum10 == 1) {\n\
    \t\t\t$result = $myBaseArray[$baseIndex + 2] . $result;\n\t\t}\n\t\t$myNumber\
    \ = (int)($myNumber / 10);\n\t\t$baseIndex = $baseIndex - 2;\n\t}\n\treturn $result;\n\
    }\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: strlen(): Argument #1 ($str) must be\
    \ of type string, array given in /tmp/tmpd8ljm_5t.php:16\nStack trace:\n#0 /tmp/tmpd8ljm_5t.php(41):\
    \ int_to_mini_roman(19)\n#1 /tmp/tmpd8ljm_5t.php(45): candidate(19)\n#2 /tmp/tmpd8ljm_5t.php(61):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpd8ljm_5t.php on line 16\n"
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $mini_roman = array('', 'i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii',\
    \ 'ix');\n    return $mini_roman[$number % 10];\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4vb10psq.php:22\n\
    Stack trace:\n#0 /tmp/tmp4vb10psq.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp4vb10psq.php\
    \ on line 22\n"
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n\tif($number < 1 or $number > 1000) {\n\t\tthrow new Exception(\"IllegalArgumentException\"\
    );\n\t}\n\t$result = \"\";\n\t$m = floor($number / 1000);\n\t$d = floor(($number\
    \ % 1000) / 500);\n\t$c = floor(($number % 500) / 100);\n\t$l = floor(($number\
    \ % 100) / 50);\n\t$x = floor(($number % 50) / 10);\n\t$v = floor(($number % 10)\
    \ / 5);\n\t$i = $number % 5;\n\t\n\t$result .= str_repeat(\"m\", $m);\n\t$result\
    \ .= str_repeat(\"d\", $d);\n\t$result .= str_repeat(\"c\", $c);\n\t$result .=\
    \ str_repeat(\"l\", $l);\n\t$result .= str_repeat(\"x\", $x);\n\t$result .= str_repeat(\"\
    v\", $v);\n\t$result .= str_repeat(\"i\", $i);\n\t\n\t$result = str_replace(\"\
    ccc\", \"cm\", $result);\n\t$result = str_replace(\"dd\", \"cd\", $result);\n\t\
    $result = str_replace(\"ll\", \"xc\", $result);\n\t$result = str_replace(\"xxx\"\
    , \"xc\", $result);\n\t$result = str_replace(\"vv\", \"xl\", $result);\n\t$result\
    \ = str_replace(\"ii\", \"ix\", $result);\n\t\n\treturn $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp38xgsbit.php:48\n\
    Stack trace:\n#0 /tmp/tmp38xgsbit.php(64): test()\n#1 {main}\n  thrown in /tmp/tmp38xgsbit.php\
    \ on line 48\n"
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $digits = str_split($number);\n    $digits_count = count($digits);\n\
    \    if ($digits_count > 3) {\n        die('this function only supports positive\
    \ integers <= 1000');\n    }\n    $roman_numeral = '';\n    for ($index = 0; $index\
    \ < $digits_count; $index++) {\n        $digit = $digits[$index];\n        if\
    \ ($digit === '0') {\n            continue;\n        }\n        if ($index ==\
    \ ($digits_count - 1)) {\n            $roman_numeral .= mini_roman_ones($digit);\n\
    \        } elseif ($index == ($digits_count - 2)) {\n            $roman_numeral\
    \ .= mini_roman_tens($digit);\n        } elseif ($index == ($digits_count - 3))\
    \ {\n            $roman_numeral .= mini_roman_hundreds($digit);\n        }\n \
    \   }\n    return $roman_numeral;\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mini_roman_tens()\
    \ in /tmp/tmpyn7ugas9.php:27\nStack trace:\n#0 /tmp/tmpyn7ugas9.php(36): int_to_mini_roman(19)\n\
    #1 /tmp/tmpyn7ugas9.php(40): candidate(19)\n#2 /tmp/tmpyn7ugas9.php(56): test()\n\
    #3 {main}\n  thrown in /tmp/tmpyn7ugas9.php on line 27\n"
  timestamp: 1660029131
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n\t$result = '';\n\t$map = [\n\t\t1000 => 'm',\n\t\t900 => 'cm',\n\t\t500\
    \ => 'd',\n\t\t400 => 'cd',\n\t\t100 => 'c',\n\t\t90 => 'xc',\n\t\t50 => 'l',\n\
    \t\t40 => 'xl',\n\t\t10 => 'x',\n\t\t9 => 'ix',\n\t\t5 => 'v',\n\t\t4 => 'iv',\n\
    \t\t1 => 'i'\n\t];\n\twhile ($number) {\n\t\tforeach ($map as $key => $value)\
    \ {\n\t\t\tif ($number >= $key) {\n\t\t\t\t$number -= $key;\n\t\t\t\t$result .=\
    \ $value;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn $result;\n}\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $answer = '';\n  $letters = ['m', 'd', 'c', 'l', 'x', 'v', 'i'];\n  $values\
    \ = [1000, 500, 100, 50, 10, 5, 1];\n  for ($i = 0; $i < count($values); $i++)\
    \ {\n    $value = $values[$i];\n    $letter = $letters[$i];\n    while ($number\
    \ >= $value) {\n      $answer .= $letter;\n      $number -= $value;\n    }\n \
    \ }\n  return $answer;\n}\n\n$given_number = 426;\n\necho $given_number . ' in\
    \ roman is ' . int_to_mini_roman($given_number) . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "426 in roman is ccccxxvi\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpmeomg78p.php:35\nStack trace:\n#0 /tmp/tmpmeomg78p.php(51): test()\n\
    #1 {main}\n  thrown in /tmp/tmpmeomg78p.php on line 35\n"
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $mini_roman = \"\";\n    $digit = $number % 10;\n    $number = (int)($number\
    \ / 10);\n    $mini_roman = getDigitValue($digit, $mini_roman);\n    $digit =\
    \ $number % 10;\n    $number = (int)($number / 10);\n    $mini_roman = getDigitValue($digit,\
    \ $mini_roman);\n    $digit = $number % 10;\n    $number = (int)($number / 10);\n\
    \    $mini_roman = getDigitValue($digit, $mini_roman);\n    $digit = $number %\
    \ 10;\n    $number = (int)($number / 10);\n    $mini_roman = getDigitValue($digit,\
    \ $mini_roman);\n    return $mini_roman;\n}\n\nfunction candidate(...$args) {\n\
    \    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function getDigitValue()\
    \ in /tmp/tmp3ua26ivr.php:16\nStack trace:\n#0 /tmp/tmp3ua26ivr.php(30): int_to_mini_roman(1)\n\
    #1 /tmp/tmp3ua26ivr.php(34): candidate(19)\n#2 /tmp/tmp3ua26ivr.php(50): test()\n\
    #3 {main}\n  thrown in /tmp/tmp3ua26ivr.php on line 16\n"
  timestamp: 1660029131
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $lookup = array(\n    1 => 'i', 4 => 'iv', 5 => 'v', 9 => 'ix',\n    10\
    \ => 'x', 40 => 'xl', 50 => 'l', 90 => 'xc',\n    100 => 'c', 400 => 'cd', 500\
    \ => 'd', 900 => 'cm',\n    1000 => 'm'\n  );\n  $result = '';\n  foreach (array_reverse(array_keys($lookup))\
    \ as $key) {\n    while ($number >= $key) {\n      $result .= $lookup[$key];\n\
    \      $number -= $key;\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = [\n    1 => 'i',\n    5 => 'v',\n    10 => 'x',\n    50 => 'l',\n\
    \    100 => 'c',\n    500 => 'd',\n    1000 => 'm'\n  ];\n  $divided = [];\n \
    \ $digits = str_split(strrev(strval($number)));\n  $divided[] = implode('', array_fill(0,\
    \ $digits[0], $roman[1]));\n  $divided[] = implode('', array_fill(0, $digits[1],\
    \ $roman[10]));\n  $divided[] = implode('', array_fill(0, $digits[2], $roman[100]));\n\
    \  $divided[] = implode('', array_fill(0, $digits[3], $roman[1000]));\n  $divided\
    \ = array_map('strrev', $divided);\n  $result = implode('', $divided);\n  $result\
    \ = str_replace(\n    ['iiiii', 'viv', 'xix', 'lxl', 'ccc', 'dcd', 'cmc'],\n \
    \   ['v', 'ix', 'xl', 'xc', 'cd', 'cm', 'm'],\n    $result\n  );\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 2 in /tmp/tmp3tz1ppco.php on line 26\n\n\
    Deprecated: array_fill(): Passing null to parameter #2 ($count) of type int is\
    \ deprecated in /tmp/tmp3tz1ppco.php on line 26\n\nWarning: Undefined array key\
    \ 3 in /tmp/tmp3tz1ppco.php on line 27\n\nDeprecated: array_fill(): Passing null\
    \ to parameter #2 ($count) of type int is deprecated in /tmp/tmp3tz1ppco.php on\
    \ line 27\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3tz1ppco.php:43\n\
    Stack trace:\n#0 /tmp/tmp3tz1ppco.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp3tz1ppco.php\
    \ on line 43\n"
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = \"\";\n    if ($number < 1 || $number > 1000) {\n        return\
    \ \"Number out of range!\";\n    }\n    $thousands = floor($number / 1000);\n\
    \    $hundreds = floor(($number - $thousands * 1000) / 100);\n    $tens = floor(($number\
    \ - $thousands * 1000 - $hundreds * 100) / 10);\n    $ones = $number - $thousands\
    \ * 1000 - $hundreds * 100 - $tens * 10;\n    if ($thousands > 0) {\n        for\
    \ ($i = 0; $i < $thousands; $i++) {\n            $roman .= \"m\";\n        }\n\
    \    }\n    if ($hundreds > 0) {\n        $roman .= romanOnes($hundreds, \"c\"\
    , \"d\", \"m\");\n    }\n    if ($tens > 0) {\n        $roman .= romanOnes($tens,\
    \ \"x\", \"l\", \"c\");\n    }\n    if ($ones > 0) {\n        $roman .= romanOnes($ones,\
    \ \"i\", \"v\", \"x\");\n    }\n    return $roman;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function romanOnes() in\
    \ /tmp/tmpudouv9ms.php:30\nStack trace:\n#0 /tmp/tmpudouv9ms.php(39): int_to_mini_roman(19)\n\
    #1 /tmp/tmpudouv9ms.php(43): candidate(19)\n#2 /tmp/tmpudouv9ms.php(59): test()\n\
    #3 {main}\n  thrown in /tmp/tmpudouv9ms.php on line 30\n"
  timestamp: 1660029131
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n\t// create an array of values for roman numerals\n\t$values = array(1000,900,500,400,100,90,50,40,10,9,5,4,1);\n\
    \t// create an array of roman numerals\n\t$letters = array('m','cm','d','cd','c','xc','l','xl','x','ix','v','iv','i');\n\
    \t// create the empty string\n\t$mini_roman = '';\n\t// iterate through each element\
    \ in the array of values\n\tfor ($i = 0; $i < count($values); $i++) {\n\t\t//\
    \ get the value of current element\n\t\t$value = $values[$i];\n\t\t// while the\
    \ current value is less than or equal to the number\n\t\twhile ($value <= $number)\
    \ {\n\t\t\t// add the corresponding roman numeral to the string\n\t\t\t$mini_roman\
    \ .= $letters[$i];\n\t\t\t// subtract the value from the number\n\t\t\t$number\
    \ -= $value;\n\t\t}\n\t}\n\t// return the string\n\treturn $mini_roman;\n}\n\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $numberRef = array(\n        1 => 'i',\n        5\
    \ => 'v',\n        10 => 'x',\n        50 => 'l',\n        100 => 'c',\n     \
    \   500 => 'd',\n        1000 => 'm'\n    );\n    $partition = array(100, 50,\
    \ 10, 5, 1);\n    for ($i = 0; $i < count($partition); $i++) {\n        $divisor\
    \ = $partition[$i];\n        $quotient = floor($number / $divisor);\n        $number\
    \ = $number % $divisor;\n        if ($i % 2 == 0) {\n            if ($quotient\
    \ == 4) {\n                $result .= $numberRef[$divisor] . $numberRef[$divisor\
    \ * 5];\n            } else {\n                $result .= str_repeat($numberRef[$divisor],\
    \ $quotient);\n            }\n        } else {\n            if ($quotient == 4)\
    \ {\n                $result .= $numberRef[$divisor] . $numberRef[$divisor * 2];\n\
    \            } else {\n                $result .= str_repeat($numberRef[$divisor],\
    \ $quotient);\n            }\n        }\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsgqvbyuk.php:50\n\
    Stack trace:\n#0 /tmp/tmpsgqvbyuk.php(66): test()\n#1 {main}\n  thrown in /tmp/tmpsgqvbyuk.php\
    \ on line 50\n"
  timestamp: 1660029131
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $result = \"\";\n    $numbers = [\n        1000 => \"m\",\n        900\
    \ => \"cm\",\n        500 => \"d\",\n        400 => \"cd\",\n        100 => \"\
    c\",\n        90 => \"xc\",\n        50 => \"l\",\n        40 => \"xl\",\n   \
    \     10 => \"x\",\n        9 => \"ix\",\n        5 => \"v\",\n        4 => \"\
    iv\",\n        1 => \"i\"\n    ];\n    foreach ($numbers as $key => $value) {\n\
    \        $times = intval($number / $key);\n        $result .= str_repeat($value,\
    \ $times);\n        $number = $number % $key;\n    }\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029131
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n\t$base_units = array('', 'i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii',\
    \ 'ix');\n\t$base_tens = array('', 'x', 'xx', 'xxx', 'xl', 'l', 'lx', 'lxx', 'lxxx',\
    \ 'xc');\n\t$base_hundreds = array('', 'c', 'cc', 'ccc', 'cd', 'd', 'dc', 'dcc',\
    \ 'dccc', 'cm');\n\t$base_thousands = array('', 'm', 'mm', 'mmm');\n\t\n\tif($number\
    \ > 1000) {\n\t\treturn \"\";\n\t}\n\tif($number < 1) {\n\t\treturn \"\";\n\t\
    }\n\t\n\t$remainder = $number;\n\t$out = \"\";\n\twhile($remainder >= 1000) {\n\
    \t\t$out .= $base_thousands[1];\n\t\t$remainder -= 1000;\n\t}\n\twhile($remainder\
    \ >= 100) {\n\t\t$out .= $base_hundreds[$remainder / 100];\n\t\t$remainder %=\
    \ 100;\n\t}\n\twhile($remainder >= 10) {\n\t\t$out .= $base_tens[$remainder /\
    \ 10];\n\t\t$remainder %= 10;\n\t}\n\t$out .= $base_units[$remainder];\n\t\n\t\
    return $out;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Deprecated: Implicit conversion from float 1.9 to int loses precision in /tmp/tmp2h8cd7ia.php
    on line 36


    Deprecated: Implicit conversion from float 1.52 to int loses precision in /tmp/tmp2h8cd7ia.php
    on line 32


    Deprecated: Implicit conversion from float 5.2 to int loses precision in /tmp/tmp2h8cd7ia.php
    on line 36


    Deprecated: Implicit conversion from float 2.51 to int loses precision in /tmp/tmp2h8cd7ia.php
    on line 32


    Deprecated: Implicit conversion from float 5.1 to int loses precision in /tmp/tmp2h8cd7ia.php
    on line 36


    Deprecated: Implicit conversion from float 4.26 to int loses precision in /tmp/tmp2h8cd7ia.php
    on line 32


    Deprecated: Implicit conversion from float 2.6 to int loses precision in /tmp/tmp2h8cd7ia.php
    on line 36


    Deprecated: Implicit conversion from float 4.3 to int loses precision in /tmp/tmp2h8cd7ia.php
    on line 36


    Deprecated: Implicit conversion from float 9.4 to int loses precision in /tmp/tmp2h8cd7ia.php
    on line 36


    Deprecated: Implicit conversion from float 5.32 to int loses precision in /tmp/tmp2h8cd7ia.php
    on line 32


    Deprecated: Implicit conversion from float 3.2 to int loses precision in /tmp/tmp2h8cd7ia.php
    on line 36


    Deprecated: Implicit conversion from float 9.94 to int loses precision in /tmp/tmp2h8cd7ia.php
    on line 32


    Deprecated: Implicit conversion from float 9.4 to int loses precision in /tmp/tmp2h8cd7ia.php
    on line 36

    '
  timestamp: 1660029131
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  if ($number < 1 || $number > 1000) {\n    throw new Exception(\"Number\
    \ out of range\");\n  }\n  $ones = array(\"i\", \"ii\", \"iii\", \"iv\", \"v\"\
    , \"vi\", \"vii\", \"viii\", \"ix\");\n  $tens = array(\"x\", \"xx\", \"xxx\"\
    , \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\");\n  $hundreds = array(\"c\"\
    , \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\");\n  $thousands\
    \ = array(\"m\", \"mm\", \"mmm\");\n  $num = $number;\n  $miniRoman = \"\";\n\
    \  $temp = intval($num / 1000);\n  $miniRoman .= $thousands[$temp - 1];\n  $num\
    \ = $num % 1000;\n  $temp = intval($num / 100);\n  $miniRoman .= $hundreds[$temp\
    \ - 1];\n  $num = $num % 100;\n  $temp = intval($num / 10);\n  $miniRoman .= $tens[$temp\
    \ - 1];\n  $num = $num % 10;\n  $miniRoman .= $ones[$num - 1];\n  return $miniRoman;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Warning: Undefined array key -1 in /tmp/tmpwys16lea.php on line 23


    Warning: Undefined array key -1 in /tmp/tmpwys16lea.php on line 26


    Warning: Undefined array key -1 in /tmp/tmpwys16lea.php on line 23


    Warning: Undefined array key -1 in /tmp/tmpwys16lea.php on line 23


    Warning: Undefined array key -1 in /tmp/tmpwys16lea.php on line 23


    Warning: Undefined array key -1 in /tmp/tmpwys16lea.php on line 23


    Warning: Undefined array key -1 in /tmp/tmpwys16lea.php on line 29


    Warning: Undefined array key -1 in /tmp/tmpwys16lea.php on line 31


    Warning: Undefined array key -1 in /tmp/tmpwys16lea.php on line 23


    Warning: Undefined array key -1 in /tmp/tmpwys16lea.php on line 26


    Warning: Undefined array key -1 in /tmp/tmpwys16lea.php on line 29


    Warning: Undefined array key -1 in /tmp/tmpwys16lea.php on line 23


    Warning: Undefined array key -1 in /tmp/tmpwys16lea.php on line 26


    Warning: Undefined array key -1 in /tmp/tmpwys16lea.php on line 29


    Warning: Undefined array key -1 in /tmp/tmpwys16lea.php on line 23


    Warning: Undefined array key -1 in /tmp/tmpwys16lea.php on line 26


    Warning: Undefined array key -1 in /tmp/tmpwys16lea.php on line 23


    Warning: Undefined array key -1 in /tmp/tmpwys16lea.php on line 26


    Warning: Undefined array key -1 in /tmp/tmpwys16lea.php on line 31


    Warning: Undefined array key -1 in /tmp/tmpwys16lea.php on line 23


    Warning: Undefined array key -1 in /tmp/tmpwys16lea.php on line 26


    Warning: Undefined array key -1 in /tmp/tmpwys16lea.php on line 23


    Warning: Undefined array key -1 in /tmp/tmpwys16lea.php on line 23


    Warning: Undefined array key -1 in /tmp/tmpwys16lea.php on line 29


    Warning: Undefined array key -1 in /tmp/tmpwys16lea.php on line 31


    Warning: Undefined array key -1 in /tmp/tmpwys16lea.php on line 23


    Warning: Undefined array key -1 in /tmp/tmpwys16lea.php on line 26


    Warning: Undefined array key -1 in /tmp/tmpwys16lea.php on line 29


    Warning: Undefined array key -1 in /tmp/tmpwys16lea.php on line 31

    '
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $output = '';\n  if ($number > 999) {\n    $output .= 'm';\n    $number\
    \ -= 1000;\n  }\n  if ($number > 899) {\n    $output .= 'cm';\n    $number -=\
    \ 900;\n  }\n  if ($number > 499) {\n    $output .= 'd';\n    $number -= 500;\n\
    \  }\n  if ($number > 399) {\n    $output .= 'cd';\n    $number -= 400;\n  }\n\
    \  if ($number > 99) {\n    $output .= 'c';\n    $number -= 100;\n  }\n  if ($number\
    \ > 89) {\n    $output .= 'xc';\n    $number -= 90;\n  }\n  if ($number > 49)\
    \ {\n    $output .= 'l';\n    $number -= 50;\n  }\n  if ($number > 39) {\n   \
    \ $output .= 'xl';\n    $number -= 40;\n  }\n  if ($number > 9) {\n    $output\
    \ .= 'x';\n    $number -= 10;\n  }\n  if ($number > 8) {\n    $output .= 'ix';\n\
    \    $number -= 9;\n  }\n  if ($number > 4) {\n    $output .= 'v';\n    $number\
    \ -= 5;\n  }\n  if ($number > 3) {\n    $output .= 'iv';\n    $number -= 4;\n\
    \  }\n  $output .= str_repeat('i', $number);\n  return $output;\n}\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjvg6j95x.php:72\n\
    Stack trace:\n#0 /tmp/tmpjvg6j95x.php(86): test()\n#1 {main}\n  thrown in /tmp/tmpjvg6j95x.php\
    \ on line 72\n"
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $part = $number % 10;\n    switch ($part) {\n    \
    \    case 1:\n            $result = 'i';\n            break;\n        case 2:\n\
    \            $result = 'ii';\n            break;\n        case 3:\n          \
    \  $result = 'iii';\n            break;\n        case 4:\n            $result\
    \ = 'iv';\n            break;\n        case 5:\n            $result = 'v';\n \
    \           break;\n        case 6:\n            $result = 'vi';\n           \
    \ break;\n        case 7:\n            $result = 'vii';\n            break;\n\
    \        case 8:\n            $result = 'viii';\n            break;\n        case\
    \ 9:\n            $result = 'ix';\n            break;\n    }\n    if ($number\
    \ >= 10) {\n        $result = int_to_mini_roman($number / 10) . $result;\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nDeprecated: Implicit conversion from float 1.9 to int loses precision\
    \ in /tmp/tmp4x1wqpkj.php on line 14\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp4x1wqpkj.php:55\nStack trace:\n#0 /tmp/tmp4x1wqpkj.php(71):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp4x1wqpkj.php on line 55\n"
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $s = '';\n  $i = 0;\n  $rr = array(1000, 500, 100, 50, 10, 5, 1);\n  $rm\
    \ = array('m', 'd', 'c', 'l', 'x', 'v', 'i');\n  while ($number > 0) {\n    $count\
    \ = intval($number / $rr[$i]);\n    if ($count) {\n      $s .= str_repeat($rm[$i],\
    \ $count);\n      $number -= $count * $rr[$i];\n    }\n    $i++;\n  }\n  return\
    \ $s;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyl2scn7q.php:33\n\
    Stack trace:\n#0 /tmp/tmpyl2scn7q.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpyl2scn7q.php\
    \ on line 33\n"
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $result = '';\n  $numerals = [\n    'm' => 1000,\n    'd' => 500,\n   \
    \ 'c' => 100,\n    'l' => 50,\n    'x' => 10,\n    'v' => 5,\n    'i' => 1\n \
    \ ];\n  foreach ($numerals as $numeral => $value) {\n    $count = intval($number\
    \ / $value);\n    $result .= str_repeat($numeral, $count);\n    $number = $number\
    \ % $value;\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n   \
    \ return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_nlrcye5.php:36\n\
    Stack trace:\n#0 /tmp/tmp_nlrcye5.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp_nlrcye5.php\
    \ on line 36\n"
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $numerals = array(1 => 'i',\n                      5 => 'v',\n      \
    \                10 => 'x',\n                      50 => 'l',\n              \
    \        100 => 'c',\n                      500 => 'd',\n                    \
    \  1000 => 'm');\n    $result = '';\n    foreach ($numerals as $decimal => $numeral)\
    \ {\n        $quotient = (int) ($number / $decimal);\n        $remainder = $number\
    \ % $decimal;\n        if ($quotient == 9) {\n            $result .= $numerals[$decimal]\
    \ . $numerals[$decimal * 10];\n        } elseif ($quotient >= 5) {\n         \
    \   $result .= $numerals[$decimal * 5];\n            $quotient -= 5;\n       \
    \ } elseif ($quotient == 4) {\n            $result .= $numerals[$decimal] . $numerals[$decimal\
    \ * 5];\n        }\n        $result .= str_repeat($numerals[$decimal], $quotient);\n\
    \        $number = $remainder;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbejwzs71.php:43\n\
    Stack trace:\n#0 /tmp/tmpbejwzs71.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpbejwzs71.php\
    \ on line 43\n"
  timestamp: 1660029131
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $numerals = array(\n        array(1000, 'm'),\n        array(900, 'cm'),\n\
    \        array(500, 'd'),\n        array(400, 'cd'),\n        array(100, 'c'),\n\
    \        array(90, 'xc'),\n        array(50, 'l'),\n        array(40, 'xl'),\n\
    \        array(10, 'x'),\n        array(9, 'ix'),\n        array(5, 'v'),\n  \
    \      array(4, 'iv'),\n        array(1, 'i')\n    );\n    $output = '';\n   \
    \ foreach ($numerals as $numeral) {\n        $num = $numeral[0];\n        $n =\
    \ $numeral[1];\n        while ($number >= $num) {\n            $output .= $n;\n\
    \            $number -= $num;\n        }\n    }\n    return $output;\n}\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $mini_roman = \"\";\n    $symbols = array(\"i\", \"v\", \"x\", \"l\"\
    , \"c\", \"d\", \"m\");\n    $base = 1;\n    for ($digit = 0; $digit < strlen(strval($number));\
    \ $digit++) {\n        $current_digit = substr(strval($number), -$digit - 1, 1);\n\
    \        if ($current_digit == \"0\") {\n            $base *= 10;\n          \
    \  continue;\n        }\n        $mini_roman = $symbols[$digit * 2] . str_repeat($symbols[$digit\
    \ * 2 + 1], $current_digit - 1) . $mini_roman;\n        if ($current_digit ==\
    \ \"9\") {\n            $mini_roman = $symbols[$digit * 2] . $symbols[$digit *\
    \ 2 + 2] . $mini_roman;\n        }\n        $base *= 10;\n    }\n    return $mini_roman;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_vaux1jw.php:36\n\
    Stack trace:\n#0 /tmp/tmp_vaux1jw.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp_vaux1jw.php\
    \ on line 36\n"
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $return = \"\";\n  $tens = floor($number / 10);\n  $remainder = $number\
    \ % 10;\n  while ($tens > 0) {\n    $return .= \"x\";\n    $tens--;\n  }\n  if\
    \ ($remainder === 9) {\n    $return .= \"ix\";\n  } else if ($remainder >= 5)\
    \ {\n    $return .= \"v\";\n    $remainder -= 5;\n    while ($remainder > 0) {\n\
    \      $return .= \"i\";\n      $remainder--;\n    }\n  } else if ($remainder\
    \ === 4) {\n    $return .= \"iv\";\n  } else {\n    while ($remainder > 0) {\n\
    \      $return .= \"i\";\n      $remainder--;\n    }\n  }\n  return $return;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj1i22v0e.php:46\n\
    Stack trace:\n#0 /tmp/tmpj1i22v0e.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpj1i22v0e.php\
    \ on line 46\n"
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n\t$roman = array(\"i\", \"v\", \"x\", \"l\", \"c\", \"d\", \"m\");\n\t$romanStr\
    \ = \"\";\n\t\n\tfor ($i = (strlen($number) - 1); $i >= 0; $i--) {\n\t\t$ones\
    \ = $number[$i];\n\t\t$tens = pow(10, $i);\n\t\t\n\t\tif ($ones >= 5) {\n\t\t\t\
    if ($ones == 9) {\n\t\t\t\t$romanStr = $roman[2 * $i] . $roman[2 * $i + 2] . $romanStr;\n\
    \t\t\t} else {\n\t\t\t\t$romanStr = $roman[2 * $i + 1] . str_repeat($roman[2 *\
    \ $i], $ones - 5) . $romanStr;\n\t\t\t}\n\t\t} else if ($ones == 4) {\n\t\t\t\
    $romanStr = $roman[2 * $i] . $roman[2 * $i + 1] . $romanStr;\n\t\t} else {\n\t\
    \t\t$romanStr = str_repeat($roman[2 * $i], $ones) . $romanStr;\n\t\t}\n\t}\n\t\
    \n\treturn $romanStr;\n}\n\nfor ($i = 1; $i <= 1000; $i++) {\n\t$romanStr = int_to_mini_roman($i);\n\
    \techo \"int_to_mini_roman($i) = \\\"$romanStr\\\"<br />\";\n}\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Warning: Trying to access array offset on value of type int in /tmp/tmpyio2z59d.php
    on line 17


    Deprecated: str_repeat(): Passing null to parameter #2 ($times) of type int is
    deprecated in /tmp/tmpyio2z59d.php on line 29

    int_to_mini_roman(1) = ""<br />

    Warning: Trying to access array offset on value of type int in /tmp/tmpyio2z59d.php
    on line 17


    Deprecated: str_repeat(): Passing null to parameter #2 ($times) of type int is
    deprecated in /tmp/tmpyio2z59d.php on line 29

    int_to_mini_roman(2) = ""<br />

    Warning: Trying to access array offset on value of type int in /tmp/tmpyio2z59d.php
    on line 17


    Deprecated: str_repeat(): Passing null to parameter #2 ($times) of type int is
    deprecated in /tmp/tmpyio2z59d.php on line 29

    int_to_mini_roman(3) = ""<br />

    Warning: Trying to access array offset on value of type int in /tmp/tmpyio2z59d.php
    on line 17


    Deprecated: str_repeat(): Passing null to parameter #2 ($times) of type int is
    deprecated in /tmp/tmpyio2z59d.php on line 29

    int_to_mini_roman(4) = ""<br />

    Warning: Trying to access array offset on value of type int in /tmp/tmpyio2z59d.php
    on line 17


    Deprecated: str_repeat(): Passing null to parameter #2 ($times) of type int is
    deprecated in /tmp/tmpyio2z59d.php on line 29

    int_to_mini_roman(5) = ""<br />

    Warning: Trying to access array offset on value of type int in /tmp/tmpyio2z59d.php
    on line 17


    Deprecated: str_repeat(): Passing null to parameter #2 ($times) of type int is
    deprecated in /tmp/tmpyio2z59d.php on line 29

    int_to_mini_roman(6) = ""<br />

    Warning: Trying to access array offset on value of type int in /tmp/tmpyio2z59d.php
    on line 17


    Deprecated: str_repeat(): Passing null to parameter #2 ($times) of type int is
    deprecated in /tmp/tmpyio2z59d.php on line 29

    int_to_mini_roman(7) = ""<br />

    Warning: Trying to access array offset on value of type int in /tmp/tmpyio2z59d.php
    on line 17


    Deprecated: str_repeat(): Passing null to parameter #2 ($times) of type int is
    deprecated in /tmp/tmpyio2z59d.php on line 29

    int_to_mini_roman(8) = ""<br />

    Warning: Trying to acce'
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $numeral = \"\";\n    $thousands = [\"\",\"M\",\"MM\",\"MMM\"];\n   \
    \ $hundreds = [\"\",\"C\",\"CC\",\"CCC\",\"CD\",\"D\",\"DC\",\"DCC\",\"DCCC\"\
    ,\"CM\"];\n    $tens = [\"\",\"X\",\"XX\",\"XXX\",\"XL\",\"L\",\"LX\",\"LXX\"\
    ,\"LXXX\",\"XC\"];\n    $ones = [\"\",\"I\",\"II\",\"III\",\"IV\",\"V\",\"VI\"\
    ,\"VII\",\"VIII\",\"IX\"];\n    $numeral .= $thousands[floor($number/1000)];\n\
    \    $number %= 1000;\n    $numeral .= $hundreds[floor($number/100)];\n    $number\
    \ %= 100;\n    $numeral .= $tens[floor($number/10)];\n    $number %= 10;\n   \
    \ $numeral .= $ones[$number];\n    return $numeral;\n}\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx1eld62e.php:32\n\
    Stack trace:\n#0 /tmp/tmpx1eld62e.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpx1eld62e.php\
    \ on line 32\n"
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  while ($number >= 100) {\n    $roman .= 'c';\n    $number\
    \ -= 100;\n  }\n  while ($number >= 50) {\n    $roman .= 'l';\n    $number -=\
    \ 50;\n  }\n  while ($number >= 10) {\n    $roman .= 'x';\n    $number -= 10;\n\
    \  }\n  while ($number >= 5) {\n    $roman .= 'v';\n    $number -= 5;\n  }\n \
    \ while ($number >= 1) {\n    $roman .= 'i';\n    $number -= 1;\n  }\n  return\
    \ $roman;\n}\n\n$number = 19;\n\necho int_to_mini_roman($number);\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "xviiii\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr9lkmnyj.php:46\n\
    Stack trace:\n#0 /tmp/tmpr9lkmnyj.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpr9lkmnyj.php\
    \ on line 46\n"
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpujewm3ah.php:20\n\
    Stack trace:\n#0 /tmp/tmpujewm3ah.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpujewm3ah.php\
    \ on line 20\n"
  timestamp: 1660029131
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n\t$numerals = array('m' => 1000, 'cm' => 900, 'd' => 500, 'cd' => 400, 'c'\
    \ => 100, 'xc' => 90, 'l' => 50, 'xl' => 40, 'x' => 10, 'ix' => 9, 'v' => 5, 'iv'\
    \ => 4, 'i' => 1);\n\t$return = '';\n\twhile($number > 0) {\n\t\tforeach($numerals\
    \ as $numeral => $int) {\n\t\t\tif($number >= $int) {\n\t\t\t\t$number -= $int;\n\
    \t\t\t\t$return .= $numeral;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn $return;\n\
    }\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  // your code here\n  $numerals = array(\n    \"i\" => 1,\n    \"v\" =>\
    \ 5,\n    \"x\" => 10,\n    \"l\" => 50,\n    \"c\" => 100,\n    \"d\" => 500,\n\
    \    \"m\" => 1000\n  );\n  $romans = array(\n    \"m\" => 0,\n    \"cm\" => 0,\n\
    \    \"d\" => 0,\n    \"cd\" => 0,\n    \"c\" => 0,\n    \"xc\" => 0,\n    \"\
    l\" => 0,\n    \"xl\" => 0,\n    \"x\" => 0,\n    \"ix\" => 0,\n    \"v\" => 0,\n\
    \    \"iv\" => 0,\n    \"i\" => 0\n  );\n  while ($number > 0) {\n    if ($number\
    \ >= 1000) {\n      $romans[\"m\"]++;\n      $number -= 1000;\n    } elseif ($number\
    \ >= 900) {\n      $romans[\"cm\"]++;\n      $number -= 900;\n    } elseif ($number\
    \ >= 500) {\n      $romans[\"d\"]++;\n      $number -= 500;\n    } elseif ($number\
    \ >= 400) {\n      $romans[\"cd\"]++;\n      $number -= 400;\n    } elseif ($number\
    \ >= 100) {\n      $romans[\"c\"]++;\n      $number -= 100;\n    } elseif ($number\
    \ >= 90) {\n      $romans[\"xc\"]++;\n      $number -= 90;\n    } elseif ($number\
    \ >= 50) {\n      $romans[\"l\"]++;\n      $number -= 50;\n    } elseif ($number\
    \ >= 40) {\n      $romans[\"xl\"]++;\n      $number -= 40;\n    } elseif ($number\
    \ >= 10) {\n      $romans[\"x\"]++;\n      $number -= 10;\n    } elseif ($number\
    \ >= 9) {\n      $romans[\"ix\"]++;\n      $number -= 9;\n    } elseif ($number\
    \ >= 5) {\n      $romans[\"v\"]++;\n      $number -= 5;\n    } elseif ($number\
    \ >= 4) {\n      $romans[\"iv\"]\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmp4udr02by.php
    on line 74

    '
  timestamp: 1660029131
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $roman_numerals = array(\n    'm'  => 1000,\n    'cm' => 900,\n    'd'\
    \  => 500,\n    'cd' => 400,\n    'c'  => 100,\n    'xc' => 90,\n    'l'  => 50,\n\
    \    'xl' => 40,\n    'x'  => 10,\n    'ix' => 9,\n    'v'  => 5,\n    'iv' =>\
    \ 4,\n    'i'  => 1,\n    );\n    $return_value = '';\n    while($number > 0)\
    \ {\n        foreach($roman_numerals as $roman => $int) {\n            if($number\
    \ >= $int) {\n                $number -= $int;\n                $return_value\
    \ .= $roman;\n                break;\n            }\n        }\n    }\n    return\
    \ $return_value;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029131
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = \"\";\n  $numerals = array(\n    1000 => \"m\",\n    900 => \"\
    cm\",\n    500 => \"d\",\n    400 => \"cd\",\n    100 => \"c\",\n    90 => \"\
    xc\",\n    50 => \"l\",\n    40 => \"xl\",\n    10 => \"x\",\n    9 => \"ix\"\
    ,\n    5 => \"v\",\n    4 => \"iv\",\n    1 => \"i\"\n  );\n  foreach ($numerals\
    \ as $int => $numeral) {\n    while ($number >= $int) {\n      $roman .= $numeral;\n\
    \      $number -= $int;\n    }\n  }\n  return $roman;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk3aer_bx.php:21\n\
    Stack trace:\n#0 /tmp/tmpk3aer_bx.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpk3aer_bx.php\
    \ on line 21\n"
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $mini_roman = \"\";\n    $count = $number;\n    while ($count >= 1) {\n\
    \        if ($count >= 1000) {\n            $mini_roman .= \"m\";\n          \
    \  $count -= 1000;\n        } elseif ($count >= 900) {\n            $mini_roman\
    \ .= \"cm\";\n            $count -= 900;\n        } elseif ($count >= 500) {\n\
    \            $mini_roman .= \"d\";\n            $count -= 500;\n        } elseif\
    \ ($count >= 400) {\n            $mini_roman .= \"cd\";\n            $count -=\
    \ 400;\n        } elseif ($count >= 100) {\n            $mini_roman .= \"c\";\n\
    \            $count -= 100;\n        } elseif ($count >= 90) {\n            $mini_roman\
    \ .= \"xc\";\n            $count -= 90;\n        } elseif ($count >= 50) {\n \
    \           $mini_roman .= \"l\";\n            $count -= 50;\n        } elseif\
    \ ($count >= 40) {\n            $mini_roman .= \"xl\";\n            $count -=\
    \ 40;\n        } elseif ($count >= 10) {\n            $mini_roman .= \"x\";\n\
    \            $count -= 10;\n        } elseif ($count >= 9) {\n            $mini_roman\
    \ .= \"ix\";\n            $count -= 9;\n        } elseif ($count >= 5) {\n   \
    \         $mini_roman .= \"v\";\n            $count -= 5;\n        } elseif ($count\
    \ >= 4) {\n            $mini_roman .= \"iv\";\n            $count -= 4;\n    \
    \    } elseif ($count >= 1) {\n            $mini_roman .= \"i\";\n           \
    \ $count -= 1;\n        }\n    }\n    return $mini_roman;\n}\n\necho \"Please\
    \ enter a number between 1 and 1000: \";\n$number = readline();\n\nif ($number\
    \ > 1000 || $number < 1) {\n    echo \"Please enter a valid number between 1 and\
    \ 1000: \";\n    $number = readline();\n}\n\necho \"The mini roman numeral is\
    \ \" . int_to_mini_roman($number) . PHP_EOL;\nfunction candidate(...$args) {\n\
    \    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Please enter a number between 1 and 1000: \nFatal error: Uncaught Error:\
    \ Call to undefined function readline() in /tmp/tmpd9b1z5ac.php:61\nStack trace:\n\
    #0 {main}\n  thrown in /tmp/tmpd9b1z5ac.php on line 61\n"
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpujewm3ah.php:20\n\
    Stack trace:\n#0 /tmp/tmpujewm3ah.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpujewm3ah.php\
    \ on line 20\n"
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  // Break $number down into its units and build the Roman numeral string\
    \ \n  // from the units, which are the same no matter how big the number is.\n\
    \  $number_str = strval($number);\n  $numeral = '';\n  $length = strlen($number_str);\n\
    \  $ones = intval($number_str[$length - 1]);\n  if ($ones != 0) {\n    $numeral\
    \ .= get_units($ones);\n  }\n  $tens = intval($number_str[$length - 2]);\n  if\
    \ ($tens != 0) {\n    $numeral = get_tens($tens) . $numeral;\n  }\n  $hundreds\
    \ = intval($number_str[$length - 3]);\n  if ($hundreds != 0) {\n    $numeral =\
    \ get_hundreds($hundreds) . $numeral;\n  }\n  $thousands = intval($number_str[$length\
    \ - 4]);\n  if ($thousands != 0) {\n    $numeral = get_thousands($thousands) .\
    \ $numeral;\n  }\n  return $numeral;\n}\n\nfunction candidate(...$args) {\n  \
    \  return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_units() in\
    \ /tmp/tmp9mtl2416.php:20\nStack trace:\n#0 /tmp/tmp9mtl2416.php(38): int_to_mini_roman(19)\n\
    #1 /tmp/tmp9mtl2416.php(42): candidate(19)\n#2 /tmp/tmp9mtl2416.php(58): test()\n\
    #3 {main}\n  thrown in /tmp/tmp9mtl2416.php on line 20\n"
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  // your code here\n}\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptzlylyc4.php:20\n\
    Stack trace:\n#0 /tmp/tmptzlylyc4.php(36): test()\n#1 {main}\n  thrown in /tmp/tmptzlylyc4.php\
    \ on line 20\n"
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $romanNumeralMap = [\n        'X' => 10,\n        'IX' => 9,\n      \
    \  'V' => 5,\n        'IV' => 4,\n        'I' => 1\n    ];\n    $result = '';\n\
    \    foreach ($romanNumeralMap as $numeral => $int) {\n        for (; $number\
    \ >= $int; $number -= $int) {\n            $result .= $numeral;\n        }\n \
    \   }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp4iejwpf.php:34\n\
    Stack trace:\n#0 /tmp/tmpp4iejwpf.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpp4iejwpf.php\
    \ on line 34\n"
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpujewm3ah.php:20\n\
    Stack trace:\n#0 /tmp/tmpujewm3ah.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpujewm3ah.php\
    \ on line 20\n"
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n}\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1q4oa9i9.php:19\n\
    Stack trace:\n#0 /tmp/tmp1q4oa9i9.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp1q4oa9i9.php\
    \ on line 19\n"
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    // your code here\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphyshajps.php:21\n\
    Stack trace:\n#0 /tmp/tmphyshajps.php(37): test()\n#1 {main}\n  thrown in /tmp/tmphyshajps.php\
    \ on line 21\n"
  timestamp: 1660029131
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $res = '';\n    $romans = [\n        [1000, 'm'],\n        [900, 'cm'],\n\
    \        [500, 'd'],\n        [400, 'cd'],\n        [100, 'c'],\n        [90,\
    \ 'xc'],\n        [50, 'l'],\n        [40, 'xl'],\n        [10, 'x'],\n      \
    \  [9, 'ix'],\n        [5, 'v'],\n        [4, 'iv'],\n        [1, 'i'],\n    ];\n\
    \    foreach ($romans as $roman) {\n        list($base, $char) = $roman;\n   \
    \     $times = intdiv($number, $base);\n        $res .= str_repeat($char, $times);\n\
    \        $number -= $base * $times;\n    }\n    return $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $digits = str_split($number);\n    $digits = array_reverse($digits);\n\
    \    $numeral = '';\n    $ones = array('i', 'x', 'c', 'm');\n    $fives = array('v',\
    \ 'l', 'd');\n    $length = count($digits);\n    foreach ($digits as $i => $digit)\
    \ {\n        $numeral = mini_helper($digit, $i, $length, $ones, $fives) . $numeral;\n\
    \    }\n    return $numeral;\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mini_helper()\
    \ in /tmp/tmp5fz_ze4x.php:20\nStack trace:\n#0 /tmp/tmp5fz_ze4x.php(26): int_to_mini_roman(19)\n\
    #1 /tmp/tmp5fz_ze4x.php(30): candidate(19)\n#2 /tmp/tmp5fz_ze4x.php(46): test()\n\
    #3 {main}\n  thrown in /tmp/tmp5fz_ze4x.php on line 20\n"
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $result = \"\";\n  // TODO: implement me!\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp132lz3cs.php:23\n\
    Stack trace:\n#0 /tmp/tmp132lz3cs.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp132lz3cs.php\
    \ on line 23\n"
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n\tif($number > 1000) { return false; }\n\t$out = '';\n\t$ones = array('',\
    \ 'i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii', 'ix');\n\t$tens = array('',\
    \ 'x', 'xx', 'xxx', 'xl', 'l', 'lx', 'lxx', 'lxxx', 'xc');\n\t$hundreds = array('',\
    \ 'c', 'cc', 'ccc', 'cd', 'd', 'dc', 'dcc', 'dccc', 'cm');\n\t$thousands = array('',\
    \ 'm', 'mm', 'mmm');\n\t$characters = array('ones', 'tens', 'hundreds', 'thousands');\n\
    \t$values = array($ones, $tens, $hundreds, $thousands);\n\t$number = str_split($number);\n\
    \tfor($i = count($number) - 1; $i >= 0; $i--) {\n\t\t$out = $values[$i][$number[$i]]\
    \ . $out;\n\t}\n\treturn $out;\n}\n\necho int_to_mini_roman(19) . \"\\n\";\necho\
    \ int_to_mini_roman(152) . \"\\n\";\necho int_to_mini_roman(426) . \"\\n\";\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "ixc\nilcc\nivxxdc\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzu2568vx.php:36\n\
    Stack trace:\n#0 /tmp/tmpzu2568vx.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpzu2568vx.php\
    \ on line 36\n"
  timestamp: 1660029131
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $numbers = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400,\
    \ 500, 900, 1000];\n    $numerals = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc',\
    \ 'c', 'cd', 'd', 'cm', 'm'];\n    for ($i = count($numbers) - 1; $i >= 0; $i--)\
    \ {\n        while ($number >= $numbers[$i]) {\n            $result .= $numerals[$i];\n\
    \            $number -= $numbers[$i];\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029131
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $number_replacements = array(\n        1000 => 'm',\n        900 => 'cm',\n\
    \        500 => 'd',\n        400 => 'cd',\n        100 => 'c',\n        90 =>\
    \ 'xc',\n        50 => 'l',\n        40 => 'xl',\n        10 => 'x',\n       \
    \ 9 => 'ix',\n        5 => 'v',\n        4 => 'iv',\n        1 => 'i',\n    );\n\
    \    $s = '';\n    foreach ($number_replacements as $value => $letters) {\n  \
    \      for (; $number >= $value; $number -= $value) {\n            $s .= $letters;\n\
    \        }\n    }\n    return $s;\n}\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n   $dictionary = array(\n       900 => 'cm',\n       500 => 'd',\n      \
    \ 400 => 'cd',\n       100 => 'c',\n       90 => 'xc',\n       50 => 'l',\n  \
    \     40 => 'xl',\n       10 => 'x',\n       9 => 'ix',\n       5 => 'v',\n  \
    \     4 => 'iv',\n       1 => 'i',\n   );\n   $result = '';\n   foreach ($dictionary\
    \ as $num => $roman) {\n      $matches = intval($number / $num);\n      $result\
    \ .= str_repeat($roman, $matches);\n      $number = $number % $num;\n   }\n  \
    \ return $result;\n}\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfuxi72gc.php:53\n\
    Stack trace:\n#0 /tmp/tmpfuxi72gc.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpfuxi72gc.php\
    \ on line 53\n"
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $roman_numerals = [\n        'm' => 1000,\n        'd' => 500,\n    \
    \    'c' => 100,\n        'l' => 50,\n        'x' => 10,\n        'v' => 5,\n\
    \        'i' => 1\n    ];\n    $result = '';\n    while ($number > 0) {\n    \
    \    foreach ($roman_numerals as $roman => $arabic) {\n            if ($number\
    \ >= $arabic) {\n                $number -= $arabic;\n                $result\
    \ .= $roman;\n                break;\n            }\n        }\n    }\n    return\
    \ $result;\n}\n\n$input_text = fopen(\"php://stdin\", \"r\");\necho(\"Input a\
    \ number:\\n\");\n$number = (int)fgets($input_text);\nfclose($input_text);\n\n\
    if ($number > 1000 || $number < 1) {\n    echo(\"Number is out of range\");\n\
    } else {\n    echo(\"Result: \" . int_to_mini_roman($number));\n}\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Input a number:\nNumber is out of range\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmph1jo0u1q.php:50\nStack trace:\n#0 /tmp/tmph1jo0u1q.php(66):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmph1jo0u1q.php on line 50\n"
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $equivalences = array(\n    \"M\" => 1000,\n    \"CM\" => 900,\n    \"\
    D\" => 500,\n    \"CD\" => 400,\n    \"C\" => 100,\n    \"XC\" => 90,\n    \"\
    L\" => 50,\n    \"XL\" => 40,\n    \"X\" => 10,\n    \"IX\" => 9,\n    \"V\" =>\
    \ 5,\n    \"IV\" => 4,\n    \"I\" => 1\n  );\n  $result = \"\";\n  foreach ($equivalences\
    \ as $equiv => $value) {\n    while ($number >= $value) {\n      $result .= $equiv;\n\
    \      $number -= $value;\n    }\n  }\n  return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn5z0ow4t.php:42\n\
    Stack trace:\n#0 /tmp/tmpn5z0ow4t.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpn5z0ow4t.php\
    \ on line 42\n"
  timestamp: 1660029131
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    if ($number >= 4000 || $number <= 0) {\n        return \"ERROR\";\n \
    \   }\n    $number = strval($number);\n    $romans = array(\n        \"1\" =>\
    \ \"i\",\n        \"2\" => \"ii\",\n        \"3\" => \"iii\",\n        \"4\" =>\
    \ \"iv\",\n        \"5\" => \"v\",\n        \"6\" => \"vi\",\n        \"7\" =>\
    \ \"vii\",\n        \"8\" => \"viii\",\n        \"9\" => \"ix\",\n        \"10\"\
    \ => \"x\",\n        \"20\" => \"xx\",\n        \"30\" => \"xxx\",\n        \"\
    40\" => \"xl\",\n        \"50\" => \"l\",\n        \"60\" => \"lx\",\n       \
    \ \"70\" => \"lxx\",\n        \"80\" => \"lxxx\",\n        \"90\" => \"xc\",\n\
    \        \"100\" => \"c\",\n        \"200\" => \"cc\",\n        \"300\" => \"\
    ccc\",\n        \"400\" => \"cd\",\n        \"500\" => \"d\",\n        \"600\"\
    \ => \"dc\",\n        \"700\" => \"dcc\",\n        \"800\" => \"dccc\",\n    \
    \    \"900\" => \"cm\",\n        \"1000\" => \"m\",\n        \"2000\" => \"mm\"\
    ,\n        \"3000\" => \"mmm\"\n    );\n    $positions = array(1, 10, 100, 1000);\n\
    \    $roman = \"\";\n    for ($i = 0; $i < strlen($number); $i++) {\n        $roman\
    \ .= $romans[$number[$i] . str_repeat(\"0\", (strlen($number) - $i - 1))];\n \
    \   }\n    return $roman;\n}\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Warning: Undefined array key "00" in /tmp/tmpo9x62_v0.php on line 52


    Warning: Undefined array key 0 in /tmp/tmpo9x62_v0.php on line 52


    Warning: Undefined array key 0 in /tmp/tmpo9x62_v0.php on line 52


    Warning: Undefined array key "00" in /tmp/tmpo9x62_v0.php on line 52


    Warning: Undefined array key 0 in /tmp/tmpo9x62_v0.php on line 52


    Warning: Undefined array key "000" in /tmp/tmpo9x62_v0.php on line 52


    Warning: Undefined array key "00" in /tmp/tmpo9x62_v0.php on line 52


    Warning: Undefined array key 0 in /tmp/tmpo9x62_v0.php on line 52

    '
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $answer = \"\";\n    $numerals = array(\n        array(1, \"i\"),\n \
    \       array(5, \"v\"),\n        array(10, \"x\"),\n        array(50, \"l\"),\n\
    \        array(100, \"c\"),\n        array(500, \"d\"),\n        array(1000, \"\
    m\")\n    );\n    while ($number > 0) {\n        $temp_number = $number;\n   \
    \     $i = count($numerals) - 1;\n        while ($i >= 0) {\n            if ($temp_number\
    \ >= $numerals[$i][0]) {\n                $temp_number -= $numerals[$i][0];\n\
    \                $answer .= $numerals[$i][1];\n            } else {\n        \
    \        $i--;\n            }\n        }\n        $number = $temp_number;\n  \
    \  }\n    return $answer;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpejrg9l7j.php:44\n\
    Stack trace:\n#0 /tmp/tmpejrg9l7j.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpejrg9l7j.php\
    \ on line 44\n"
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $numeral = '';\n    $conversion = array(\n        'M' => 1000,\n    \
    \    'D' => 500,\n        'C' => 100,\n        'L' => 50,\n        'X' => 10,\n\
    \        'V' => 5,\n        'I' => 1\n    );\n    foreach ($conversion as $key\
    \ => $value) {\n        while ($number >= $value) {\n            $numeral .= $key;\n\
    \            $number -= $value;\n        }\n    }\n    return $numeral;\n}\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprxp4anp6.php:36\n\
    Stack trace:\n#0 /tmp/tmprxp4anp6.php(52): test()\n#1 {main}\n  thrown in /tmp/tmprxp4anp6.php\
    \ on line 36\n"
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $conv_array = [\"0\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"\
    vii\", \"viii\", \"ix\"];\n  $len = strlen($number);\n  $mini_roman = \"\";\n\
    \  for ($i = 0; $i < $len; $i++) {\n    $mini_roman .= $conv_array[$number[$i]];\n\
    \  }\n  return $mini_roman;\n}\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Trying to access array offset on value of type int in /tmp/tmprvhal71i.php\
    \ on line 17\n\nWarning: Undefined array key \"\" in /tmp/tmprvhal71i.php on line\
    \ 17\n\nWarning: Trying to access array offset on value of type int in /tmp/tmprvhal71i.php\
    \ on line 17\n\nWarning: Undefined array key \"\" in /tmp/tmprvhal71i.php on line\
    \ 17\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprvhal71i.php:26\n\
    Stack trace:\n#0 /tmp/tmprvhal71i.php(42): test()\n#1 {main}\n  thrown in /tmp/tmprvhal71i.php\
    \ on line 26\n"
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = \"\";\n  $result = $number;\n  $thousands = [\"\", \"m\", \"mm\"\
    , \"mmm\"];\n  $hundreds = [\"\", \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\"\
    , \"dcc\", \"dccc\", \"cm\"];\n  $tens = [\"\", \"x\", \"xx\", \"xxx\", \"xl\"\
    , \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"];\n  $ones = [\"\", \"i\", \"ii\",\
    \ \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\"];\n  $tokens = [$thousands,\
    \ $hundreds, $tens, $ones];\n  for ($i = 0; $i < count($tokens); $i++) {\n   \
    \ $token = $tokens[$i];\n    $exponent = count($token) - 1;\n    $factor = pow(10,\
    \ $exponent);\n    $index = intval($result / $factor);\n    $result = $result\
    \ % $factor;\n    $roman .= $token[$index];\n  }\n  return $roman;\n}\n\necho\
    \ int_to_mini_roman(19) . PHP_EOL;\necho int_to_mini_roman(152) . PHP_EOL;\necho\
    \ int_to_mini_roman(426) . PHP_EOL;\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyyr_na_b.php:39\n\
    Stack trace:\n#0 /tmp/tmpyyr_na_b.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpyyr_na_b.php\
    \ on line 39\n"
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $conversion_dict = [\n    'M' => 1000,\n    'CM' => 900,\n    'D' => 500,\n\
    \    'CD' => 400,\n    'C' => 100,\n    'XC' => 90,\n    'L' => 50,\n    'XL'\
    \ => 40,\n    'X' => 10,\n    'IX' => 9,\n    'V' => 5,\n    'IV' => 4,\n    'I'\
    \ => 1\n  ];\n  $result = '';\n  foreach ($conversion_dict as $roman => $int)\
    \ {\n    while ($number >= $int) {\n      $result .= $roman;\n      $number -=\
    \ $int;\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8bprrjo_.php:43\n\
    Stack trace:\n#0 /tmp/tmp8bprrjo_.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp8bprrjo_.php\
    \ on line 43\n"
  timestamp: 1660029131
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman_numeral = \"\";\n  $numerals = [\n    \"m\" => 1000,\n    \"cm\"\
    \ => 900,\n    \"d\" => 500,\n    \"cd\" => 400,\n    \"c\" => 100,\n    \"xc\"\
    \ => 90,\n    \"l\" => 50,\n    \"xl\" => 40,\n    \"x\" => 10,\n    \"ix\" =>\
    \ 9,\n    \"v\" => 5,\n    \"iv\" => 4,\n    \"i\" => 1\n  ];\n  foreach ($numerals\
    \ as $numeral => $value) {\n    $roman_numeral .= str_repeat($numeral, (int)($number\
    \ / $value));\n    $number %= $value;\n  }\n  return $roman_numeral;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029131
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n\t$roman = '';\n\twhile ($number > 0) {\n\t\tif ($number >= 1000) {\n\t\t\
    \t$roman .= 'm';\n\t\t\t$number -= 1000;\n\t\t} elseif ($number >= 900) {\n\t\t\
    \t$roman .= 'cm';\n\t\t\t$number -= 900;\n\t\t} elseif ($number >= 500) {\n\t\t\
    \t$roman .= 'd';\n\t\t\t$number -= 500;\n\t\t} elseif ($number >= 400) {\n\t\t\
    \t$roman .= 'cd';\n\t\t\t$number -= 400;\n\t\t} elseif ($number >= 100) {\n\t\t\
    \t$roman .= 'c';\n\t\t\t$number -= 100;\n\t\t} elseif ($number >= 90) {\n\t\t\t\
    $roman .= 'xc';\n\t\t\t$number -= 90;\n\t\t} elseif ($number >= 50) {\n\t\t\t\
    $roman .= 'l';\n\t\t\t$number -= 50;\n\t\t} elseif ($number >= 40) {\n\t\t\t$roman\
    \ .= 'xl';\n\t\t\t$number -= 40;\n\t\t} elseif ($number >= 10) {\n\t\t\t$roman\
    \ .= 'x';\n\t\t\t$number -= 10;\n\t\t} elseif ($number >= 9) {\n\t\t\t$roman .=\
    \ 'ix';\n\t\t\t$number -= 9;\n\t\t} elseif ($number >= 5) {\n\t\t\t$roman .= 'v';\n\
    \t\t\t$number -= 5;\n\t\t} elseif ($number >= 4) {\n\t\t\t$roman .= 'iv';\n\t\t\
    \t$number -= 4;\n\t\t} elseif ($number >= 1) {\n\t\t\t$roman .= 'i';\n\t\t\t$number\
    \ -= 1;\n\t\t}\n\t}\n\treturn $roman;\n}\nfunction candidate(...$args) {\n   \
    \ return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029131
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    if ($number >= 1000) {\n        return 'm'.int_to_mini_roman($number\
    \ - 1000);\n    }\n    if ($number >= 900) {\n        return 'cm'.int_to_mini_roman($number\
    \ - 900);\n    }\n    if ($number >= 500) {\n        return 'd'.int_to_mini_roman($number\
    \ - 500);\n    }\n    if ($number >= 400) {\n        return 'cd'.int_to_mini_roman($number\
    \ - 400);\n    }\n    if ($number >= 100) {\n        return 'c'.int_to_mini_roman($number\
    \ - 100);\n    }\n    if ($number >= 90) {\n        return 'xc'.int_to_mini_roman($number\
    \ - 90);\n    }\n    if ($number >= 50) {\n        return 'l'.int_to_mini_roman($number\
    \ - 50);\n    }\n    if ($number >= 40) {\n        return 'xl'.int_to_mini_roman($number\
    \ - 40);\n    }\n    if ($number >= 10) {\n        return 'x'.int_to_mini_roman($number\
    \ - 10);\n    }\n    if ($number >= 9) {\n        return 'ix'.int_to_mini_roman($number\
    \ - 9);\n    }\n    if ($number >= 5) {\n        return 'v'.int_to_mini_roman($number\
    \ - 5);\n    }\n    if ($number >= 4) {\n        return 'iv'.int_to_mini_roman($number\
    \ - 4);\n    }\n    if ($number >= 1) {\n        return 'i'.int_to_mini_roman($number\
    \ - 1);\n    }\n    return '';\n}\n$number = 546;\n$result = int_to_mini_roman($number);\n\
    echo \">>> int_to_mini_roman($number)\";\necho \"<br>\";\necho \"\\\"$result\\\
    \"\";\necho \"<br>\";\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '>>> int_to_mini_roman(546)<br>"dxlvi"<br>'
  timestamp: 1660029131
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $map = array(\n        1000 => 'm',\n        900 => 'cm',\n        500\
    \ => 'd',\n        400 => 'cd',\n        100 => 'c',\n        90 => 'xc',\n  \
    \      50 => 'l',\n        40 => 'xl',\n        10 => 'x',\n        9 => 'ix',\n\
    \        5 => 'v',\n        4 => 'iv',\n        1 => 'i',\n    );\n    $roman\
    \ = '';\n    while ($number > 0) {\n        foreach ($map as $limit => $glyph)\
    \ {\n            if ($number >= $limit) {\n                $roman .= $glyph;\n\
    \                $number -= $limit;\n                break;\n            }\n \
    \       }\n    }\n    return $roman;\n}\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $romanMap = [\n        'm' => 1000,\n        'd' => 500,\n        'c'\
    \ => 100,\n        'l' => 50,\n        'x' => 10,\n        'v' => 5,\n       \
    \ 'i' => 1\n    ];\n    $output = '';\n    foreach ($romanMap as $char => $roman)\
    \ {\n        $output .= str_repeat($char, $number / $roman);\n        $number\
    \ %= $roman;\n    }\n    return $output;\n}\n\n$cases = [\n    [19, 'xix'],\n\
    \    [152, 'clii'],\n    [426, 'cdxxvi'],\n    [9, 'ix'],\n    [4, 'iv'],\n  \
    \  [8, 'viii'],\n    [49, 'xlix'],\n    [99, 'xcix'],\n    [499, 'cdxcix'],\n\
    \    [999, 'cmxcix'],\n    [12, 'xii'],\n    [13, 'xiii'],\n    [56, 'lvi'],\n\
    \    [98, 'xcviii'],\n    [96, 'xcvi'],\n    [24, 'xxiv'],\n    [36, 'xxxvi'],\n\
    \    [114, 'cxiv'],\n    [234, 'ccxxxiv'],\n    [15, 'xv'],\n    [102, 'cii'],\n\
    \    [110, 'cx'],\n    [120, 'cxx'],\n    [150, 'cl'],\n    [211, 'ccxi'],\n \
    \   [222, 'ccxxii'],\n    [244, 'ccxliv'],\n    [300, 'ccc'],\n    [310, 'cccx'],\n\
    \    [455, 'cdlv'],\n    [463, 'cdlxiii'],\n    [498, 'cdxcviii'],\n    [600,\
    \ 'dc'],\n    [700, 'dcc'],\n    [803, 'dccciii'],\n    [872, 'dccclxxii'],\n\
    \    [901,\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp_u_7zsok.php on line 68

    '
  timestamp: 1660029131
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $romans = [\n    'm' => 1000,\n    'cm' => 900,\n    'd' => 500,\n    'cd'\
    \ => 400,\n    'c' => 100,\n    'xc' => 90,\n    'l' => 50,\n    'xl' => 40,\n\
    \    'x' => 10,\n    'ix' => 9,\n    'v' => 5,\n    'iv' => 4,\n    'i' => 1\n\
    \  ];\n  $result = '';\n  foreach ($romans as $roman => $int) {\n    $matches\
    \ = intdiv($number, $int);\n    $result .= str_repeat($roman, $matches);\n   \
    \ $number = $number % $int;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n\t$roman = '';\n\twhile ($number >= 10) {\n\t\t$roman .= 'x';\n\t\t$number\
    \ -= 10;\n\t}\n\twhile ($number >= 9) {\n\t\t$roman .= 'ix';\n\t\t$number -= 9;\n\
    \t}\n\twhile ($number >= 5) {\n\t\t$roman .= 'v';\n\t\t$number -= 5;\n\t}\n\t\
    while ($number >= 4) {\n\t\t$roman .= 'iv';\n\t\t$number -= 4;\n\t}\n\twhile ($number\
    \ >= 1) {\n\t\t$roman .= 'i';\n\t\t$number -= 1;\n\t}\n\treturn $roman;\n}\n\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqnv4x65e.php:43\n\
    Stack trace:\n#0 /tmp/tmpqnv4x65e.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpqnv4x65e.php\
    \ on line 43\n"
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n\t$result = \"\";\n\t$symbols = array(\"m\" => 1000, \"d\" => 500, \"c\"\
    \ => 100, \"l\" => 50, \"x\" => 10, \"v\" => 5, \"i\" => 1);\n\t$symbols_after\
    \ = array(\"dcm\" => 900, \"cm\" => 900, \"cd\" => 400, \"xc\" => 90, \"lx\" =>\
    \ 40, \"ix\" => 9, \"iv\" => 4);\n\t$symbols_before = array(\"xl\" => 40, \"xc\"\
    \ => 90, \"cd\" => 400, \"cm\" => 900);\n\t$symbols_before = array_merge($symbols_before,\
    \ $symbols_after);\n\t$symbols_after = array_reverse($symbols_after);\n\tforeach\
    \ ($symbols as $key => $value) {\n\t\t$result .= substr($key, 0, $number / $value);\n\
    \t\t$number %= $value;\n\t}\n\tforeach ($symbols_after as $key => $value) {\n\t\
    \t$result = str_replace($key, $value, $result);\n\t}\n\tforeach ($symbols_before\
    \ as $key => $value) {\n\t\t$result = str_replace($key, $value, $result);\n\t\
    }\n\treturn $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nDeprecated: Implicit conversion from float 0.019 to int loses precision\
    \ in /tmp/tmptduc1hz9.php on line 20\n\nDeprecated: Implicit conversion from float\
    \ 0.038 to int loses precision in /tmp/tmptduc1hz9.php on line 20\n\nDeprecated:\
    \ Implicit conversion from float 0.19 to int loses precision in /tmp/tmptduc1hz9.php\
    \ on line 20\n\nDeprecated: Implicit conversion from float 0.38 to int loses precision\
    \ in /tmp/tmptduc1hz9.php on line 20\n\nDeprecated: Implicit conversion from float\
    \ 1.9 to int loses precision in /tmp/tmptduc1hz9.php on line 20\n\nDeprecated:\
    \ Implicit conversion from float 1.8 to int loses precision in /tmp/tmptduc1hz9.php\
    \ on line 20\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptduc1hz9.php:37\n\
    Stack trace:\n#0 /tmp/tmptduc1hz9.php(53): test()\n#1 {main}\n  thrown in /tmp/tmptduc1hz9.php\
    \ on line 37\n"
  timestamp: 1660029131
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $romans = array(\n        \"i\" => 1,\n        \"iv\" => 4,\n       \
    \ \"v\" => 5,\n        \"ix\" => 9,\n        \"x\" => 10,\n        \"xl\" => 40,\n\
    \        \"l\" => 50,\n        \"xc\" => 90,\n        \"c\" => 100,\n        \"\
    cd\" => 400,\n        \"d\" => 500,\n        \"cm\" => 900,\n        \"m\" =>\
    \ 1000,\n    );\n    // assign the roman numerals from highest to lowest\n   \
    \ $numerals = array_reverse(array_keys($romans));\n    $result = \"\";\n    $remainder\
    \ = $number;\n    // divide $number until $remainder is 0\n    while ($remainder\
    \ > 0) {\n        foreach ($numerals as $numeral) {\n            // if the current\
    \ roman numeral is less than the remainder, then...\n            if ($romans[$numeral]\
    \ <= $remainder) {\n                // add the roman numeral to the result\n \
    \               $result .= $numeral;\n                // subtract the value of\
    \ the roman numeral from the remainder\n                $remainder -= $romans[$numeral];\n\
    \                // stop searching through the array of roman numerals\n     \
    \           break;\n            }\n        }\n    }\n    return $result;\n}\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $mini_roman_vals = array(\n    'm' => 1000,\n    'd' => 500,\n    'c' =>\
    \ 100,\n    'l' => 50,\n    'x' => 10,\n    'v' => 5,\n    'i' => 1,\n  );\n \
    \ $roman_numeral = '';\n  foreach ($mini_roman_vals as $key => $val) {\n    while\
    \ ($number >= $val) {\n      $roman_numeral .= $key;\n      $number -= $val;\n\
    \    }\n  }\n  return $roman_numeral;\n}\nfunction candidate(...$args) {\n   \
    \ return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyp8j_38_.php:36\n\
    Stack trace:\n#0 /tmp/tmpyp8j_38_.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpyp8j_38_.php\
    \ on line 36\n"
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $digits = str_split($number);\n  $digits_len = count($digits);\n  $result\
    \ = '';\n  $i = 0;\n  while ($i < $digits_len) {\n    $result .= mini_roman_ones($digits[$i]);\n\
    \    $i++;\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mini_roman_ones()\
    \ in /tmp/tmpen9h6wy4.php:18\nStack trace:\n#0 /tmp/tmpen9h6wy4.php(25): int_to_mini_roman(19)\n\
    #1 /tmp/tmpen9h6wy4.php(29): candidate(19)\n#2 /tmp/tmpen9h6wy4.php(45): test()\n\
    #3 {main}\n  thrown in /tmp/tmpen9h6wy4.php on line 18\n"
  timestamp: 1660029131
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $numbers = [1000, 900, 500, 400, 100, 90, 50, 40,\
    \ 10, 9, 5, 4, 1];\n    $symbols = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl',\
    \ 'x', 'ix', 'v', 'iv', 'i'];\n    for ($i = 0; $i < count($numbers); $i++) {\n\
    \        while ($number >= $numbers[$i]) {\n            $result .= $symbols[$i];\n\
    \            $number -= $numbers[$i];\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $numerals = array('m' => 1000, 'd' => 500, 'c' => 100, 'l' => 50, 'x' =>\
    \ 10, 'v' => 5, 'i' => 1);\n  $result = '';\n  foreach ($numerals as $numeral\
    \ => $value) {\n    while ($number >= $value) {\n      $result .= $numeral;\n\
    \      $number -= $value;\n    }\n  }\n  return $result;\n}\n\necho int_to_mini_roman(19);\n\
    echo \"\\n\";\necho int_to_mini_roman(152);\necho \"\\n\";\necho int_to_mini_roman(426);\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "xviiii\nclii\nccccxxvi\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp_qkj9t44.php:35\nStack trace:\n#0 /tmp/tmp_qkj9t44.php(51): test()\n\
    #1 {main}\n  thrown in /tmp/tmp_qkj9t44.php on line 35\n"
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $result = \"\";\n  $nums = array(\n      \"M\" => 1000,\n      \"CM\" =>\
    \ 900,\n      \"D\" => 500,\n      \"CD\" => 400,\n      \"C\" => 100,\n     \
    \ \"XC\" => 90,\n      \"L\" => 50,\n      \"XL\" => 40,\n      \"X\" => 10,\n\
    \      \"IX\" => 9,\n      \"V\" => 5,\n      \"IV\" => 4,\n      \"I\" => 1,\n\
    \  );\n  foreach ($nums as $rom => $dec) {\n    while ($number >= $dec) {\n  \
    \    $result .= $rom;\n      $number -= $dec;\n    }\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9sttnpeo.php:43\n\
    Stack trace:\n#0 /tmp/tmp9sttnpeo.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp9sttnpeo.php\
    \ on line 43\n"
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    // \u0421\u043B\u043E\u0432\u0430\u0440\u044C \u0441\u043E\u043E\u0442\
    \u0432\u0435\u0442\u0441\u0442\u0432\u0438\u044F \u043E\u0441\u043D\u043E\u0432\
    \u043D\u044B\u0445 \u0447\u0438\u0441\u0435\u043B \u0440\u0438\u043C\u0441\u043A\
    \u0438\u043C\n    $numeral = array(\n        1 => 'i', 4 => 'iv', 5 => 'v', 9\
    \ => 'ix',\n        10 => 'x', 40 => 'xl', 50 => 'l', 90 => 'xc',\n        100\
    \ => 'c', 400 => 'cd', 500 => 'd', 900 => 'cm',\n        1000 => 'm'\n    );\n\
    \    // \u0414\u0435\u043B\u0438\u043C \u0447\u0438\u0441\u043B\u043E \u043D\u0430\
    \ \u0434\u0435\u0441\u044F\u0442\u043A\u0438 \u0441 \u043F\u043E\u043C\u043E\u0449\
    \u044C\u044E \u0446\u0438\u043A\u043B\u0430\n    $return = '';\n    foreach ($numeral\
    \ as $key => $value) {\n        while ($number >= $key) {\n            $return\
    \ .= $value;\n            $number -= $key;\n        }\n    }\n    return $return;\n\
    }\n\necho int_to_mini_roman(152);\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpy0jz0ibc.php:37\nStack\
    \ trace:\n#0 /tmp/tmpy0jz0ibc.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpy0jz0ibc.php\
    \ on line 37\n"
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  // write your code here ...\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8adb11cw.php:21\n\
    Stack trace:\n#0 /tmp/tmp8adb11cw.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp8adb11cw.php\
    \ on line 21\n"
  timestamp: 1660029131
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $roman_numerals = [\n        \"M\" => 1000,\n        \"D\" => 500,\n\
    \        \"C\" => 100,\n        \"L\" => 50,\n        \"X\" => 10,\n        \"\
    V\" => 5,\n        \"I\" => 1\n    ];\n    $result = \"\";\n    foreach ($roman_numerals\
    \ as $roman => $arabic) {\n        $result .= str_repeat($roman, (int) ($number\
    \ / $arabic));\n        $number %= $arabic;\n    }\n    $result = str_replace(\"\
    DCCCC\", \"CM\", $result);\n    $result = str_replace(\"CCCC\", \"CD\", $result);\n\
    \    $result = str_replace(\"LXXXX\", \"XC\", $result);\n    $result = str_replace(\"\
    XXXX\", \"XL\", $result);\n    $result = str_replace(\"VIIII\", \"IX\", $result);\n\
    \    $result = str_replace(\"IIII\", \"IV\", $result);\n    return strtolower($result);\n\
    }\n\necho int_to_mini_roman(19);\necho \"<br>\";\necho int_to_mini_roman(152);\n\
    echo \"<br>\";\necho int_to_mini_roman(426);\nfunction candidate(...$args) {\n\
    \    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: xix<br>clii<br>cdxxvi
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $romans = [\n        'c' => 100,\n        'xc' => 90,\n\
    \        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n        'ix' =>\
    \ 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1\n    ];\n    foreach\
    \ ($romans as $romanSymbol => $romanValue) {\n        while ($number >= $romanValue)\
    \ {\n            $roman .= $romanSymbol;\n            $number -= $romanValue;\n\
    \        }\n    }\n    return $roman;\n}\n\nfunction candidate(...$args) {\n \
    \   return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3b0tyj1g.php:42\n\
    Stack trace:\n#0 /tmp/tmp3b0tyj1g.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp3b0tyj1g.php\
    \ on line 42\n"
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $result = \"\";\n  // Loop through the array of Roman numeral representations\
    \ of numbers.\n  foreach (array(\n    // Numerals with a value of less than 100.\n\
    \    array(90, \"x\", \"c\"),\n    array(50, \"l\"),\n    array(40, \"x\", \"\
    l\"),\n    array(10, \"x\"),\n    array(9, \"i\", \"x\"),\n    array(5, \"v\"\
    ),\n    array(4, \"i\", \"v\"),\n    array(1, \"i\"),\n    // Numerals with a\
    \ value of at least 100.\n    array(400, \"c\", \"d\"),\n    array(100, \"c\"\
    ),\n    array(90, \"x\", \"c\"),\n    array(50, \"l\"),\n    array(40, \"x\",\
    \ \"l\"),\n    array(10, \"x\"),\n    array(9, \"i\", \"x\"),\n    array(5, \"\
    v\"),\n    array(4, \"i\", \"v\"),\n    array(1, \"i\")\n  ) as $pair) {\n   \
    \ // If the number is greater than or equal to the first element of the\n    //\
    \ current pair, add the second element of the pair to the string.\n    if ($number\
    \ >= $pair[0]) {\n      $result .= $pair[1];\n      // Decrement the number by\
    \ the value of the current pair's first element.\n      $number -= $pair[0];\n\
    \      // If there is a third element in the pair, add it to the string.\n   \
    \   if (array_key_exists(2, $pair)) {\n        $result .= $pair[2];\n      }\n\
    \    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0fkuzmxv.php:58\n\
    Stack trace:\n#0 /tmp/tmp0fkuzmxv.php(73): test()\n#1 {main}\n  thrown in /tmp/tmp0fkuzmxv.php\
    \ on line 58\n"
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n\t$numeral_array = array(\n\t\t'M'=>1000,\n\t\t'CM'=>900,\n\t\t'D'=>500,\n\
    \t\t'CD'=>400,\n\t\t'C'=>100,\n\t\t'XC'=>90,\n\t\t'L'=>50,\n\t\t'XL'=>40,\n\t\t\
    'X'=>10,\n\t\t'IX'=>9,\n\t\t'V'=>5,\n\t\t'IV'=>4,\n\t\t'I'=>1,\n\t);\n\t$numeral_string\
    \ = '';\n\tforeach ($numeral_array as $roman => $integer) {\n\t\t$matches = intval($number\
    \ / $integer);\n\t\t$numeral_string .= str_repeat($roman, $matches);\n\t\t$number\
    \ = $number % $integer;\n\t}\n\treturn $numeral_string;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppoak38a0.php:42\n\
    Stack trace:\n#0 /tmp/tmppoak38a0.php(58): test()\n#1 {main}\n  thrown in /tmp/tmppoak38a0.php\
    \ on line 42\n"
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $numerals = array(\n        'm' => 1000,\n        'd' => 500,\n     \
    \   'c' => 100,\n        'l' => 50,\n        'x' => 10,\n        'v' => 5,\n \
    \       'i' => 1\n    );\n    $roman = '';\n    while ($number > 0) {\n      \
    \  foreach ($numerals as $roman_char => $int_val) {\n            if ($number >=\
    \ $int_val) {\n                $number -= $int_val;\n                $roman .=\
    \ $roman_char;\n                break;\n            }\n        }\n    }\n    return\
    \ $roman;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_6ry6794.php:40\n\
    Stack trace:\n#0 /tmp/tmp_6ry6794.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp_6ry6794.php\
    \ on line 40\n"
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $result = '';\n  $remainder = $number;\n  $roman_map = array(\n    1000\
    \ => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n\
    \    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n\
    \    5 => 'v',\n    4 => 'iv',\n    1 => 'i',\n  );\n  while ($remainder > 0)\
    \ {\n    foreach ($roman_map as $num => $string) {\n      if ($remainder >= $num)\
    \ {\n        $result .= $string;\n        $remainder -= $num;\n        break;\n\
    \      }\n    }\n  }\n  return $result;\n}\n\n$test_cases = array(\n  1 => 'i',\n\
    \  19 => 'xix',\n  152 => 'clii',\n  426 => 'cdxxvi',\n  888 => 'dccclxxxviii',\n\
    \  3999 => 'mmmcmxcix',\n);\n\nforeach ($test_cases as $num => $expected) {\n\
    \  $result = int_to_mini_roman($num);\n  assert($result === $expected);\n}\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029131
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $map = [\n        [1000, 'm'],\n        [900, 'cm'],\n        [500, 'd'],\n\
    \        [400, 'cd'],\n        [100, 'c'],\n        [90, 'xc'],\n        [50,\
    \ 'l'],\n        [40, 'xl'],\n        [10, 'x'],\n        [9, 'ix'],\n       \
    \ [5, 'v'],\n        [4, 'iv'],\n        [1, 'i'],\n    ];\n    $result = '';\n\
    \    foreach ($map as $pair) {\n        while ($number >= $pair[0]) {\n      \
    \      $result .= $pair[1];\n            $number -= $pair[0];\n        }\n   \
    \ }\n    return $result;\n}\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  // Fill me in!\n}\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6e6d81wr.php:20\n\
    Stack trace:\n#0 /tmp/tmp6e6d81wr.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp6e6d81wr.php\
    \ on line 20\n"
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n\tif( $number >= 1000 ) return 'm';\n\tif( $number >= 900 ) return 'cm';\n\
    \tif( $number >= 500 ) return 'd';\n\tif( $number >= 400 ) return 'cd';\n\tif(\
    \ $number >= 100 ) return 'c';\n\tif( $number >= 90 ) return 'xc';\n\tif( $number\
    \ >= 50 ) return 'l';\n\tif( $number >= 40 ) return 'xl';\n\tif( $number >= 10\
    \ ) return 'x';\n\tif( $number >= 9 ) return 'ix';\n\tif( $number >= 5 ) return\
    \ 'v';\n\tif( $number >= 4 ) return 'iv';\n\tif( $number >= 1 ) return 'i';\n\t\
    return '';\n}\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1qyr3dc_.php:33\n\
    Stack trace:\n#0 /tmp/tmp1qyr3dc_.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp1qyr3dc_.php\
    \ on line 33\n"
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $result = \"\";\n    $values = [1000, 900, 500, 400, 100, 90, 50, 40,\
    \ 10, 9, 5, 4, 1];\n    $numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\"\
    , \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    $i = 0;\n    while\
    \ ($number != 0) {\n        while ($number >= $values[$i]) {\n            $number\
    \ -= $values[$i];\n            $result .= $numerals[$i];\n        }\n        $i++;\n\
    \    }\n    return $result;\n}\necho int_to_mini_roman(19);\necho \"\\n\";\necho\
    \ int_to_mini_roman(152);\necho \"\\n\";\necho int_to_mini_roman(426);\necho \"\
    \\n\";\necho int_to_mini_roman(12);\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'xix

    clii

    cdxxvi

    xii

    '
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $mini_roman = '';\n    $numeral_map = [\n        'M' => 1000,\n     \
    \   'CM' => 900,\n        'D' => 500,\n        'CD' => 400,\n        'C' => 100,\n\
    \        'XC' => 90,\n        'L' => 50,\n        'XL' => 40,\n        'X' =>\
    \ 10,\n        'IX' => 9,\n        'V' => 5,\n        'IV' => 4,\n        'I'\
    \ => 1\n    ];\n    foreach ($numeral_map as $numeral => $int) {\n        if ($number\
    \ >= $int) {\n            $mini_roman .= str_repeat($numeral, floor($number /\
    \ $int));\n            $number %= $int;\n        }\n    }\n    return $mini_roman;\n\
    }\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsj5afh0a.php:42\n\
    Stack trace:\n#0 /tmp/tmpsj5afh0a.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpsj5afh0a.php\
    \ on line 42\n"
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $map = [\n    'M'  => 1000,\n    'CM' => 900,\n    'D'  => 500,\n    'CD'\
    \ => 400,\n    'C'  => 100,\n    'XC' => 90,\n    'L'  => 50,\n    'XL' => 40,\n\
    \    'X'  => 10,\n    'IX' => 9,\n    'V'  => 5,\n    'IV' => 4,\n    'I'  =>\
    \ 1\n  ];\n  $result = '';\n  foreach ($map as $roman => $int) {\n    $matches\
    \ = intval($number / $int);\n    $result .= str_repeat($roman, $matches);\n  \
    \  $number = $number % $int;\n  }\n  return $result;\n}\n\n$output = int_to_mini_roman(19);\n\
    print($output . \"\\n\");\n\n$output = int_to_mini_roman(152);\nprint($output\
    \ . \"\\n\");\n\n$output = int_to_mini_roman(426);\nprint($output . \"\\n\");\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "XIX\nCLII\nCDXXVI\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdjae9_bu.php:50\n\
    Stack trace:\n#0 /tmp/tmpdjae9_bu.php(66): test()\n#1 {main}\n  thrown in /tmp/tmpdjae9_bu.php\
    \ on line 50\n"
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $result = \"\";\n  $map = array(\n    'M' => 1000,\n    'D' => 500,\n \
    \   'C' => 100,\n    'L' => 50,\n    'X' => 10,\n    'V' => 5,\n    'I' => 1\n\
    \  );\n  foreach ($map as $roman => $int) {\n    $matches = intval($number / $int);\n\
    \    $result .= str_repeat($roman, $matches);\n    $number = $number % $int;\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo4q21pq4.php:36\n\
    Stack trace:\n#0 /tmp/tmpo4q21pq4.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpo4q21pq4.php\
    \ on line 36\n"
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n\t// Hint: PHP has a function called number_format, and\n\t// an array called\
    \ $GLOBALS['mini_roman_numeral_map']\n\t// that you can use in your solution.\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps8hqdkih.php:23\n\
    Stack trace:\n#0 /tmp/tmps8hqdkih.php(39): test()\n#1 {main}\n  thrown in /tmp/tmps8hqdkih.php\
    \ on line 23\n"
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n\t$result = \"\";\n\tif($number <= 1000 && $number >= 1) {\n\t\t$exponent\
    \ = floor(log($number, 10));\n\t\t$base_exponent = $exponent;\n\t\t$base_number\
    \ = $number;\n\t\twhile($exponent >= 0) {\n\t\t\t$base = pow(10, $exponent);\n\
    \t\t\t$chunk = floor($number / $base);\n\t\t\t$number = $number % $base;\n\t\t\
    \tif($chunk == 0) {\n\t\t\t\t$exponent--;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\
    if($chunk < 4) {\n\t\t\t\t$result .= str_repeat(get_roman_numeral_from_exponent($exponent),\
    \ $chunk);\n\t\t\t} else if($chunk == 4) {\n\t\t\t\t$result .= get_roman_numeral_from_exponent($exponent)\
    \ . get_roman_numeral_from_exponent($exponent + 1);\n\t\t\t} else if($chunk >\
    \ 4 && $chunk < 9) {\n\t\t\t\t$result .= get_roman_numeral_from_exponent($exponent\
    \ + 1) . str_repeat(get_roman_numeral_from_exponent($exponent), $chunk - 5);\n\
    \t\t\t} else if($chunk == 9) {\n\t\t\t\t$result .= get_roman_numeral_from_exponent($exponent)\
    \ . get_roman_numeral_from_exponent($exponent + 2);\n\t\t\t}\n\t\t\t$exponent--;\n\
    \t\t}\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_roman_numeral_from_exponent()\
    \ in /tmp/tmp6qbf8e9m.php:27\nStack trace:\n#0 /tmp/tmp6qbf8e9m.php(42): int_to_mini_roman(9)\n\
    #1 /tmp/tmp6qbf8e9m.php(46): candidate(19)\n#2 /tmp/tmp6qbf8e9m.php(62): test()\n\
    #3 {main}\n  thrown in /tmp/tmp6qbf8e9m.php on line 27\n"
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $romanNumbers = array(100 => 'c', 90 => 'xc', 50 => 'l', 40 => 'xl',\
    \ 10 => 'x', 9 => 'ix', 5 => 'v', 4 => 'iv', 1 => 'i');\n    $str = '';\n    while\
    \ ($number > 0) {\n        foreach ($romanNumbers as $int => $roman) {\n     \
    \       if ($number >= $int) {\n                $number -= $int;\n           \
    \     $str .= $roman;\n                break;\n            }\n        }\n    }\n\
    \    return $str;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoi7274md.php:35\n\
    Stack trace:\n#0 /tmp/tmpoi7274md.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpoi7274md.php\
    \ on line 35\n"
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $numerals = array(\n        'M'  => 1000,\n      \
    \  'CM' => 900,\n        'D'  => 500,\n        'CD' => 400,\n        'C'  => 100,\n\
    \        'XC' => 90,\n        'L'  => 50,\n        'XL' => 40,\n        'X'  =>\
    \ 10,\n        'IX' => 9,\n        'V'  => 5,\n        'IV' => 4,\n        'I'\
    \  => 1,\n    );\n    foreach ($numerals as $numeral => $value) {\n        $result\
    \ .= str_repeat($numeral, floor($number / $value));\n        $number %= $value;\n\
    \    }\n    return $result;\n}\n\necho int_to_mini_roman(19);\necho \"\\n\";\n\
    echo int_to_mini_roman(152);\necho \"\\n\";\necho int_to_mini_roman(426);\necho\
    \ \"\\n\";\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "XIX\nCLII\nCDXXVI\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkzeyfvuf.php:47\n\
    Stack trace:\n#0 /tmp/tmpkzeyfvuf.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpkzeyfvuf.php\
    \ on line 47\n"
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n\t// Write your code here\n\t// To print results to the standard output you\
    \ can use print\n\t// Example: print \"Hello world!\";\n\t// print $number;\n\
    }\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_h87kiq0.php:23\n\
    Stack trace:\n#0 /tmp/tmp_h87kiq0.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp_h87kiq0.php\
    \ on line 23\n"
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $mini_roman = '';\n    $map = [\n        'M'  => 1000,\n        'CM'\
    \ => 900,\n        'D'  => 500,\n        'CD' => 400,\n        'C'  => 100,\n\
    \        'XC' => 90,\n        'L'  => 50,\n        'XL' => 40,\n        'X'  =>\
    \ 10,\n        'IX' => 9,\n        'V'  => 5,\n        'IV' => 4,\n        'I'\
    \  => 1\n    ];\n    while ($number > 0) {\n        foreach ($map as $key => $value)\
    \ {\n            if ($number >= $value) {\n                $number -= $value;\n\
    \                $mini_roman .= $key;\n                break;\n            }\n\
    \        }\n    }\n    return $mini_roman;\n}\nfunction candidate(...$args) {\n\
    \    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgslu8ktz.php:45\n\
    Stack trace:\n#0 /tmp/tmpgslu8ktz.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpgslu8ktz.php\
    \ on line 45\n"
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n\t$roman_numerals = [\n\t\t['m', 1000], ['cm', 900], ['d', 500], ['cd', 400],\n\
    \t\t['c', 100], ['xc', 90], ['l', 50], ['xl', 40],\n\t\t['x', 10], ['ix', 9],\
    \ ['v', 5], ['iv', 4],\n\t\t['i', 1]\n\t];\n\t$result = '';\n\tforeach ($roman_numerals\
    \ as $numeral) {\n\t\twhile ($number >= $numeral[1]) {\n\t\t\t$result .= $numeral[0];\n\
    \t\t\t$number -= $numeral[1];\n\t\t}\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n\t$romans = array(\n\t\t1 => 'i',\n\t\t4 => 'iv',\n\t\t5 => 'v',\n\t\t9 =>\
    \ 'ix',\n\t\t10 => 'x',\n\t\t40 => 'xl',\n\t\t50 => 'l',\n\t\t90 => 'xc',\n\t\t\
    100 => 'c',\n\t\t400 => 'cd',\n\t\t500 => 'd',\n\t\t900 => 'cm',\n\t\t1000 =>\
    \ 'm'\n\t);\n\t$result = \"\";\n\twhile ($number > 0) {\n\t\t$max = max(array_keys($romans));\n\
    \t\tif ($number >= $max) {\n\t\t\t$result .= $romans[$max];\n\t\t\t$number -=\
    \ $max;\n\t\t} else {\n\t\t\twhile ($max > $number) {\n\t\t\t\t$max /= 10;\n\t\
    \t\t}\n\t\t\t$result .= $romans[$max];\n\t\t\t$number -= $max;\n\t\t}\n\t}\n\t\
    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp25j6xyn4.php:50\n\
    Stack trace:\n#0 /tmp/tmp25j6xyn4.php(66): test()\n#1 {main}\n  thrown in /tmp/tmp25j6xyn4.php\
    \ on line 50\n"
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    // We don't need to check for ints > 1000 because of the restriction\n\
    \    if (!is_int($number) || $number < 1) {\n        echo \"I only accept positive\
    \ integers up to 1000.\\n\";\n        return;\n    }\n    // Limit $number to\
    \ the correct range\n    $number = $number % 1001;\n    // We only need to break\
    \ apart the number into ones, tens, and hundreds\n    $ones = $number % 10;\n\
    \    $tens = (int)(($number % 100) / 10);\n    $hundreds = (int)($number / 100);\n\
    \    // Set up our array of roman numerals\n    $roman_digits = array(\n     \
    \   1 => \"i\",\n        2 => \"ii\",\n        3 => \"iii\",\n        4 => \"\
    iv\",\n        5 => \"v\",\n        6 => \"vi\",\n        7 => \"vii\",\n    \
    \    8 => \"viii\",\n        9 => \"ix\",\n        10 => \"x\",\n        20 =>\
    \ \"xx\",\n        30 => \"xxx\",\n        40 => \"xl\",\n        50 => \"l\"\
    ,\n        60 => \"lx\",\n        70 => \"lxx\",\n        80 => \"lxxx\",\n  \
    \      90 => \"xc\",\n        100 => \"c\",\n        200 => \"cc\",\n        300\
    \ => \"ccc\",\n        400 => \"cd\",\n        500 => \"d\",\n        600 => \"\
    dc\",\n        700 => \"dcc\",\n        800 => \"dccc\",\n        900 => \"cm\"\
    \n    );\n    // Build our return string\n    $return_string = \"\";\n    if ($hundreds)\
    \ {\n        $return_string .= $roman_digits[$hundreds * 100];\n    }\n    if\
    \ ($tens) {\n        $return_string .= $roman_digits[$tens * 10];\n    }\n   \
    \ if ($ones) {\n        $return_string .= $roman_digits[$ones];\n    }\n    return\
    \ $return_string;\n}\necho int_to_mini_roman(19) . \"\\n\";\necho int_to_mini_roman(152)\
    \ . \"\\n\";\necho int\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "," or ";" in
    /tmp/tmple8fyzo4.php on line 70

    '
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $roman_map = array(\n        '1000' => 'm',\n        '900' => 'cm',\n\
    \        '500' => 'd',\n        '400' => 'cd',\n        '100' => 'c',\n      \
    \  '90' => 'xc',\n        '50' => 'l',\n        '40' => 'xl',\n        '10' =>\
    \ 'x',\n        '9' => 'ix',\n        '5' => 'v',\n        '4' => 'iv',\n    \
    \    '1' => 'i'\n    );\n    $result = '';\n    foreach ($roman_map as $key =>\
    \ $val) {\n        $count = intval($number / $key);\n        $result .= str_repeat($val,\
    \ $count);\n        $number = $number % $key;\n    }\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    // Your code here\n}\n$int_to_mini_roman = function($number) {\n    $roman_numerals\
    \ = [\n        1 => 'i',\n        4 => 'iv',\n        5 => 'v',\n        9 =>\
    \ 'ix',\n        10 => 'x',\n        40 => 'xl',\n        50 => 'l',\n       \
    \ 90 => 'xc',\n        100 => 'c',\n        400 => 'cd',\n        500 => 'd',\n\
    \        900 => 'cm',\n        1000 => 'm'\n    ];\n    $roman_numerals = array_reverse($roman_numerals,\
    \ true);\n    $roman_numeral = '';\n    foreach ($roman_numerals as $arabic =>\
    \ $roman) {\n        while ($number >= $arabic) {\n            $roman_numeral\
    \ .= $roman;\n            $number -= $arabic;\n        }\n    }\n    return $roman_numeral;\n\
    };\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2rv5ldft.php:46\n\
    Stack trace:\n#0 /tmp/tmp2rv5ldft.php(62): test()\n#1 {main}\n  thrown in /tmp/tmp2rv5ldft.php\
    \ on line 46\n"
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $digits = array(\n    1    => 'i',\n    5    => 'v',\n\
    \    10   => 'x',\n    50   => 'l',\n    100  => 'c',\n    500  => 'd',\n    1000\
    \ => 'm'\n  );\n  while($number > 0) {\n    $last = substr($number, -1);\n   \
    \ $lastDigit = $last * pow(10, strlen($number) - 1);\n    if ($lastDigit >= 1000)\
    \ {\n      $roman .= $digits[1000];\n      $number -= 1000;\n    } elseif ($lastDigit\
    \ >= 500) {\n      $roman .= $digits[500];\n      $number -= 500;\n    } elseif\
    \ ($lastDigit >= 100) {\n      $roman .= $digits[100];\n      $number -= 100;\n\
    \    } elseif ($lastDigit >= 50) {\n      $roman .= $digits[50];\n      $number\
    \ -= 50;\n    } elseif ($lastDigit >= 10) {\n      $roman .= $digits[10];\n  \
    \    $number -= 10;\n    } elseif ($lastDigit >= 5) {\n      $roman .= $digits[5];\n\
    \      $number -= 5;\n    } elseif ($lastDigit >= 1) {\n      $roman .= $digits[1];\n\
    \      $number -= 1;\n    }\n  }\n  return $roman;\n}\n\n$fh = fopen($argv[1],\
    \ \"r\");\nwhile (!feof($fh)) {\n  $test = fgets($fh);\n  $answer = int_to_mini_roman($test);\n\
    \  echo $answer . PHP_EOL;\n}\nfclose($fh);\nexit(0);\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 1 in /tmp/tmpo0ryql5s.php on line 52\n\n\
    Deprecated: fopen(): Passing null to parameter #1 ($filename) of type string is\
    \ deprecated in /tmp/tmpo0ryql5s.php on line 52\n\nFatal error: Uncaught ValueError:\
    \ Path cannot be empty in /tmp/tmpo0ryql5s.php:52\nStack trace:\n#0 /tmp/tmpo0ryql5s.php(52):\
    \ fopen('', 'r')\n#1 {main}\n  thrown in /tmp/tmpo0ryql5s.php on line 52\n"
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $symbols = [\n    'm' => 1000,\n    'd' => 500,\n    'c' => 100,\n    'l'\
    \ => 50,\n    'x' => 10,\n    'v' => 5,\n    'i' => 1\n  ];\n  $roman_numerals\
    \ = '';\n  foreach ($symbols as $roman => $arabic) {\n    $matches = intval($number\
    \ / $arabic);\n    $roman_numerals .= str_repeat($roman, $matches);\n    $number\
    \ = $number % $arabic;\n  }\n  return $roman_numerals;\n}\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwckfx7no.php:35\n\
    Stack trace:\n#0 /tmp/tmpwckfx7no.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpwckfx7no.php\
    \ on line 35\n"
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  \n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9arbnsr1.php:21\n\
    Stack trace:\n#0 /tmp/tmp9arbnsr1.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp9arbnsr1.php\
    \ on line 21\n"
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpujewm3ah.php:20\n\
    Stack trace:\n#0 /tmp/tmpujewm3ah.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpujewm3ah.php\
    \ on line 20\n"
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $mini_romans = [\n        'm' => 1000,\n        'd' => 500,\n       \
    \ 'c' => 100,\n        'l' => 50,\n        'x' => 10,\n        'v' => 5,\n   \
    \     'i' => 1\n    ];\n    $roman = '';\n    foreach ($mini_romans as $mini_roman\
    \ => $value) {\n        while ($number >= $value) {\n            $roman .= $mini_roman;\n\
    \            $number -= $value;\n        }\n    }\n    return $roman;\n}\necho\
    \ int_to_mini_roman(152);\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "clii\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm_shqvzy.php:37\n\
    Stack trace:\n#0 /tmp/tmpm_shqvzy.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpm_shqvzy.php\
    \ on line 37\n"
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n    \
    \    'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc' => 90,\n\
    \        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n        'ix' =>\
    \ 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n    );\n    $result\
    \ = '';\n    foreach ($numerals as $numeral => $value) {\n        while ($number\
    \ >= $value) {\n            $result .= $numeral;\n            $number -= $value;\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $lookup = array('i' => 1, 'v' => 5, 'x' => 10, 'l' => 50, 'c' => 100,\
    \ 'd' => 500, 'm' => 1000);\n    $result = '';\n    while ($number > 0) {\n  \
    \      foreach ($lookup as $roman => $value) {\n            if ($number >= $value)\
    \ {\n                $number -= $value;\n                $result .= $roman;\n\
    \                break;\n            }\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphpfu6goj.php:32\n\
    Stack trace:\n#0 /tmp/tmphpfu6goj.php(48): test()\n#1 {main}\n  thrown in /tmp/tmphpfu6goj.php\
    \ on line 32\n"
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    // Define Roman Numerals\n    $roman_numerals = array(\n        1 =>\
    \ 'i',\n        4 => 'iv',\n        5 => 'v',\n        9 => 'ix',\n        10\
    \ => 'x',\n        40 => 'xl',\n        50 => 'l',\n        90 => 'xc',\n    \
    \    100 => 'c',\n        400 => 'cd',\n        500 => 'd',\n        900 => 'cm',\n\
    \        1000 => 'm'\n    );\n    $numerals = array_keys($roman_numerals);\n \
    \   // Sort numerals in descending order\n    rsort($numerals);\n    // Return\
    \ empty string if number is out of range\n    if ($number < 1 || $number > 1000)\
    \ {\n        return '';\n    }\n    // Convert number to Roman Numerals\n    $result\
    \ = '';\n    foreach ($numerals as $numeral) {\n        while ($number >= $numeral)\
    \ {\n            $result .= $roman_numerals[$numeral];\n            $number -=\
    \ $numeral;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n\t$roman_numerals = array(\n\t\t'M' => 1000,\n\t\t'CM' => 900,\n\t\t'D' =>\
    \ 500,\n\t\t'CD' => 400,\n\t\t'C' => 100,\n\t\t'XC' => 90,\n\t\t'L' => 50,\n\t\
    \t'XL' => 40,\n\t\t'X' => 10,\n\t\t'IX' => 9,\n\t\t'V' => 5,\n\t\t'IV' => 4,\n\
    \t\t'I' => 1\n\t);\n\t$result = '';\n\twhile ($number > 0) {\n\t\tforeach ($roman_numerals\
    \ as $roman => $value) {\n\t\t\tif ($number >= $value) {\n\t\t\t\t$number -= $value;\n\
    \t\t\t\t$result .= $roman;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn strtolower($result);\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n\t$integer = array(1,4,5,9,10,40,50,90,100,400,500,900,1000);\n\t$numerals\
    \ = array('i','iv','v','ix','x','xl','l','xc','c','cd','d','cm','m');\n\t$numeral\
    \ = '';\n\t$a = 12;\n\twhile($number > 0) {\n\t\tif ($number >= $integer[$a])\
    \ {\n\t\t\t$number -= $integer[$a];\n\t\t\t$numeral .= $numerals[$a];\n\t\t} else\
    \ {\n\t\t\t$a--;\n\t\t}\n\t}\n\treturn $numeral;\n}\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $val = array(1000, 500, 100, 50, 10, 5, 1);\n    $chr = array('m', 'd',\
    \ 'c', 'l', 'x', 'v', 'i');\n    $roman = '';\n    for ($i = 0; $i < count($val);\
    \ $i++) {\n        while ($number >= $val[$i]) {\n            $number -= $val[$i];\n\
    \            $roman .= $chr[$i];\n        }\n    }\n    return $roman;\n}\n\n\
    echo int_to_mini_roman(19);\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "xviiii\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0msb4iay.php:32\n\
    Stack trace:\n#0 /tmp/tmp0msb4iay.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp0msb4iay.php\
    \ on line 32\n"
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n\t$result = '';\n\t$special_case = array(\n\t\t1000 => 'm',\n\t\t900 => 'cm',\n\
    \t\t500 => 'd',\n\t\t400 => 'cd',\n\t\t100 => 'c',\n\t\t90 => 'xc',\n\t\t50 =>\
    \ 'l',\n\t\t40 => 'xl',\n\t\t10 => 'x',\n\t\t9 => 'ix',\n\t\t5 => 'v',\n\t\t4\
    \ => 'iv',\n\t\t1 => 'i',\n\t);\n\tforeach ($special_case as $int => $roman) {\n\
    \t\twhile ($number >= $int) {\n\t\t\t$result .= $roman;\n\t\t\t$number -= $int;\n\
    \t\t}\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $str = \"\";\n  $digit_array = array(1 => \"i\", 4 => \"iv\", 5 => \"v\"\
    , 9 => \"ix\", 10 => \"x\", 40 => \"xl\", 50 => \"l\", 90 => \"xc\", 100 => \"\
    c\", 400 => \"cd\", 500 => \"d\", 900 => \"cm\", 1000 => \"m\");\n  $divider_array\
    \ = array(1 => \"i\", 4 => \"iv\", 5 => \"v\", 9 => \"ix\", 10 => \"x\", 40 =>\
    \ \"xl\", 50 => \"l\", 90 => \"xc\", 100 => \"c\", 400 => \"cd\", 500 => \"d\"\
    , 900 => \"cm\", 1000 => \"m\");\n  while ($number > 0) {\n    if ($number >=\
    \ 1000) {\n      $number -= 1000;\n      $str .= \"m\";\n    } elseif ($number\
    \ >= 900) {\n      $number -= 900;\n      $str .= \"cm\";\n    } elseif ($number\
    \ >= 500) {\n      $number -= 500;\n      $str .= \"d\";\n    } elseif ($number\
    \ >= 400) {\n      $number -= 400;\n      $str .= \"cd\";\n    } elseif ($number\
    \ >= 100) {\n      $number -= 100;\n      $str .= \"c\";\n    } elseif ($number\
    \ >= 90) {\n      $number -= 90;\n      $str .= \"xc\";\n    } elseif ($number\
    \ >= 50) {\n      $number -= 50;\n      $str .= \"l\";\n    } elseif ($number\
    \ >= 40) {\n      $number -= 40;\n      $str .= \"xl\";\n    } elseif ($number\
    \ >= 10) {\n      $number -= 10;\n      $str .= \"x\";\n    } elseif ($number\
    \ >= 9) {\n      $number -= 9;\n      $str .= \"ix\";\n    } elseif ($number >=\
    \ 5) {\n      $number -= 5;\n      $str .= \"v\";\n    } elseif ($number >= 4)\
    \ {\n      $number -= 4;\n      $str .= \"iv\";\n    } elseif ($number >= 1) {\n\
    \      $number -= 1;\n      $str\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmp0htllpr1.php
    on line 56

    '
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n\t$result = '';\n\t// Your code here\n\t$roman_numerals = [\n\t\t'M' => 1000,\n\
    \t\t'D' => 500,\n\t\t'C' => 100,\n\t\t'L' => 50,\n\t\t'X' => 10,\n\t\t'V' => 5,\n\
    \t\t'I' => 1\n\t];\n\tforeach ($roman_numerals as $roman => $int) {\n\t\t$matches\
    \ = intdiv($number, $int);\n\t\t$result .= str_repeat($roman, $matches);\n\t\t\
    $number = $number % $int;\n\t}\n\treturn $result;\n}\n\necho int_to_mini_roman(152);\n\
    echo \"<br>\";\necho int_to_mini_roman(426);\necho \"<br>\";\necho int_to_mini_roman(19);\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "CLII<br>CCCCXXVI<br>XVIIII\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp4ri086l5.php:42\nStack trace:\n#0 /tmp/tmp4ri086l5.php(58): test()\n\
    #1 {main}\n  thrown in /tmp/tmp4ri086l5.php on line 42\n"
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n\t$numerals = array(1 => 'i', 5 => 'v', 10 => 'x', 50 => 'l', 100 => 'c',\
    \ 500 => 'd', 1000 => 'm');\n\t$place = 1000;\n\t$result = '';\n\twhile ($number\
    \ > 0) {\n\t\t$digit = $number % 10;\n\t\t$result = $numerals[$place] . $result;\n\
    \t\tswitch ($digit) {\n\t\t\tcase 1:\n\t\t\tcase 2:\n\t\t\tcase 3:\n\t\t\t\t$result\
    \ = str_repeat($numerals[$place/10], $digit) . $result;\n\t\t\t\tbreak;\n\t\t\t\
    case 4:\n\t\t\t\t$result = $numerals[$place/10] . $numerals[$place] . $result;\n\
    \t\t\t\tbreak;\n\t\t\tcase 5:\n\t\t\t\t$result = $numerals[$place] . $result;\n\
    \t\t\t\tbreak;\n\t\t\tcase 6:\n\t\t\tcase 7:\n\t\t\tcase 8:\n\t\t\t\t$result =\
    \ $numerals[$place] . str_repeat($numerals[$place/10], $digit - 5) . $result;\n\
    \t\t\t\tbreak;\n\t\t\tcase 9:\n\t\t\t\t$result = $numerals[$place/10] . $numerals[$place*10]\
    \ . $result;\n\t\t\t\tbreak;\n\t\t}\n\t\t$number = (int)($number / 10);\n\t\t\
    $place = $place / 10;\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 10000 in /tmp/tmp_in4fqkw.php on line 37\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_in4fqkw.php:51\nStack\
    \ trace:\n#0 /tmp/tmp_in4fqkw.php(67): test()\n#1 {main}\n  thrown in /tmp/tmp_in4fqkw.php\
    \ on line 51\n"
  timestamp: 1660029132
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $result = \"\";\n    $numerals = array(\"m\" => 1000, \"cm\" => 900,\
    \ \"d\" => 500, \"cd\" => 400, \"c\" => 100, \"xc\" => 90, \"l\" => 50, \"xl\"\
    \ => 40, \"x\" => 10, \"ix\" => 9, \"v\" => 5, \"iv\" => 4, \"i\" => 1);\n   \
    \ foreach ($numerals as $key => $value) {\n        while ($number >= $value) {\n\
    \            $result .= $key;\n            $number -= $value;\n        }\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660029132
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk3aer_bx.php:21\n\
    Stack trace:\n#0 /tmp/tmpk3aer_bx.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpk3aer_bx.php\
    \ on line 21\n"
  timestamp: 1660029131
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n\t$numerals = array(\n\t\t1 => 'i',\n\t\t4 => 'iv',\n\t\t5 => 'v',\n\t\t\
    9 => 'ix',\n\t\t10 => 'x',\n\t\t40 => 'xl',\n\t\t50 => 'l',\n\t\t90 => 'xc',\n\
    \t\t100 => 'c',\n\t\t400 => 'cd',\n\t\t500 => 'd',\n\t\t900 => 'cm',\n\t\t1000\
    \ => 'm'\n\t);\n\tif ($number == 0) {\n\t\treturn '';\n\t}\n\t$results = '';\n\
    \tforeach (array_reverse($numerals) as $val => $numeral) {\n\t\tif ($number >=\
    \ $val) {\n\t\t\t$results .= str_repeat($numeral, intval($number / $val));\n\t\
    \t\t$number = $number % $val;\n\t\t}\n\t}\n\treturn $results;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught DivisionByZeroError: Division by zero in /tmp/tmpr5k3jdch.php:34\n\
    Stack trace:\n#0 /tmp/tmpr5k3jdch.php(42): int_to_mini_roman(19)\n#1 /tmp/tmpr5k3jdch.php(46):\
    \ candidate(19)\n#2 /tmp/tmpr5k3jdch.php(62): test()\n#3 {main}\n  thrown in /tmp/tmpr5k3jdch.php\
    \ on line 34\n"
  timestamp: 1660029132
